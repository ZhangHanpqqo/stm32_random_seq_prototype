
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ee8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  08018180  08018180  00028180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019a98  08019a98  00029a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019aa0  08019aa0  00029aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019aa4  08019aa4  00029aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08019aa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000216c  20000098  08019b40  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002204  08019b40  00032204  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY
 14 .debug_info   00049dd7  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000941f  00000000  00000000  00079ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000039d0  00000000  00000000  00083300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d0f  00000000  00000000  00086cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00046608  00000000  00000000  000899df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000504f2  00000000  00000000  000cffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195f5f  00000000  00000000  001204d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ff00  00000000  00000000  002b6438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c6338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018168 	.word	0x08018168

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	08018168 	.word	0x08018168

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tTapeDelayExt_initToPool>:
    * you know you will write some comments one day, right
    */


void tTapeDelayExt_initToPool (tTapeDelayExt* const dlext, uint32_t* delays, uint32_t maxDelay, uint32_t numPoint, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
//	_tMempool* m = *mp;
    _tTapeDelayExt* d = *dlext = (_tTapeDelayExt*) malloc(sizeof(_tTapeDelayExt));
 80005e2:	2010      	movs	r0, #16
 80005e4:	f017 f972 	bl	80178cc <malloc>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]

    tTapeDelay_initToPool(&(d->tdelay), delays[0], maxDelay, mp);
 80005f6:	6938      	ldr	r0, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000604:	6a3a      	ldr	r2, [r7, #32]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	eeb0 0a67 	vmov.f32	s0, s15
 800060c:	f000 f981 	bl	8000912 <tTapeDelay_initToPool>
    d->numPoint = numPoint;
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	605a      	str	r2, [r3, #4]
    d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f017 f956 	bl	80178cc <malloc>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	609a      	str	r2, [r3, #8]
    d->lastOuts = (Lfloat *) malloc(sizeof(Lfloat) * numPoint);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f017 f94d 	bl	80178cc <malloc>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < numPoint; i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e015      	b.n	800066c <tTapeDelayExt_initToPool+0x98>
    	d->delays[i] = delays[i];
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	441a      	add	r2, r3
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	601a      	str	r2, [r3, #0]
    	d->lastOuts[i] = 0.0f;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < numPoint; i++){
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8e5      	bhi.n	8000640 <tTapeDelayExt_initToPool+0x6c>
    }

}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <tTapeDelayExt_tick>:
	_tTapeDelayExt* d = *dlext;
//	_tTapeDelay* dt = &(d->tdelay);
	for (unsigned i = 0; i < (d->tdelay)->maxDelay; i++) (d->tdelay)->buff[i] = 0;
}

void tTapeDelayExt_tick(tTapeDelayExt* const dlext, Lfloat input){
 800067e:	b590      	push	{r4, r7, lr}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	ed87 0a00 	vstr	s0, [r7]
	_tTapeDelayExt* d = *dlext;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = (d->tdelay);
	tTapeDelay_tick(&(d->tdelay), input);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	ed97 0a00 	vldr	s0, [r7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f97f 	bl	800099a <tTapeDelay_tick>
	d->lastOuts[0] = (d->tdelay)->lastOut;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	68d2      	ldr	r2, [r2, #12]
 80006a6:	601a      	str	r2, [r3, #0]

	for(int i = 1; i < d->numPoint; i++){
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e01b      	b.n	80006e6 <tTapeDelayExt_tick+0x68>
		d->lastOuts[i] = tTapeDelay_tapOut(&(d->tdelay), d->delays[i]);
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	18d4      	adds	r4, r2, r3
 80006ce:	eeb0 0a67 	vmov.f32	s0, s15
 80006d2:	4608      	mov	r0, r1
 80006d4:	f000 fa75 	bl	8000bc2 <tTapeDelay_tapOut>
 80006d8:	eef0 7a40 	vmov.f32	s15, s0
 80006dc:	edc4 7a00 	vstr	s15, [r4]
	for(int i = 1; i < d->numPoint; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8de      	bhi.n	80006ae <tTapeDelayExt_tick+0x30>
	}

}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}

080006fa <tTapeDelayExt_setDelay>:

void tTapeDelayExt_setDelay(tTapeDelayExt* const dlext, uint32_t* delays){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = &(d->tdelay);
	tTapeDelay_setDelay(&(d->tdelay), delays[0]);
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000718:	eeb0 0a67 	vmov.f32	s0, s15
 800071c:	4610      	mov	r0, r2
 800071e:	f000 fa30 	bl	8000b82 <tTapeDelay_setDelay>
	for (int i = 0; i < d->numPoint; i++){
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e00d      	b.n	8000744 <tTapeDelayExt_setDelay+0x4a>
	    	d->delays[i] = delays[i];
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	441a      	add	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	6899      	ldr	r1, [r3, #8]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < d->numPoint; i++){
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8ec      	bhi.n	8000728 <tTapeDelayExt_setDelay+0x2e>
	    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <tTapeDelayExt_setNumPoint>:

void tTapeDelayExt_setNumPoint(tTapeDelayExt* const dlext, int numPoint){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	free(d->delays);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f017 f8b5 	bl	80178dc <free>
	d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f017 f8a8 	bl	80178cc <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	609a      	str	r2, [r3, #8]


	uint32_t* t = (float *)malloc(sizeof(float) * d->numPoint);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f017 f89e 	bl	80178cc <malloc>
 8000790:	4603      	mov	r3, r0
 8000792:	60bb      	str	r3, [r7, #8]
	memcpy(t, d->lastOuts, sizeof(float) * d->numPoint);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	68d9      	ldr	r1, [r3, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f017 f993 	bl	8017acc <memcpy>
	free(d->lastOuts);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f017 f896 	bl	80178dc <free>
	d->lastOuts = (float *)malloc(sizeof(float) * numPoint);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f017 f889 	bl	80178cc <malloc>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	60da      	str	r2, [r3, #12]
	memcpy((d->lastOuts), t, (numPoint < d->numPoint ? numPoint : d->numPoint) * sizeof(uint32_t));
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	bf28      	it	cs
 80007d0:	4613      	movcs	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	461a      	mov	r2, r3
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	f017 f978 	bl	8017acc <memcpy>
	free(t);
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f017 f87d 	bl	80178dc <free>

	d->numPoint = numPoint;
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	605a      	str	r2, [r3, #4]
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_LEAF_clip>:

#endif

// cannot find things in delay_math.h
Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80007fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80007fe:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 8000802:	ed97 7a02 	vldr	s14, [r7, #8]
 8000806:	edd7 7a03 	vldr	s15, [r7, #12]
 800080a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d501      	bpl.n	8000818 <_LEAF_clip+0x28>
    {
        return min;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	e00b      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else if (val > max)
 8000818:	ed97 7a02 	vldr	s14, [r7, #8]
 800081c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	dd01      	ble.n	800082e <_LEAF_clip+0x3e>
    {
        return max;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	e000      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 800082e:	68bb      	ldr	r3, [r7, #8]
    }
}
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb0 0a67 	vmov.f32	s0, s15
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_LEAF_interpolate_hermite_x>:

Lfloat _LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
 8000842:	b480      	push	{r7}
 8000844:	b08d      	sub	sp, #52	; 0x34
 8000846:	af00      	add	r7, sp, #0
 8000848:	ed87 0a05 	vstr	s0, [r7, #20]
 800084c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000850:	ed87 1a03 	vstr	s2, [r7, #12]
 8000854:	edc7 1a02 	vstr	s3, [r7, #8]
 8000858:	ed87 2a01 	vstr	s4, [r7, #4]
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8000860:	ed97 7a03 	vldr	s14, [r7, #12]
 8000864:	edd7 7a05 	vldr	s15, [r7, #20]
 8000868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Lfloat y0my1 = yy0 - yy1;
 8000878:	ed97 7a05 	vldr	s14, [r7, #20]
 800087c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000884:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8000888:	ed97 7a04 	vldr	s14, [r7, #16]
 800088c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000894:	edd7 6a02 	vldr	s13, [r7, #8]
 8000898:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800089c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80008ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	edc7 7a08 	vstr	s15, [r7, #32]
    Lfloat c2 = y0my1 + c1 - c3;
 80008b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80008bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80008c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]

    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80008d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80008d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80008e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000900:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	3734      	adds	r7, #52	; 0x34
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	ed87 0a02 	vstr	s0, [r7, #8]
 800091e:	6079      	str	r1, [r7, #4]
 8000920:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	617b      	str	r3, [r7, #20]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 8000928:	6979      	ldr	r1, [r7, #20]
 800092a:	202c      	movs	r0, #44	; 0x2c
 800092c:	f000 face 	bl	8000ecc <mpool_alloc>
 8000930:	4602      	mov	r2, r0
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	619a      	str	r2, [r3, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	6979      	ldr	r1, [r7, #20]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fabc 	bl	8000ecc <mpool_alloc>
 8000954:	4602      	mov	r2, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	609a      	str	r2, [r3, #8]

    d->gain = 1.0f;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000960:	605a      	str	r2, [r3, #4]

    d->lastIn = 0.0f;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	60da      	str	r2, [r3, #12]

    d->idx = 0.0f;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
    d->inc = 1.0f;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000980:	621a      	str	r2, [r3, #32]
    d->inPoint = 0;
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]

    tTapeDelay_setDelay(dl, delay);
 8000988:	ed97 0a02 	vldr	s0, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f8f8 	bl	8000b82 <tTapeDelay_setDelay>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]

    d->buff[d->inPoint] = input * d->gain;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c6:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <tTapeDelay_tick+0x4c>
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]

    int idx =  (int) d->idx;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f0:	ee17 3a90 	vmov	r3, s15
 80009f4:	60fb      	str	r3, [r7, #12]
    Lfloat alpha = d->idx - idx;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0a:	edc7 7a02 	vstr	s15, [r7, #8]

    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6899      	ldr	r1, [r3, #8]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	6992      	ldr	r2, [r2, #24]
 8000a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8000a24:	fb00 f202 	mul.w	r2, r0, r2
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a3c:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a52:	fb00 f303 	mul.w	r3, r0, r3
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a5c:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	6899      	ldr	r1, [r3, #8]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3302      	adds	r3, #2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a72:	fb00 f303 	mul.w	r3, r0, r3
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a7c:	ed93 6a00 	vldr	s12, [r3]
 8000a80:	ed97 2a02 	vldr	s4, [r7, #8]
 8000a84:	eef0 1a46 	vmov.f32	s3, s12
 8000a88:	eeb0 1a66 	vmov.f32	s2, s13
 8000a8c:	eef0 0a47 	vmov.f32	s1, s14
 8000a90:	eeb0 0a67 	vmov.f32	s0, s15
 8000a94:	f7ff fed5 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000a98:	eef0 7a40 	vmov.f32	s15, s0
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	edc3 7a03 	vstr	s15, [r3, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab8:	edc7 7a05 	vstr	s15, [r7, #20]
    while (diff < 0.f) diff += d->maxDelay;
 8000abc:	e00b      	b.n	8000ad6 <tTapeDelay_tick+0x13c>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad2:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d4ec      	bmi.n	8000abe <tTapeDelay_tick+0x124>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000aea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	ed93 7a07 	vldr	s14, [r3, #28]
 8000af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	edc3 7a08 	vstr	s15, [r3, #32]

    d->idx += d->inc;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8000b20:	e00d      	b.n	8000b3e <tTapeDelay_tick+0x1a4>
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	dae3      	bge.n	8000b22 <tTapeDelay_tick+0x188>

    if (d->lastOut)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	d002      	beq.n	8000b70 <tTapeDelay_tick+0x1d6>
        return d->lastOut;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	e001      	b.n	8000b74 <tTapeDelay_tick+0x1da>
    return 0.0f;
 8000b70:	f04f 0300 	mov.w	r3, #0
}
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60fb      	str	r3, [r7, #12]
    d->delay = _LEAF_clip(1.f, delay,  d->maxDelay);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba0:	eeb0 1a67 	vmov.f32	s2, s15
 8000ba4:	edd7 0a00 	vldr	s1, [r7]
 8000ba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bac:	f7ff fe20 	bl	80007f0 <_LEAF_clip>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <tTapeDelay_tapOut>:

Lfloat tTapeDelay_tapOut (tTapeDelay* const dl, Lfloat tapDelay)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b088      	sub	sp, #32
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	61bb      	str	r3, [r7, #24]

    Lfloat tap = (Lfloat) d->inPoint - tapDelay - 1.f;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000be0:	edd7 7a00 	vldr	s15, [r7]
 8000be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf0:	edc7 7a07 	vstr	s15, [r7, #28]

    // Check for wraparound.
    while ( tap < 0.f )   tap += (Lfloat)d->maxDelay;
 8000bf4:	e00b      	b.n	8000c0e <tTapeDelay_tapOut+0x4c>
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0a:	edc7 7a07 	vstr	s15, [r7, #28]
 8000c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d4ec      	bmi.n	8000bf6 <tTapeDelay_tapOut+0x34>

    int idx =  (int) tap;
 8000c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c24:	ee17 3a90 	vmov	r3, s15
 8000c28:	617b      	str	r3, [r7, #20]

    Lfloat alpha = tap - idx;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3c:	edc7 7a04 	vstr	s15, [r7, #16]

    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	6899      	ldr	r1, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	6992      	ldr	r2, [r2, #24]
 8000c52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c56:	fb00 f202 	mul.w	r2, r0, r2
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	6899      	ldr	r1, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c84:	fb00 f303 	mul.w	r3, r0, r3
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c8e:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	6899      	ldr	r1, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000ca4:	fb00 f303 	mul.w	r3, r0, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000cae:	ed93 6a00 	vldr	s12, [r3]
 8000cb2:	ed97 2a04 	vldr	s4, [r7, #16]
 8000cb6:	eef0 1a46 	vmov.f32	s3, s12
 8000cba:	eeb0 1a66 	vmov.f32	s2, s13
 8000cbe:	eef0 0a47 	vmov.f32	s1, s14
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f7ff fdbc 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000cca:	ed87 0a03 	vstr	s0, [r7, #12]
                                              alpha);

    return samp;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	ee07 3a90 	vmov	s15, r3

}
 8000cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cec:	6079      	str	r1, [r7, #4]
 8000cee:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8000cf6:	69f9      	ldr	r1, [r7, #28]
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f000 f8e7 	bl	8000ecc <mpool_alloc>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d26:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000de8 <tRamp_initToPool+0x108>
 8000d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d504      	bpl.n	8000d84 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	61da      	str	r2, [r3, #28]
 8000d82:	e002      	b.n	8000d8a <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	3a83126f 	.word	0x3a83126f

08000dec <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685c      	ldr	r4, [r3, #4]
 8000e40:	2010      	movs	r0, #16
 8000e42:	f000 f902 	bl	800104a <mpool_align>
 8000e46:	4603      	mov	r3, r0
 8000e48:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d203      	bcs.n	8000e6a <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e68:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f000 f8ea 	bl	8001066 <create_node>
 8000e92:	4602      	mov	r2, r0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	615a      	str	r2, [r3, #20]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	331c      	adds	r3, #28
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68b8      	ldr	r0, [r7, #8]
 8000eb6:	f7ff ffbb 	bl	8000e30 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f103 021c 	add.w	r2, r3, #28
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	619a      	str	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08d      	sub	sp, #52	; 0x34
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000edc:	3201      	adds	r2, #1
 8000ede:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d116      	bne.n	8000f16 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d206      	bcs.n	8000f06 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f9f8 	bl	80012f4 <LEAF_internalErrorCallback>
 8000f04:	e005      	b.n	8000f12 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f9f1 	bl	80012f4 <LEAF_internalErrorCallback>
        }
        return NULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e095      	b.n	8001042 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f897 	bl	800104a <mpool_align>
 8000f1c:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000f24:	e01c      	b.n	8000f60 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d116      	bne.n	8000f60 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d206      	bcs.n	8000f50 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2101      	movs	r1, #1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f9d3 	bl	80012f4 <LEAF_internalErrorCallback>
 8000f4e:	e005      	b.n	8000f5c <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f9cc 	bl	80012f4 <LEAF_internalErrorCallback>
            }
            return NULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e070      	b.n	8001042 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d8dd      	bhi.n	8000f26 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d924      	bls.n	8000fd0 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	f000 f84d 	bl	8001066 <create_node>
 8000fcc:	6238      	str	r0, [r7, #32]
 8000fce:	e008      	b.n	8000fe2 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d102      	bne.n	8000ff2 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6a3a      	ldr	r2, [r7, #32]
 8000ff0:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8000ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ff4:	f000 f855 	bl	80010a2 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	440b      	add	r3, r1
 8001008:	441a      	add	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd12      	ble.n	800103e <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e007      	b.n	8001034 <mpool_alloc+0x168>
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3301      	adds	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	429a      	cmp	r2, r3
 800103c:	d8f2      	bhi.n	8001024 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	681b      	ldr	r3, [r3, #0]
#endif
}
 8001042:	4618      	mov	r0, r3
 8001044:	372c      	adds	r7, #44	; 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3307      	adds	r3, #7
 8001056:	f023 0307 	bic.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	441a      	add	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]
    node->next = next;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	609a      	str	r2, [r3, #8]
    node->size = size;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	60da      	str	r2, [r3, #12]
    return node;
 8001094:	697b      	ldr	r3, [r7, #20]
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6892      	ldr	r2, [r2, #8]
 80010ba:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6852      	ldr	r2, [r2, #4]
 80010cc:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3318      	adds	r3, #24
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f804 	bl	800110a <tMempool_initToPool>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	2018      	movs	r0, #24
 8001122:	f7ff fed3 	bl	8000ecc <mpool_alloc>
 8001126:	4602      	mov	r2, r0
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff fe76 	bl	8000e30 <mpool_create>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800115c:	6979      	ldr	r1, [r7, #20]
 800115e:	2018      	movs	r0, #24
 8001160:	f7ff feb4 	bl	8000ecc <mpool_alloc>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001190:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80011b0 <tCycle_initToPool+0x64>
 8001194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80011a4:	615a      	str	r2, [r3, #20]
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	4f800000 	.word	0x4f800000

080011b4 <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d2:	edd7 7a00 	vldr	s15, [r7]
 80011d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	ee17 2a90 	vmov	r2, s15
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	609a      	str	r2, [r3, #8]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	460b      	mov	r3, r1
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8001206:	69f9      	ldr	r1, [r7, #28]
 8001208:	2018      	movs	r0, #24
 800120a:	f7ff fe5f 	bl	8000ecc <mpool_alloc>
 800120e:	4602      	mov	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	615a      	str	r2, [r3, #20]
}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6178      	str	r0, [r7, #20]
 8001248:	ed87 0a04 	vstr	s0, [r7, #16]
 800124c:	60f9      	str	r1, [r7, #12]
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff fe1f 	bl	8000ea0 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8001268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800126c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001280:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012d4 <LEAF_init+0x94>
 8001284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LEAF_init+0x98>)
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e009      	b.n	80012ba <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	330e      	adds	r3, #14
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	ddf2      	ble.n	80012a6 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2200      	movs	r2, #0
 80012ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40c90fdb 	.word	0x40c90fdb
 80012d8:	080012dd 	.word	0x080012dd

080012dc <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	330e      	adds	r3, #14
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	2201      	movs	r2, #1
 800130c:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	4611      	mov	r1, r2
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MIDI_Application+0x54>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d111      	bne.n	8001354 <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MIDI_Application+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d10d      	bne.n	8001354 <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8001338:	2240      	movs	r2, #64	; 0x40
 800133a:	4911      	ldr	r1, [pc, #68]	; (8001380 <MIDI_Application+0x5c>)
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <MIDI_Application+0x60>)
 800133e:	f003 fc34 	bl	8004baa <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MIDI_Application+0x58>)
 8001344:	2203      	movs	r2, #3
 8001346:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MIDI_Application+0x64>)
 8001350:	f008 fa8a 	bl	8009868 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MIDI_Application+0x54>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d10b      	bne.n	8001374 <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MIDI_Application+0x58>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <MIDI_Application+0x60>)
 8001364:	f003 fbbb 	bl	8004ade <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MIDI_Application+0x64>)
 8001370:	f008 fa7a 	bl	8009868 <HAL_GPIO_WritePin>
	}
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20001da0 	.word	0x20001da0
 800137c:	20000000 	.word	0x20000000
 8001380:	30000000 	.word	0x30000000
 8001384:	30000460 	.word	0x30000460
 8001388:	58020400 	.word	0x58020400

0800138c <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 8001394:	4bab      	ldr	r3, [pc, #684]	; (8001644 <ProcessReceivedMidiDatas+0x2b8>)
 8001396:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 814a 	beq.w	800163a <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 80013a6:	e142      	b.n	800162e <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4ba6      	ldr	r3, [pc, #664]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 80013bc:	705a      	strb	r2, [r3, #1]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 80013ca:	709a      	strb	r2, [r3, #2]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b9c      	ldr	r3, [pc, #624]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 80013d8:	70da      	strb	r2, [r3, #3]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 80013e0:	4b99      	ldr	r3, [pc, #612]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2bf0      	cmp	r3, #240	; 0xf0
 80013e8:	f000 8120 	beq.w	800162c <ProcessReceivedMidiDatas+0x2a0>
 80013ec:	2bf0      	cmp	r3, #240	; 0xf0
 80013ee:	f300 811e 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 80013f2:	2be0      	cmp	r3, #224	; 0xe0
 80013f4:	f000 811b 	beq.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 80013f8:	2be0      	cmp	r3, #224	; 0xe0
 80013fa:	f300 8118 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 80013fe:	2bd0      	cmp	r3, #208	; 0xd0
 8001400:	f000 8115 	beq.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 8001404:	2bd0      	cmp	r3, #208	; 0xd0
 8001406:	f300 8112 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 800140a:	2bc0      	cmp	r3, #192	; 0xc0
 800140c:	f000 810f 	beq.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 8001410:	2bc0      	cmp	r3, #192	; 0xc0
 8001412:	f300 810c 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 8001416:	2bb0      	cmp	r3, #176	; 0xb0
 8001418:	d02f      	beq.n	800147a <ProcessReceivedMidiDatas+0xee>
 800141a:	2bb0      	cmp	r3, #176	; 0xb0
 800141c:	f300 8107 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 8001420:	2ba0      	cmp	r3, #160	; 0xa0
 8001422:	f000 8104 	beq.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 8001426:	2ba0      	cmp	r3, #160	; 0xa0
 8001428:	f300 8101 	bgt.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 800142c:	2b80      	cmp	r3, #128	; 0x80
 800142e:	d002      	beq.n	8001436 <ProcessReceivedMidiDatas+0xaa>
 8001430:	2b90      	cmp	r3, #144	; 0x90
 8001432:	d011      	beq.n	8001458 <ProcessReceivedMidiDatas+0xcc>
 8001434:	e0fb      	b.n	800162e <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 8001436:	4b84      	ldr	r3, [pc, #528]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b83      	ldr	r3, [pc, #524]	; (800164c <ProcessReceivedMidiDatas+0x2c0>)
 800143e:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 8001442:	78db      	ldrb	r3, [r3, #3]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b82      	ldr	r3, [pc, #520]	; (8001650 <ProcessReceivedMidiDatas+0x2c4>)
 8001448:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001450:	4880      	ldr	r0, [pc, #512]	; (8001654 <ProcessReceivedMidiDatas+0x2c8>)
 8001452:	f008 fa09 	bl	8009868 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 8001456:	e0ea      	b.n	800162e <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 8001458:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <ProcessReceivedMidiDatas+0x2c0>)
 8001460:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8001462:	4b79      	ldr	r3, [pc, #484]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 8001464:	78db      	ldrb	r3, [r3, #3]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b79      	ldr	r3, [pc, #484]	; (8001650 <ProcessReceivedMidiDatas+0x2c4>)
 800146a:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	4878      	ldr	r0, [pc, #480]	; (8001654 <ProcessReceivedMidiDatas+0x2c8>)
 8001474:	f008 f9f8 	bl	8009868 <HAL_GPIO_WritePin>

					break;
 8001478:	e0d9      	b.n	800162e <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 800147a:	4b73      	ldr	r3, [pc, #460]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 800147c:	789b      	ldrb	r3, [r3, #2]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <ProcessReceivedMidiDatas+0x2cc>)
 8001482:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 8001484:	4b70      	ldr	r3, [pc, #448]	; (8001648 <ProcessReceivedMidiDatas+0x2bc>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <ProcessReceivedMidiDatas+0x2d0>)
 800148c:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 800148e:	4b72      	ldr	r3, [pc, #456]	; (8001658 <ProcessReceivedMidiDatas+0x2cc>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b71      	ldr	r3, [pc, #452]	; (800165c <ProcessReceivedMidiDatas+0x2d0>)
 8001496:	7819      	ldrb	r1, [r3, #0]
 8001498:	4b71      	ldr	r3, [pc, #452]	; (8001660 <ProcessReceivedMidiDatas+0x2d4>)
 800149a:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 800149c:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <ProcessReceivedMidiDatas+0x2cc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	2b5e      	cmp	r3, #94	; 0x5e
 80014a4:	f200 80c3 	bhi.w	800162e <ProcessReceivedMidiDatas+0x2a2>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <ProcessReceivedMidiDatas+0x124>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	0800162f 	.word	0x0800162f
 80014b4:	0800162f 	.word	0x0800162f
 80014b8:	0800162f 	.word	0x0800162f
 80014bc:	0800162f 	.word	0x0800162f
 80014c0:	0800162f 	.word	0x0800162f
 80014c4:	0800162f 	.word	0x0800162f
 80014c8:	0800162f 	.word	0x0800162f
 80014cc:	0800162f 	.word	0x0800162f
 80014d0:	0800162f 	.word	0x0800162f
 80014d4:	0800162f 	.word	0x0800162f
 80014d8:	0800162f 	.word	0x0800162f
 80014dc:	0800162f 	.word	0x0800162f
 80014e0:	0800162f 	.word	0x0800162f
 80014e4:	0800162f 	.word	0x0800162f
 80014e8:	0800162f 	.word	0x0800162f
 80014ec:	0800162f 	.word	0x0800162f
 80014f0:	0800162f 	.word	0x0800162f
 80014f4:	0800162f 	.word	0x0800162f
 80014f8:	0800162f 	.word	0x0800162f
 80014fc:	0800162f 	.word	0x0800162f
 8001500:	0800162f 	.word	0x0800162f
 8001504:	0800162f 	.word	0x0800162f
 8001508:	0800162f 	.word	0x0800162f
 800150c:	0800162f 	.word	0x0800162f
 8001510:	0800162f 	.word	0x0800162f
 8001514:	0800162f 	.word	0x0800162f
 8001518:	0800162f 	.word	0x0800162f
 800151c:	0800162f 	.word	0x0800162f
 8001520:	0800162f 	.word	0x0800162f
 8001524:	0800162f 	.word	0x0800162f
 8001528:	0800162f 	.word	0x0800162f
 800152c:	0800162f 	.word	0x0800162f
 8001530:	0800162f 	.word	0x0800162f
 8001534:	0800162f 	.word	0x0800162f
 8001538:	0800162f 	.word	0x0800162f
 800153c:	0800162f 	.word	0x0800162f
 8001540:	0800162f 	.word	0x0800162f
 8001544:	0800162f 	.word	0x0800162f
 8001548:	0800162f 	.word	0x0800162f
 800154c:	0800162f 	.word	0x0800162f
 8001550:	0800162f 	.word	0x0800162f
 8001554:	0800162f 	.word	0x0800162f
 8001558:	0800162f 	.word	0x0800162f
 800155c:	0800162f 	.word	0x0800162f
 8001560:	0800162f 	.word	0x0800162f
 8001564:	0800162f 	.word	0x0800162f
 8001568:	0800162f 	.word	0x0800162f
 800156c:	0800162f 	.word	0x0800162f
 8001570:	0800162f 	.word	0x0800162f
 8001574:	0800162f 	.word	0x0800162f
 8001578:	0800162f 	.word	0x0800162f
 800157c:	0800162f 	.word	0x0800162f
 8001580:	0800162f 	.word	0x0800162f
 8001584:	0800162f 	.word	0x0800162f
 8001588:	0800162f 	.word	0x0800162f
 800158c:	0800162f 	.word	0x0800162f
 8001590:	0800162f 	.word	0x0800162f
 8001594:	0800162f 	.word	0x0800162f
 8001598:	0800162f 	.word	0x0800162f
 800159c:	0800162f 	.word	0x0800162f
 80015a0:	0800162f 	.word	0x0800162f
 80015a4:	0800162f 	.word	0x0800162f
 80015a8:	0800162f 	.word	0x0800162f
 80015ac:	0800162f 	.word	0x0800162f
 80015b0:	0800162f 	.word	0x0800162f
 80015b4:	0800162f 	.word	0x0800162f
 80015b8:	0800162f 	.word	0x0800162f
 80015bc:	0800162f 	.word	0x0800162f
 80015c0:	0800162f 	.word	0x0800162f
 80015c4:	0800162f 	.word	0x0800162f
 80015c8:	0800162f 	.word	0x0800162f
 80015cc:	0800162f 	.word	0x0800162f
 80015d0:	0800162f 	.word	0x0800162f
 80015d4:	0800162f 	.word	0x0800162f
 80015d8:	0800162f 	.word	0x0800162f
 80015dc:	0800162f 	.word	0x0800162f
 80015e0:	0800162f 	.word	0x0800162f
 80015e4:	0800162f 	.word	0x0800162f
 80015e8:	0800162f 	.word	0x0800162f
 80015ec:	0800162f 	.word	0x0800162f
 80015f0:	0800162f 	.word	0x0800162f
 80015f4:	0800162f 	.word	0x0800162f
 80015f8:	0800162f 	.word	0x0800162f
 80015fc:	0800162f 	.word	0x0800162f
 8001600:	0800162f 	.word	0x0800162f
 8001604:	0800162f 	.word	0x0800162f
 8001608:	0800162f 	.word	0x0800162f
 800160c:	0800162f 	.word	0x0800162f
 8001610:	0800162f 	.word	0x0800162f
 8001614:	0800162f 	.word	0x0800162f
 8001618:	0800162f 	.word	0x0800162f
 800161c:	0800162f 	.word	0x0800162f
 8001620:	0800162f 	.word	0x0800162f
 8001624:	0800162f 	.word	0x0800162f
 8001628:	0800162f 	.word	0x0800162f
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 800162c:	bf00      	nop
		while(numberOfPackets--)
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	81fa      	strh	r2, [r7, #14]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aeb7 	bne.w	80013a8 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	30000000 	.word	0x30000000
 8001648:	20000138 	.word	0x20000138
 800164c:	200000b4 	.word	0x200000b4
 8001650:	200000b5 	.word	0x200000b5
 8001654:	58020000 	.word	0x58020000
 8001658:	200000b6 	.word	0x200000b6
 800165c:	200000b7 	.word	0x200000b7
 8001660:	200000b8 	.word	0x200000b8

08001664 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 800166e:	6838      	ldr	r0, [r7, #0]
 8001670:	f7ff fe8c 	bl	800138c <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	4904      	ldr	r1, [pc, #16]	; (8001688 <USBH_MIDI_ReceiveCallback+0x24>)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <USBH_MIDI_ReceiveCallback+0x28>)
 800167a:	f003 fa96 	bl	8004baa <USBH_MIDI_Receive>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	30000000 	.word	0x30000000
 800168c:	30000460 	.word	0x30000460

08001690 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <MX_ADC1_Init+0x218>)
 80016b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016bc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016d0:	2208      	movs	r2, #8
 80016d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016d4:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016dc:	2201      	movs	r2, #1
 80016de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016e2:	220a      	movs	r2, #10
 80016e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ec:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f2:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <MX_ADC1_Init+0x214>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016fe:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001706:	2200      	movs	r2, #0
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <MX_ADC1_Init+0x214>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001712:	4864      	ldr	r0, [pc, #400]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001714:	f004 f902 	bl	800591c <HAL_ADC_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800171e:	f001 ff11 	bl	8003544 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	485d      	ldr	r0, [pc, #372]	; (80018a4 <MX_ADC1_Init+0x214>)
 800172e:	f005 fb85 	bl	8006e3c <HAL_ADCEx_MultiModeConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001738:	f001 ff04 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800173c:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <MX_ADC1_Init+0x21c>)
 800173e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001740:	2306      	movs	r3, #6
 8001742:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001748:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800174c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800174e:	2304      	movs	r3, #4
 8001750:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4851      	ldr	r0, [pc, #324]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001760:	f004 fd9a 	bl	8006298 <HAL_ADC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800176a:	f001 feeb 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <MX_ADC1_Init+0x220>)
 8001770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001772:	230c      	movs	r3, #12
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	4619      	mov	r1, r3
 800177e:	4849      	ldr	r0, [pc, #292]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001780:	f004 fd8a 	bl	8006298 <HAL_ADC_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800178a:	f001 fedb 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <MX_ADC1_Init+0x224>)
 8001790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001792:	2312      	movs	r3, #18
 8001794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4841      	ldr	r0, [pc, #260]	; (80018a4 <MX_ADC1_Init+0x214>)
 80017a0:	f004 fd7a 	bl	8006298 <HAL_ADC_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80017aa:	f001 fecb 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <MX_ADC1_Init+0x228>)
 80017b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017b2:	2318      	movs	r3, #24
 80017b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4839      	ldr	r0, [pc, #228]	; (80018a4 <MX_ADC1_Init+0x214>)
 80017c0:	f004 fd6a 	bl	8006298 <HAL_ADC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80017ca:	f001 febb 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <MX_ADC1_Init+0x22c>)
 80017d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4830      	ldr	r0, [pc, #192]	; (80018a4 <MX_ADC1_Init+0x214>)
 80017e2:	f004 fd59 	bl	8006298 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80017ec:	f001 feaa 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <MX_ADC1_Init+0x230>)
 80017f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80017f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80017f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4828      	ldr	r0, [pc, #160]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001804:	f004 fd48 	bl	8006298 <HAL_ADC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 800180e:	f001 fe99 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_ADC1_Init+0x234>)
 8001814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001816:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800181a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	481f      	ldr	r0, [pc, #124]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001826:	f004 fd37 	bl	8006298 <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 8001830:	f001 fe88 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MX_ADC1_Init+0x238>)
 8001836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001838:	f44f 7389 	mov.w	r3, #274	; 0x112
 800183c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001842:	463b      	mov	r3, r7
 8001844:	4619      	mov	r1, r3
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <MX_ADC1_Init+0x214>)
 8001848:	f004 fd26 	bl	8006298 <HAL_ADC_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8001852:	f001 fe77 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_ADC1_Init+0x23c>)
 8001858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800185a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800185e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_ADC1_Init+0x214>)
 800186a:	f004 fd15 	bl	8006298 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001874:	f001 fe66 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_ADC1_Init+0x240>)
 800187a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800187c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_ADC1_Init+0x214>)
 800188c:	f004 fd04 	bl	8006298 <HAL_ADC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8001896:	f001 fe55 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000013c 	.word	0x2000013c
 80018a8:	40022000 	.word	0x40022000
 80018ac:	1d500080 	.word	0x1d500080
 80018b0:	4fb80000 	.word	0x4fb80000
 80018b4:	3ef08000 	.word	0x3ef08000
 80018b8:	0c900008 	.word	0x0c900008
 80018bc:	4b840000 	.word	0x4b840000
 80018c0:	3ac04000 	.word	0x3ac04000
 80018c4:	10c00010 	.word	0x10c00010
 80018c8:	21800100 	.word	0x21800100
 80018cc:	25b00200 	.word	0x25b00200
 80018d0:	14f00020 	.word	0x14f00020

080018d4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <MX_ADC3_Init+0x124>)
 80018ee:	4a43      	ldr	r2, [pc, #268]	; (80019fc <MX_ADC3_Init+0x128>)
 80018f0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <MX_ADC3_Init+0x124>)
 80018f4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80018f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <MX_ADC3_Init+0x124>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001900:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001902:	2201      	movs	r2, #1
 8001904:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001908:	2204      	movs	r2, #4
 800190a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <MX_ADC3_Init+0x124>)
 800190e:	2200      	movs	r2, #0
 8001910:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001914:	2201      	movs	r2, #1
 8001916:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <MX_ADC3_Init+0x124>)
 800191a:	2205      	movs	r2, #5
 800191c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_ADC3_Init+0x124>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001932:	2200      	movs	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <MX_ADC3_Init+0x124>)
 800193e:	2200      	movs	r2, #0
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800194a:	482b      	ldr	r0, [pc, #172]	; (80019f8 <MX_ADC3_Init+0x124>)
 800194c:	f003 ffe6 	bl	800591c <HAL_ADC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001956:	f001 fdf5 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_ADC3_Init+0x12c>)
 800195c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195e:	2306      	movs	r3, #6
 8001960:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001966:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800196a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800196c:	2304      	movs	r3, #4
 800196e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	481e      	ldr	r0, [pc, #120]	; (80019f8 <MX_ADC3_Init+0x124>)
 800197e:	f004 fc8b 	bl	8006298 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001988:	f001 fddc 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800198c:	230c      	movs	r3, #12
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4818      	ldr	r0, [pc, #96]	; (80019f8 <MX_ADC3_Init+0x124>)
 8001996:	f004 fc7f 	bl	8006298 <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80019a0:	f001 fdd0 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019a4:	2312      	movs	r3, #18
 80019a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_ADC3_Init+0x124>)
 80019ae:	f004 fc73 	bl	8006298 <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 80019b8:	f001 fdc4 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019bc:	2318      	movs	r3, #24
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_ADC3_Init+0x124>)
 80019c6:	f004 fc67 	bl	8006298 <HAL_ADC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80019d0:	f001 fdb8 	bl	8003544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_ADC3_Init+0x124>)
 80019e0:	f004 fc5a 	bl	8006298 <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 80019ea:	f001 fdab 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200001a0 	.word	0x200001a0
 80019fc:	58026000 	.word	0x58026000
 8001a00:	08600004 	.word	0x08600004

08001a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08e      	sub	sp, #56	; 0x38
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6d      	ldr	r2, [pc, #436]	; (8001bd8 <HAL_ADC_MspInit+0x1d4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f040 80a3 	bne.w	8001b6e <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a28:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2e:	4a6b      	ldr	r2, [pc, #428]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a38:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	623b      	str	r3, [r7, #32]
 8001a44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	4b65      	ldr	r3, [pc, #404]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b56      	ldr	r3, [pc, #344]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001aa0:	2332      	movs	r3, #50	; 0x32
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	484b      	ldr	r0, [pc, #300]	; (8001be0 <HAL_ADC_MspInit+0x1dc>)
 8001ab4:	f007 fd10 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ab8:	23ff      	movs	r3, #255	; 0xff
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4846      	ldr	r0, [pc, #280]	; (8001be4 <HAL_ADC_MspInit+0x1e0>)
 8001acc:	f007 fd04 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4841      	ldr	r0, [pc, #260]	; (8001be8 <HAL_ADC_MspInit+0x1e4>)
 8001ae4:	f007 fcf8 	bl	80094d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001aea:	4a41      	ldr	r2, [pc, #260]	; (8001bf0 <HAL_ADC_MspInit+0x1ec>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001aee:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001af0:	2209      	movs	r2, #9
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b40:	482a      	ldr	r0, [pc, #168]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b42:	f005 fbe5 	bl	8007310 <HAL_DMA_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001b4c:	f001 fcfa 	bl	8003544 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_ADC_MspInit+0x1e8>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2012      	movs	r0, #18
 8001b62:	f005 fb24 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b66:	2012      	movs	r0, #18
 8001b68:	f005 fb3b 	bl	80071e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001b6c:	e02f      	b.n	8001bce <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_ADC_MspInit+0x1f0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d12a      	bne.n	8001bce <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_ADC_MspInit+0x1d8>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001bb4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <HAL_ADC_MspInit+0x1f4>)
 8001bca:	f007 fc85 	bl	80094d8 <HAL_GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3738      	adds	r7, #56	; 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58020800 	.word	0x58020800
 8001be4:	58020000 	.word	0x58020000
 8001be8:	58020400 	.word	0x58020400
 8001bec:	20000204 	.word	0x20000204
 8001bf0:	40020010 	.word	0x40020010
 8001bf4:	58026000 	.word	0x58026000
 8001bf8:	58021400 	.word	0x58021400

08001bfc <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001c08:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <audioInit+0x18c>)
 8001c0a:	4a60      	ldr	r2, [pc, #384]	; (8001d8c <audioInit+0x190>)
 8001c0c:	4960      	ldr	r1, [pc, #384]	; (8001d90 <audioInit+0x194>)
 8001c0e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001d94 <audioInit+0x198>
 8001c12:	4861      	ldr	r0, [pc, #388]	; (8001d98 <audioInit+0x19c>)
 8001c14:	f7ff fb14 	bl	8001240 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001c18:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <audioInit+0x19c>)
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	495f      	ldr	r1, [pc, #380]	; (8001d9c <audioInit+0x1a0>)
 8001c20:	485f      	ldr	r0, [pc, #380]	; (8001da0 <audioInit+0x1a4>)
 8001c22:	f7ff fa60 	bl	80010e6 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <audioInit+0x19c>)
 8001c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2c:	495d      	ldr	r1, [pc, #372]	; (8001da4 <audioInit+0x1a8>)
 8001c2e:	485e      	ldr	r0, [pc, #376]	; (8001da8 <audioInit+0x1ac>)
 8001c30:	f7ff fa59 	bl	80010e6 <tMempool_init>


	for (int i = 0; i < 6; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	e00d      	b.n	8001c56 <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4a5b      	ldr	r2, [pc, #364]	; (8001dac <audioInit+0x1b0>)
 8001c40:	4413      	add	r3, r2
 8001c42:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <audioInit+0x1a4>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f848 	bl	8000ce0 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	3301      	adds	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	ddee      	ble.n	8001c3a <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	e009      	b.n	8001c76 <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 8001c62:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <audioInit+0x1a4>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001c6a:	4851      	ldr	r0, [pc, #324]	; (8001db0 <audioInit+0x1b4>)
 8001c6c:	f7ff f838 	bl	8000ce0 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	3301      	adds	r3, #1
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	ddf2      	ble.n	8001c62 <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <audioInit+0x1a4>)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	484c      	ldr	r0, [pc, #304]	; (8001db4 <audioInit+0x1b8>)
 8001c82:	f7ff fab6 	bl	80011f2 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e013      	b.n	8001cb4 <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4a49      	ldr	r2, [pc, #292]	; (8001db8 <audioInit+0x1bc>)
 8001c92:	4413      	add	r3, r2
 8001c94:	4942      	ldr	r1, [pc, #264]	; (8001da0 <audioInit+0x1a4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fa58 	bl	800114c <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4a45      	ldr	r2, [pc, #276]	; (8001db8 <audioInit+0x1bc>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001dbc <audioInit+0x1c0>
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa83 	bl	80011b4 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	dde8      	ble.n	8001c8c <audioInit+0x90>

//	for(int i = 0; i < 2; i++)
//	{
//		tTapeDelay_initToPool(&delT[i], SAMPLE_RATE, MAX_DELAY, &largePool);
//	}
	uint32_t* temp = (uint32_t *) malloc(sizeof(uint32_t) );
 8001cba:	2004      	movs	r0, #4
 8001cbc:	f015 fe06 	bl	80178cc <malloc>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]
	*temp = SAMPLE_RATE;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001cca:	601a      	str	r2, [r3, #0]
//	tDelayExt_initToPool(&delE, temp, MAX_DELAY, 1, &largePool);
	tTapeDelayExt_initToPool(&delTE, temp, MAX_DELAY, 1, &largePool);
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <audioInit+0x1ac>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <audioInit+0x1c4>)
 8001cd4:	6939      	ldr	r1, [r7, #16]
 8001cd6:	483b      	ldr	r0, [pc, #236]	; (8001dc4 <audioInit+0x1c8>)
 8001cd8:	f7fe fc7c 	bl	80005d4 <tTapeDelayExt_initToPool>
	free(temp);
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f015 fdfd 	bl	80178dc <free>


	HAL_Delay(10);
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f003 fbce 	bl	8005484 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e007      	b.n	8001cfe <audioInit+0x102>
	{
		audioOutBuffer[i] = 0;
 8001cee:	4a36      	ldr	r2, [pc, #216]	; (8001dc8 <audioInit+0x1cc>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b7f      	cmp	r3, #127	; 0x7f
 8001d02:	ddf4      	ble.n	8001cee <audioInit+0xf2>
	}



	HAL_Delay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f003 fbbd 	bl	8005484 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	492e      	ldr	r1, [pc, #184]	; (8001dc8 <audioInit+0x1cc>)
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f00d ffc6 	bl	800fca0 <HAL_SAI_Transmit_DMA>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <audioInit+0x1d0>)
 8001d1a:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	492c      	ldr	r1, [pc, #176]	; (8001dd0 <audioInit+0x1d4>)
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f00e f873 	bl	800fe0c <HAL_SAI_Receive_DMA>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <audioInit+0x1d8>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fd58 	bl	80027e4 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e01e      	b.n	8001d78 <audioInit+0x17c>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001d3a:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <audioInit+0x1dc>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <audioInit+0x1e0>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <audioInit+0x1e4>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <audioInit+0x1e8>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b07      	cmp	r3, #7
 8001d7c:	dddd      	ble.n	8001d3a <audioInit+0x13e>
	}

}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	08003481 	.word	0x08003481
 8001d8c:	0007a120 	.word	0x0007a120
 8001d90:	24000000 	.word	0x24000000
 8001d94:	473b8000 	.word	0x473b8000
 8001d98:	200016c0 	.word	0x200016c0
 8001d9c:	20000338 	.word	0x20000338
 8001da0:	20001710 	.word	0x20001710
 8001da4:	60000000 	.word	0x60000000
 8001da8:	20001714 	.word	0x20001714
 8001dac:	200002c0 	.word	0x200002c0
 8001db0:	200002f8 	.word	0x200002f8
 8001db4:	200002d8 	.word	0x200002d8
 8001db8:	200002dc 	.word	0x200002dc
 8001dbc:	43dc0000 	.word	0x43dc0000
 8001dc0:	0003a980 	.word	0x0003a980
 8001dc4:	200002f4 	.word	0x200002f4
 8001dc8:	30000040 	.word	0x30000040
 8001dcc:	2000027c 	.word	0x2000027c
 8001dd0:	30000240 	.word	0x30000240
 8001dd4:	2000027d 	.word	0x2000027d
 8001dd8:	20001718 	.word	0x20001718
 8001ddc:	20001738 	.word	0x20001738
 8001de0:	20001758 	.word	0x20001758
 8001de4:	20001778 	.word	0x20001778

08001de8 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]

	frameCounter++;
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <audioFrame+0x128>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <audioFrame+0x128>)
 8001e00:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <audioFrame+0x128>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d904      	bls.n	8001e14 <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <audioFrame+0x128>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 8001e10:	f000 fad0 	bl	80023b4 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e017      	b.n	8001e4a <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <audioFrame+0x12c>)
 8001e20:	441a      	add	r2, r3
 8001e22:	493d      	ldr	r1, [pc, #244]	; (8001f18 <audioFrame+0x130>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f1c <audioFrame+0x134>
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7fe ffd4 	bl	8000dec <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	dde4      	ble.n	8001e1a <audioFrame+0x32>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <audioFrame+0x138>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d057      	beq.n	8001f08 <audioFrame+0x120>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e051      	b.n	8001f02 <audioFrame+0x11a>
		{

			if ((i & 1) == 0)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11e      	bne.n	8001ea6 <audioFrame+0xbe>
			{
				current_sample = (int32_t)(audioTickR(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001e68:	88fa      	ldrh	r2, [r7, #6]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <audioFrame+0x13c>)
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f28 <audioFrame+0x140>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f000 fa7d 	bl	8002388 <audioTickR>
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
 8001e92:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001f2c <audioFrame+0x144>
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9e:	ee17 3a90 	vmov	r3, s15
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	e01d      	b.n	8001ee2 <audioFrame+0xfa>
			}
			else
			{
				current_sample = (int32_t)(audioTickL(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <audioFrame+0x13c>)
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001f28 <audioFrame+0x140>
 8001ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f000 f836 	bl	8001f38 <audioTickL>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f2c <audioFrame+0x144>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001edc:	ee17 3a90 	vmov	r3, s15
 8001ee0:	60bb      	str	r3, [r7, #8]
			}

			if (LED_States[2] == 1){		//mute
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <audioFrame+0x148>)
 8001ee4:	789b      	ldrb	r3, [r3, #2]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <audioFrame+0x106>
				current_sample *= 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	490f      	ldr	r1, [pc, #60]	; (8001f34 <audioFrame+0x14c>)
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b3f      	cmp	r3, #63	; 0x3f
 8001f06:	ddaa      	ble.n	8001e5e <audioFrame+0x76>

		}
	}
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200002bc 	.word	0x200002bc
 8001f14:	200002c0 	.word	0x200002c0
 8001f18:	30000440 	.word	0x30000440
 8001f1c:	377ffff6 	.word	0x377ffff6
 8001f20:	2000027e 	.word	0x2000027e
 8001f24:	30000240 	.word	0x30000240
 8001f28:	2ffffff6 	.word	0x2ffffff6
 8001f2c:	4b000000 	.word	0x4b000000
 8001f30:	200002b8 	.word	0x200002b8
 8001f34:	30000040 	.word	0x30000040

08001f38 <audioTickL>:
uint16_t del_len_old = 0;
uint32_t delaysX[8];
float delaysXdis[8], delaysXamp[8];

float audioTickL(float audioIn)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b090      	sub	sp, #64	; 0x40
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	ed87 0a01 	vstr	s0, [r7, #4]
//	tDelayExt_tick(&delE, audioIn);
//	sampleL = 0.0f;
//	for(int i = 0; i < num_delX; i++) sampleL += delE->lastOuts[i] / num_delX;

	/* multi tape delay */
	int flag = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
	num_delX = (int) (ADC_values[0] * INV_TWO_TO_16 * 8) + 1;
 8001f46:	4bc4      	ldr	r3, [pc, #784]	; (8002258 <audioTickL+0x320>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800225c <audioTickL+0x324>
 8001f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f66:	ee17 3a90 	vmov	r3, s15
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4abc      	ldr	r2, [pc, #752]	; (8002260 <audioTickL+0x328>)
 8001f6e:	6013      	str	r3, [r2, #0]
	if (num_delX != delTE->numPoint)
 8001f70:	4bbc      	ldr	r3, [pc, #752]	; (8002264 <audioTickL+0x32c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4aba      	ldr	r2, [pc, #744]	; (8002260 <audioTickL+0x328>)
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <audioTickL+0x56>
	{
		tTapeDelayExt_setNumPoint(&delTE, num_delX);
 8001f7e:	4bb8      	ldr	r3, [pc, #736]	; (8002260 <audioTickL+0x328>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	48b7      	ldr	r0, [pc, #732]	; (8002264 <audioTickL+0x32c>)
 8001f86:	f7fe fbe7 	bl	8000758 <tTapeDelayExt_setNumPoint>
		flag = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	// decide the delay pattern
	if(abs(ADC_values[1] - del_len_old) > 200){
 8001f8e:	4bb2      	ldr	r3, [pc, #712]	; (8002258 <audioTickL+0x320>)
 8001f90:	885b      	ldrh	r3, [r3, #2]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4bb4      	ldr	r3, [pc, #720]	; (8002268 <audioTickL+0x330>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bfb8      	it	lt
 8001f9e:	425b      	neglt	r3, r3
 8001fa0:	2bc8      	cmp	r3, #200	; 0xc8
 8001fa2:	dd31      	ble.n	8002008 <audioTickL+0xd0>
		del_lenX = (int)(pow(8, (9 * (ADC_values[1] * INV_TWO_TO_16) - 1)) * 4 + num_delX);
 8001fa4:	4bac      	ldr	r3, [pc, #688]	; (8002258 <audioTickL+0x320>)
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb0:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800225c <audioTickL+0x324>
 8001fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fcc:	eeb0 1b47 	vmov.f64	d1, d7
 8001fd0:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 8001fd4:	f015 fe78 	bl	8017cc8 <pow>
 8001fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8001fdc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001fe0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fe4:	4b9e      	ldr	r3, [pc, #632]	; (8002260 <audioTickL+0x328>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ff0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ff4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ff8:	ee17 2a90 	vmov	r2, s15
 8001ffc:	4b9b      	ldr	r3, [pc, #620]	; (800226c <audioTickL+0x334>)
 8001ffe:	601a      	str	r2, [r3, #0]
//		del_lenX = (int)(pow(8, (9 * tRamp_tick(&adc[1]) - 1)) * 4 + num_delX); // the whole length of the delay line
		del_len_old = ADC_values[1];
 8002000:	4b95      	ldr	r3, [pc, #596]	; (8002258 <audioTickL+0x320>)
 8002002:	885a      	ldrh	r2, [r3, #2]
 8002004:	4b98      	ldr	r3, [pc, #608]	; (8002268 <audioTickL+0x330>)
 8002006:	801a      	strh	r2, [r3, #0]
	}

	if (flag == 1 || abs(ADC_values[3] - wc) > 200 || abs(ADC_values[4] - hc) > 200){
 8002008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d016      	beq.n	800203c <audioTickL+0x104>
 800200e:	4b92      	ldr	r3, [pc, #584]	; (8002258 <audioTickL+0x320>)
 8002010:	88db      	ldrh	r3, [r3, #6]
 8002012:	461a      	mov	r2, r3
 8002014:	4b96      	ldr	r3, [pc, #600]	; (8002270 <audioTickL+0x338>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	bfb8      	it	lt
 800201e:	425b      	neglt	r3, r3
 8002020:	2bc8      	cmp	r3, #200	; 0xc8
 8002022:	dc0b      	bgt.n	800203c <audioTickL+0x104>
 8002024:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <audioTickL+0x320>)
 8002026:	891b      	ldrh	r3, [r3, #8]
 8002028:	461a      	mov	r2, r3
 800202a:	4b92      	ldr	r3, [pc, #584]	; (8002274 <audioTickL+0x33c>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	bfb8      	it	lt
 8002034:	425b      	neglt	r3, r3
 8002036:	2bc8      	cmp	r3, #200	; 0xc8
 8002038:	f340 8103 	ble.w	8002242 <audioTickL+0x30a>
		wc = ADC_values[3];
 800203c:	4b86      	ldr	r3, [pc, #536]	; (8002258 <audioTickL+0x320>)
 800203e:	88da      	ldrh	r2, [r3, #6]
 8002040:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <audioTickL+0x338>)
 8002042:	801a      	strh	r2, [r3, #0]
		hc = ADC_values[4];
 8002044:	4b84      	ldr	r3, [pc, #528]	; (8002258 <audioTickL+0x320>)
 8002046:	891a      	ldrh	r2, [r3, #8]
 8002048:	4b8a      	ldr	r3, [pc, #552]	; (8002274 <audioTickL+0x33c>)
 800204a:	801a      	strh	r2, [r3, #0]
		float wcf = wc * INV_TWO_TO_16 * 2;
 800204c:	4b88      	ldr	r3, [pc, #544]	; (8002270 <audioTickL+0x338>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800225c <audioTickL+0x324>
 800205c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002064:	edc7 7a08 	vstr	s15, [r7, #32]
		float hcf = hc * INV_TWO_TO_16 * 2;
 8002068:	4b82      	ldr	r3, [pc, #520]	; (8002274 <audioTickL+0x33c>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800225c <audioTickL+0x324>
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002080:	edc7 7a07 	vstr	s15, [r7, #28]
		float area = hcf > 1.0f ? hcf + wcf / 2.0f : 1 + hcf;
 8002084:	edd7 7a07 	vldr	s15, [r7, #28]
 8002088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	dd0a      	ble.n	80020ac <audioTickL+0x174>
 8002096:	edd7 7a08 	vldr	s15, [r7, #32]
 800209a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800209e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	e005      	b.n	80020b8 <audioTickL+0x180>
 80020ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80020b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b8:	edc7 7a06 	vstr	s15, [r7, #24]
		area /= num_delX + 1;
 80020bc:	4b68      	ldr	r3, [pc, #416]	; (8002260 <audioTickL+0x328>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80020ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d2:	edc7 7a06 	vstr	s15, [r7, #24]
		float inc1 = (hcf - 1) / wcf * 0.0004; // increment for the first segment, 100 division
 80020d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020de:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80020e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80020e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020ee:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002248 <audioTickL+0x310>
 80020f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020fa:	edc7 7a05 	vstr	s15, [r7, #20]
		float inc2 = hcf > 1.0f ? hcf / (wcf - 2) * 0.0004 : (1 - hcf) / (2 - wcf) * 0.0004;
 80020fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	dd10      	ble.n	8002132 <audioTickL+0x1fa>
 8002110:	edd7 7a08 	vldr	s15, [r7, #32]
 8002114:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002118:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800211c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002124:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002128:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002248 <audioTickL+0x310>
 800212c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002130:	e013      	b.n	800215a <audioTickL+0x222>
 8002132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002136:	edd7 7a07 	vldr	s15, [r7, #28]
 800213a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800213e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002142:	edd7 7a08 	vldr	s15, [r7, #32]
 8002146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800214a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002152:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002248 <audioTickL+0x310>
 8002156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800215a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800215e:	edc7 7a04 	vstr	s15, [r7, #16]

		float area_accum = 0.0f, area_cur_frame = 0.02f-inc1/2.0f, cur_frame = 0.0f;
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
 8002168:	ed97 7a05 	vldr	s14, [r7, #20]
 800216c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002174:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002278 <audioTickL+0x340>
 8002178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
		for (int i = 0; i < num_delX; i++){
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218a:	e055      	b.n	8002238 <audioTickL+0x300>
			while(area_accum < area && cur_frame < 1.99f){
				area_cur_frame += cur_frame <= wcf ? inc1 : inc2;
 800218c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002190:	edd7 7a08 	vldr	s15, [r7, #32]
 8002194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	d802      	bhi.n	80021a4 <audioTickL+0x26c>
 800219e:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a2:	e001      	b.n	80021a8 <audioTickL+0x270>
 80021a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				area_accum += area_cur_frame;
 80021b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80021b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				cur_frame += 0.02;
 80021c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021cc:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002250 <audioTickL+0x318>
 80021d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			while(area_accum < area && cur_frame < 1.99f){
 80021dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80021e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80021e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d508      	bpl.n	8002200 <audioTickL+0x2c8>
 80021ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021f2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800227c <audioTickL+0x344>
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d4c5      	bmi.n	800218c <audioTickL+0x254>
			}

			delaysXdis[i] = cur_frame;
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <audioTickL+0x348>)
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220a:	601a      	str	r2, [r3, #0]
			delaysXamp[i] = area_cur_frame / 0.02;
 800220c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002210:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002214:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8002250 <audioTickL+0x318>
 8002218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800221c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <audioTickL+0x34c>)
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	edc3 7a00 	vstr	s15, [r3]
			area_accum = 0.0f;
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i < num_delX; i++){
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	3301      	adds	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <audioTickL+0x328>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	429a      	cmp	r2, r3
 8002240:	dbcc      	blt.n	80021dc <audioTickL+0x2a4>
		}
	}

//
	for(int i = 0; i < num_delX; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
 8002246:	e04a      	b.n	80022de <audioTickL+0x3a6>
 8002248:	eb1c432d 	.word	0xeb1c432d
 800224c:	3f3a36e2 	.word	0x3f3a36e2
 8002250:	47ae147b 	.word	0x47ae147b
 8002254:	3f947ae1 	.word	0x3f947ae1
 8002258:	30000440 	.word	0x30000440
 800225c:	377ffff6 	.word	0x377ffff6
 8002260:	20000008 	.word	0x20000008
 8002264:	200002f4 	.word	0x200002f4
 8002268:	200017a4 	.word	0x200017a4
 800226c:	20000004 	.word	0x20000004
 8002270:	200017a0 	.word	0x200017a0
 8002274:	200017a2 	.word	0x200017a2
 8002278:	3ca3d70a 	.word	0x3ca3d70a
 800227c:	3ffeb852 	.word	0x3ffeb852
 8002280:	200017c8 	.word	0x200017c8
 8002284:	200017e8 	.word	0x200017e8
	{
//		delaysX[i] = (uint32_t)(i+1) * del_lenX;
		int j = (int)(delaysXdis[i] / 2.0f * (float)del_lenX) + 1;
 8002288:	4a38      	ldr	r2, [pc, #224]	; (800236c <audioTickL+0x434>)
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002298:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <audioTickL+0x438>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	3301      	adds	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
		if (abs(delaysX[i] - j) > 80) delaysX[i] = j;
 80022b8:	4a2e      	ldr	r2, [pc, #184]	; (8002374 <audioTickL+0x43c>)
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bfb8      	it	lt
 80022c8:	425b      	neglt	r3, r3
 80022ca:	2b50      	cmp	r3, #80	; 0x50
 80022cc:	dd04      	ble.n	80022d8 <audioTickL+0x3a0>
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4928      	ldr	r1, [pc, #160]	; (8002374 <audioTickL+0x43c>)
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < num_delX; i++)
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	3301      	adds	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <audioTickL+0x440>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbcf      	blt.n	8002288 <audioTickL+0x350>
	}

	tTapeDelayExt_setDelay(&delTE, &delaysX[0]);
 80022e8:	4922      	ldr	r1, [pc, #136]	; (8002374 <audioTickL+0x43c>)
 80022ea:	4824      	ldr	r0, [pc, #144]	; (800237c <audioTickL+0x444>)
 80022ec:	f7fe fa05 	bl	80006fa <tTapeDelayExt_setDelay>
	tTapeDelayExt_tick(&delTE, audioIn);
 80022f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80022f4:	4821      	ldr	r0, [pc, #132]	; (800237c <audioTickL+0x444>)
 80022f6:	f7fe f9c2 	bl	800067e <tTapeDelayExt_tick>
	sampleL = 0.0f;
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <audioTickL+0x448>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < num_delX; i++) sampleL += delTE->lastOuts[i] / num_delX * delaysXamp[i];
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	e022      	b.n	800234e <audioTickL+0x416>
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <audioTickL+0x444>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <audioTickL+0x440>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002328:	4a16      	ldr	r2, [pc, #88]	; (8002384 <audioTickL+0x44c>)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <audioTickL+0x448>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <audioTickL+0x448>)
 8002344:	edc3 7a00 	vstr	s15, [r3]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3301      	adds	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <audioTickL+0x440>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	429a      	cmp	r2, r3
 8002356:	dbd7      	blt.n	8002308 <audioTickL+0x3d0>
	/*>-<*/

	return sampleL;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <audioTickL+0x448>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	ee07 3a90 	vmov	s15, r3
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	3740      	adds	r7, #64	; 0x40
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200017c8 	.word	0x200017c8
 8002370:	20000004 	.word	0x20000004
 8002374:	200017a8 	.word	0x200017a8
 8002378:	20000008 	.word	0x20000008
 800237c:	200002f4 	.word	0x200002f4
 8002380:	20001798 	.word	0x20001798
 8002384:	200017e8 	.word	0x200017e8

08002388 <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <audioTickR+0x28>)
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
	return sampleR;
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <audioTickR+0x28>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	ee07 3a90 	vmov	s15, r3
}
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	2000179c 	.word	0x2000179c

080023b4 <buttonCheck>:
}
/*>-<*/


void buttonCheck(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	489b      	ldr	r0, [pc, #620]	; (800262c <buttonCheck+0x278>)
 80023be:	f007 fa3b 	bl	8009838 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b97      	ldr	r3, [pc, #604]	; (8002630 <buttonCheck+0x27c>)
 80023d2:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	4895      	ldr	r0, [pc, #596]	; (800262c <buttonCheck+0x278>)
 80023d8:	f007 fa2e 	bl	8009838 <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b91      	ldr	r3, [pc, #580]	; (8002630 <buttonCheck+0x27c>)
 80023ec:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 80023ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f2:	4890      	ldr	r0, [pc, #576]	; (8002634 <buttonCheck+0x280>)
 80023f4:	f007 fa20 	bl	8009838 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4b8a      	ldr	r3, [pc, #552]	; (8002630 <buttonCheck+0x27c>)
 8002408:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	e09e      	b.n	800254e <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8002410:	4a87      	ldr	r2, [pc, #540]	; (8002630 <buttonCheck+0x27c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	4987      	ldr	r1, [pc, #540]	; (8002638 <buttonCheck+0x284>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	440b      	add	r3, r1
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d00e      	beq.n	8002442 <buttonCheck+0x8e>
 8002424:	4a85      	ldr	r2, [pc, #532]	; (800263c <buttonCheck+0x288>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d808      	bhi.n	8002442 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8002430:	4a82      	ldr	r2, [pc, #520]	; (800263c <buttonCheck+0x288>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4980      	ldr	r1, [pc, #512]	; (800263c <buttonCheck+0x288>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8002442:	4a7b      	ldr	r2, [pc, #492]	; (8002630 <buttonCheck+0x27c>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	497b      	ldr	r1, [pc, #492]	; (8002638 <buttonCheck+0x284>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	440b      	add	r3, r1
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d01e      	beq.n	8002494 <buttonCheck+0xe0>
 8002456:	4a79      	ldr	r2, [pc, #484]	; (800263c <buttonCheck+0x288>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	2b09      	cmp	r3, #9
 8002460:	d918      	bls.n	8002494 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8002462:	4a73      	ldr	r2, [pc, #460]	; (8002630 <buttonCheck+0x27c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d104      	bne.n	8002478 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 800246e:	4a74      	ldr	r2, [pc, #464]	; (8002640 <buttonCheck+0x28c>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2101      	movs	r1, #1
 8002474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8002478:	4a6d      	ldr	r2, [pc, #436]	; (8002630 <buttonCheck+0x27c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	7819      	ldrb	r1, [r3, #0]
 8002480:	4a6d      	ldr	r2, [pc, #436]	; (8002638 <buttonCheck+0x284>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	460a      	mov	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 800248a:	4a6c      	ldr	r2, [pc, #432]	; (800263c <buttonCheck+0x288>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2100      	movs	r1, #0
 8002490:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8002494:	4a6b      	ldr	r2, [pc, #428]	; (8002644 <buttonCheck+0x290>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12d      	bne.n	80024fc <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 80024a0:	4a63      	ldr	r2, [pc, #396]	; (8002630 <buttonCheck+0x27c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <buttonCheck+0x118>
 80024ac:	4a66      	ldr	r2, [pc, #408]	; (8002648 <buttonCheck+0x294>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b8:	d208      	bcs.n	80024cc <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <buttonCheck+0x294>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4960      	ldr	r1, [pc, #384]	; (8002648 <buttonCheck+0x294>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <buttonCheck+0x27c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d037      	beq.n	8002548 <buttonCheck+0x194>
 80024d8:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <buttonCheck+0x294>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e4:	d330      	bcc.n	8002548 <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 80024e6:	4a57      	ldr	r2, [pc, #348]	; (8002644 <buttonCheck+0x290>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2101      	movs	r1, #1
 80024ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 80024f0:	4a55      	ldr	r2, [pc, #340]	; (8002648 <buttonCheck+0x294>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2100      	movs	r1, #0
 80024f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80024fa:	e025      	b.n	8002548 <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <buttonCheck+0x27c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <buttonCheck+0x174>
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <buttonCheck+0x294>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	2b31      	cmp	r3, #49	; 0x31
 8002512:	d809      	bhi.n	8002528 <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8002514:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <buttonCheck+0x294>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	494a      	ldr	r1, [pc, #296]	; (8002648 <buttonCheck+0x294>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002526:	e00f      	b.n	8002548 <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 8002528:	4a41      	ldr	r2, [pc, #260]	; (8002630 <buttonCheck+0x27c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 8002534:	4a43      	ldr	r2, [pc, #268]	; (8002644 <buttonCheck+0x290>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2100      	movs	r1, #0
 800253a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <buttonCheck+0x294>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2100      	movs	r1, #0
 8002544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b02      	cmp	r3, #2
 8002552:	f77f af5d 	ble.w	8002410 <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <buttonCheck+0x28c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d119      	bne.n	8002592 <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <buttonCheck+0x298>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800256c:	4838      	ldr	r0, [pc, #224]	; (8002650 <buttonCheck+0x29c>)
 800256e:	f007 f97b 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <buttonCheck+0x298>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e008      	b.n	800258c <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002580:	4833      	ldr	r0, [pc, #204]	; (8002650 <buttonCheck+0x29c>)
 8002582:	f007 f971 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <buttonCheck+0x298>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <buttonCheck+0x28c>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <buttonCheck+0x28c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d116      	bne.n	80025c8 <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <buttonCheck+0x298>)
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a8:	4829      	ldr	r0, [pc, #164]	; (8002650 <buttonCheck+0x29c>)
 80025aa:	f007 f95d 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <buttonCheck+0x298>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	705a      	strb	r2, [r3, #1]
 80025b4:	e008      	b.n	80025c8 <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025bc:	4824      	ldr	r0, [pc, #144]	; (8002650 <buttonCheck+0x29c>)
 80025be:	f007 f953 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <buttonCheck+0x298>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <buttonCheck+0x28c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <buttonCheck+0x298>)
 80025d2:	789b      	ldrb	r3, [r3, #2]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025de:	4815      	ldr	r0, [pc, #84]	; (8002634 <buttonCheck+0x280>)
 80025e0:	f007 f942 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <buttonCheck+0x298>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	709a      	strb	r2, [r3, #2]
 80025ea:	e008      	b.n	80025fe <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	4810      	ldr	r0, [pc, #64]	; (8002634 <buttonCheck+0x280>)
 80025f4:	f007 f938 	bl	8009868 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <buttonCheck+0x298>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <buttonCheck+0x28c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <buttonCheck+0x290>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	2140      	movs	r1, #64	; 0x40
 8002610:	4810      	ldr	r0, [pc, #64]	; (8002654 <buttonCheck+0x2a0>)
 8002612:	f007 f929 	bl	8009868 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 8002616:	e004      	b.n	8002622 <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <buttonCheck+0x2a0>)
 800261e:	f007 f923 	bl	8009868 <HAL_GPIO_WritePin>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58021800 	.word	0x58021800
 8002630:	20000280 	.word	0x20000280
 8002634:	58020c00 	.word	0x58020c00
 8002638:	20000284 	.word	0x20000284
 800263c:	20000288 	.word	0x20000288
 8002640:	20000294 	.word	0x20000294
 8002644:	200002ac 	.word	0x200002ac
 8002648:	200002a0 	.word	0x200002a0
 800264c:	200002b8 	.word	0x200002b8
 8002650:	58020000 	.word	0x58020000
 8002654:	58020800 	.word	0x58020800

08002658 <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	;
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	;
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  ;
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 800269c:	2040      	movs	r0, #64	; 0x40
 800269e:	f7ff fba3 	bl	8001de8 <audioFrame>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff fb98 	bl	8001de8 <audioFrame>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80026ca:	f000 f879 	bl	80027c0 <BSP_SD_IsDetected>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80026d4:	2302      	movs	r3, #2
 80026d6:	e012      	b.n	80026fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <BSP_SD_Init+0x48>)
 80026da:	f00d fe7c 	bl	80103d6 <HAL_SD_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80026e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ec:	4806      	ldr	r0, [pc, #24]	; (8002708 <BSP_SD_Init+0x48>)
 80026ee:	f00e fd37 	bl	8011160 <HAL_SD_ConfigWideBusOperation>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80026fc:	79fb      	ldrb	r3, [r7, #7]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20001ad4 	.word	0x20001ad4

0800270c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <BSP_SD_ReadBlocks+0x38>)
 800272a:	f00d ff73 	bl	8010614 <HAL_SD_ReadBlocks>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002738:	7dfb      	ldrb	r3, [r7, #23]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20001ad4 	.word	0x20001ad4

08002748 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <BSP_SD_WriteBlocks+0x38>)
 8002766:	f00e f8df 	bl	8010928 <HAL_SD_WriteBlocks>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20001ad4 	.word	0x20001ad4

08002784 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <BSP_SD_GetCardState+0x1c>)
 800278a:	f00e fdfb 	bl	8011384 <HAL_SD_GetCardState>
 800278e:	4603      	mov	r3, r0
 8002790:	2b04      	cmp	r3, #4
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001ad4 	.word	0x20001ad4

080027a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <BSP_SD_GetCardInfo+0x18>)
 80027b0:	f00e fcaa 	bl	8011108 <HAL_SD_GetCardInfo>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20001ad4 	.word	0x20001ad4

080027c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80027c6:	2301      	movs	r3, #1
 80027c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80027ca:	f000 f911 	bl	80029f0 <BSP_PlatformIsDetected>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	b2db      	uxtb	r3, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027f2:	4858      	ldr	r0, [pc, #352]	; (8002954 <AudioCodec_init+0x170>)
 80027f4:	f007 f838 	bl	8009868 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80027f8:	2002      	movs	r0, #2
 80027fa:	f002 fe43 	bl	8005484 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 80027fe:	4b56      	ldr	r3, [pc, #344]	; (8002958 <AudioCodec_init+0x174>)
 8002800:	2207      	movs	r2, #7
 8002802:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8002804:	4b54      	ldr	r3, [pc, #336]	; (8002958 <AudioCodec_init+0x174>)
 8002806:	2203      	movs	r2, #3
 8002808:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800280a:	4b54      	ldr	r3, [pc, #336]	; (800295c <AudioCodec_init+0x178>)
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <AudioCodec_init+0x17c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	4a50      	ldr	r2, [pc, #320]	; (8002958 <AudioCodec_init+0x174>)
 8002818:	2120      	movs	r1, #32
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f008 fde2 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <AudioCodec_init+0x180>)
 8002826:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <AudioCodec_init+0x174>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <AudioCodec_init+0x174>)
 8002830:	2241      	movs	r2, #65	; 0x41
 8002832:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002834:	4b49      	ldr	r3, [pc, #292]	; (800295c <AudioCodec_init+0x178>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <AudioCodec_init+0x17c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <AudioCodec_init+0x174>)
 8002842:	2120      	movs	r1, #32
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f008 fdcd 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <AudioCodec_init+0x180>)
 8002850:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <AudioCodec_init+0x174>)
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <AudioCodec_init+0x174>)
 800285a:	2200      	movs	r2, #0
 800285c:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <AudioCodec_init+0x178>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <AudioCodec_init+0x17c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <AudioCodec_init+0x174>)
 800286c:	2120      	movs	r1, #32
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f008 fdb8 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <AudioCodec_init+0x180>)
 800287a:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 800287c:	4b36      	ldr	r3, [pc, #216]	; (8002958 <AudioCodec_init+0x174>)
 800287e:	2203      	movs	r2, #3
 8002880:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 8002882:	4b35      	ldr	r3, [pc, #212]	; (8002958 <AudioCodec_init+0x174>)
 8002884:	2279      	movs	r2, #121	; 0x79
 8002886:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <AudioCodec_init+0x178>)
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	4b34      	ldr	r3, [pc, #208]	; (8002960 <AudioCodec_init+0x17c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	4a30      	ldr	r2, [pc, #192]	; (8002958 <AudioCodec_init+0x174>)
 8002896:	2120      	movs	r1, #32
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f008 fda3 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <AudioCodec_init+0x180>)
 80028a4:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <AudioCodec_init+0x174>)
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <AudioCodec_init+0x174>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <AudioCodec_init+0x178>)
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <AudioCodec_init+0x17c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <AudioCodec_init+0x174>)
 80028c0:	2120      	movs	r1, #32
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f008 fd8e 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <AudioCodec_init+0x180>)
 80028ce:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <AudioCodec_init+0x174>)
 80028d2:	2205      	movs	r2, #5
 80028d4:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <AudioCodec_init+0x174>)
 80028d8:	2201      	movs	r2, #1
 80028da:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <AudioCodec_init+0x178>)
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <AudioCodec_init+0x17c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <AudioCodec_init+0x174>)
 80028ea:	2120      	movs	r1, #32
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f008 fd79 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <AudioCodec_init+0x180>)
 80028f8:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <AudioCodec_init+0x174>)
 80028fc:	2206      	movs	r2, #6
 80028fe:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <AudioCodec_init+0x174>)
 8002902:	2210      	movs	r2, #16
 8002904:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <AudioCodec_init+0x178>)
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <AudioCodec_init+0x17c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <AudioCodec_init+0x174>)
 8002914:	2120      	movs	r1, #32
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f008 fd64 	bl	800b3e4 <HAL_I2C_Master_Transmit>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <AudioCodec_init+0x180>)
 8002922:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <AudioCodec_init+0x174>)
 8002926:	2207      	movs	r2, #7
 8002928:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <AudioCodec_init+0x174>)
 800292c:	2202      	movs	r2, #2
 800292e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <AudioCodec_init+0x178>)
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <AudioCodec_init+0x17c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <AudioCodec_init+0x174>)
 800293e:	2120      	movs	r1, #32
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f008 fd4f 	bl	800b3e4 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <AudioCodec_init+0x184>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]

}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58020800 	.word	0x58020800
 8002958:	20001808 	.word	0x20001808
 800295c:	2000000c 	.word	0x2000000c
 8002960:	20000010 	.word	0x20000010
 8002964:	2000180a 	.word	0x2000180a
 8002968:	2000027e 	.word	0x2000027e

0800296c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_DMA_Init+0x5c>)
 8002974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002978:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <MX_DMA_Init+0x5c>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_DMA_Init+0x5c>)
 8002984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2100      	movs	r1, #0
 8002994:	200b      	movs	r0, #11
 8002996:	f004 fc0a 	bl	80071ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800299a:	200b      	movs	r0, #11
 800299c:	f004 fc21 	bl	80071e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	200c      	movs	r0, #12
 80029a6:	f004 fc02 	bl	80071ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80029aa:	200c      	movs	r0, #12
 80029ac:	f004 fc19 	bl	80071e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	200d      	movs	r0, #13
 80029b6:	f004 fbfa 	bl	80071ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80029ba:	200d      	movs	r0, #13
 80029bc:	f004 fc11 	bl	80071e2 <HAL_NVIC_EnableIRQ>

}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58024400 	.word	0x58024400

080029cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <MX_FATFS_Init+0x18>)
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_FATFS_Init+0x1c>)
 80029d4:	f014 ff6a 	bl	80178ac <FATFS_LinkDriver>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <MX_FATFS_Init+0x20>)
 80029de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000180c 	.word	0x2000180c
 80029e8:	08018188 	.word	0x08018188
 80029ec:	2000180b 	.word	0x2000180b

080029f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80029f6:	2301      	movs	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80029fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <BSP_PlatformIsDetected+0x28>)
 8002a00:	f006 ff1a 	bl	8009838 <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
}  
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58020800 	.word	0x58020800

08002a1c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
 8002a30:	615a      	str	r2, [r3, #20]
 8002a32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a36:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <MX_FMC_Init+0xa4>)
 8002a38:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a48:	2208      	movs	r2, #8
 8002a4a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a4e:	2210      	movs	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a68:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002a6c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002a80:	2306      	movs	r3, #6
 8002a82:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002a84:	2304      	movs	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8002a88:	2306      	movs	r3, #6
 8002a8a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002a94:	2302      	movs	r3, #2
 8002a96:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4807      	ldr	r0, [pc, #28]	; (8002abc <MX_FMC_Init+0xa0>)
 8002a9e:	f00f f84b 	bl	8011b38 <HAL_SDRAM_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002aa8:	f000 fd4c 	bl	8003544 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8002aac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002ab0:	f002 fd18 	bl	80054e4 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20001810 	.word	0x20001810
 8002ac0:	52004140 	.word	0x52004140

08002ac4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0b8      	sub	sp, #224	; 0xe0
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_FMC_MspInit+0x15c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8099 	bne.w	8002c16 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002ae4:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <HAL_FMC_MspInit+0x15c>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	22c0      	movs	r2, #192	; 0xc0
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f014 ffa6 	bl	8017a44 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b08:	f107 0308 	add.w	r3, r7, #8
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00a f835 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002b18:	f000 fd14 	bl	8003544 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_FMC_MspInit+0x160>)
 8002b1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b22:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <HAL_FMC_MspInit+0x160>)
 8002b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b28:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002b2c:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_FMC_MspInit+0x160>)
 8002b2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b54:	230c      	movs	r3, #12
 8002b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4831      	ldr	r0, [pc, #196]	; (8002c28 <HAL_FMC_MspInit+0x164>)
 8002b62:	f006 fcb9 	bl	80094d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002b66:	230d      	movs	r3, #13
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b7e:	230c      	movs	r3, #12
 8002b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4828      	ldr	r0, [pc, #160]	; (8002c2c <HAL_FMC_MspInit+0x168>)
 8002b8c:	f006 fca4 	bl	80094d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002b90:	f248 1337 	movw	r3, #33079	; 0x8137
 8002b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002baa:	230c      	movs	r3, #12
 8002bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	481e      	ldr	r0, [pc, #120]	; (8002c30 <HAL_FMC_MspInit+0x16c>)
 8002bb8:	f006 fc8e 	bl	80094d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002bbc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002be0:	4619      	mov	r1, r3
 8002be2:	4814      	ldr	r0, [pc, #80]	; (8002c34 <HAL_FMC_MspInit+0x170>)
 8002be4:	f006 fc78 	bl	80094d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002be8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c02:	230c      	movs	r3, #12
 8002c04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480a      	ldr	r0, [pc, #40]	; (8002c38 <HAL_FMC_MspInit+0x174>)
 8002c10:	f006 fc62 	bl	80094d8 <HAL_GPIO_Init>
 8002c14:	e000      	b.n	8002c18 <HAL_FMC_MspInit+0x154>
    return;
 8002c16:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c18:	37e0      	adds	r7, #224	; 0xe0
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20001844 	.word	0x20001844
 8002c24:	58024400 	.word	0x58024400
 8002c28:	58021400 	.word	0x58021400
 8002c2c:	58020800 	.word	0x58020800
 8002c30:	58021800 	.word	0x58021800
 8002c34:	58021000 	.word	0x58021000
 8002c38:	58020c00 	.word	0x58020c00

08002c3c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c44:	f7ff ff3e 	bl	8002ac4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c66:	4b9b      	ldr	r3, [pc, #620]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	4a99      	ldr	r2, [pc, #612]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c6e:	f043 0310 	orr.w	r3, r3, #16
 8002c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c76:	4b97      	ldr	r3, [pc, #604]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c84:	4b93      	ldr	r3, [pc, #588]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	4a92      	ldr	r2, [pc, #584]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c94:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	4a8a      	ldr	r2, [pc, #552]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc0:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc6:	4a83      	ldr	r2, [pc, #524]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd0:	4b80      	ldr	r3, [pc, #512]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	4a7b      	ldr	r2, [pc, #492]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cee:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d02:	4a74      	ldr	r2, [pc, #464]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d0c:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	4a6c      	ldr	r2, [pc, #432]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d48:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <MX_GPIO_Init+0x284>)
 8002d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f244 0140 	movw	r1, #16448	; 0x4040
 8002d5c:	485e      	ldr	r0, [pc, #376]	; (8002ed8 <MX_GPIO_Init+0x288>)
 8002d5e:	f006 fd83 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002d62:	2200      	movs	r2, #0
 8002d64:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002d68:	485c      	ldr	r0, [pc, #368]	; (8002edc <MX_GPIO_Init+0x28c>)
 8002d6a:	f006 fd7d 	bl	8009868 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d74:	485a      	ldr	r0, [pc, #360]	; (8002ee0 <MX_GPIO_Init+0x290>)
 8002d76:	f006 fd77 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d80:	4858      	ldr	r0, [pc, #352]	; (8002ee4 <MX_GPIO_Init+0x294>)
 8002d82:	f006 fd71 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	484f      	ldr	r0, [pc, #316]	; (8002ed8 <MX_GPIO_Init+0x288>)
 8002d9c:	f006 fb9c 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002da0:	f244 0340 	movw	r3, #16448	; 0x4040
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db6:	4619      	mov	r1, r3
 8002db8:	4847      	ldr	r0, [pc, #284]	; (8002ed8 <MX_GPIO_Init+0x288>)
 8002dba:	f006 fb8d 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4840      	ldr	r0, [pc, #256]	; (8002ed8 <MX_GPIO_Init+0x288>)
 8002dd6:	f006 fb7f 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dea:	4619      	mov	r1, r3
 8002dec:	483b      	ldr	r0, [pc, #236]	; (8002edc <MX_GPIO_Init+0x28c>)
 8002dee:	f006 fb73 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002df2:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4834      	ldr	r0, [pc, #208]	; (8002edc <MX_GPIO_Init+0x28c>)
 8002e0c:	f006 fb64 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e22:	4619      	mov	r1, r3
 8002e24:	482e      	ldr	r0, [pc, #184]	; (8002ee0 <MX_GPIO_Init+0x290>)
 8002e26:	f006 fb57 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	4827      	ldr	r0, [pc, #156]	; (8002ee0 <MX_GPIO_Init+0x290>)
 8002e44:	f006 fb48 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002e48:	f242 0378 	movw	r3, #8312	; 0x2078
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4820      	ldr	r0, [pc, #128]	; (8002ee0 <MX_GPIO_Init+0x290>)
 8002e5e:	f006 fb3b 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 8002e62:	f243 0308 	movw	r3, #12296	; 0x3008
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	4619      	mov	r1, r3
 8002e76:	481c      	ldr	r0, [pc, #112]	; (8002ee8 <MX_GPIO_Init+0x298>)
 8002e78:	f006 fb2e 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4816      	ldr	r0, [pc, #88]	; (8002ee8 <MX_GPIO_Init+0x298>)
 8002e90:	f006 fb22 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <MX_GPIO_Init+0x294>)
 8002eae:	f006 fb13 	bl	80094d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <MX_GPIO_Init+0x294>)
 8002ec8:	f006 fb06 	bl	80094d8 <HAL_GPIO_Init>

}
 8002ecc:	bf00      	nop
 8002ece:	3738      	adds	r7, #56	; 0x38
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	58024400 	.word	0x58024400
 8002ed8:	58020800 	.word	0x58020800
 8002edc:	58020400 	.word	0x58020400
 8002ee0:	58020c00 	.word	0x58020c00
 8002ee4:	58020000 	.word	0x58020000
 8002ee8:	58021800 	.word	0x58021800

08002eec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <MX_I2C2_Init+0x78>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <MX_I2C2_Init+0x7c>)
 8002efa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f26:	480e      	ldr	r0, [pc, #56]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f28:	f008 f9cc 	bl	800b2c4 <HAL_I2C_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f32:	f000 fb07 	bl	8003544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f36:	2100      	movs	r1, #0
 8002f38:	4809      	ldr	r0, [pc, #36]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f3a:	f008 fd57 	bl	800b9ec <HAL_I2CEx_ConfigAnalogFilter>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f44:	f000 fafe 	bl	8003544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_I2C2_Init+0x74>)
 8002f4c:	f008 fd99 	bl	800ba82 <HAL_I2CEx_ConfigDigitalFilter>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f56:	f000 faf5 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20001848 	.word	0x20001848
 8002f64:	40005800 	.word	0x40005800
 8002f68:	505097f4 	.word	0x505097f4

08002f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0ba      	sub	sp, #232	; 0xe8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	22c0      	movs	r2, #192	; 0xc0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f014 fd59 	bl	8017a44 <memset>
  if(i2cHandle->Instance==I2C2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_I2C_MspInit+0xc8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d146      	bne.n	800302a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f9c:	f04f 0208 	mov.w	r2, #8
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f009 fde2 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002fbe:	f000 fac1 	bl	8003544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 8002fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fe0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe8:	2312      	movs	r3, #18
 8002fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003004:	4619      	mov	r1, r3
 8003006:	480d      	ldr	r0, [pc, #52]	; (800303c <HAL_I2C_MspInit+0xd0>)
 8003008:	f006 fa66 	bl	80094d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 800300e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 8003014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003018:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_I2C_MspInit+0xcc>)
 800301e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800302a:	bf00      	nop
 800302c:	37e8      	adds	r7, #232	; 0xe8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40005800 	.word	0x40005800
 8003038:	58024400 	.word	0x58024400
 800303c:	58020400 	.word	0x58020400

08003040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8003046:	f000 fa3b 	bl	80034c0 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800304a:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <main+0x17c>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11b      	bne.n	800308e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003056:	f3bf 8f4f 	dsb	sy
}
 800305a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800305c:	f3bf 8f6f 	isb	sy
}
 8003060:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003062:	4b56      	ldr	r3, [pc, #344]	; (80031bc <main+0x17c>)
 8003064:	2200      	movs	r2, #0
 8003066:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800306a:	f3bf 8f4f 	dsb	sy
}
 800306e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003070:	f3bf 8f6f 	isb	sy
}
 8003074:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <main+0x17c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4a50      	ldr	r2, [pc, #320]	; (80031bc <main+0x17c>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003082:	f3bf 8f4f 	dsb	sy
}
 8003086:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003088:	f3bf 8f6f 	isb	sy
}
 800308c:	e000      	b.n	8003090 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800308e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <main+0x17c>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d138      	bne.n	800310e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <main+0x17c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80030a4:	f3bf 8f4f 	dsb	sy
}
 80030a8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80030aa:	4b44      	ldr	r3, [pc, #272]	; (80031bc <main+0x17c>)
 80030ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0b5b      	lsrs	r3, r3, #13
 80030b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030ba:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	08db      	lsrs	r3, r3, #3
 80030c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80030ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030d4:	4939      	ldr	r1, [pc, #228]	; (80031bc <main+0x17c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1ef      	bne.n	80030c6 <main+0x86>
    } while(sets-- != 0U);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	60ba      	str	r2, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80030f0:	f3bf 8f4f 	dsb	sy
}
 80030f4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <main+0x17c>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4a30      	ldr	r2, [pc, #192]	; (80031bc <main+0x17c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003102:	f3bf 8f4f 	dsb	sy
}
 8003106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003108:	f3bf 8f6f 	isb	sy
}
 800310c:	e000      	b.n	8003110 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800310e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003110:	f002 f926 	bl	8005360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003114:	f000 f860 	bl	80031d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003118:	f000 f90e 	bl	8003338 <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311c:	f7ff fd98 	bl	8002c50 <MX_GPIO_Init>
  MX_DMA_Init();
 8003120:	f7ff fc24 	bl	800296c <MX_DMA_Init>
  MX_FMC_Init();
 8003124:	f7ff fc7a 	bl	8002a1c <MX_FMC_Init>
  MX_ADC1_Init();
 8003128:	f7fe fab2 	bl	8001690 <MX_ADC1_Init>
  MX_ADC3_Init();
 800312c:	f7fe fbd2 	bl	80018d4 <MX_ADC3_Init>
  MX_I2C2_Init();
 8003130:	f7ff fedc 	bl	8002eec <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8003134:	f000 fca6 	bl	8003a84 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8003138:	f000 fd3e 	bl	8003bb8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800313c:	f7ff fc46 	bl	80029cc <MX_FATFS_Init>
  MX_SAI1_Init();
 8003140:	f000 fa54 	bl	80035ec <MX_SAI1_Init>
  MX_TIM3_Init();
 8003144:	f000 ffc8 	bl	80040d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003148:	f001 f83e 	bl	80041c8 <MX_TIM4_Init>
  MX_TIM7_Init();
 800314c:	f001 f8ca 	bl	80042e4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8003150:	f000 ff32 	bl	8003fb8 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8003154:	f001 f9fa 	bl	800454c <MX_USART6_UART_Init>
  MX_RNG_Init();
 8003158:	f000 f9f8 	bl	800354c <MX_RNG_Init>
  MX_USB_HOST_Init();
 800315c:	f001 fad2 	bl	8004704 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003166:	4816      	ldr	r0, [pc, #88]	; (80031c0 <main+0x180>)
 8003168:	f006 fb7e 	bl	8009868 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 800316c:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8003170:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	eee1 3a10 	vmsr	fpscr, r3
}
 8003184:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8003186:	220a      	movs	r2, #10
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <main+0x184>)
 800318a:	480f      	ldr	r0, [pc, #60]	; (80031c8 <main+0x188>)
 800318c:	f002 fd68 	bl	8005c60 <HAL_ADC_Start_DMA>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <main+0x15a>
	{
	  Error_Handler();
 8003196:	f000 f9d5 	bl	8003544 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 800319a:	200a      	movs	r0, #10
 800319c:	f002 f972 	bl	8005484 <HAL_Delay>

  SDRAM_Initialization_sequence();
 80031a0:	f000 f90a 	bl	80033b8 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 80031a4:	2064      	movs	r0, #100	; 0x64
 80031a6:	f002 f96d 	bl	8005484 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <main+0x18c>)
 80031ac:	4908      	ldr	r1, [pc, #32]	; (80031d0 <main+0x190>)
 80031ae:	4809      	ldr	r0, [pc, #36]	; (80031d4 <main+0x194>)
 80031b0:	f7fe fd24 	bl	8001bfc <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80031b4:	f001 face 	bl	8004754 <MX_USB_HOST_Process>
 80031b8:	e7fc      	b.n	80031b4 <main+0x174>
 80031ba:	bf00      	nop
 80031bc:	e000ed00 	.word	0xe000ed00
 80031c0:	58020800 	.word	0x58020800
 80031c4:	30000440 	.word	0x30000440
 80031c8:	2000013c 	.word	0x2000013c
 80031cc:	20001948 	.word	0x20001948
 80031d0:	200018b0 	.word	0x200018b0
 80031d4:	20001848 	.word	0x20001848

080031d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b09e      	sub	sp, #120	; 0x78
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e2:	224c      	movs	r2, #76	; 0x4c
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f014 fc2c 	bl	8017a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	2220      	movs	r2, #32
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f014 fc25 	bl	8017a44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80031fa:	2002      	movs	r0, #2
 80031fc:	f008 fc8e 	bl	800bb1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	4b49      	ldr	r3, [pc, #292]	; (800332c <SystemClock_Config+0x154>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4a48      	ldr	r2, [pc, #288]	; (800332c <SystemClock_Config+0x154>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <SystemClock_Config+0x154>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	4b45      	ldr	r3, [pc, #276]	; (8003330 <SystemClock_Config+0x158>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	4a44      	ldr	r2, [pc, #272]	; (8003330 <SystemClock_Config+0x158>)
 8003220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003224:	6193      	str	r3, [r2, #24]
 8003226:	4b42      	ldr	r3, [pc, #264]	; (8003330 <SystemClock_Config+0x158>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003232:	bf00      	nop
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <SystemClock_Config+0x158>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d1f8      	bne.n	8003234 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <SystemClock_Config+0x15c>)
 8003244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003248:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <SystemClock_Config+0x15c>)
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <SystemClock_Config+0x15c>)
 8003254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003260:	2300      	movs	r3, #0
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <SystemClock_Config+0x158>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <SystemClock_Config+0x158>)
 800326a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <SystemClock_Config+0x158>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <SystemClock_Config+0x154>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <SystemClock_Config+0x154>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <SystemClock_Config+0x154>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003292:	bf00      	nop
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <SystemClock_Config+0x158>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d1f8      	bne.n	8003294 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80032a2:	2321      	movs	r3, #33	; 0x21
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80032ac:	2301      	movs	r3, #1
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b0:	2302      	movs	r3, #2
 80032b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032b4:	2302      	movs	r3, #2
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80032b8:	2305      	movs	r3, #5
 80032ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032c8:	2302      	movs	r3, #2
 80032ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80032cc:	2308      	movs	r3, #8
 80032ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032dc:	4618      	mov	r0, r3
 80032de:	f008 fc67 	bl	800bbb0 <HAL_RCC_OscConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <SystemClock_Config+0x114>
  {
    Error_Handler();
 80032e8:	f000 f92c 	bl	8003544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ec:	233f      	movs	r3, #63	; 0x3f
 80032ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f0:	2303      	movs	r3, #3
 80032f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80032f8:	2308      	movs	r3, #8
 80032fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80032fc:	2340      	movs	r3, #64	; 0x40
 80032fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003300:	2340      	movs	r3, #64	; 0x40
 8003302:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2104      	movs	r1, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f009 f8a5 	bl	800c464 <HAL_RCC_ClockConfig>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8003320:	f000 f910 	bl	8003544 <Error_Handler>
  }
}
 8003324:	bf00      	nop
 8003326:	3778      	adds	r7, #120	; 0x78
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58000400 	.word	0x58000400
 8003330:	58024800 	.word	0x58024800
 8003334:	58024400 	.word	0x58024400

08003338 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0b0      	sub	sp, #192	; 0xc0
 800333c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800333e:	463b      	mov	r3, r7
 8003340:	22c0      	movs	r2, #192	; 0xc0
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f014 fb7d 	bl	8017a44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <PeriphCommonClock_Config+0x68>)
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8003354:	2319      	movs	r3, #25
 8003356:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8003358:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800335c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800335e:	2307      	movs	r3, #7
 8003360:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003362:	2302      	movs	r3, #2
 8003364:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800336e:	2300      	movs	r3, #0
 8003370:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800337c:	2301      	movs	r3, #1
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003386:	463b      	mov	r3, r7
 8003388:	4618      	mov	r0, r3
 800338a:	f009 fbf7 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003394:	f000 f8d6 	bl	8003544 <Error_Handler>
  }
}
 8003398:	bf00      	nop
 800339a:	37c0      	adds	r7, #192	; 0xc0
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	00090100 	.word	0x00090100

080033a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	;
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80033c2:	2301      	movs	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80033c6:	2310      	movs	r3, #16
 80033c8:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d8:	4619      	mov	r1, r3
 80033da:	4828      	ldr	r0, [pc, #160]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 80033dc:	f00e fbe8 	bl	8011bb0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f002 f84f 	bl	8005484 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80033e6:	2302      	movs	r3, #2
 80033e8:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80033ea:	2310      	movs	r3, #16
 80033ec:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033fc:	4619      	mov	r1, r3
 80033fe:	481f      	ldr	r0, [pc, #124]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 8003400:	f00e fbd6 	bl	8011bb0 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8003404:	f240 2322 	movw	r3, #546	; 0x222
 8003408:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800340a:	2304      	movs	r3, #4
 800340c:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800340e:	2310      	movs	r3, #16
 8003410:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003420:	4619      	mov	r1, r3
 8003422:	4816      	ldr	r0, [pc, #88]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 8003424:	f00e fbc4 	bl	8011bb0 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003428:	2303      	movs	r3, #3
 800342a:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800342c:	2310      	movs	r3, #16
 800342e:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003430:	2308      	movs	r3, #8
 8003432:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800343e:	4619      	mov	r1, r3
 8003440:	480e      	ldr	r0, [pc, #56]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 8003442:	f00e fbb5 	bl	8011bb0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8003446:	2001      	movs	r0, #1
 8003448:	f002 f81c 	bl	8005484 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800344c:	2303      	movs	r3, #3
 800344e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003450:	2310      	movs	r3, #16
 8003452:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003454:	2308      	movs	r3, #8
 8003456:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003462:	4619      	mov	r1, r3
 8003464:	4805      	ldr	r0, [pc, #20]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 8003466:	f00e fba3 	bl	8011bb0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800346a:	f240 5169 	movw	r1, #1385	; 0x569
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <SDRAM_Initialization_sequence+0xc4>)
 8003470:	f00e fbd3 	bl	8011c1a <HAL_SDRAM_ProgramRefreshRate>
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20001810 	.word	0x20001810

08003480 <randomNumber>:


float randomNumber(void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8003486:	463b      	mov	r3, r7
 8003488:	4619      	mov	r1, r3
 800348a:	480b      	ldr	r0, [pc, #44]	; (80034b8 <randomNumber+0x38>)
 800348c:	f00c f8d6 	bl	800f63c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80034bc <randomNumber+0x3c>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	ee07 3a90 	vmov	s15, r3
}
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000189c 	.word	0x2000189c
 80034bc:	2f80000d 	.word	0x2f80000d

080034c0 <MPU_Conf>:


void MPU_Conf(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 80034c6:	f003 fea7 	bl	8007218 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80034ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80034d2:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80034d4:	2311      	movs	r3, #17
 80034d6:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80034d8:	2303      	movs	r3, #3
 80034da:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80034dc:	2301      	movs	r3, #1
 80034de:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 80034f0:	2300      	movs	r3, #0
 80034f2:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80034f8:	463b      	mov	r3, r7
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fec4 	bl	8007288 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003500:	2301      	movs	r3, #1
 8003502:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8003504:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8003508:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800350a:	230f      	movs	r3, #15
 800350c:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800350e:	2303      	movs	r3, #3
 8003510:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003512:	2301      	movs	r3, #1
 8003514:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003516:	2301      	movs	r3, #1
 8003518:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800351e:	2301      	movs	r3, #1
 8003520:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003522:	2301      	movs	r3, #1
 8003524:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800352e:	463b      	mov	r3, r7
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fea9 	bl	8007288 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003536:	2004      	movs	r0, #4
 8003538:	f003 fe86 	bl	8007248 <HAL_MPU_Enable>
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 8003548:	e7fe      	b.n	8003548 <Error_Handler+0x4>
	...

0800354c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <MX_RNG_Init+0x24>)
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <MX_RNG_Init+0x28>)
 8003554:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <MX_RNG_Init+0x24>)
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <MX_RNG_Init+0x24>)
 800355e:	f00c f80b 	bl	800f578 <HAL_RNG_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003568:	f7ff ffec 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	2000189c 	.word	0x2000189c
 8003574:	48021800 	.word	0x48021800

08003578 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0b4      	sub	sp, #208	; 0xd0
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	22c0      	movs	r2, #192	; 0xc0
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f014 fa5b 	bl	8017a44 <memset>
  if(rngHandle->Instance==RNG)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <HAL_RNG_MspInit+0x6c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d121      	bne.n	80035dc <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4618      	mov	r0, r3
 80035b0:	f009 fae4 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80035ba:	f7ff ffc3 	bl	8003544 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RNG_MspInit+0x70>)
 80035c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_RNG_MspInit+0x70>)
 80035c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ca:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RNG_MspInit+0x70>)
 80035d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80035dc:	bf00      	nop
 80035de:	37d0      	adds	r7, #208	; 0xd0
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	48021800 	.word	0x48021800
 80035e8:	58024400 	.word	0x58024400

080035ec <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <MX_SAI1_Init+0xb0>)
 80035f2:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <MX_SAI1_Init+0xb4>)
 80035f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <MX_SAI1_Init+0xb0>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <MX_SAI1_Init+0xb0>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <MX_SAI1_Init+0xb0>)
 8003604:	2200      	movs	r2, #0
 8003606:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <MX_SAI1_Init+0xb0>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <MX_SAI1_Init+0xb0>)
 8003610:	2201      	movs	r2, #1
 8003612:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <MX_SAI1_Init+0xb0>)
 8003616:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800361a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <MX_SAI1_Init+0xb0>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <MX_SAI1_Init+0xb0>)
 8003624:	2200      	movs	r2, #0
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <MX_SAI1_Init+0xb0>)
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <MX_SAI1_Init+0xb0>)
 8003630:	2200      	movs	r2, #0
 8003632:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003634:	2302      	movs	r3, #2
 8003636:	2202      	movs	r2, #2
 8003638:	2100      	movs	r1, #0
 800363a:	4818      	ldr	r0, [pc, #96]	; (800369c <MX_SAI1_Init+0xb0>)
 800363c:	f00c f854 	bl	800f6e8 <HAL_SAI_InitProtocol>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8003646:	f7ff ff7d 	bl	8003544 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <MX_SAI1_Init+0xb8>)
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <MX_SAI1_Init+0xbc>)
 800364e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003652:	2203      	movs	r2, #3
 8003654:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003658:	2201      	movs	r2, #1
 800365a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <MX_SAI1_Init+0xb8>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003664:	2201      	movs	r2, #1
 8003666:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <MX_SAI1_Init+0xb8>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003670:	2200      	movs	r2, #0
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <MX_SAI1_Init+0xb8>)
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003680:	2302      	movs	r3, #2
 8003682:	2202      	movs	r2, #2
 8003684:	2100      	movs	r1, #0
 8003686:	4807      	ldr	r0, [pc, #28]	; (80036a4 <MX_SAI1_Init+0xb8>)
 8003688:	f00c f82e 	bl	800f6e8 <HAL_SAI_InitProtocol>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8003692:	f7ff ff57 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200018b0 	.word	0x200018b0
 80036a0:	40015804 	.word	0x40015804
 80036a4:	20001948 	.word	0x20001948
 80036a8:	40015824 	.word	0x40015824

080036ac <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a77      	ldr	r2, [pc, #476]	; (8003898 <HAL_SAI_MspInit+0x1ec>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d179      	bne.n	80037b2 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80036be:	4b77      	ldr	r3, [pc, #476]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80036c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036cc:	4a74      	ldr	r2, [pc, #464]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80036ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80036d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80036e4:	4b6d      	ldr	r3, [pc, #436]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a6c      	ldr	r2, [pc, #432]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80036ec:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80036ee:	2324      	movs	r3, #36	; 0x24
 80036f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	2302      	movs	r3, #2
 80036f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fa:	2303      	movs	r3, #3
 80036fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80036fe:	2306      	movs	r3, #6
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	4619      	mov	r1, r3
 8003708:	4866      	ldr	r0, [pc, #408]	; (80038a4 <HAL_SAI_MspInit+0x1f8>)
 800370a:	f005 fee5 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800370e:	2350      	movs	r3, #80	; 0x50
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800371a:	2302      	movs	r3, #2
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800371e:	2306      	movs	r3, #6
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	485e      	ldr	r0, [pc, #376]	; (80038a4 <HAL_SAI_MspInit+0x1f8>)
 800372a:	f005 fed5 	bl	80094d8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 800372e:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003730:	4a5e      	ldr	r2, [pc, #376]	; (80038ac <HAL_SAI_MspInit+0x200>)
 8003732:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003734:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003736:	2257      	movs	r2, #87	; 0x57
 8003738:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800373a:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003746:	4b58      	ldr	r3, [pc, #352]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800374e:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003754:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003756:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800375c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800375e:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003764:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003768:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800376c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800376e:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003770:	2204      	movs	r2, #4
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003776:	2200      	movs	r2, #0
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 800377c:	2200      	movs	r2, #0
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003786:	4848      	ldr	r0, [pc, #288]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 8003788:	f003 fdc2 	bl	8007310 <HAL_DMA_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8003792:	f7ff fed7 	bl	8003544 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a43      	ldr	r2, [pc, #268]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 800379a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800379e:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a40      	ldr	r2, [pc, #256]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 80037a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80037ac:	4a3e      	ldr	r2, [pc, #248]	; (80038a8 <HAL_SAI_MspInit+0x1fc>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a3e      	ldr	r2, [pc, #248]	; (80038b0 <HAL_SAI_MspInit+0x204>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d169      	bne.n	8003890 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10e      	bne.n	80037e2 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80037c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ca:	4a35      	ldr	r2, [pc, #212]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80037cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_SAI_MspInit+0x1f4>)
 80037d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a2c      	ldr	r2, [pc, #176]	; (800389c <HAL_SAI_MspInit+0x1f0>)
 80037ea:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037ec:	2308      	movs	r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037f8:	2302      	movs	r3, #2
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80037fc:	2306      	movs	r3, #6
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	4827      	ldr	r0, [pc, #156]	; (80038a4 <HAL_SAI_MspInit+0x1f8>)
 8003808:	f005 fe66 	bl	80094d8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <HAL_SAI_MspInit+0x20c>)
 8003810:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003812:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003814:	2258      	movs	r2, #88	; 0x58
 8003816:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800381e:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800382a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800382e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003832:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800383a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800383e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003842:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003846:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800384a:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800384e:	2204      	movs	r2, #4
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800385a:	2200      	movs	r2, #0
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003864:	4813      	ldr	r0, [pc, #76]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003866:	f003 fd53 	bl	8007310 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 8003870:	f7ff fe68 	bl	8003544 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800387c:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 8003886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_SAI_MspInit+0x208>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003890:	bf00      	nop
 8003892:	3728      	adds	r7, #40	; 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40015804 	.word	0x40015804
 800389c:	20001ad0 	.word	0x20001ad0
 80038a0:	58024400 	.word	0x58024400
 80038a4:	58021000 	.word	0x58021000
 80038a8:	200019e0 	.word	0x200019e0
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40015824 	.word	0x40015824
 80038b4:	20001a58 	.word	0x20001a58
 80038b8:	40020040 	.word	0x40020040

080038bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <SD_CheckStatus+0x38>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80038cc:	f7fe ff5a 	bl	8002784 <BSP_SD_GetCardState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <SD_CheckStatus+0x38>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SD_CheckStatus+0x38>)
 80038e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80038e6:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <SD_CheckStatus+0x38>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000014 	.word	0x20000014

080038f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <SD_initialize+0x38>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003908:	f7fe feda 	bl	80026c0 <BSP_SD_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ffd1 	bl	80038bc <SD_CheckStatus>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SD_initialize+0x38>)
 8003920:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003922:	4b03      	ldr	r3, [pc, #12]	; (8003930 <SD_initialize+0x38>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000014 	.word	0x20000014

08003934 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ffbb 	bl	80038bc <SD_CheckStatus>
 8003946:	4603      	mov	r3, r0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7fe fecd 	bl	800270c <BSP_SD_ReadBlocks>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003978:	bf00      	nop
 800397a:	f7fe ff03 	bl	8002784 <BSP_SD_GetCardState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1fa      	bne.n	800397a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	f7fe feca 	bl	8002748 <BSP_SD_WriteBlocks>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80039ba:	bf00      	nop
 80039bc:	f7fe fee2 	bl	8002784 <BSP_SD_GetCardState>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1fa      	bne.n	80039bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	603a      	str	r2, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
 80039e0:	460b      	mov	r3, r1
 80039e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80039ea:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <SD_ioctl+0xac>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SD_ioctl+0x28>
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03c      	b.n	8003a76 <SD_ioctl+0xa2>

  switch (cmd)
 80039fc:	79bb      	ldrb	r3, [r7, #6]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d834      	bhi.n	8003a6c <SD_ioctl+0x98>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <SD_ioctl+0x34>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a21 	.word	0x08003a21
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a53 	.word	0x08003a53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003a1e:	e028      	b.n	8003a72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe febd 	bl	80027a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003a36:	e01c      	b.n	8003a72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe feb1 	bl	80027a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003a50:	e00f      	b.n	8003a72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fea4 	bl	80027a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	0a5a      	lsrs	r2, r3, #9
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003a6a:	e002      	b.n	8003a72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3730      	adds	r7, #48	; 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000014 	.word	0x20000014

08003a84 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <MX_SDMMC1_SD_Init+0x38>)
 8003a8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003a9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aa0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <MX_SDMMC1_SD_Init+0x34>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20001ad4 	.word	0x20001ad4
 8003abc:	52007000 	.word	0x52007000

08003ac0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_SD_MspInit+0xe8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d15e      	bne.n	8003ba0 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ae2:	4b32      	ldr	r3, [pc, #200]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003ae4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ae8:	4a30      	ldr	r2, [pc, #192]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003af2:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003af4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b06:	4a29      	ldr	r2, [pc, #164]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b26:	f043 0308 	orr.w	r3, r3, #8
 8003b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <HAL_SD_MspInit+0xec>)
 8003b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003b3c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003b4e:	230c      	movs	r3, #12
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4619      	mov	r1, r3
 8003b58:	4815      	ldr	r0, [pc, #84]	; (8003bb0 <HAL_SD_MspInit+0xf0>)
 8003b5a:	f005 fcbd 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003b70:	230c      	movs	r3, #12
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <HAL_SD_MspInit+0xf0>)
 8003b7c:	f005 fcac 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b80:	2304      	movs	r3, #4
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003b90:	230c      	movs	r3, #12
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4806      	ldr	r0, [pc, #24]	; (8003bb4 <HAL_SD_MspInit+0xf4>)
 8003b9c:	f005 fc9c 	bl	80094d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3728      	adds	r7, #40	; 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	52007000 	.word	0x52007000
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	58020800 	.word	0x58020800
 8003bb4:	58020c00 	.word	0x58020c00

08003bb8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bbe:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <MX_SPI1_Init+0xa8>)
 8003bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003bc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bd0:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003be4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bf0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bf8:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfe:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003c04:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <MX_SPI1_Init+0xa4>)
 8003c4a:	f00e f80f 	bl	8011c6c <HAL_SPI_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003c54:	f7ff fc76 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20001b50 	.word	0x20001b50
 8003c60:	40013000 	.word	0x40013000

08003c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b0bc      	sub	sp, #240	; 0xf0
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c7c:	f107 0318 	add.w	r3, r7, #24
 8003c80:	22c0      	movs	r2, #192	; 0xc0
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f013 fedd 	bl	8017a44 <memset>
  if(spiHandle->Instance==SPI1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_SPI_MspInit+0x10c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d169      	bne.n	8003d68 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ca4:	f107 0318 	add.w	r3, r7, #24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f008 ff67 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003cb4:	f7ff fc46 	bl	8003544 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd6:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cdc:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_SPI_MspInit+0x110>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d34:	4619      	mov	r1, r3
 8003d36:	4810      	ldr	r0, [pc, #64]	; (8003d78 <HAL_SPI_MspInit+0x114>)
 8003d38:	f005 fbce 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003d3c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d56:	2305      	movs	r3, #5
 8003d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d60:	4619      	mov	r1, r3
 8003d62:	4806      	ldr	r0, [pc, #24]	; (8003d7c <HAL_SPI_MspInit+0x118>)
 8003d64:	f005 fbb8 	bl	80094d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d68:	bf00      	nop
 8003d6a:	37f0      	adds	r7, #240	; 0xf0
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40013000 	.word	0x40013000
 8003d74:	58024400 	.word	0x58024400
 8003d78:	58020c00 	.word	0x58020c00
 8003d7c:	58021800 	.word	0x58021800

08003d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_MspInit+0x30>)
 8003d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_MspInit+0x30>)
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_MspInit+0x30>)
 8003d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	58024400 	.word	0x58024400

08003db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	/* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <HardFault_Handler+0x4>

08003dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <MemManage_Handler+0x4>

08003dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd2:	e7fe      	b.n	8003dd2 <BusFault_Handler+0x4>

08003dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <UsageFault_Handler+0x4>

08003dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e08:	f001 fb1c 	bl	8005444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <DMA1_Stream0_IRQHandler+0x10>)
 8003e16:	f004 f841 	bl	8007e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000204 	.word	0x20000204

08003e24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <DMA1_Stream1_IRQHandler+0x10>)
 8003e2a:	f004 f837 	bl	8007e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200019e0 	.word	0x200019e0

08003e38 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <DMA1_Stream2_IRQHandler+0x10>)
 8003e3e:	f004 f82d 	bl	8007e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20001a58 	.word	0x20001a58

08003e4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <ADC_IRQHandler+0x10>)
 8003e52:	f001 ffc9 	bl	8005de8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	2000013c 	.word	0x2000013c

08003e60 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003e66:	f005 ff83 	bl	8009d70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20001da8 	.word	0x20001da8

08003e74 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8003e7a:	f005 ff79 	bl	8009d70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20001da8 	.word	0x20001da8

08003e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <OTG_FS_IRQHandler+0x10>)
 8003e8e:	f005 ff6f 	bl	8009d70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20001da8 	.word	0x20001da8

08003e9c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <_sbrk+0x50>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <_sbrk+0x16>
		heap_end = &end;
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_sbrk+0x50>)
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <_sbrk+0x54>)
 8003eb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <_sbrk+0x50>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <_sbrk+0x50>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	466a      	mov	r2, sp
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d907      	bls.n	8003ed6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003ec6:	f013 fdd5 	bl	8017a74 <__errno>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	220c      	movs	r2, #12
 8003ece:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed4:	e006      	b.n	8003ee4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_sbrk+0x50>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	4a03      	ldr	r2, [pc, #12]	; (8003eec <_sbrk+0x50>)
 8003ee0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20001bd8 	.word	0x20001bd8
 8003ef0:	20002208 	.word	0x20002208

08003ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <SystemInit+0xac>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <SystemInit+0xac>)
 8003f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f08:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <SystemInit+0xb0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <SystemInit+0xb0>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f14:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <SystemInit+0xb0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <SystemInit+0xb0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4921      	ldr	r1, [pc, #132]	; (8003fa4 <SystemInit+0xb0>)
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <SystemInit+0xb4>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f26:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <SystemInit+0xb0>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <SystemInit+0xb0>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <SystemInit+0xb0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <SystemInit+0xb0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <SystemInit+0xb0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <SystemInit+0xb0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <SystemInit+0xb0>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <SystemInit+0xb0>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <SystemInit+0xb0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <SystemInit+0xb0>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <SystemInit+0xb0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <SystemInit+0xb0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <SystemInit+0xb0>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <SystemInit+0xb0>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <SystemInit+0xb8>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <SystemInit+0xbc>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f86:	d202      	bcs.n	8003f8e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <SystemInit+0xc0>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <SystemInit+0xac>)
 8003f90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fac:	5c001000 	.word	0x5c001000
 8003fb0:	ffff0000 	.word	0xffff0000
 8003fb4:	51008108 	.word	0x51008108

08003fb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b096      	sub	sp, #88	; 0x58
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	611a      	str	r2, [r3, #16]
 8003fda:	615a      	str	r2, [r3, #20]
 8003fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	222c      	movs	r2, #44	; 0x2c
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f013 fd2d 	bl	8017a44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <MX_TIM1_Init+0x118>)
 8003fec:	4a39      	ldr	r2, [pc, #228]	; (80040d4 <MX_TIM1_Init+0x11c>)
 8003fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ff0:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <MX_TIM1_Init+0x118>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <MX_TIM1_Init+0x118>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ffc:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <MX_TIM1_Init+0x118>)
 8003ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004002:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <MX_TIM1_Init+0x118>)
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <MX_TIM1_Init+0x118>)
 800400c:	2200      	movs	r2, #0
 800400e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004010:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <MX_TIM1_Init+0x118>)
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004016:	482e      	ldr	r0, [pc, #184]	; (80040d0 <MX_TIM1_Init+0x118>)
 8004018:	f00d ffbe 	bl	8011f98 <HAL_TIM_PWM_Init>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004022:	f7ff fa8f 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004032:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004036:	4619      	mov	r1, r3
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <MX_TIM1_Init+0x118>)
 800403a:	f00e fe1f 	bl	8012c7c <HAL_TIMEx_MasterConfigSynchronization>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004044:	f7ff fa7e 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004048:	2360      	movs	r3, #96	; 0x60
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004050:	2300      	movs	r3, #0
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004054:	2300      	movs	r3, #0
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004068:	2208      	movs	r2, #8
 800406a:	4619      	mov	r1, r3
 800406c:	4818      	ldr	r0, [pc, #96]	; (80040d0 <MX_TIM1_Init+0x118>)
 800406e:	f00d ffeb 	bl	8012048 <HAL_TIM_PWM_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004078:	f7ff fa64 	bl	8003544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004094:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800409e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <MX_TIM1_Init+0x118>)
 80040b2:	f00e fe71 	bl	8012d98 <HAL_TIMEx_ConfigBreakDeadTime>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80040bc:	f7ff fa42 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040c0:	4803      	ldr	r0, [pc, #12]	; (80040d0 <MX_TIM1_Init+0x118>)
 80040c2:	f000 f9b7 	bl	8004434 <HAL_TIM_MspPostInit>

}
 80040c6:	bf00      	nop
 80040c8:	3758      	adds	r7, #88	; 0x58
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20001bdc 	.word	0x20001bdc
 80040d4:	40010000 	.word	0x40010000

080040d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08e      	sub	sp, #56	; 0x38
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040f8:	463b      	mov	r3, r7
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	615a      	str	r2, [r3, #20]
 8004108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <MX_TIM3_Init+0xec>)
 800410e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <MX_TIM3_Init+0xe8>)
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <MX_TIM3_Init+0xe8>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800411e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <MX_TIM3_Init+0xe8>)
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412a:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004130:	4823      	ldr	r0, [pc, #140]	; (80041c0 <MX_TIM3_Init+0xe8>)
 8004132:	f00d feda 	bl	8011eea <HAL_TIM_Base_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800413c:	f7ff fa02 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800414a:	4619      	mov	r1, r3
 800414c:	481c      	ldr	r0, [pc, #112]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800414e:	f00e f88f 	bl	8012270 <HAL_TIM_ConfigClockSource>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004158:	f7ff f9f4 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800415c:	4818      	ldr	r0, [pc, #96]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800415e:	f00d ff1b 	bl	8011f98 <HAL_TIM_PWM_Init>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004168:	f7ff f9ec 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004174:	f107 031c 	add.w	r3, r7, #28
 8004178:	4619      	mov	r1, r3
 800417a:	4811      	ldr	r0, [pc, #68]	; (80041c0 <MX_TIM3_Init+0xe8>)
 800417c:	f00e fd7e 	bl	8012c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004186:	f7ff f9dd 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800418a:	2360      	movs	r3, #96	; 0x60
 800418c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800419a:	463b      	mov	r3, r7
 800419c:	2204      	movs	r2, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <MX_TIM3_Init+0xe8>)
 80041a2:	f00d ff51 	bl	8012048 <HAL_TIM_PWM_ConfigChannel>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80041ac:	f7ff f9ca 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <MX_TIM3_Init+0xe8>)
 80041b2:	f000 f93f 	bl	8004434 <HAL_TIM_MspPostInit>

}
 80041b6:	bf00      	nop
 80041b8:	3738      	adds	r7, #56	; 0x38
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20001c28 	.word	0x20001c28
 80041c4:	40000400 	.word	0x40000400

080041c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	f107 031c 	add.w	r3, r7, #28
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	615a      	str	r2, [r3, #20]
 80041f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <MX_TIM4_Init+0x114>)
 80041fc:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <MX_TIM4_Init+0x118>)
 80041fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <MX_TIM4_Init+0x114>)
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004206:	4b35      	ldr	r3, [pc, #212]	; (80042dc <MX_TIM4_Init+0x114>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800420c:	4b33      	ldr	r3, [pc, #204]	; (80042dc <MX_TIM4_Init+0x114>)
 800420e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004212:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004214:	4b31      	ldr	r3, [pc, #196]	; (80042dc <MX_TIM4_Init+0x114>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <MX_TIM4_Init+0x114>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004220:	482e      	ldr	r0, [pc, #184]	; (80042dc <MX_TIM4_Init+0x114>)
 8004222:	f00d fe62 	bl	8011eea <HAL_TIM_Base_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800422c:	f7ff f98a 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	4619      	mov	r1, r3
 800423c:	4827      	ldr	r0, [pc, #156]	; (80042dc <MX_TIM4_Init+0x114>)
 800423e:	f00e f817 	bl	8012270 <HAL_TIM_ConfigClockSource>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004248:	f7ff f97c 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800424c:	4823      	ldr	r0, [pc, #140]	; (80042dc <MX_TIM4_Init+0x114>)
 800424e:	f00d fea3 	bl	8011f98 <HAL_TIM_PWM_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004258:	f7ff f974 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004264:	f107 031c 	add.w	r3, r7, #28
 8004268:	4619      	mov	r1, r3
 800426a:	481c      	ldr	r0, [pc, #112]	; (80042dc <MX_TIM4_Init+0x114>)
 800426c:	f00e fd06 	bl	8012c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004276:	f7ff f965 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427a:	2360      	movs	r3, #96	; 0x60
 800427c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800428a:	463b      	mov	r3, r7
 800428c:	2200      	movs	r2, #0
 800428e:	4619      	mov	r1, r3
 8004290:	4812      	ldr	r0, [pc, #72]	; (80042dc <MX_TIM4_Init+0x114>)
 8004292:	f00d fed9 	bl	8012048 <HAL_TIM_PWM_ConfigChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800429c:	f7ff f952 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042a0:	463b      	mov	r3, r7
 80042a2:	2204      	movs	r2, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	480d      	ldr	r0, [pc, #52]	; (80042dc <MX_TIM4_Init+0x114>)
 80042a8:	f00d fece 	bl	8012048 <HAL_TIM_PWM_ConfigChannel>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80042b2:	f7ff f947 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042b6:	463b      	mov	r3, r7
 80042b8:	220c      	movs	r2, #12
 80042ba:	4619      	mov	r1, r3
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <MX_TIM4_Init+0x114>)
 80042be:	f00d fec3 	bl	8012048 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80042c8:	f7ff f93c 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <MX_TIM4_Init+0x114>)
 80042ce:	f000 f8b1 	bl	8004434 <HAL_TIM_MspPostInit>

}
 80042d2:	bf00      	nop
 80042d4:	3738      	adds	r7, #56	; 0x38
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20001c74 	.word	0x20001c74
 80042e0:	40000800 	.word	0x40000800

080042e4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <MX_TIM7_Init+0x64>)
 80042f6:	4a15      	ldr	r2, [pc, #84]	; (800434c <MX_TIM7_Init+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <MX_TIM7_Init+0x64>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <MX_TIM7_Init+0x64>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <MX_TIM7_Init+0x64>)
 8004308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800430c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <MX_TIM7_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004314:	480c      	ldr	r0, [pc, #48]	; (8004348 <MX_TIM7_Init+0x64>)
 8004316:	f00d fde8 	bl	8011eea <HAL_TIM_Base_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004320:	f7ff f910 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004324:	2300      	movs	r3, #0
 8004326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4805      	ldr	r0, [pc, #20]	; (8004348 <MX_TIM7_Init+0x64>)
 8004332:	f00e fca3 	bl	8012c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800433c:	f7ff f902 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20001cc0 	.word	0x20001cc0
 800434c:	40001400 	.word	0x40001400

08004350 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0b      	ldr	r2, [pc, #44]	; (800438c <HAL_TIM_PWM_MspInit+0x3c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_TIM_PWM_MspInit+0x40>)
 8004364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_TIM_PWM_MspInit+0x40>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <HAL_TIM_PWM_MspInit+0x40>)
 8004374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40010000 	.word	0x40010000
 8004390:	58024400 	.word	0x58024400

08004394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_TIM_Base_MspInit+0x90>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10f      	bne.n	80043c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80043c4:	e028      	b.n	8004418 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_TIM_Base_MspInit+0x98>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10f      	bne.n	80043f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
}
 80043ee:	e013      	b.n	8004418 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <HAL_TIM_Base_MspInit+0x9c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 80043fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <HAL_TIM_Base_MspInit+0x94>)
 800440c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40000400 	.word	0x40000400
 8004428:	58024400 	.word	0x58024400
 800442c:	40000800 	.word	0x40000800
 8004430:	40001400 	.word	0x40001400

08004434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a38      	ldr	r2, [pc, #224]	; (8004534 <HAL_TIM_MspPostInit+0x100>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d120      	bne.n	8004498 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445c:	4a36      	ldr	r2, [pc, #216]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004486:	2301      	movs	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4619      	mov	r1, r3
 8004490:	482a      	ldr	r0, [pc, #168]	; (800453c <HAL_TIM_MspPostInit+0x108>)
 8004492:	f005 f821 	bl	80094d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004496:	e049      	b.n	800452c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <HAL_TIM_MspPostInit+0x10c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d11f      	bne.n	80044e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a2:	4b25      	ldr	r3, [pc, #148]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b2:	4b21      	ldr	r3, [pc, #132]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044c0:	2320      	movs	r3, #32
 80044c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044cc:	2300      	movs	r3, #0
 80044ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044d0:	2302      	movs	r3, #2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4619      	mov	r1, r3
 80044da:	481a      	ldr	r0, [pc, #104]	; (8004544 <HAL_TIM_MspPostInit+0x110>)
 80044dc:	f004 fffc 	bl	80094d8 <HAL_GPIO_Init>
}
 80044e0:	e024      	b.n	800452c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_TIM_MspPostInit+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d11f      	bne.n	800452c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_TIM_MspPostInit+0x104>)
 80044fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800450a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800450e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004510:	2302      	movs	r3, #2
 8004512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800451c:	2302      	movs	r3, #2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4619      	mov	r1, r3
 8004526:	4807      	ldr	r0, [pc, #28]	; (8004544 <HAL_TIM_MspPostInit+0x110>)
 8004528:	f004 ffd6 	bl	80094d8 <HAL_GPIO_Init>
}
 800452c:	bf00      	nop
 800452e:	3728      	adds	r7, #40	; 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40010000 	.word	0x40010000
 8004538:	58024400 	.word	0x58024400
 800453c:	58020000 	.word	0x58020000
 8004540:	40000400 	.word	0x40000400
 8004544:	58020400 	.word	0x58020400
 8004548:	40000800 	.word	0x40000800

0800454c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004550:	4b22      	ldr	r3, [pc, #136]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004552:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <MX_USART6_UART_Init+0x94>)
 8004554:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800455c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <MX_USART6_UART_Init+0x90>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004572:	2204      	movs	r2, #4
 8004574:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <MX_USART6_UART_Init+0x90>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004584:	2200      	movs	r2, #0
 8004586:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <MX_USART6_UART_Init+0x90>)
 800458a:	2200      	movs	r2, #0
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004590:	2200      	movs	r2, #0
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004594:	4811      	ldr	r0, [pc, #68]	; (80045dc <MX_USART6_UART_Init+0x90>)
 8004596:	f00e fc7d 	bl	8012e94 <HAL_UART_Init>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80045a0:	f7fe ffd0 	bl	8003544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045a4:	2100      	movs	r1, #0
 80045a6:	480d      	ldr	r0, [pc, #52]	; (80045dc <MX_USART6_UART_Init+0x90>)
 80045a8:	f00f fc7f 	bl	8013eaa <HAL_UARTEx_SetTxFifoThreshold>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80045b2:	f7fe ffc7 	bl	8003544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045b6:	2100      	movs	r1, #0
 80045b8:	4808      	ldr	r0, [pc, #32]	; (80045dc <MX_USART6_UART_Init+0x90>)
 80045ba:	f00f fcb4 	bl	8013f26 <HAL_UARTEx_SetRxFifoThreshold>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80045c4:	f7fe ffbe 	bl	8003544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80045c8:	4804      	ldr	r0, [pc, #16]	; (80045dc <MX_USART6_UART_Init+0x90>)
 80045ca:	f00f fc35 	bl	8013e38 <HAL_UARTEx_DisableFifoMode>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80045d4:	f7fe ffb6 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20001d0c 	.word	0x20001d0c
 80045e0:	40011400 	.word	0x40011400

080045e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b0bc      	sub	sp, #240	; 0xf0
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	22c0      	movs	r2, #192	; 0xc0
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f013 fa1d 	bl	8017a44 <memset>
  if(uartHandle->Instance==USART6)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a39      	ldr	r2, [pc, #228]	; (80046f4 <HAL_UART_MspInit+0x110>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d16a      	bne.n	80046ea <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004614:	f04f 0201 	mov.w	r2, #1
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004626:	f107 0318 	add.w	r3, r7, #24
 800462a:	4618      	mov	r0, r3
 800462c:	f008 faa6 	bl	800cb7c <HAL_RCCEx_PeriphCLKConfig>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004636:	f7fe ff85 	bl	8003544 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <HAL_UART_MspInit+0x114>)
 800463c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004640:	4a2d      	ldr	r2, [pc, #180]	; (80046f8 <HAL_UART_MspInit+0x114>)
 8004642:	f043 0320 	orr.w	r3, r3, #32
 8004646:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800464a:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_UART_MspInit+0x114>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_UART_MspInit+0x114>)
 800465a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800465e:	4a26      	ldr	r2, [pc, #152]	; (80046f8 <HAL_UART_MspInit+0x114>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <HAL_UART_MspInit+0x114>)
 800466a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_UART_MspInit+0x114>)
 8004678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_UART_MspInit+0x114>)
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004686:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_UART_MspInit+0x114>)
 8004688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80046ac:	2307      	movs	r3, #7
 80046ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046b6:	4619      	mov	r1, r3
 80046b8:	4810      	ldr	r0, [pc, #64]	; (80046fc <HAL_UART_MspInit+0x118>)
 80046ba:	f004 ff0d 	bl	80094d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	2302      	movs	r3, #2
 80046c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80046d8:	2307      	movs	r3, #7
 80046da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046e2:	4619      	mov	r1, r3
 80046e4:	4806      	ldr	r0, [pc, #24]	; (8004700 <HAL_UART_MspInit+0x11c>)
 80046e6:	f004 fef7 	bl	80094d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046ea:	bf00      	nop
 80046ec:	37f0      	adds	r7, #240	; 0xf0
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40011400 	.word	0x40011400
 80046f8:	58024400 	.word	0x58024400
 80046fc:	58020800 	.word	0x58020800
 8004700:	58021800 	.word	0x58021800

08004704 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004708:	2201      	movs	r2, #1
 800470a:	490f      	ldr	r1, [pc, #60]	; (8004748 <MX_USB_HOST_Init+0x44>)
 800470c:	480f      	ldr	r0, [pc, #60]	; (800474c <MX_USB_HOST_Init+0x48>)
 800470e:	f011 fb73 	bl	8015df8 <USBH_Init>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8004718:	f7fe ff14 	bl	8003544 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 800471c:	490c      	ldr	r1, [pc, #48]	; (8004750 <MX_USB_HOST_Init+0x4c>)
 800471e:	480b      	ldr	r0, [pc, #44]	; (800474c <MX_USB_HOST_Init+0x48>)
 8004720:	f011 fc19 	bl	8015f56 <USBH_RegisterClass>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800472a:	f7fe ff0b 	bl	8003544 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800472e:	4807      	ldr	r0, [pc, #28]	; (800474c <MX_USB_HOST_Init+0x48>)
 8004730:	f011 fc9e 	bl	8016070 <USBH_Start>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800473a:	f7fe ff03 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800473e:	f007 fa27 	bl	800bb90 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	0800476d 	.word	0x0800476d
 800474c:	30000460 	.word	0x30000460
 8004750:	20000020 	.word	0x20000020

08004754 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8004758:	4803      	ldr	r0, [pc, #12]	; (8004768 <MX_USB_HOST_Process+0x14>)
 800475a:	f011 fcb5 	bl	80160c8 <USBH_Process>
  MIDI_Application();
 800475e:	f7fc fde1 	bl	8001324 <MIDI_Application>
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	30000460 	.word	0x30000460

0800476c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	3b01      	subs	r3, #1
 800477c:	2b04      	cmp	r3, #4
 800477e:	d839      	bhi.n	80047f4 <USBH_UserProcess+0x88>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <USBH_UserProcess+0x1c>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047f5 	.word	0x080047f5
 800478c:	080047df 	.word	0x080047df
 8004790:	080047f5 	.word	0x080047f5
 8004794:	080047ed 	.word	0x080047ed
 8004798:	0800479d 	.word	0x0800479d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <USBH_UserProcess+0x94>)
 800479e:	2203      	movs	r2, #3
 80047a0:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 80047a2:	4818      	ldr	r0, [pc, #96]	; (8004804 <USBH_UserProcess+0x98>)
 80047a4:	f011 fc74 	bl	8016090 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e007      	b.n	80047be <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <USBH_UserProcess+0x9c>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b3f      	cmp	r3, #63	; 0x3f
 80047c2:	ddf4      	ble.n	80047ae <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80047c4:	2201      	movs	r2, #1
 80047c6:	4911      	ldr	r1, [pc, #68]	; (800480c <USBH_UserProcess+0xa0>)
 80047c8:	480e      	ldr	r0, [pc, #56]	; (8004804 <USBH_UserProcess+0x98>)
 80047ca:	f011 fb15 	bl	8015df8 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 80047ce:	4910      	ldr	r1, [pc, #64]	; (8004810 <USBH_UserProcess+0xa4>)
 80047d0:	480c      	ldr	r0, [pc, #48]	; (8004804 <USBH_UserProcess+0x98>)
 80047d2:	f011 fbc0 	bl	8015f56 <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 80047d6:	480b      	ldr	r0, [pc, #44]	; (8004804 <USBH_UserProcess+0x98>)
 80047d8:	f011 fc4a 	bl	8016070 <USBH_Start>
	break;
 80047dc:	e00b      	b.n	80047f6 <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <USBH_UserProcess+0x94>)
 80047e0:	2202      	movs	r2, #2
 80047e2:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <USBH_UserProcess+0xa8>)
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
  break;
 80047ea:	e004      	b.n	80047f6 <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <USBH_UserProcess+0x94>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
  break;
 80047f2:	e000      	b.n	80047f6 <USBH_UserProcess+0x8a>

  default:
  break;
 80047f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20001da0 	.word	0x20001da0
 8004804:	30000460 	.word	0x30000460
 8004808:	30000000 	.word	0x30000000
 800480c:	0800476d 	.word	0x0800476d
 8004810:	20000020 	.word	0x20000020
 8004814:	20000000 	.word	0x20000000

08004818 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af04      	add	r7, sp, #16
 800481e:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004820:	2302      	movs	r3, #2
 8004822:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8004828:	23ff      	movs	r3, #255	; 0xff
 800482a:	2203      	movs	r2, #3
 800482c:	2101      	movs	r1, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f011 fbd8 	bl	8015fe4 <USBH_FindInterface>
 8004834:	4603      	mov	r3, r0
 8004836:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d102      	bne.n	8004844 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 800483e:	2302      	movs	r3, #2
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e0f2      	b.n	8004a2a <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8004844:	7bbb      	ldrb	r3, [r7, #14]
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f011 fbaf 	bl	8015fac <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8004854:	201c      	movs	r0, #28
 8004856:	f013 f839 	bl	80178cc <malloc>
 800485a:	4603      	mov	r3, r0
 800485c:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800486e:	4619      	mov	r1, r3
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	231a      	movs	r3, #26
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b25b      	sxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	da1c      	bge.n	80048c0 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800488c:	4619      	mov	r1, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	231a      	movs	r3, #26
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048a8:	4619      	mov	r1, r3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	231a      	movs	r3, #26
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	811a      	strh	r2, [r3, #8]
 80048be:	e01b      	b.n	80048f8 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048c6:	4619      	mov	r1, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	231a      	movs	r3, #26
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048e2:	4619      	mov	r1, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	231a      	movs	r3, #26
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80048f2:	881a      	ldrh	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048fe:	4619      	mov	r1, r3
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	231a      	movs	r3, #26
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b25b      	sxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	da1c      	bge.n	8004950 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800491c:	4619      	mov	r1, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	231a      	movs	r3, #26
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	f203 3356 	addw	r3, r3, #854	; 0x356
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004938:	4619      	mov	r1, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	231a      	movs	r3, #26
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004948:	881a      	ldrh	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	811a      	strh	r2, [r3, #8]
 800494e:	e01b      	b.n	8004988 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004956:	4619      	mov	r1, r3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	231a      	movs	r3, #26
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004972:	4619      	mov	r1, r3
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	231a      	movs	r3, #26
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	78db      	ldrb	r3, [r3, #3]
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f012 fed9 	bl	8017746 <USBH_AllocPipe>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	791b      	ldrb	r3, [r3, #4]
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f012 fecf 	bl	8017746 <USBH_AllocPipe>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	7899      	ldrb	r1, [r3, #2]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	78d8      	ldrb	r0, [r3, #3]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	88d2      	ldrh	r2, [r2, #6]
 80049c8:	9202      	str	r2, [sp, #8]
 80049ca:	2202      	movs	r2, #2
 80049cc:	9201      	str	r2, [sp, #4]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4623      	mov	r3, r4
 80049d2:	4602      	mov	r2, r0
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f012 fe87 	bl	80176e8 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	7859      	ldrb	r1, [r3, #1]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	7918      	ldrb	r0, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	8912      	ldrh	r2, [r2, #8]
 80049f2:	9202      	str	r2, [sp, #8]
 80049f4:	2202      	movs	r2, #2
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4623      	mov	r3, r4
 80049fc:	4602      	mov	r2, r0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f012 fe72 	bl	80176e8 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fbf6 	bl	8005204 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fbef 	bl	8005204 <USBH_LL_SetToggle>
		status = USBH_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}

08004a34 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	789b      	ldrb	r3, [r3, #2]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	789b      	ldrb	r3, [r3, #2]
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f012 fe66 	bl	8017726 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f012 fe92 	bl	801778a <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00e      	beq.n	8004a92 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f012 fe53 	bl	8017726 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f012 fe7f 	bl	801778a <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f012 ff18 	bl	80178dc <free>
		phost->pActiveClass->pData = 0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8004ace:	2102      	movs	r1, #2
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3

	return USBH_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d10e      	bne.n	8004b18 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f012 fe0d 	bl	8017726 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	789b      	ldrb	r3, [r3, #2]
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f012 fe07 	bl	8017726 <USBH_ClosePipe>
  }
  return USBH_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d012      	beq.n	8004b6a <USBH_MIDI_Process+0x48>
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	dc1d      	bgt.n	8004b84 <USBH_MIDI_Process+0x62>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <USBH_MIDI_Process+0x30>
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d003      	beq.n	8004b58 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8004b50:	e018      	b.n	8004b84 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
		break;
 8004b56:	e018      	b.n	8004b8a <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f851 	bl	8004c00 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8c0 	bl	8004ce4 <MIDI_ProcessReception>
		status = USBH_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]
		break;
 8004b68:	e00f      	b.n	8004b8a <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f012 f837 	bl	8016be0 <USBH_ClrFeature>
 8004b72:	4603      	mov	r3, r0
 8004b74:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8004b76:	7bbb      	ldrb	r3, [r7, #14]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
		break;
 8004b82:	e001      	b.n	8004b88 <USBH_MIDI_Process+0x66>
		break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <USBH_MIDI_Process+0x68>
		break;
 8004b88:	bf00      	nop

	}

	return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <USBH_MIDI_Receive+0x2c>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10d      	bne.n	8004bf2 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2203      	movs	r2, #3
 8004bec:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	7e1b      	ldrb	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d002      	beq.n	8004c24 <MIDI_ProcessTransmission+0x24>
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d021      	beq.n	8004c66 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8004c22:	e05a      	b.n	8004cda <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8a9a      	ldrh	r2, [r3, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88db      	ldrh	r3, [r3, #6]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d90b      	bls.n	8004c48 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88da      	ldrh	r2, [r3, #6]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	789b      	ldrb	r3, [r3, #2]
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	9000      	str	r0, [sp, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f012 fd0e 	bl	8017662 <USBH_BulkSendData>
 8004c46:	e00a      	b.n	8004c5e <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68d9      	ldr	r1, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8a9a      	ldrh	r2, [r3, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	789b      	ldrb	r3, [r3, #2]
 8004c54:	2001      	movs	r0, #1
 8004c56:	9000      	str	r0, [sp, #0]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f012 fd02 	bl	8017662 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2202      	movs	r2, #2
 8004c62:	761a      	strb	r2, [r3, #24]
		break;
 8004c64:	e039      	b.n	8004cda <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	789b      	ldrb	r3, [r3, #2]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa9f 	bl	80051b0 <USBH_LL_GetURBState>
 8004c72:	4603      	mov	r3, r0
 8004c74:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004c76:	7afb      	ldrb	r3, [r7, #11]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d127      	bne.n	8004ccc <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8a9a      	ldrh	r2, [r3, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88db      	ldrh	r3, [r3, #6]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d90f      	bls.n	8004ca8 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8a9a      	ldrh	r2, [r3, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88db      	ldrh	r3, [r3, #6]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	88d2      	ldrh	r2, [r2, #6]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	e002      	b.n	8004cae <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8a9b      	ldrh	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	761a      	strb	r2, [r3, #24]
		break;
 8004cbc:	e00c      	b.n	8004cd8 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f86d 	bl	8004da4 <USBH_MIDI_TransmitCallback>
		break;
 8004cca:	e005      	b.n	8004cd8 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d102      	bne.n	8004cd8 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	761a      	strb	r2, [r3, #24]
		break;
 8004cd8:	bf00      	nop
	}
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	7e5b      	ldrb	r3, [r3, #25]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d002      	beq.n	8004d08 <MIDI_ProcessReception+0x24>
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00d      	beq.n	8004d22 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8004d06:	e047      	b.n	8004d98 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6919      	ldr	r1, [r3, #16]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	891a      	ldrh	r2, [r3, #8]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f012 fcc6 	bl	80176ac <USBH_BulkReceiveData>
		break;
 8004d20:	e03a      	b.n	8004d98 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa41 	bl	80051b0 <USBH_LL_GetURBState>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d12e      	bne.n	8004d96 <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <MIDI_ProcessReception+0xbc>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9a1 	bl	800508c <USBH_LL_GetLastXferSize>
 8004d4a:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	8adb      	ldrh	r3, [r3, #22]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d017      	beq.n	8004d88 <MIDI_ProcessReception+0xa4>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	891b      	ldrh	r3, [r3, #8]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d911      	bls.n	8004d88 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	8ada      	ldrh	r2, [r3, #22]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2203      	movs	r2, #3
 8004d84:	765a      	strb	r2, [r3, #25]
		break;
 8004d86:	e006      	b.n	8004d96 <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7fc fc67 	bl	8001664 <USBH_MIDI_ReceiveCallback>
		break;
 8004d96:	bf00      	nop
	}
}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20001da4 	.word	0x20001da4

08004da4 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <HAL_HCD_MspInit+0xb8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d146      	bne.n	8004e68 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dda:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004de0:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004df8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e06:	2303      	movs	r3, #3
 8004e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4619      	mov	r1, r3
 8004e14:	4818      	ldr	r0, [pc, #96]	; (8004e78 <HAL_HCD_MspInit+0xc0>)
 8004e16:	f004 fb5f 	bl	80094d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_HCD_MspInit+0xbc>)
 8004e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2106      	movs	r1, #6
 8004e3c:	2062      	movs	r0, #98	; 0x62
 8004e3e:	f002 f9b6 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004e42:	2062      	movs	r0, #98	; 0x62
 8004e44:	f002 f9cd 	bl	80071e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2106      	movs	r1, #6
 8004e4c:	2063      	movs	r0, #99	; 0x63
 8004e4e:	f002 f9ae 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8004e52:	2063      	movs	r0, #99	; 0x63
 8004e54:	f002 f9c5 	bl	80071e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2065      	movs	r0, #101	; 0x65
 8004e5e:	f002 f9a6 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004e62:	2065      	movs	r0, #101	; 0x65
 8004e64:	f002 f9bd 	bl	80071e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3728      	adds	r7, #40	; 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40080000 	.word	0x40080000
 8004e74:	58024400 	.word	0x58024400
 8004e78:	58020000 	.word	0x58020000

08004e7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f011 fcfd 	bl	801688a <USBH_LL_IncTimer>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f011 fd35 	bl	8016916 <USBH_LL_Connect>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f011 fd3e 	bl	8016944 <USBH_LL_Disconnect>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
 8004edc:	4613      	mov	r3, r2
 8004ede:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004efa:	4618      	mov	r0, r3
 8004efc:	f011 fcef 	bl	80168de <USBH_LL_PortEnabled>
} 
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004f16:	4618      	mov	r0, r3
 8004f18:	f011 fcef 	bl	80168fa <USBH_LL_PortDisabled>
} 
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d129      	bne.n	8004f8a <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f42:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <USBH_LL_Init+0x74>)
 8004f4a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f4e:	2210      	movs	r2, #16
 8004f50:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f60:	2202      	movs	r2, #2
 8004f62:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004f6a:	480a      	ldr	r0, [pc, #40]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f6c:	f004 fc95 	bl	800989a <HAL_HCD_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004f76:	f7fe fae5 	bl	8003544 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004f7a:	4806      	ldr	r0, [pc, #24]	; (8004f94 <USBH_LL_Init+0x70>)
 8004f7c:	f005 f87d 	bl	800a07a <HAL_HCD_GetCurrentFrame>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f011 fc71 	bl	801686c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20001da8 	.word	0x20001da8
 8004f98:	40080000 	.word	0x40080000

08004f9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 ffeb 	bl	8009f8e <HAL_HCD_Start>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f95c 	bl	800527c <USBH_Get_USB_Status>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 fff3 	bl	8009fd4 <HAL_HCD_Stop>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f941 	bl	800527c <USBH_Get_USB_Status>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800501a:	4618      	mov	r0, r3
 800501c:	f005 f83b 	bl	800a096 <HAL_HCD_GetCurrentSpeed>
 8005020:	4603      	mov	r3, r0
 8005022:	2b02      	cmp	r3, #2
 8005024:	d00c      	beq.n	8005040 <USBH_LL_GetSpeed+0x38>
 8005026:	2b02      	cmp	r3, #2
 8005028:	d80d      	bhi.n	8005046 <USBH_LL_GetSpeed+0x3e>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <USBH_LL_GetSpeed+0x2c>
 800502e:	2b01      	cmp	r3, #1
 8005030:	d003      	beq.n	800503a <USBH_LL_GetSpeed+0x32>
 8005032:	e008      	b.n	8005046 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]
    break;
 8005038:	e008      	b.n	800504c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
    break;
 800503e:	e005      	b.n	800504c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8005040:	2302      	movs	r3, #2
 8005042:	73fb      	strb	r3, [r7, #15]
    break;
 8005044:	e002      	b.n	800504c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
    break;
 800504a:	bf00      	nop
  }
  return  speed;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800506c:	4618      	mov	r0, r3
 800506e:	f004 ffce 	bl	800a00e <HAL_HCD_ResetPort>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f8ff 	bl	800527c <USBH_Get_USB_Status>
 800507e:	4603      	mov	r3, r0
 8005080:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005082:	7bbb      	ldrb	r3, [r7, #14]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 ffd5 	bl	800a052 <HAL_HCD_HC_GetXferCount>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80050b2:	b590      	push	{r4, r7, lr}
 80050b4:	b089      	sub	sp, #36	; 0x24
 80050b6:	af04      	add	r7, sp, #16
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	4608      	mov	r0, r1
 80050bc:	4611      	mov	r1, r2
 80050be:	461a      	mov	r2, r3
 80050c0:	4603      	mov	r3, r0
 80050c2:	70fb      	strb	r3, [r7, #3]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70bb      	strb	r3, [r7, #2]
 80050c8:	4613      	mov	r3, r2
 80050ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 80050da:	787c      	ldrb	r4, [r7, #1]
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	78f9      	ldrb	r1, [r7, #3]
 80050e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4623      	mov	r3, r4
 80050f2:	f004 fc34 	bl	800995e <HAL_HCD_HC_Init>
 80050f6:	4603      	mov	r3, r0
 80050f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 f8bd 	bl	800527c <USBH_Get_USB_Status>
 8005102:	4603      	mov	r3, r0
 8005104:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005106:	7bbb      	ldrb	r3, [r7, #14]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f004 fca4 	bl	8009a7c <HAL_HCD_HC_Halt>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f89e 	bl	800527c <USBH_Get_USB_Status>
 8005140:	4603      	mov	r3, r0
 8005142:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005144:	7bbb      	ldrb	r3, [r7, #14]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800514e:	b590      	push	{r4, r7, lr}
 8005150:	b089      	sub	sp, #36	; 0x24
 8005152:	af04      	add	r7, sp, #16
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	4608      	mov	r0, r1
 8005158:	4611      	mov	r1, r2
 800515a:	461a      	mov	r2, r3
 800515c:	4603      	mov	r3, r0
 800515e:	70fb      	strb	r3, [r7, #3]
 8005160:	460b      	mov	r3, r1
 8005162:	70bb      	strb	r3, [r7, #2]
 8005164:	4613      	mov	r3, r2
 8005166:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8005176:	787c      	ldrb	r4, [r7, #1]
 8005178:	78ba      	ldrb	r2, [r7, #2]
 800517a:	78f9      	ldrb	r1, [r7, #3]
 800517c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	4623      	mov	r3, r4
 8005192:	f004 fc97 	bl	8009ac4 <HAL_HCD_HC_SubmitRequest>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f86d 	bl	800527c <USBH_Get_USB_Status>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}

080051b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f004 ff2f 	bl	800a02a <HAL_HCD_HC_GetURBState>
 80051cc:	4603      	mov	r3, r0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d103      	bne.n	80051f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f870 	bl	80052d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80051f4:	20c8      	movs	r0, #200	; 0xc8
 80051f6:	f000 f945 	bl	8005484 <HAL_Delay>
  return USBH_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
 8005210:	4613      	mov	r3, r2
 8005212:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800521a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	212c      	movs	r1, #44	; 0x2c
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	333b      	adds	r3, #59	; 0x3b
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	212c      	movs	r1, #44	; 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3354      	adds	r3, #84	; 0x54
 800523e:	78ba      	ldrb	r2, [r7, #2]
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e008      	b.n	8005256 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	3355      	adds	r3, #85	; 0x55
 8005252:	78ba      	ldrb	r2, [r7, #2]
 8005254:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f909 	bl	8005484 <HAL_Delay>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d817      	bhi.n	80052c0 <USBH_Get_USB_Status+0x44>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <USBH_Get_USB_Status+0x1c>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052af 	.word	0x080052af
 80052a0:	080052b5 	.word	0x080052b5
 80052a4:	080052bb 	.word	0x080052bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]
    break;
 80052ac:	e00b      	b.n	80052c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80052ae:	2302      	movs	r3, #2
 80052b0:	73fb      	strb	r3, [r7, #15]
    break;
 80052b2:	e008      	b.n	80052c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
    break;
 80052b8:	e005      	b.n	80052c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80052ba:	2302      	movs	r3, #2
 80052bc:	73fb      	strb	r3, [r7, #15]
    break;
 80052be:	e002      	b.n	80052c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80052c0:	2302      	movs	r3, #2
 80052c2:	73fb      	strb	r3, [r7, #15]
    break;
 80052c4:	bf00      	nop
  }
  return usb_status;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e001      	b.n	80052f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052fa:	4803      	ldr	r0, [pc, #12]	; (8005308 <MX_DriverVbusFS+0x34>)
 80052fc:	f004 fab4 	bl	8009868 <HAL_GPIO_WritePin>
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	58020400 	.word	0x58020400

0800530c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800530c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005312:	e003      	b.n	800531c <LoopCopyDataInit>

08005314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800531a:	3104      	adds	r1, #4

0800531c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800531c:	480b      	ldr	r0, [pc, #44]	; (800534c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800531e:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005324:	d3f6      	bcc.n	8005314 <CopyDataInit>
  ldr  r2, =_sbss
 8005326:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005328:	e002      	b.n	8005330 <LoopFillZerobss>

0800532a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800532a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800532c:	f842 3b04 	str.w	r3, [r2], #4

08005330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005334:	d3f9      	bcc.n	800532a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005336:	f7fe fddd 	bl	8003ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800533a:	f012 fba1 	bl	8017a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800533e:	f7fd fe7f 	bl	8003040 <main>
  bx  lr    
 8005342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005344:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005348:	08019aa8 	.word	0x08019aa8
  ldr  r0, =_sdata
 800534c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005350:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8005354:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8005358:	20002204 	.word	0x20002204

0800535c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800535c:	e7fe      	b.n	800535c <ADC3_IRQHandler>
	...

08005360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005366:	2003      	movs	r0, #3
 8005368:	f001 ff16 	bl	8007198 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800536c:	f007 fa30 	bl	800c7d0 <HAL_RCC_GetSysClockFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <HAL_Init+0x68>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	4913      	ldr	r1, [pc, #76]	; (80053cc <HAL_Init+0x6c>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
 8005388:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800538a:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <HAL_Init+0x68>)
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <HAL_Init+0x6c>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <HAL_Init+0x70>)
 80053a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053a4:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <HAL_Init+0x74>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053aa:	2000      	movs	r0, #0
 80053ac:	f000 f814 	bl	80053d8 <HAL_InitTick>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e002      	b.n	80053c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80053ba:	f7fe fce1 	bl	8003d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	58024400 	.word	0x58024400
 80053cc:	0801819c 	.word	0x0801819c
 80053d0:	2000001c 	.word	0x2000001c
 80053d4:	20000018 	.word	0x20000018

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80053e0:	4b15      	ldr	r3, [pc, #84]	; (8005438 <HAL_InitTick+0x60>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e021      	b.n	8005430 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80053ec:	4b13      	ldr	r3, [pc, #76]	; (800543c <HAL_InitTick+0x64>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <HAL_InitTick+0x60>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fefb 	bl	80071fe <HAL_SYSTICK_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e00e      	b.n	8005430 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0f      	cmp	r3, #15
 8005416:	d80a      	bhi.n	800542e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005418:	2200      	movs	r2, #0
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005420:	f001 fec5 	bl	80071ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005424:	4a06      	ldr	r2, [pc, #24]	; (8005440 <HAL_InitTick+0x68>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000044 	.word	0x20000044
 800543c:	20000018 	.word	0x20000018
 8005440:	20000040 	.word	0x20000040

08005444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_IncTick+0x20>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_IncTick+0x24>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4413      	add	r3, r2
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <HAL_IncTick+0x24>)
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000044 	.word	0x20000044
 8005468:	200020ac 	.word	0x200020ac

0800546c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return uwTick;
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_GetTick+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	200020ac 	.word	0x200020ac

08005484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800548c:	f7ff ffee 	bl	800546c <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549c:	d005      	beq.n	80054aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <HAL_Delay+0x44>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054aa:	bf00      	nop
 80054ac:	f7ff ffde 	bl	800546c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d8f7      	bhi.n	80054ac <HAL_Delay+0x28>
  {
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000044 	.word	0x20000044

080054cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_GetREVID+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	0c1b      	lsrs	r3, r3, #16
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	5c001000 	.word	0x5c001000

080054e4 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054f4:	4904      	ldr	r1, [pc, #16]	; (8005508 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	52004000 	.word	0x52004000

0800550c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3360      	adds	r3, #96	; 0x60
 8005586:	461a      	mov	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	431a      	orrs	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	611a      	str	r2, [r3, #16]
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3360      	adds	r3, #96	; 0x60
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	431a      	orrs	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	601a      	str	r2, [r3, #0]
  }
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3330      	adds	r3, #48	; 0x30
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	4413      	add	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	211f      	movs	r1, #31
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	401a      	ands	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0e9b      	lsrs	r3, r3, #26
 800567a:	f003 011f 	and.w	r1, r3, #31
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	431a      	orrs	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f023 0203 	bic.w	r2, r3, #3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b087      	sub	sp, #28
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3314      	adds	r3, #20
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	0e5b      	lsrs	r3, r3, #25
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0d1b      	lsrs	r3, r3, #20
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2107      	movs	r1, #7
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	0d1b      	lsrs	r3, r3, #20
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	431a      	orrs	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f003 0318 	and.w	r3, r3, #24
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005760:	40d9      	lsrs	r1, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	400b      	ands	r3, r1
 8005766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800576a:	431a      	orrs	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	000fffff 	.word	0x000fffff

08005784 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 031f 	and.w	r3, r3, #31
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6093      	str	r3, [r2, #8]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	5fffffc0 	.word	0x5fffffc0

080057e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f4:	d101      	bne.n	80057fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <LL_ADC_EnableInternalRegulator+0x24>)
 8005816:	4013      	ands	r3, r2
 8005818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	6fffffc0 	.word	0x6fffffc0

08005830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005844:	d101      	bne.n	800584a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <LL_ADC_Enable+0x24>)
 8005866:	4013      	ands	r3, r2
 8005868:	f043 0201 	orr.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	7fffffc0 	.word	0x7fffffc0

08005880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <LL_ADC_IsEnabled+0x18>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <LL_ADC_IsEnabled+0x1a>
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <LL_ADC_REG_StartConversion+0x24>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	f043 0204 	orr.w	r2, r3, #4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	7fffffc0 	.word	0x7fffffc0

080058d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d101      	bne.n	80058e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d101      	bne.n	800590e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e18f      	b.n	8005c56 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fc f85d 	bl	8001a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ff3f 	bl	80057e0 <LL_ADC_IsDeepPowerDownEnabled>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff25 	bl	80057bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff5a 	bl	8005830 <LL_ADC_IsInternalRegulatorEnabled>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d114      	bne.n	80059ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff ff3e 	bl	8005808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800598c:	4b87      	ldr	r3, [pc, #540]	; (8005bac <HAL_ADC_Init+0x290>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	4a87      	ldr	r2, [pc, #540]	; (8005bb0 <HAL_ADC_Init+0x294>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	099b      	lsrs	r3, r3, #6
 800599a:	3301      	adds	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800599e:	e002      	b.n	80059a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f9      	bne.n	80059a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff3d 	bl	8005830 <LL_ADC_IsInternalRegulatorEnabled>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f043 0210 	orr.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff77 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 80059e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 8129 	bne.w	8005c44 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f040 8125 	bne.w	8005c44 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff ff36 	bl	8005880 <LL_ADC_IsEnabled>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d136      	bne.n	8005a88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a65      	ldr	r2, [pc, #404]	; (8005bb4 <HAL_ADC_Init+0x298>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_ADC_Init+0x112>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a63      	ldr	r2, [pc, #396]	; (8005bb8 <HAL_ADC_Init+0x29c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10e      	bne.n	8005a4c <HAL_ADC_Init+0x130>
 8005a2e:	4861      	ldr	r0, [pc, #388]	; (8005bb4 <HAL_ADC_Init+0x298>)
 8005a30:	f7ff ff26 	bl	8005880 <LL_ADC_IsEnabled>
 8005a34:	4604      	mov	r4, r0
 8005a36:	4860      	ldr	r0, [pc, #384]	; (8005bb8 <HAL_ADC_Init+0x29c>)
 8005a38:	f7ff ff22 	bl	8005880 <LL_ADC_IsEnabled>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4323      	orrs	r3, r4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e008      	b.n	8005a5e <HAL_ADC_Init+0x142>
 8005a4c:	485b      	ldr	r0, [pc, #364]	; (8005bbc <HAL_ADC_Init+0x2a0>)
 8005a4e:	f7ff ff17 	bl	8005880 <LL_ADC_IsEnabled>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d012      	beq.n	8005a88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	; (8005bb4 <HAL_ADC_Init+0x298>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_ADC_Init+0x15a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a51      	ldr	r2, [pc, #324]	; (8005bb8 <HAL_ADC_Init+0x29c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <HAL_ADC_Init+0x15e>
 8005a76:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_ADC_Init+0x2a4>)
 8005a78:	e000      	b.n	8005a7c <HAL_ADC_Init+0x160>
 8005a7a:	4a52      	ldr	r2, [pc, #328]	; (8005bc4 <HAL_ADC_Init+0x2a8>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f7ff fd42 	bl	800550c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005a88:	f7ff fd20 	bl	80054cc <HAL_GetREVID>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d914      	bls.n	8005ac0 <HAL_ADC_Init+0x1a4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d110      	bne.n	8005ac0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	7d5b      	ldrb	r3, [r3, #21]
 8005aa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005aa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005aae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	7f1b      	ldrb	r3, [r3, #28]
 8005ab4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005ab6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ab8:	f043 030c 	orr.w	r3, r3, #12
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e00d      	b.n	8005adc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7d5b      	ldrb	r3, [r3, #21]
 8005ac4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005aca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005ad0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7f1b      	ldrb	r3, [r3, #28]
 8005ad6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7f1b      	ldrb	r3, [r3, #28]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	045b      	lsls	r3, r3, #17
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_ADC_Init+0x2ac>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	69b9      	ldr	r1, [r7, #24]
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fed2 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 8005b2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fedf 	bl	80058f6 <LL_ADC_INJ_IsConversionOngoing>
 8005b38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d15f      	bne.n	8005c00 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d15c      	bne.n	8005c00 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7d1b      	ldrb	r3, [r3, #20]
 8005b4a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <HAL_ADC_Init+0x2b0>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d130      	bne.n	8005bd4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_ADC_Init+0x2b4>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b86:	3a01      	subs	r2, #1
 8005b88:	0411      	lsls	r1, r2, #16
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	611a      	str	r2, [r3, #16]
 8005ba8:	e01c      	b.n	8005be4 <HAL_ADC_Init+0x2c8>
 8005baa:	bf00      	nop
 8005bac:	20000018 	.word	0x20000018
 8005bb0:	053e2d63 	.word	0x053e2d63
 8005bb4:	40022000 	.word	0x40022000
 8005bb8:	40022100 	.word	0x40022100
 8005bbc:	58026000 	.word	0x58026000
 8005bc0:	40022300 	.word	0x40022300
 8005bc4:	58026300 	.word	0x58026300
 8005bc8:	fff0c003 	.word	0xfff0c003
 8005bcc:	ffffbffc 	.word	0xffffbffc
 8005bd0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 ffba 	bl	8006b74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10c      	bne.n	8005c22 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	f023 010f 	bic.w	r1, r3, #15
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	1e5a      	subs	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c20:	e007      	b.n	8005c32 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 020f 	bic.w	r2, r2, #15
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	f043 0201 	orr.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
 8005c42:	e007      	b.n	8005c54 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3724      	adds	r7, #36	; 0x24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	bf00      	nop

08005c60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a55      	ldr	r2, [pc, #340]	; (8005dc8 <HAL_ADC_Start_DMA+0x168>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_ADC_Start_DMA+0x20>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a54      	ldr	r2, [pc, #336]	; (8005dcc <HAL_ADC_Start_DMA+0x16c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_ADC_Start_DMA+0x24>
 8005c80:	4b53      	ldr	r3, [pc, #332]	; (8005dd0 <HAL_ADC_Start_DMA+0x170>)
 8005c82:	e000      	b.n	8005c86 <HAL_ADC_Start_DMA+0x26>
 8005c84:	4b53      	ldr	r3, [pc, #332]	; (8005dd4 <HAL_ADC_Start_DMA+0x174>)
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff fd7c 	bl	8005784 <LL_ADC_GetMultimode>
 8005c8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fe1c 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 808c 	bne.w	8005db8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_Start_DMA+0x4e>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e087      	b.n	8005dbe <HAL_ADC_Start_DMA+0x15e>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d002      	beq.n	8005cc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b09      	cmp	r3, #9
 8005cc6:	d170      	bne.n	8005daa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fe35 	bl	8006938 <ADC_Enable>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d163      	bne.n	8005da0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cdc:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_ADC_Start_DMA+0x178>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a37      	ldr	r2, [pc, #220]	; (8005dcc <HAL_ADC_Start_DMA+0x16c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d002      	beq.n	8005cf8 <HAL_ADC_Start_DMA+0x98>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	e000      	b.n	8005cfa <HAL_ADC_Start_DMA+0x9a>
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_ADC_Start_DMA+0x168>)
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d002      	beq.n	8005d08 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f023 0206 	bic.w	r2, r3, #6
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d2c:	e002      	b.n	8005d34 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_ADC_Start_DMA+0x17c>)
 8005d3a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d40:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <HAL_ADC_Start_DMA+0x180>)
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <HAL_ADC_Start_DMA+0x184>)
 8005d4a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	221c      	movs	r2, #28
 8005d52:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0210 	orr.w	r2, r2, #16
 8005d6a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7ff fc8f 	bl	800569a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3340      	adds	r3, #64	; 0x40
 8005d86:	4619      	mov	r1, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f001 fe1c 	bl	80079c8 <HAL_DMA_Start_IT>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fd85 	bl	80058a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005d9e:	e00d      	b.n	8005dbc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005da8:	e008      	b.n	8005dbc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005db6:	e001      	b.n	8005dbc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
 8005dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40022000 	.word	0x40022000
 8005dcc:	40022100 	.word	0x40022100
 8005dd0:	40022300 	.word	0x40022300
 8005dd4:	58026300 	.word	0x58026300
 8005dd8:	fffff0fe 	.word	0xfffff0fe
 8005ddc:	08006a4d 	.word	0x08006a4d
 8005de0:	08006b25 	.word	0x08006b25
 8005de4:	08006b41 	.word	0x08006b41

08005de8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a87      	ldr	r2, [pc, #540]	; (8006028 <HAL_ADC_IRQHandler+0x240>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_ADC_IRQHandler+0x30>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a86      	ldr	r2, [pc, #536]	; (800602c <HAL_ADC_IRQHandler+0x244>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_ADC_IRQHandler+0x34>
 8005e18:	4b85      	ldr	r3, [pc, #532]	; (8006030 <HAL_ADC_IRQHandler+0x248>)
 8005e1a:	e000      	b.n	8005e1e <HAL_ADC_IRQHandler+0x36>
 8005e1c:	4b85      	ldr	r3, [pc, #532]	; (8006034 <HAL_ADC_IRQHandler+0x24c>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fcb0 	bl	8005784 <LL_ADC_GetMultimode>
 8005e24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <HAL_ADC_IRQHandler+0x78>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d012      	beq.n	8005e60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 ffe8 	bl	8006e28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <HAL_ADC_IRQHandler+0x8c>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8083 	beq.w	8005f86 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d07d      	beq.n	8005f86 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d105      	bne.n	8005ea2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fbb8 	bl	800561c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d062      	beq.n	8005f78 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a5d      	ldr	r2, [pc, #372]	; (800602c <HAL_ADC_IRQHandler+0x244>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d002      	beq.n	8005ec2 <HAL_ADC_IRQHandler+0xda>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	e000      	b.n	8005ec4 <HAL_ADC_IRQHandler+0xdc>
 8005ec2:	4b59      	ldr	r3, [pc, #356]	; (8006028 <HAL_ADC_IRQHandler+0x240>)
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d008      	beq.n	8005ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d002      	beq.n	8005ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	d104      	bne.n	8005ee8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	e00c      	b.n	8005f02 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a4f      	ldr	r2, [pc, #316]	; (800602c <HAL_ADC_IRQHandler+0x244>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d002      	beq.n	8005ef8 <HAL_ADC_IRQHandler+0x110>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	e000      	b.n	8005efa <HAL_ADC_IRQHandler+0x112>
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_ADC_IRQHandler+0x240>)
 8005efa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d135      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d12e      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fcd6 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d11a      	bne.n	8005f60 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 020c 	bic.w	r2, r2, #12
 8005f38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d112      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54
 8005f5e:	e00b      	b.n	8005f78 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	f043 0210 	orr.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fd fa13 	bl	80033a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	220c      	movs	r2, #12
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_ADC_IRQHandler+0x1b2>
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80a0 	beq.w	80060e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 809a 	beq.w	80060e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fb76 	bl	80056c0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005fd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fb1e 	bl	800561c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fe0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <HAL_ADC_IRQHandler+0x244>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d002      	beq.n	8005ff2 <HAL_ADC_IRQHandler+0x20a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	e000      	b.n	8005ff4 <HAL_ADC_IRQHandler+0x20c>
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <HAL_ADC_IRQHandler+0x240>)
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d008      	beq.n	800600e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d002      	beq.n	800600e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b07      	cmp	r3, #7
 800600c:	d104      	bne.n	8006018 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	e014      	b.n	8006042 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <HAL_ADC_IRQHandler+0x244>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00a      	beq.n	8006038 <HAL_ADC_IRQHandler+0x250>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	e008      	b.n	800603a <HAL_ADC_IRQHandler+0x252>
 8006028:	40022000 	.word	0x40022000
 800602c:	40022100 	.word	0x40022100
 8006030:	40022300 	.word	0x40022300
 8006034:	58026300 	.word	0x58026300
 8006038:	4b84      	ldr	r3, [pc, #528]	; (800624c <HAL_ADC_IRQHandler+0x464>)
 800603a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d047      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_ADC_IRQHandler+0x27a>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d03f      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800605e:	2b00      	cmp	r3, #0
 8006060:	d13a      	bne.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d133      	bne.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d12e      	bne.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fc39 	bl	80058f6 <LL_ADC_INJ_IsConversionOngoing>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11a      	bne.n	80060c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006098:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d112      	bne.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
 80060be:	e00b      	b.n	80060d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c4:	f043 0210 	orr.w	r2, r3, #16
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	f043 0201 	orr.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fe7d 	bl	8006dd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2260      	movs	r2, #96	; 0x60
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d011      	beq.n	8006114 <HAL_ADC_IRQHandler+0x32c>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00c      	beq.n	8006114 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f8b2 	bl	8006270 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2280      	movs	r2, #128	; 0x80
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d012      	beq.n	8006144 <HAL_ADC_IRQHandler+0x35c>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00d      	beq.n	8006144 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fe63 	bl	8006e00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006142:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_ADC_IRQHandler+0x38c>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fe55 	bl	8006e14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b00      	cmp	r3, #0
 800617c:	d043      	beq.n	8006206 <HAL_ADC_IRQHandler+0x41e>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d03e      	beq.n	8006206 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8006190:	2301      	movs	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
 8006194:	e021      	b.n	80061da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d015      	beq.n	80061c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_ADC_IRQHandler+0x464>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_ADC_IRQHandler+0x3c8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a29      	ldr	r2, [pc, #164]	; (8006250 <HAL_ADC_IRQHandler+0x468>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <HAL_ADC_IRQHandler+0x3cc>
 80061b0:	4b28      	ldr	r3, [pc, #160]	; (8006254 <HAL_ADC_IRQHandler+0x46c>)
 80061b2:	e000      	b.n	80061b6 <HAL_ADC_IRQHandler+0x3ce>
 80061b4:	4b28      	ldr	r3, [pc, #160]	; (8006258 <HAL_ADC_IRQHandler+0x470>)
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff faf2 	bl	80057a0 <LL_ADC_GetMultiDMATransfer>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80061c2:	2301      	movs	r3, #1
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	e008      	b.n	80061da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80061d6:	2301      	movs	r3, #1
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10e      	bne.n	80061fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	f043 0202 	orr.w	r2, r3, #2
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f843 	bl	8006284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2210      	movs	r2, #16
 8006204:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620c:	2b00      	cmp	r3, #0
 800620e:	d018      	beq.n	8006242 <HAL_ADC_IRQHandler+0x45a>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	2b00      	cmp	r3, #0
 8006218:	d013      	beq.n	8006242 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f043 0208 	orr.w	r2, r3, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800623a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fdd5 	bl	8006dec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006242:	bf00      	nop
 8006244:	3728      	adds	r7, #40	; 0x28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40022000 	.word	0x40022000
 8006250:	40022100 	.word	0x40022100
 8006254:	40022300 	.word	0x40022300
 8006258:	58026300 	.word	0x58026300

0800625c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b0a1      	sub	sp, #132	; 0x84
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4a9d      	ldr	r2, [pc, #628]	; (8006528 <HAL_ADC_ConfigChannel+0x290>)
 80062b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x2a>
 80062be:	2302      	movs	r3, #2
 80062c0:	e321      	b.n	8006906 <HAL_ADC_ConfigChannel+0x66e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fafe 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 8306 	bne.w	80068e8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x62>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	0e9b      	lsrs	r3, r3, #26
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2201      	movs	r2, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	e016      	b.n	8006328 <HAL_ADC_ConfigChannel+0x90>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800630c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8006312:	2320      	movs	r3, #32
 8006314:	e003      	b.n	800631e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8006316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006318:	fab3 f383 	clz	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2201      	movs	r2, #1
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	69d1      	ldr	r1, [r2, #28]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	430b      	orrs	r3, r1
 8006334:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f7ff f97d 	bl	8005642 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fabf 	bl	80058d0 <LL_ADC_REG_IsConversionOngoing>
 8006352:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff facc 	bl	80058f6 <LL_ADC_INJ_IsConversionOngoing>
 800635e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 80b3 	bne.w	80064ce <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 80af 	bne.w	80064ce <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6819      	ldr	r1, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	461a      	mov	r2, r3
 800637e:	f7ff f9b2 	bl	80056e6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006382:	4b6a      	ldr	r3, [pc, #424]	; (800652c <HAL_ADC_ConfigChannel+0x294>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800638a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638e:	d10b      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x110>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	e01d      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x14c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x136>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	e00a      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x14c>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d027      	beq.n	800643e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6919      	ldr	r1, [r3, #16]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063fc:	f7ff f8ba 	bl	8005574 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6919      	ldr	r1, [r3, #16]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	7e5b      	ldrb	r3, [r3, #25]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d102      	bne.n	8006416 <HAL_ADC_ConfigChannel+0x17e>
 8006410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006414:	e000      	b.n	8006418 <HAL_ADC_ConfigChannel+0x180>
 8006416:	2300      	movs	r3, #0
 8006418:	461a      	mov	r2, r3
 800641a:	f7ff f8e4 	bl	80055e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6919      	ldr	r1, [r3, #16]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	7e1b      	ldrb	r3, [r3, #24]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d102      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x19c>
 800642e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006432:	e000      	b.n	8006436 <HAL_ADC_ConfigChannel+0x19e>
 8006434:	2300      	movs	r3, #0
 8006436:	461a      	mov	r2, r3
 8006438:	f7ff f8bc 	bl	80055b4 <LL_ADC_SetDataRightShift>
 800643c:	e047      	b.n	80064ce <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	069b      	lsls	r3, r3, #26
 800644e:	429a      	cmp	r2, r3
 8006450:	d107      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	069b      	lsls	r3, r3, #26
 8006472:	429a      	cmp	r2, r3
 8006474:	d107      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006484:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	069b      	lsls	r3, r3, #26
 8006496:	429a      	cmp	r2, r3
 8006498:	d107      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064a8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	069b      	lsls	r3, r3, #26
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d107      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f9d4 	bl	8005880 <LL_ADC_IsEnabled>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 820d 	bne.w	80068fa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	461a      	mov	r2, r3
 80064ee:	f7ff f925 	bl	800573c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4a0c      	ldr	r2, [pc, #48]	; (8006528 <HAL_ADC_ConfigChannel+0x290>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	f040 8133 	bne.w	8006764 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800650a:	2b00      	cmp	r3, #0
 800650c:	d110      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x298>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0e9b      	lsrs	r3, r3, #26
 8006514:	3301      	adds	r3, #1
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2b09      	cmp	r3, #9
 800651c:	bf94      	ite	ls
 800651e:	2301      	movls	r3, #1
 8006520:	2300      	movhi	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e01e      	b.n	8006564 <HAL_ADC_ConfigChannel+0x2cc>
 8006526:	bf00      	nop
 8006528:	47ff0000 	.word	0x47ff0000
 800652c:	5c001000 	.word	0x5c001000
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006538:	fa93 f3a3 	rbit	r3, r3
 800653c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006548:	2320      	movs	r3, #32
 800654a:	e003      	b.n	8006554 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800654c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	3301      	adds	r3, #1
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2b09      	cmp	r3, #9
 800655c:	bf94      	ite	ls
 800655e:	2301      	movls	r3, #1
 8006560:	2300      	movhi	r3, #0
 8006562:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006564:	2b00      	cmp	r3, #0
 8006566:	d079      	beq.n	800665c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <HAL_ADC_ConfigChannel+0x2ec>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	0e9b      	lsrs	r3, r3, #26
 800657a:	3301      	adds	r3, #1
 800657c:	069b      	lsls	r3, r3, #26
 800657e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006582:	e015      	b.n	80065b0 <HAL_ADC_ConfigChannel+0x318>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658c:	fa93 f3a3 	rbit	r3, r3
 8006590:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006594:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800659c:	2320      	movs	r3, #32
 800659e:	e003      	b.n	80065a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80065a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a2:	fab3 f383 	clz	r3, r3
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	3301      	adds	r3, #1
 80065aa:	069b      	lsls	r3, r3, #26
 80065ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x338>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	0e9b      	lsrs	r3, r3, #26
 80065c2:	3301      	adds	r3, #1
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	e017      	b.n	8006600 <HAL_ADC_ConfigChannel+0x368>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	fa93 f3a3 	rbit	r3, r3
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80065e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80065e8:	2320      	movs	r3, #32
 80065ea:	e003      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80065ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ee:	fab3 f383 	clz	r3, r3
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	3301      	adds	r3, #1
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2101      	movs	r1, #1
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	ea42 0103 	orr.w	r1, r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <HAL_ADC_ConfigChannel+0x38e>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	0e9b      	lsrs	r3, r3, #26
 8006616:	3301      	adds	r3, #1
 8006618:	f003 021f 	and.w	r2, r3, #31
 800661c:	4613      	mov	r3, r2
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	4413      	add	r3, r2
 8006622:	051b      	lsls	r3, r3, #20
 8006624:	e018      	b.n	8006658 <HAL_ADC_ConfigChannel+0x3c0>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	fa93 f3a3 	rbit	r3, r3
 8006632:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800663e:	2320      	movs	r3, #32
 8006640:	e003      	b.n	800664a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	fab3 f383 	clz	r3, r3
 8006648:	b2db      	uxtb	r3, r3
 800664a:	3301      	adds	r3, #1
 800664c:	f003 021f 	and.w	r2, r3, #31
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006658:	430b      	orrs	r3, r1
 800665a:	e07e      	b.n	800675a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_ADC_ConfigChannel+0x3e0>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0e9b      	lsrs	r3, r3, #26
 800666e:	3301      	adds	r3, #1
 8006670:	069b      	lsls	r3, r3, #26
 8006672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006676:	e015      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x40c>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	fa93 f3a3 	rbit	r3, r3
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006690:	2320      	movs	r3, #32
 8006692:	e003      	b.n	800669c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	fab3 f383 	clz	r3, r3
 800669a:	b2db      	uxtb	r3, r3
 800669c:	3301      	adds	r3, #1
 800669e:	069b      	lsls	r3, r3, #26
 80066a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x42c>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	0e9b      	lsrs	r3, r3, #26
 80066b6:	3301      	adds	r3, #1
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2101      	movs	r1, #1
 80066be:	fa01 f303 	lsl.w	r3, r1, r3
 80066c2:	e017      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x45c>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	fa93 f3a3 	rbit	r3, r3
 80066d0:	61bb      	str	r3, [r7, #24]
  return result;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80066dc:	2320      	movs	r3, #32
 80066de:	e003      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	3301      	adds	r3, #1
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2101      	movs	r1, #1
 80066f0:	fa01 f303 	lsl.w	r3, r1, r3
 80066f4:	ea42 0103 	orr.w	r1, r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10d      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x488>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	0e9b      	lsrs	r3, r3, #26
 800670a:	3301      	adds	r3, #1
 800670c:	f003 021f 	and.w	r2, r3, #31
 8006710:	4613      	mov	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4413      	add	r3, r2
 8006716:	3b1e      	subs	r3, #30
 8006718:	051b      	lsls	r3, r3, #20
 800671a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800671e:	e01b      	b.n	8006758 <HAL_ADC_ConfigChannel+0x4c0>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	fa93 f3a3 	rbit	r3, r3
 800672c:	60fb      	str	r3, [r7, #12]
  return result;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006738:	2320      	movs	r3, #32
 800673a:	e003      	b.n	8006744 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	fab3 f383 	clz	r3, r3
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3301      	adds	r3, #1
 8006746:	f003 021f 	and.w	r2, r3, #31
 800674a:	4613      	mov	r3, r2
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4413      	add	r3, r2
 8006750:	3b1e      	subs	r3, #30
 8006752:	051b      	lsls	r3, r3, #20
 8006754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006758:	430b      	orrs	r3, r1
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	6892      	ldr	r2, [r2, #8]
 800675e:	4619      	mov	r1, r3
 8006760:	f7fe ffc1 	bl	80056e6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f280 80c6 	bge.w	80068fa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a67      	ldr	r2, [pc, #412]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_ADC_ConfigChannel+0x4ea>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a65      	ldr	r2, [pc, #404]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_ADC_ConfigChannel+0x4ee>
 8006782:	4b65      	ldr	r3, [pc, #404]	; (8006918 <HAL_ADC_ConfigChannel+0x680>)
 8006784:	e000      	b.n	8006788 <HAL_ADC_ConfigChannel+0x4f0>
 8006786:	4b65      	ldr	r3, [pc, #404]	; (800691c <HAL_ADC_ConfigChannel+0x684>)
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fee5 	bl	8005558 <LL_ADC_GetCommonPathInternalCh>
 800678e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a5e      	ldr	r2, [pc, #376]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_ADC_ConfigChannel+0x50c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a5d      	ldr	r2, [pc, #372]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10e      	bne.n	80067c2 <HAL_ADC_ConfigChannel+0x52a>
 80067a4:	485a      	ldr	r0, [pc, #360]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 80067a6:	f7ff f86b 	bl	8005880 <LL_ADC_IsEnabled>
 80067aa:	4604      	mov	r4, r0
 80067ac:	4859      	ldr	r0, [pc, #356]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 80067ae:	f7ff f867 	bl	8005880 <LL_ADC_IsEnabled>
 80067b2:	4603      	mov	r3, r0
 80067b4:	4323      	orrs	r3, r4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e008      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x53c>
 80067c2:	4857      	ldr	r0, [pc, #348]	; (8006920 <HAL_ADC_ConfigChannel+0x688>)
 80067c4:	f7ff f85c 	bl	8005880 <LL_ADC_IsEnabled>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bf0c      	ite	eq
 80067ce:	2301      	moveq	r3, #1
 80067d0:	2300      	movne	r3, #0
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d07d      	beq.n	80068d4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a51      	ldr	r2, [pc, #324]	; (8006924 <HAL_ADC_ConfigChannel+0x68c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d130      	bne.n	8006844 <HAL_ADC_ConfigChannel+0x5ac>
 80067e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d12b      	bne.n	8006844 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a4b      	ldr	r2, [pc, #300]	; (8006920 <HAL_ADC_ConfigChannel+0x688>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	f040 8081 	bne.w	80068fa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a44      	ldr	r2, [pc, #272]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_ADC_ConfigChannel+0x574>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a43      	ldr	r2, [pc, #268]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d101      	bne.n	8006810 <HAL_ADC_ConfigChannel+0x578>
 800680c:	4a42      	ldr	r2, [pc, #264]	; (8006918 <HAL_ADC_ConfigChannel+0x680>)
 800680e:	e000      	b.n	8006812 <HAL_ADC_ConfigChannel+0x57a>
 8006810:	4a42      	ldr	r2, [pc, #264]	; (800691c <HAL_ADC_ConfigChannel+0x684>)
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f7fe fe89 	bl	8005532 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006820:	4b41      	ldr	r3, [pc, #260]	; (8006928 <HAL_ADC_ConfigChannel+0x690>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	4a41      	ldr	r2, [pc, #260]	; (800692c <HAL_ADC_ConfigChannel+0x694>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	099b      	lsrs	r3, r3, #6
 800682e:	3301      	adds	r3, #1
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006834:	e002      	b.n	800683c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3b01      	subs	r3, #1
 800683a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f9      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006842:	e05a      	b.n	80068fa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a39      	ldr	r2, [pc, #228]	; (8006930 <HAL_ADC_ConfigChannel+0x698>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d11e      	bne.n	800688c <HAL_ADC_ConfigChannel+0x5f4>
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d119      	bne.n	800688c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a30      	ldr	r2, [pc, #192]	; (8006920 <HAL_ADC_ConfigChannel+0x688>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d14b      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_ADC_ConfigChannel+0x5de>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d101      	bne.n	800687a <HAL_ADC_ConfigChannel+0x5e2>
 8006876:	4a28      	ldr	r2, [pc, #160]	; (8006918 <HAL_ADC_ConfigChannel+0x680>)
 8006878:	e000      	b.n	800687c <HAL_ADC_ConfigChannel+0x5e4>
 800687a:	4a28      	ldr	r2, [pc, #160]	; (800691c <HAL_ADC_ConfigChannel+0x684>)
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fe fe54 	bl	8005532 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800688a:	e036      	b.n	80068fa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a28      	ldr	r2, [pc, #160]	; (8006934 <HAL_ADC_ConfigChannel+0x69c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d131      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x662>
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d12c      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_ADC_ConfigChannel+0x688>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d127      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a18      	ldr	r2, [pc, #96]	; (8006910 <HAL_ADC_ConfigChannel+0x678>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d004      	beq.n	80068be <HAL_ADC_ConfigChannel+0x626>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <HAL_ADC_ConfigChannel+0x67c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d101      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x62a>
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <HAL_ADC_ConfigChannel+0x680>)
 80068c0:	e000      	b.n	80068c4 <HAL_ADC_ConfigChannel+0x62c>
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <HAL_ADC_ConfigChannel+0x684>)
 80068c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fe fe30 	bl	8005532 <LL_ADC_SetCommonPathInternalCh>
 80068d2:	e012      	b.n	80068fa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80068e6:	e008      	b.n	80068fa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006902:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006906:	4618      	mov	r0, r3
 8006908:	3784      	adds	r7, #132	; 0x84
 800690a:	46bd      	mov	sp, r7
 800690c:	bd90      	pop	{r4, r7, pc}
 800690e:	bf00      	nop
 8006910:	40022000 	.word	0x40022000
 8006914:	40022100 	.word	0x40022100
 8006918:	40022300 	.word	0x40022300
 800691c:	58026300 	.word	0x58026300
 8006920:	58026000 	.word	0x58026000
 8006924:	cb840000 	.word	0xcb840000
 8006928:	20000018 	.word	0x20000018
 800692c:	053e2d63 	.word	0x053e2d63
 8006930:	c7520000 	.word	0xc7520000
 8006934:	cfb80000 	.word	0xcfb80000

08006938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe ff9b 	bl	8005880 <LL_ADC_IsEnabled>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d16e      	bne.n	8006a2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	4b38      	ldr	r3, [pc, #224]	; (8006a38 <ADC_Enable+0x100>)
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	f043 0210 	orr.w	r2, r3, #16
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e05a      	b.n	8006a30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe ff6a 	bl	8005858 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006984:	f7fe fd72 	bl	800546c <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <ADC_Enable+0x104>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <ADC_Enable+0x66>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a29      	ldr	r2, [pc, #164]	; (8006a40 <ADC_Enable+0x108>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <ADC_Enable+0x6a>
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <ADC_Enable+0x10c>)
 80069a0:	e000      	b.n	80069a4 <ADC_Enable+0x6c>
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <ADC_Enable+0x110>)
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe feed 	bl	8005784 <LL_ADC_GetMultimode>
 80069aa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <ADC_Enable+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d002      	beq.n	80069bc <ADC_Enable+0x84>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	e000      	b.n	80069be <ADC_Enable+0x86>
 80069bc:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <ADC_Enable+0x104>)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d02c      	beq.n	8006a20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d130      	bne.n	8006a2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069cc:	e028      	b.n	8006a20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe ff54 	bl	8005880 <LL_ADC_IsEnabled>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe ff38 	bl	8005858 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069e8:	f7fe fd40 	bl	800546c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d914      	bls.n	8006a20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d00d      	beq.n	8006a20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f043 0210 	orr.w	r2, r3, #16
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	f043 0201 	orr.w	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e007      	b.n	8006a30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d1cf      	bne.n	80069ce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	8000003f 	.word	0x8000003f
 8006a3c:	40022000 	.word	0x40022000
 8006a40:	40022100 	.word	0x40022100
 8006a44:	40022300 	.word	0x40022300
 8006a48:	58026300 	.word	0x58026300

08006a4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d14b      	bne.n	8006afe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d021      	beq.n	8006ac4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fdc9 	bl	800561c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d032      	beq.n	8006af6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12b      	bne.n	8006af6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11f      	bne.n	8006af6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
 8006ac2:	e018      	b.n	8006af6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d111      	bne.n	8006af6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d105      	bne.n	8006af6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f043 0201 	orr.w	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7fc fc54 	bl	80033a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006afc:	e00e      	b.n	8006b1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fbba 	bl	8006284 <HAL_ADC_ErrorCallback>
}
 8006b10:	e004      	b.n	8006b1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff fb92 	bl	800625c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f043 0204 	orr.w	r2, r3, #4
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fb8c 	bl	8006284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7a      	ldr	r2, [pc, #488]	; (8006d6c <ADC_ConfigureBoostMode+0x1f8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <ADC_ConfigureBoostMode+0x1c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a79      	ldr	r2, [pc, #484]	; (8006d70 <ADC_ConfigureBoostMode+0x1fc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d109      	bne.n	8006ba4 <ADC_ConfigureBoostMode+0x30>
 8006b90:	4b78      	ldr	r3, [pc, #480]	; (8006d74 <ADC_ConfigureBoostMode+0x200>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e008      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x42>
 8006ba4:	4b74      	ldr	r3, [pc, #464]	; (8006d78 <ADC_ConfigureBoostMode+0x204>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01c      	beq.n	8006bf4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006bba:	f005 ff83 	bl	800cac4 <HAL_RCC_GetHCLKFreq>
 8006bbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bc8:	d010      	beq.n	8006bec <ADC_ConfigureBoostMode+0x78>
 8006bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bce:	d873      	bhi.n	8006cb8 <ADC_ConfigureBoostMode+0x144>
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d002      	beq.n	8006bdc <ADC_ConfigureBoostMode+0x68>
 8006bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bda:	d16d      	bne.n	8006cb8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	60fb      	str	r3, [r7, #12]
        break;
 8006bea:	e068      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	60fb      	str	r3, [r7, #12]
        break;
 8006bf2:	e064      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006bf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	f007 f9c8 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c0a:	d051      	beq.n	8006cb0 <ADC_ConfigureBoostMode+0x13c>
 8006c0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c10:	d854      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006c16:	d047      	beq.n	8006ca8 <ADC_ConfigureBoostMode+0x134>
 8006c18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006c1c:	d84e      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006c22:	d03d      	beq.n	8006ca0 <ADC_ConfigureBoostMode+0x12c>
 8006c24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006c28:	d848      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2e:	d033      	beq.n	8006c98 <ADC_ConfigureBoostMode+0x124>
 8006c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c34:	d842      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006c3a:	d029      	beq.n	8006c90 <ADC_ConfigureBoostMode+0x11c>
 8006c3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006c40:	d83c      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c46:	d01a      	beq.n	8006c7e <ADC_ConfigureBoostMode+0x10a>
 8006c48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c4c:	d836      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006c52:	d014      	beq.n	8006c7e <ADC_ConfigureBoostMode+0x10a>
 8006c54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006c58:	d830      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	d00e      	beq.n	8006c7e <ADC_ConfigureBoostMode+0x10a>
 8006c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c64:	d82a      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c6a:	d008      	beq.n	8006c7e <ADC_ConfigureBoostMode+0x10a>
 8006c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c70:	d824      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0x148>
 8006c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c76:	d002      	beq.n	8006c7e <ADC_ConfigureBoostMode+0x10a>
 8006c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c7c:	d11e      	bne.n	8006cbc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	0c9b      	lsrs	r3, r3, #18
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
        break;
 8006c8e:	e016      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	091b      	lsrs	r3, r3, #4
 8006c94:	60fb      	str	r3, [r7, #12]
        break;
 8006c96:	e012      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	60fb      	str	r3, [r7, #12]
        break;
 8006c9e:	e00e      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	099b      	lsrs	r3, r3, #6
 8006ca4:	60fb      	str	r3, [r7, #12]
        break;
 8006ca6:	e00a      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	09db      	lsrs	r3, r3, #7
 8006cac:	60fb      	str	r3, [r7, #12]
        break;
 8006cae:	e006      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	60fb      	str	r3, [r7, #12]
        break;
 8006cb6:	e002      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
        break;
 8006cb8:	bf00      	nop
 8006cba:	e000      	b.n	8006cbe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006cbc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006cbe:	f7fe fc05 	bl	80054cc <HAL_GetREVID>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d815      	bhi.n	8006cf8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <ADC_ConfigureBoostMode+0x208>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d908      	bls.n	8006ce6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006ce4:	e03e      	b.n	8006d64 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cf4:	609a      	str	r2, [r3, #8]
}
 8006cf6:	e035      	b.n	8006d64 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <ADC_ConfigureBoostMode+0x20c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d808      	bhi.n	8006d18 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d14:	609a      	str	r2, [r3, #8]
}
 8006d16:	e025      	b.n	8006d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4a1a      	ldr	r2, [pc, #104]	; (8006d84 <ADC_ConfigureBoostMode+0x210>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d80a      	bhi.n	8006d36 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d32:	609a      	str	r2, [r3, #8]
}
 8006d34:	e016      	b.n	8006d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <ADC_ConfigureBoostMode+0x214>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d80a      	bhi.n	8006d54 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	e007      	b.n	8006d64 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40022000 	.word	0x40022000
 8006d70:	40022100 	.word	0x40022100
 8006d74:	40022300 	.word	0x40022300
 8006d78:	58026300 	.word	0x58026300
 8006d7c:	01312d00 	.word	0x01312d00
 8006d80:	005f5e10 	.word	0x005f5e10
 8006d84:	00bebc20 	.word	0x00bebc20
 8006d88:	017d7840 	.word	0x017d7840

08006d8c <LL_ADC_IsEnabled>:
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <LL_ADC_IsEnabled+0x18>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <LL_ADC_IsEnabled+0x1a>
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <LL_ADC_REG_IsConversionOngoing>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d101      	bne.n	8006dca <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b09f      	sub	sp, #124	; 0x7c
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e0be      	b.n	8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e62:	2300      	movs	r3, #0
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a5c      	ldr	r2, [pc, #368]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d102      	bne.n	8006e7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e74:	4b5b      	ldr	r3, [pc, #364]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	e001      	b.n	8006e7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	f043 0220 	orr.w	r2, r3, #32
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e09d      	b.n	8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff ff87 	bl	8006db2 <LL_ADC_REG_IsConversionOngoing>
 8006ea4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff81 	bl	8006db2 <LL_ADC_REG_IsConversionOngoing>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d17f      	bne.n	8006fb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d17c      	bne.n	8006fb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a47      	ldr	r2, [pc, #284]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a46      	ldr	r2, [pc, #280]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d101      	bne.n	8006ed4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006ed0:	4b45      	ldr	r3, [pc, #276]	; (8006fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ed2:	e000      	b.n	8006ed6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006ed4:	4b45      	ldr	r3, [pc, #276]	; (8006fec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006ed6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d039      	beq.n	8006f54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a3a      	ldr	r2, [pc, #232]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a38      	ldr	r2, [pc, #224]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10e      	bne.n	8006f24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006f06:	4836      	ldr	r0, [pc, #216]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f08:	f7ff ff40 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4835      	ldr	r0, [pc, #212]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f10:	f7ff ff3c 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f14:	4603      	mov	r3, r0
 8006f16:	4323      	orrs	r3, r4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e008      	b.n	8006f36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006f24:	4832      	ldr	r0, [pc, #200]	; (8006ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f26:	f7ff ff31 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d047      	beq.n	8006fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	6811      	ldr	r1, [r2, #0]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	6892      	ldr	r2, [r2, #8]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f52:	e03a      	b.n	8006fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10e      	bne.n	8006f92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006f74:	481a      	ldr	r0, [pc, #104]	; (8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f76:	f7ff ff09 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4819      	ldr	r0, [pc, #100]	; (8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f7e:	f7ff ff05 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f82:	4603      	mov	r3, r0
 8006f84:	4323      	orrs	r3, r4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	e008      	b.n	8006fa4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006f92:	4817      	ldr	r0, [pc, #92]	; (8006ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f94:	f7ff fefa 	bl	8006d8c <LL_ADC_IsEnabled>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d010      	beq.n	8006fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fb2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fb4:	e009      	b.n	8006fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f043 0220 	orr.w	r2, r3, #32
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006fc8:	e000      	b.n	8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006fd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	377c      	adds	r7, #124	; 0x7c
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}
 8006fe0:	40022000 	.word	0x40022000
 8006fe4:	40022100 	.word	0x40022100
 8006fe8:	40022300 	.word	0x40022300
 8006fec:	58026300 	.word	0x58026300
 8006ff0:	58026000 	.word	0x58026000
 8006ff4:	fffff0e0 	.word	0xfffff0e0

08006ff8 <__NVIC_SetPriorityGrouping>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <__NVIC_SetPriorityGrouping+0x40>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007014:	4013      	ands	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <__NVIC_SetPriorityGrouping+0x44>)
 8007022:	4313      	orrs	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <__NVIC_SetPriorityGrouping+0x40>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	60d3      	str	r3, [r2, #12]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	e000ed00 	.word	0xe000ed00
 800703c:	05fa0000 	.word	0x05fa0000

08007040 <__NVIC_GetPriorityGrouping>:
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <__NVIC_GetPriorityGrouping+0x18>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0a1b      	lsrs	r3, r3, #8
 800704a:	f003 0307 	and.w	r3, r3, #7
}
 800704e:	4618      	mov	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000ed00 	.word	0xe000ed00

0800705c <__NVIC_EnableIRQ>:
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	db0b      	blt.n	8007086 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	f003 021f 	and.w	r2, r3, #31
 8007074:	4907      	ldr	r1, [pc, #28]	; (8007094 <__NVIC_EnableIRQ+0x38>)
 8007076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2001      	movs	r0, #1
 800707e:	fa00 f202 	lsl.w	r2, r0, r2
 8007082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000e100 	.word	0xe000e100

08007098 <__NVIC_SetPriority>:
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db0a      	blt.n	80070c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	490c      	ldr	r1, [pc, #48]	; (80070e4 <__NVIC_SetPriority+0x4c>)
 80070b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070b6:	0112      	lsls	r2, r2, #4
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	440b      	add	r3, r1
 80070bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070c0:	e00a      	b.n	80070d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4908      	ldr	r1, [pc, #32]	; (80070e8 <__NVIC_SetPriority+0x50>)
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	3b04      	subs	r3, #4
 80070d0:	0112      	lsls	r2, r2, #4
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	440b      	add	r3, r1
 80070d6:	761a      	strb	r2, [r3, #24]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000e100 	.word	0xe000e100
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <NVIC_EncodePriority>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	; 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f1c3 0307 	rsb	r3, r3, #7
 8007106:	2b04      	cmp	r3, #4
 8007108:	bf28      	it	cs
 800710a:	2304      	movcs	r3, #4
 800710c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3304      	adds	r3, #4
 8007112:	2b06      	cmp	r3, #6
 8007114:	d902      	bls.n	800711c <NVIC_EncodePriority+0x30>
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3b03      	subs	r3, #3
 800711a:	e000      	b.n	800711e <NVIC_EncodePriority+0x32>
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	43da      	mvns	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	401a      	ands	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	43d9      	mvns	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007144:	4313      	orrs	r3, r2
}
 8007146:	4618      	mov	r0, r3
 8007148:	3724      	adds	r7, #36	; 0x24
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007164:	d301      	bcc.n	800716a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007166:	2301      	movs	r3, #1
 8007168:	e00f      	b.n	800718a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <SysTick_Config+0x40>)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007172:	210f      	movs	r1, #15
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007178:	f7ff ff8e 	bl	8007098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <SysTick_Config+0x40>)
 800717e:	2200      	movs	r2, #0
 8007180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <SysTick_Config+0x40>)
 8007184:	2207      	movs	r2, #7
 8007186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000e010 	.word	0xe000e010

08007198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff29 	bl	8006ff8 <__NVIC_SetPriorityGrouping>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071bc:	f7ff ff40 	bl	8007040 <__NVIC_GetPriorityGrouping>
 80071c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	6978      	ldr	r0, [r7, #20]
 80071c8:	f7ff ff90 	bl	80070ec <NVIC_EncodePriority>
 80071cc:	4602      	mov	r2, r0
 80071ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071d2:	4611      	mov	r1, r2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff5f 	bl	8007098 <__NVIC_SetPriority>
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	4603      	mov	r3, r0
 80071ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ff33 	bl	800705c <__NVIC_EnableIRQ>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ffa4 	bl	8007154 <SysTick_Config>
 800720c:	4603      	mov	r3, r0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800721c:	f3bf 8f5f 	dmb	sy
}
 8007220:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <HAL_MPU_Disable+0x28>)
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	4a06      	ldr	r2, [pc, #24]	; (8007240 <HAL_MPU_Disable+0x28>)
 8007228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <HAL_MPU_Disable+0x2c>)
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000ed00 	.word	0xe000ed00
 8007244:	e000ed90 	.word	0xe000ed90

08007248 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007250:	4a0b      	ldr	r2, [pc, #44]	; (8007280 <HAL_MPU_Enable+0x38>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <HAL_MPU_Enable+0x3c>)
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	4a09      	ldr	r2, [pc, #36]	; (8007284 <HAL_MPU_Enable+0x3c>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007266:	f3bf 8f4f 	dsb	sy
}
 800726a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800726c:	f3bf 8f6f 	isb	sy
}
 8007270:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000ed90 	.word	0xe000ed90
 8007284:	e000ed00 	.word	0xe000ed00

08007288 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	785a      	ldrb	r2, [r3, #1]
 8007294:	4b1d      	ldr	r3, [pc, #116]	; (800730c <HAL_MPU_ConfigRegion+0x84>)
 8007296:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d029      	beq.n	80072f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80072a0:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_MPU_ConfigRegion+0x84>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7b1b      	ldrb	r3, [r3, #12]
 80072ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7adb      	ldrb	r3, [r3, #11]
 80072b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7a9b      	ldrb	r3, [r3, #10]
 80072ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80072bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7b5b      	ldrb	r3, [r3, #13]
 80072c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80072c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7b9b      	ldrb	r3, [r3, #14]
 80072ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80072cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7bdb      	ldrb	r3, [r3, #15]
 80072d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7a5b      	ldrb	r3, [r3, #9]
 80072da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7a1b      	ldrb	r3, [r3, #8]
 80072e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	7812      	ldrb	r2, [r2, #0]
 80072ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072ec:	4a07      	ldr	r2, [pc, #28]	; (800730c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80072f2:	e005      	b.n	8007300 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <HAL_MPU_ConfigRegion+0x84>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80072fa:	4b04      	ldr	r3, [pc, #16]	; (800730c <HAL_MPU_ConfigRegion+0x84>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	611a      	str	r2, [r3, #16]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000ed90 	.word	0xe000ed90

08007310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007318:	f7fe f8a8 	bl	800546c <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e316      	b.n	8007956 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a66      	ldr	r2, [pc, #408]	; (80074c8 <HAL_DMA_Init+0x1b8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d04a      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a65      	ldr	r2, [pc, #404]	; (80074cc <HAL_DMA_Init+0x1bc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d045      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a63      	ldr	r2, [pc, #396]	; (80074d0 <HAL_DMA_Init+0x1c0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d040      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a62      	ldr	r2, [pc, #392]	; (80074d4 <HAL_DMA_Init+0x1c4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d03b      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a60      	ldr	r2, [pc, #384]	; (80074d8 <HAL_DMA_Init+0x1c8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d036      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5f      	ldr	r2, [pc, #380]	; (80074dc <HAL_DMA_Init+0x1cc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d031      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5d      	ldr	r2, [pc, #372]	; (80074e0 <HAL_DMA_Init+0x1d0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02c      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a5c      	ldr	r2, [pc, #368]	; (80074e4 <HAL_DMA_Init+0x1d4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d027      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5a      	ldr	r2, [pc, #360]	; (80074e8 <HAL_DMA_Init+0x1d8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a59      	ldr	r2, [pc, #356]	; (80074ec <HAL_DMA_Init+0x1dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a57      	ldr	r2, [pc, #348]	; (80074f0 <HAL_DMA_Init+0x1e0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a56      	ldr	r2, [pc, #344]	; (80074f4 <HAL_DMA_Init+0x1e4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a54      	ldr	r2, [pc, #336]	; (80074f8 <HAL_DMA_Init+0x1e8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a53      	ldr	r2, [pc, #332]	; (80074fc <HAL_DMA_Init+0x1ec>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a51      	ldr	r2, [pc, #324]	; (8007500 <HAL_DMA_Init+0x1f0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_DMA_Init+0xb8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a50      	ldr	r2, [pc, #320]	; (8007504 <HAL_DMA_Init+0x1f4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <HAL_DMA_Init+0xbc>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <HAL_DMA_Init+0xbe>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 813b 	beq.w	800764a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a37      	ldr	r2, [pc, #220]	; (80074c8 <HAL_DMA_Init+0x1b8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d04a      	beq.n	8007484 <HAL_DMA_Init+0x174>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a36      	ldr	r2, [pc, #216]	; (80074cc <HAL_DMA_Init+0x1bc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d045      	beq.n	8007484 <HAL_DMA_Init+0x174>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a34      	ldr	r2, [pc, #208]	; (80074d0 <HAL_DMA_Init+0x1c0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d040      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a33      	ldr	r2, [pc, #204]	; (80074d4 <HAL_DMA_Init+0x1c4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d03b      	beq.n	8007484 <HAL_DMA_Init+0x174>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a31      	ldr	r2, [pc, #196]	; (80074d8 <HAL_DMA_Init+0x1c8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d036      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a30      	ldr	r2, [pc, #192]	; (80074dc <HAL_DMA_Init+0x1cc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d031      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2e      	ldr	r2, [pc, #184]	; (80074e0 <HAL_DMA_Init+0x1d0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02c      	beq.n	8007484 <HAL_DMA_Init+0x174>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2d      	ldr	r2, [pc, #180]	; (80074e4 <HAL_DMA_Init+0x1d4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d027      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2b      	ldr	r2, [pc, #172]	; (80074e8 <HAL_DMA_Init+0x1d8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d022      	beq.n	8007484 <HAL_DMA_Init+0x174>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <HAL_DMA_Init+0x1dc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d01d      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <HAL_DMA_Init+0x1e0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d018      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a27      	ldr	r2, [pc, #156]	; (80074f4 <HAL_DMA_Init+0x1e4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_DMA_Init+0x174>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a25      	ldr	r2, [pc, #148]	; (80074f8 <HAL_DMA_Init+0x1e8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00e      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a24      	ldr	r2, [pc, #144]	; (80074fc <HAL_DMA_Init+0x1ec>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_DMA_Init+0x174>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a22      	ldr	r2, [pc, #136]	; (8007500 <HAL_DMA_Init+0x1f0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d004      	beq.n	8007484 <HAL_DMA_Init+0x174>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a21      	ldr	r2, [pc, #132]	; (8007504 <HAL_DMA_Init+0x1f4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d108      	bne.n	8007496 <HAL_DMA_Init+0x186>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e007      	b.n	80074a6 <HAL_DMA_Init+0x196>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074a6:	e02f      	b.n	8007508 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074a8:	f7fd ffe0 	bl	800546c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d928      	bls.n	8007508 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e246      	b.n	8007956 <HAL_DMA_Init+0x646>
 80074c8:	40020010 	.word	0x40020010
 80074cc:	40020028 	.word	0x40020028
 80074d0:	40020040 	.word	0x40020040
 80074d4:	40020058 	.word	0x40020058
 80074d8:	40020070 	.word	0x40020070
 80074dc:	40020088 	.word	0x40020088
 80074e0:	400200a0 	.word	0x400200a0
 80074e4:	400200b8 	.word	0x400200b8
 80074e8:	40020410 	.word	0x40020410
 80074ec:	40020428 	.word	0x40020428
 80074f0:	40020440 	.word	0x40020440
 80074f4:	40020458 	.word	0x40020458
 80074f8:	40020470 	.word	0x40020470
 80074fc:	40020488 	.word	0x40020488
 8007500:	400204a0 	.word	0x400204a0
 8007504:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1c8      	bne.n	80074a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4b83      	ldr	r3, [pc, #524]	; (8007730 <HAL_DMA_Init+0x420>)
 8007522:	4013      	ands	r3, r2
 8007524:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800752e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800753a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007546:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b04      	cmp	r3, #4
 800755a:	d107      	bne.n	800756c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4313      	orrs	r3, r2
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800756c:	4b71      	ldr	r3, [pc, #452]	; (8007734 <HAL_DMA_Init+0x424>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4b71      	ldr	r3, [pc, #452]	; (8007738 <HAL_DMA_Init+0x428>)
 8007572:	4013      	ands	r3, r2
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007578:	d328      	bcc.n	80075cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b28      	cmp	r3, #40	; 0x28
 8007580:	d903      	bls.n	800758a <HAL_DMA_Init+0x27a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b2e      	cmp	r3, #46	; 0x2e
 8007588:	d917      	bls.n	80075ba <HAL_DMA_Init+0x2aa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b3e      	cmp	r3, #62	; 0x3e
 8007590:	d903      	bls.n	800759a <HAL_DMA_Init+0x28a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b42      	cmp	r3, #66	; 0x42
 8007598:	d90f      	bls.n	80075ba <HAL_DMA_Init+0x2aa>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b46      	cmp	r3, #70	; 0x46
 80075a0:	d903      	bls.n	80075aa <HAL_DMA_Init+0x29a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b48      	cmp	r3, #72	; 0x48
 80075a8:	d907      	bls.n	80075ba <HAL_DMA_Init+0x2aa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b4e      	cmp	r3, #78	; 0x4e
 80075b0:	d905      	bls.n	80075be <HAL_DMA_Init+0x2ae>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b52      	cmp	r3, #82	; 0x52
 80075b8:	d801      	bhi.n	80075be <HAL_DMA_Init+0x2ae>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_DMA_Init+0x2b0>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d117      	bne.n	8007626 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fddb 	bl	80091c4 <DMA_CheckFifoParam>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e197      	b.n	8007956 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fd16 	bl	8009060 <DMA_CalcBaseAndBitshift>
 8007634:	4603      	mov	r3, r0
 8007636:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	223f      	movs	r2, #63	; 0x3f
 8007642:	409a      	lsls	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	e0cd      	b.n	80077e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3b      	ldr	r2, [pc, #236]	; (800773c <HAL_DMA_Init+0x42c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_DMA_Init+0x38a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a39      	ldr	r2, [pc, #228]	; (8007740 <HAL_DMA_Init+0x430>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01d      	beq.n	800769a <HAL_DMA_Init+0x38a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a38      	ldr	r2, [pc, #224]	; (8007744 <HAL_DMA_Init+0x434>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_DMA_Init+0x38a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a36      	ldr	r2, [pc, #216]	; (8007748 <HAL_DMA_Init+0x438>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_DMA_Init+0x38a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a35      	ldr	r2, [pc, #212]	; (800774c <HAL_DMA_Init+0x43c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_DMA_Init+0x38a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a33      	ldr	r2, [pc, #204]	; (8007750 <HAL_DMA_Init+0x440>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_DMA_Init+0x38a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a32      	ldr	r2, [pc, #200]	; (8007754 <HAL_DMA_Init+0x444>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_DMA_Init+0x38a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a30      	ldr	r2, [pc, #192]	; (8007758 <HAL_DMA_Init+0x448>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d101      	bne.n	800769e <HAL_DMA_Init+0x38e>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <HAL_DMA_Init+0x390>
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8097 	beq.w	80077d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a24      	ldr	r2, [pc, #144]	; (800773c <HAL_DMA_Init+0x42c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d021      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a22      	ldr	r2, [pc, #136]	; (8007740 <HAL_DMA_Init+0x430>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01c      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a21      	ldr	r2, [pc, #132]	; (8007744 <HAL_DMA_Init+0x434>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d017      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <HAL_DMA_Init+0x438>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d012      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_DMA_Init+0x43c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00d      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <HAL_DMA_Init+0x440>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d008      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <HAL_DMA_Init+0x444>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <HAL_DMA_Init+0x3e4>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a19      	ldr	r2, [pc, #100]	; (8007758 <HAL_DMA_Init+0x448>)
 80076f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <HAL_DMA_Init+0x44c>)
 8007710:	4013      	ands	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d021      	beq.n	8007760 <HAL_DMA_Init+0x450>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b80      	cmp	r3, #128	; 0x80
 8007722:	d102      	bne.n	800772a <HAL_DMA_Init+0x41a>
 8007724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007728:	e01b      	b.n	8007762 <HAL_DMA_Init+0x452>
 800772a:	2300      	movs	r3, #0
 800772c:	e019      	b.n	8007762 <HAL_DMA_Init+0x452>
 800772e:	bf00      	nop
 8007730:	fe10803f 	.word	0xfe10803f
 8007734:	5c001000 	.word	0x5c001000
 8007738:	ffff0000 	.word	0xffff0000
 800773c:	58025408 	.word	0x58025408
 8007740:	5802541c 	.word	0x5802541c
 8007744:	58025430 	.word	0x58025430
 8007748:	58025444 	.word	0x58025444
 800774c:	58025458 	.word	0x58025458
 8007750:	5802546c 	.word	0x5802546c
 8007754:	58025480 	.word	0x58025480
 8007758:	58025494 	.word	0x58025494
 800775c:	fffe000f 	.word	0xfffe000f
 8007760:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68d2      	ldr	r2, [r2, #12]
 8007766:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007790:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	4b6e      	ldr	r3, [pc, #440]	; (8007960 <HAL_DMA_Init+0x650>)
 80077a8:	4413      	add	r3, r2
 80077aa:	4a6e      	ldr	r2, [pc, #440]	; (8007964 <HAL_DMA_Init+0x654>)
 80077ac:	fba2 2303 	umull	r2, r3, r2, r3
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	009a      	lsls	r2, r3, #2
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fc51 	bl	8009060 <DMA_CalcBaseAndBitshift>
 80077be:	4603      	mov	r3, r0
 80077c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2201      	movs	r2, #1
 80077cc:	409a      	lsls	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	e008      	b.n	80077e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2240      	movs	r2, #64	; 0x40
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2203      	movs	r2, #3
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0b7      	b.n	8007956 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a5f      	ldr	r2, [pc, #380]	; (8007968 <HAL_DMA_Init+0x658>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d072      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a5d      	ldr	r2, [pc, #372]	; (800796c <HAL_DMA_Init+0x65c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d06d      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a5c      	ldr	r2, [pc, #368]	; (8007970 <HAL_DMA_Init+0x660>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d068      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a5a      	ldr	r2, [pc, #360]	; (8007974 <HAL_DMA_Init+0x664>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d063      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a59      	ldr	r2, [pc, #356]	; (8007978 <HAL_DMA_Init+0x668>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d05e      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a57      	ldr	r2, [pc, #348]	; (800797c <HAL_DMA_Init+0x66c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d059      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a56      	ldr	r2, [pc, #344]	; (8007980 <HAL_DMA_Init+0x670>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d054      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a54      	ldr	r2, [pc, #336]	; (8007984 <HAL_DMA_Init+0x674>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d04f      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a53      	ldr	r2, [pc, #332]	; (8007988 <HAL_DMA_Init+0x678>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a51      	ldr	r2, [pc, #324]	; (800798c <HAL_DMA_Init+0x67c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a50      	ldr	r2, [pc, #320]	; (8007990 <HAL_DMA_Init+0x680>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a4e      	ldr	r2, [pc, #312]	; (8007994 <HAL_DMA_Init+0x684>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a4d      	ldr	r2, [pc, #308]	; (8007998 <HAL_DMA_Init+0x688>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a4b      	ldr	r2, [pc, #300]	; (800799c <HAL_DMA_Init+0x68c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a4a      	ldr	r2, [pc, #296]	; (80079a0 <HAL_DMA_Init+0x690>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a48      	ldr	r2, [pc, #288]	; (80079a4 <HAL_DMA_Init+0x694>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a47      	ldr	r2, [pc, #284]	; (80079a8 <HAL_DMA_Init+0x698>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a45      	ldr	r2, [pc, #276]	; (80079ac <HAL_DMA_Init+0x69c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a44      	ldr	r2, [pc, #272]	; (80079b0 <HAL_DMA_Init+0x6a0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a42      	ldr	r2, [pc, #264]	; (80079b4 <HAL_DMA_Init+0x6a4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <HAL_DMA_Init+0x6a8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <HAL_DMA_Init+0x6ac>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3e      	ldr	r2, [pc, #248]	; (80079c0 <HAL_DMA_Init+0x6b0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_DMA_Init+0x5c6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <HAL_DMA_Init+0x6b4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_DMA_Init+0x5ca>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_DMA_Init+0x5cc>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d032      	beq.n	8007946 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 fceb 	bl	80092bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d102      	bne.n	80078f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007908:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d010      	beq.n	8007934 <HAL_DMA_Init+0x624>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2b08      	cmp	r3, #8
 8007918:	d80c      	bhi.n	8007934 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fd68 	bl	80093f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	e008      	b.n	8007946 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	a7fdabf8 	.word	0xa7fdabf8
 8007964:	cccccccd 	.word	0xcccccccd
 8007968:	40020010 	.word	0x40020010
 800796c:	40020028 	.word	0x40020028
 8007970:	40020040 	.word	0x40020040
 8007974:	40020058 	.word	0x40020058
 8007978:	40020070 	.word	0x40020070
 800797c:	40020088 	.word	0x40020088
 8007980:	400200a0 	.word	0x400200a0
 8007984:	400200b8 	.word	0x400200b8
 8007988:	40020410 	.word	0x40020410
 800798c:	40020428 	.word	0x40020428
 8007990:	40020440 	.word	0x40020440
 8007994:	40020458 	.word	0x40020458
 8007998:	40020470 	.word	0x40020470
 800799c:	40020488 	.word	0x40020488
 80079a0:	400204a0 	.word	0x400204a0
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	58025408 	.word	0x58025408
 80079ac:	5802541c 	.word	0x5802541c
 80079b0:	58025430 	.word	0x58025430
 80079b4:	58025444 	.word	0x58025444
 80079b8:	58025458 	.word	0x58025458
 80079bc:	5802546c 	.word	0x5802546c
 80079c0:	58025480 	.word	0x58025480
 80079c4:	58025494 	.word	0x58025494

080079c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e226      	b.n	8007e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_DMA_Start_IT+0x2a>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e21f      	b.n	8007e32 <HAL_DMA_Start_IT+0x46a>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	f040 820a 	bne.w	8007e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a68      	ldr	r2, [pc, #416]	; (8007bbc <HAL_DMA_Start_IT+0x1f4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d04a      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a66      	ldr	r2, [pc, #408]	; (8007bc0 <HAL_DMA_Start_IT+0x1f8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d045      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a65      	ldr	r2, [pc, #404]	; (8007bc4 <HAL_DMA_Start_IT+0x1fc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d040      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a63      	ldr	r2, [pc, #396]	; (8007bc8 <HAL_DMA_Start_IT+0x200>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d03b      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a62      	ldr	r2, [pc, #392]	; (8007bcc <HAL_DMA_Start_IT+0x204>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d036      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a60      	ldr	r2, [pc, #384]	; (8007bd0 <HAL_DMA_Start_IT+0x208>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d031      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a5f      	ldr	r2, [pc, #380]	; (8007bd4 <HAL_DMA_Start_IT+0x20c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d02c      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a5d      	ldr	r2, [pc, #372]	; (8007bd8 <HAL_DMA_Start_IT+0x210>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d027      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a5c      	ldr	r2, [pc, #368]	; (8007bdc <HAL_DMA_Start_IT+0x214>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d022      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5a      	ldr	r2, [pc, #360]	; (8007be0 <HAL_DMA_Start_IT+0x218>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01d      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a59      	ldr	r2, [pc, #356]	; (8007be4 <HAL_DMA_Start_IT+0x21c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d018      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a57      	ldr	r2, [pc, #348]	; (8007be8 <HAL_DMA_Start_IT+0x220>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a56      	ldr	r2, [pc, #344]	; (8007bec <HAL_DMA_Start_IT+0x224>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a54      	ldr	r2, [pc, #336]	; (8007bf0 <HAL_DMA_Start_IT+0x228>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a53      	ldr	r2, [pc, #332]	; (8007bf4 <HAL_DMA_Start_IT+0x22c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_DMA_Start_IT+0xee>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a51      	ldr	r2, [pc, #324]	; (8007bf8 <HAL_DMA_Start_IT+0x230>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <HAL_DMA_Start_IT+0x100>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e007      	b.n	8007ad8 <HAL_DMA_Start_IT+0x110>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f001 f912 	bl	8008d08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a34      	ldr	r2, [pc, #208]	; (8007bbc <HAL_DMA_Start_IT+0x1f4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d04a      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a33      	ldr	r2, [pc, #204]	; (8007bc0 <HAL_DMA_Start_IT+0x1f8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d045      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <HAL_DMA_Start_IT+0x1fc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d040      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a30      	ldr	r2, [pc, #192]	; (8007bc8 <HAL_DMA_Start_IT+0x200>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d03b      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a2e      	ldr	r2, [pc, #184]	; (8007bcc <HAL_DMA_Start_IT+0x204>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d036      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a2d      	ldr	r2, [pc, #180]	; (8007bd0 <HAL_DMA_Start_IT+0x208>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d031      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2b      	ldr	r2, [pc, #172]	; (8007bd4 <HAL_DMA_Start_IT+0x20c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d02c      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2a      	ldr	r2, [pc, #168]	; (8007bd8 <HAL_DMA_Start_IT+0x210>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d027      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <HAL_DMA_Start_IT+0x214>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d022      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a27      	ldr	r2, [pc, #156]	; (8007be0 <HAL_DMA_Start_IT+0x218>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d01d      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <HAL_DMA_Start_IT+0x21c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d018      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a24      	ldr	r2, [pc, #144]	; (8007be8 <HAL_DMA_Start_IT+0x220>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d013      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a22      	ldr	r2, [pc, #136]	; (8007bec <HAL_DMA_Start_IT+0x224>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00e      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a21      	ldr	r2, [pc, #132]	; (8007bf0 <HAL_DMA_Start_IT+0x228>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_DMA_Start_IT+0x22c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_DMA_Start_IT+0x1bc>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <HAL_DMA_Start_IT+0x230>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d101      	bne.n	8007b88 <HAL_DMA_Start_IT+0x1c0>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <HAL_DMA_Start_IT+0x1c2>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d036      	beq.n	8007bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f023 021e 	bic.w	r2, r3, #30
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0216 	orr.w	r2, r2, #22
 8007ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d03e      	beq.n	8007c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0208 	orr.w	r2, r2, #8
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e035      	b.n	8007c28 <HAL_DMA_Start_IT+0x260>
 8007bbc:	40020010 	.word	0x40020010
 8007bc0:	40020028 	.word	0x40020028
 8007bc4:	40020040 	.word	0x40020040
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020070 	.word	0x40020070
 8007bd0:	40020088 	.word	0x40020088
 8007bd4:	400200a0 	.word	0x400200a0
 8007bd8:	400200b8 	.word	0x400200b8
 8007bdc:	40020410 	.word	0x40020410
 8007be0:	40020428 	.word	0x40020428
 8007be4:	40020440 	.word	0x40020440
 8007be8:	40020458 	.word	0x40020458
 8007bec:	40020470 	.word	0x40020470
 8007bf0:	40020488 	.word	0x40020488
 8007bf4:	400204a0 	.word	0x400204a0
 8007bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f023 020e 	bic.w	r2, r3, #14
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 020a 	orr.w	r2, r2, #10
 8007c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0204 	orr.w	r2, r2, #4
 8007c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a83      	ldr	r2, [pc, #524]	; (8007e3c <HAL_DMA_Start_IT+0x474>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d072      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a82      	ldr	r2, [pc, #520]	; (8007e40 <HAL_DMA_Start_IT+0x478>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d06d      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a80      	ldr	r2, [pc, #512]	; (8007e44 <HAL_DMA_Start_IT+0x47c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d068      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a7f      	ldr	r2, [pc, #508]	; (8007e48 <HAL_DMA_Start_IT+0x480>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d063      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a7d      	ldr	r2, [pc, #500]	; (8007e4c <HAL_DMA_Start_IT+0x484>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d05e      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a7c      	ldr	r2, [pc, #496]	; (8007e50 <HAL_DMA_Start_IT+0x488>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d059      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a7a      	ldr	r2, [pc, #488]	; (8007e54 <HAL_DMA_Start_IT+0x48c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d054      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a79      	ldr	r2, [pc, #484]	; (8007e58 <HAL_DMA_Start_IT+0x490>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d04f      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a77      	ldr	r2, [pc, #476]	; (8007e5c <HAL_DMA_Start_IT+0x494>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d04a      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a76      	ldr	r2, [pc, #472]	; (8007e60 <HAL_DMA_Start_IT+0x498>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d045      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a74      	ldr	r2, [pc, #464]	; (8007e64 <HAL_DMA_Start_IT+0x49c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d040      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a73      	ldr	r2, [pc, #460]	; (8007e68 <HAL_DMA_Start_IT+0x4a0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d03b      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a71      	ldr	r2, [pc, #452]	; (8007e6c <HAL_DMA_Start_IT+0x4a4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d036      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a70      	ldr	r2, [pc, #448]	; (8007e70 <HAL_DMA_Start_IT+0x4a8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d031      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a6e      	ldr	r2, [pc, #440]	; (8007e74 <HAL_DMA_Start_IT+0x4ac>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d02c      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a6d      	ldr	r2, [pc, #436]	; (8007e78 <HAL_DMA_Start_IT+0x4b0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d027      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a6b      	ldr	r2, [pc, #428]	; (8007e7c <HAL_DMA_Start_IT+0x4b4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d022      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6a      	ldr	r2, [pc, #424]	; (8007e80 <HAL_DMA_Start_IT+0x4b8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d01d      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a68      	ldr	r2, [pc, #416]	; (8007e84 <HAL_DMA_Start_IT+0x4bc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d018      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a67      	ldr	r2, [pc, #412]	; (8007e88 <HAL_DMA_Start_IT+0x4c0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d013      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a65      	ldr	r2, [pc, #404]	; (8007e8c <HAL_DMA_Start_IT+0x4c4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00e      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a64      	ldr	r2, [pc, #400]	; (8007e90 <HAL_DMA_Start_IT+0x4c8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d009      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a62      	ldr	r2, [pc, #392]	; (8007e94 <HAL_DMA_Start_IT+0x4cc>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_DMA_Start_IT+0x350>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a61      	ldr	r2, [pc, #388]	; (8007e98 <HAL_DMA_Start_IT+0x4d0>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <HAL_DMA_Start_IT+0x354>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_DMA_Start_IT+0x356>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01a      	beq.n	8007d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a37      	ldr	r2, [pc, #220]	; (8007e3c <HAL_DMA_Start_IT+0x474>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d04a      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a36      	ldr	r2, [pc, #216]	; (8007e40 <HAL_DMA_Start_IT+0x478>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d045      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a34      	ldr	r2, [pc, #208]	; (8007e44 <HAL_DMA_Start_IT+0x47c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d040      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a33      	ldr	r2, [pc, #204]	; (8007e48 <HAL_DMA_Start_IT+0x480>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d03b      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a31      	ldr	r2, [pc, #196]	; (8007e4c <HAL_DMA_Start_IT+0x484>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d036      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a30      	ldr	r2, [pc, #192]	; (8007e50 <HAL_DMA_Start_IT+0x488>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d031      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	; (8007e54 <HAL_DMA_Start_IT+0x48c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02c      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2d      	ldr	r2, [pc, #180]	; (8007e58 <HAL_DMA_Start_IT+0x490>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d027      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2b      	ldr	r2, [pc, #172]	; (8007e5c <HAL_DMA_Start_IT+0x494>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d022      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <HAL_DMA_Start_IT+0x498>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d01d      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a28      	ldr	r2, [pc, #160]	; (8007e64 <HAL_DMA_Start_IT+0x49c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d018      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a27      	ldr	r2, [pc, #156]	; (8007e68 <HAL_DMA_Start_IT+0x4a0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d013      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <HAL_DMA_Start_IT+0x4a4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00e      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <HAL_DMA_Start_IT+0x4a8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a22      	ldr	r2, [pc, #136]	; (8007e74 <HAL_DMA_Start_IT+0x4ac>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d004      	beq.n	8007df8 <HAL_DMA_Start_IT+0x430>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <HAL_DMA_Start_IT+0x4b0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d108      	bne.n	8007e0a <HAL_DMA_Start_IT+0x442>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	e012      	b.n	8007e30 <HAL_DMA_Start_IT+0x468>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0201 	orr.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e009      	b.n	8007e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40020010 	.word	0x40020010
 8007e40:	40020028 	.word	0x40020028
 8007e44:	40020040 	.word	0x40020040
 8007e48:	40020058 	.word	0x40020058
 8007e4c:	40020070 	.word	0x40020070
 8007e50:	40020088 	.word	0x40020088
 8007e54:	400200a0 	.word	0x400200a0
 8007e58:	400200b8 	.word	0x400200b8
 8007e5c:	40020410 	.word	0x40020410
 8007e60:	40020428 	.word	0x40020428
 8007e64:	40020440 	.word	0x40020440
 8007e68:	40020458 	.word	0x40020458
 8007e6c:	40020470 	.word	0x40020470
 8007e70:	40020488 	.word	0x40020488
 8007e74:	400204a0 	.word	0x400204a0
 8007e78:	400204b8 	.word	0x400204b8
 8007e7c:	58025408 	.word	0x58025408
 8007e80:	5802541c 	.word	0x5802541c
 8007e84:	58025430 	.word	0x58025430
 8007e88:	58025444 	.word	0x58025444
 8007e8c:	58025458 	.word	0x58025458
 8007e90:	5802546c 	.word	0x5802546c
 8007e94:	58025480 	.word	0x58025480
 8007e98:	58025494 	.word	0x58025494

08007e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ea8:	4b67      	ldr	r3, [pc, #412]	; (8008048 <HAL_DMA_IRQHandler+0x1ac>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a67      	ldr	r2, [pc, #412]	; (800804c <HAL_DMA_IRQHandler+0x1b0>)
 8007eae:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb2:	0a9b      	lsrs	r3, r3, #10
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5f      	ldr	r2, [pc, #380]	; (8008050 <HAL_DMA_IRQHandler+0x1b4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d04a      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a5d      	ldr	r2, [pc, #372]	; (8008054 <HAL_DMA_IRQHandler+0x1b8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d045      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a5c      	ldr	r2, [pc, #368]	; (8008058 <HAL_DMA_IRQHandler+0x1bc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d040      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_DMA_IRQHandler+0x1c0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d03b      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a59      	ldr	r2, [pc, #356]	; (8008060 <HAL_DMA_IRQHandler+0x1c4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d036      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a57      	ldr	r2, [pc, #348]	; (8008064 <HAL_DMA_IRQHandler+0x1c8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d031      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a56      	ldr	r2, [pc, #344]	; (8008068 <HAL_DMA_IRQHandler+0x1cc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d02c      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a54      	ldr	r2, [pc, #336]	; (800806c <HAL_DMA_IRQHandler+0x1d0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d027      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a53      	ldr	r2, [pc, #332]	; (8008070 <HAL_DMA_IRQHandler+0x1d4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d022      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a51      	ldr	r2, [pc, #324]	; (8008074 <HAL_DMA_IRQHandler+0x1d8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01d      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a50      	ldr	r2, [pc, #320]	; (8008078 <HAL_DMA_IRQHandler+0x1dc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d018      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a4e      	ldr	r2, [pc, #312]	; (800807c <HAL_DMA_IRQHandler+0x1e0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a4d      	ldr	r2, [pc, #308]	; (8008080 <HAL_DMA_IRQHandler+0x1e4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a4b      	ldr	r2, [pc, #300]	; (8008084 <HAL_DMA_IRQHandler+0x1e8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d009      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a4a      	ldr	r2, [pc, #296]	; (8008088 <HAL_DMA_IRQHandler+0x1ec>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xd2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a48      	ldr	r2, [pc, #288]	; (800808c <HAL_DMA_IRQHandler+0x1f0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d101      	bne.n	8007f72 <HAL_DMA_IRQHandler+0xd6>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <HAL_DMA_IRQHandler+0xd8>
 8007f72:	2300      	movs	r3, #0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 842b 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	2208      	movs	r2, #8
 8007f84:	409a      	lsls	r2, r3
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80a2 	beq.w	80080d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a2e      	ldr	r2, [pc, #184]	; (8008050 <HAL_DMA_IRQHandler+0x1b4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04a      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <HAL_DMA_IRQHandler+0x1b8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d045      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2b      	ldr	r2, [pc, #172]	; (8008058 <HAL_DMA_IRQHandler+0x1bc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d040      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a2a      	ldr	r2, [pc, #168]	; (800805c <HAL_DMA_IRQHandler+0x1c0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d03b      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a28      	ldr	r2, [pc, #160]	; (8008060 <HAL_DMA_IRQHandler+0x1c4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d036      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a27      	ldr	r2, [pc, #156]	; (8008064 <HAL_DMA_IRQHandler+0x1c8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d031      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a25      	ldr	r2, [pc, #148]	; (8008068 <HAL_DMA_IRQHandler+0x1cc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d02c      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a24      	ldr	r2, [pc, #144]	; (800806c <HAL_DMA_IRQHandler+0x1d0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a22      	ldr	r2, [pc, #136]	; (8008070 <HAL_DMA_IRQHandler+0x1d4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d022      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a21      	ldr	r2, [pc, #132]	; (8008074 <HAL_DMA_IRQHandler+0x1d8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d01d      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1f      	ldr	r2, [pc, #124]	; (8008078 <HAL_DMA_IRQHandler+0x1dc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1e      	ldr	r2, [pc, #120]	; (800807c <HAL_DMA_IRQHandler+0x1e0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <HAL_DMA_IRQHandler+0x1e4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a1b      	ldr	r2, [pc, #108]	; (8008084 <HAL_DMA_IRQHandler+0x1e8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <HAL_DMA_IRQHandler+0x1ec>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_DMA_IRQHandler+0x194>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a18      	ldr	r2, [pc, #96]	; (800808c <HAL_DMA_IRQHandler+0x1f0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d12f      	bne.n	8008090 <HAL_DMA_IRQHandler+0x1f4>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	bf14      	ite	ne
 800803e:	2301      	movne	r3, #1
 8008040:	2300      	moveq	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	e02e      	b.n	80080a4 <HAL_DMA_IRQHandler+0x208>
 8008046:	bf00      	nop
 8008048:	20000018 	.word	0x20000018
 800804c:	1b4e81b5 	.word	0x1b4e81b5
 8008050:	40020010 	.word	0x40020010
 8008054:	40020028 	.word	0x40020028
 8008058:	40020040 	.word	0x40020040
 800805c:	40020058 	.word	0x40020058
 8008060:	40020070 	.word	0x40020070
 8008064:	40020088 	.word	0x40020088
 8008068:	400200a0 	.word	0x400200a0
 800806c:	400200b8 	.word	0x400200b8
 8008070:	40020410 	.word	0x40020410
 8008074:	40020428 	.word	0x40020428
 8008078:	40020440 	.word	0x40020440
 800807c:	40020458 	.word	0x40020458
 8008080:	40020470 	.word	0x40020470
 8008084:	40020488 	.word	0x40020488
 8008088:	400204a0 	.word	0x400204a0
 800808c:	400204b8 	.word	0x400204b8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	bf14      	ite	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	2300      	moveq	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d015      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2208      	movs	r2, #8
 80080c2:	409a      	lsls	r2, r3
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080cc:	f043 0201 	orr.w	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	fa22 f303 	lsr.w	r3, r2, r3
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d06e      	beq.n	80081c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a69      	ldr	r2, [pc, #420]	; (8008294 <HAL_DMA_IRQHandler+0x3f8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d04a      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a67      	ldr	r2, [pc, #412]	; (8008298 <HAL_DMA_IRQHandler+0x3fc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d045      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a66      	ldr	r2, [pc, #408]	; (800829c <HAL_DMA_IRQHandler+0x400>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d040      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a64      	ldr	r2, [pc, #400]	; (80082a0 <HAL_DMA_IRQHandler+0x404>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d03b      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a63      	ldr	r2, [pc, #396]	; (80082a4 <HAL_DMA_IRQHandler+0x408>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d036      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a61      	ldr	r2, [pc, #388]	; (80082a8 <HAL_DMA_IRQHandler+0x40c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d031      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a60      	ldr	r2, [pc, #384]	; (80082ac <HAL_DMA_IRQHandler+0x410>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d02c      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a5e      	ldr	r2, [pc, #376]	; (80082b0 <HAL_DMA_IRQHandler+0x414>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d027      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a5d      	ldr	r2, [pc, #372]	; (80082b4 <HAL_DMA_IRQHandler+0x418>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d022      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a5b      	ldr	r2, [pc, #364]	; (80082b8 <HAL_DMA_IRQHandler+0x41c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01d      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a5a      	ldr	r2, [pc, #360]	; (80082bc <HAL_DMA_IRQHandler+0x420>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d018      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a58      	ldr	r2, [pc, #352]	; (80082c0 <HAL_DMA_IRQHandler+0x424>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d013      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a57      	ldr	r2, [pc, #348]	; (80082c4 <HAL_DMA_IRQHandler+0x428>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00e      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a55      	ldr	r2, [pc, #340]	; (80082c8 <HAL_DMA_IRQHandler+0x42c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d009      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a54      	ldr	r2, [pc, #336]	; (80082cc <HAL_DMA_IRQHandler+0x430>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d004      	beq.n	800818a <HAL_DMA_IRQHandler+0x2ee>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a52      	ldr	r2, [pc, #328]	; (80082d0 <HAL_DMA_IRQHandler+0x434>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d10a      	bne.n	80081a0 <HAL_DMA_IRQHandler+0x304>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	e003      	b.n	80081a8 <HAL_DMA_IRQHandler+0x30c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2300      	movs	r3, #0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	2201      	movs	r2, #1
 80081b6:	409a      	lsls	r2, r3
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c0:	f043 0202 	orr.w	r2, r3, #2
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	2204      	movs	r2, #4
 80081d2:	409a      	lsls	r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 808f 	beq.w	80082fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <HAL_DMA_IRQHandler+0x3f8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d04a      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a2a      	ldr	r2, [pc, #168]	; (8008298 <HAL_DMA_IRQHandler+0x3fc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d045      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a29      	ldr	r2, [pc, #164]	; (800829c <HAL_DMA_IRQHandler+0x400>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d040      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <HAL_DMA_IRQHandler+0x404>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d03b      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <HAL_DMA_IRQHandler+0x408>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d036      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a24      	ldr	r2, [pc, #144]	; (80082a8 <HAL_DMA_IRQHandler+0x40c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d031      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a23      	ldr	r2, [pc, #140]	; (80082ac <HAL_DMA_IRQHandler+0x410>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d02c      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <HAL_DMA_IRQHandler+0x414>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d027      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <HAL_DMA_IRQHandler+0x418>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d022      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <HAL_DMA_IRQHandler+0x41c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01d      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_DMA_IRQHandler+0x420>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d018      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1b      	ldr	r2, [pc, #108]	; (80082c0 <HAL_DMA_IRQHandler+0x424>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <HAL_DMA_IRQHandler+0x428>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00e      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a18      	ldr	r2, [pc, #96]	; (80082c8 <HAL_DMA_IRQHandler+0x42c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d009      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_DMA_IRQHandler+0x430>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d004      	beq.n	800827e <HAL_DMA_IRQHandler+0x3e2>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <HAL_DMA_IRQHandler+0x434>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d12a      	bne.n	80082d4 <HAL_DMA_IRQHandler+0x438>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf14      	ite	ne
 800828c:	2301      	movne	r3, #1
 800828e:	2300      	moveq	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	e023      	b.n	80082dc <HAL_DMA_IRQHandler+0x440>
 8008294:	40020010 	.word	0x40020010
 8008298:	40020028 	.word	0x40020028
 800829c:	40020040 	.word	0x40020040
 80082a0:	40020058 	.word	0x40020058
 80082a4:	40020070 	.word	0x40020070
 80082a8:	40020088 	.word	0x40020088
 80082ac:	400200a0 	.word	0x400200a0
 80082b0:	400200b8 	.word	0x400200b8
 80082b4:	40020410 	.word	0x40020410
 80082b8:	40020428 	.word	0x40020428
 80082bc:	40020440 	.word	0x40020440
 80082c0:	40020458 	.word	0x40020458
 80082c4:	40020470 	.word	0x40020470
 80082c8:	40020488 	.word	0x40020488
 80082cc:	400204a0 	.word	0x400204a0
 80082d0:	400204b8 	.word	0x400204b8
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00d      	beq.n	80082fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	2204      	movs	r2, #4
 80082ea:	409a      	lsls	r2, r3
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f4:	f043 0204 	orr.w	r2, r3, #4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2210      	movs	r2, #16
 8008306:	409a      	lsls	r2, r3
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80a6 	beq.w	800845e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a85      	ldr	r2, [pc, #532]	; (800852c <HAL_DMA_IRQHandler+0x690>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d04a      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a83      	ldr	r2, [pc, #524]	; (8008530 <HAL_DMA_IRQHandler+0x694>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d045      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a82      	ldr	r2, [pc, #520]	; (8008534 <HAL_DMA_IRQHandler+0x698>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d040      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a80      	ldr	r2, [pc, #512]	; (8008538 <HAL_DMA_IRQHandler+0x69c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03b      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a7f      	ldr	r2, [pc, #508]	; (800853c <HAL_DMA_IRQHandler+0x6a0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d036      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <HAL_DMA_IRQHandler+0x6a4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d031      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a7c      	ldr	r2, [pc, #496]	; (8008544 <HAL_DMA_IRQHandler+0x6a8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d02c      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a7a      	ldr	r2, [pc, #488]	; (8008548 <HAL_DMA_IRQHandler+0x6ac>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d027      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a79      	ldr	r2, [pc, #484]	; (800854c <HAL_DMA_IRQHandler+0x6b0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a77      	ldr	r2, [pc, #476]	; (8008550 <HAL_DMA_IRQHandler+0x6b4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a76      	ldr	r2, [pc, #472]	; (8008554 <HAL_DMA_IRQHandler+0x6b8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d018      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a74      	ldr	r2, [pc, #464]	; (8008558 <HAL_DMA_IRQHandler+0x6bc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a73      	ldr	r2, [pc, #460]	; (800855c <HAL_DMA_IRQHandler+0x6c0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a71      	ldr	r2, [pc, #452]	; (8008560 <HAL_DMA_IRQHandler+0x6c4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a70      	ldr	r2, [pc, #448]	; (8008564 <HAL_DMA_IRQHandler+0x6c8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x516>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a6e      	ldr	r2, [pc, #440]	; (8008568 <HAL_DMA_IRQHandler+0x6cc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10a      	bne.n	80083c8 <HAL_DMA_IRQHandler+0x52c>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bf14      	ite	ne
 80083c0:	2301      	movne	r3, #1
 80083c2:	2300      	moveq	r3, #0
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	e009      	b.n	80083dc <HAL_DMA_IRQHandler+0x540>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bf14      	ite	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	2300      	moveq	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d03e      	beq.n	800845e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e4:	f003 031f 	and.w	r3, r3, #31
 80083e8:	2210      	movs	r2, #16
 80083ea:	409a      	lsls	r2, r3
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d018      	beq.n	8008430 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d108      	bne.n	800841e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d024      	beq.n	800845e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
 800841c:	e01f      	b.n	800845e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01b      	beq.n	800845e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
 800842e:	e016      	b.n	800845e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0208 	bic.w	r2, r2, #8
 800844c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	2220      	movs	r2, #32
 8008468:	409a      	lsls	r2, r3
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8110 	beq.w	8008694 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2c      	ldr	r2, [pc, #176]	; (800852c <HAL_DMA_IRQHandler+0x690>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d04a      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <HAL_DMA_IRQHandler+0x694>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d045      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a29      	ldr	r2, [pc, #164]	; (8008534 <HAL_DMA_IRQHandler+0x698>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d040      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_DMA_IRQHandler+0x69c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d03b      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <HAL_DMA_IRQHandler+0x6a0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d036      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_DMA_IRQHandler+0x6a4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d031      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a23      	ldr	r2, [pc, #140]	; (8008544 <HAL_DMA_IRQHandler+0x6a8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d02c      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a22      	ldr	r2, [pc, #136]	; (8008548 <HAL_DMA_IRQHandler+0x6ac>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d027      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a20      	ldr	r2, [pc, #128]	; (800854c <HAL_DMA_IRQHandler+0x6b0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d022      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_DMA_IRQHandler+0x6b4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d01d      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <HAL_DMA_IRQHandler+0x6b8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d018      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_DMA_IRQHandler+0x6bc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d013      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_DMA_IRQHandler+0x6c0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00e      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_DMA_IRQHandler+0x6c4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d009      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <HAL_DMA_IRQHandler+0x6c8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <HAL_DMA_IRQHandler+0x678>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a16      	ldr	r2, [pc, #88]	; (8008568 <HAL_DMA_IRQHandler+0x6cc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d12b      	bne.n	800856c <HAL_DMA_IRQHandler+0x6d0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0310 	and.w	r3, r3, #16
 800851e:	2b00      	cmp	r3, #0
 8008520:	bf14      	ite	ne
 8008522:	2301      	movne	r3, #1
 8008524:	2300      	moveq	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	e02a      	b.n	8008580 <HAL_DMA_IRQHandler+0x6e4>
 800852a:	bf00      	nop
 800852c:	40020010 	.word	0x40020010
 8008530:	40020028 	.word	0x40020028
 8008534:	40020040 	.word	0x40020040
 8008538:	40020058 	.word	0x40020058
 800853c:	40020070 	.word	0x40020070
 8008540:	40020088 	.word	0x40020088
 8008544:	400200a0 	.word	0x400200a0
 8008548:	400200b8 	.word	0x400200b8
 800854c:	40020410 	.word	0x40020410
 8008550:	40020428 	.word	0x40020428
 8008554:	40020440 	.word	0x40020440
 8008558:	40020458 	.word	0x40020458
 800855c:	40020470 	.word	0x40020470
 8008560:	40020488 	.word	0x40020488
 8008564:	400204a0 	.word	0x400204a0
 8008568:	400204b8 	.word	0x400204b8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	bf14      	ite	ne
 800857a:	2301      	movne	r3, #1
 800857c:	2300      	moveq	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 8087 	beq.w	8008694 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	2220      	movs	r2, #32
 8008590:	409a      	lsls	r2, r3
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d139      	bne.n	8008616 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0216 	bic.w	r2, r2, #22
 80085b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <HAL_DMA_IRQHandler+0x736>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0208 	bic.w	r2, r2, #8
 80085e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	223f      	movs	r2, #63	; 0x3f
 80085ec:	409a      	lsls	r2, r3
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 834a 	beq.w	8008ca0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
          }
          return;
 8008614:	e344      	b.n	8008ca0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d018      	beq.n	8008656 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d108      	bne.n	8008644 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	2b00      	cmp	r3, #0
 8008638:	d02c      	beq.n	8008694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
 8008642:	e027      	b.n	8008694 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d023      	beq.n	8008694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	e01e      	b.n	8008694 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10f      	bne.n	8008684 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0210 	bic.w	r2, r2, #16
 8008672:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8306 	beq.w	8008caa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8088 	beq.w	80087bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2204      	movs	r2, #4
 80086b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a7a      	ldr	r2, [pc, #488]	; (80088a4 <HAL_DMA_IRQHandler+0xa08>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d04a      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a79      	ldr	r2, [pc, #484]	; (80088a8 <HAL_DMA_IRQHandler+0xa0c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d045      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a77      	ldr	r2, [pc, #476]	; (80088ac <HAL_DMA_IRQHandler+0xa10>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d040      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a76      	ldr	r2, [pc, #472]	; (80088b0 <HAL_DMA_IRQHandler+0xa14>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d03b      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a74      	ldr	r2, [pc, #464]	; (80088b4 <HAL_DMA_IRQHandler+0xa18>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d036      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a73      	ldr	r2, [pc, #460]	; (80088b8 <HAL_DMA_IRQHandler+0xa1c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d031      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a71      	ldr	r2, [pc, #452]	; (80088bc <HAL_DMA_IRQHandler+0xa20>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d02c      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a70      	ldr	r2, [pc, #448]	; (80088c0 <HAL_DMA_IRQHandler+0xa24>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d027      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a6e      	ldr	r2, [pc, #440]	; (80088c4 <HAL_DMA_IRQHandler+0xa28>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d022      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a6d      	ldr	r2, [pc, #436]	; (80088c8 <HAL_DMA_IRQHandler+0xa2c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d01d      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a6b      	ldr	r2, [pc, #428]	; (80088cc <HAL_DMA_IRQHandler+0xa30>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d018      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6a      	ldr	r2, [pc, #424]	; (80088d0 <HAL_DMA_IRQHandler+0xa34>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d013      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a68      	ldr	r2, [pc, #416]	; (80088d4 <HAL_DMA_IRQHandler+0xa38>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00e      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a67      	ldr	r2, [pc, #412]	; (80088d8 <HAL_DMA_IRQHandler+0xa3c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a65      	ldr	r2, [pc, #404]	; (80088dc <HAL_DMA_IRQHandler+0xa40>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <HAL_DMA_IRQHandler+0x8b8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a64      	ldr	r2, [pc, #400]	; (80088e0 <HAL_DMA_IRQHandler+0xa44>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d108      	bne.n	8008766 <HAL_DMA_IRQHandler+0x8ca>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e007      	b.n	8008776 <HAL_DMA_IRQHandler+0x8da>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0201 	bic.w	r2, r2, #1
 8008774:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877e:	429a      	cmp	r2, r3
 8008780:	d307      	bcc.n	8008792 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f2      	bne.n	8008776 <HAL_DMA_IRQHandler+0x8da>
 8008790:	e000      	b.n	8008794 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008792:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2203      	movs	r2, #3
 80087a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80087aa:	e003      	b.n	80087b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8272 	beq.w	8008caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
 80087ce:	e26c      	b.n	8008caa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a43      	ldr	r2, [pc, #268]	; (80088e4 <HAL_DMA_IRQHandler+0xa48>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d022      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a42      	ldr	r2, [pc, #264]	; (80088e8 <HAL_DMA_IRQHandler+0xa4c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d01d      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a40      	ldr	r2, [pc, #256]	; (80088ec <HAL_DMA_IRQHandler+0xa50>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d018      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a3f      	ldr	r2, [pc, #252]	; (80088f0 <HAL_DMA_IRQHandler+0xa54>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d013      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a3d      	ldr	r2, [pc, #244]	; (80088f4 <HAL_DMA_IRQHandler+0xa58>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a3c      	ldr	r2, [pc, #240]	; (80088f8 <HAL_DMA_IRQHandler+0xa5c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d009      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a3a      	ldr	r2, [pc, #232]	; (80088fc <HAL_DMA_IRQHandler+0xa60>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_DMA_IRQHandler+0x984>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a39      	ldr	r2, [pc, #228]	; (8008900 <HAL_DMA_IRQHandler+0xa64>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d101      	bne.n	8008824 <HAL_DMA_IRQHandler+0x988>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <HAL_DMA_IRQHandler+0x98a>
 8008824:	2300      	movs	r3, #0
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 823f 	beq.w	8008caa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	2204      	movs	r2, #4
 800883e:	409a      	lsls	r2, r3
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80cd 	beq.w	80089e4 <HAL_DMA_IRQHandler+0xb48>
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80c7 	beq.w	80089e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2204      	movs	r2, #4
 8008860:	409a      	lsls	r2, r3
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d049      	beq.n	8008904 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8210 	beq.w	8008ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800888c:	e20a      	b.n	8008ca4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 8206 	beq.w	8008ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088a0:	e200      	b.n	8008ca4 <HAL_DMA_IRQHandler+0xe08>
 80088a2:	bf00      	nop
 80088a4:	40020010 	.word	0x40020010
 80088a8:	40020028 	.word	0x40020028
 80088ac:	40020040 	.word	0x40020040
 80088b0:	40020058 	.word	0x40020058
 80088b4:	40020070 	.word	0x40020070
 80088b8:	40020088 	.word	0x40020088
 80088bc:	400200a0 	.word	0x400200a0
 80088c0:	400200b8 	.word	0x400200b8
 80088c4:	40020410 	.word	0x40020410
 80088c8:	40020428 	.word	0x40020428
 80088cc:	40020440 	.word	0x40020440
 80088d0:	40020458 	.word	0x40020458
 80088d4:	40020470 	.word	0x40020470
 80088d8:	40020488 	.word	0x40020488
 80088dc:	400204a0 	.word	0x400204a0
 80088e0:	400204b8 	.word	0x400204b8
 80088e4:	58025408 	.word	0x58025408
 80088e8:	5802541c 	.word	0x5802541c
 80088ec:	58025430 	.word	0x58025430
 80088f0:	58025444 	.word	0x58025444
 80088f4:	58025458 	.word	0x58025458
 80088f8:	5802546c 	.word	0x5802546c
 80088fc:	58025480 	.word	0x58025480
 8008900:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d160      	bne.n	80089d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a7f      	ldr	r2, [pc, #508]	; (8008b10 <HAL_DMA_IRQHandler+0xc74>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d04a      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a7d      	ldr	r2, [pc, #500]	; (8008b14 <HAL_DMA_IRQHandler+0xc78>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d045      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a7c      	ldr	r2, [pc, #496]	; (8008b18 <HAL_DMA_IRQHandler+0xc7c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d040      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a7a      	ldr	r2, [pc, #488]	; (8008b1c <HAL_DMA_IRQHandler+0xc80>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d03b      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a79      	ldr	r2, [pc, #484]	; (8008b20 <HAL_DMA_IRQHandler+0xc84>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d036      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a77      	ldr	r2, [pc, #476]	; (8008b24 <HAL_DMA_IRQHandler+0xc88>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d031      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a76      	ldr	r2, [pc, #472]	; (8008b28 <HAL_DMA_IRQHandler+0xc8c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d02c      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a74      	ldr	r2, [pc, #464]	; (8008b2c <HAL_DMA_IRQHandler+0xc90>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d027      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a73      	ldr	r2, [pc, #460]	; (8008b30 <HAL_DMA_IRQHandler+0xc94>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d022      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a71      	ldr	r2, [pc, #452]	; (8008b34 <HAL_DMA_IRQHandler+0xc98>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d01d      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a70      	ldr	r2, [pc, #448]	; (8008b38 <HAL_DMA_IRQHandler+0xc9c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d018      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a6e      	ldr	r2, [pc, #440]	; (8008b3c <HAL_DMA_IRQHandler+0xca0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d013      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a6d      	ldr	r2, [pc, #436]	; (8008b40 <HAL_DMA_IRQHandler+0xca4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00e      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a6b      	ldr	r2, [pc, #428]	; (8008b44 <HAL_DMA_IRQHandler+0xca8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d009      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a6a      	ldr	r2, [pc, #424]	; (8008b48 <HAL_DMA_IRQHandler+0xcac>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d004      	beq.n	80089ae <HAL_DMA_IRQHandler+0xb12>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a68      	ldr	r2, [pc, #416]	; (8008b4c <HAL_DMA_IRQHandler+0xcb0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d108      	bne.n	80089c0 <HAL_DMA_IRQHandler+0xb24>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0208 	bic.w	r2, r2, #8
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e007      	b.n	80089d0 <HAL_DMA_IRQHandler+0xb34>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0204 	bic.w	r2, r2, #4
 80089ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8165 	beq.w	8008ca4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089e2:	e15f      	b.n	8008ca4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	2202      	movs	r2, #2
 80089ee:	409a      	lsls	r2, r3
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80c5 	beq.w	8008b84 <HAL_DMA_IRQHandler+0xce8>
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80bf 	beq.w	8008b84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0a:	f003 031f 	and.w	r3, r3, #31
 8008a0e:	2202      	movs	r2, #2
 8008a10:	409a      	lsls	r2, r3
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d018      	beq.n	8008a52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 813a 	beq.w	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a3c:	e134      	b.n	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8130 	beq.w	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a50:	e12a      	b.n	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 8089 	bne.w	8008b70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <HAL_DMA_IRQHandler+0xc74>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d04a      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a29      	ldr	r2, [pc, #164]	; (8008b14 <HAL_DMA_IRQHandler+0xc78>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d045      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a28      	ldr	r2, [pc, #160]	; (8008b18 <HAL_DMA_IRQHandler+0xc7c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d040      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <HAL_DMA_IRQHandler+0xc80>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d03b      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a25      	ldr	r2, [pc, #148]	; (8008b20 <HAL_DMA_IRQHandler+0xc84>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d036      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a23      	ldr	r2, [pc, #140]	; (8008b24 <HAL_DMA_IRQHandler+0xc88>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d031      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a22      	ldr	r2, [pc, #136]	; (8008b28 <HAL_DMA_IRQHandler+0xc8c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d02c      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <HAL_DMA_IRQHandler+0xc90>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d027      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1f      	ldr	r2, [pc, #124]	; (8008b30 <HAL_DMA_IRQHandler+0xc94>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d022      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <HAL_DMA_IRQHandler+0xc98>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01d      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <HAL_DMA_IRQHandler+0xc9c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d018      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <HAL_DMA_IRQHandler+0xca0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d013      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <HAL_DMA_IRQHandler+0xca4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00e      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a17      	ldr	r2, [pc, #92]	; (8008b44 <HAL_DMA_IRQHandler+0xca8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d009      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a16      	ldr	r2, [pc, #88]	; (8008b48 <HAL_DMA_IRQHandler+0xcac>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_DMA_IRQHandler+0xc62>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a14      	ldr	r2, [pc, #80]	; (8008b4c <HAL_DMA_IRQHandler+0xcb0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d128      	bne.n	8008b50 <HAL_DMA_IRQHandler+0xcb4>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0214 	bic.w	r2, r2, #20
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e027      	b.n	8008b60 <HAL_DMA_IRQHandler+0xcc4>
 8008b10:	40020010 	.word	0x40020010
 8008b14:	40020028 	.word	0x40020028
 8008b18:	40020040 	.word	0x40020040
 8008b1c:	40020058 	.word	0x40020058
 8008b20:	40020070 	.word	0x40020070
 8008b24:	40020088 	.word	0x40020088
 8008b28:	400200a0 	.word	0x400200a0
 8008b2c:	400200b8 	.word	0x400200b8
 8008b30:	40020410 	.word	0x40020410
 8008b34:	40020428 	.word	0x40020428
 8008b38:	40020440 	.word	0x40020440
 8008b3c:	40020458 	.word	0x40020458
 8008b40:	40020470 	.word	0x40020470
 8008b44:	40020488 	.word	0x40020488
 8008b48:	400204a0 	.word	0x400204a0
 8008b4c:	400204b8 	.word	0x400204b8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 020a 	bic.w	r2, r2, #10
 8008b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 8097 	beq.w	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b82:	e091      	b.n	8008ca8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b88:	f003 031f 	and.w	r3, r3, #31
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8088 	beq.w	8008caa <HAL_DMA_IRQHandler+0xe0e>
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 8082 	beq.w	8008caa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a41      	ldr	r2, [pc, #260]	; (8008cb0 <HAL_DMA_IRQHandler+0xe14>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d04a      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a3f      	ldr	r2, [pc, #252]	; (8008cb4 <HAL_DMA_IRQHandler+0xe18>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d045      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a3e      	ldr	r2, [pc, #248]	; (8008cb8 <HAL_DMA_IRQHandler+0xe1c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d040      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a3c      	ldr	r2, [pc, #240]	; (8008cbc <HAL_DMA_IRQHandler+0xe20>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d03b      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a3b      	ldr	r2, [pc, #236]	; (8008cc0 <HAL_DMA_IRQHandler+0xe24>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d036      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a39      	ldr	r2, [pc, #228]	; (8008cc4 <HAL_DMA_IRQHandler+0xe28>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d031      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a38      	ldr	r2, [pc, #224]	; (8008cc8 <HAL_DMA_IRQHandler+0xe2c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d02c      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a36      	ldr	r2, [pc, #216]	; (8008ccc <HAL_DMA_IRQHandler+0xe30>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d027      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a35      	ldr	r2, [pc, #212]	; (8008cd0 <HAL_DMA_IRQHandler+0xe34>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d022      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a33      	ldr	r2, [pc, #204]	; (8008cd4 <HAL_DMA_IRQHandler+0xe38>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d01d      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a32      	ldr	r2, [pc, #200]	; (8008cd8 <HAL_DMA_IRQHandler+0xe3c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d018      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a30      	ldr	r2, [pc, #192]	; (8008cdc <HAL_DMA_IRQHandler+0xe40>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d013      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2f      	ldr	r2, [pc, #188]	; (8008ce0 <HAL_DMA_IRQHandler+0xe44>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00e      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <HAL_DMA_IRQHandler+0xe48>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d009      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a2c      	ldr	r2, [pc, #176]	; (8008ce8 <HAL_DMA_IRQHandler+0xe4c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d004      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xdaa>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <HAL_DMA_IRQHandler+0xe50>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d108      	bne.n	8008c58 <HAL_DMA_IRQHandler+0xdbc>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 021c 	bic.w	r2, r2, #28
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e007      	b.n	8008c68 <HAL_DMA_IRQHandler+0xdcc>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 020e 	bic.w	r2, r2, #14
 8008c66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	2201      	movs	r2, #1
 8008c72:	409a      	lsls	r2, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
 8008c9e:	e004      	b.n	8008caa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008ca0:	bf00      	nop
 8008ca2:	e002      	b.n	8008caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ca8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008caa:	3728      	adds	r7, #40	; 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	40020010 	.word	0x40020010
 8008cb4:	40020028 	.word	0x40020028
 8008cb8:	40020040 	.word	0x40020040
 8008cbc:	40020058 	.word	0x40020058
 8008cc0:	40020070 	.word	0x40020070
 8008cc4:	40020088 	.word	0x40020088
 8008cc8:	400200a0 	.word	0x400200a0
 8008ccc:	400200b8 	.word	0x400200b8
 8008cd0:	40020410 	.word	0x40020410
 8008cd4:	40020428 	.word	0x40020428
 8008cd8:	40020440 	.word	0x40020440
 8008cdc:	40020458 	.word	0x40020458
 8008ce0:	40020470 	.word	0x40020470
 8008ce4:	40020488 	.word	0x40020488
 8008ce8:	400204a0 	.word	0x400204a0
 8008cec:	400204b8 	.word	0x400204b8

08008cf0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a7f      	ldr	r2, [pc, #508]	; (8008f24 <DMA_SetConfig+0x21c>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d072      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a7d      	ldr	r2, [pc, #500]	; (8008f28 <DMA_SetConfig+0x220>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d06d      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a7c      	ldr	r2, [pc, #496]	; (8008f2c <DMA_SetConfig+0x224>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d068      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a7a      	ldr	r2, [pc, #488]	; (8008f30 <DMA_SetConfig+0x228>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d063      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a79      	ldr	r2, [pc, #484]	; (8008f34 <DMA_SetConfig+0x22c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d05e      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a77      	ldr	r2, [pc, #476]	; (8008f38 <DMA_SetConfig+0x230>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d059      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a76      	ldr	r2, [pc, #472]	; (8008f3c <DMA_SetConfig+0x234>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d054      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a74      	ldr	r2, [pc, #464]	; (8008f40 <DMA_SetConfig+0x238>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d04f      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a73      	ldr	r2, [pc, #460]	; (8008f44 <DMA_SetConfig+0x23c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d04a      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a71      	ldr	r2, [pc, #452]	; (8008f48 <DMA_SetConfig+0x240>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d045      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a70      	ldr	r2, [pc, #448]	; (8008f4c <DMA_SetConfig+0x244>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d040      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a6e      	ldr	r2, [pc, #440]	; (8008f50 <DMA_SetConfig+0x248>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d03b      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a6d      	ldr	r2, [pc, #436]	; (8008f54 <DMA_SetConfig+0x24c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d036      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a6b      	ldr	r2, [pc, #428]	; (8008f58 <DMA_SetConfig+0x250>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d031      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a6a      	ldr	r2, [pc, #424]	; (8008f5c <DMA_SetConfig+0x254>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d02c      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a68      	ldr	r2, [pc, #416]	; (8008f60 <DMA_SetConfig+0x258>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d027      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a67      	ldr	r2, [pc, #412]	; (8008f64 <DMA_SetConfig+0x25c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d022      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a65      	ldr	r2, [pc, #404]	; (8008f68 <DMA_SetConfig+0x260>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d01d      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a64      	ldr	r2, [pc, #400]	; (8008f6c <DMA_SetConfig+0x264>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d018      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a62      	ldr	r2, [pc, #392]	; (8008f70 <DMA_SetConfig+0x268>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a61      	ldr	r2, [pc, #388]	; (8008f74 <DMA_SetConfig+0x26c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00e      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a5f      	ldr	r2, [pc, #380]	; (8008f78 <DMA_SetConfig+0x270>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d009      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a5e      	ldr	r2, [pc, #376]	; (8008f7c <DMA_SetConfig+0x274>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d004      	beq.n	8008e12 <DMA_SetConfig+0x10a>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a5c      	ldr	r2, [pc, #368]	; (8008f80 <DMA_SetConfig+0x278>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d101      	bne.n	8008e16 <DMA_SetConfig+0x10e>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <DMA_SetConfig+0x110>
 8008e16:	2300      	movs	r3, #0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a39      	ldr	r2, [pc, #228]	; (8008f24 <DMA_SetConfig+0x21c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d04a      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a38      	ldr	r2, [pc, #224]	; (8008f28 <DMA_SetConfig+0x220>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d045      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a36      	ldr	r2, [pc, #216]	; (8008f2c <DMA_SetConfig+0x224>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d040      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a35      	ldr	r2, [pc, #212]	; (8008f30 <DMA_SetConfig+0x228>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d03b      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a33      	ldr	r2, [pc, #204]	; (8008f34 <DMA_SetConfig+0x22c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d036      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a32      	ldr	r2, [pc, #200]	; (8008f38 <DMA_SetConfig+0x230>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d031      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a30      	ldr	r2, [pc, #192]	; (8008f3c <DMA_SetConfig+0x234>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d02c      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a2f      	ldr	r2, [pc, #188]	; (8008f40 <DMA_SetConfig+0x238>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d027      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a2d      	ldr	r2, [pc, #180]	; (8008f44 <DMA_SetConfig+0x23c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d022      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a2c      	ldr	r2, [pc, #176]	; (8008f48 <DMA_SetConfig+0x240>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d01d      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a2a      	ldr	r2, [pc, #168]	; (8008f4c <DMA_SetConfig+0x244>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d018      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a29      	ldr	r2, [pc, #164]	; (8008f50 <DMA_SetConfig+0x248>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d013      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a27      	ldr	r2, [pc, #156]	; (8008f54 <DMA_SetConfig+0x24c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00e      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <DMA_SetConfig+0x250>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d009      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a24      	ldr	r2, [pc, #144]	; (8008f5c <DMA_SetConfig+0x254>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d004      	beq.n	8008ed8 <DMA_SetConfig+0x1d0>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a23      	ldr	r2, [pc, #140]	; (8008f60 <DMA_SetConfig+0x258>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d101      	bne.n	8008edc <DMA_SetConfig+0x1d4>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <DMA_SetConfig+0x1d6>
 8008edc:	2300      	movs	r3, #0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d059      	beq.n	8008f96 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	223f      	movs	r2, #63	; 0x3f
 8008eec:	409a      	lsls	r2, r3
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d138      	bne.n	8008f84 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f22:	e086      	b.n	8009032 <DMA_SetConfig+0x32a>
 8008f24:	40020010 	.word	0x40020010
 8008f28:	40020028 	.word	0x40020028
 8008f2c:	40020040 	.word	0x40020040
 8008f30:	40020058 	.word	0x40020058
 8008f34:	40020070 	.word	0x40020070
 8008f38:	40020088 	.word	0x40020088
 8008f3c:	400200a0 	.word	0x400200a0
 8008f40:	400200b8 	.word	0x400200b8
 8008f44:	40020410 	.word	0x40020410
 8008f48:	40020428 	.word	0x40020428
 8008f4c:	40020440 	.word	0x40020440
 8008f50:	40020458 	.word	0x40020458
 8008f54:	40020470 	.word	0x40020470
 8008f58:	40020488 	.word	0x40020488
 8008f5c:	400204a0 	.word	0x400204a0
 8008f60:	400204b8 	.word	0x400204b8
 8008f64:	58025408 	.word	0x58025408
 8008f68:	5802541c 	.word	0x5802541c
 8008f6c:	58025430 	.word	0x58025430
 8008f70:	58025444 	.word	0x58025444
 8008f74:	58025458 	.word	0x58025458
 8008f78:	5802546c 	.word	0x5802546c
 8008f7c:	58025480 	.word	0x58025480
 8008f80:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]
}
 8008f94:	e04d      	b.n	8009032 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a29      	ldr	r2, [pc, #164]	; (8009040 <DMA_SetConfig+0x338>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d022      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a27      	ldr	r2, [pc, #156]	; (8009044 <DMA_SetConfig+0x33c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d01d      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a26      	ldr	r2, [pc, #152]	; (8009048 <DMA_SetConfig+0x340>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d018      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a24      	ldr	r2, [pc, #144]	; (800904c <DMA_SetConfig+0x344>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d013      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a23      	ldr	r2, [pc, #140]	; (8009050 <DMA_SetConfig+0x348>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00e      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a21      	ldr	r2, [pc, #132]	; (8009054 <DMA_SetConfig+0x34c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d009      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a20      	ldr	r2, [pc, #128]	; (8009058 <DMA_SetConfig+0x350>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d004      	beq.n	8008fe6 <DMA_SetConfig+0x2de>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a1e      	ldr	r2, [pc, #120]	; (800905c <DMA_SetConfig+0x354>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d101      	bne.n	8008fea <DMA_SetConfig+0x2e2>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e000      	b.n	8008fec <DMA_SetConfig+0x2e4>
 8008fea:	2300      	movs	r3, #0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d020      	beq.n	8009032 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	409a      	lsls	r2, r3
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	d108      	bne.n	8009022 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	60da      	str	r2, [r3, #12]
}
 8009020:	e007      	b.n	8009032 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	58025408 	.word	0x58025408
 8009044:	5802541c 	.word	0x5802541c
 8009048:	58025430 	.word	0x58025430
 800904c:	58025444 	.word	0x58025444
 8009050:	58025458 	.word	0x58025458
 8009054:	5802546c 	.word	0x5802546c
 8009058:	58025480 	.word	0x58025480
 800905c:	58025494 	.word	0x58025494

08009060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a42      	ldr	r2, [pc, #264]	; (8009178 <DMA_CalcBaseAndBitshift+0x118>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d04a      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a41      	ldr	r2, [pc, #260]	; (800917c <DMA_CalcBaseAndBitshift+0x11c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d045      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a3f      	ldr	r2, [pc, #252]	; (8009180 <DMA_CalcBaseAndBitshift+0x120>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d040      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a3e      	ldr	r2, [pc, #248]	; (8009184 <DMA_CalcBaseAndBitshift+0x124>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d03b      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a3c      	ldr	r2, [pc, #240]	; (8009188 <DMA_CalcBaseAndBitshift+0x128>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d036      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a3b      	ldr	r2, [pc, #236]	; (800918c <DMA_CalcBaseAndBitshift+0x12c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d031      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a39      	ldr	r2, [pc, #228]	; (8009190 <DMA_CalcBaseAndBitshift+0x130>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d02c      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a38      	ldr	r2, [pc, #224]	; (8009194 <DMA_CalcBaseAndBitshift+0x134>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d027      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a36      	ldr	r2, [pc, #216]	; (8009198 <DMA_CalcBaseAndBitshift+0x138>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d022      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a35      	ldr	r2, [pc, #212]	; (800919c <DMA_CalcBaseAndBitshift+0x13c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d01d      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a33      	ldr	r2, [pc, #204]	; (80091a0 <DMA_CalcBaseAndBitshift+0x140>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d018      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a32      	ldr	r2, [pc, #200]	; (80091a4 <DMA_CalcBaseAndBitshift+0x144>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d013      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a30      	ldr	r2, [pc, #192]	; (80091a8 <DMA_CalcBaseAndBitshift+0x148>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00e      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a2f      	ldr	r2, [pc, #188]	; (80091ac <DMA_CalcBaseAndBitshift+0x14c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d009      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a2d      	ldr	r2, [pc, #180]	; (80091b0 <DMA_CalcBaseAndBitshift+0x150>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <DMA_CalcBaseAndBitshift+0xa8>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a2c      	ldr	r2, [pc, #176]	; (80091b4 <DMA_CalcBaseAndBitshift+0x154>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d101      	bne.n	800910c <DMA_CalcBaseAndBitshift+0xac>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <DMA_CalcBaseAndBitshift+0xae>
 800910c:	2300      	movs	r3, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d024      	beq.n	800915c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	3b10      	subs	r3, #16
 800911a:	4a27      	ldr	r2, [pc, #156]	; (80091b8 <DMA_CalcBaseAndBitshift+0x158>)
 800911c:	fba2 2303 	umull	r2, r3, r2, r3
 8009120:	091b      	lsrs	r3, r3, #4
 8009122:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	4a24      	ldr	r2, [pc, #144]	; (80091bc <DMA_CalcBaseAndBitshift+0x15c>)
 800912c:	5cd3      	ldrb	r3, [r2, r3]
 800912e:	461a      	mov	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b03      	cmp	r3, #3
 8009138:	d908      	bls.n	800914c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <DMA_CalcBaseAndBitshift+0x160>)
 8009142:	4013      	ands	r3, r2
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	659a      	str	r2, [r3, #88]	; 0x58
 800914a:	e00d      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <DMA_CalcBaseAndBitshift+0x160>)
 8009154:	4013      	ands	r3, r2
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6593      	str	r3, [r2, #88]	; 0x58
 800915a:	e005      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40020010 	.word	0x40020010
 800917c:	40020028 	.word	0x40020028
 8009180:	40020040 	.word	0x40020040
 8009184:	40020058 	.word	0x40020058
 8009188:	40020070 	.word	0x40020070
 800918c:	40020088 	.word	0x40020088
 8009190:	400200a0 	.word	0x400200a0
 8009194:	400200b8 	.word	0x400200b8
 8009198:	40020410 	.word	0x40020410
 800919c:	40020428 	.word	0x40020428
 80091a0:	40020440 	.word	0x40020440
 80091a4:	40020458 	.word	0x40020458
 80091a8:	40020470 	.word	0x40020470
 80091ac:	40020488 	.word	0x40020488
 80091b0:	400204a0 	.word	0x400204a0
 80091b4:	400204b8 	.word	0x400204b8
 80091b8:	aaaaaaab 	.word	0xaaaaaaab
 80091bc:	080181ac 	.word	0x080181ac
 80091c0:	fffffc00 	.word	0xfffffc00

080091c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d120      	bne.n	800921a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d858      	bhi.n	8009292 <DMA_CheckFifoParam+0xce>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <DMA_CheckFifoParam+0x24>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	080091f9 	.word	0x080091f9
 80091ec:	0800920b 	.word	0x0800920b
 80091f0:	080091f9 	.word	0x080091f9
 80091f4:	08009293 	.word	0x08009293
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d048      	beq.n	8009296 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009208:	e045      	b.n	8009296 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009212:	d142      	bne.n	800929a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009218:	e03f      	b.n	800929a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009222:	d123      	bne.n	800926c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	2b03      	cmp	r3, #3
 800922a:	d838      	bhi.n	800929e <DMA_CheckFifoParam+0xda>
 800922c:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <DMA_CheckFifoParam+0x70>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	08009245 	.word	0x08009245
 8009238:	0800924b 	.word	0x0800924b
 800923c:	08009245 	.word	0x08009245
 8009240:	0800925d 	.word	0x0800925d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
        break;
 8009248:	e030      	b.n	80092ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d025      	beq.n	80092a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800925a:	e022      	b.n	80092a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009264:	d11f      	bne.n	80092a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800926a:	e01c      	b.n	80092a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	2b02      	cmp	r3, #2
 8009272:	d902      	bls.n	800927a <DMA_CheckFifoParam+0xb6>
 8009274:	2b03      	cmp	r3, #3
 8009276:	d003      	beq.n	8009280 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009278:	e018      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	73fb      	strb	r3, [r7, #15]
        break;
 800927e:	e015      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00e      	beq.n	80092aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	e00b      	b.n	80092aa <DMA_CheckFifoParam+0xe6>
        break;
 8009292:	bf00      	nop
 8009294:	e00a      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        break;
 8009296:	bf00      	nop
 8009298:	e008      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        break;
 800929a:	bf00      	nop
 800929c:	e006      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        break;
 800929e:	bf00      	nop
 80092a0:	e004      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        break;
 80092a2:	bf00      	nop
 80092a4:	e002      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
        break;
 80092a6:	bf00      	nop
 80092a8:	e000      	b.n	80092ac <DMA_CheckFifoParam+0xe8>
    break;
 80092aa:	bf00      	nop
    }
  }

  return status;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop

080092bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a38      	ldr	r2, [pc, #224]	; (80093b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d022      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a36      	ldr	r2, [pc, #216]	; (80093b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d01d      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a35      	ldr	r2, [pc, #212]	; (80093b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d018      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a33      	ldr	r2, [pc, #204]	; (80093bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d013      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a32      	ldr	r2, [pc, #200]	; (80093c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00e      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a30      	ldr	r2, [pc, #192]	; (80093c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d009      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a2f      	ldr	r2, [pc, #188]	; (80093c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d004      	beq.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a2d      	ldr	r2, [pc, #180]	; (80093cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d101      	bne.n	800931e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01a      	beq.n	800935a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	3b08      	subs	r3, #8
 800932c:	4a28      	ldr	r2, [pc, #160]	; (80093d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	091b      	lsrs	r3, r3, #4
 8009334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4b26      	ldr	r3, [pc, #152]	; (80093d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a24      	ldr	r2, [pc, #144]	; (80093d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009348:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 031f 	and.w	r3, r3, #31
 8009350:	2201      	movs	r2, #1
 8009352:	409a      	lsls	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009358:	e024      	b.n	80093a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	3b10      	subs	r3, #16
 8009362:	4a1e      	ldr	r2, [pc, #120]	; (80093dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009364:	fba2 2303 	umull	r2, r3, r2, r3
 8009368:	091b      	lsrs	r3, r3, #4
 800936a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4a1c      	ldr	r2, [pc, #112]	; (80093e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d806      	bhi.n	8009382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d902      	bls.n	8009382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3308      	adds	r3, #8
 8009380:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4b18      	ldr	r3, [pc, #96]	; (80093e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a16      	ldr	r2, [pc, #88]	; (80093ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009394:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 031f 	and.w	r3, r3, #31
 800939c:	2201      	movs	r2, #1
 800939e:	409a      	lsls	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	58025408 	.word	0x58025408
 80093b4:	5802541c 	.word	0x5802541c
 80093b8:	58025430 	.word	0x58025430
 80093bc:	58025444 	.word	0x58025444
 80093c0:	58025458 	.word	0x58025458
 80093c4:	5802546c 	.word	0x5802546c
 80093c8:	58025480 	.word	0x58025480
 80093cc:	58025494 	.word	0x58025494
 80093d0:	cccccccd 	.word	0xcccccccd
 80093d4:	16009600 	.word	0x16009600
 80093d8:	58025880 	.word	0x58025880
 80093dc:	aaaaaaab 	.word	0xaaaaaaab
 80093e0:	400204b8 	.word	0x400204b8
 80093e4:	4002040f 	.word	0x4002040f
 80093e8:	10008200 	.word	0x10008200
 80093ec:	40020880 	.word	0x40020880

080093f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d04a      	beq.n	800949c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d847      	bhi.n	800949c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a25      	ldr	r2, [pc, #148]	; (80094a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d022      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a24      	ldr	r2, [pc, #144]	; (80094ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d01d      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1f      	ldr	r2, [pc, #124]	; (80094b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00e      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1e      	ldr	r2, [pc, #120]	; (80094bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1c      	ldr	r2, [pc, #112]	; (80094c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d101      	bne.n	8009460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800945c:	2301      	movs	r3, #1
 800945e:	e000      	b.n	8009462 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009460:	2300      	movs	r3, #0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	461a      	mov	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a15      	ldr	r2, [pc, #84]	; (80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009478:	671a      	str	r2, [r3, #112]	; 0x70
 800947a:	e009      	b.n	8009490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	461a      	mov	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a11      	ldr	r2, [pc, #68]	; (80094d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800948e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3b01      	subs	r3, #1
 8009494:	2201      	movs	r2, #1
 8009496:	409a      	lsls	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800949c:	bf00      	nop
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	58025408 	.word	0x58025408
 80094ac:	5802541c 	.word	0x5802541c
 80094b0:	58025430 	.word	0x58025430
 80094b4:	58025444 	.word	0x58025444
 80094b8:	58025458 	.word	0x58025458
 80094bc:	5802546c 	.word	0x5802546c
 80094c0:	58025480 	.word	0x58025480
 80094c4:	58025494 	.word	0x58025494
 80094c8:	1600963f 	.word	0x1600963f
 80094cc:	58025940 	.word	0x58025940
 80094d0:	1000823f 	.word	0x1000823f
 80094d4:	40020940 	.word	0x40020940

080094d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094d8:	b480      	push	{r7}
 80094da:	b089      	sub	sp, #36	; 0x24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80094e6:	4b89      	ldr	r3, [pc, #548]	; (800970c <HAL_GPIO_Init+0x234>)
 80094e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80094ea:	e194      	b.n	8009816 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	2101      	movs	r1, #1
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	4013      	ands	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 8186 	beq.w	8009810 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	2b01      	cmp	r3, #1
 800950e:	d005      	beq.n	800951c <HAL_GPIO_Init+0x44>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d130      	bne.n	800957e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	2203      	movs	r2, #3
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	43db      	mvns	r3, r3
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	4013      	ands	r3, r2
 8009532:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	fa02 f303 	lsl.w	r3, r2, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4313      	orrs	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009552:	2201      	movs	r2, #1
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	fa02 f303 	lsl.w	r3, r2, r3
 800955a:	43db      	mvns	r3, r3
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	4013      	ands	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	091b      	lsrs	r3, r3, #4
 8009568:	f003 0201 	and.w	r2, r3, #1
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	4313      	orrs	r3, r2
 8009576:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d017      	beq.n	80095ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	2203      	movs	r2, #3
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	43db      	mvns	r3, r3
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4013      	ands	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d123      	bne.n	800960e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	08da      	lsrs	r2, r3, #3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3208      	adds	r2, #8
 80095ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	220f      	movs	r2, #15
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43db      	mvns	r3, r3
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4013      	ands	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	fa02 f303 	lsl.w	r3, r2, r3
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	08da      	lsrs	r2, r3, #3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3208      	adds	r2, #8
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	2203      	movs	r2, #3
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	43db      	mvns	r3, r3
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	4013      	ands	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f003 0203 	and.w	r2, r3, #3
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	4313      	orrs	r3, r2
 800963a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80e0 	beq.w	8009810 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <HAL_GPIO_Init+0x238>)
 8009652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009656:	4a2e      	ldr	r2, [pc, #184]	; (8009710 <HAL_GPIO_Init+0x238>)
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009660:	4b2b      	ldr	r3, [pc, #172]	; (8009710 <HAL_GPIO_Init+0x238>)
 8009662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800966e:	4a29      	ldr	r2, [pc, #164]	; (8009714 <HAL_GPIO_Init+0x23c>)
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	089b      	lsrs	r3, r3, #2
 8009674:	3302      	adds	r3, #2
 8009676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	220f      	movs	r2, #15
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	4013      	ands	r3, r2
 8009690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a20      	ldr	r2, [pc, #128]	; (8009718 <HAL_GPIO_Init+0x240>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d052      	beq.n	8009740 <HAL_GPIO_Init+0x268>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1f      	ldr	r2, [pc, #124]	; (800971c <HAL_GPIO_Init+0x244>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d031      	beq.n	8009706 <HAL_GPIO_Init+0x22e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <HAL_GPIO_Init+0x248>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d02b      	beq.n	8009702 <HAL_GPIO_Init+0x22a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <HAL_GPIO_Init+0x24c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d025      	beq.n	80096fe <HAL_GPIO_Init+0x226>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a1c      	ldr	r2, [pc, #112]	; (8009728 <HAL_GPIO_Init+0x250>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01f      	beq.n	80096fa <HAL_GPIO_Init+0x222>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a1b      	ldr	r2, [pc, #108]	; (800972c <HAL_GPIO_Init+0x254>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d019      	beq.n	80096f6 <HAL_GPIO_Init+0x21e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a1a      	ldr	r2, [pc, #104]	; (8009730 <HAL_GPIO_Init+0x258>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <HAL_GPIO_Init+0x21a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a19      	ldr	r2, [pc, #100]	; (8009734 <HAL_GPIO_Init+0x25c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00d      	beq.n	80096ee <HAL_GPIO_Init+0x216>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a18      	ldr	r2, [pc, #96]	; (8009738 <HAL_GPIO_Init+0x260>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d007      	beq.n	80096ea <HAL_GPIO_Init+0x212>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a17      	ldr	r2, [pc, #92]	; (800973c <HAL_GPIO_Init+0x264>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d101      	bne.n	80096e6 <HAL_GPIO_Init+0x20e>
 80096e2:	2309      	movs	r3, #9
 80096e4:	e02d      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096e6:	230a      	movs	r3, #10
 80096e8:	e02b      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096ea:	2308      	movs	r3, #8
 80096ec:	e029      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096ee:	2307      	movs	r3, #7
 80096f0:	e027      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096f2:	2306      	movs	r3, #6
 80096f4:	e025      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096f6:	2305      	movs	r3, #5
 80096f8:	e023      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096fa:	2304      	movs	r3, #4
 80096fc:	e021      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 80096fe:	2303      	movs	r3, #3
 8009700:	e01f      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 8009702:	2302      	movs	r3, #2
 8009704:	e01d      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 8009706:	2301      	movs	r3, #1
 8009708:	e01b      	b.n	8009742 <HAL_GPIO_Init+0x26a>
 800970a:	bf00      	nop
 800970c:	58000080 	.word	0x58000080
 8009710:	58024400 	.word	0x58024400
 8009714:	58000400 	.word	0x58000400
 8009718:	58020000 	.word	0x58020000
 800971c:	58020400 	.word	0x58020400
 8009720:	58020800 	.word	0x58020800
 8009724:	58020c00 	.word	0x58020c00
 8009728:	58021000 	.word	0x58021000
 800972c:	58021400 	.word	0x58021400
 8009730:	58021800 	.word	0x58021800
 8009734:	58021c00 	.word	0x58021c00
 8009738:	58022000 	.word	0x58022000
 800973c:	58022400 	.word	0x58022400
 8009740:	2300      	movs	r3, #0
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	f002 0203 	and.w	r2, r2, #3
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	4093      	lsls	r3, r2
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009752:	4938      	ldr	r1, [pc, #224]	; (8009834 <HAL_GPIO_Init+0x35c>)
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	089b      	lsrs	r3, r3, #2
 8009758:	3302      	adds	r3, #2
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	43db      	mvns	r3, r3
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	4013      	ands	r3, r2
 8009770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800978e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	43db      	mvns	r3, r3
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	4013      	ands	r3, r2
 800979e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80097b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	43db      	mvns	r3, r3
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	4013      	ands	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	43db      	mvns	r3, r3
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4013      	ands	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	3301      	adds	r3, #1
 8009814:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	fa22 f303 	lsr.w	r3, r2, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f ae63 	bne.w	80094ec <HAL_GPIO_Init+0x14>
  }
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	3724      	adds	r7, #36	; 0x24
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	58000400 	.word	0x58000400

08009838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	887b      	ldrh	r3, [r7, #2]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]
 8009854:	e001      	b.n	800985a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
 8009874:	4613      	mov	r3, r2
 8009876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009878:	787b      	ldrb	r3, [r7, #1]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800987e:	887a      	ldrh	r2, [r7, #2]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009884:	e003      	b.n	800988e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009886:	887b      	ldrh	r3, [r7, #2]
 8009888:	041a      	lsls	r2, r3, #16
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	619a      	str	r2, [r3, #24]
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800989a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989c:	b08f      	sub	sp, #60	; 0x3c
 800989e:	af0a      	add	r7, sp, #40	; 0x28
 80098a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e054      	b.n	8009956 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fb fa76 	bl	8004db8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2203      	movs	r2, #3
 80098d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f00b faf3 	bl	8014ed6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	603b      	str	r3, [r7, #0]
 80098f6:	687e      	ldr	r6, [r7, #4]
 80098f8:	466d      	mov	r5, sp
 80098fa:	f106 0410 	add.w	r4, r6, #16
 80098fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800990a:	e885 0003 	stmia.w	r5, {r0, r1}
 800990e:	1d33      	adds	r3, r6, #4
 8009910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009912:	6838      	ldr	r0, [r7, #0]
 8009914:	f00b fa60 	bl	8014dd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2101      	movs	r1, #1
 800991e:	4618      	mov	r0, r3
 8009920:	f00b faea 	bl	8014ef8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	687e      	ldr	r6, [r7, #4]
 800992c:	466d      	mov	r5, sp
 800992e:	f106 0410 	add.w	r4, r6, #16
 8009932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800993a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800993e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009942:	1d33      	adds	r3, r6, #4
 8009944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f00b fc92 	bl	8015270 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800995e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800995e:	b590      	push	{r4, r7, lr}
 8009960:	b089      	sub	sp, #36	; 0x24
 8009962:	af04      	add	r7, sp, #16
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	461a      	mov	r2, r3
 800996c:	4603      	mov	r3, r0
 800996e:	70fb      	strb	r3, [r7, #3]
 8009970:	460b      	mov	r3, r1
 8009972:	70bb      	strb	r3, [r7, #2]
 8009974:	4613      	mov	r3, r2
 8009976:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <HAL_HCD_HC_Init+0x28>
 8009982:	2302      	movs	r3, #2
 8009984:	e076      	b.n	8009a74 <HAL_HCD_HC_Init+0x116>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	212c      	movs	r1, #44	; 0x2c
 8009994:	fb01 f303 	mul.w	r3, r1, r3
 8009998:	4413      	add	r3, r2
 800999a:	333d      	adds	r3, #61	; 0x3d
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	212c      	movs	r1, #44	; 0x2c
 80099a6:	fb01 f303 	mul.w	r3, r1, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	3338      	adds	r3, #56	; 0x38
 80099ae:	787a      	ldrb	r2, [r7, #1]
 80099b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	212c      	movs	r1, #44	; 0x2c
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	4413      	add	r3, r2
 80099be:	3340      	adds	r3, #64	; 0x40
 80099c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80099c2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	212c      	movs	r1, #44	; 0x2c
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	4413      	add	r3, r2
 80099d0:	3339      	adds	r3, #57	; 0x39
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	212c      	movs	r1, #44	; 0x2c
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	4413      	add	r3, r2
 80099e2:	333f      	adds	r3, #63	; 0x3f
 80099e4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80099e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	78ba      	ldrb	r2, [r7, #2]
 80099ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099f2:	b2d0      	uxtb	r0, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	212c      	movs	r1, #44	; 0x2c
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	4413      	add	r3, r2
 80099fe:	333a      	adds	r3, #58	; 0x3a
 8009a00:	4602      	mov	r2, r0
 8009a02:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	da09      	bge.n	8009a20 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	212c      	movs	r1, #44	; 0x2c
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	333b      	adds	r3, #59	; 0x3b
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	e008      	b.n	8009a32 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	212c      	movs	r1, #44	; 0x2c
 8009a26:	fb01 f303 	mul.w	r3, r1, r3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	333b      	adds	r3, #59	; 0x3b
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009a32:	78fb      	ldrb	r3, [r7, #3]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	212c      	movs	r1, #44	; 0x2c
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	333c      	adds	r3, #60	; 0x3c
 8009a40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009a44:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	787c      	ldrb	r4, [r7, #1]
 8009a4c:	78ba      	ldrb	r2, [r7, #2]
 8009a4e:	78f9      	ldrb	r1, [r7, #3]
 8009a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a52:	9302      	str	r3, [sp, #8]
 8009a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	4623      	mov	r3, r4
 8009a62:	f00b fd87 	bl	8015574 <USB_HC_Init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd90      	pop	{r4, r7, pc}

08009a7c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_HCD_HC_Halt+0x1e>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e00f      	b.n	8009aba <HAL_HCD_HC_Halt+0x3e>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f00b ffd9 	bl	8015a62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	70fb      	strb	r3, [r7, #3]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70bb      	strb	r3, [r7, #2]
 8009ada:	4613      	mov	r3, r2
 8009adc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	212c      	movs	r1, #44	; 0x2c
 8009ae4:	fb01 f303 	mul.w	r3, r1, r3
 8009ae8:	4413      	add	r3, r2
 8009aea:	333b      	adds	r3, #59	; 0x3b
 8009aec:	78ba      	ldrb	r2, [r7, #2]
 8009aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	212c      	movs	r1, #44	; 0x2c
 8009af6:	fb01 f303 	mul.w	r3, r1, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	333f      	adds	r3, #63	; 0x3f
 8009afe:	787a      	ldrb	r2, [r7, #1]
 8009b00:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009b02:	7c3b      	ldrb	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d112      	bne.n	8009b2e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	212c      	movs	r1, #44	; 0x2c
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	4413      	add	r3, r2
 8009b14:	3342      	adds	r3, #66	; 0x42
 8009b16:	2203      	movs	r2, #3
 8009b18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	212c      	movs	r1, #44	; 0x2c
 8009b20:	fb01 f303 	mul.w	r3, r1, r3
 8009b24:	4413      	add	r3, r2
 8009b26:	333d      	adds	r3, #61	; 0x3d
 8009b28:	7f3a      	ldrb	r2, [r7, #28]
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	e008      	b.n	8009b40 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	212c      	movs	r1, #44	; 0x2c
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	4413      	add	r3, r2
 8009b3a:	3342      	adds	r3, #66	; 0x42
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009b40:	787b      	ldrb	r3, [r7, #1]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	f200 80c6 	bhi.w	8009cd4 <HAL_HCD_HC_SubmitRequest+0x210>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009cc1 	.word	0x08009cc1
 8009b58:	08009bc5 	.word	0x08009bc5
 8009b5c:	08009c43 	.word	0x08009c43
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009b60:	7c3b      	ldrb	r3, [r7, #16]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	f040 80b8 	bne.w	8009cd8 <HAL_HCD_HC_SubmitRequest+0x214>
 8009b68:	78bb      	ldrb	r3, [r7, #2]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 80b4 	bne.w	8009cd8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009b70:	8b3b      	ldrh	r3, [r7, #24]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d108      	bne.n	8009b88 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	212c      	movs	r1, #44	; 0x2c
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	4413      	add	r3, r2
 8009b82:	3355      	adds	r3, #85	; 0x55
 8009b84:	2201      	movs	r2, #1
 8009b86:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	212c      	movs	r1, #44	; 0x2c
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	3355      	adds	r3, #85	; 0x55
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	212c      	movs	r1, #44	; 0x2c
 8009ba2:	fb01 f303 	mul.w	r3, r1, r3
 8009ba6:	4413      	add	r3, r2
 8009ba8:	3342      	adds	r3, #66	; 0x42
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009bae:	e093      	b.n	8009cd8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	212c      	movs	r1, #44	; 0x2c
 8009bb6:	fb01 f303 	mul.w	r3, r1, r3
 8009bba:	4413      	add	r3, r2
 8009bbc:	3342      	adds	r3, #66	; 0x42
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	701a      	strb	r2, [r3, #0]
      break;
 8009bc2:	e089      	b.n	8009cd8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009bc4:	78bb      	ldrb	r3, [r7, #2]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d11d      	bne.n	8009c06 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	212c      	movs	r1, #44	; 0x2c
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3355      	adds	r3, #85	; 0x55
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d109      	bne.n	8009bf2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	212c      	movs	r1, #44	; 0x2c
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	3342      	adds	r3, #66	; 0x42
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009bf0:	e073      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009bf2:	78fb      	ldrb	r3, [r7, #3]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	212c      	movs	r1, #44	; 0x2c
 8009bf8:	fb01 f303 	mul.w	r3, r1, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	3342      	adds	r3, #66	; 0x42
 8009c00:	2202      	movs	r2, #2
 8009c02:	701a      	strb	r2, [r3, #0]
      break;
 8009c04:	e069      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	212c      	movs	r1, #44	; 0x2c
 8009c0c:	fb01 f303 	mul.w	r3, r1, r3
 8009c10:	4413      	add	r3, r2
 8009c12:	3354      	adds	r3, #84	; 0x54
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	212c      	movs	r1, #44	; 0x2c
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	4413      	add	r3, r2
 8009c26:	3342      	adds	r3, #66	; 0x42
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
      break;
 8009c2c:	e055      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	212c      	movs	r1, #44	; 0x2c
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	3342      	adds	r3, #66	; 0x42
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	701a      	strb	r2, [r3, #0]
      break;
 8009c40:	e04b      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009c42:	78bb      	ldrb	r3, [r7, #2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d11d      	bne.n	8009c84 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	212c      	movs	r1, #44	; 0x2c
 8009c4e:	fb01 f303 	mul.w	r3, r1, r3
 8009c52:	4413      	add	r3, r2
 8009c54:	3355      	adds	r3, #85	; 0x55
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d109      	bne.n	8009c70 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	212c      	movs	r1, #44	; 0x2c
 8009c62:	fb01 f303 	mul.w	r3, r1, r3
 8009c66:	4413      	add	r3, r2
 8009c68:	3342      	adds	r3, #66	; 0x42
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009c6e:	e034      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	212c      	movs	r1, #44	; 0x2c
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3342      	adds	r3, #66	; 0x42
 8009c7e:	2202      	movs	r2, #2
 8009c80:	701a      	strb	r2, [r3, #0]
      break;
 8009c82:	e02a      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	212c      	movs	r1, #44	; 0x2c
 8009c8a:	fb01 f303 	mul.w	r3, r1, r3
 8009c8e:	4413      	add	r3, r2
 8009c90:	3354      	adds	r3, #84	; 0x54
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	212c      	movs	r1, #44	; 0x2c
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3342      	adds	r3, #66	; 0x42
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
      break;
 8009caa:	e016      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	212c      	movs	r1, #44	; 0x2c
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3342      	adds	r3, #66	; 0x42
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
      break;
 8009cbe:	e00c      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	212c      	movs	r1, #44	; 0x2c
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	3342      	adds	r3, #66	; 0x42
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
      break;
 8009cd2:	e002      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009cd8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009cda:	78fb      	ldrb	r3, [r7, #3]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	212c      	movs	r1, #44	; 0x2c
 8009ce0:	fb01 f303 	mul.w	r3, r1, r3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3344      	adds	r3, #68	; 0x44
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	8b3a      	ldrh	r2, [r7, #24]
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	202c      	movs	r0, #44	; 0x2c
 8009cf4:	fb00 f303 	mul.w	r3, r0, r3
 8009cf8:	440b      	add	r3, r1
 8009cfa:	334c      	adds	r3, #76	; 0x4c
 8009cfc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	212c      	movs	r1, #44	; 0x2c
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	3360      	adds	r3, #96	; 0x60
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	212c      	movs	r1, #44	; 0x2c
 8009d16:	fb01 f303 	mul.w	r3, r1, r3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3350      	adds	r3, #80	; 0x50
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	212c      	movs	r1, #44	; 0x2c
 8009d28:	fb01 f303 	mul.w	r3, r1, r3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	3339      	adds	r3, #57	; 0x39
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	212c      	movs	r1, #44	; 0x2c
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	4413      	add	r3, r2
 8009d40:	3361      	adds	r3, #97	; 0x61
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	222c      	movs	r2, #44	; 0x2c
 8009d4e:	fb02 f303 	mul.w	r3, r2, r3
 8009d52:	3338      	adds	r3, #56	; 0x38
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	18d1      	adds	r1, r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f00b fd2c 	bl	80157bc <USB_HC_StartXfer>
 8009d64:	4603      	mov	r3, r0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop

08009d70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f00b fa30 	bl	80151ec <USB_GetMode>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	f040 80fa 	bne.w	8009f88 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f00b f9f3 	bl	8015184 <USB_ReadInterrupts>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 80f0 	beq.w	8009f86 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f00b f9ea 	bl	8015184 <USB_ReadInterrupts>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dba:	d104      	bne.n	8009dc6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009dc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f00b f9da 	bl	8015184 <USB_ReadInterrupts>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dda:	d104      	bne.n	8009de6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009de4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00b f9ca 	bl	8015184 <USB_ReadInterrupts>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009df6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dfa:	d104      	bne.n	8009e06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009e04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f00b f9ba 	bl	8015184 <USB_ReadInterrupts>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d103      	bne.n	8009e22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f00b f9ac 	bl	8015184 <USB_ReadInterrupts>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e36:	d120      	bne.n	8009e7a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009e40:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d113      	bne.n	8009e7a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009e52:	2110      	movs	r1, #16
 8009e54:	6938      	ldr	r0, [r7, #16]
 8009e56:	f00b f89b 	bl	8014f90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f00b f8cc 	bl	8014ff8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d105      	bne.n	8009e74 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f00b fab8 	bl	80153e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7fb f81d 	bl	8004eb4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f00b f980 	bl	8015184 <USB_ReadInterrupts>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e8e:	d102      	bne.n	8009e96 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f9a3 	bl	800b1dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f00b f972 	bl	8015184 <USB_ReadInterrupts>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d106      	bne.n	8009eb8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7fa ffe6 	bl	8004e7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2208      	movs	r2, #8
 8009eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f00b f961 	bl	8015184 <USB_ReadInterrupts>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d101      	bne.n	8009ed0 <HAL_HCD_IRQHandler+0x160>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e000      	b.n	8009ed2 <HAL_HCD_IRQHandler+0x162>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d012      	beq.n	8009efc <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0210 	bic.w	r2, r2, #16
 8009ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 f8a6 	bl	800b038 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0210 	orr.w	r2, r2, #16
 8009efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f00b f93f 	bl	8015184 <USB_ReadInterrupts>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f10:	d13a      	bne.n	8009f88 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f00b fd92 	bl	8015a40 <USB_HC_ReadInterrupt>
 8009f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e025      	b.n	8009f70 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d018      	beq.n	8009f6a <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f4e:	d106      	bne.n	8009f5e <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f8ab 	bl	800a0b2 <HCD_HC_IN_IRQHandler>
 8009f5c:	e005      	b.n	8009f6a <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fcb5 	bl	800a8d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d3d4      	bcc.n	8009f24 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f82:	615a      	str	r2, [r3, #20]
 8009f84:	e000      	b.n	8009f88 <HAL_HCD_IRQHandler+0x218>
      return;
 8009f86:	bf00      	nop
    }
  }
}
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_HCD_Start+0x16>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e013      	b.n	8009fcc <HAL_HCD_Start+0x3e>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f00b fa7d 	bl	80154b2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f00a ff79 	bl	8014eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_HCD_Stop+0x16>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e00d      	b.n	800a006 <HAL_HCD_Stop+0x32>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00b fe6c 	bl	8015cd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f00b fa1f 	bl	801545e <USB_ResetPort>
 800a020:	4603      	mov	r3, r0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	212c      	movs	r1, #44	; 0x2c
 800a03c:	fb01 f303 	mul.w	r3, r1, r3
 800a040:	4413      	add	r3, r2
 800a042:	3360      	adds	r3, #96	; 0x60
 800a044:	781b      	ldrb	r3, [r3, #0]
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	212c      	movs	r1, #44	; 0x2c
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	4413      	add	r3, r2
 800a06a:	3350      	adds	r3, #80	; 0x50
 800a06c:	681b      	ldr	r3, [r3, #0]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f00b fa63 	bl	8015552 <USB_GetCurrentFrame>
 800a08c:	4603      	mov	r3, r0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f00b fa3e 	bl	8015524 <USB_GetHostSpeed>
 800a0a8:	4603      	mov	r3, r0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f00b f86a 	bl	80151aa <USB_ReadChInterrupts>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d119      	bne.n	800a114 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	2304      	movs	r3, #4
 800a0f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	212c      	movs	r1, #44	; 0x2c
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3361      	adds	r3, #97	; 0x61
 800a100:	2207      	movs	r2, #7
 800a102:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	78fa      	ldrb	r2, [r7, #3]
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f00b fca8 	bl	8015a62 <USB_HC_Halt>
 800a112:	e09a      	b.n	800a24a <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	78fa      	ldrb	r2, [r7, #3]
 800a11a:	4611      	mov	r1, r2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f00b f844 	bl	80151aa <USB_ReadChInterrupts>
 800a122:	4603      	mov	r3, r0
 800a124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12c:	d11a      	bne.n	800a164 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	4413      	add	r3, r2
 800a136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13a:	461a      	mov	r2, r3
 800a13c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a140:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	212c      	movs	r1, #44	; 0x2c
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	4413      	add	r3, r2
 800a14e:	3361      	adds	r3, #97	; 0x61
 800a150:	2208      	movs	r2, #8
 800a152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	78fa      	ldrb	r2, [r7, #3]
 800a15a:	4611      	mov	r1, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f00b fc80 	bl	8015a62 <USB_HC_Halt>
 800a162:	e072      	b.n	800a24a <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	78fa      	ldrb	r2, [r7, #3]
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f00b f81c 	bl	80151aa <USB_ReadChInterrupts>
 800a172:	4603      	mov	r3, r0
 800a174:	f003 0308 	and.w	r3, r3, #8
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d119      	bne.n	800a1b0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	461a      	mov	r2, r3
 800a18a:	2308      	movs	r3, #8
 800a18c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	212c      	movs	r1, #44	; 0x2c
 800a194:	fb01 f303 	mul.w	r3, r1, r3
 800a198:	4413      	add	r3, r2
 800a19a:	3361      	adds	r3, #97	; 0x61
 800a19c:	2206      	movs	r2, #6
 800a19e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f00b fc5a 	bl	8015a62 <USB_HC_Halt>
 800a1ae:	e04c      	b.n	800a24a <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f00a fff6 	bl	80151aa <USB_ReadChInterrupts>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c8:	d11a      	bne.n	800a200 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	015a      	lsls	r2, r3, #5
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	212c      	movs	r1, #44	; 0x2c
 800a1e4:	fb01 f303 	mul.w	r3, r1, r3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	3361      	adds	r3, #97	; 0x61
 800a1ec:	2209      	movs	r2, #9
 800a1ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f00b fc32 	bl	8015a62 <USB_HC_Halt>
 800a1fe:	e024      	b.n	800a24a <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f00a ffce 	bl	80151aa <USB_ReadChInterrupts>
 800a20e:	4603      	mov	r3, r0
 800a210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a214:	2b80      	cmp	r3, #128	; 0x80
 800a216:	d118      	bne.n	800a24a <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a224:	461a      	mov	r2, r3
 800a226:	2380      	movs	r3, #128	; 0x80
 800a228:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	212c      	movs	r1, #44	; 0x2c
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	4413      	add	r3, r2
 800a236:	3361      	adds	r3, #97	; 0x61
 800a238:	2207      	movs	r2, #7
 800a23a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f00b fc0c 	bl	8015a62 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	78fa      	ldrb	r2, [r7, #3]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f00a ffa9 	bl	80151aa <USB_ReadChInterrupts>
 800a258:	4603      	mov	r3, r0
 800a25a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a262:	d111      	bne.n	800a288 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f00b fbf8 	bl	8015a62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a27e:	461a      	mov	r2, r3
 800a280:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a284:	6093      	str	r3, [r2, #8]
 800a286:	e322      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	78fa      	ldrb	r2, [r7, #3]
 800a28e:	4611      	mov	r1, r2
 800a290:	4618      	mov	r0, r3
 800a292:	f00a ff8a 	bl	80151aa <USB_ReadChInterrupts>
 800a296:	4603      	mov	r3, r0
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	f040 80f0 	bne.w	800a482 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d019      	beq.n	800a2f0 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	212c      	movs	r1, #44	; 0x2c
 800a2c2:	fb01 f303 	mul.w	r3, r1, r3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3348      	adds	r3, #72	; 0x48
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	1a8a      	subs	r2, r1, r2
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	202c      	movs	r0, #44	; 0x2c
 800a2e6:	fb00 f303 	mul.w	r3, r0, r3
 800a2ea:	440b      	add	r3, r1
 800a2ec:	3350      	adds	r3, #80	; 0x50
 800a2ee:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	212c      	movs	r1, #44	; 0x2c
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3361      	adds	r3, #97	; 0x61
 800a2fe:	2201      	movs	r2, #1
 800a300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	212c      	movs	r1, #44	; 0x2c
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	335c      	adds	r3, #92	; 0x5c
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a320:	461a      	mov	r2, r3
 800a322:	2301      	movs	r3, #1
 800a324:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	212c      	movs	r1, #44	; 0x2c
 800a32c:	fb01 f303 	mul.w	r3, r1, r3
 800a330:	4413      	add	r3, r2
 800a332:	333f      	adds	r3, #63	; 0x3f
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	212c      	movs	r1, #44	; 0x2c
 800a340:	fb01 f303 	mul.w	r3, r1, r3
 800a344:	4413      	add	r3, r2
 800a346:	333f      	adds	r3, #63	; 0x3f
 800a348:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d110      	bne.n	800a370 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	4611      	mov	r1, r2
 800a356:	4618      	mov	r0, r3
 800a358:	f00b fb83 	bl	8015a62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	4413      	add	r3, r2
 800a364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a368:	461a      	mov	r2, r3
 800a36a:	2310      	movs	r3, #16
 800a36c:	6093      	str	r3, [r2, #8]
 800a36e:	e039      	b.n	800a3e4 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	212c      	movs	r1, #44	; 0x2c
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	333f      	adds	r3, #63	; 0x3f
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d009      	beq.n	800a398 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	212c      	movs	r1, #44	; 0x2c
 800a38a:	fb01 f303 	mul.w	r3, r1, r3
 800a38e:	4413      	add	r3, r2
 800a390:	333f      	adds	r3, #63	; 0x3f
 800a392:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a394:	2b01      	cmp	r3, #1
 800a396:	d125      	bne.n	800a3e4 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	0151      	lsls	r1, r2, #5
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	440a      	add	r2, r1
 800a3ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	212c      	movs	r1, #44	; 0x2c
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3360      	adds	r3, #96	; 0x60
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	212c      	movs	r1, #44	; 0x2c
 800a3d0:	fb01 f303 	mul.w	r3, r1, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3360      	adds	r3, #96	; 0x60
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7fa fd76 	bl	8004ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d135      	bne.n	800a458 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800a3ec:	78fb      	ldrb	r3, [r7, #3]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	212c      	movs	r1, #44	; 0x2c
 800a3f2:	fb01 f303 	mul.w	r3, r1, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	3350      	adds	r3, #80	; 0x50
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	78fa      	ldrb	r2, [r7, #3]
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	202c      	movs	r0, #44	; 0x2c
 800a402:	fb00 f202 	mul.w	r2, r0, r2
 800a406:	440a      	add	r2, r1
 800a408:	3240      	adds	r2, #64	; 0x40
 800a40a:	8812      	ldrh	r2, [r2, #0]
 800a40c:	4413      	add	r3, r2
 800a40e:	3b01      	subs	r3, #1
 800a410:	78fa      	ldrb	r2, [r7, #3]
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	202c      	movs	r0, #44	; 0x2c
 800a416:	fb00 f202 	mul.w	r2, r0, r2
 800a41a:	440a      	add	r2, r1
 800a41c:	3240      	adds	r2, #64	; 0x40
 800a41e:	8812      	ldrh	r2, [r2, #0]
 800a420:	fbb3 f3f2 	udiv	r3, r3, r2
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 8250 	beq.w	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	212c      	movs	r1, #44	; 0x2c
 800a434:	fb01 f303 	mul.w	r3, r1, r3
 800a438:	4413      	add	r3, r2
 800a43a:	3354      	adds	r3, #84	; 0x54
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	f082 0201 	eor.w	r2, r2, #1
 800a444:	b2d0      	uxtb	r0, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	212c      	movs	r1, #44	; 0x2c
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	4413      	add	r3, r2
 800a450:	3354      	adds	r3, #84	; 0x54
 800a452:	4602      	mov	r2, r0
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e23a      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	212c      	movs	r1, #44	; 0x2c
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	3354      	adds	r3, #84	; 0x54
 800a466:	781a      	ldrb	r2, [r3, #0]
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	f082 0201 	eor.w	r2, r2, #1
 800a46e:	b2d0      	uxtb	r0, r2
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	212c      	movs	r1, #44	; 0x2c
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	4413      	add	r3, r2
 800a47a:	3354      	adds	r3, #84	; 0x54
 800a47c:	4602      	mov	r2, r0
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	e225      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f00a fe8d 	bl	80151aa <USB_ReadChInterrupts>
 800a490:	4603      	mov	r3, r0
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b20      	cmp	r3, #32
 800a498:	d109      	bne.n	800a4ae <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	6093      	str	r3, [r2, #8]
 800a4ac:	e20f      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	78fa      	ldrb	r2, [r7, #3]
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f00a fe77 	bl	80151aa <USB_ReadChInterrupts>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	f040 8168 	bne.w	800a798 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	212c      	movs	r1, #44	; 0x2c
 800a4e0:	fb01 f303 	mul.w	r3, r1, r3
 800a4e4:	4413      	add	r3, r2
 800a4e6:	3361      	adds	r3, #97	; 0x61
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d112      	bne.n	800a514 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	212c      	movs	r1, #44	; 0x2c
 800a4f4:	fb01 f303 	mul.w	r3, r1, r3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	3361      	adds	r3, #97	; 0x61
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	212c      	movs	r1, #44	; 0x2c
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	3360      	adds	r3, #96	; 0x60
 800a50e:	2201      	movs	r2, #1
 800a510:	701a      	strb	r2, [r3, #0]
 800a512:	e133      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	212c      	movs	r1, #44	; 0x2c
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	3361      	adds	r3, #97	; 0x61
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b06      	cmp	r3, #6
 800a526:	d112      	bne.n	800a54e <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3361      	adds	r3, #97	; 0x61
 800a536:	2202      	movs	r2, #2
 800a538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	212c      	movs	r1, #44	; 0x2c
 800a540:	fb01 f303 	mul.w	r3, r1, r3
 800a544:	4413      	add	r3, r2
 800a546:	3360      	adds	r3, #96	; 0x60
 800a548:	2205      	movs	r2, #5
 800a54a:	701a      	strb	r2, [r3, #0]
 800a54c:	e116      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	212c      	movs	r1, #44	; 0x2c
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	4413      	add	r3, r2
 800a55a:	3361      	adds	r3, #97	; 0x61
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	2b07      	cmp	r3, #7
 800a560:	d009      	beq.n	800a576 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	212c      	movs	r1, #44	; 0x2c
 800a568:	fb01 f303 	mul.w	r3, r1, r3
 800a56c:	4413      	add	r3, r2
 800a56e:	3361      	adds	r3, #97	; 0x61
 800a570:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a572:	2b09      	cmp	r3, #9
 800a574:	d158      	bne.n	800a628 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	212c      	movs	r1, #44	; 0x2c
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	4413      	add	r3, r2
 800a582:	3361      	adds	r3, #97	; 0x61
 800a584:	2202      	movs	r2, #2
 800a586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	222c      	movs	r2, #44	; 0x2c
 800a58e:	fb03 f202 	mul.w	r2, r3, r2
 800a592:	440a      	add	r2, r1
 800a594:	325c      	adds	r2, #92	; 0x5c
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	3201      	adds	r2, #1
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	202c      	movs	r0, #44	; 0x2c
 800a59e:	fb00 f303 	mul.w	r3, r0, r3
 800a5a2:	440b      	add	r3, r1
 800a5a4:	335c      	adds	r3, #92	; 0x5c
 800a5a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	212c      	movs	r1, #44	; 0x2c
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	335c      	adds	r3, #92	; 0x5c
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d912      	bls.n	800a5e2 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	212c      	movs	r1, #44	; 0x2c
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	335c      	adds	r3, #92	; 0x5c
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	212c      	movs	r1, #44	; 0x2c
 800a5d4:	fb01 f303 	mul.w	r3, r1, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	3360      	adds	r3, #96	; 0x60
 800a5dc:	2204      	movs	r2, #4
 800a5de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a5e0:	e0cc      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	212c      	movs	r1, #44	; 0x2c
 800a5e8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3360      	adds	r3, #96	; 0x60
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a60a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a612:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a620:	461a      	mov	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a626:	e0a9      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	212c      	movs	r1, #44	; 0x2c
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	3361      	adds	r3, #97	; 0x61
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b05      	cmp	r3, #5
 800a63a:	d109      	bne.n	800a650 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	212c      	movs	r1, #44	; 0x2c
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	4413      	add	r3, r2
 800a648:	3361      	adds	r3, #97	; 0x61
 800a64a:	2202      	movs	r2, #2
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e095      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	212c      	movs	r1, #44	; 0x2c
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	4413      	add	r3, r2
 800a65c:	3361      	adds	r3, #97	; 0x61
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d109      	bne.n	800a678 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	212c      	movs	r1, #44	; 0x2c
 800a66a:	fb01 f303 	mul.w	r3, r1, r3
 800a66e:	4413      	add	r3, r2
 800a670:	3361      	adds	r3, #97	; 0x61
 800a672:	2202      	movs	r2, #2
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	e081      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	212c      	movs	r1, #44	; 0x2c
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	4413      	add	r3, r2
 800a684:	3361      	adds	r3, #97	; 0x61
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d13f      	bne.n	800a70c <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	212c      	movs	r1, #44	; 0x2c
 800a692:	fb01 f303 	mul.w	r3, r1, r3
 800a696:	4413      	add	r3, r2
 800a698:	3361      	adds	r3, #97	; 0x61
 800a69a:	2202      	movs	r2, #2
 800a69c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	212c      	movs	r1, #44	; 0x2c
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	4413      	add	r3, r2
 800a6aa:	3360      	adds	r3, #96	; 0x60
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	212c      	movs	r1, #44	; 0x2c
 800a6b6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	333f      	adds	r3, #63	; 0x3f
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	212c      	movs	r1, #44	; 0x2c
 800a6ca:	fb01 f303 	mul.w	r3, r1, r3
 800a6ce:	4413      	add	r3, r2
 800a6d0:	333f      	adds	r3, #63	; 0x3f
 800a6d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d151      	bne.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a704:	461a      	mov	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	e037      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	212c      	movs	r1, #44	; 0x2c
 800a712:	fb01 f303 	mul.w	r3, r1, r3
 800a716:	4413      	add	r3, r2
 800a718:	3361      	adds	r3, #97	; 0x61
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d122      	bne.n	800a766 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	212c      	movs	r1, #44	; 0x2c
 800a726:	fb01 f303 	mul.w	r3, r1, r3
 800a72a:	4413      	add	r3, r2
 800a72c:	3361      	adds	r3, #97	; 0x61
 800a72e:	2202      	movs	r2, #2
 800a730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	222c      	movs	r2, #44	; 0x2c
 800a738:	fb03 f202 	mul.w	r2, r3, r2
 800a73c:	440a      	add	r2, r1
 800a73e:	325c      	adds	r2, #92	; 0x5c
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	3201      	adds	r2, #1
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	202c      	movs	r0, #44	; 0x2c
 800a748:	fb00 f303 	mul.w	r3, r0, r3
 800a74c:	440b      	add	r3, r1
 800a74e:	335c      	adds	r3, #92	; 0x5c
 800a750:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	212c      	movs	r1, #44	; 0x2c
 800a758:	fb01 f303 	mul.w	r3, r1, r3
 800a75c:	4413      	add	r3, r2
 800a75e:	3360      	adds	r3, #96	; 0x60
 800a760:	2204      	movs	r2, #4
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	e00a      	b.n	800a77c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	212c      	movs	r1, #44	; 0x2c
 800a76c:	fb01 f303 	mul.w	r3, r1, r3
 800a770:	4413      	add	r3, r2
 800a772:	3361      	adds	r3, #97	; 0x61
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b02      	cmp	r3, #2
 800a778:	f000 80a8 	beq.w	800a8cc <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	212c      	movs	r1, #44	; 0x2c
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	4413      	add	r3, r2
 800a788:	3360      	adds	r3, #96	; 0x60
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7fa fb9d 	bl	8004ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a796:	e09a      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	78fa      	ldrb	r2, [r7, #3]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f00a fd02 	bl	80151aa <USB_ReadChInterrupts>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d122      	bne.n	800a7f6 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2340      	movs	r3, #64	; 0x40
 800a7c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	212c      	movs	r1, #44	; 0x2c
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3361      	adds	r3, #97	; 0x61
 800a7d0:	2205      	movs	r2, #5
 800a7d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	212c      	movs	r1, #44	; 0x2c
 800a7da:	fb01 f303 	mul.w	r3, r1, r3
 800a7de:	4413      	add	r3, r2
 800a7e0:	335c      	adds	r3, #92	; 0x5c
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	78fa      	ldrb	r2, [r7, #3]
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f00b f937 	bl	8015a62 <USB_HC_Halt>
 800a7f4:	e06b      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f00a fcd3 	bl	80151aa <USB_ReadChInterrupts>
 800a804:	4603      	mov	r3, r0
 800a806:	f003 0310 	and.w	r3, r3, #16
 800a80a:	2b10      	cmp	r3, #16
 800a80c:	d15f      	bne.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	212c      	movs	r1, #44	; 0x2c
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	4413      	add	r3, r2
 800a81a:	333f      	adds	r3, #63	; 0x3f
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d119      	bne.n	800a856 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	212c      	movs	r1, #44	; 0x2c
 800a828:	fb01 f303 	mul.w	r3, r1, r3
 800a82c:	4413      	add	r3, r2
 800a82e:	335c      	adds	r3, #92	; 0x5c
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	212c      	movs	r1, #44	; 0x2c
 800a83a:	fb01 f303 	mul.w	r3, r1, r3
 800a83e:	4413      	add	r3, r2
 800a840:	3361      	adds	r3, #97	; 0x61
 800a842:	2204      	movs	r2, #4
 800a844:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f00b f907 	bl	8015a62 <USB_HC_Halt>
 800a854:	e030      	b.n	800a8b8 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	212c      	movs	r1, #44	; 0x2c
 800a85c:	fb01 f303 	mul.w	r3, r1, r3
 800a860:	4413      	add	r3, r2
 800a862:	333f      	adds	r3, #63	; 0x3f
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	212c      	movs	r1, #44	; 0x2c
 800a870:	fb01 f303 	mul.w	r3, r1, r3
 800a874:	4413      	add	r3, r2
 800a876:	333f      	adds	r3, #63	; 0x3f
 800a878:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d11c      	bne.n	800a8b8 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	212c      	movs	r1, #44	; 0x2c
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	335c      	adds	r3, #92	; 0x5c
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10f      	bne.n	800a8b8 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	212c      	movs	r1, #44	; 0x2c
 800a89e:	fb01 f303 	mul.w	r3, r1, r3
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3361      	adds	r3, #97	; 0x61
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	78fa      	ldrb	r2, [r7, #3]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f00b f8d5 	bl	8015a62 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a8b8:	78fb      	ldrb	r3, [r7, #3]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	2310      	movs	r3, #16
 800a8c8:	6093      	str	r3, [r2, #8]
 800a8ca:	e000      	b.n	800a8ce <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a8cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	78fa      	ldrb	r2, [r7, #3]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f00a fc59 	bl	80151aa <USB_ReadChInterrupts>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d119      	bne.n	800a936 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a90e:	461a      	mov	r2, r3
 800a910:	2304      	movs	r3, #4
 800a912:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	212c      	movs	r1, #44	; 0x2c
 800a91a:	fb01 f303 	mul.w	r3, r1, r3
 800a91e:	4413      	add	r3, r2
 800a920:	3361      	adds	r3, #97	; 0x61
 800a922:	2207      	movs	r2, #7
 800a924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f00b f897 	bl	8015a62 <USB_HC_Halt>
 800a934:	e37d      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f00a fc33 	bl	80151aa <USB_ReadChInterrupts>
 800a944:	4603      	mov	r3, r0
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	d136      	bne.n	800a9bc <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	4413      	add	r3, r2
 800a956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a95a:	461a      	mov	r2, r3
 800a95c:	2320      	movs	r3, #32
 800a95e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	212c      	movs	r1, #44	; 0x2c
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	333d      	adds	r3, #61	; 0x3d
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	f040 835e 	bne.w	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a976:	78fb      	ldrb	r3, [r7, #3]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	212c      	movs	r1, #44	; 0x2c
 800a97c:	fb01 f303 	mul.w	r3, r1, r3
 800a980:	4413      	add	r3, r2
 800a982:	333d      	adds	r3, #61	; 0x3d
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	212c      	movs	r1, #44	; 0x2c
 800a98e:	fb01 f303 	mul.w	r3, r1, r3
 800a992:	4413      	add	r3, r2
 800a994:	3360      	adds	r3, #96	; 0x60
 800a996:	2202      	movs	r2, #2
 800a998:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	212c      	movs	r1, #44	; 0x2c
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3361      	adds	r3, #97	; 0x61
 800a9a8:	2203      	movs	r2, #3
 800a9aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f00b f854 	bl	8015a62 <USB_HC_Halt>
 800a9ba:	e33a      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f00a fbf0 	bl	80151aa <USB_ReadChInterrupts>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d4:	d111      	bne.n	800a9fa <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a9d6:	78fb      	ldrb	r3, [r7, #3]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	78fa      	ldrb	r2, [r7, #3]
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f00b f835 	bl	8015a62 <USB_HC_Halt>
 800a9f8:	e31b      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f00a fbd1 	bl	80151aa <USB_ReadChInterrupts>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d140      	bne.n	800aa94 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	212c      	movs	r1, #44	; 0x2c
 800aa18:	fb01 f303 	mul.w	r3, r1, r3
 800aa1c:	4413      	add	r3, r2
 800aa1e:	335c      	adds	r3, #92	; 0x5c
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f00a fbbc 	bl	80151aa <USB_ReadChInterrupts>
 800aa32:	4603      	mov	r3, r0
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d111      	bne.n	800aa60 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	212c      	movs	r1, #44	; 0x2c
 800aa42:	fb01 f303 	mul.w	r3, r1, r3
 800aa46:	4413      	add	r3, r2
 800aa48:	333d      	adds	r3, #61	; 0x3d
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	2340      	movs	r3, #64	; 0x40
 800aa5e:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	2301      	movs	r3, #1
 800aa70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	212c      	movs	r1, #44	; 0x2c
 800aa78:	fb01 f303 	mul.w	r3, r1, r3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	3361      	adds	r3, #97	; 0x61
 800aa80:	2201      	movs	r2, #1
 800aa82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	78fa      	ldrb	r2, [r7, #3]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f00a ffe8 	bl	8015a62 <USB_HC_Halt>
 800aa92:	e2ce      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f00a fb84 	bl	80151aa <USB_ReadChInterrupts>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa8:	2b40      	cmp	r3, #64	; 0x40
 800aaaa:	d12b      	bne.n	800ab04 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	212c      	movs	r1, #44	; 0x2c
 800aab2:	fb01 f303 	mul.w	r3, r1, r3
 800aab6:	4413      	add	r3, r2
 800aab8:	3361      	adds	r3, #97	; 0x61
 800aaba:	2205      	movs	r2, #5
 800aabc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	212c      	movs	r1, #44	; 0x2c
 800aac4:	fb01 f303 	mul.w	r3, r1, r3
 800aac8:	4413      	add	r3, r2
 800aaca:	333d      	adds	r3, #61	; 0x3d
 800aacc:	2201      	movs	r2, #1
 800aace:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	212c      	movs	r1, #44	; 0x2c
 800aad6:	fb01 f303 	mul.w	r3, r1, r3
 800aada:	4413      	add	r3, r2
 800aadc:	335c      	adds	r3, #92	; 0x5c
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	78fa      	ldrb	r2, [r7, #3]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f00a ffb9 	bl	8015a62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafc:	461a      	mov	r2, r3
 800aafe:	2340      	movs	r3, #64	; 0x40
 800ab00:	6093      	str	r3, [r2, #8]
 800ab02:	e296      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f00a fb4c 	bl	80151aa <USB_ReadChInterrupts>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f003 0308 	and.w	r3, r3, #8
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	d119      	bne.n	800ab50 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2308      	movs	r3, #8
 800ab2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800ab2e:	78fb      	ldrb	r3, [r7, #3]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	212c      	movs	r1, #44	; 0x2c
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	4413      	add	r3, r2
 800ab3a:	3361      	adds	r3, #97	; 0x61
 800ab3c:	2206      	movs	r2, #6
 800ab3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	78fa      	ldrb	r2, [r7, #3]
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f00a ff8a 	bl	8015a62 <USB_HC_Halt>
 800ab4e:	e270      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f00a fb26 	bl	80151aa <USB_ReadChInterrupts>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d13f      	bne.n	800abe8 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	212c      	movs	r1, #44	; 0x2c
 800ab6e:	fb01 f303 	mul.w	r3, r1, r3
 800ab72:	4413      	add	r3, r2
 800ab74:	335c      	adds	r3, #92	; 0x5c
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	212c      	movs	r1, #44	; 0x2c
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	4413      	add	r3, r2
 800ab86:	3361      	adds	r3, #97	; 0x61
 800ab88:	2204      	movs	r2, #4
 800ab8a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	212c      	movs	r1, #44	; 0x2c
 800ab92:	fb01 f303 	mul.w	r3, r1, r3
 800ab96:	4413      	add	r3, r2
 800ab98:	333d      	adds	r3, #61	; 0x3d
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d112      	bne.n	800abc6 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	212c      	movs	r1, #44	; 0x2c
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	4413      	add	r3, r2
 800abac:	333c      	adds	r3, #60	; 0x3c
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d108      	bne.n	800abc6 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	212c      	movs	r1, #44	; 0x2c
 800abba:	fb01 f303 	mul.w	r3, r1, r3
 800abbe:	4413      	add	r3, r2
 800abc0:	333d      	adds	r3, #61	; 0x3d
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f00a ff47 	bl	8015a62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe0:	461a      	mov	r2, r3
 800abe2:	2310      	movs	r3, #16
 800abe4:	6093      	str	r3, [r2, #8]
 800abe6:	e224      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f00a fada 	bl	80151aa <USB_ReadChInterrupts>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfc:	2b80      	cmp	r3, #128	; 0x80
 800abfe:	d161      	bne.n	800acc4 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d110      	bne.n	800ac2a <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	212c      	movs	r1, #44	; 0x2c
 800ac0e:	fb01 f303 	mul.w	r3, r1, r3
 800ac12:	4413      	add	r3, r2
 800ac14:	3361      	adds	r3, #97	; 0x61
 800ac16:	2207      	movs	r2, #7
 800ac18:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f00a ff1d 	bl	8015a62 <USB_HC_Halt>
 800ac28:	e042      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	222c      	movs	r2, #44	; 0x2c
 800ac30:	fb03 f202 	mul.w	r2, r3, r2
 800ac34:	440a      	add	r2, r1
 800ac36:	325c      	adds	r2, #92	; 0x5c
 800ac38:	6812      	ldr	r2, [r2, #0]
 800ac3a:	3201      	adds	r2, #1
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	202c      	movs	r0, #44	; 0x2c
 800ac40:	fb00 f303 	mul.w	r3, r0, r3
 800ac44:	440b      	add	r3, r1
 800ac46:	335c      	adds	r3, #92	; 0x5c
 800ac48:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	212c      	movs	r1, #44	; 0x2c
 800ac50:	fb01 f303 	mul.w	r3, r1, r3
 800ac54:	4413      	add	r3, r2
 800ac56:	335c      	adds	r3, #92	; 0x5c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d91f      	bls.n	800ac9e <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	212c      	movs	r1, #44	; 0x2c
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	4413      	add	r3, r2
 800ac6a:	335c      	adds	r3, #92	; 0x5c
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	212c      	movs	r1, #44	; 0x2c
 800ac76:	fb01 f303 	mul.w	r3, r1, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3360      	adds	r3, #96	; 0x60
 800ac7e:	2204      	movs	r2, #4
 800ac80:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	212c      	movs	r1, #44	; 0x2c
 800ac88:	fb01 f303 	mul.w	r3, r1, r3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3360      	adds	r3, #96	; 0x60
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	78fb      	ldrb	r3, [r7, #3]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7fa f91a 	bl	8004ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ac9c:	e008      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	212c      	movs	r1, #44	; 0x2c
 800aca4:	fb01 f303 	mul.w	r3, r1, r3
 800aca8:	4413      	add	r3, r2
 800acaa:	3360      	adds	r3, #96	; 0x60
 800acac:	2202      	movs	r2, #2
 800acae:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acbc:	461a      	mov	r2, r3
 800acbe:	2380      	movs	r3, #128	; 0x80
 800acc0:	6093      	str	r3, [r2, #8]
 800acc2:	e1b6      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	78fa      	ldrb	r2, [r7, #3]
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f00a fa6c 	bl	80151aa <USB_ReadChInterrupts>
 800acd2:	4603      	mov	r3, r0
 800acd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acdc:	d11a      	bne.n	800ad14 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	212c      	movs	r1, #44	; 0x2c
 800ace4:	fb01 f303 	mul.w	r3, r1, r3
 800ace8:	4413      	add	r3, r2
 800acea:	3361      	adds	r3, #97	; 0x61
 800acec:	2209      	movs	r2, #9
 800acee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	78fa      	ldrb	r2, [r7, #3]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f00a feb2 	bl	8015a62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad10:	6093      	str	r3, [r2, #8]
 800ad12:	e18e      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f00a fa44 	bl	80151aa <USB_ReadChInterrupts>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f003 0302 	and.w	r3, r3, #2
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	f040 8182 	bne.w	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	212c      	movs	r1, #44	; 0x2c
 800ad46:	fb01 f303 	mul.w	r3, r1, r3
 800ad4a:	4413      	add	r3, r2
 800ad4c:	3361      	adds	r3, #97	; 0x61
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	f040 8087 	bne.w	800ae64 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	212c      	movs	r1, #44	; 0x2c
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	3361      	adds	r3, #97	; 0x61
 800ad64:	2202      	movs	r2, #2
 800ad66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	212c      	movs	r1, #44	; 0x2c
 800ad6e:	fb01 f303 	mul.w	r3, r1, r3
 800ad72:	4413      	add	r3, r2
 800ad74:	3360      	adds	r3, #96	; 0x60
 800ad76:	2201      	movs	r2, #1
 800ad78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	212c      	movs	r1, #44	; 0x2c
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	4413      	add	r3, r2
 800ad86:	333f      	adds	r3, #63	; 0x3f
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d00a      	beq.n	800ada4 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	212c      	movs	r1, #44	; 0x2c
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	333f      	adds	r3, #63	; 0x3f
 800ad9c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	f040 8138 	bne.w	800b014 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d113      	bne.n	800add4 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	212c      	movs	r1, #44	; 0x2c
 800adb2:	fb01 f303 	mul.w	r3, r1, r3
 800adb6:	4413      	add	r3, r2
 800adb8:	3355      	adds	r3, #85	; 0x55
 800adba:	781a      	ldrb	r2, [r3, #0]
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	f082 0201 	eor.w	r2, r2, #1
 800adc2:	b2d0      	uxtb	r0, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	212c      	movs	r1, #44	; 0x2c
 800adc8:	fb01 f303 	mul.w	r3, r1, r3
 800adcc:	4413      	add	r3, r2
 800adce:	3355      	adds	r3, #85	; 0x55
 800add0:	4602      	mov	r2, r0
 800add2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	2b01      	cmp	r3, #1
 800adda:	f040 811b 	bne.w	800b014 <HCD_HC_OUT_IRQHandler+0x740>
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	212c      	movs	r1, #44	; 0x2c
 800ade4:	fb01 f303 	mul.w	r3, r1, r3
 800ade8:	4413      	add	r3, r2
 800adea:	334c      	adds	r3, #76	; 0x4c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 8110 	beq.w	800b014 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	212c      	movs	r1, #44	; 0x2c
 800adfa:	fb01 f303 	mul.w	r3, r1, r3
 800adfe:	4413      	add	r3, r2
 800ae00:	334c      	adds	r3, #76	; 0x4c
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	78fa      	ldrb	r2, [r7, #3]
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	202c      	movs	r0, #44	; 0x2c
 800ae0a:	fb00 f202 	mul.w	r2, r0, r2
 800ae0e:	440a      	add	r2, r1
 800ae10:	3240      	adds	r2, #64	; 0x40
 800ae12:	8812      	ldrh	r2, [r2, #0]
 800ae14:	4413      	add	r3, r2
 800ae16:	3b01      	subs	r3, #1
 800ae18:	78fa      	ldrb	r2, [r7, #3]
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	202c      	movs	r0, #44	; 0x2c
 800ae1e:	fb00 f202 	mul.w	r2, r0, r2
 800ae22:	440a      	add	r2, r1
 800ae24:	3240      	adds	r2, #64	; 0x40
 800ae26:	8812      	ldrh	r2, [r2, #0]
 800ae28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae2c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 80ed 	beq.w	800b014 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	212c      	movs	r1, #44	; 0x2c
 800ae40:	fb01 f303 	mul.w	r3, r1, r3
 800ae44:	4413      	add	r3, r2
 800ae46:	3355      	adds	r3, #85	; 0x55
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	f082 0201 	eor.w	r2, r2, #1
 800ae50:	b2d0      	uxtb	r0, r2
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	212c      	movs	r1, #44	; 0x2c
 800ae56:	fb01 f303 	mul.w	r3, r1, r3
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3355      	adds	r3, #85	; 0x55
 800ae5e:	4602      	mov	r2, r0
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	e0d7      	b.n	800b014 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	212c      	movs	r1, #44	; 0x2c
 800ae6a:	fb01 f303 	mul.w	r3, r1, r3
 800ae6e:	4413      	add	r3, r2
 800ae70:	3361      	adds	r3, #97	; 0x61
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d109      	bne.n	800ae8c <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	212c      	movs	r1, #44	; 0x2c
 800ae7e:	fb01 f303 	mul.w	r3, r1, r3
 800ae82:	4413      	add	r3, r2
 800ae84:	3361      	adds	r3, #97	; 0x61
 800ae86:	2202      	movs	r2, #2
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	e0c3      	b.n	800b014 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	212c      	movs	r1, #44	; 0x2c
 800ae92:	fb01 f303 	mul.w	r3, r1, r3
 800ae96:	4413      	add	r3, r2
 800ae98:	3361      	adds	r3, #97	; 0x61
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b04      	cmp	r3, #4
 800ae9e:	d112      	bne.n	800aec6 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	212c      	movs	r1, #44	; 0x2c
 800aea6:	fb01 f303 	mul.w	r3, r1, r3
 800aeaa:	4413      	add	r3, r2
 800aeac:	3361      	adds	r3, #97	; 0x61
 800aeae:	2202      	movs	r2, #2
 800aeb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aeb2:	78fb      	ldrb	r3, [r7, #3]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	212c      	movs	r1, #44	; 0x2c
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	4413      	add	r3, r2
 800aebe:	3360      	adds	r3, #96	; 0x60
 800aec0:	2202      	movs	r2, #2
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e0a6      	b.n	800b014 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	212c      	movs	r1, #44	; 0x2c
 800aecc:	fb01 f303 	mul.w	r3, r1, r3
 800aed0:	4413      	add	r3, r2
 800aed2:	3361      	adds	r3, #97	; 0x61
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d112      	bne.n	800af00 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	212c      	movs	r1, #44	; 0x2c
 800aee0:	fb01 f303 	mul.w	r3, r1, r3
 800aee4:	4413      	add	r3, r2
 800aee6:	3361      	adds	r3, #97	; 0x61
 800aee8:	2202      	movs	r2, #2
 800aeea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	212c      	movs	r1, #44	; 0x2c
 800aef2:	fb01 f303 	mul.w	r3, r1, r3
 800aef6:	4413      	add	r3, r2
 800aef8:	3360      	adds	r3, #96	; 0x60
 800aefa:	2202      	movs	r2, #2
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	e089      	b.n	800b014 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	212c      	movs	r1, #44	; 0x2c
 800af06:	fb01 f303 	mul.w	r3, r1, r3
 800af0a:	4413      	add	r3, r2
 800af0c:	3361      	adds	r3, #97	; 0x61
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b06      	cmp	r3, #6
 800af12:	d112      	bne.n	800af3a <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	212c      	movs	r1, #44	; 0x2c
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	4413      	add	r3, r2
 800af20:	3361      	adds	r3, #97	; 0x61
 800af22:	2202      	movs	r2, #2
 800af24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	212c      	movs	r1, #44	; 0x2c
 800af2c:	fb01 f303 	mul.w	r3, r1, r3
 800af30:	4413      	add	r3, r2
 800af32:	3360      	adds	r3, #96	; 0x60
 800af34:	2205      	movs	r2, #5
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	e06c      	b.n	800b014 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	212c      	movs	r1, #44	; 0x2c
 800af40:	fb01 f303 	mul.w	r3, r1, r3
 800af44:	4413      	add	r3, r2
 800af46:	3361      	adds	r3, #97	; 0x61
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b07      	cmp	r3, #7
 800af4c:	d009      	beq.n	800af62 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	212c      	movs	r1, #44	; 0x2c
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	4413      	add	r3, r2
 800af5a:	3361      	adds	r3, #97	; 0x61
 800af5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800af5e:	2b09      	cmp	r3, #9
 800af60:	d166      	bne.n	800b030 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	212c      	movs	r1, #44	; 0x2c
 800af68:	fb01 f303 	mul.w	r3, r1, r3
 800af6c:	4413      	add	r3, r2
 800af6e:	3361      	adds	r3, #97	; 0x61
 800af70:	2202      	movs	r2, #2
 800af72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	222c      	movs	r2, #44	; 0x2c
 800af7a:	fb03 f202 	mul.w	r2, r3, r2
 800af7e:	440a      	add	r2, r1
 800af80:	325c      	adds	r2, #92	; 0x5c
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	3201      	adds	r2, #1
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	202c      	movs	r0, #44	; 0x2c
 800af8a:	fb00 f303 	mul.w	r3, r0, r3
 800af8e:	440b      	add	r3, r1
 800af90:	335c      	adds	r3, #92	; 0x5c
 800af92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	212c      	movs	r1, #44	; 0x2c
 800af9a:	fb01 f303 	mul.w	r3, r1, r3
 800af9e:	4413      	add	r3, r2
 800afa0:	335c      	adds	r3, #92	; 0x5c
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d912      	bls.n	800afce <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	212c      	movs	r1, #44	; 0x2c
 800afae:	fb01 f303 	mul.w	r3, r1, r3
 800afb2:	4413      	add	r3, r2
 800afb4:	335c      	adds	r3, #92	; 0x5c
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	212c      	movs	r1, #44	; 0x2c
 800afc0:	fb01 f303 	mul.w	r3, r1, r3
 800afc4:	4413      	add	r3, r2
 800afc6:	3360      	adds	r3, #96	; 0x60
 800afc8:	2204      	movs	r2, #4
 800afca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800afcc:	e021      	b.n	800b012 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800afce:	78fb      	ldrb	r3, [r7, #3]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	212c      	movs	r1, #44	; 0x2c
 800afd4:	fb01 f303 	mul.w	r3, r1, r3
 800afd8:	4413      	add	r3, r2
 800afda:	3360      	adds	r3, #96	; 0x60
 800afdc:	2202      	movs	r2, #2
 800afde:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aff6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800affe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	4413      	add	r3, r2
 800b008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00c:	461a      	mov	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b012:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	212c      	movs	r1, #44	; 0x2c
 800b01a:	fb01 f303 	mul.w	r3, r1, r3
 800b01e:	4413      	add	r3, r2
 800b020:	3360      	adds	r3, #96	; 0x60
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7f9 ff51 	bl	8004ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800b02e:	e000      	b.n	800b032 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800b030:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	0c5b      	lsrs	r3, r3, #17
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	091b      	lsrs	r3, r3, #4
 800b068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b06c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d004      	beq.n	800b07e <HCD_RXQLVL_IRQHandler+0x46>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2b05      	cmp	r3, #5
 800b078:	f000 80a9 	beq.w	800b1ce <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b07c:	e0aa      	b.n	800b1d4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80a6 	beq.w	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	212c      	movs	r1, #44	; 0x2c
 800b08c:	fb01 f303 	mul.w	r3, r1, r3
 800b090:	4413      	add	r3, r2
 800b092:	3344      	adds	r3, #68	; 0x44
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 809b 	beq.w	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	212c      	movs	r1, #44	; 0x2c
 800b0a2:	fb01 f303 	mul.w	r3, r1, r3
 800b0a6:	4413      	add	r3, r2
 800b0a8:	3350      	adds	r3, #80	; 0x50
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	441a      	add	r2, r3
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	202c      	movs	r0, #44	; 0x2c
 800b0b6:	fb00 f303 	mul.w	r3, r0, r3
 800b0ba:	440b      	add	r3, r1
 800b0bc:	334c      	adds	r3, #76	; 0x4c
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d87a      	bhi.n	800b1ba <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	212c      	movs	r1, #44	; 0x2c
 800b0ce:	fb01 f303 	mul.w	r3, r1, r3
 800b0d2:	4413      	add	r3, r2
 800b0d4:	3344      	adds	r3, #68	; 0x44
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	b292      	uxth	r2, r2
 800b0dc:	4619      	mov	r1, r3
 800b0de:	f009 fff9 	bl	80150d4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	212c      	movs	r1, #44	; 0x2c
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3344      	adds	r3, #68	; 0x44
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	202c      	movs	r0, #44	; 0x2c
 800b0fc:	fb00 f303 	mul.w	r3, r0, r3
 800b100:	440b      	add	r3, r1
 800b102:	3344      	adds	r3, #68	; 0x44
 800b104:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	212c      	movs	r1, #44	; 0x2c
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	4413      	add	r3, r2
 800b112:	3350      	adds	r3, #80	; 0x50
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	441a      	add	r2, r3
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	202c      	movs	r0, #44	; 0x2c
 800b120:	fb00 f303 	mul.w	r3, r0, r3
 800b124:	440b      	add	r3, r1
 800b126:	3350      	adds	r3, #80	; 0x50
 800b128:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	4413      	add	r3, r2
 800b132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	0cdb      	lsrs	r3, r3, #19
 800b13a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b13e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	212c      	movs	r1, #44	; 0x2c
 800b146:	fb01 f303 	mul.w	r3, r1, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	3340      	adds	r3, #64	; 0x40
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	4293      	cmp	r3, r2
 800b156:	d13c      	bne.n	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d039      	beq.n	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	4413      	add	r3, r2
 800b166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b174:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	4413      	add	r3, r2
 800b186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b18a:	461a      	mov	r2, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	212c      	movs	r1, #44	; 0x2c
 800b196:	fb01 f303 	mul.w	r3, r1, r3
 800b19a:	4413      	add	r3, r2
 800b19c:	3354      	adds	r3, #84	; 0x54
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f083 0301 	eor.w	r3, r3, #1
 800b1a4:	b2d8      	uxtb	r0, r3
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	212c      	movs	r1, #44	; 0x2c
 800b1ac:	fb01 f303 	mul.w	r3, r1, r3
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3354      	adds	r3, #84	; 0x54
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	701a      	strb	r2, [r3, #0]
      break;
 800b1b8:	e00b      	b.n	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	212c      	movs	r1, #44	; 0x2c
 800b1c0:	fb01 f303 	mul.w	r3, r1, r3
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3360      	adds	r3, #96	; 0x60
 800b1c8:	2204      	movs	r2, #4
 800b1ca:	701a      	strb	r2, [r3, #0]
      break;
 800b1cc:	e001      	b.n	800b1d2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b1ce:	bf00      	nop
 800b1d0:	e000      	b.n	800b1d4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b1d2:	bf00      	nop
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	3728      	adds	r7, #40	; 0x28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b208:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b02      	cmp	r3, #2
 800b212:	d10b      	bne.n	800b22c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d102      	bne.n	800b224 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7f9 fe3a 	bl	8004e98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f043 0302 	orr.w	r3, r3, #2
 800b22a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b08      	cmp	r3, #8
 800b234:	d132      	bne.n	800b29c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f043 0308 	orr.w	r3, r3, #8
 800b23c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b04      	cmp	r3, #4
 800b246:	d126      	bne.n	800b296 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d113      	bne.n	800b278 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b25a:	d106      	bne.n	800b26a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2102      	movs	r1, #2
 800b262:	4618      	mov	r0, r3
 800b264:	f00a f8be 	bl	80153e4 <USB_InitFSLSPClkSel>
 800b268:	e011      	b.n	800b28e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2101      	movs	r1, #1
 800b270:	4618      	mov	r0, r3
 800b272:	f00a f8b7 	bl	80153e4 <USB_InitFSLSPClkSel>
 800b276:	e00a      	b.n	800b28e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d106      	bne.n	800b28e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b286:	461a      	mov	r2, r3
 800b288:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b28c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f9 fe2c 	bl	8004eec <HAL_HCD_PortEnabled_Callback>
 800b294:	e002      	b.n	800b29c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7f9 fe36 	bl	8004f08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b20      	cmp	r3, #32
 800b2a4:	d103      	bne.n	800b2ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f043 0320 	orr.w	r3, r3, #32
 800b2ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	6013      	str	r3, [r2, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e07f      	b.n	800b3d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7f7 fe3e 	bl	8002f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2224      	movs	r2, #36	; 0x24
 800b2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f022 0201 	bic.w	r2, r2, #1
 800b306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b314:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b324:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d107      	bne.n	800b33e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689a      	ldr	r2, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b33a:	609a      	str	r2, [r3, #8]
 800b33c:	e006      	b.n	800b34c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	689a      	ldr	r2, [r3, #8]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b34a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d104      	bne.n	800b35e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b35c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6859      	ldr	r1, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <HAL_I2C_Init+0x11c>)
 800b36a:	430b      	orrs	r3, r1
 800b36c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b37c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691a      	ldr	r2, [r3, #16]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	430a      	orrs	r2, r1
 800b396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	69d9      	ldr	r1, [r3, #28]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1a      	ldr	r2, [r3, #32]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0201 	orr.w	r2, r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	02008000 	.word	0x02008000

0800b3e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af02      	add	r7, sp, #8
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	817b      	strh	r3, [r7, #10]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b20      	cmp	r3, #32
 800b402:	f040 80da 	bne.w	800b5ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_I2C_Master_Transmit+0x30>
 800b410:	2302      	movs	r3, #2
 800b412:	e0d3      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b41c:	f7fa f826 	bl	800546c <HAL_GetTick>
 800b420:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	2319      	movs	r3, #25
 800b428:	2201      	movs	r2, #1
 800b42a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 f8f0 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e0be      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2221      	movs	r2, #33	; 0x21
 800b442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2210      	movs	r2, #16
 800b44a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	893a      	ldrh	r2, [r7, #8]
 800b45e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	2bff      	cmp	r3, #255	; 0xff
 800b46e:	d90e      	bls.n	800b48e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	22ff      	movs	r2, #255	; 0xff
 800b474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	8979      	ldrh	r1, [r7, #10]
 800b47e:	4b51      	ldr	r3, [pc, #324]	; (800b5c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f000 fa7e 	bl	800b988 <I2C_TransferConfig>
 800b48c:	e06c      	b.n	800b568 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b492:	b29a      	uxth	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	8979      	ldrh	r1, [r7, #10]
 800b4a0:	4b48      	ldr	r3, [pc, #288]	; (800b5c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 fa6d 	bl	800b988 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b4ae:	e05b      	b.n	800b568 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	6a39      	ldr	r1, [r7, #32]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 f8fc 	bl	800b6b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e07b      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d034      	beq.n	800b568 <HAL_I2C_Master_Transmit+0x184>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	d130      	bne.n	800b568 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	2200      	movs	r2, #0
 800b50e:	2180      	movs	r1, #128	; 0x80
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f87f 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e04d      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b524:	b29b      	uxth	r3, r3
 800b526:	2bff      	cmp	r3, #255	; 0xff
 800b528:	d90e      	bls.n	800b548 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22ff      	movs	r2, #255	; 0xff
 800b52e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b534:	b2da      	uxtb	r2, r3
 800b536:	8979      	ldrh	r1, [r7, #10]
 800b538:	2300      	movs	r3, #0
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 fa21 	bl	800b988 <I2C_TransferConfig>
 800b546:	e00f      	b.n	800b568 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b556:	b2da      	uxtb	r2, r3
 800b558:	8979      	ldrh	r1, [r7, #10]
 800b55a:	2300      	movs	r3, #0
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 fa10 	bl	800b988 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d19e      	bne.n	800b4b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	6a39      	ldr	r1, [r7, #32]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 f8e2 	bl	800b740 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e01a      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2220      	movs	r2, #32
 800b58c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6859      	ldr	r1, [r3, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800b59a:	400b      	ands	r3, r1
 800b59c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e000      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b5ba:	2302      	movs	r3, #2
  }
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	80002000 	.word	0x80002000
 800b5c8:	fe00e800 	.word	0xfe00e800

0800b5cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	f003 0302 	and.w	r3, r3, #2
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d103      	bne.n	800b5ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d007      	beq.n	800b608 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699a      	ldr	r2, [r3, #24]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	619a      	str	r2, [r3, #24]
  }
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	603b      	str	r3, [r7, #0]
 800b620:	4613      	mov	r3, r2
 800b622:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b624:	e031      	b.n	800b68a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b62c:	d02d      	beq.n	800b68a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b62e:	f7f9 ff1d 	bl	800546c <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d302      	bcc.n	800b644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d122      	bne.n	800b68a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	699a      	ldr	r2, [r3, #24]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	4013      	ands	r3, r2
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	429a      	cmp	r2, r3
 800b652:	bf0c      	ite	eq
 800b654:	2301      	moveq	r3, #1
 800b656:	2300      	movne	r3, #0
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d113      	bne.n	800b68a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b666:	f043 0220 	orr.w	r2, r3, #32
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2220      	movs	r2, #32
 800b672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e00f      	b.n	800b6aa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	4013      	ands	r3, r2
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	429a      	cmp	r2, r3
 800b698:	bf0c      	ite	eq
 800b69a:	2301      	moveq	r3, #1
 800b69c:	2300      	movne	r3, #0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d0be      	beq.n	800b626 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6be:	e033      	b.n	800b728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f87f 	bl	800b7c8 <I2C_IsErrorOccurred>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e031      	b.n	800b738 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6da:	d025      	beq.n	800b728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6dc:	f7f9 fec6 	bl	800546c <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d302      	bcc.n	800b6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d11a      	bne.n	800b728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d013      	beq.n	800b728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b704:	f043 0220 	orr.w	r2, r3, #32
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2220      	movs	r2, #32
 800b710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	e007      	b.n	800b738 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b02      	cmp	r3, #2
 800b734:	d1c4      	bne.n	800b6c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b74c:	e02f      	b.n	800b7ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	68b9      	ldr	r1, [r7, #8]
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f000 f838 	bl	800b7c8 <I2C_IsErrorOccurred>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e02d      	b.n	800b7be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b762:	f7f9 fe83 	bl	800546c <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d302      	bcc.n	800b778 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11a      	bne.n	800b7ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	f003 0320 	and.w	r3, r3, #32
 800b782:	2b20      	cmp	r3, #32
 800b784:	d013      	beq.n	800b7ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78a:	f043 0220 	orr.w	r2, r3, #32
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2220      	movs	r2, #32
 800b796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e007      	b.n	800b7be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	f003 0320 	and.w	r3, r3, #32
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d1c8      	bne.n	800b74e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	; 0x28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	f003 0310 	and.w	r3, r3, #16
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d068      	beq.n	800b8c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2210      	movs	r2, #16
 800b7fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b7fc:	e049      	b.n	800b892 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b804:	d045      	beq.n	800b892 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b806:	f7f9 fe31 	bl	800546c <HAL_GetTick>
 800b80a:	4602      	mov	r2, r0
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	429a      	cmp	r2, r3
 800b814:	d302      	bcc.n	800b81c <I2C_IsErrorOccurred+0x54>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d13a      	bne.n	800b892 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b826:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b82e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b83a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b83e:	d121      	bne.n	800b884 <I2C_IsErrorOccurred+0xbc>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b846:	d01d      	beq.n	800b884 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b848:	7cfb      	ldrb	r3, [r7, #19]
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d01a      	beq.n	800b884 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b85c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b85e:	f7f9 fe05 	bl	800546c <HAL_GetTick>
 800b862:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b864:	e00e      	b.n	800b884 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b866:	f7f9 fe01 	bl	800546c <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	2b19      	cmp	r3, #25
 800b872:	d907      	bls.n	800b884 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	f043 0320 	orr.w	r3, r3, #32
 800b87a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b882:	e006      	b.n	800b892 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b20      	cmp	r3, #32
 800b890:	d1e9      	bne.n	800b866 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d003      	beq.n	800b8a8 <I2C_IsErrorOccurred+0xe0>
 800b8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0aa      	beq.n	800b7fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d103      	bne.n	800b8b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	f043 0304 	orr.w	r3, r3, #4
 800b8be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	f043 0301 	orr.w	r3, r3, #1
 800b8de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00b      	beq.n	800b912 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	f043 0308 	orr.w	r3, r3, #8
 800b900:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b90a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b92c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d01c      	beq.n	800b976 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7ff fe45 	bl	800b5cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6859      	ldr	r1, [r3, #4]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <I2C_IsErrorOccurred+0x1bc>)
 800b94e:	400b      	ands	r3, r1
 800b950:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	431a      	orrs	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2220      	movs	r2, #32
 800b962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3728      	adds	r7, #40	; 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	fe00e800 	.word	0xfe00e800

0800b988 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	607b      	str	r3, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	817b      	strh	r3, [r7, #10]
 800b996:	4613      	mov	r3, r2
 800b998:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b99a:	897b      	ldrh	r3, [r7, #10]
 800b99c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b9a0:	7a7b      	ldrb	r3, [r7, #9]
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b9a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	0d5b      	lsrs	r3, r3, #21
 800b9c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b9c6:	4b08      	ldr	r3, [pc, #32]	; (800b9e8 <I2C_TransferConfig+0x60>)
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	43db      	mvns	r3, r3
 800b9cc:	ea02 0103 	and.w	r1, r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	03ff63ff 	.word	0x03ff63ff

0800b9ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	d138      	bne.n	800ba74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d101      	bne.n	800ba10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	e032      	b.n	800ba76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2224      	movs	r2, #36	; 0x24
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ba3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6819      	ldr	r1, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2220      	movs	r2, #32
 800ba64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	e000      	b.n	800ba76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba74:	2302      	movs	r3, #2
  }
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b20      	cmp	r3, #32
 800ba96:	d139      	bne.n	800bb0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800baa2:	2302      	movs	r3, #2
 800baa4:	e033      	b.n	800bb0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2224      	movs	r2, #36	; 0x24
 800bab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f022 0201 	bic.w	r2, r2, #1
 800bac4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bad4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	021b      	lsls	r3, r3, #8
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	4313      	orrs	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f042 0201 	orr.w	r2, r2, #1
 800baf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e000      	b.n	800bb0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bb0c:	2302      	movs	r3, #2
  }
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bb24:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <HAL_PWREx_ConfigSupply+0x70>)
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d00a      	beq.n	800bb46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bb30:	4b16      	ldr	r3, [pc, #88]	; (800bb8c <HAL_PWREx_ConfigSupply+0x70>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f003 0307 	and.w	r3, r3, #7
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d001      	beq.n	800bb42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e01f      	b.n	800bb82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e01d      	b.n	800bb82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bb46:	4b11      	ldr	r3, [pc, #68]	; (800bb8c <HAL_PWREx_ConfigSupply+0x70>)
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	f023 0207 	bic.w	r2, r3, #7
 800bb4e:	490f      	ldr	r1, [pc, #60]	; (800bb8c <HAL_PWREx_ConfigSupply+0x70>)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bb56:	f7f9 fc89 	bl	800546c <HAL_GetTick>
 800bb5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bb5c:	e009      	b.n	800bb72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bb5e:	f7f9 fc85 	bl	800546c <HAL_GetTick>
 800bb62:	4602      	mov	r2, r0
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb6c:	d901      	bls.n	800bb72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e007      	b.n	800bb82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bb72:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <HAL_PWREx_ConfigSupply+0x70>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb7e:	d1ee      	bne.n	800bb5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	58024800 	.word	0x58024800

0800bb90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bb90:	b480      	push	{r7}
 800bb92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	4a04      	ldr	r2, [pc, #16]	; (800bbac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bb9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb9e:	60d3      	str	r3, [r2, #12]
}
 800bba0:	bf00      	nop
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	58024800 	.word	0x58024800

0800bbb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08c      	sub	sp, #48	; 0x30
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d102      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	f000 bc48 	b.w	800c454 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 8088 	beq.w	800bce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbd2:	4b99      	ldr	r3, [pc, #612]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbdc:	4b96      	ldr	r3, [pc, #600]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	2b10      	cmp	r3, #16
 800bbe6:	d007      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x48>
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	2b18      	cmp	r3, #24
 800bbec:	d111      	bne.n	800bc12 <HAL_RCC_OscConfig+0x62>
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	f003 0303 	and.w	r3, r3, #3
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d10c      	bne.n	800bc12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbf8:	4b8f      	ldr	r3, [pc, #572]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d06d      	beq.n	800bce0 <HAL_RCC_OscConfig+0x130>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d169      	bne.n	800bce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f000 bc21 	b.w	800c454 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc1a:	d106      	bne.n	800bc2a <HAL_RCC_OscConfig+0x7a>
 800bc1c:	4b86      	ldr	r3, [pc, #536]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a85      	ldr	r2, [pc, #532]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	e02e      	b.n	800bc88 <HAL_RCC_OscConfig+0xd8>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10c      	bne.n	800bc4c <HAL_RCC_OscConfig+0x9c>
 800bc32:	4b81      	ldr	r3, [pc, #516]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a80      	ldr	r2, [pc, #512]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	4b7e      	ldr	r3, [pc, #504]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a7d      	ldr	r2, [pc, #500]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	e01d      	b.n	800bc88 <HAL_RCC_OscConfig+0xd8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc54:	d10c      	bne.n	800bc70 <HAL_RCC_OscConfig+0xc0>
 800bc56:	4b78      	ldr	r3, [pc, #480]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a77      	ldr	r2, [pc, #476]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	4b75      	ldr	r3, [pc, #468]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a74      	ldr	r2, [pc, #464]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	e00b      	b.n	800bc88 <HAL_RCC_OscConfig+0xd8>
 800bc70:	4b71      	ldr	r3, [pc, #452]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a70      	ldr	r2, [pc, #448]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	4b6e      	ldr	r3, [pc, #440]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a6d      	ldr	r2, [pc, #436]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bc82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d013      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc90:	f7f9 fbec 	bl	800546c <HAL_GetTick>
 800bc94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc96:	e008      	b.n	800bcaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc98:	f7f9 fbe8 	bl	800546c <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b64      	cmp	r3, #100	; 0x64
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e3d4      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcaa:	4b63      	ldr	r3, [pc, #396]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0f0      	beq.n	800bc98 <HAL_RCC_OscConfig+0xe8>
 800bcb6:	e014      	b.n	800bce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb8:	f7f9 fbd8 	bl	800546c <HAL_GetTick>
 800bcbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bcbe:	e008      	b.n	800bcd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcc0:	f7f9 fbd4 	bl	800546c <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b64      	cmp	r3, #100	; 0x64
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e3c0      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bcd2:	4b59      	ldr	r3, [pc, #356]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1f0      	bne.n	800bcc0 <HAL_RCC_OscConfig+0x110>
 800bcde:	e000      	b.n	800bce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 80ca 	beq.w	800be84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcf0:	4b51      	ldr	r3, [pc, #324]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bcfa:	4b4f      	ldr	r3, [pc, #316]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d007      	beq.n	800bd16 <HAL_RCC_OscConfig+0x166>
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	2b18      	cmp	r3, #24
 800bd0a:	d156      	bne.n	800bdba <HAL_RCC_OscConfig+0x20a>
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d151      	bne.n	800bdba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd16:	4b48      	ldr	r3, [pc, #288]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0304 	and.w	r3, r3, #4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <HAL_RCC_OscConfig+0x17e>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e392      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd2e:	4b42      	ldr	r3, [pc, #264]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f023 0219 	bic.w	r2, r3, #25
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	493f      	ldr	r1, [pc, #252]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd40:	f7f9 fb94 	bl	800546c <HAL_GetTick>
 800bd44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd46:	e008      	b.n	800bd5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd48:	f7f9 fb90 	bl	800546c <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d901      	bls.n	800bd5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e37c      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd5a:	4b37      	ldr	r3, [pc, #220]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0304 	and.w	r3, r3, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f0      	beq.n	800bd48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd66:	f7f9 fbb1 	bl	80054cc <HAL_GetREVID>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f241 0203 	movw	r2, #4099	; 0x1003
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d817      	bhi.n	800bda4 <HAL_RCC_OscConfig+0x1f4>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	2b40      	cmp	r3, #64	; 0x40
 800bd7a:	d108      	bne.n	800bd8e <HAL_RCC_OscConfig+0x1de>
 800bd7c:	4b2e      	ldr	r3, [pc, #184]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bd84:	4a2c      	ldr	r2, [pc, #176]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd8c:	e07a      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd8e:	4b2a      	ldr	r3, [pc, #168]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	031b      	lsls	r3, r3, #12
 800bd9c:	4926      	ldr	r1, [pc, #152]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bda2:	e06f      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bda4:	4b24      	ldr	r3, [pc, #144]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	061b      	lsls	r3, r3, #24
 800bdb2:	4921      	ldr	r1, [pc, #132]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdb8:	e064      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d047      	beq.n	800be52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bdc2:	4b1d      	ldr	r3, [pc, #116]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 0219 	bic.w	r2, r3, #25
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	491a      	ldr	r1, [pc, #104]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdd4:	f7f9 fb4a 	bl	800546c <HAL_GetTick>
 800bdd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdda:	e008      	b.n	800bdee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bddc:	f7f9 fb46 	bl	800546c <HAL_GetTick>
 800bde0:	4602      	mov	r2, r0
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d901      	bls.n	800bdee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e332      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0304 	and.w	r3, r3, #4
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0f0      	beq.n	800bddc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdfa:	f7f9 fb67 	bl	80054cc <HAL_GetREVID>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f241 0203 	movw	r2, #4099	; 0x1003
 800be04:	4293      	cmp	r3, r2
 800be06:	d819      	bhi.n	800be3c <HAL_RCC_OscConfig+0x28c>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	2b40      	cmp	r3, #64	; 0x40
 800be0e:	d108      	bne.n	800be22 <HAL_RCC_OscConfig+0x272>
 800be10:	4b09      	ldr	r3, [pc, #36]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800be18:	4a07      	ldr	r2, [pc, #28]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800be1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be1e:	6053      	str	r3, [r2, #4]
 800be20:	e030      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	031b      	lsls	r3, r3, #12
 800be30:	4901      	ldr	r1, [pc, #4]	; (800be38 <HAL_RCC_OscConfig+0x288>)
 800be32:	4313      	orrs	r3, r2
 800be34:	604b      	str	r3, [r1, #4]
 800be36:	e025      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
 800be38:	58024400 	.word	0x58024400
 800be3c:	4b9a      	ldr	r3, [pc, #616]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	061b      	lsls	r3, r3, #24
 800be4a:	4997      	ldr	r1, [pc, #604]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	604b      	str	r3, [r1, #4]
 800be50:	e018      	b.n	800be84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be52:	4b95      	ldr	r3, [pc, #596]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a94      	ldr	r2, [pc, #592]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be5e:	f7f9 fb05 	bl	800546c <HAL_GetTick>
 800be62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be64:	e008      	b.n	800be78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be66:	f7f9 fb01 	bl	800546c <HAL_GetTick>
 800be6a:	4602      	mov	r2, r0
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	2b02      	cmp	r3, #2
 800be72:	d901      	bls.n	800be78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800be74:	2303      	movs	r3, #3
 800be76:	e2ed      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be78:	4b8b      	ldr	r3, [pc, #556]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1f0      	bne.n	800be66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 80a9 	beq.w	800bfe4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be92:	4b85      	ldr	r3, [pc, #532]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800be9c:	4b82      	ldr	r3, [pc, #520]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800be9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	d007      	beq.n	800beb8 <HAL_RCC_OscConfig+0x308>
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	2b18      	cmp	r3, #24
 800beac:	d13a      	bne.n	800bf24 <HAL_RCC_OscConfig+0x374>
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f003 0303 	and.w	r3, r3, #3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d135      	bne.n	800bf24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800beb8:	4b7b      	ldr	r3, [pc, #492]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <HAL_RCC_OscConfig+0x320>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	69db      	ldr	r3, [r3, #28]
 800bec8:	2b80      	cmp	r3, #128	; 0x80
 800beca:	d001      	beq.n	800bed0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e2c1      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bed0:	f7f9 fafc 	bl	80054cc <HAL_GetREVID>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f241 0203 	movw	r2, #4099	; 0x1003
 800beda:	4293      	cmp	r3, r2
 800bedc:	d817      	bhi.n	800bf0e <HAL_RCC_OscConfig+0x35e>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d108      	bne.n	800bef8 <HAL_RCC_OscConfig+0x348>
 800bee6:	4b70      	ldr	r3, [pc, #448]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800beee:	4a6e      	ldr	r2, [pc, #440]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bef4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bef6:	e075      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bef8:	4b6b      	ldr	r3, [pc, #428]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a1b      	ldr	r3, [r3, #32]
 800bf04:	069b      	lsls	r3, r3, #26
 800bf06:	4968      	ldr	r1, [pc, #416]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf0c:	e06a      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf0e:	4b66      	ldr	r3, [pc, #408]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	061b      	lsls	r3, r3, #24
 800bf1c:	4962      	ldr	r1, [pc, #392]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf22:	e05f      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	69db      	ldr	r3, [r3, #28]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d042      	beq.n	800bfb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bf2c:	4b5e      	ldr	r3, [pc, #376]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a5d      	ldr	r2, [pc, #372]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf38:	f7f9 fa98 	bl	800546c <HAL_GetTick>
 800bf3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf3e:	e008      	b.n	800bf52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bf40:	f7f9 fa94 	bl	800546c <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d901      	bls.n	800bf52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e280      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf52:	4b55      	ldr	r3, [pc, #340]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0f0      	beq.n	800bf40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf5e:	f7f9 fab5 	bl	80054cc <HAL_GetREVID>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f241 0203 	movw	r2, #4099	; 0x1003
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d817      	bhi.n	800bf9c <HAL_RCC_OscConfig+0x3ec>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	2b20      	cmp	r3, #32
 800bf72:	d108      	bne.n	800bf86 <HAL_RCC_OscConfig+0x3d6>
 800bf74:	4b4c      	ldr	r3, [pc, #304]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bf7c:	4a4a      	ldr	r2, [pc, #296]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf82:	6053      	str	r3, [r2, #4]
 800bf84:	e02e      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
 800bf86:	4b48      	ldr	r3, [pc, #288]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	069b      	lsls	r3, r3, #26
 800bf94:	4944      	ldr	r1, [pc, #272]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	604b      	str	r3, [r1, #4]
 800bf9a:	e023      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
 800bf9c:	4b42      	ldr	r3, [pc, #264]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	061b      	lsls	r3, r3, #24
 800bfaa:	493f      	ldr	r1, [pc, #252]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	60cb      	str	r3, [r1, #12]
 800bfb0:	e018      	b.n	800bfe4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bfb2:	4b3d      	ldr	r3, [pc, #244]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a3c      	ldr	r2, [pc, #240]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bfb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfbe:	f7f9 fa55 	bl	800546c <HAL_GetTick>
 800bfc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bfc4:	e008      	b.n	800bfd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfc6:	f7f9 fa51 	bl	800546c <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d901      	bls.n	800bfd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e23d      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bfd8:	4b33      	ldr	r3, [pc, #204]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1f0      	bne.n	800bfc6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 0308 	and.w	r3, r3, #8
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d036      	beq.n	800c05e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d019      	beq.n	800c02c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bff8:	4b2b      	ldr	r3, [pc, #172]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bffc:	4a2a      	ldr	r2, [pc, #168]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800bffe:	f043 0301 	orr.w	r3, r3, #1
 800c002:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c004:	f7f9 fa32 	bl	800546c <HAL_GetTick>
 800c008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c00a:	e008      	b.n	800c01e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c00c:	f7f9 fa2e 	bl	800546c <HAL_GetTick>
 800c010:	4602      	mov	r2, r0
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	2b02      	cmp	r3, #2
 800c018:	d901      	bls.n	800c01e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e21a      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c01e:	4b22      	ldr	r3, [pc, #136]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0f0      	beq.n	800c00c <HAL_RCC_OscConfig+0x45c>
 800c02a:	e018      	b.n	800c05e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c02c:	4b1e      	ldr	r3, [pc, #120]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c030:	4a1d      	ldr	r2, [pc, #116]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c032:	f023 0301 	bic.w	r3, r3, #1
 800c036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c038:	f7f9 fa18 	bl	800546c <HAL_GetTick>
 800c03c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c040:	f7f9 fa14 	bl	800546c <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e200      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1f0      	bne.n	800c040 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0320 	and.w	r3, r3, #32
 800c066:	2b00      	cmp	r3, #0
 800c068:	d039      	beq.n	800c0de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d01c      	beq.n	800c0ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a0c      	ldr	r2, [pc, #48]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c07c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c07e:	f7f9 f9f5 	bl	800546c <HAL_GetTick>
 800c082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c084:	e008      	b.n	800c098 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c086:	f7f9 f9f1 	bl	800546c <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	2b02      	cmp	r3, #2
 800c092:	d901      	bls.n	800c098 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c094:	2303      	movs	r3, #3
 800c096:	e1dd      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c098:	4b03      	ldr	r3, [pc, #12]	; (800c0a8 <HAL_RCC_OscConfig+0x4f8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0f0      	beq.n	800c086 <HAL_RCC_OscConfig+0x4d6>
 800c0a4:	e01b      	b.n	800c0de <HAL_RCC_OscConfig+0x52e>
 800c0a6:	bf00      	nop
 800c0a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c0ac:	4b9b      	ldr	r3, [pc, #620]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a9a      	ldr	r2, [pc, #616]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c0b8:	f7f9 f9d8 	bl	800546c <HAL_GetTick>
 800c0bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c0be:	e008      	b.n	800c0d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0c0:	f7f9 f9d4 	bl	800546c <HAL_GetTick>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d901      	bls.n	800c0d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e1c0      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c0d2:	4b92      	ldr	r3, [pc, #584]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1f0      	bne.n	800c0c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 8081 	beq.w	800c1ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c0ec:	4b8c      	ldr	r3, [pc, #560]	; (800c320 <HAL_RCC_OscConfig+0x770>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a8b      	ldr	r2, [pc, #556]	; (800c320 <HAL_RCC_OscConfig+0x770>)
 800c0f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0f8:	f7f9 f9b8 	bl	800546c <HAL_GetTick>
 800c0fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0fe:	e008      	b.n	800c112 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c100:	f7f9 f9b4 	bl	800546c <HAL_GetTick>
 800c104:	4602      	mov	r2, r0
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	2b64      	cmp	r3, #100	; 0x64
 800c10c:	d901      	bls.n	800c112 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c10e:	2303      	movs	r3, #3
 800c110:	e1a0      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c112:	4b83      	ldr	r3, [pc, #524]	; (800c320 <HAL_RCC_OscConfig+0x770>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0f0      	beq.n	800c100 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d106      	bne.n	800c134 <HAL_RCC_OscConfig+0x584>
 800c126:	4b7d      	ldr	r3, [pc, #500]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12a:	4a7c      	ldr	r2, [pc, #496]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c12c:	f043 0301 	orr.w	r3, r3, #1
 800c130:	6713      	str	r3, [r2, #112]	; 0x70
 800c132:	e02d      	b.n	800c190 <HAL_RCC_OscConfig+0x5e0>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10c      	bne.n	800c156 <HAL_RCC_OscConfig+0x5a6>
 800c13c:	4b77      	ldr	r3, [pc, #476]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c140:	4a76      	ldr	r2, [pc, #472]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c142:	f023 0301 	bic.w	r3, r3, #1
 800c146:	6713      	str	r3, [r2, #112]	; 0x70
 800c148:	4b74      	ldr	r3, [pc, #464]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c14c:	4a73      	ldr	r2, [pc, #460]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c14e:	f023 0304 	bic.w	r3, r3, #4
 800c152:	6713      	str	r3, [r2, #112]	; 0x70
 800c154:	e01c      	b.n	800c190 <HAL_RCC_OscConfig+0x5e0>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b05      	cmp	r3, #5
 800c15c:	d10c      	bne.n	800c178 <HAL_RCC_OscConfig+0x5c8>
 800c15e:	4b6f      	ldr	r3, [pc, #444]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c162:	4a6e      	ldr	r2, [pc, #440]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c164:	f043 0304 	orr.w	r3, r3, #4
 800c168:	6713      	str	r3, [r2, #112]	; 0x70
 800c16a:	4b6c      	ldr	r3, [pc, #432]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c16e:	4a6b      	ldr	r2, [pc, #428]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	6713      	str	r3, [r2, #112]	; 0x70
 800c176:	e00b      	b.n	800c190 <HAL_RCC_OscConfig+0x5e0>
 800c178:	4b68      	ldr	r3, [pc, #416]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17c:	4a67      	ldr	r2, [pc, #412]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c17e:	f023 0301 	bic.w	r3, r3, #1
 800c182:	6713      	str	r3, [r2, #112]	; 0x70
 800c184:	4b65      	ldr	r3, [pc, #404]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c188:	4a64      	ldr	r2, [pc, #400]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c18a:	f023 0304 	bic.w	r3, r3, #4
 800c18e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d015      	beq.n	800c1c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c198:	f7f9 f968 	bl	800546c <HAL_GetTick>
 800c19c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c19e:	e00a      	b.n	800c1b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1a0:	f7f9 f964 	bl	800546c <HAL_GetTick>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d901      	bls.n	800c1b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e14e      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1b6:	4b59      	ldr	r3, [pc, #356]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0ee      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x5f0>
 800c1c2:	e014      	b.n	800c1ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1c4:	f7f9 f952 	bl	800546c <HAL_GetTick>
 800c1c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c1ca:	e00a      	b.n	800c1e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1cc:	f7f9 f94e 	bl	800546c <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d901      	bls.n	800c1e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e138      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c1e2:	4b4e      	ldr	r3, [pc, #312]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e6:	f003 0302 	and.w	r3, r3, #2
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1ee      	bne.n	800c1cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 812d 	beq.w	800c452 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c1f8:	4b48      	ldr	r3, [pc, #288]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c200:	2b18      	cmp	r3, #24
 800c202:	f000 80bd 	beq.w	800c380 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	f040 809e 	bne.w	800c34c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c210:	4b42      	ldr	r3, [pc, #264]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a41      	ldr	r2, [pc, #260]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c21c:	f7f9 f926 	bl	800546c <HAL_GetTick>
 800c220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c222:	e008      	b.n	800c236 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c224:	f7f9 f922 	bl	800546c <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d901      	bls.n	800c236 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e10e      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c236:	4b39      	ldr	r3, [pc, #228]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f0      	bne.n	800c224 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c242:	4b36      	ldr	r3, [pc, #216]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c246:	4b37      	ldr	r3, [pc, #220]	; (800c324 <HAL_RCC_OscConfig+0x774>)
 800c248:	4013      	ands	r3, r2
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c252:	0112      	lsls	r2, r2, #4
 800c254:	430a      	orrs	r2, r1
 800c256:	4931      	ldr	r1, [pc, #196]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c258:	4313      	orrs	r3, r2
 800c25a:	628b      	str	r3, [r1, #40]	; 0x28
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	3b01      	subs	r3, #1
 800c262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26a:	3b01      	subs	r3, #1
 800c26c:	025b      	lsls	r3, r3, #9
 800c26e:	b29b      	uxth	r3, r3
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c276:	3b01      	subs	r3, #1
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c284:	3b01      	subs	r3, #1
 800c286:	061b      	lsls	r3, r3, #24
 800c288:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c28c:	4923      	ldr	r1, [pc, #140]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c292:	4b22      	ldr	r3, [pc, #136]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	4a21      	ldr	r2, [pc, #132]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c298:	f023 0301 	bic.w	r3, r3, #1
 800c29c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c29e:	4b1f      	ldr	r3, [pc, #124]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a2:	4b21      	ldr	r3, [pc, #132]	; (800c328 <HAL_RCC_OscConfig+0x778>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c2aa:	00d2      	lsls	r2, r2, #3
 800c2ac:	491b      	ldr	r1, [pc, #108]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c2b2:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b6:	f023 020c 	bic.w	r2, r3, #12
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	4917      	ldr	r1, [pc, #92]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c2c4:	4b15      	ldr	r3, [pc, #84]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	f023 0202 	bic.w	r2, r3, #2
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d0:	4912      	ldr	r1, [pc, #72]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	4a10      	ldr	r2, [pc, #64]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2e2:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	4a0d      	ldr	r2, [pc, #52]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c2ee:	4b0b      	ldr	r3, [pc, #44]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f2:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c2fa:	4b08      	ldr	r3, [pc, #32]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	4a07      	ldr	r2, [pc, #28]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c300:	f043 0301 	orr.w	r3, r3, #1
 800c304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a04      	ldr	r2, [pc, #16]	; (800c31c <HAL_RCC_OscConfig+0x76c>)
 800c30c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c312:	f7f9 f8ab 	bl	800546c <HAL_GetTick>
 800c316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c318:	e011      	b.n	800c33e <HAL_RCC_OscConfig+0x78e>
 800c31a:	bf00      	nop
 800c31c:	58024400 	.word	0x58024400
 800c320:	58024800 	.word	0x58024800
 800c324:	fffffc0c 	.word	0xfffffc0c
 800c328:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c32c:	f7f9 f89e 	bl	800546c <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e08a      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c33e:	4b47      	ldr	r3, [pc, #284]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0f0      	beq.n	800c32c <HAL_RCC_OscConfig+0x77c>
 800c34a:	e082      	b.n	800c452 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c34c:	4b43      	ldr	r3, [pc, #268]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a42      	ldr	r2, [pc, #264]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c358:	f7f9 f888 	bl	800546c <HAL_GetTick>
 800c35c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c35e:	e008      	b.n	800c372 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c360:	f7f9 f884 	bl	800546c <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e070      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c372:	4b3a      	ldr	r3, [pc, #232]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f0      	bne.n	800c360 <HAL_RCC_OscConfig+0x7b0>
 800c37e:	e068      	b.n	800c452 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c380:	4b36      	ldr	r3, [pc, #216]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c386:	4b35      	ldr	r3, [pc, #212]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	2b01      	cmp	r3, #1
 800c392:	d031      	beq.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	f003 0203 	and.w	r2, r3, #3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d12a      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	091b      	lsrs	r3, r3, #4
 800c3a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d122      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d11a      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	0a5b      	lsrs	r3, r3, #9
 800c3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d111      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	0c1b      	lsrs	r3, r3, #16
 800c3d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d108      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	0e1b      	lsrs	r3, r3, #24
 800c3ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d001      	beq.n	800c3fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e02b      	b.n	800c454 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c3fc:	4b17      	ldr	r3, [pc, #92]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c400:	08db      	lsrs	r3, r3, #3
 800c402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c406:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d01f      	beq.n	800c452 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c412:	4b12      	ldr	r3, [pc, #72]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	4a11      	ldr	r2, [pc, #68]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c41e:	f7f9 f825 	bl	800546c <HAL_GetTick>
 800c422:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c424:	bf00      	nop
 800c426:	f7f9 f821 	bl	800546c <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	4293      	cmp	r3, r2
 800c430:	d0f9      	beq.n	800c426 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c432:	4b0a      	ldr	r3, [pc, #40]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <HAL_RCC_OscConfig+0x8b0>)
 800c438:	4013      	ands	r3, r2
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c43e:	00d2      	lsls	r2, r2, #3
 800c440:	4906      	ldr	r1, [pc, #24]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c442:	4313      	orrs	r3, r2
 800c444:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44a:	4a04      	ldr	r2, [pc, #16]	; (800c45c <HAL_RCC_OscConfig+0x8ac>)
 800c44c:	f043 0301 	orr.w	r3, r3, #1
 800c450:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3730      	adds	r7, #48	; 0x30
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	58024400 	.word	0x58024400
 800c460:	ffff0007 	.word	0xffff0007

0800c464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e19c      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c478:	4b8a      	ldr	r3, [pc, #552]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 030f 	and.w	r3, r3, #15
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	429a      	cmp	r2, r3
 800c484:	d910      	bls.n	800c4a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c486:	4b87      	ldr	r3, [pc, #540]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f023 020f 	bic.w	r2, r3, #15
 800c48e:	4985      	ldr	r1, [pc, #532]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	4313      	orrs	r3, r2
 800c494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c496:	4b83      	ldr	r3, [pc, #524]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 030f 	and.w	r3, r3, #15
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d001      	beq.n	800c4a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e184      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d010      	beq.n	800c4d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	4b7b      	ldr	r3, [pc, #492]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d908      	bls.n	800c4d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c4c4:	4b78      	ldr	r3, [pc, #480]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	4975      	ldr	r1, [pc, #468]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d010      	beq.n	800c504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	695a      	ldr	r2, [r3, #20]
 800c4e6:	4b70      	ldr	r3, [pc, #448]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d908      	bls.n	800c504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c4f2:	4b6d      	ldr	r3, [pc, #436]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	496a      	ldr	r1, [pc, #424]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c500:	4313      	orrs	r3, r2
 800c502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0310 	and.w	r3, r3, #16
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d010      	beq.n	800c532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	699a      	ldr	r2, [r3, #24]
 800c514:	4b64      	ldr	r3, [pc, #400]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d908      	bls.n	800c532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c520:	4b61      	ldr	r3, [pc, #388]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	495e      	ldr	r1, [pc, #376]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c52e:	4313      	orrs	r3, r2
 800c530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d010      	beq.n	800c560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	69da      	ldr	r2, [r3, #28]
 800c542:	4b59      	ldr	r3, [pc, #356]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d908      	bls.n	800c560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c54e:	4b56      	ldr	r3, [pc, #344]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	4953      	ldr	r1, [pc, #332]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c55c:	4313      	orrs	r3, r2
 800c55e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d010      	beq.n	800c58e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68da      	ldr	r2, [r3, #12]
 800c570:	4b4d      	ldr	r3, [pc, #308]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	f003 030f 	and.w	r3, r3, #15
 800c578:	429a      	cmp	r2, r3
 800c57a:	d908      	bls.n	800c58e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c57c:	4b4a      	ldr	r3, [pc, #296]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	f023 020f 	bic.w	r2, r3, #15
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4947      	ldr	r1, [pc, #284]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d055      	beq.n	800c646 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c59a:	4b43      	ldr	r3, [pc, #268]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	4940      	ldr	r1, [pc, #256]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d107      	bne.n	800c5c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c5b4:	4b3c      	ldr	r3, [pc, #240]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d121      	bne.n	800c604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e0f6      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	2b03      	cmp	r3, #3
 800c5ca:	d107      	bne.n	800c5dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c5cc:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d115      	bne.n	800c604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e0ea      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d107      	bne.n	800c5f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c5e4:	4b30      	ldr	r3, [pc, #192]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d109      	bne.n	800c604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e0de      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c5f4:	4b2c      	ldr	r3, [pc, #176]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e0d6      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c604:	4b28      	ldr	r3, [pc, #160]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	f023 0207 	bic.w	r2, r3, #7
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	4925      	ldr	r1, [pc, #148]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c612:	4313      	orrs	r3, r2
 800c614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c616:	f7f8 ff29 	bl	800546c <HAL_GetTick>
 800c61a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c61c:	e00a      	b.n	800c634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c61e:	f7f8 ff25 	bl	800546c <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f241 3288 	movw	r2, #5000	; 0x1388
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d901      	bls.n	800c634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e0be      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c634:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	429a      	cmp	r2, r3
 800c644:	d1eb      	bne.n	800c61e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d010      	beq.n	800c674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	f003 030f 	and.w	r3, r3, #15
 800c65e:	429a      	cmp	r2, r3
 800c660:	d208      	bcs.n	800c674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c662:	4b11      	ldr	r3, [pc, #68]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	f023 020f 	bic.w	r2, r3, #15
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	490e      	ldr	r1, [pc, #56]	; (800c6a8 <HAL_RCC_ClockConfig+0x244>)
 800c670:	4313      	orrs	r3, r2
 800c672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 030f 	and.w	r3, r3, #15
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d214      	bcs.n	800c6ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f023 020f 	bic.w	r2, r3, #15
 800c68a:	4906      	ldr	r1, [pc, #24]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	4313      	orrs	r3, r2
 800c690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c692:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <HAL_RCC_ClockConfig+0x240>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 030f 	and.w	r3, r3, #15
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d005      	beq.n	800c6ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e086      	b.n	800c7b2 <HAL_RCC_ClockConfig+0x34e>
 800c6a4:	52002000 	.word	0x52002000
 800c6a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d010      	beq.n	800c6da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	691a      	ldr	r2, [r3, #16]
 800c6bc:	4b3f      	ldr	r3, [pc, #252]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d208      	bcs.n	800c6da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c6c8:	4b3c      	ldr	r3, [pc, #240]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	4939      	ldr	r1, [pc, #228]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0308 	and.w	r3, r3, #8
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d010      	beq.n	800c708 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695a      	ldr	r2, [r3, #20]
 800c6ea:	4b34      	ldr	r3, [pc, #208]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d208      	bcs.n	800c708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c6f6:	4b31      	ldr	r3, [pc, #196]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	492e      	ldr	r1, [pc, #184]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c704:	4313      	orrs	r3, r2
 800c706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0310 	and.w	r3, r3, #16
 800c710:	2b00      	cmp	r3, #0
 800c712:	d010      	beq.n	800c736 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	699a      	ldr	r2, [r3, #24]
 800c718:	4b28      	ldr	r3, [pc, #160]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c720:	429a      	cmp	r2, r3
 800c722:	d208      	bcs.n	800c736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c724:	4b25      	ldr	r3, [pc, #148]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	4922      	ldr	r1, [pc, #136]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c732:	4313      	orrs	r3, r2
 800c734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0320 	and.w	r3, r3, #32
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d010      	beq.n	800c764 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	69da      	ldr	r2, [r3, #28]
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c74e:	429a      	cmp	r2, r3
 800c750:	d208      	bcs.n	800c764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c752:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	4917      	ldr	r1, [pc, #92]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c760:	4313      	orrs	r3, r2
 800c762:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c764:	f000 f834 	bl	800c7d0 <HAL_RCC_GetSysClockFreq>
 800c768:	4602      	mov	r2, r0
 800c76a:	4b14      	ldr	r3, [pc, #80]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	f003 030f 	and.w	r3, r3, #15
 800c774:	4912      	ldr	r1, [pc, #72]	; (800c7c0 <HAL_RCC_ClockConfig+0x35c>)
 800c776:	5ccb      	ldrb	r3, [r1, r3]
 800c778:	f003 031f 	and.w	r3, r3, #31
 800c77c:	fa22 f303 	lsr.w	r3, r2, r3
 800c780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c782:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <HAL_RCC_ClockConfig+0x358>)
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	f003 030f 	and.w	r3, r3, #15
 800c78a:	4a0d      	ldr	r2, [pc, #52]	; (800c7c0 <HAL_RCC_ClockConfig+0x35c>)
 800c78c:	5cd3      	ldrb	r3, [r2, r3]
 800c78e:	f003 031f 	and.w	r3, r3, #31
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	fa22 f303 	lsr.w	r3, r2, r3
 800c798:	4a0a      	ldr	r2, [pc, #40]	; (800c7c4 <HAL_RCC_ClockConfig+0x360>)
 800c79a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c79c:	4a0a      	ldr	r2, [pc, #40]	; (800c7c8 <HAL_RCC_ClockConfig+0x364>)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <HAL_RCC_ClockConfig+0x368>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7f8 fe16 	bl	80053d8 <HAL_InitTick>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3718      	adds	r7, #24
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	58024400 	.word	0x58024400
 800c7c0:	0801819c 	.word	0x0801819c
 800c7c4:	2000001c 	.word	0x2000001c
 800c7c8:	20000018 	.word	0x20000018
 800c7cc:	20000040 	.word	0x20000040

0800c7d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b089      	sub	sp, #36	; 0x24
 800c7d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7d6:	4bb3      	ldr	r3, [pc, #716]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7de:	2b18      	cmp	r3, #24
 800c7e0:	f200 8155 	bhi.w	800ca8e <HAL_RCC_GetSysClockFreq+0x2be>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <HAL_RCC_GetSysClockFreq+0x1c>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c851 	.word	0x0800c851
 800c7f0:	0800ca8f 	.word	0x0800ca8f
 800c7f4:	0800ca8f 	.word	0x0800ca8f
 800c7f8:	0800ca8f 	.word	0x0800ca8f
 800c7fc:	0800ca8f 	.word	0x0800ca8f
 800c800:	0800ca8f 	.word	0x0800ca8f
 800c804:	0800ca8f 	.word	0x0800ca8f
 800c808:	0800ca8f 	.word	0x0800ca8f
 800c80c:	0800c877 	.word	0x0800c877
 800c810:	0800ca8f 	.word	0x0800ca8f
 800c814:	0800ca8f 	.word	0x0800ca8f
 800c818:	0800ca8f 	.word	0x0800ca8f
 800c81c:	0800ca8f 	.word	0x0800ca8f
 800c820:	0800ca8f 	.word	0x0800ca8f
 800c824:	0800ca8f 	.word	0x0800ca8f
 800c828:	0800ca8f 	.word	0x0800ca8f
 800c82c:	0800c87d 	.word	0x0800c87d
 800c830:	0800ca8f 	.word	0x0800ca8f
 800c834:	0800ca8f 	.word	0x0800ca8f
 800c838:	0800ca8f 	.word	0x0800ca8f
 800c83c:	0800ca8f 	.word	0x0800ca8f
 800c840:	0800ca8f 	.word	0x0800ca8f
 800c844:	0800ca8f 	.word	0x0800ca8f
 800c848:	0800ca8f 	.word	0x0800ca8f
 800c84c:	0800c883 	.word	0x0800c883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c850:	4b94      	ldr	r3, [pc, #592]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0320 	and.w	r3, r3, #32
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d009      	beq.n	800c870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85c:	4b91      	ldr	r3, [pc, #580]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	08db      	lsrs	r3, r3, #3
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	4a90      	ldr	r2, [pc, #576]	; (800caa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c868:	fa22 f303 	lsr.w	r3, r2, r3
 800c86c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c86e:	e111      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c870:	4b8d      	ldr	r3, [pc, #564]	; (800caa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c872:	61bb      	str	r3, [r7, #24]
      break;
 800c874:	e10e      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c876:	4b8d      	ldr	r3, [pc, #564]	; (800caac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c878:	61bb      	str	r3, [r7, #24]
      break;
 800c87a:	e10b      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c87c:	4b8c      	ldr	r3, [pc, #560]	; (800cab0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c87e:	61bb      	str	r3, [r7, #24]
      break;
 800c880:	e108      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c882:	4b88      	ldr	r3, [pc, #544]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c88c:	4b85      	ldr	r3, [pc, #532]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c890:	091b      	lsrs	r3, r3, #4
 800c892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c896:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c898:	4b82      	ldr	r3, [pc, #520]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c8a2:	4b80      	ldr	r3, [pc, #512]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a6:	08db      	lsrs	r3, r3, #3
 800c8a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	fb02 f303 	mul.w	r3, r2, r3
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 80e1 	beq.w	800ca88 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	f000 8083 	beq.w	800c9d4 <HAL_RCC_GetSysClockFreq+0x204>
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	f200 80a1 	bhi.w	800ca18 <HAL_RCC_GetSysClockFreq+0x248>
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <HAL_RCC_GetSysClockFreq+0x114>
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d056      	beq.n	800c990 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c8e2:	e099      	b.n	800ca18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e4:	4b6f      	ldr	r3, [pc, #444]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d02d      	beq.n	800c94c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8f0:	4b6c      	ldr	r3, [pc, #432]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	08db      	lsrs	r3, r3, #3
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	4a6b      	ldr	r2, [pc, #428]	; (800caa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c900:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	ee07 3a90 	vmov	s15, r3
 800c908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c91a:	4b62      	ldr	r3, [pc, #392]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c92a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c92e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c946:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c94a:	e087      	b.n	800ca5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cab8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c95e:	4b51      	ldr	r3, [pc, #324]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c972:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c98a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c98e:	e065      	b.n	800ca5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cabc <HAL_RCC_GetSysClockFreq+0x2ec>
 800c99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a2:	4b40      	ldr	r3, [pc, #256]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c9d2:	e043      	b.n	800ca5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cac0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e6:	4b2f      	ldr	r3, [pc, #188]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca16:	e021      	b.n	800ca5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cabc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca2a:	4b1e      	ldr	r3, [pc, #120]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca60:	0a5b      	lsrs	r3, r3, #9
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	3301      	adds	r3, #1
 800ca68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	ee07 3a90 	vmov	s15, r3
 800ca70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca80:	ee17 3a90 	vmov	r3, s15
 800ca84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ca86:	e005      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	61bb      	str	r3, [r7, #24]
      break;
 800ca8c:	e002      	b.n	800ca94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ca8e:	4b07      	ldr	r3, [pc, #28]	; (800caac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ca90:	61bb      	str	r3, [r7, #24]
      break;
 800ca92:	bf00      	nop
  }

  return sysclockfreq;
 800ca94:	69bb      	ldr	r3, [r7, #24]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3724      	adds	r7, #36	; 0x24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	58024400 	.word	0x58024400
 800caa8:	03d09000 	.word	0x03d09000
 800caac:	003d0900 	.word	0x003d0900
 800cab0:	017d7840 	.word	0x017d7840
 800cab4:	46000000 	.word	0x46000000
 800cab8:	4c742400 	.word	0x4c742400
 800cabc:	4a742400 	.word	0x4a742400
 800cac0:	4bbebc20 	.word	0x4bbebc20

0800cac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800caca:	f7ff fe81 	bl	800c7d0 <HAL_RCC_GetSysClockFreq>
 800cace:	4602      	mov	r2, r0
 800cad0:	4b10      	ldr	r3, [pc, #64]	; (800cb14 <HAL_RCC_GetHCLKFreq+0x50>)
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	0a1b      	lsrs	r3, r3, #8
 800cad6:	f003 030f 	and.w	r3, r3, #15
 800cada:	490f      	ldr	r1, [pc, #60]	; (800cb18 <HAL_RCC_GetHCLKFreq+0x54>)
 800cadc:	5ccb      	ldrb	r3, [r1, r3]
 800cade:	f003 031f 	and.w	r3, r3, #31
 800cae2:	fa22 f303 	lsr.w	r3, r2, r3
 800cae6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cae8:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <HAL_RCC_GetHCLKFreq+0x50>)
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	f003 030f 	and.w	r3, r3, #15
 800caf0:	4a09      	ldr	r2, [pc, #36]	; (800cb18 <HAL_RCC_GetHCLKFreq+0x54>)
 800caf2:	5cd3      	ldrb	r3, [r2, r3]
 800caf4:	f003 031f 	and.w	r3, r3, #31
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	fa22 f303 	lsr.w	r3, r2, r3
 800cafe:	4a07      	ldr	r2, [pc, #28]	; (800cb1c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb02:	4a07      	ldr	r2, [pc, #28]	; (800cb20 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	58024400 	.word	0x58024400
 800cb18:	0801819c 	.word	0x0801819c
 800cb1c:	2000001c 	.word	0x2000001c
 800cb20:	20000018 	.word	0x20000018

0800cb24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cb28:	f7ff ffcc 	bl	800cac4 <HAL_RCC_GetHCLKFreq>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	4b06      	ldr	r3, [pc, #24]	; (800cb48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	091b      	lsrs	r3, r3, #4
 800cb34:	f003 0307 	and.w	r3, r3, #7
 800cb38:	4904      	ldr	r1, [pc, #16]	; (800cb4c <HAL_RCC_GetPCLK1Freq+0x28>)
 800cb3a:	5ccb      	ldrb	r3, [r1, r3]
 800cb3c:	f003 031f 	and.w	r3, r3, #31
 800cb40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	58024400 	.word	0x58024400
 800cb4c:	0801819c 	.word	0x0801819c

0800cb50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cb54:	f7ff ffb6 	bl	800cac4 <HAL_RCC_GetHCLKFreq>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	0a1b      	lsrs	r3, r3, #8
 800cb60:	f003 0307 	and.w	r3, r3, #7
 800cb64:	4904      	ldr	r1, [pc, #16]	; (800cb78 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cb66:	5ccb      	ldrb	r3, [r1, r3]
 800cb68:	f003 031f 	and.w	r3, r3, #31
 800cb6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	58024400 	.word	0x58024400
 800cb78:	0801819c 	.word	0x0801819c

0800cb7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb80:	b0ca      	sub	sp, #296	; 0x128
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800cba0:	2500      	movs	r5, #0
 800cba2:	ea54 0305 	orrs.w	r3, r4, r5
 800cba6:	d049      	beq.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cbb2:	d02f      	beq.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cbb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cbb8:	d828      	bhi.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cbba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbbe:	d01a      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cbc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbc4:	d822      	bhi.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cbca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbce:	d007      	beq.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cbd0:	e01c      	b.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbd2:	4bb8      	ldr	r3, [pc, #736]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	4ab7      	ldr	r2, [pc, #732]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cbde:	e01a      	b.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	2102      	movs	r1, #2
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f002 fb61 	bl	800f2b0 <RCCEx_PLL2_Config>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cbf4:	e00f      	b.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbfa:	3328      	adds	r3, #40	; 0x28
 800cbfc:	2102      	movs	r1, #2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f002 fc08 	bl	800f414 <RCCEx_PLL3_Config>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc0a:	e004      	b.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc12:	e000      	b.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cc14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10a      	bne.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cc1e:	4ba5      	ldr	r3, [pc, #660]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc2c:	4aa1      	ldr	r2, [pc, #644]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc2e:	430b      	orrs	r3, r1
 800cc30:	6513      	str	r3, [r2, #80]	; 0x50
 800cc32:	e003      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800cc48:	f04f 0900 	mov.w	r9, #0
 800cc4c:	ea58 0309 	orrs.w	r3, r8, r9
 800cc50:	d047      	beq.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d82a      	bhi.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cc5c:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc62:	bf00      	nop
 800cc64:	0800cc79 	.word	0x0800cc79
 800cc68:	0800cc87 	.word	0x0800cc87
 800cc6c:	0800cc9d 	.word	0x0800cc9d
 800cc70:	0800ccbb 	.word	0x0800ccbb
 800cc74:	0800ccbb 	.word	0x0800ccbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc78:	4b8e      	ldr	r3, [pc, #568]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7c:	4a8d      	ldr	r2, [pc, #564]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc84:	e01a      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f002 fb0e 	bl	800f2b0 <RCCEx_PLL2_Config>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc9a:	e00f      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cca0:	3328      	adds	r3, #40	; 0x28
 800cca2:	2100      	movs	r1, #0
 800cca4:	4618      	mov	r0, r3
 800cca6:	f002 fbb5 	bl	800f414 <RCCEx_PLL3_Config>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccb0:	e004      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccb8:	e000      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ccba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ccc4:	4b7b      	ldr	r3, [pc, #492]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccc8:	f023 0107 	bic.w	r1, r3, #7
 800cccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd2:	4a78      	ldr	r2, [pc, #480]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6513      	str	r3, [r2, #80]	; 0x50
 800ccd8:	e003      	b.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ccee:	f04f 0b00 	mov.w	fp, #0
 800ccf2:	ea5a 030b 	orrs.w	r3, sl, fp
 800ccf6:	d04c      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ccf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd02:	d030      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd08:	d829      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd0a:	2bc0      	cmp	r3, #192	; 0xc0
 800cd0c:	d02d      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cd0e:	2bc0      	cmp	r3, #192	; 0xc0
 800cd10:	d825      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd12:	2b80      	cmp	r3, #128	; 0x80
 800cd14:	d018      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cd16:	2b80      	cmp	r3, #128	; 0x80
 800cd18:	d821      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cd1e:	2b40      	cmp	r3, #64	; 0x40
 800cd20:	d007      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cd22:	e01c      	b.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd24:	4b63      	ldr	r3, [pc, #396]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	4a62      	ldr	r2, [pc, #392]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cd30:	e01c      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd36:	3308      	adds	r3, #8
 800cd38:	2100      	movs	r1, #0
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f002 fab8 	bl	800f2b0 <RCCEx_PLL2_Config>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cd46:	e011      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd4c:	3328      	adds	r3, #40	; 0x28
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f002 fb5f 	bl	800f414 <RCCEx_PLL3_Config>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cd5c:	e006      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd64:	e002      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cd66:	bf00      	nop
 800cd68:	e000      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cd6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cd74:	4b4f      	ldr	r3, [pc, #316]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd78:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800cd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd82:	4a4c      	ldr	r2, [pc, #304]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd84:	430b      	orrs	r3, r1
 800cd86:	6513      	str	r3, [r2, #80]	; 0x50
 800cd88:	e003      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cd9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cda2:	2300      	movs	r3, #0
 800cda4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cda8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d053      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cdba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdbe:	d035      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cdc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdc4:	d82e      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cdc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdca:	d031      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cdcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdd0:	d828      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cdd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdd6:	d01a      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cdd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cddc:	d822      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cde2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cde6:	d007      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cde8:	e01c      	b.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdea:	4b32      	ldr	r3, [pc, #200]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdee:	4a31      	ldr	r2, [pc, #196]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cdf6:	e01c      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	2100      	movs	r1, #0
 800ce00:	4618      	mov	r0, r3
 800ce02:	f002 fa55 	bl	800f2b0 <RCCEx_PLL2_Config>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce0c:	e011      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce12:	3328      	adds	r3, #40	; 0x28
 800ce14:	2100      	movs	r1, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f002 fafc 	bl	800f414 <RCCEx_PLL3_Config>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce22:	e006      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce2a:	e002      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ce2c:	bf00      	nop
 800ce2e:	e000      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ce30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10b      	bne.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ce3a:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ce42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce4a:	4a1a      	ldr	r2, [pc, #104]	; (800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ce50:	e003      	b.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ce5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ce66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ce70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ce74:	460b      	mov	r3, r1
 800ce76:	4313      	orrs	r3, r2
 800ce78:	d056      	beq.n	800cf28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ce7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce86:	d038      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ce88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce8c:	d831      	bhi.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce92:	d034      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ce94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce98:	d82b      	bhi.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce9e:	d01d      	beq.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cea4:	d825      	bhi.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ceaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ceae:	d00a      	beq.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ceb0:	e01f      	b.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ceb2:	bf00      	nop
 800ceb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ceb8:	4ba2      	ldr	r3, [pc, #648]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	4aa1      	ldr	r2, [pc, #644]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cec4:	e01c      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceca:	3308      	adds	r3, #8
 800cecc:	2100      	movs	r1, #0
 800cece:	4618      	mov	r0, r3
 800ced0:	f002 f9ee 	bl	800f2b0 <RCCEx_PLL2_Config>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ceda:	e011      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cee0:	3328      	adds	r3, #40	; 0x28
 800cee2:	2100      	movs	r1, #0
 800cee4:	4618      	mov	r0, r3
 800cee6:	f002 fa95 	bl	800f414 <RCCEx_PLL3_Config>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cef0:	e006      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cef8:	e002      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cefa:	bf00      	nop
 800cefc:	e000      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cefe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10b      	bne.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf08:	4b8e      	ldr	r3, [pc, #568]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cf10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf18:	4a8a      	ldr	r2, [pc, #552]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf1a:	430b      	orrs	r3, r1
 800cf1c:	6593      	str	r3, [r2, #88]	; 0x58
 800cf1e:	e003      	b.n	800cf28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cf28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cf34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cf3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cf42:	460b      	mov	r3, r1
 800cf44:	4313      	orrs	r3, r2
 800cf46:	d03a      	beq.n	800cfbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf4e:	2b30      	cmp	r3, #48	; 0x30
 800cf50:	d01f      	beq.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cf52:	2b30      	cmp	r3, #48	; 0x30
 800cf54:	d819      	bhi.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cf56:	2b20      	cmp	r3, #32
 800cf58:	d00c      	beq.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cf5a:	2b20      	cmp	r3, #32
 800cf5c:	d815      	bhi.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d019      	beq.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cf62:	2b10      	cmp	r3, #16
 800cf64:	d111      	bne.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf66:	4b77      	ldr	r3, [pc, #476]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6a:	4a76      	ldr	r2, [pc, #472]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cf72:	e011      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cf74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf78:	3308      	adds	r3, #8
 800cf7a:	2102      	movs	r1, #2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f002 f997 	bl	800f2b0 <RCCEx_PLL2_Config>
 800cf82:	4603      	mov	r3, r0
 800cf84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cf88:	e006      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf90:	e002      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cf92:	bf00      	nop
 800cf94:	e000      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cf96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10a      	bne.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cfa0:	4b68      	ldr	r3, [pc, #416]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfae:	4a65      	ldr	r2, [pc, #404]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfb0:	430b      	orrs	r3, r1
 800cfb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfb4:	e003      	b.n	800cfbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cfca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cfd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	d051      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfe8:	d035      	beq.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cfea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfee:	d82e      	bhi.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cff4:	d031      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cffa:	d828      	bhi.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d000:	d01a      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d006:	d822      	bhi.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d010:	d007      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d012:	e01c      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d014:	4b4b      	ldr	r3, [pc, #300]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d018:	4a4a      	ldr	r2, [pc, #296]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d020:	e01c      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d026:	3308      	adds	r3, #8
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f002 f940 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d030:	4603      	mov	r3, r0
 800d032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d036:	e011      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d03c:	3328      	adds	r3, #40	; 0x28
 800d03e:	2100      	movs	r1, #0
 800d040:	4618      	mov	r0, r3
 800d042:	f002 f9e7 	bl	800f414 <RCCEx_PLL3_Config>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d04c:	e006      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d054:	e002      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d056:	bf00      	nop
 800d058:	e000      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10a      	bne.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d064:	4b37      	ldr	r3, [pc, #220]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d068:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d072:	4a34      	ldr	r2, [pc, #208]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d074:	430b      	orrs	r3, r1
 800d076:	6513      	str	r3, [r2, #80]	; 0x50
 800d078:	e003      	b.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d07e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d08e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d092:	2300      	movs	r3, #0
 800d094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d09c:	460b      	mov	r3, r1
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	d056      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0ac:	d033      	beq.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d0ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0b2:	d82c      	bhi.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d0b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0b8:	d02f      	beq.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d0ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0be:	d826      	bhi.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d0c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0c4:	d02b      	beq.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d0c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0ca:	d820      	bhi.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0d0:	d012      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d0d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0d6:	d81a      	bhi.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d022      	beq.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0e0:	d115      	bne.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0e6:	3308      	adds	r3, #8
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f002 f8e0 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d0f6:	e015      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0fc:	3328      	adds	r3, #40	; 0x28
 800d0fe:	2101      	movs	r1, #1
 800d100:	4618      	mov	r0, r3
 800d102:	f002 f987 	bl	800f414 <RCCEx_PLL3_Config>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d10c:	e00a      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d114:	e006      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d116:	bf00      	nop
 800d118:	e004      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d11a:	bf00      	nop
 800d11c:	e002      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d11e:	bf00      	nop
 800d120:	e000      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10d      	bne.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d130:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d13a:	4a02      	ldr	r2, [pc, #8]	; (800d144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d13c:	430b      	orrs	r3, r1
 800d13e:	6513      	str	r3, [r2, #80]	; 0x50
 800d140:	e006      	b.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d142:	bf00      	nop
 800d144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d160:	2300      	movs	r3, #0
 800d162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4313      	orrs	r3, r2
 800d16e:	d055      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d17c:	d033      	beq.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d182:	d82c      	bhi.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d188:	d02f      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d18e:	d826      	bhi.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d194:	d02b      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d19a:	d820      	bhi.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1a0:	d012      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1a6:	d81a      	bhi.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d022      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d1ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1b0:	d115      	bne.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f002 f878 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d1c6:	e015      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1cc:	3328      	adds	r3, #40	; 0x28
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f002 f91f 	bl	800f414 <RCCEx_PLL3_Config>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d1dc:	e00a      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1e4:	e006      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d1e6:	bf00      	nop
 800d1e8:	e004      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d1ea:	bf00      	nop
 800d1ec:	e002      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10b      	bne.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d1fc:	4ba3      	ldr	r3, [pc, #652]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d200:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d20c:	4a9f      	ldr	r2, [pc, #636]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d20e:	430b      	orrs	r3, r1
 800d210:	6593      	str	r3, [r2, #88]	; 0x58
 800d212:	e003      	b.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d236:	460b      	mov	r3, r1
 800d238:	4313      	orrs	r3, r2
 800d23a:	d037      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d246:	d00e      	beq.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d24c:	d816      	bhi.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d018      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d256:	d111      	bne.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d258:	4b8c      	ldr	r3, [pc, #560]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	4a8b      	ldr	r2, [pc, #556]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d264:	e00f      	b.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d26a:	3308      	adds	r3, #8
 800d26c:	2101      	movs	r1, #1
 800d26e:	4618      	mov	r0, r3
 800d270:	f002 f81e 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d27a:	e004      	b.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d282:	e000      	b.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10a      	bne.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d28e:	4b7f      	ldr	r3, [pc, #508]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d292:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29c:	4a7b      	ldr	r2, [pc, #492]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	6513      	str	r3, [r2, #80]	; 0x50
 800d2a2:	e003      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d2c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	d039      	beq.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d81c      	bhi.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d2d6:	a201      	add	r2, pc, #4	; (adr r2, 800d2dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2dc:	0800d319 	.word	0x0800d319
 800d2e0:	0800d2ed 	.word	0x0800d2ed
 800d2e4:	0800d2fb 	.word	0x0800d2fb
 800d2e8:	0800d319 	.word	0x0800d319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2ec:	4b67      	ldr	r3, [pc, #412]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	4a66      	ldr	r2, [pc, #408]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d2f8:	e00f      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2fe:	3308      	adds	r3, #8
 800d300:	2102      	movs	r1, #2
 800d302:	4618      	mov	r0, r3
 800d304:	f001 ffd4 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d30e:	e004      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d316:	e000      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10a      	bne.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d322:	4b5a      	ldr	r3, [pc, #360]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d326:	f023 0103 	bic.w	r1, r3, #3
 800d32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d330:	4a56      	ldr	r2, [pc, #344]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d332:	430b      	orrs	r3, r1
 800d334:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d336:	e003      	b.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d33c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d350:	2300      	movs	r3, #0
 800d352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d35a:	460b      	mov	r3, r1
 800d35c:	4313      	orrs	r3, r2
 800d35e:	f000 809f 	beq.w	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d362:	4b4b      	ldr	r3, [pc, #300]	; (800d490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a4a      	ldr	r2, [pc, #296]	; (800d490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d36c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d36e:	f7f8 f87d 	bl	800546c <HAL_GetTick>
 800d372:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d376:	e00b      	b.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d378:	f7f8 f878 	bl	800546c <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	2b64      	cmp	r3, #100	; 0x64
 800d386:	d903      	bls.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d388:	2303      	movs	r3, #3
 800d38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d38e:	e005      	b.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d390:	4b3f      	ldr	r3, [pc, #252]	; (800d490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d0ed      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d39c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d179      	bne.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d3a4:	4b39      	ldr	r3, [pc, #228]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d3b0:	4053      	eors	r3, r2
 800d3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d015      	beq.n	800d3e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d3ba:	4b34      	ldr	r3, [pc, #208]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d3c6:	4b31      	ldr	r3, [pc, #196]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ca:	4a30      	ldr	r2, [pc, #192]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d3d2:	4b2e      	ldr	r3, [pc, #184]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d6:	4a2d      	ldr	r2, [pc, #180]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d3de:	4a2b      	ldr	r2, [pc, #172]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f2:	d118      	bne.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3f4:	f7f8 f83a 	bl	800546c <HAL_GetTick>
 800d3f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d3fc:	e00d      	b.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3fe:	f7f8 f835 	bl	800546c <HAL_GetTick>
 800d402:	4602      	mov	r2, r0
 800d404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d408:	1ad2      	subs	r2, r2, r3
 800d40a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d40e:	429a      	cmp	r2, r3
 800d410:	d903      	bls.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d418:	e005      	b.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d41a:	4b1c      	ldr	r3, [pc, #112]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d41e:	f003 0302 	and.w	r3, r3, #2
 800d422:	2b00      	cmp	r3, #0
 800d424:	d0eb      	beq.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d129      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d43e:	d10e      	bne.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d440:	4b12      	ldr	r3, [pc, #72]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d44c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d450:	091a      	lsrs	r2, r3, #4
 800d452:	4b10      	ldr	r3, [pc, #64]	; (800d494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d454:	4013      	ands	r3, r2
 800d456:	4a0d      	ldr	r2, [pc, #52]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d458:	430b      	orrs	r3, r1
 800d45a:	6113      	str	r3, [r2, #16]
 800d45c:	e005      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d45e:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	4a0a      	ldr	r2, [pc, #40]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d468:	6113      	str	r3, [r2, #16]
 800d46a:	4b08      	ldr	r3, [pc, #32]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d46c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d47a:	4a04      	ldr	r2, [pc, #16]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d47c:	430b      	orrs	r3, r1
 800d47e:	6713      	str	r3, [r2, #112]	; 0x70
 800d480:	e00e      	b.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d48a:	e009      	b.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d48c:	58024400 	.word	0x58024400
 800d490:	58024800 	.word	0x58024800
 800d494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f002 0301 	and.w	r3, r2, #1
 800d4ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	f000 8089 	beq.w	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4c8:	2b28      	cmp	r3, #40	; 0x28
 800d4ca:	d86b      	bhi.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d4cc:	a201      	add	r2, pc, #4	; (adr r2, 800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d2:	bf00      	nop
 800d4d4:	0800d5ad 	.word	0x0800d5ad
 800d4d8:	0800d5a5 	.word	0x0800d5a5
 800d4dc:	0800d5a5 	.word	0x0800d5a5
 800d4e0:	0800d5a5 	.word	0x0800d5a5
 800d4e4:	0800d5a5 	.word	0x0800d5a5
 800d4e8:	0800d5a5 	.word	0x0800d5a5
 800d4ec:	0800d5a5 	.word	0x0800d5a5
 800d4f0:	0800d5a5 	.word	0x0800d5a5
 800d4f4:	0800d579 	.word	0x0800d579
 800d4f8:	0800d5a5 	.word	0x0800d5a5
 800d4fc:	0800d5a5 	.word	0x0800d5a5
 800d500:	0800d5a5 	.word	0x0800d5a5
 800d504:	0800d5a5 	.word	0x0800d5a5
 800d508:	0800d5a5 	.word	0x0800d5a5
 800d50c:	0800d5a5 	.word	0x0800d5a5
 800d510:	0800d5a5 	.word	0x0800d5a5
 800d514:	0800d58f 	.word	0x0800d58f
 800d518:	0800d5a5 	.word	0x0800d5a5
 800d51c:	0800d5a5 	.word	0x0800d5a5
 800d520:	0800d5a5 	.word	0x0800d5a5
 800d524:	0800d5a5 	.word	0x0800d5a5
 800d528:	0800d5a5 	.word	0x0800d5a5
 800d52c:	0800d5a5 	.word	0x0800d5a5
 800d530:	0800d5a5 	.word	0x0800d5a5
 800d534:	0800d5ad 	.word	0x0800d5ad
 800d538:	0800d5a5 	.word	0x0800d5a5
 800d53c:	0800d5a5 	.word	0x0800d5a5
 800d540:	0800d5a5 	.word	0x0800d5a5
 800d544:	0800d5a5 	.word	0x0800d5a5
 800d548:	0800d5a5 	.word	0x0800d5a5
 800d54c:	0800d5a5 	.word	0x0800d5a5
 800d550:	0800d5a5 	.word	0x0800d5a5
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d5a5 	.word	0x0800d5a5
 800d55c:	0800d5a5 	.word	0x0800d5a5
 800d560:	0800d5a5 	.word	0x0800d5a5
 800d564:	0800d5a5 	.word	0x0800d5a5
 800d568:	0800d5a5 	.word	0x0800d5a5
 800d56c:	0800d5a5 	.word	0x0800d5a5
 800d570:	0800d5a5 	.word	0x0800d5a5
 800d574:	0800d5ad 	.word	0x0800d5ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d57c:	3308      	adds	r3, #8
 800d57e:	2101      	movs	r1, #1
 800d580:	4618      	mov	r0, r3
 800d582:	f001 fe95 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d586:	4603      	mov	r3, r0
 800d588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d58c:	e00f      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d592:	3328      	adds	r3, #40	; 0x28
 800d594:	2101      	movs	r1, #1
 800d596:	4618      	mov	r0, r3
 800d598:	f001 ff3c 	bl	800f414 <RCCEx_PLL3_Config>
 800d59c:	4603      	mov	r3, r0
 800d59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5a2:	e004      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5aa:	e000      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10a      	bne.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d5b6:	4bbf      	ldr	r3, [pc, #764]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c4:	4abb      	ldr	r2, [pc, #748]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5c6:	430b      	orrs	r3, r1
 800d5c8:	6553      	str	r3, [r2, #84]	; 0x54
 800d5ca:	e003      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f002 0302 	and.w	r3, r2, #2
 800d5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d5ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	d041      	beq.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5fa:	2b05      	cmp	r3, #5
 800d5fc:	d824      	bhi.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d651 	.word	0x0800d651
 800d608:	0800d61d 	.word	0x0800d61d
 800d60c:	0800d633 	.word	0x0800d633
 800d610:	0800d651 	.word	0x0800d651
 800d614:	0800d651 	.word	0x0800d651
 800d618:	0800d651 	.word	0x0800d651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d620:	3308      	adds	r3, #8
 800d622:	2101      	movs	r1, #1
 800d624:	4618      	mov	r0, r3
 800d626:	f001 fe43 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d62a:	4603      	mov	r3, r0
 800d62c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d630:	e00f      	b.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d636:	3328      	adds	r3, #40	; 0x28
 800d638:	2101      	movs	r1, #1
 800d63a:	4618      	mov	r0, r3
 800d63c:	f001 feea 	bl	800f414 <RCCEx_PLL3_Config>
 800d640:	4603      	mov	r3, r0
 800d642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d646:	e004      	b.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d64e:	e000      	b.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d650:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10a      	bne.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d65a:	4b96      	ldr	r3, [pc, #600]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65e:	f023 0107 	bic.w	r1, r3, #7
 800d662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d668:	4a92      	ldr	r2, [pc, #584]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d66a:	430b      	orrs	r3, r1
 800d66c:	6553      	str	r3, [r2, #84]	; 0x54
 800d66e:	e003      	b.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f002 0304 	and.w	r3, r2, #4
 800d684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d688:	2300      	movs	r3, #0
 800d68a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d68e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d692:	460b      	mov	r3, r1
 800d694:	4313      	orrs	r3, r2
 800d696:	d044      	beq.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6a0:	2b05      	cmp	r3, #5
 800d6a2:	d825      	bhi.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d6a4:	a201      	add	r2, pc, #4	; (adr r2, 800d6ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6aa:	bf00      	nop
 800d6ac:	0800d6f9 	.word	0x0800d6f9
 800d6b0:	0800d6c5 	.word	0x0800d6c5
 800d6b4:	0800d6db 	.word	0x0800d6db
 800d6b8:	0800d6f9 	.word	0x0800d6f9
 800d6bc:	0800d6f9 	.word	0x0800d6f9
 800d6c0:	0800d6f9 	.word	0x0800d6f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f001 fdef 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d6d8:	e00f      	b.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6de:	3328      	adds	r3, #40	; 0x28
 800d6e0:	2101      	movs	r1, #1
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 fe96 	bl	800f414 <RCCEx_PLL3_Config>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d6ee:	e004      	b.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6f6:	e000      	b.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10b      	bne.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d702:	4b6c      	ldr	r3, [pc, #432]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d706:	f023 0107 	bic.w	r1, r3, #7
 800d70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d70e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d712:	4a68      	ldr	r2, [pc, #416]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d714:	430b      	orrs	r3, r1
 800d716:	6593      	str	r3, [r2, #88]	; 0x58
 800d718:	e003      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d71a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d71e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	f002 0320 	and.w	r3, r2, #32
 800d72e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d732:	2300      	movs	r3, #0
 800d734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d73c:	460b      	mov	r3, r1
 800d73e:	4313      	orrs	r3, r2
 800d740:	d055      	beq.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d74a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d74e:	d033      	beq.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d754:	d82c      	bhi.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d75a:	d02f      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d760:	d826      	bhi.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d766:	d02b      	beq.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d76c:	d820      	bhi.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d772:	d012      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d778:	d81a      	bhi.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d022      	beq.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d77e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d782:	d115      	bne.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d788:	3308      	adds	r3, #8
 800d78a:	2100      	movs	r1, #0
 800d78c:	4618      	mov	r0, r3
 800d78e:	f001 fd8f 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d792:	4603      	mov	r3, r0
 800d794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d798:	e015      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d79e:	3328      	adds	r3, #40	; 0x28
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 fe36 	bl	800f414 <RCCEx_PLL3_Config>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d7ae:	e00a      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d7b6:	e006      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d7b8:	bf00      	nop
 800d7ba:	e004      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d7bc:	bf00      	nop
 800d7be:	e002      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d7c0:	bf00      	nop
 800d7c2:	e000      	b.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10b      	bne.n	800d7e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d7ce:	4b39      	ldr	r3, [pc, #228]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7de:	4a35      	ldr	r2, [pc, #212]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7e0:	430b      	orrs	r3, r1
 800d7e2:	6553      	str	r3, [r2, #84]	; 0x54
 800d7e4:	e003      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d7fe:	2300      	movs	r3, #0
 800d800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d808:	460b      	mov	r3, r1
 800d80a:	4313      	orrs	r3, r2
 800d80c:	d058      	beq.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d81a:	d033      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d81c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d820:	d82c      	bhi.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d826:	d02f      	beq.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d82c:	d826      	bhi.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d832:	d02b      	beq.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d838:	d820      	bhi.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d83e:	d012      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d844:	d81a      	bhi.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d846:	2b00      	cmp	r3, #0
 800d848:	d022      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d84e:	d115      	bne.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d854:	3308      	adds	r3, #8
 800d856:	2100      	movs	r1, #0
 800d858:	4618      	mov	r0, r3
 800d85a:	f001 fd29 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d85e:	4603      	mov	r3, r0
 800d860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d864:	e015      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d86a:	3328      	adds	r3, #40	; 0x28
 800d86c:	2102      	movs	r1, #2
 800d86e:	4618      	mov	r0, r3
 800d870:	f001 fdd0 	bl	800f414 <RCCEx_PLL3_Config>
 800d874:	4603      	mov	r3, r0
 800d876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d87a:	e00a      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d882:	e006      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d884:	bf00      	nop
 800d886:	e004      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d888:	bf00      	nop
 800d88a:	e002      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d88c:	bf00      	nop
 800d88e:	e000      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10e      	bne.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d89a:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d89e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8aa:	4a02      	ldr	r2, [pc, #8]	; (800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	6593      	str	r3, [r2, #88]	; 0x58
 800d8b0:	e006      	b.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d8b2:	bf00      	nop
 800d8b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d8cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d8d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	d055      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d8e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d8ec:	d033      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d8ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d8f2:	d82c      	bhi.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8f8:	d02f      	beq.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8fe:	d826      	bhi.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d904:	d02b      	beq.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d90a:	d820      	bhi.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d910:	d012      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d916:	d81a      	bhi.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d022      	beq.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d920:	d115      	bne.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d926:	3308      	adds	r3, #8
 800d928:	2100      	movs	r1, #0
 800d92a:	4618      	mov	r0, r3
 800d92c:	f001 fcc0 	bl	800f2b0 <RCCEx_PLL2_Config>
 800d930:	4603      	mov	r3, r0
 800d932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d936:	e015      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d93c:	3328      	adds	r3, #40	; 0x28
 800d93e:	2102      	movs	r1, #2
 800d940:	4618      	mov	r0, r3
 800d942:	f001 fd67 	bl	800f414 <RCCEx_PLL3_Config>
 800d946:	4603      	mov	r3, r0
 800d948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d94c:	e00a      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d954:	e006      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d956:	bf00      	nop
 800d958:	e004      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d95a:	bf00      	nop
 800d95c:	e002      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d95e:	bf00      	nop
 800d960:	e000      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d962:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10b      	bne.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d96c:	4ba1      	ldr	r3, [pc, #644]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d970:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d97c:	4a9d      	ldr	r2, [pc, #628]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d97e:	430b      	orrs	r3, r1
 800d980:	6593      	str	r3, [r2, #88]	; 0x58
 800d982:	e003      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	f002 0308 	and.w	r3, r2, #8
 800d998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d99c:	2300      	movs	r3, #0
 800d99e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	d01e      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b8:	d10c      	bne.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9be:	3328      	adds	r3, #40	; 0x28
 800d9c0:	2102      	movs	r1, #2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 fd26 	bl	800f414 <RCCEx_PLL3_Config>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d9d4:	4b87      	ldr	r3, [pc, #540]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e4:	4a83      	ldr	r2, [pc, #524]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9e6:	430b      	orrs	r3, r1
 800d9e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f2:	f002 0310 	and.w	r3, r2, #16
 800d9f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800da04:	460b      	mov	r3, r1
 800da06:	4313      	orrs	r3, r2
 800da08:	d01e      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800da0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da16:	d10c      	bne.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da1c:	3328      	adds	r3, #40	; 0x28
 800da1e:	2102      	movs	r1, #2
 800da20:	4618      	mov	r0, r3
 800da22:	f001 fcf7 	bl	800f414 <RCCEx_PLL3_Config>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da32:	4b70      	ldr	r3, [pc, #448]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800da3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da42:	4a6c      	ldr	r2, [pc, #432]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da44:	430b      	orrs	r3, r1
 800da46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800da54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da58:	2300      	movs	r3, #0
 800da5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800da62:	460b      	mov	r3, r1
 800da64:	4313      	orrs	r3, r2
 800da66:	d03e      	beq.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da74:	d022      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800da76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da7a:	d81b      	bhi.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800da80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da84:	d00b      	beq.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800da86:	e015      	b.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da8c:	3308      	adds	r3, #8
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f001 fc0d 	bl	800f2b0 <RCCEx_PLL2_Config>
 800da96:	4603      	mov	r3, r0
 800da98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800da9c:	e00f      	b.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa2:	3328      	adds	r3, #40	; 0x28
 800daa4:	2102      	movs	r1, #2
 800daa6:	4618      	mov	r0, r3
 800daa8:	f001 fcb4 	bl	800f414 <RCCEx_PLL3_Config>
 800daac:	4603      	mov	r3, r0
 800daae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dab2:	e004      	b.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800daba:	e000      	b.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800dabc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10b      	bne.n	800dade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dac6:	4b4b      	ldr	r3, [pc, #300]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800dace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dad6:	4a47      	ldr	r2, [pc, #284]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dad8:	430b      	orrs	r3, r1
 800dada:	6593      	str	r3, [r2, #88]	; 0x58
 800dadc:	e003      	b.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800daf2:	67bb      	str	r3, [r7, #120]	; 0x78
 800daf4:	2300      	movs	r3, #0
 800daf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800daf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dafc:	460b      	mov	r3, r1
 800dafe:	4313      	orrs	r3, r2
 800db00:	d03b      	beq.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800db02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db0e:	d01f      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800db10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db14:	d818      	bhi.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800db16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db1a:	d003      	beq.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800db1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db20:	d007      	beq.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800db22:	e011      	b.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db24:	4b33      	ldr	r3, [pc, #204]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	4a32      	ldr	r2, [pc, #200]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800db30:	e00f      	b.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db36:	3328      	adds	r3, #40	; 0x28
 800db38:	2101      	movs	r1, #1
 800db3a:	4618      	mov	r0, r3
 800db3c:	f001 fc6a 	bl	800f414 <RCCEx_PLL3_Config>
 800db40:	4603      	mov	r3, r0
 800db42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800db46:	e004      	b.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db4e:	e000      	b.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800db50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db56:	2b00      	cmp	r3, #0
 800db58:	d10b      	bne.n	800db72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800db5a:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800db62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db6a:	4a22      	ldr	r2, [pc, #136]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db6c:	430b      	orrs	r3, r1
 800db6e:	6553      	str	r3, [r2, #84]	; 0x54
 800db70:	e003      	b.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800db7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800db86:	673b      	str	r3, [r7, #112]	; 0x70
 800db88:	2300      	movs	r3, #0
 800db8a:	677b      	str	r3, [r7, #116]	; 0x74
 800db8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800db90:	460b      	mov	r3, r1
 800db92:	4313      	orrs	r3, r2
 800db94:	d034      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800db96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d003      	beq.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba4:	d007      	beq.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dba6:	e011      	b.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbac:	4a11      	ldr	r2, [pc, #68]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dbb4:	e00e      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbba:	3308      	adds	r3, #8
 800dbbc:	2102      	movs	r1, #2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f001 fb76 	bl	800f2b0 <RCCEx_PLL2_Config>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dbca:	e003      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10d      	bne.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbea:	4a02      	ldr	r2, [pc, #8]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbec:	430b      	orrs	r3, r1
 800dbee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbf0:	e006      	b.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dbf2:	bf00      	nop
 800dbf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800dc0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc0e:	2300      	movs	r3, #0
 800dc10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dc16:	460b      	mov	r3, r1
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	d00c      	beq.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc20:	3328      	adds	r3, #40	; 0x28
 800dc22:	2102      	movs	r1, #2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 fbf5 	bl	800f414 <RCCEx_PLL3_Config>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dc42:	663b      	str	r3, [r7, #96]	; 0x60
 800dc44:	2300      	movs	r3, #0
 800dc46:	667b      	str	r3, [r7, #100]	; 0x64
 800dc48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	d038      	beq.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc5e:	d018      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dc60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc64:	d811      	bhi.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dc66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc6a:	d014      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc70:	d80b      	bhi.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d011      	beq.n	800dc9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc7a:	d106      	bne.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc7c:	4bc3      	ldr	r3, [pc, #780]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	4ac2      	ldr	r2, [pc, #776]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dc88:	e008      	b.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc90:	e004      	b.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc92:	bf00      	nop
 800dc94:	e002      	b.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc96:	bf00      	nop
 800dc98:	e000      	b.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10b      	bne.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dca4:	4bb9      	ldr	r3, [pc, #740]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcb4:	4ab5      	ldr	r2, [pc, #724]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcb6:	430b      	orrs	r3, r1
 800dcb8:	6553      	str	r3, [r2, #84]	; 0x54
 800dcba:	e003      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dcd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	d009      	beq.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dce0:	4baa      	ldr	r3, [pc, #680]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcee:	4aa7      	ldr	r2, [pc, #668]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcf0:	430b      	orrs	r3, r1
 800dcf2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dd00:	653b      	str	r3, [r7, #80]	; 0x50
 800dd02:	2300      	movs	r3, #0
 800dd04:	657b      	str	r3, [r7, #84]	; 0x54
 800dd06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	d00a      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dd10:	4b9e      	ldr	r3, [pc, #632]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800dd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dd20:	4a9a      	ldr	r2, [pc, #616]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd22:	430b      	orrs	r3, r1
 800dd24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800dd32:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd34:	2300      	movs	r3, #0
 800dd36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	d009      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dd42:	4b92      	ldr	r3, [pc, #584]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd46:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800dd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd50:	4a8e      	ldr	r2, [pc, #568]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd52:	430b      	orrs	r3, r1
 800dd54:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800dd62:	643b      	str	r3, [r7, #64]	; 0x40
 800dd64:	2300      	movs	r3, #0
 800dd66:	647b      	str	r3, [r7, #68]	; 0x44
 800dd68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	d00e      	beq.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dd72:	4b86      	ldr	r3, [pc, #536]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	4a85      	ldr	r2, [pc, #532]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd7c:	6113      	str	r3, [r2, #16]
 800dd7e:	4b83      	ldr	r3, [pc, #524]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd80:	6919      	ldr	r1, [r3, #16]
 800dd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dd8a:	4a80      	ldr	r2, [pc, #512]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd8c:	430b      	orrs	r3, r1
 800dd8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800dd9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd9e:	2300      	movs	r3, #0
 800dda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dda2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dda6:	460b      	mov	r3, r1
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	d009      	beq.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ddac:	4b77      	ldr	r3, [pc, #476]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddb0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ddb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddba:	4a74      	ldr	r2, [pc, #464]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddbc:	430b      	orrs	r3, r1
 800ddbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ddc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ddcc:	633b      	str	r3, [r7, #48]	; 0x30
 800ddce:	2300      	movs	r3, #0
 800ddd0:	637b      	str	r3, [r7, #52]	; 0x34
 800ddd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	d00a      	beq.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dddc:	4b6b      	ldr	r3, [pc, #428]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800dde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dde8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddec:	4a67      	ldr	r2, [pc, #412]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddee:	430b      	orrs	r3, r1
 800ddf0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ddf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	62b9      	str	r1, [r7, #40]	; 0x28
 800ddfe:	f003 0301 	and.w	r3, r3, #1
 800de02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800de08:	460b      	mov	r3, r1
 800de0a:	4313      	orrs	r3, r2
 800de0c:	d011      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de12:	3308      	adds	r3, #8
 800de14:	2100      	movs	r1, #0
 800de16:	4618      	mov	r0, r3
 800de18:	f001 fa4a 	bl	800f2b0 <RCCEx_PLL2_Config>
 800de1c:	4603      	mov	r3, r0
 800de1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800de22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de26:	2b00      	cmp	r3, #0
 800de28:	d003      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800de32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	2100      	movs	r1, #0
 800de3c:	6239      	str	r1, [r7, #32]
 800de3e:	f003 0302 	and.w	r3, r3, #2
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
 800de44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de48:	460b      	mov	r3, r1
 800de4a:	4313      	orrs	r3, r2
 800de4c:	d011      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de52:	3308      	adds	r3, #8
 800de54:	2101      	movs	r1, #1
 800de56:	4618      	mov	r0, r3
 800de58:	f001 fa2a 	bl	800f2b0 <RCCEx_PLL2_Config>
 800de5c:	4603      	mov	r3, r0
 800de5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800de62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800de72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	2100      	movs	r1, #0
 800de7c:	61b9      	str	r1, [r7, #24]
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800de88:	460b      	mov	r3, r1
 800de8a:	4313      	orrs	r3, r2
 800de8c:	d011      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de92:	3308      	adds	r3, #8
 800de94:	2102      	movs	r1, #2
 800de96:	4618      	mov	r0, r3
 800de98:	f001 fa0a 	bl	800f2b0 <RCCEx_PLL2_Config>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800deae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800deb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	2100      	movs	r1, #0
 800debc:	6139      	str	r1, [r7, #16]
 800debe:	f003 0308 	and.w	r3, r3, #8
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dec8:	460b      	mov	r3, r1
 800deca:	4313      	orrs	r3, r2
 800decc:	d011      	beq.n	800def2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ded2:	3328      	adds	r3, #40	; 0x28
 800ded4:	2100      	movs	r1, #0
 800ded6:	4618      	mov	r0, r3
 800ded8:	f001 fa9c 	bl	800f414 <RCCEx_PLL3_Config>
 800dedc:	4603      	mov	r3, r0
 800dede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800dee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800deee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800def2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	2100      	movs	r1, #0
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	f003 0310 	and.w	r3, r3, #16
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df08:	460b      	mov	r3, r1
 800df0a:	4313      	orrs	r3, r2
 800df0c:	d011      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df12:	3328      	adds	r3, #40	; 0x28
 800df14:	2101      	movs	r1, #1
 800df16:	4618      	mov	r0, r3
 800df18:	f001 fa7c 	bl	800f414 <RCCEx_PLL3_Config>
 800df1c:	4603      	mov	r3, r0
 800df1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df26:	2b00      	cmp	r3, #0
 800df28:	d003      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800df32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	2100      	movs	r1, #0
 800df3c:	6039      	str	r1, [r7, #0]
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	607b      	str	r3, [r7, #4]
 800df44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df48:	460b      	mov	r3, r1
 800df4a:	4313      	orrs	r3, r2
 800df4c:	d011      	beq.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df52:	3328      	adds	r3, #40	; 0x28
 800df54:	2102      	movs	r1, #2
 800df56:	4618      	mov	r0, r3
 800df58:	f001 fa5c 	bl	800f414 <RCCEx_PLL3_Config>
 800df5c:	4603      	mov	r3, r0
 800df5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800df72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e000      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
}
 800df80:	4618      	mov	r0, r3
 800df82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800df86:	46bd      	mov	sp, r7
 800df88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df8c:	58024400 	.word	0x58024400

0800df90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b090      	sub	sp, #64	; 0x40
 800df94:	af00      	add	r7, sp, #0
 800df96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800df9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800dfa2:	430b      	orrs	r3, r1
 800dfa4:	f040 8094 	bne.w	800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800dfa8:	4b9e      	ldr	r3, [pc, #632]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfac:	f003 0307 	and.w	r3, r3, #7
 800dfb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	f200 8087 	bhi.w	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800dfba:	a201      	add	r2, pc, #4	; (adr r2, 800dfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800dfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc0:	0800dfd5 	.word	0x0800dfd5
 800dfc4:	0800dffd 	.word	0x0800dffd
 800dfc8:	0800e025 	.word	0x0800e025
 800dfcc:	0800e0c1 	.word	0x0800e0c1
 800dfd0:	0800e04d 	.word	0x0800e04d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dfd4:	4b93      	ldr	r3, [pc, #588]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dfe0:	d108      	bne.n	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dfe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 f810 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dff0:	f000 bd45 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dff8:	f000 bd41 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dffc:	4b89      	ldr	r3, [pc, #548]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e008:	d108      	bne.n	800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e00a:	f107 0318 	add.w	r3, r7, #24
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 fd54 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e018:	f000 bd31 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e020:	f000 bd2d 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e024:	4b7f      	ldr	r3, [pc, #508]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e030:	d108      	bne.n	800e044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e032:	f107 030c 	add.w	r3, r7, #12
 800e036:	4618      	mov	r0, r3
 800e038:	f000 fe94 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e040:	f000 bd1d 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e048:	f000 bd19 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e04c:	4b75      	ldr	r3, [pc, #468]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e054:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e056:	4b73      	ldr	r3, [pc, #460]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 0304 	and.w	r3, r3, #4
 800e05e:	2b04      	cmp	r3, #4
 800e060:	d10c      	bne.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e064:	2b00      	cmp	r3, #0
 800e066:	d109      	bne.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e068:	4b6e      	ldr	r3, [pc, #440]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	08db      	lsrs	r3, r3, #3
 800e06e:	f003 0303 	and.w	r3, r3, #3
 800e072:	4a6d      	ldr	r2, [pc, #436]	; (800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e074:	fa22 f303 	lsr.w	r3, r2, r3
 800e078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e07a:	e01f      	b.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e07c:	4b69      	ldr	r3, [pc, #420]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e088:	d106      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e090:	d102      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e092:	4b66      	ldr	r3, [pc, #408]	; (800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e094:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e096:	e011      	b.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e098:	4b62      	ldr	r3, [pc, #392]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0a4:	d106      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0ac:	d102      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e0ae:	4b60      	ldr	r3, [pc, #384]	; (800e230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0b2:	e003      	b.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e0b8:	f000 bce1 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e0bc:	f000 bcdf 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e0c0:	4b5c      	ldr	r3, [pc, #368]	; (800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c4:	f000 bcdb 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0cc:	f000 bcd7 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e0d8:	430b      	orrs	r3, r1
 800e0da:	f040 80ad 	bne.w	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e0de:	4b51      	ldr	r3, [pc, #324]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e0e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ee:	d056      	beq.n	800e19e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0f6:	f200 8090 	bhi.w	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	2bc0      	cmp	r3, #192	; 0xc0
 800e0fe:	f000 8088 	beq.w	800e212 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2bc0      	cmp	r3, #192	; 0xc0
 800e106:	f200 8088 	bhi.w	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	2b80      	cmp	r3, #128	; 0x80
 800e10e:	d032      	beq.n	800e176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	2b80      	cmp	r3, #128	; 0x80
 800e114:	f200 8081 	bhi.w	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	2b40      	cmp	r3, #64	; 0x40
 800e122:	d014      	beq.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e124:	e079      	b.n	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e126:	4b3f      	ldr	r3, [pc, #252]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e12e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e132:	d108      	bne.n	800e146 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 ff67 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e142:	f000 bc9c 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e146:	2300      	movs	r3, #0
 800e148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14a:	f000 bc98 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e14e:	4b35      	ldr	r3, [pc, #212]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e15a:	d108      	bne.n	800e16e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e15c:	f107 0318 	add.w	r3, r7, #24
 800e160:	4618      	mov	r0, r3
 800e162:	f000 fcab 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e16a:	f000 bc88 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e172:	f000 bc84 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e176:	4b2b      	ldr	r3, [pc, #172]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e182:	d108      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e184:	f107 030c 	add.w	r3, r7, #12
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fdeb 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e192:	f000 bc74 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19a:	f000 bc70 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e19e:	4b21      	ldr	r3, [pc, #132]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e1a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e1a8:	4b1e      	ldr	r3, [pc, #120]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b04      	cmp	r3, #4
 800e1b2:	d10c      	bne.n	800e1ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d109      	bne.n	800e1ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	08db      	lsrs	r3, r3, #3
 800e1c0:	f003 0303 	and.w	r3, r3, #3
 800e1c4:	4a18      	ldr	r2, [pc, #96]	; (800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1cc:	e01f      	b.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e1ce:	4b15      	ldr	r3, [pc, #84]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1da:	d106      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1e2:	d102      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e1e4:	4b11      	ldr	r3, [pc, #68]	; (800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1e8:	e011      	b.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e1ea:	4b0e      	ldr	r3, [pc, #56]	; (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1f6:	d106      	bne.n	800e206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1fe:	d102      	bne.n	800e206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e204:	e003      	b.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e20a:	f000 bc38 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e20e:	f000 bc36 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e216:	f000 bc32 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21e:	f000 bc2e 	b.w	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e222:	bf00      	nop
 800e224:	58024400 	.word	0x58024400
 800e228:	03d09000 	.word	0x03d09000
 800e22c:	003d0900 	.word	0x003d0900
 800e230:	017d7840 	.word	0x017d7840
 800e234:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e23c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e240:	430b      	orrs	r3, r1
 800e242:	f040 809c 	bne.w	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e246:	4b9e      	ldr	r3, [pc, #632]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e24a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e24e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e256:	d054      	beq.n	800e302 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e25e:	f200 808b 	bhi.w	800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e268:	f000 8083 	beq.w	800e372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e272:	f200 8081 	bhi.w	800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e27c:	d02f      	beq.n	800e2de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e284:	d878      	bhi.n	800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e292:	d012      	beq.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e294:	e070      	b.n	800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e296:	4b8a      	ldr	r3, [pc, #552]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2a2:	d107      	bne.n	800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f000 feaf 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2b2:	e3e4      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2b8:	e3e1      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e2ba:	4b81      	ldr	r3, [pc, #516]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2c6:	d107      	bne.n	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2c8:	f107 0318 	add.w	r3, r7, #24
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 fbf5 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2d6:	e3d2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2dc:	e3cf      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e2de:	4b78      	ldr	r3, [pc, #480]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2ea:	d107      	bne.n	800e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2ec:	f107 030c 	add.w	r3, r7, #12
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 fd37 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2fa:	e3c0      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e300:	e3bd      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e302:	4b6f      	ldr	r3, [pc, #444]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e30a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e30c:	4b6c      	ldr	r3, [pc, #432]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b04      	cmp	r3, #4
 800e316:	d10c      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d109      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e31e:	4b68      	ldr	r3, [pc, #416]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	08db      	lsrs	r3, r3, #3
 800e324:	f003 0303 	and.w	r3, r3, #3
 800e328:	4a66      	ldr	r2, [pc, #408]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e32a:	fa22 f303 	lsr.w	r3, r2, r3
 800e32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e330:	e01e      	b.n	800e370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e332:	4b63      	ldr	r3, [pc, #396]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e33e:	d106      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e346:	d102      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e348:	4b5f      	ldr	r3, [pc, #380]	; (800e4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e34c:	e010      	b.n	800e370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e34e:	4b5c      	ldr	r3, [pc, #368]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e35a:	d106      	bne.n	800e36a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e362:	d102      	bne.n	800e36a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e364:	4b59      	ldr	r3, [pc, #356]	; (800e4cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e368:	e002      	b.n	800e370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e36a:	2300      	movs	r3, #0
 800e36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e36e:	e386      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e370:	e385      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e372:	4b57      	ldr	r3, [pc, #348]	; (800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e376:	e382      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e37c:	e37f      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e382:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e386:	430b      	orrs	r3, r1
 800e388:	f040 80a7 	bne.w	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e38c:	4b4c      	ldr	r3, [pc, #304]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e390:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e394:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e39c:	d055      	beq.n	800e44a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3a4:	f200 8096 	bhi.w	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e3ae:	f000 8084 	beq.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e3b8:	f200 808c 	bhi.w	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3c2:	d030      	beq.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ca:	f200 8083 	bhi.w	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e3da:	d012      	beq.n	800e402 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e3dc:	e07a      	b.n	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e3de:	4b38      	ldr	r3, [pc, #224]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ea:	d107      	bne.n	800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f000 fe0b 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3fa:	e340      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e400:	e33d      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e402:	4b2f      	ldr	r3, [pc, #188]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e40e:	d107      	bne.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e410:	f107 0318 	add.w	r3, r7, #24
 800e414:	4618      	mov	r0, r3
 800e416:	f000 fb51 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e41e:	e32e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e424:	e32b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e426:	4b26      	ldr	r3, [pc, #152]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e432:	d107      	bne.n	800e444 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e434:	f107 030c 	add.w	r3, r7, #12
 800e438:	4618      	mov	r0, r3
 800e43a:	f000 fc93 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e442:	e31c      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e448:	e319      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e44a:	4b1d      	ldr	r3, [pc, #116]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e44e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e454:	4b1a      	ldr	r3, [pc, #104]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b04      	cmp	r3, #4
 800e45e:	d10c      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e462:	2b00      	cmp	r3, #0
 800e464:	d109      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e466:	4b16      	ldr	r3, [pc, #88]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	08db      	lsrs	r3, r3, #3
 800e46c:	f003 0303 	and.w	r3, r3, #3
 800e470:	4a14      	ldr	r2, [pc, #80]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e472:	fa22 f303 	lsr.w	r3, r2, r3
 800e476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e478:	e01e      	b.n	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e47a:	4b11      	ldr	r3, [pc, #68]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e486:	d106      	bne.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e48e:	d102      	bne.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e490:	4b0d      	ldr	r3, [pc, #52]	; (800e4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e494:	e010      	b.n	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e496:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e4a2:	d106      	bne.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4aa:	d102      	bne.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e4ac:	4b07      	ldr	r3, [pc, #28]	; (800e4cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4b0:	e002      	b.n	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e4b6:	e2e2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e4b8:	e2e1      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e4ba:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4be:	e2de      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e4c0:	58024400 	.word	0x58024400
 800e4c4:	03d09000 	.word	0x03d09000
 800e4c8:	003d0900 	.word	0x003d0900
 800e4cc:	017d7840 	.word	0x017d7840
 800e4d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d8:	e2d1      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e4e2:	430b      	orrs	r3, r1
 800e4e4:	f040 809c 	bne.w	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e4e8:	4b93      	ldr	r3, [pc, #588]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e4f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4f8:	d054      	beq.n	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e500:	f200 808b 	bhi.w	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e50a:	f000 8083 	beq.w	800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e514:	f200 8081 	bhi.w	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e51e:	d02f      	beq.n	800e580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e526:	d878      	bhi.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d004      	beq.n	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e534:	d012      	beq.n	800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e536:	e070      	b.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e538:	4b7f      	ldr	r3, [pc, #508]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e544:	d107      	bne.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 fd5e 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e554:	e293      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e55a:	e290      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e55c:	4b76      	ldr	r3, [pc, #472]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e568:	d107      	bne.n	800e57a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e56a:	f107 0318 	add.w	r3, r7, #24
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 faa4 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e578:	e281      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57e:	e27e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e580:	4b6d      	ldr	r3, [pc, #436]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e58c:	d107      	bne.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e58e:	f107 030c 	add.w	r3, r7, #12
 800e592:	4618      	mov	r0, r3
 800e594:	f000 fbe6 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e59c:	e26f      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a2:	e26c      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e5a4:	4b64      	ldr	r3, [pc, #400]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e5ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e5ae:	4b62      	ldr	r3, [pc, #392]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 0304 	and.w	r3, r3, #4
 800e5b6:	2b04      	cmp	r3, #4
 800e5b8:	d10c      	bne.n	800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5c0:	4b5d      	ldr	r3, [pc, #372]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	08db      	lsrs	r3, r3, #3
 800e5c6:	f003 0303 	and.w	r3, r3, #3
 800e5ca:	4a5c      	ldr	r2, [pc, #368]	; (800e73c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5d2:	e01e      	b.n	800e612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e5d4:	4b58      	ldr	r3, [pc, #352]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5e0:	d106      	bne.n	800e5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5e8:	d102      	bne.n	800e5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e5ea:	4b55      	ldr	r3, [pc, #340]	; (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5ee:	e010      	b.n	800e612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e5f0:	4b51      	ldr	r3, [pc, #324]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5fc:	d106      	bne.n	800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e604:	d102      	bne.n	800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e606:	4b4f      	ldr	r3, [pc, #316]	; (800e744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e60a:	e002      	b.n	800e612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e610:	e235      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e612:	e234      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e614:	4b4c      	ldr	r3, [pc, #304]	; (800e748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e618:	e231      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e61e:	e22e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e624:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e628:	430b      	orrs	r3, r1
 800e62a:	f040 808f 	bne.w	800e74c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e62e:	4b42      	ldr	r3, [pc, #264]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e632:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e636:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e63e:	d06b      	beq.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e646:	d874      	bhi.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e64e:	d056      	beq.n	800e6fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e656:	d86c      	bhi.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e65e:	d03b      	beq.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e666:	d864      	bhi.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e66e:	d021      	beq.n	800e6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e676:	d85c      	bhi.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d004      	beq.n	800e688 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e684:	d004      	beq.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e686:	e054      	b.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e688:	f7fe fa4c 	bl	800cb24 <HAL_RCC_GetPCLK1Freq>
 800e68c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e68e:	e1f6      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e690:	4b29      	ldr	r3, [pc, #164]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e69c:	d107      	bne.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e69e:	f107 0318 	add.w	r3, r7, #24
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 fa0a 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6ac:	e1e7      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6b2:	e1e4      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e6b4:	4b20      	ldr	r3, [pc, #128]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6c0:	d107      	bne.n	800e6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6c2:	f107 030c 	add.w	r3, r7, #12
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 fb4c 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6d0:	e1d5      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6d6:	e1d2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e6d8:	4b17      	ldr	r3, [pc, #92]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f003 0304 	and.w	r3, r3, #4
 800e6e0:	2b04      	cmp	r3, #4
 800e6e2:	d109      	bne.n	800e6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e6e4:	4b14      	ldr	r3, [pc, #80]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	08db      	lsrs	r3, r3, #3
 800e6ea:	f003 0303 	and.w	r3, r3, #3
 800e6ee:	4a13      	ldr	r2, [pc, #76]	; (800e73c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6f6:	e1c2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6fc:	e1bf      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e6fe:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e70a:	d102      	bne.n	800e712 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e70c:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e710:	e1b5      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e712:	2300      	movs	r3, #0
 800e714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e716:	e1b2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e718:	4b07      	ldr	r3, [pc, #28]	; (800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e724:	d102      	bne.n	800e72c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e726:	4b07      	ldr	r3, [pc, #28]	; (800e744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e72a:	e1a8      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e730:	e1a5      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e736:	e1a2      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e738:	58024400 	.word	0x58024400
 800e73c:	03d09000 	.word	0x03d09000
 800e740:	003d0900 	.word	0x003d0900
 800e744:	017d7840 	.word	0x017d7840
 800e748:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e750:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e754:	430b      	orrs	r3, r1
 800e756:	d173      	bne.n	800e840 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e758:	4b9c      	ldr	r3, [pc, #624]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e75c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e760:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e768:	d02f      	beq.n	800e7ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e770:	d863      	bhi.n	800e83a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e77e:	d012      	beq.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e780:	e05b      	b.n	800e83a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e782:	4b92      	ldr	r3, [pc, #584]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e78a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e78e:	d107      	bne.n	800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e790:	f107 0318 	add.w	r3, r7, #24
 800e794:	4618      	mov	r0, r3
 800e796:	f000 f991 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e79e:	e16e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a4:	e16b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e7a6:	4b89      	ldr	r3, [pc, #548]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7b2:	d107      	bne.n	800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7b4:	f107 030c 	add.w	r3, r7, #12
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 fad3 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7c2:	e15c      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7c8:	e159      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e7ca:	4b80      	ldr	r3, [pc, #512]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e7d4:	4b7d      	ldr	r3, [pc, #500]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d10c      	bne.n	800e7fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d109      	bne.n	800e7fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7e6:	4b79      	ldr	r3, [pc, #484]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	08db      	lsrs	r3, r3, #3
 800e7ec:	f003 0303 	and.w	r3, r3, #3
 800e7f0:	4a77      	ldr	r2, [pc, #476]	; (800e9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7f8:	e01e      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e7fa:	4b74      	ldr	r3, [pc, #464]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e806:	d106      	bne.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e80e:	d102      	bne.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e810:	4b70      	ldr	r3, [pc, #448]	; (800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e814:	e010      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e816:	4b6d      	ldr	r3, [pc, #436]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e81e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e822:	d106      	bne.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e82a:	d102      	bne.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e82c:	4b6a      	ldr	r3, [pc, #424]	; (800e9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e830:	e002      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e836:	e122      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e838:	e121      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e83a:	2300      	movs	r3, #0
 800e83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e83e:	e11e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e844:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e848:	430b      	orrs	r3, r1
 800e84a:	d133      	bne.n	800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e84c:	4b5f      	ldr	r3, [pc, #380]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e854:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d004      	beq.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e862:	d012      	beq.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e864:	e023      	b.n	800e8ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e866:	4b59      	ldr	r3, [pc, #356]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e872:	d107      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 fbc7 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e882:	e0fc      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e888:	e0f9      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e88a:	4b50      	ldr	r3, [pc, #320]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e896:	d107      	bne.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e898:	f107 0318 	add.w	r3, r7, #24
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 f90d 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8a6:	e0ea      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ac:	e0e7      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b2:	e0e4      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e8bc:	430b      	orrs	r3, r1
 800e8be:	f040 808d 	bne.w	800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e8c2:	4b42      	ldr	r3, [pc, #264]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e8ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8d2:	d06b      	beq.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8da:	d874      	bhi.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8e2:	d056      	beq.n	800e992 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8ea:	d86c      	bhi.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8f2:	d03b      	beq.n	800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8fa:	d864      	bhi.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e902:	d021      	beq.n	800e948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e90a:	d85c      	bhi.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d004      	beq.n	800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e918:	d004      	beq.n	800e924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e91a:	e054      	b.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e91c:	f000 f8b8 	bl	800ea90 <HAL_RCCEx_GetD3PCLK1Freq>
 800e920:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e922:	e0ac      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e924:	4b29      	ldr	r3, [pc, #164]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e92c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e930:	d107      	bne.n	800e942 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e932:	f107 0318 	add.w	r3, r7, #24
 800e936:	4618      	mov	r0, r3
 800e938:	f000 f8c0 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e940:	e09d      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e942:	2300      	movs	r3, #0
 800e944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e946:	e09a      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e948:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e954:	d107      	bne.n	800e966 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e956:	f107 030c 	add.w	r3, r7, #12
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 fa02 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e964:	e08b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e96a:	e088      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e96c:	4b17      	ldr	r3, [pc, #92]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f003 0304 	and.w	r3, r3, #4
 800e974:	2b04      	cmp	r3, #4
 800e976:	d109      	bne.n	800e98c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e978:	4b14      	ldr	r3, [pc, #80]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	08db      	lsrs	r3, r3, #3
 800e97e:	f003 0303 	and.w	r3, r3, #3
 800e982:	4a13      	ldr	r2, [pc, #76]	; (800e9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e984:	fa22 f303 	lsr.w	r3, r2, r3
 800e988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e98a:	e078      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e990:	e075      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e992:	4b0e      	ldr	r3, [pc, #56]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e99e:	d102      	bne.n	800e9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9a4:	e06b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9aa:	e068      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e9ac:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9b8:	d102      	bne.n	800e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e9ba:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9be:	e05e      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9c4:	e05b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ca:	e058      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e9cc:	58024400 	.word	0x58024400
 800e9d0:	03d09000 	.word	0x03d09000
 800e9d4:	003d0900 	.word	0x003d0900
 800e9d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e9e4:	430b      	orrs	r3, r1
 800e9e6:	d148      	bne.n	800ea7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e9e8:	4b27      	ldr	r3, [pc, #156]	; (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9f8:	d02a      	beq.n	800ea50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea00:	d838      	bhi.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d004      	beq.n	800ea12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ea08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea0e:	d00d      	beq.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ea10:	e030      	b.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea12:	4b1d      	ldr	r3, [pc, #116]	; (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea1e:	d102      	bne.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ea20:	4b1a      	ldr	r3, [pc, #104]	; (800ea8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ea22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea24:	e02b      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea2a:	e028      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea2c:	4b16      	ldr	r3, [pc, #88]	; (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea38:	d107      	bne.n	800ea4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 fae4 	bl	800f00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea48:	e019      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea4e:	e016      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea50:	4b0d      	ldr	r3, [pc, #52]	; (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea5c:	d107      	bne.n	800ea6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea5e:	f107 0318 	add.w	r3, r7, #24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 f82a 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea6c:	e007      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea72:	e004      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea78:	e001      	b.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ea7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3740      	adds	r7, #64	; 0x40
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	58024400 	.word	0x58024400
 800ea8c:	017d7840 	.word	0x017d7840

0800ea90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ea94:	f7fe f816 	bl	800cac4 <HAL_RCC_GetHCLKFreq>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	4b06      	ldr	r3, [pc, #24]	; (800eab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	091b      	lsrs	r3, r3, #4
 800eaa0:	f003 0307 	and.w	r3, r3, #7
 800eaa4:	4904      	ldr	r1, [pc, #16]	; (800eab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eaa6:	5ccb      	ldrb	r3, [r1, r3]
 800eaa8:	f003 031f 	and.w	r3, r3, #31
 800eaac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	58024400 	.word	0x58024400
 800eab8:	0801819c 	.word	0x0801819c

0800eabc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b089      	sub	sp, #36	; 0x24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eac4:	4ba1      	ldr	r3, [pc, #644]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac8:	f003 0303 	and.w	r3, r3, #3
 800eacc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eace:	4b9f      	ldr	r3, [pc, #636]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ead0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ead2:	0b1b      	lsrs	r3, r3, #12
 800ead4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ead8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eada:	4b9c      	ldr	r3, [pc, #624]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	091b      	lsrs	r3, r3, #4
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800eae6:	4b99      	ldr	r3, [pc, #612]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaea:	08db      	lsrs	r3, r3, #3
 800eaec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eaf0:	693a      	ldr	r2, [r7, #16]
 800eaf2:	fb02 f303 	mul.w	r3, r2, r3
 800eaf6:	ee07 3a90 	vmov	s15, r3
 800eafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eafe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 8111 	beq.w	800ed2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	f000 8083 	beq.w	800ec18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	f200 80a1 	bhi.w	800ec5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d003      	beq.n	800eb28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d056      	beq.n	800ebd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800eb26:	e099      	b.n	800ec5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb28:	4b88      	ldr	r3, [pc, #544]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 0320 	and.w	r3, r3, #32
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d02d      	beq.n	800eb90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb34:	4b85      	ldr	r3, [pc, #532]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	08db      	lsrs	r3, r3, #3
 800eb3a:	f003 0303 	and.w	r3, r3, #3
 800eb3e:	4a84      	ldr	r2, [pc, #528]	; (800ed50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800eb40:	fa22 f303 	lsr.w	r3, r2, r3
 800eb44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	ee07 3a90 	vmov	s15, r3
 800eb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	ee07 3a90 	vmov	s15, r3
 800eb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb5e:	4b7b      	ldr	r3, [pc, #492]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb66:	ee07 3a90 	vmov	s15, r3
 800eb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ed54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800eb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eb8e:	e087      	b.n	800eca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	ee07 3a90 	vmov	s15, r3
 800eb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ed58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800eb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eba2:	4b6a      	ldr	r3, [pc, #424]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebaa:	ee07 3a90 	vmov	s15, r3
 800ebae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ed54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ebba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebd2:	e065      	b.n	800eca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	ee07 3a90 	vmov	s15, r3
 800ebda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ed5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ebe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebe6:	4b59      	ldr	r3, [pc, #356]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebee:	ee07 3a90 	vmov	s15, r3
 800ebf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ed54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ebfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec16:	e043      	b.n	800eca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	ee07 3a90 	vmov	s15, r3
 800ec1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ed60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ec26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec2a:	4b48      	ldr	r3, [pc, #288]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec32:	ee07 3a90 	vmov	s15, r3
 800ec36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ed54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec5a:	e021      	b.n	800eca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	ee07 3a90 	vmov	s15, r3
 800ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ed5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ec6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec6e:	4b37      	ldr	r3, [pc, #220]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ed54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800eca0:	4b2a      	ldr	r3, [pc, #168]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca4:	0a5b      	lsrs	r3, r3, #9
 800eca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecaa:	ee07 3a90 	vmov	s15, r3
 800ecae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ecba:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecc6:	ee17 2a90 	vmov	r2, s15
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ecce:	4b1f      	ldr	r3, [pc, #124]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd2:	0c1b      	lsrs	r3, r3, #16
 800ecd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecd8:	ee07 3a90 	vmov	s15, r3
 800ecdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ece0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ece4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ece8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecf4:	ee17 2a90 	vmov	r2, s15
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ecfc:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed00:	0e1b      	lsrs	r3, r3, #24
 800ed02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed06:	ee07 3a90 	vmov	s15, r3
 800ed0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed22:	ee17 2a90 	vmov	r2, s15
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ed2a:	e008      	b.n	800ed3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	609a      	str	r2, [r3, #8]
}
 800ed3e:	bf00      	nop
 800ed40:	3724      	adds	r7, #36	; 0x24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	58024400 	.word	0x58024400
 800ed50:	03d09000 	.word	0x03d09000
 800ed54:	46000000 	.word	0x46000000
 800ed58:	4c742400 	.word	0x4c742400
 800ed5c:	4a742400 	.word	0x4a742400
 800ed60:	4bbebc20 	.word	0x4bbebc20

0800ed64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b089      	sub	sp, #36	; 0x24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed6c:	4ba1      	ldr	r3, [pc, #644]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed70:	f003 0303 	and.w	r3, r3, #3
 800ed74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ed76:	4b9f      	ldr	r3, [pc, #636]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7a:	0d1b      	lsrs	r3, r3, #20
 800ed7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ed82:	4b9c      	ldr	r3, [pc, #624]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed86:	0a1b      	lsrs	r3, r3, #8
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ed8e:	4b99      	ldr	r3, [pc, #612]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed92:	08db      	lsrs	r3, r3, #3
 800ed94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed98:	693a      	ldr	r2, [r7, #16]
 800ed9a:	fb02 f303 	mul.w	r3, r2, r3
 800ed9e:	ee07 3a90 	vmov	s15, r3
 800eda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eda6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	f000 8111 	beq.w	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	f000 8083 	beq.w	800eec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	f200 80a1 	bhi.w	800ef04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d003      	beq.n	800edd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d056      	beq.n	800ee7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800edce:	e099      	b.n	800ef04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edd0:	4b88      	ldr	r3, [pc, #544]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f003 0320 	and.w	r3, r3, #32
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d02d      	beq.n	800ee38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eddc:	4b85      	ldr	r3, [pc, #532]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	08db      	lsrs	r3, r3, #3
 800ede2:	f003 0303 	and.w	r3, r3, #3
 800ede6:	4a84      	ldr	r2, [pc, #528]	; (800eff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ede8:	fa22 f303 	lsr.w	r3, r2, r3
 800edec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	ee07 3a90 	vmov	s15, r3
 800edf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	ee07 3a90 	vmov	s15, r3
 800edfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee06:	4b7b      	ldr	r3, [pc, #492]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee0e:	ee07 3a90 	vmov	s15, r3
 800ee12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800effc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ee1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ee36:	e087      	b.n	800ef48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	ee07 3a90 	vmov	s15, r3
 800ee3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ee46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee4a:	4b6a      	ldr	r3, [pc, #424]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee52:	ee07 3a90 	vmov	s15, r3
 800ee56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800effc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ee62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee7a:	e065      	b.n	800ef48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	ee07 3a90 	vmov	s15, r3
 800ee82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ee8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee8e:	4b59      	ldr	r3, [pc, #356]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee96:	ee07 3a90 	vmov	s15, r3
 800ee9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800eea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800effc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eebe:	e043      	b.n	800ef48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	ee07 3a90 	vmov	s15, r3
 800eec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800eece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eed2:	4b48      	ldr	r3, [pc, #288]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeda:	ee07 3a90 	vmov	s15, r3
 800eede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800effc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef02:	e021      	b.n	800ef48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	ee07 3a90 	vmov	s15, r3
 800ef0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef16:	4b37      	ldr	r3, [pc, #220]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef1e:	ee07 3a90 	vmov	s15, r3
 800ef22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800effc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ef48:	4b2a      	ldr	r3, [pc, #168]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef4c:	0a5b      	lsrs	r3, r3, #9
 800ef4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef52:	ee07 3a90 	vmov	s15, r3
 800ef56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef6e:	ee17 2a90 	vmov	r2, s15
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ef76:	4b1f      	ldr	r3, [pc, #124]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7a:	0c1b      	lsrs	r3, r3, #16
 800ef7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef80:	ee07 3a90 	vmov	s15, r3
 800ef84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef9c:	ee17 2a90 	vmov	r2, s15
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800efa4:	4b13      	ldr	r3, [pc, #76]	; (800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa8:	0e1b      	lsrs	r3, r3, #24
 800efaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efae:	ee07 3a90 	vmov	s15, r3
 800efb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800efba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800efc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efca:	ee17 2a90 	vmov	r2, s15
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800efd2:	e008      	b.n	800efe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	609a      	str	r2, [r3, #8]
}
 800efe6:	bf00      	nop
 800efe8:	3724      	adds	r7, #36	; 0x24
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	58024400 	.word	0x58024400
 800eff8:	03d09000 	.word	0x03d09000
 800effc:	46000000 	.word	0x46000000
 800f000:	4c742400 	.word	0x4c742400
 800f004:	4a742400 	.word	0x4a742400
 800f008:	4bbebc20 	.word	0x4bbebc20

0800f00c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b089      	sub	sp, #36	; 0x24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f014:	4ba0      	ldr	r3, [pc, #640]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f018:	f003 0303 	and.w	r3, r3, #3
 800f01c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f01e:	4b9e      	ldr	r3, [pc, #632]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f022:	091b      	lsrs	r3, r3, #4
 800f024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f028:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f02a:	4b9b      	ldr	r3, [pc, #620]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f034:	4b98      	ldr	r3, [pc, #608]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f038:	08db      	lsrs	r3, r3, #3
 800f03a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f03e:	693a      	ldr	r2, [r7, #16]
 800f040:	fb02 f303 	mul.w	r3, r2, r3
 800f044:	ee07 3a90 	vmov	s15, r3
 800f048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f04c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 8111 	beq.w	800f27a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	f000 8083 	beq.w	800f166 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	2b02      	cmp	r3, #2
 800f064:	f200 80a1 	bhi.w	800f1aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d003      	beq.n	800f076 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d056      	beq.n	800f122 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f074:	e099      	b.n	800f1aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f076:	4b88      	ldr	r3, [pc, #544]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f003 0320 	and.w	r3, r3, #32
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d02d      	beq.n	800f0de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f082:	4b85      	ldr	r3, [pc, #532]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	08db      	lsrs	r3, r3, #3
 800f088:	f003 0303 	and.w	r3, r3, #3
 800f08c:	4a83      	ldr	r2, [pc, #524]	; (800f29c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f08e:	fa22 f303 	lsr.w	r3, r2, r3
 800f092:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	ee07 3a90 	vmov	s15, r3
 800f09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	ee07 3a90 	vmov	s15, r3
 800f0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0ac:	4b7a      	ldr	r3, [pc, #488]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0b4:	ee07 3a90 	vmov	s15, r3
 800f0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f0dc:	e087      	b.n	800f1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	ee07 3a90 	vmov	s15, r3
 800f0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0f0:	4b69      	ldr	r3, [pc, #420]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f8:	ee07 3a90 	vmov	s15, r3
 800f0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f100:	ed97 6a03 	vldr	s12, [r7, #12]
 800f104:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f11c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f120:	e065      	b.n	800f1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	ee07 3a90 	vmov	s15, r3
 800f128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f12c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f134:	4b58      	ldr	r3, [pc, #352]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f13c:	ee07 3a90 	vmov	s15, r3
 800f140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f144:	ed97 6a03 	vldr	s12, [r7, #12]
 800f148:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f164:	e043      	b.n	800f1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	ee07 3a90 	vmov	s15, r3
 800f16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f170:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f2ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f178:	4b47      	ldr	r3, [pc, #284]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f180:	ee07 3a90 	vmov	s15, r3
 800f184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f188:	ed97 6a03 	vldr	s12, [r7, #12]
 800f18c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1a8:	e021      	b.n	800f1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1bc:	4b36      	ldr	r3, [pc, #216]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1c4:	ee07 3a90 	vmov	s15, r3
 800f1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f1ee:	4b2a      	ldr	r3, [pc, #168]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1f2:	0a5b      	lsrs	r3, r3, #9
 800f1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1f8:	ee07 3a90 	vmov	s15, r3
 800f1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f204:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f208:	edd7 6a07 	vldr	s13, [r7, #28]
 800f20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f214:	ee17 2a90 	vmov	r2, s15
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f21c:	4b1e      	ldr	r3, [pc, #120]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f220:	0c1b      	lsrs	r3, r3, #16
 800f222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f226:	ee07 3a90 	vmov	s15, r3
 800f22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f232:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f236:	edd7 6a07 	vldr	s13, [r7, #28]
 800f23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f242:	ee17 2a90 	vmov	r2, s15
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f24a:	4b13      	ldr	r3, [pc, #76]	; (800f298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24e:	0e1b      	lsrs	r3, r3, #24
 800f250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f254:	ee07 3a90 	vmov	s15, r3
 800f258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f25c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f260:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f264:	edd7 6a07 	vldr	s13, [r7, #28]
 800f268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f270:	ee17 2a90 	vmov	r2, s15
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f278:	e008      	b.n	800f28c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	609a      	str	r2, [r3, #8]
}
 800f28c:	bf00      	nop
 800f28e:	3724      	adds	r7, #36	; 0x24
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	58024400 	.word	0x58024400
 800f29c:	03d09000 	.word	0x03d09000
 800f2a0:	46000000 	.word	0x46000000
 800f2a4:	4c742400 	.word	0x4c742400
 800f2a8:	4a742400 	.word	0x4a742400
 800f2ac:	4bbebc20 	.word	0x4bbebc20

0800f2b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f2be:	4b53      	ldr	r3, [pc, #332]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c2:	f003 0303 	and.w	r3, r3, #3
 800f2c6:	2b03      	cmp	r3, #3
 800f2c8:	d101      	bne.n	800f2ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e099      	b.n	800f402 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f2ce:	4b4f      	ldr	r3, [pc, #316]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a4e      	ldr	r2, [pc, #312]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f2d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2da:	f7f6 f8c7 	bl	800546c <HAL_GetTick>
 800f2de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f2e0:	e008      	b.n	800f2f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f2e2:	f7f6 f8c3 	bl	800546c <HAL_GetTick>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	2b02      	cmp	r3, #2
 800f2ee:	d901      	bls.n	800f2f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	e086      	b.n	800f402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f2f4:	4b45      	ldr	r3, [pc, #276]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f0      	bne.n	800f2e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f300:	4b42      	ldr	r3, [pc, #264]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f304:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	031b      	lsls	r3, r3, #12
 800f30e:	493f      	ldr	r1, [pc, #252]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f310:	4313      	orrs	r3, r2
 800f312:	628b      	str	r3, [r1, #40]	; 0x28
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	3b01      	subs	r3, #1
 800f31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	3b01      	subs	r3, #1
 800f324:	025b      	lsls	r3, r3, #9
 800f326:	b29b      	uxth	r3, r3
 800f328:	431a      	orrs	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	3b01      	subs	r3, #1
 800f330:	041b      	lsls	r3, r3, #16
 800f332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f336:	431a      	orrs	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	061b      	lsls	r3, r3, #24
 800f340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f344:	4931      	ldr	r1, [pc, #196]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f346:	4313      	orrs	r3, r2
 800f348:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f34a:	4b30      	ldr	r3, [pc, #192]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	492d      	ldr	r1, [pc, #180]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f358:	4313      	orrs	r3, r2
 800f35a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f35c:	4b2b      	ldr	r3, [pc, #172]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f360:	f023 0220 	bic.w	r2, r3, #32
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	699b      	ldr	r3, [r3, #24]
 800f368:	4928      	ldr	r1, [pc, #160]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f36a:	4313      	orrs	r3, r2
 800f36c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f36e:	4b27      	ldr	r3, [pc, #156]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f372:	4a26      	ldr	r2, [pc, #152]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f374:	f023 0310 	bic.w	r3, r3, #16
 800f378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f37c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f37e:	4b24      	ldr	r3, [pc, #144]	; (800f410 <RCCEx_PLL2_Config+0x160>)
 800f380:	4013      	ands	r3, r2
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	69d2      	ldr	r2, [r2, #28]
 800f386:	00d2      	lsls	r2, r2, #3
 800f388:	4920      	ldr	r1, [pc, #128]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f38a:	4313      	orrs	r3, r2
 800f38c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f38e:	4b1f      	ldr	r3, [pc, #124]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f392:	4a1e      	ldr	r2, [pc, #120]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f394:	f043 0310 	orr.w	r3, r3, #16
 800f398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d106      	bne.n	800f3ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f3a0:	4b1a      	ldr	r3, [pc, #104]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a4:	4a19      	ldr	r2, [pc, #100]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f3ac:	e00f      	b.n	800f3ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d106      	bne.n	800f3c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b8:	4a14      	ldr	r2, [pc, #80]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f3c0:	e005      	b.n	800f3ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f3c2:	4b12      	ldr	r3, [pc, #72]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c6:	4a11      	ldr	r2, [pc, #68]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f3ce:	4b0f      	ldr	r3, [pc, #60]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	4a0e      	ldr	r2, [pc, #56]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3da:	f7f6 f847 	bl	800546c <HAL_GetTick>
 800f3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f3e0:	e008      	b.n	800f3f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f3e2:	f7f6 f843 	bl	800546c <HAL_GetTick>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d901      	bls.n	800f3f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f3f0:	2303      	movs	r3, #3
 800f3f2:	e006      	b.n	800f402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f3f4:	4b05      	ldr	r3, [pc, #20]	; (800f40c <RCCEx_PLL2_Config+0x15c>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0f0      	beq.n	800f3e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f400:	7bfb      	ldrb	r3, [r7, #15]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	58024400 	.word	0x58024400
 800f410:	ffff0007 	.word	0xffff0007

0800f414 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f422:	4b53      	ldr	r3, [pc, #332]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f426:	f003 0303 	and.w	r3, r3, #3
 800f42a:	2b03      	cmp	r3, #3
 800f42c:	d101      	bne.n	800f432 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e099      	b.n	800f566 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f432:	4b4f      	ldr	r3, [pc, #316]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a4e      	ldr	r2, [pc, #312]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f43e:	f7f6 f815 	bl	800546c <HAL_GetTick>
 800f442:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f444:	e008      	b.n	800f458 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f446:	f7f6 f811 	bl	800546c <HAL_GetTick>
 800f44a:	4602      	mov	r2, r0
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	2b02      	cmp	r3, #2
 800f452:	d901      	bls.n	800f458 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f454:	2303      	movs	r3, #3
 800f456:	e086      	b.n	800f566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f458:	4b45      	ldr	r3, [pc, #276]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1f0      	bne.n	800f446 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f464:	4b42      	ldr	r3, [pc, #264]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f468:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	051b      	lsls	r3, r3, #20
 800f472:	493f      	ldr	r1, [pc, #252]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f474:	4313      	orrs	r3, r2
 800f476:	628b      	str	r3, [r1, #40]	; 0x28
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	3b01      	subs	r3, #1
 800f488:	025b      	lsls	r3, r3, #9
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	431a      	orrs	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	3b01      	subs	r3, #1
 800f494:	041b      	lsls	r3, r3, #16
 800f496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f49a:	431a      	orrs	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	061b      	lsls	r3, r3, #24
 800f4a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f4a8:	4931      	ldr	r1, [pc, #196]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f4ae:	4b30      	ldr	r3, [pc, #192]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	492d      	ldr	r1, [pc, #180]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f4c0:	4b2b      	ldr	r3, [pc, #172]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	4928      	ldr	r1, [pc, #160]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f4d2:	4b27      	ldr	r3, [pc, #156]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d6:	4a26      	ldr	r2, [pc, #152]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f4de:	4b24      	ldr	r3, [pc, #144]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4e2:	4b24      	ldr	r3, [pc, #144]	; (800f574 <RCCEx_PLL3_Config+0x160>)
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	69d2      	ldr	r2, [r2, #28]
 800f4ea:	00d2      	lsls	r2, r2, #3
 800f4ec:	4920      	ldr	r1, [pc, #128]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f4f2:	4b1f      	ldr	r3, [pc, #124]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f6:	4a1e      	ldr	r2, [pc, #120]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f4f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d106      	bne.n	800f512 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f504:	4b1a      	ldr	r3, [pc, #104]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f508:	4a19      	ldr	r2, [pc, #100]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f50a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f50e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f510:	e00f      	b.n	800f532 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d106      	bne.n	800f526 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f518:	4b15      	ldr	r3, [pc, #84]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f51c:	4a14      	ldr	r2, [pc, #80]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f51e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f522:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f524:	e005      	b.n	800f532 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f526:	4b12      	ldr	r3, [pc, #72]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f52a:	4a11      	ldr	r2, [pc, #68]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f52c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f532:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a0e      	ldr	r2, [pc, #56]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f53c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f53e:	f7f5 ff95 	bl	800546c <HAL_GetTick>
 800f542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f544:	e008      	b.n	800f558 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f546:	f7f5 ff91 	bl	800546c <HAL_GetTick>
 800f54a:	4602      	mov	r2, r0
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	2b02      	cmp	r3, #2
 800f552:	d901      	bls.n	800f558 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f554:	2303      	movs	r3, #3
 800f556:	e006      	b.n	800f566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f558:	4b05      	ldr	r3, [pc, #20]	; (800f570 <RCCEx_PLL3_Config+0x15c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f560:	2b00      	cmp	r3, #0
 800f562:	d0f0      	beq.n	800f546 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f564:	7bfb      	ldrb	r3, [r7, #15]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	58024400 	.word	0x58024400
 800f574:	ffff0007 	.word	0xffff0007

0800f578 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e054      	b.n	800f634 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	7a5b      	ldrb	r3, [r3, #9]
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	2b00      	cmp	r3, #0
 800f592:	d105      	bne.n	800f5a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7f3 ffec 	bl	8003578 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2202      	movs	r2, #2
 800f5a4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f023 0120 	bic.w	r1, r3, #32
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685a      	ldr	r2, [r3, #4]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f042 0204 	orr.w	r2, r2, #4
 800f5ca:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d6:	2b40      	cmp	r3, #64	; 0x40
 800f5d8:	d104      	bne.n	800f5e4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2204      	movs	r2, #4
 800f5de:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e027      	b.n	800f634 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f5e4:	f7f5 ff42 	bl	800546c <HAL_GetTick>
 800f5e8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f5ea:	e015      	b.n	800f618 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f5ec:	f7f5 ff3e 	bl	800546c <HAL_GetTick>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d90e      	bls.n	800f618 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	f003 0304 	and.w	r3, r3, #4
 800f604:	2b04      	cmp	r3, #4
 800f606:	d107      	bne.n	800f618 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2204      	movs	r2, #4
 800f60c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2202      	movs	r2, #2
 800f612:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f614:	2301      	movs	r3, #1
 800f616:	e00d      	b.n	800f634 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	f003 0304 	and.w	r3, r3, #4
 800f622:	2b04      	cmp	r3, #4
 800f624:	d0e2      	beq.n	800f5ec <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2201      	movs	r2, #1
 800f62a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7a1b      	ldrb	r3, [r3, #8]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d101      	bne.n	800f656 <HAL_RNG_GenerateRandomNumber+0x1a>
 800f652:	2302      	movs	r3, #2
 800f654:	e044      	b.n	800f6e0 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7a5b      	ldrb	r3, [r3, #9]
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b01      	cmp	r3, #1
 800f664:	d133      	bne.n	800f6ce <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2202      	movs	r2, #2
 800f66a:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f66c:	f7f5 fefe 	bl	800546c <HAL_GetTick>
 800f670:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f672:	e018      	b.n	800f6a6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f674:	f7f5 fefa 	bl	800546c <HAL_GetTick>
 800f678:	4602      	mov	r2, r0
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	1ad3      	subs	r3, r2, r3
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d911      	bls.n	800f6a6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d00a      	beq.n	800f6a6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2202      	movs	r2, #2
 800f69a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e01c      	b.n	800f6e0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	f003 0301 	and.w	r3, r3, #1
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d1df      	bne.n	800f674 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689a      	ldr	r2, [r3, #8]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	691a      	ldr	r2, [r3, #16]
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	725a      	strb	r2, [r3, #9]
 800f6cc:	e004      	b.n	800f6d8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2204      	movs	r2, #4
 800f6d2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	721a      	strb	r2, [r3, #8]

  return status;
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
 800f6f4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d904      	bls.n	800f706 <HAL_SAI_InitProtocol+0x1e>
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	3b03      	subs	r3, #3
 800f700:	2b01      	cmp	r3, #1
 800f702:	d812      	bhi.n	800f72a <HAL_SAI_InitProtocol+0x42>
 800f704:	e008      	b.n	800f718 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	68b9      	ldr	r1, [r7, #8]
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f000 fc11 	bl	800ff34 <SAI_InitI2S>
 800f712:	4603      	mov	r3, r0
 800f714:	75fb      	strb	r3, [r7, #23]
      break;
 800f716:	e00b      	b.n	800f730 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	68b9      	ldr	r1, [r7, #8]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f000 fcba 	bl	8010098 <SAI_InitPCM>
 800f724:	4603      	mov	r3, r0
 800f726:	75fb      	strb	r3, [r7, #23]
      break;
 800f728:	e002      	b.n	800f730 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	75fb      	strb	r3, [r7, #23]
      break;
 800f72e:	bf00      	nop
  }

  if (status == HAL_OK)
 800f730:	7dfb      	ldrb	r3, [r7, #23]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d104      	bne.n	800f740 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f000 f808 	bl	800f74c <HAL_SAI_Init>
 800f73c:	4603      	mov	r3, r0
 800f73e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f740:	7dfb      	ldrb	r3, [r7, #23]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3718      	adds	r7, #24
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
	...

0800f74c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	; 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d101      	bne.n	800f75e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e28e      	b.n	800fc7c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f75e:	f7f5 feb5 	bl	80054cc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d113      	bne.n	800f794 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a96      	ldr	r2, [pc, #600]	; (800f9cc <HAL_SAI_Init+0x280>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d004      	beq.n	800f780 <HAL_SAI_Init+0x34>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a95      	ldr	r2, [pc, #596]	; (800f9d0 <HAL_SAI_Init+0x284>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d107      	bne.n	800f790 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f784:	2b01      	cmp	r3, #1
 800f786:	d103      	bne.n	800f790 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f790:	2301      	movs	r3, #1
 800f792:	e273      	b.n	800fc7c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a8c      	ldr	r2, [pc, #560]	; (800f9cc <HAL_SAI_Init+0x280>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d004      	beq.n	800f7a8 <HAL_SAI_Init+0x5c>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a8c      	ldr	r2, [pc, #560]	; (800f9d4 <HAL_SAI_Init+0x288>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d102      	bne.n	800f7ae <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f7a8:	4b8b      	ldr	r3, [pc, #556]	; (800f9d8 <HAL_SAI_Init+0x28c>)
 800f7aa:	61bb      	str	r3, [r7, #24]
 800f7ac:	e028      	b.n	800f800 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a8a      	ldr	r2, [pc, #552]	; (800f9dc <HAL_SAI_Init+0x290>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d004      	beq.n	800f7c2 <HAL_SAI_Init+0x76>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a88      	ldr	r2, [pc, #544]	; (800f9e0 <HAL_SAI_Init+0x294>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d102      	bne.n	800f7c8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f7c2:	4b88      	ldr	r3, [pc, #544]	; (800f9e4 <HAL_SAI_Init+0x298>)
 800f7c4:	61bb      	str	r3, [r7, #24]
 800f7c6:	e01b      	b.n	800f800 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a86      	ldr	r2, [pc, #536]	; (800f9e8 <HAL_SAI_Init+0x29c>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d004      	beq.n	800f7dc <HAL_SAI_Init+0x90>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a85      	ldr	r2, [pc, #532]	; (800f9ec <HAL_SAI_Init+0x2a0>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d102      	bne.n	800f7e2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f7dc:	4b84      	ldr	r3, [pc, #528]	; (800f9f0 <HAL_SAI_Init+0x2a4>)
 800f7de:	61bb      	str	r3, [r7, #24]
 800f7e0:	e00e      	b.n	800f800 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a7a      	ldr	r2, [pc, #488]	; (800f9d0 <HAL_SAI_Init+0x284>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d004      	beq.n	800f7f6 <HAL_SAI_Init+0xaa>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a80      	ldr	r2, [pc, #512]	; (800f9f4 <HAL_SAI_Init+0x2a8>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d102      	bne.n	800f7fc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f7f6:	4b80      	ldr	r3, [pc, #512]	; (800f9f8 <HAL_SAI_Init+0x2ac>)
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	e001      	b.n	800f800 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e23d      	b.n	800fc7c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d106      	bne.n	800f81a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7f3 ff49 	bl	80036ac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 fcf6 	bl	801020c <SAI_Disable>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d001      	beq.n	800f82a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	e228      	b.n	800fc7c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2202      	movs	r2, #2
 800f82e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d00c      	beq.n	800f854 <HAL_SAI_Init+0x108>
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d80d      	bhi.n	800f85a <HAL_SAI_Init+0x10e>
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <HAL_SAI_Init+0xfc>
 800f842:	2b01      	cmp	r3, #1
 800f844:	d003      	beq.n	800f84e <HAL_SAI_Init+0x102>
 800f846:	e008      	b.n	800f85a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f848:	2300      	movs	r3, #0
 800f84a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f84c:	e008      	b.n	800f860 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f84e:	2310      	movs	r3, #16
 800f850:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f852:	e005      	b.n	800f860 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f854:	2320      	movs	r3, #32
 800f856:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f858:	e002      	b.n	800f860 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f85e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	2b05      	cmp	r3, #5
 800f866:	d832      	bhi.n	800f8ce <HAL_SAI_Init+0x182>
 800f868:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <HAL_SAI_Init+0x124>)
 800f86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86e:	bf00      	nop
 800f870:	0800f889 	.word	0x0800f889
 800f874:	0800f88f 	.word	0x0800f88f
 800f878:	0800f897 	.word	0x0800f897
 800f87c:	0800f89f 	.word	0x0800f89f
 800f880:	0800f8af 	.word	0x0800f8af
 800f884:	0800f8bf 	.word	0x0800f8bf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	61fb      	str	r3, [r7, #28]
      break;
 800f88c:	e022      	b.n	800f8d4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f892:	61fb      	str	r3, [r7, #28]
      break;
 800f894:	e01e      	b.n	800f8d4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f89a:	61fb      	str	r3, [r7, #28]
      break;
 800f89c:	e01a      	b.n	800f8d4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f89e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	f043 0301 	orr.w	r3, r3, #1
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8ac:	e012      	b.n	800f8d4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f8ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8b2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b6:	f043 0302 	orr.w	r3, r3, #2
 800f8ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8bc:	e00a      	b.n	800f8d4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f8be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8c2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	f043 0303 	orr.w	r3, r3, #3
 800f8ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8cc:	e002      	b.n	800f8d4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	61fb      	str	r3, [r7, #28]
      break;
 800f8d2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80c5 	beq.w	800fa6e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a37      	ldr	r2, [pc, #220]	; (800f9cc <HAL_SAI_Init+0x280>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d004      	beq.n	800f8fc <HAL_SAI_Init+0x1b0>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a37      	ldr	r2, [pc, #220]	; (800f9d4 <HAL_SAI_Init+0x288>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d106      	bne.n	800f90a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f8fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f900:	f04f 0100 	mov.w	r1, #0
 800f904:	f7fe fb44 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f908:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a33      	ldr	r2, [pc, #204]	; (800f9dc <HAL_SAI_Init+0x290>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d004      	beq.n	800f91e <HAL_SAI_Init+0x1d2>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a31      	ldr	r2, [pc, #196]	; (800f9e0 <HAL_SAI_Init+0x294>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d106      	bne.n	800f92c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f91e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f922:	f04f 0100 	mov.w	r1, #0
 800f926:	f7fe fb33 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f92a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a2d      	ldr	r2, [pc, #180]	; (800f9e8 <HAL_SAI_Init+0x29c>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d004      	beq.n	800f940 <HAL_SAI_Init+0x1f4>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a2c      	ldr	r2, [pc, #176]	; (800f9ec <HAL_SAI_Init+0x2a0>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d106      	bne.n	800f94e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f940:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f944:	f04f 0100 	mov.w	r1, #0
 800f948:	f7fe fb22 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f94c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4a1f      	ldr	r2, [pc, #124]	; (800f9d0 <HAL_SAI_Init+0x284>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d106      	bne.n	800f966 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f958:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f95c:	f04f 0100 	mov.w	r1, #0
 800f960:	f7fe fb16 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f964:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a22      	ldr	r2, [pc, #136]	; (800f9f4 <HAL_SAI_Init+0x2a8>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d106      	bne.n	800f97e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f970:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f974:	f04f 0100 	mov.w	r1, #0
 800f978:	f7fe fb0a 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f97c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	699b      	ldr	r3, [r3, #24]
 800f982:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f986:	d139      	bne.n	800f9fc <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f98c:	2b04      	cmp	r3, #4
 800f98e:	d102      	bne.n	800f996 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f990:	2340      	movs	r3, #64	; 0x40
 800f992:	60fb      	str	r3, [r7, #12]
 800f994:	e00a      	b.n	800f9ac <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f99a:	2b08      	cmp	r3, #8
 800f99c:	d103      	bne.n	800f9a6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f99e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	e002      	b.n	800f9ac <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9aa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	005b      	lsls	r3, r3, #1
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6a1b      	ldr	r3, [r3, #32]
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	fb02 f303 	mul.w	r3, r2, r3
 800f9c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800f9c6:	613b      	str	r3, [r7, #16]
 800f9c8:	e030      	b.n	800fa2c <HAL_SAI_Init+0x2e0>
 800f9ca:	bf00      	nop
 800f9cc:	40015804 	.word	0x40015804
 800f9d0:	58005404 	.word	0x58005404
 800f9d4:	40015824 	.word	0x40015824
 800f9d8:	40015800 	.word	0x40015800
 800f9dc:	40015c04 	.word	0x40015c04
 800f9e0:	40015c24 	.word	0x40015c24
 800f9e4:	40015c00 	.word	0x40015c00
 800f9e8:	40016004 	.word	0x40016004
 800f9ec:	40016024 	.word	0x40016024
 800f9f0:	40016000 	.word	0x40016000
 800f9f4:	58005424 	.word	0x58005424
 800f9f8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa04:	d101      	bne.n	800fa0a <HAL_SAI_Init+0x2be>
 800fa06:	2302      	movs	r3, #2
 800fa08:	e000      	b.n	800fa0c <HAL_SAI_Init+0x2c0>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	4613      	mov	r3, r2
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4413      	add	r3, r2
 800fa16:	005b      	lsls	r3, r3, #1
 800fa18:	4619      	mov	r1, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	fb02 f303 	mul.w	r3, r2, r3
 800fa24:	021b      	lsls	r3, r3, #8
 800fa26:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa2a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	4a95      	ldr	r2, [pc, #596]	; (800fc84 <HAL_SAI_Init+0x538>)
 800fa30:	fba2 2303 	umull	r2, r3, r2, r3
 800fa34:	08da      	lsrs	r2, r3, #3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800fa3a:	6939      	ldr	r1, [r7, #16]
 800fa3c:	4b91      	ldr	r3, [pc, #580]	; (800fc84 <HAL_SAI_Init+0x538>)
 800fa3e:	fba3 2301 	umull	r2, r3, r3, r1
 800fa42:	08da      	lsrs	r2, r3, #3
 800fa44:	4613      	mov	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	005b      	lsls	r3, r3, #1
 800fa4c:	1aca      	subs	r2, r1, r3
 800fa4e:	2a08      	cmp	r2, #8
 800fa50:	d904      	bls.n	800fa5c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d104      	bne.n	800fa6e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa68:	085a      	lsrs	r2, r3, #1
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d003      	beq.n	800fa7e <HAL_SAI_Init+0x332>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	2b02      	cmp	r3, #2
 800fa7c:	d109      	bne.n	800fa92 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d101      	bne.n	800fa8a <HAL_SAI_Init+0x33e>
 800fa86:	2300      	movs	r3, #0
 800fa88:	e001      	b.n	800fa8e <HAL_SAI_Init+0x342>
 800fa8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa8e:	623b      	str	r3, [r7, #32]
 800fa90:	e008      	b.n	800faa4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d102      	bne.n	800faa0 <HAL_SAI_Init+0x354>
 800fa9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa9e:	e000      	b.n	800faa2 <HAL_SAI_Init+0x356>
 800faa0:	2300      	movs	r3, #0
 800faa2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800faa4:	f7f5 fd12 	bl	80054cc <HAL_GetREVID>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800faae:	d331      	bcc.n	800fb14 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6819      	ldr	r1, [r3, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	4b73      	ldr	r3, [pc, #460]	; (800fc88 <HAL_SAI_Init+0x53c>)
 800fabc:	400b      	ands	r3, r1
 800fabe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	6819      	ldr	r1, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	685a      	ldr	r2, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800face:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fad4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fada:	431a      	orrs	r2, r3
 800fadc:	6a3b      	ldr	r3, [r7, #32]
 800fade:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fae8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800faf4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafa:	051b      	lsls	r3, r3, #20
 800fafc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb02:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	430a      	orrs	r2, r1
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	e02d      	b.n	800fb70 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6819      	ldr	r1, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	4b5b      	ldr	r3, [pc, #364]	; (800fc8c <HAL_SAI_Init+0x540>)
 800fb20:	400b      	ands	r3, r1
 800fb22:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6819      	ldr	r1, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb32:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb38:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb3e:	431a      	orrs	r2, r3
 800fb40:	6a3b      	ldr	r3, [r7, #32]
 800fb42:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fb4c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	695b      	ldr	r3, [r3, #20]
 800fb52:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb58:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	051b      	lsls	r3, r3, #20
 800fb60:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb66:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	430a      	orrs	r2, r1
 800fb6e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6859      	ldr	r1, [r3, #4]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	4b45      	ldr	r3, [pc, #276]	; (800fc90 <HAL_SAI_Init+0x544>)
 800fb7c:	400b      	ands	r3, r1
 800fb7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6859      	ldr	r1, [r3, #4]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	69da      	ldr	r2, [r3, #28]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb8e:	431a      	orrs	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb94:	431a      	orrs	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6899      	ldr	r1, [r3, #8]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	4b3a      	ldr	r3, [pc, #232]	; (800fc94 <HAL_SAI_Init+0x548>)
 800fbaa:	400b      	ands	r3, r1
 800fbac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6899      	ldr	r1, [r3, #8]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbb8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fbbe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800fbc4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800fbca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800fbd4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68d9      	ldr	r1, [r3, #12]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800fbec:	400b      	ands	r3, r1
 800fbee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	68d9      	ldr	r1, [r3, #12]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc04:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fc06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc0c:	3b01      	subs	r3, #1
 800fc0e:	021b      	lsls	r3, r3, #8
 800fc10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	430a      	orrs	r2, r1
 800fc18:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a1e      	ldr	r2, [pc, #120]	; (800fc98 <HAL_SAI_Init+0x54c>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d004      	beq.n	800fc2e <HAL_SAI_Init+0x4e2>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a1c      	ldr	r2, [pc, #112]	; (800fc9c <HAL_SAI_Init+0x550>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d119      	bne.n	800fc62 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc32:	f023 0201 	bic.w	r2, r3, #1
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d10e      	bne.n	800fc62 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fc50:	431a      	orrs	r2, r3
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc5a:	f043 0201 	orr.w	r2, r3, #1
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3728      	adds	r7, #40	; 0x28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	cccccccd 	.word	0xcccccccd
 800fc88:	f005c010 	.word	0xf005c010
 800fc8c:	f805c010 	.word	0xf805c010
 800fc90:	ffff1ff0 	.word	0xffff1ff0
 800fc94:	fff88000 	.word	0xfff88000
 800fc98:	40015804 	.word	0x40015804
 800fc9c:	58005404 	.word	0x58005404

0800fca0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fcae:	f7f5 fbdd 	bl	800546c <HAL_GetTick>
 800fcb2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <HAL_SAI_Transmit_DMA+0x20>
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e098      	b.n	800fdf6 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	f040 8091 	bne.w	800fdf4 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d101      	bne.n	800fce0 <HAL_SAI_Transmit_DMA+0x40>
 800fcdc:	2302      	movs	r3, #2
 800fcde:	e08a      	b.n	800fdf6 <HAL_SAI_Transmit_DMA+0x156>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	88fa      	ldrh	r2, [r7, #6]
 800fcf2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	88fa      	ldrh	r2, [r7, #6]
 800fcfa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2212      	movs	r2, #18
 800fd0a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd14:	4a3a      	ldr	r2, [pc, #232]	; (800fe00 <HAL_SAI_Transmit_DMA+0x160>)
 800fd16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd1e:	4a39      	ldr	r2, [pc, #228]	; (800fe04 <HAL_SAI_Transmit_DMA+0x164>)
 800fd20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd28:	4a37      	ldr	r2, [pc, #220]	; (800fe08 <HAL_SAI_Transmit_DMA+0x168>)
 800fd2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd32:	2200      	movs	r2, #0
 800fd34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd40:	4619      	mov	r1, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	331c      	adds	r3, #28
 800fd48:	461a      	mov	r2, r3
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fd50:	f7f7 fe3a 	bl	80079c8 <HAL_DMA_Start_IT>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d005      	beq.n	800fd66 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	e047      	b.n	800fdf6 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fd66:	2100      	movs	r1, #0
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f000 fa17 	bl	801019c <SAI_InterruptFlag>
 800fd6e:	4601      	mov	r1, r0
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	691a      	ldr	r2, [r3, #16]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	430a      	orrs	r2, r1
 800fd7c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fd8c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fd8e:	e015      	b.n	800fdbc <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fd90:	f7f5 fb6c 	bl	800546c <HAL_GetTick>
 800fd94:	4602      	mov	r2, r0
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd9e:	d90d      	bls.n	800fdbc <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fda6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	e01c      	b.n	800fdf6 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d0e2      	beq.n	800fd90 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d107      	bne.n	800fde8 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fde6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	e000      	b.n	800fdf6 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fdf4:	2302      	movs	r3, #2
  }
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3718      	adds	r7, #24
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	080102e1 	.word	0x080102e1
 800fe04:	08010281 	.word	0x08010281
 800fe08:	08010379 	.word	0x08010379

0800fe0c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	4613      	mov	r3, r2
 800fe18:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <HAL_SAI_Receive_DMA+0x1a>
 800fe20:	88fb      	ldrh	r3, [r7, #6]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d101      	bne.n	800fe2a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fe26:	2301      	movs	r3, #1
 800fe28:	e079      	b.n	800ff1e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d172      	bne.n	800ff1c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d101      	bne.n	800fe44 <HAL_SAI_Receive_DMA+0x38>
 800fe40:	2302      	movs	r3, #2
 800fe42:	e06c      	b.n	800ff1e <HAL_SAI_Receive_DMA+0x112>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	88fa      	ldrh	r2, [r7, #6]
 800fe56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	88fa      	ldrh	r2, [r7, #6]
 800fe5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2222      	movs	r2, #34	; 0x22
 800fe6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe78:	4a2b      	ldr	r2, [pc, #172]	; (800ff28 <HAL_SAI_Receive_DMA+0x11c>)
 800fe7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe82:	4a2a      	ldr	r2, [pc, #168]	; (800ff2c <HAL_SAI_Receive_DMA+0x120>)
 800fe84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe8c:	4a28      	ldr	r2, [pc, #160]	; (800ff30 <HAL_SAI_Receive_DMA+0x124>)
 800fe8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe96:	2200      	movs	r2, #0
 800fe98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	331c      	adds	r3, #28
 800fea6:	4619      	mov	r1, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feac:	461a      	mov	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800feb4:	f7f7 fd88 	bl	80079c8 <HAL_DMA_Start_IT>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e029      	b.n	800ff1e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800feca:	2100      	movs	r1, #0
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f000 f965 	bl	801019c <SAI_InterruptFlag>
 800fed2:	4601      	mov	r1, r0
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	691a      	ldr	r2, [r3, #16]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	430a      	orrs	r2, r1
 800fee0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fef0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d107      	bne.n	800ff10 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ff0e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e000      	b.n	800ff1e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800ff1c:	2302      	movs	r3, #2
  }
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	0801035d 	.word	0x0801035d
 800ff2c:	080102fd 	.word	0x080102fd
 800ff30:	08010379 	.word	0x08010379

0800ff34 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b087      	sub	sp, #28
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
 800ff40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <SAI_InitI2S+0x2e>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	2b02      	cmp	r3, #2
 800ff60:	d103      	bne.n	800ff6a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	651a      	str	r2, [r3, #80]	; 0x50
 800ff68:	e002      	b.n	800ff70 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ff76:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff7e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	e077      	b.n	801008a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d107      	bne.n	800ffb0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ffac:	665a      	str	r2, [r3, #100]	; 0x64
 800ffae:	e006      	b.n	800ffbe <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ffb6:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d84f      	bhi.n	8010064 <SAI_InitI2S+0x130>
 800ffc4:	a201      	add	r2, pc, #4	; (adr r2, 800ffcc <SAI_InitI2S+0x98>)
 800ffc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffca:	bf00      	nop
 800ffcc:	0800ffdd 	.word	0x0800ffdd
 800ffd0:	0800ffff 	.word	0x0800ffff
 800ffd4:	08010021 	.word	0x08010021
 800ffd8:	08010043 	.word	0x08010043
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2280      	movs	r2, #128	; 0x80
 800ffe0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	085b      	lsrs	r3, r3, #1
 800ffe6:	015a      	lsls	r2, r3, #5
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	085b      	lsrs	r3, r3, #1
 800fff0:	011a      	lsls	r2, r3, #4
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2240      	movs	r2, #64	; 0x40
 800fffa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fffc:	e035      	b.n	801006a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2280      	movs	r2, #128	; 0x80
 8010002:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	085b      	lsrs	r3, r3, #1
 8010008:	019a      	lsls	r2, r3, #6
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	085b      	lsrs	r3, r3, #1
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2280      	movs	r2, #128	; 0x80
 801001c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801001e:	e024      	b.n	801006a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	22c0      	movs	r2, #192	; 0xc0
 8010024:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	085b      	lsrs	r3, r3, #1
 801002a:	019a      	lsls	r2, r3, #6
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	085b      	lsrs	r3, r3, #1
 8010034:	015a      	lsls	r2, r3, #5
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2280      	movs	r2, #128	; 0x80
 801003e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010040:	e013      	b.n	801006a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	22e0      	movs	r2, #224	; 0xe0
 8010046:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	085b      	lsrs	r3, r3, #1
 801004c:	019a      	lsls	r2, r3, #6
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	085b      	lsrs	r3, r3, #1
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2280      	movs	r2, #128	; 0x80
 8010060:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010062:	e002      	b.n	801006a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	75fb      	strb	r3, [r7, #23]
      break;
 8010068:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d10b      	bne.n	8010088 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b01      	cmp	r3, #1
 8010074:	d102      	bne.n	801007c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2210      	movs	r2, #16
 801007a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b02      	cmp	r3, #2
 8010080:	d102      	bne.n	8010088 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2208      	movs	r2, #8
 8010086:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8010088:	7dfb      	ldrb	r3, [r7, #23]
}
 801008a:	4618      	mov	r0, r3
 801008c:	371c      	adds	r7, #28
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop

08010098 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010098:	b480      	push	{r7}
 801009a:	b087      	sub	sp, #28
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2200      	movs	r2, #0
 80100ae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <SAI_InitPCM+0x2e>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	d103      	bne.n	80100ce <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2201      	movs	r2, #1
 80100ca:	651a      	str	r2, [r3, #80]	; 0x50
 80100cc:	e002      	b.n	80100d4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2200      	movs	r2, #0
 80100d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2200      	movs	r2, #0
 80100d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80100e0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80100e8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100fc:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	2b04      	cmp	r3, #4
 8010102:	d103      	bne.n	801010c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2201      	movs	r2, #1
 8010108:	659a      	str	r2, [r3, #88]	; 0x58
 801010a:	e002      	b.n	8010112 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	220d      	movs	r2, #13
 8010110:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b03      	cmp	r3, #3
 8010116:	d837      	bhi.n	8010188 <SAI_InitPCM+0xf0>
 8010118:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <SAI_InitPCM+0x88>)
 801011a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011e:	bf00      	nop
 8010120:	08010131 	.word	0x08010131
 8010124:	08010147 	.word	0x08010147
 8010128:	0801015d 	.word	0x0801015d
 801012c:	08010173 	.word	0x08010173
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2280      	movs	r2, #128	; 0x80
 8010134:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	011a      	lsls	r2, r3, #4
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2240      	movs	r2, #64	; 0x40
 8010142:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010144:	e023      	b.n	801018e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2280      	movs	r2, #128	; 0x80
 801014a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	015a      	lsls	r2, r3, #5
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2280      	movs	r2, #128	; 0x80
 8010158:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801015a:	e018      	b.n	801018e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	22c0      	movs	r2, #192	; 0xc0
 8010160:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	015a      	lsls	r2, r3, #5
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2280      	movs	r2, #128	; 0x80
 801016e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010170:	e00d      	b.n	801018e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	22e0      	movs	r2, #224	; 0xe0
 8010176:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	015a      	lsls	r2, r3, #5
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2280      	movs	r2, #128	; 0x80
 8010184:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010186:	e002      	b.n	801018e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	75fb      	strb	r3, [r7, #23]
      break;
 801018c:	bf00      	nop
  }

  return status;
 801018e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010190:	4618      	mov	r0, r3
 8010192:	371c      	adds	r7, #28
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80101ac:	78fb      	ldrb	r3, [r7, #3]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d103      	bne.n	80101ba <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f043 0308 	orr.w	r3, r3, #8
 80101b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101be:	2b08      	cmp	r3, #8
 80101c0:	d10b      	bne.n	80101da <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d003      	beq.n	80101d2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d103      	bne.n	80101da <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f043 0310 	orr.w	r3, r3, #16
 80101d8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d003      	beq.n	80101ea <SAI_InterruptFlag+0x4e>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d104      	bne.n	80101f4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80101f0:	60fb      	str	r3, [r7, #12]
 80101f2:	e003      	b.n	80101fc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f043 0304 	orr.w	r3, r3, #4
 80101fa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80101fc:	68fb      	ldr	r3, [r7, #12]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010214:	4b18      	ldr	r3, [pc, #96]	; (8010278 <SAI_Disable+0x6c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	4a18      	ldr	r2, [pc, #96]	; (801027c <SAI_Disable+0x70>)
 801021a:	fba2 2303 	umull	r2, r3, r2, r3
 801021e:	0b1b      	lsrs	r3, r3, #12
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010236:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10a      	bne.n	8010254 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 801024e:	2303      	movs	r3, #3
 8010250:	72fb      	strb	r3, [r7, #11]
      break;
 8010252:	e009      	b.n	8010268 <SAI_Disable+0x5c>
    }
    count--;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	3b01      	subs	r3, #1
 8010258:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1e7      	bne.n	8010238 <SAI_Disable+0x2c>

  return status;
 8010268:	7afb      	ldrb	r3, [r7, #11]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	20000018 	.word	0x20000018
 801027c:	95cbec1b 	.word	0x95cbec1b

08010280 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801028c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	69db      	ldr	r3, [r3, #28]
 8010292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010296:	d01c      	beq.n	80102d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80102ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80102b0:	2100      	movs	r1, #0
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f7ff ff72 	bl	801019c <SAI_InterruptFlag>
 80102b8:	4603      	mov	r3, r0
 80102ba:	43d9      	mvns	r1, r3
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	691a      	ldr	r2, [r3, #16]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	400a      	ands	r2, r1
 80102c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2201      	movs	r2, #1
 80102ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7f2 f9ca 	bl	800266c <HAL_SAI_TxCpltCallback>
#endif
}
 80102d8:	bf00      	nop
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7f2 f9c6 	bl	8002680 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80102f4:	bf00      	nop
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010308:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	69db      	ldr	r3, [r3, #28]
 801030e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010312:	d01c      	beq.n	801034e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010322:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801032c:	2100      	movs	r1, #0
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f7ff ff34 	bl	801019c <SAI_InterruptFlag>
 8010334:	4603      	mov	r3, r0
 8010336:	43d9      	mvns	r1, r3
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	691a      	ldr	r2, [r3, #16]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	400a      	ands	r2, r1
 8010344:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2201      	movs	r2, #1
 801034a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f7f2 f9a0 	bl	8002694 <HAL_SAI_RxCpltCallback>
#endif
}
 8010354:	bf00      	nop
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010368:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7f2 f99d 	bl	80026aa <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8010370:	bf00      	nop
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010384:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7f8 fcb2 	bl	8008cf0 <HAL_DMA_GetError>
 801038c:	4603      	mov	r3, r0
 801038e:	2b02      	cmp	r3, #2
 8010390:	d01d      	beq.n	80103ce <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80103b0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80103b2:	68f8      	ldr	r0, [r7, #12]
 80103b4:	f7ff ff2a 	bl	801020c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7f2 f945 	bl	8002658 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80103ce:	bf00      	nop
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b08a      	sub	sp, #40	; 0x28
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d101      	bne.n	80103e8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80103e4:	2301      	movs	r3, #1
 80103e6:	e075      	b.n	80104d4 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d105      	bne.n	8010400 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7f3 fb60 	bl	8003ac0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2204      	movs	r2, #4
 8010404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f000 f867 	bl	80104dc <HAL_SD_InitCard>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	e05d      	b.n	80104d4 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8010418:	f107 0308 	add.w	r3, r7, #8
 801041c:	4619      	mov	r1, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fdb4 	bl	8010f8c <HAL_SD_GetCardStatus>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801042a:	2301      	movs	r3, #1
 801042c:	e052      	b.n	80104d4 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801042e:	7e3b      	ldrb	r3, [r7, #24]
 8010430:	b2db      	uxtb	r3, r3
 8010432:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8010434:	7e7b      	ldrb	r3, [r7, #25]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801043e:	2b01      	cmp	r3, #1
 8010440:	d10a      	bne.n	8010458 <HAL_SD_Init+0x82>
 8010442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010444:	2b00      	cmp	r3, #0
 8010446:	d102      	bne.n	801044e <HAL_SD_Init+0x78>
 8010448:	6a3b      	ldr	r3, [r7, #32]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d004      	beq.n	8010458 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010454:	659a      	str	r2, [r3, #88]	; 0x58
 8010456:	e00b      	b.n	8010470 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801045c:	2b01      	cmp	r3, #1
 801045e:	d104      	bne.n	801046a <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010466:	659a      	str	r2, [r3, #88]	; 0x58
 8010468:	e002      	b.n	8010470 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fe72 	bl	8011160 <HAL_SD_ConfigWideBusOperation>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d001      	beq.n	8010486 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8010482:	2301      	movs	r3, #1
 8010484:	e026      	b.n	80104d4 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8010486:	f7f4 fff1 	bl	800546c <HAL_GetTick>
 801048a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801048c:	e011      	b.n	80104b2 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801048e:	f7f4 ffed 	bl	800546c <HAL_GetTick>
 8010492:	4602      	mov	r2, r0
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801049c:	d109      	bne.n	80104b2 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80104a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80104ae:	2303      	movs	r3, #3
 80104b0:	e010      	b.n	80104d4 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 ff66 	bl	8011384 <HAL_SD_GetCardState>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b04      	cmp	r3, #4
 80104bc:	d1e7      	bne.n	801048e <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3728      	adds	r7, #40	; 0x28
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80104dc:	b590      	push	{r4, r7, lr}
 80104de:	b08d      	sub	sp, #52	; 0x34
 80104e0:	af02      	add	r7, sp, #8
 80104e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80104e4:	2300      	movs	r3, #0
 80104e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80104e8:	2300      	movs	r3, #0
 80104ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80104ec:	2300      	movs	r3, #0
 80104ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80104f0:	2300      	movs	r3, #0
 80104f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80104f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80104f8:	f04f 0100 	mov.w	r1, #0
 80104fc:	f7fd fd48 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 8010500:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8010502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	d109      	bne.n	801051c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2201      	movs	r2, #1
 801050c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010516:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010518:	2301      	movs	r3, #1
 801051a:	e070      	b.n	80105fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	0a1b      	lsrs	r3, r3, #8
 8010520:	4a39      	ldr	r2, [pc, #228]	; (8010608 <HAL_SD_InitCard+0x12c>)
 8010522:	fba2 2303 	umull	r2, r3, r2, r3
 8010526:	091b      	lsrs	r3, r3, #4
 8010528:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681c      	ldr	r4, [r3, #0]
 801052e:	466a      	mov	r2, sp
 8010530:	f107 0318 	add.w	r3, r7, #24
 8010534:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010538:	e882 0003 	stmia.w	r2, {r0, r1}
 801053c:	f107 030c 	add.w	r3, r7, #12
 8010540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010542:	4620      	mov	r0, r4
 8010544:	f003 fe7e 	bl	8014244 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f003 fec1 	bl	80142d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d005      	beq.n	8010564 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010562:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	2b00      	cmp	r3, #0
 8010568:	d007      	beq.n	801057a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801056a:	4a28      	ldr	r2, [pc, #160]	; (801060c <HAL_SD_InitCard+0x130>)
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010572:	3301      	adds	r3, #1
 8010574:	4618      	mov	r0, r3
 8010576:	f7f4 ff85 	bl	8005484 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 fff0 	bl	8011560 <SD_PowerON>
 8010580:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010582:	6a3b      	ldr	r3, [r7, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00b      	beq.n	80105a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	431a      	orrs	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801059c:	2301      	movs	r3, #1
 801059e:	e02e      	b.n	80105fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 ff0f 	bl	80113c4 <SD_InitCard>
 80105a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80105a8:	6a3b      	ldr	r3, [r7, #32]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00b      	beq.n	80105c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2201      	movs	r2, #1
 80105b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	431a      	orrs	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80105c2:	2301      	movs	r3, #1
 80105c4:	e01b      	b.n	80105fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105ce:	4618      	mov	r0, r3
 80105d0:	f003 ff16 	bl	8014400 <SDMMC_CmdBlockLength>
 80105d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80105d6:	6a3b      	ldr	r3, [r7, #32]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00f      	beq.n	80105fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a0b      	ldr	r2, [pc, #44]	; (8010610 <HAL_SD_InitCard+0x134>)
 80105e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105e8:	6a3b      	ldr	r3, [r7, #32]
 80105ea:	431a      	orrs	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e000      	b.n	80105fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	372c      	adds	r7, #44	; 0x2c
 8010602:	46bd      	mov	sp, r7
 8010604:	bd90      	pop	{r4, r7, pc}
 8010606:	bf00      	nop
 8010608:	014f8b59 	.word	0x014f8b59
 801060c:	00012110 	.word	0x00012110
 8010610:	1fe00fff 	.word	0x1fe00fff

08010614 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b092      	sub	sp, #72	; 0x48
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
 8010620:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010622:	f7f4 ff23 	bl	800546c <HAL_GetTick>
 8010626:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d107      	bne.n	8010646 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010642:	2301      	movs	r3, #1
 8010644:	e167      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b01      	cmp	r3, #1
 8010650:	f040 815a 	bne.w	8010908 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2200      	movs	r2, #0
 8010658:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801065a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	441a      	add	r2, r3
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010664:	429a      	cmp	r2, r3
 8010666:	d907      	bls.n	8010678 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801066c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	e14e      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2203      	movs	r2, #3
 801067c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2200      	movs	r2, #0
 8010686:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801068c:	2b01      	cmp	r3, #1
 801068e:	d002      	beq.n	8010696 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010692:	025b      	lsls	r3, r3, #9
 8010694:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801069a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	025b      	lsls	r3, r3, #9
 80106a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80106a2:	2390      	movs	r3, #144	; 0x90
 80106a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80106a6:	2302      	movs	r3, #2
 80106a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80106ae:	2300      	movs	r3, #0
 80106b0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f107 0214 	add.w	r2, r7, #20
 80106ba:	4611      	mov	r1, r2
 80106bc:	4618      	mov	r0, r3
 80106be:	f003 fe73 	bl	80143a8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	68da      	ldr	r2, [r3, #12]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106d0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d90a      	bls.n	80106ee <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2202      	movs	r2, #2
 80106dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106e4:	4618      	mov	r0, r3
 80106e6:	f003 fed1 	bl	801448c <SDMMC_CmdReadMultiBlock>
 80106ea:	6478      	str	r0, [r7, #68]	; 0x44
 80106ec:	e009      	b.n	8010702 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2201      	movs	r2, #1
 80106f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106fa:	4618      	mov	r0, r3
 80106fc:	f003 fea3 	bl	8014446 <SDMMC_CmdReadSingleBlock>
 8010700:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010704:	2b00      	cmp	r3, #0
 8010706:	d012      	beq.n	801072e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a84      	ldr	r2, [pc, #528]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 801070e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010716:	431a      	orrs	r2, r3
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2200      	movs	r2, #0
 8010728:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	e0f3      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010732:	e058      	b.n	80107e6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801073a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d033      	beq.n	80107aa <HAL_SD_ReadBlocks+0x196>
 8010742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010744:	2b1f      	cmp	r3, #31
 8010746:	d930      	bls.n	80107aa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8010748:	2300      	movs	r3, #0
 801074a:	643b      	str	r3, [r7, #64]	; 0x40
 801074c:	e027      	b.n	801079e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	f003 fda0 	bl	8014298 <SDMMC_ReadFIFO>
 8010758:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	b2da      	uxtb	r2, r3
 801075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010760:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	3301      	adds	r3, #1
 8010766:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	0a1b      	lsrs	r3, r3, #8
 801076c:	b2da      	uxtb	r2, r3
 801076e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010770:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010774:	3301      	adds	r3, #1
 8010776:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	0c1b      	lsrs	r3, r3, #16
 801077c:	b2da      	uxtb	r2, r3
 801077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010780:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010784:	3301      	adds	r3, #1
 8010786:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	0e1b      	lsrs	r3, r3, #24
 801078c:	b2da      	uxtb	r2, r3
 801078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010790:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010794:	3301      	adds	r3, #1
 8010796:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8010798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079a:	3301      	adds	r3, #1
 801079c:	643b      	str	r3, [r7, #64]	; 0x40
 801079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a0:	2b07      	cmp	r3, #7
 80107a2:	d9d4      	bls.n	801074e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80107a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a6:	3b20      	subs	r3, #32
 80107a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80107aa:	f7f4 fe5f 	bl	800546c <HAL_GetTick>
 80107ae:	4602      	mov	r2, r0
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d902      	bls.n	80107c0 <HAL_SD_ReadBlocks+0x1ac>
 80107ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d112      	bne.n	80107e6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a56      	ldr	r2, [pc, #344]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 80107c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2201      	movs	r2, #1
 80107d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80107e2:	2303      	movs	r3, #3
 80107e4:	e097      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ec:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d09f      	beq.n	8010734 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68da      	ldr	r2, [r3, #12]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010802:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801080e:	2b00      	cmp	r3, #0
 8010810:	d022      	beq.n	8010858 <HAL_SD_ReadBlocks+0x244>
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d91f      	bls.n	8010858 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801081c:	2b03      	cmp	r3, #3
 801081e:	d01b      	beq.n	8010858 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4618      	mov	r0, r3
 8010826:	f003 fe9b 	bl	8014560 <SDMMC_CmdStopTransfer>
 801082a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801082c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801082e:	2b00      	cmp	r3, #0
 8010830:	d012      	beq.n	8010858 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a3a      	ldr	r2, [pc, #232]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 8010838:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801083e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010840:	431a      	orrs	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2201      	movs	r2, #1
 801084a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2200      	movs	r2, #0
 8010852:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010854:	2301      	movs	r3, #1
 8010856:	e05e      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085e:	f003 0308 	and.w	r3, r3, #8
 8010862:	2b00      	cmp	r3, #0
 8010864:	d012      	beq.n	801088c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a2d      	ldr	r2, [pc, #180]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 801086c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010872:	f043 0208 	orr.w	r2, r3, #8
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2200      	movs	r2, #0
 8010886:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010888:	2301      	movs	r3, #1
 801088a:	e044      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010892:	f003 0302 	and.w	r3, r3, #2
 8010896:	2b00      	cmp	r3, #0
 8010898:	d012      	beq.n	80108c0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a20      	ldr	r2, [pc, #128]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 80108a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a6:	f043 0202 	orr.w	r2, r3, #2
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2201      	movs	r2, #1
 80108b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2200      	movs	r2, #0
 80108ba:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80108bc:	2301      	movs	r3, #1
 80108be:	e02a      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c6:	f003 0320 	and.w	r3, r3, #32
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d012      	beq.n	80108f4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a13      	ldr	r2, [pc, #76]	; (8010920 <HAL_SD_ReadBlocks+0x30c>)
 80108d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108da:	f043 0220 	orr.w	r2, r3, #32
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e010      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a0a      	ldr	r2, [pc, #40]	; (8010924 <HAL_SD_ReadBlocks+0x310>)
 80108fa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	e006      	b.n	8010916 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010914:	2301      	movs	r3, #1
  }
}
 8010916:	4618      	mov	r0, r3
 8010918:	3748      	adds	r7, #72	; 0x48
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	1fe00fff 	.word	0x1fe00fff
 8010924:	18000f3a 	.word	0x18000f3a

08010928 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b092      	sub	sp, #72	; 0x48
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010936:	f7f4 fd99 	bl	800546c <HAL_GetTick>
 801093a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d107      	bne.n	801095a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801094e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	e16b      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010960:	b2db      	uxtb	r3, r3
 8010962:	2b01      	cmp	r3, #1
 8010964:	f040 815e 	bne.w	8010c24 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2200      	movs	r2, #0
 801096c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801096e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	441a      	add	r2, r3
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010978:	429a      	cmp	r2, r3
 801097a:	d907      	bls.n	801098c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010980:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010988:	2301      	movs	r3, #1
 801098a:	e152      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2203      	movs	r2, #3
 8010990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2200      	movs	r2, #0
 801099a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d002      	beq.n	80109aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	025b      	lsls	r3, r3, #9
 80109a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80109aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	025b      	lsls	r3, r3, #9
 80109b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80109b6:	2390      	movs	r3, #144	; 0x90
 80109b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80109ba:	2300      	movs	r3, #0
 80109bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80109be:	2300      	movs	r3, #0
 80109c0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80109c2:	2300      	movs	r3, #0
 80109c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f107 0218 	add.w	r2, r7, #24
 80109ce:	4611      	mov	r1, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	f003 fce9 	bl	80143a8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109e4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d90a      	bls.n	8010a02 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2220      	movs	r2, #32
 80109f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109f8:	4618      	mov	r0, r3
 80109fa:	f003 fd8d 	bl	8014518 <SDMMC_CmdWriteMultiBlock>
 80109fe:	6478      	str	r0, [r7, #68]	; 0x44
 8010a00:	e009      	b.n	8010a16 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2210      	movs	r2, #16
 8010a06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f003 fd5f 	bl	80144d2 <SDMMC_CmdWriteSingleBlock>
 8010a14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d012      	beq.n	8010a42 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a86      	ldr	r2, [pc, #536]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a2a:	431a      	orrs	r2, r3
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2201      	movs	r2, #1
 8010a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e0f7      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8010a46:	e05c      	b.n	8010b02 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d037      	beq.n	8010ac6 <HAL_SD_WriteBlocks+0x19e>
 8010a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a58:	2b1f      	cmp	r3, #31
 8010a5a:	d934      	bls.n	8010ac6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8010a60:	e02b      	b.n	8010aba <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8010a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8010a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	021a      	lsls	r2, r3, #8
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	041a      	lsls	r2, r3, #16
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a8e:	3301      	adds	r3, #1
 8010a90:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	061a      	lsls	r2, r3, #24
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f107 0214 	add.w	r2, r7, #20
 8010aac:	4611      	mov	r1, r2
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f003 fbff 	bl	80142b2 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8010ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8010aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010abc:	2b07      	cmp	r3, #7
 8010abe:	d9d0      	bls.n	8010a62 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac2:	3b20      	subs	r3, #32
 8010ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8010ac6:	f7f4 fcd1 	bl	800546c <HAL_GetTick>
 8010aca:	4602      	mov	r2, r0
 8010acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d902      	bls.n	8010adc <HAL_SD_WriteBlocks+0x1b4>
 8010ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d112      	bne.n	8010b02 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a56      	ldr	r2, [pc, #344]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aea:	431a      	orrs	r2, r3
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2200      	movs	r2, #0
 8010afc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010afe:	2303      	movs	r3, #3
 8010b00:	e097      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b08:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d09b      	beq.n	8010a48 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68da      	ldr	r2, [r3, #12]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b1e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d022      	beq.n	8010b74 <HAL_SD_WriteBlocks+0x24c>
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d91f      	bls.n	8010b74 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	d01b      	beq.n	8010b74 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4618      	mov	r0, r3
 8010b42:	f003 fd0d 	bl	8014560 <SDMMC_CmdStopTransfer>
 8010b46:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d012      	beq.n	8010b74 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a3a      	ldr	r2, [pc, #232]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010b54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b5c:	431a      	orrs	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2201      	movs	r2, #1
 8010b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e05e      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7a:	f003 0308 	and.w	r3, r3, #8
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d012      	beq.n	8010ba8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4a2d      	ldr	r2, [pc, #180]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b8e:	f043 0208 	orr.w	r2, r3, #8
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e044      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bae:	f003 0302 	and.w	r3, r3, #2
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d012      	beq.n	8010bdc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a20      	ldr	r2, [pc, #128]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc2:	f043 0202 	orr.w	r2, r3, #2
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e02a      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be2:	f003 0310 	and.w	r3, r3, #16
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d012      	beq.n	8010c10 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4a13      	ldr	r2, [pc, #76]	; (8010c3c <HAL_SD_WriteBlocks+0x314>)
 8010bf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf6:	f043 0210 	orr.w	r2, r3, #16
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2201      	movs	r2, #1
 8010c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e010      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <HAL_SD_WriteBlocks+0x318>)
 8010c16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010c20:	2300      	movs	r3, #0
 8010c22:	e006      	b.n	8010c32 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010c30:	2301      	movs	r3, #1
  }
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3748      	adds	r7, #72	; 0x48
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	1fe00fff 	.word	0x1fe00fff
 8010c40:	18000f3a 	.word	0x18000f3a

08010c44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c52:	0f9b      	lsrs	r3, r3, #30
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c5e:	0e9b      	lsrs	r3, r3, #26
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	f003 030f 	and.w	r3, r3, #15
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c70:	0e1b      	lsrs	r3, r3, #24
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	f003 0303 	and.w	r3, r3, #3
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c82:	0c1b      	lsrs	r3, r3, #16
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c8e:	0a1b      	lsrs	r3, r3, #8
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ca4:	0d1b      	lsrs	r3, r3, #20
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cb0:	0c1b      	lsrs	r3, r3, #16
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f003 030f 	and.w	r3, r3, #15
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cc2:	0bdb      	lsrs	r3, r3, #15
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cd4:	0b9b      	lsrs	r3, r3, #14
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	f003 0301 	and.w	r3, r3, #1
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ce6:	0b5b      	lsrs	r3, r3, #13
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	f003 0301 	and.w	r3, r3, #1
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cf8:	0b1b      	lsrs	r3, r3, #12
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	f003 0301 	and.w	r3, r3, #1
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d163      	bne.n	8010ddc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d18:	009a      	lsls	r2, r3, #2
 8010d1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010d1e:	4013      	ands	r3, r2
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010d24:	0f92      	lsrs	r2, r2, #30
 8010d26:	431a      	orrs	r2, r3
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d30:	0edb      	lsrs	r3, r3, #27
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0307 	and.w	r3, r3, #7
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d42:	0e1b      	lsrs	r3, r3, #24
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d54:	0d5b      	lsrs	r3, r3, #21
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	f003 0307 	and.w	r3, r3, #7
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d66:	0c9b      	lsrs	r3, r3, #18
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	f003 0307 	and.w	r3, r3, #7
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d78:	0bdb      	lsrs	r3, r3, #15
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0307 	and.w	r3, r3, #7
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	1c5a      	adds	r2, r3, #1
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	7e1b      	ldrb	r3, [r3, #24]
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	f003 0307 	and.w	r3, r3, #7
 8010d9a:	3302      	adds	r3, #2
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010da6:	fb03 f202 	mul.w	r2, r3, r2
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	7a1b      	ldrb	r3, [r3, #8]
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	f003 030f 	and.w	r3, r3, #15
 8010db8:	2201      	movs	r2, #1
 8010dba:	409a      	lsls	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010dc8:	0a52      	lsrs	r2, r2, #9
 8010dca:	fb03 f202 	mul.w	r2, r3, r2
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dd8:	655a      	str	r2, [r3, #84]	; 0x54
 8010dda:	e031      	b.n	8010e40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d11d      	bne.n	8010e20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010de8:	041b      	lsls	r3, r3, #16
 8010dea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010df2:	0c1b      	lsrs	r3, r3, #16
 8010df4:	431a      	orrs	r2, r3
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	029a      	lsls	r2, r3, #10
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e14:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	655a      	str	r2, [r3, #84]	; 0x54
 8010e1e:	e00f      	b.n	8010e40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a58      	ldr	r2, [pc, #352]	; (8010f88 <HAL_SD_GetCardCSD+0x344>)
 8010e26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e09d      	b.n	8010f7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e44:	0b9b      	lsrs	r3, r3, #14
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e56:	09db      	lsrs	r3, r3, #7
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e6e:	b2da      	uxtb	r2, r3
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e78:	0fdb      	lsrs	r3, r3, #31
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e84:	0f5b      	lsrs	r3, r3, #29
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f003 0303 	and.w	r3, r3, #3
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e96:	0e9b      	lsrs	r3, r3, #26
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	f003 0307 	and.w	r3, r3, #7
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ea8:	0d9b      	lsrs	r3, r3, #22
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	f003 030f 	and.w	r3, r3, #15
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eba:	0d5b      	lsrs	r3, r3, #21
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	f003 0301 	and.w	r3, r3, #1
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ed6:	0c1b      	lsrs	r3, r3, #16
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 0301 	and.w	r3, r3, #1
 8010ede:	b2da      	uxtb	r2, r3
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eea:	0bdb      	lsrs	r3, r3, #15
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	f003 0301 	and.w	r3, r3, #1
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010efe:	0b9b      	lsrs	r3, r3, #14
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	b2da      	uxtb	r2, r3
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f12:	0b5b      	lsrs	r3, r3, #13
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	b2da      	uxtb	r2, r3
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f26:	0b1b      	lsrs	r3, r3, #12
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	f003 0301 	and.w	r3, r3, #1
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f3a:	0a9b      	lsrs	r3, r3, #10
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	f003 0303 	and.w	r3, r3, #3
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f4e:	0a1b      	lsrs	r3, r3, #8
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f62:	085b      	lsrs	r3, r3, #1
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f6a:	b2da      	uxtb	r2, r3
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2201      	movs	r2, #1
 8010f76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	1fe00fff 	.word	0x1fe00fff

08010f8c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b094      	sub	sp, #80	; 0x50
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d101      	bne.n	8010fac <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	e0a7      	b.n	80110fc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010fac:	f107 0308 	add.w	r3, r7, #8
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fb62 	bl	801167c <SD_SendSDStatus>
 8010fb8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d011      	beq.n	8010fe4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4a4f      	ldr	r2, [pc, #316]	; (8011104 <HAL_SD_GetCardStatus+0x178>)
 8010fc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fce:	431a      	orrs	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010fe2:	e070      	b.n	80110c6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	099b      	lsrs	r3, r3, #6
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	f003 0303 	and.w	r3, r3, #3
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	095b      	lsrs	r3, r3, #5
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	0a1b      	lsrs	r3, r3, #8
 8011008:	b29b      	uxth	r3, r3
 801100a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801100e:	b29a      	uxth	r2, r3
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	0e1b      	lsrs	r3, r3, #24
 8011014:	b29b      	uxth	r3, r3
 8011016:	4313      	orrs	r3, r2
 8011018:	b29a      	uxth	r2, r3
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	061a      	lsls	r2, r3, #24
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	021b      	lsls	r3, r3, #8
 8011026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801102a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	0a1b      	lsrs	r3, r3, #8
 8011030:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8011034:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	0e1b      	lsrs	r3, r3, #24
 801103a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	b2da      	uxtb	r2, r3
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	0a1b      	lsrs	r3, r3, #8
 801104c:	b2da      	uxtb	r2, r3
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	0d1b      	lsrs	r3, r3, #20
 8011056:	b2db      	uxtb	r3, r3
 8011058:	f003 030f 	and.w	r3, r3, #15
 801105c:	b2da      	uxtb	r2, r3
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	0c1b      	lsrs	r3, r3, #16
 8011066:	b29b      	uxth	r3, r3
 8011068:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801106c:	b29a      	uxth	r2, r3
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	b29b      	uxth	r3, r3
 8011072:	b2db      	uxtb	r3, r3
 8011074:	b29b      	uxth	r3, r3
 8011076:	4313      	orrs	r3, r2
 8011078:	b29a      	uxth	r2, r3
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	0a9b      	lsrs	r3, r3, #10
 8011082:	b2db      	uxtb	r3, r3
 8011084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011088:	b2da      	uxtb	r2, r3
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	0a1b      	lsrs	r3, r3, #8
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	b2da      	uxtb	r2, r3
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	091b      	lsrs	r3, r3, #4
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f003 030f 	and.w	r3, r3, #15
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	f003 030f 	and.w	r3, r3, #15
 80110b6:	b2da      	uxtb	r2, r3
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	0e1b      	lsrs	r3, r3, #24
 80110c0:	b2da      	uxtb	r2, r3
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80110ce:	4618      	mov	r0, r3
 80110d0:	f003 f996 	bl	8014400 <SDMMC_CmdBlockLength>
 80110d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80110d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00d      	beq.n	80110f8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4a08      	ldr	r2, [pc, #32]	; (8011104 <HAL_SD_GetCardStatus+0x178>)
 80110e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110e8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2201      	movs	r2, #1
 80110ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80110f2:	2301      	movs	r3, #1
 80110f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80110f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3750      	adds	r7, #80	; 0x50
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	1fe00fff 	.word	0x1fe00fff

08011108 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011108:	b480      	push	{r7}
 801110a:	b083      	sub	sp, #12
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	370c      	adds	r7, #12
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8011160:	b590      	push	{r4, r7, lr}
 8011162:	b08d      	sub	sp, #52	; 0x34
 8011164:	af02      	add	r7, sp, #8
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801116a:	2300      	movs	r3, #0
 801116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2203      	movs	r2, #3
 8011174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801117c:	2b03      	cmp	r3, #3
 801117e:	d02e      	beq.n	80111de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011186:	d106      	bne.n	8011196 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	635a      	str	r2, [r3, #52]	; 0x34
 8011194:	e029      	b.n	80111ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801119c:	d10a      	bne.n	80111b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fb64 	bl	801186c <SD_WideBus_Enable>
 80111a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111aa:	6a3b      	ldr	r3, [r7, #32]
 80111ac:	431a      	orrs	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	635a      	str	r2, [r3, #52]	; 0x34
 80111b2:	e01a      	b.n	80111ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10a      	bne.n	80111d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 fba1 	bl	8011902 <SD_WideBus_Disable>
 80111c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111c6:	6a3b      	ldr	r3, [r7, #32]
 80111c8:	431a      	orrs	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	635a      	str	r2, [r3, #52]	; 0x34
 80111ce:	e00c      	b.n	80111ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	635a      	str	r2, [r3, #52]	; 0x34
 80111dc:	e005      	b.n	80111ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d007      	beq.n	8011202 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4a5f      	ldr	r2, [pc, #380]	; (8011374 <HAL_SD_ConfigWideBusOperation+0x214>)
 80111f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80111fa:	2301      	movs	r3, #1
 80111fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011200:	e096      	b.n	8011330 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011202:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011206:	f04f 0100 	mov.w	r1, #0
 801120a:	f7fc fec1 	bl	800df90 <HAL_RCCEx_GetPeriphCLKFreq>
 801120e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 8083 	beq.w	801131e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	695a      	ldr	r2, [r3, #20]
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	4950      	ldr	r1, [pc, #320]	; (8011378 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011236:	fba1 1303 	umull	r1, r3, r1, r3
 801123a:	0e1b      	lsrs	r3, r3, #24
 801123c:	429a      	cmp	r2, r3
 801123e:	d303      	bcc.n	8011248 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	61bb      	str	r3, [r7, #24]
 8011246:	e05a      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801124c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011250:	d103      	bne.n	801125a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	61bb      	str	r3, [r7, #24]
 8011258:	e051      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801125e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011262:	d126      	bne.n	80112b2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10e      	bne.n	801128a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	4a43      	ldr	r2, [pc, #268]	; (801137c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d906      	bls.n	8011282 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	4a40      	ldr	r2, [pc, #256]	; (8011378 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011278:	fba2 2303 	umull	r2, r3, r2, r3
 801127c:	0e5b      	lsrs	r3, r3, #25
 801127e:	61bb      	str	r3, [r7, #24]
 8011280:	e03d      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	695b      	ldr	r3, [r3, #20]
 8011286:	61bb      	str	r3, [r7, #24]
 8011288:	e039      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	695b      	ldr	r3, [r3, #20]
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	69fa      	ldr	r2, [r7, #28]
 8011292:	fbb2 f3f3 	udiv	r3, r2, r3
 8011296:	4a39      	ldr	r2, [pc, #228]	; (801137c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d906      	bls.n	80112aa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	4a36      	ldr	r2, [pc, #216]	; (8011378 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112a0:	fba2 2303 	umull	r2, r3, r2, r3
 80112a4:	0e5b      	lsrs	r3, r3, #25
 80112a6:	61bb      	str	r3, [r7, #24]
 80112a8:	e029      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	695b      	ldr	r3, [r3, #20]
 80112ae:	61bb      	str	r3, [r7, #24]
 80112b0:	e025      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	695b      	ldr	r3, [r3, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10e      	bne.n	80112d8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	4a30      	ldr	r2, [pc, #192]	; (8011380 <HAL_SD_ConfigWideBusOperation+0x220>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d906      	bls.n	80112d0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	4a2c      	ldr	r2, [pc, #176]	; (8011378 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112c6:	fba2 2303 	umull	r2, r3, r2, r3
 80112ca:	0e1b      	lsrs	r3, r3, #24
 80112cc:	61bb      	str	r3, [r7, #24]
 80112ce:	e016      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	695b      	ldr	r3, [r3, #20]
 80112d4:	61bb      	str	r3, [r7, #24]
 80112d6:	e012      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	695b      	ldr	r3, [r3, #20]
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	69fa      	ldr	r2, [r7, #28]
 80112e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80112e4:	4a26      	ldr	r2, [pc, #152]	; (8011380 <HAL_SD_ConfigWideBusOperation+0x220>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d906      	bls.n	80112f8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	4a22      	ldr	r2, [pc, #136]	; (8011378 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112ee:	fba2 2303 	umull	r2, r3, r2, r3
 80112f2:	0e1b      	lsrs	r3, r3, #24
 80112f4:	61bb      	str	r3, [r7, #24]
 80112f6:	e002      	b.n	80112fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	695b      	ldr	r3, [r3, #20]
 80112fc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681c      	ldr	r4, [r3, #0]
 8011302:	466a      	mov	r2, sp
 8011304:	f107 0314 	add.w	r3, r7, #20
 8011308:	e893 0003 	ldmia.w	r3, {r0, r1}
 801130c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011310:	f107 0308 	add.w	r3, r7, #8
 8011314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011316:	4620      	mov	r0, r4
 8011318:	f002 ff94 	bl	8014244 <SDMMC_Init>
 801131c:	e008      	b.n	8011330 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 801132a:	2301      	movs	r3, #1
 801132c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011338:	4618      	mov	r0, r3
 801133a:	f003 f861 	bl	8014400 <SDMMC_CmdBlockLength>
 801133e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00c      	beq.n	8011360 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a0a      	ldr	r2, [pc, #40]	; (8011374 <HAL_SD_ConfigWideBusOperation+0x214>)
 801134c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	431a      	orrs	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2201      	movs	r2, #1
 8011364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8011368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801136c:	4618      	mov	r0, r3
 801136e:	372c      	adds	r7, #44	; 0x2c
 8011370:	46bd      	mov	sp, r7
 8011372:	bd90      	pop	{r4, r7, pc}
 8011374:	1fe00fff 	.word	0x1fe00fff
 8011378:	55e63b89 	.word	0x55e63b89
 801137c:	02faf080 	.word	0x02faf080
 8011380:	017d7840 	.word	0x017d7840

08011384 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801138c:	2300      	movs	r3, #0
 801138e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011390:	f107 030c 	add.w	r3, r7, #12
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 fa40 	bl	801181c <SD_SendStatus>
 801139c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d005      	beq.n	80113b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	431a      	orrs	r2, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	0a5b      	lsrs	r3, r3, #9
 80113b4:	f003 030f 	and.w	r3, r3, #15
 80113b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80113ba:	693b      	ldr	r3, [r7, #16]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3718      	adds	r7, #24
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b090      	sub	sp, #64	; 0x40
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80113cc:	2300      	movs	r3, #0
 80113ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80113d0:	f7f4 f84c 	bl	800546c <HAL_GetTick>
 80113d4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4618      	mov	r0, r3
 80113dc:	f002 ff8b 	bl	80142f6 <SDMMC_GetPowerState>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d102      	bne.n	80113ec <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80113e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80113ea:	e0b5      	b.n	8011558 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d02e      	beq.n	8011452 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f003 f9d6 	bl	80147aa <SDMMC_CmdSendCID>
 80113fe:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8011400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011402:	2b00      	cmp	r3, #0
 8011404:	d001      	beq.n	801140a <SD_InitCard+0x46>
    {
      return errorstate;
 8011406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011408:	e0a6      	b.n	8011558 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2100      	movs	r1, #0
 8011410:	4618      	mov	r0, r3
 8011412:	f002 ffb6 	bl	8014382 <SDMMC_GetResponse>
 8011416:	4602      	mov	r2, r0
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2104      	movs	r1, #4
 8011422:	4618      	mov	r0, r3
 8011424:	f002 ffad 	bl	8014382 <SDMMC_GetResponse>
 8011428:	4602      	mov	r2, r0
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2108      	movs	r1, #8
 8011434:	4618      	mov	r0, r3
 8011436:	f002 ffa4 	bl	8014382 <SDMMC_GetResponse>
 801143a:	4602      	mov	r2, r0
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	210c      	movs	r1, #12
 8011446:	4618      	mov	r0, r3
 8011448:	f002 ff9b 	bl	8014382 <SDMMC_GetResponse>
 801144c:	4602      	mov	r2, r0
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011456:	2b03      	cmp	r3, #3
 8011458:	d01d      	beq.n	8011496 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801145a:	e019      	b.n	8011490 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f107 020a 	add.w	r2, r7, #10
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f003 f9de 	bl	8014828 <SDMMC_CmdSetRelAdd>
 801146c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <SD_InitCard+0xb4>
      {
        return errorstate;
 8011474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011476:	e06f      	b.n	8011558 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8011478:	f7f3 fff8 	bl	800546c <HAL_GetTick>
 801147c:	4602      	mov	r2, r0
 801147e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	f241 3287 	movw	r2, #4999	; 0x1387
 8011486:	4293      	cmp	r3, r2
 8011488:	d902      	bls.n	8011490 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801148a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801148e:	e063      	b.n	8011558 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8011490:	897b      	ldrh	r3, [r7, #10]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d0e2      	beq.n	801145c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149a:	2b03      	cmp	r3, #3
 801149c:	d036      	beq.n	801150c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801149e:	897b      	ldrh	r3, [r7, #10]
 80114a0:	461a      	mov	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ae:	041b      	lsls	r3, r3, #16
 80114b0:	4619      	mov	r1, r3
 80114b2:	4610      	mov	r0, r2
 80114b4:	f003 f998 	bl	80147e8 <SDMMC_CmdSendCSD>
 80114b8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <SD_InitCard+0x100>
    {
      return errorstate;
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	e049      	b.n	8011558 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2100      	movs	r1, #0
 80114ca:	4618      	mov	r0, r3
 80114cc:	f002 ff59 	bl	8014382 <SDMMC_GetResponse>
 80114d0:	4602      	mov	r2, r0
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2104      	movs	r1, #4
 80114dc:	4618      	mov	r0, r3
 80114de:	f002 ff50 	bl	8014382 <SDMMC_GetResponse>
 80114e2:	4602      	mov	r2, r0
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2108      	movs	r1, #8
 80114ee:	4618      	mov	r0, r3
 80114f0:	f002 ff47 	bl	8014382 <SDMMC_GetResponse>
 80114f4:	4602      	mov	r2, r0
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	210c      	movs	r1, #12
 8011500:	4618      	mov	r0, r3
 8011502:	f002 ff3e 	bl	8014382 <SDMMC_GetResponse>
 8011506:	4602      	mov	r2, r0
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2104      	movs	r1, #4
 8011512:	4618      	mov	r0, r3
 8011514:	f002 ff35 	bl	8014382 <SDMMC_GetResponse>
 8011518:	4603      	mov	r3, r0
 801151a:	0d1a      	lsrs	r2, r3, #20
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011520:	f107 030c 	add.w	r3, r7, #12
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff fb8c 	bl	8010c44 <HAL_SD_GetCardCSD>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011536:	e00f      	b.n	8011558 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011540:	041b      	lsls	r3, r3, #16
 8011542:	4619      	mov	r1, r3
 8011544:	4610      	mov	r0, r2
 8011546:	f003 f847 	bl	80145d8 <SDMMC_CmdSelDesel>
 801154a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <SD_InitCard+0x192>
  {
    return errorstate;
 8011552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011554:	e000      	b.n	8011558 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3740      	adds	r7, #64	; 0x40
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b086      	sub	sp, #24
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011568:	2300      	movs	r3, #0
 801156a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011570:	2300      	movs	r3, #0
 8011572:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	f003 f850 	bl	801461e <SDMMC_CmdGoIdleState>
 801157e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <SD_PowerON+0x2a>
  {
    return errorstate;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	e072      	b.n	8011670 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4618      	mov	r0, r3
 8011590:	f003 f863 	bl	801465a <SDMMC_CmdOperCond>
 8011594:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801159c:	d10d      	bne.n	80115ba <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f003 f838 	bl	801461e <SDMMC_CmdGoIdleState>
 80115ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d004      	beq.n	80115c0 <SD_PowerON+0x60>
    {
      return errorstate;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	e05a      	b.n	8011670 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2201      	movs	r2, #1
 80115be:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d137      	bne.n	8011638 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2100      	movs	r1, #0
 80115ce:	4618      	mov	r0, r3
 80115d0:	f003 f863 	bl	801469a <SDMMC_CmdAppCommand>
 80115d4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d02d      	beq.n	8011638 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80115dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80115e0:	e046      	b.n	8011670 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2100      	movs	r1, #0
 80115e8:	4618      	mov	r0, r3
 80115ea:	f003 f856 	bl	801469a <SDMMC_CmdAppCommand>
 80115ee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <SD_PowerON+0x9a>
    {
      return errorstate;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	e03a      	b.n	8011670 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	491e      	ldr	r1, [pc, #120]	; (8011678 <SD_PowerON+0x118>)
 8011600:	4618      	mov	r0, r3
 8011602:	f003 f86d 	bl	80146e0 <SDMMC_CmdAppOperCommand>
 8011606:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801160e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011612:	e02d      	b.n	8011670 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2100      	movs	r1, #0
 801161a:	4618      	mov	r0, r3
 801161c:	f002 feb1 	bl	8014382 <SDMMC_GetResponse>
 8011620:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	0fdb      	lsrs	r3, r3, #31
 8011626:	2b01      	cmp	r3, #1
 8011628:	d101      	bne.n	801162e <SD_PowerON+0xce>
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <SD_PowerON+0xd0>
 801162e:	2300      	movs	r3, #0
 8011630:	613b      	str	r3, [r7, #16]

    count++;
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	3301      	adds	r3, #1
 8011636:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801163e:	4293      	cmp	r3, r2
 8011640:	d802      	bhi.n	8011648 <SD_PowerON+0xe8>
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d0cc      	beq.n	80115e2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801164e:	4293      	cmp	r3, r2
 8011650:	d902      	bls.n	8011658 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011652:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011656:	e00b      	b.n	8011670 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2201      	movs	r2, #1
 801166c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3718      	adds	r7, #24
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	c1100000 	.word	0xc1100000

0801167c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08c      	sub	sp, #48	; 0x30
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011686:	f7f3 fef1 	bl	800546c <HAL_GetTick>
 801168a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2100      	movs	r1, #0
 8011696:	4618      	mov	r0, r3
 8011698:	f002 fe73 	bl	8014382 <SDMMC_GetResponse>
 801169c:	4603      	mov	r3, r0
 801169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80116a6:	d102      	bne.n	80116ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80116a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80116ac:	e0b0      	b.n	8011810 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2140      	movs	r1, #64	; 0x40
 80116b4:	4618      	mov	r0, r3
 80116b6:	f002 fea3 	bl	8014400 <SDMMC_CmdBlockLength>
 80116ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d005      	beq.n	80116ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	e0a0      	b.n	8011810 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116d6:	041b      	lsls	r3, r3, #16
 80116d8:	4619      	mov	r1, r3
 80116da:	4610      	mov	r0, r2
 80116dc:	f002 ffdd 	bl	801469a <SDMMC_CmdAppCommand>
 80116e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80116e2:	6a3b      	ldr	r3, [r7, #32]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80116f0:	6a3b      	ldr	r3, [r7, #32]
 80116f2:	e08d      	b.n	8011810 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80116f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80116fa:	2340      	movs	r3, #64	; 0x40
 80116fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80116fe:	2360      	movs	r3, #96	; 0x60
 8011700:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011702:	2302      	movs	r3, #2
 8011704:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011706:	2300      	movs	r3, #0
 8011708:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801170a:	2301      	movs	r3, #1
 801170c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f107 0208 	add.w	r2, r7, #8
 8011716:	4611      	mov	r1, r2
 8011718:	4618      	mov	r0, r3
 801171a:	f002 fe45 	bl	80143a8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	4618      	mov	r0, r3
 8011724:	f003 f8c5 	bl	80148b2 <SDMMC_CmdStatusRegister>
 8011728:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d02b      	beq.n	8011788 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	e069      	b.n	8011810 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011746:	2b00      	cmp	r3, #0
 8011748:	d013      	beq.n	8011772 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 801174a:	2300      	movs	r3, #0
 801174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801174e:	e00d      	b.n	801176c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4618      	mov	r0, r3
 8011756:	f002 fd9f 	bl	8014298 <SDMMC_ReadFIFO>
 801175a:	4602      	mov	r2, r0
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	601a      	str	r2, [r3, #0]
        pData++;
 8011760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011762:	3304      	adds	r3, #4
 8011764:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	3301      	adds	r3, #1
 801176a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176e:	2b07      	cmp	r3, #7
 8011770:	d9ee      	bls.n	8011750 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011772:	f7f3 fe7b 	bl	800546c <HAL_GetTick>
 8011776:	4602      	mov	r2, r0
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	1ad3      	subs	r3, r2, r3
 801177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011780:	d102      	bne.n	8011788 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011782:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011786:	e043      	b.n	8011810 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8011792:	2b00      	cmp	r3, #0
 8011794:	d0d2      	beq.n	801173c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801179c:	f003 0308 	and.w	r3, r3, #8
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80117a4:	2308      	movs	r3, #8
 80117a6:	e033      	b.n	8011810 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ae:	f003 0302 	and.w	r3, r3, #2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80117b6:	2302      	movs	r3, #2
 80117b8:	e02a      	b.n	8011810 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117c0:	f003 0320 	and.w	r3, r3, #32
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d017      	beq.n	80117f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80117c8:	2320      	movs	r3, #32
 80117ca:	e021      	b.n	8011810 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f002 fd61 	bl	8014298 <SDMMC_ReadFIFO>
 80117d6:	4602      	mov	r2, r0
 80117d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117da:	601a      	str	r2, [r3, #0]
    pData++;
 80117dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117de:	3304      	adds	r3, #4
 80117e0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80117e2:	f7f3 fe43 	bl	800546c <HAL_GetTick>
 80117e6:	4602      	mov	r2, r0
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117f0:	d102      	bne.n	80117f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80117f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117f6:	e00b      	b.n	8011810 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1e2      	bne.n	80117cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4a03      	ldr	r2, [pc, #12]	; (8011818 <SD_SendSDStatus+0x19c>)
 801180c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801180e:	2300      	movs	r3, #0
}
 8011810:	4618      	mov	r0, r3
 8011812:	3730      	adds	r7, #48	; 0x30
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	18000f3a 	.word	0x18000f3a

0801181c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d102      	bne.n	8011832 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801182c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011830:	e018      	b.n	8011864 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183a:	041b      	lsls	r3, r3, #16
 801183c:	4619      	mov	r1, r3
 801183e:	4610      	mov	r0, r2
 8011840:	f003 f814 	bl	801486c <SDMMC_CmdSendStatus>
 8011844:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <SD_SendStatus+0x34>
  {
    return errorstate;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	e009      	b.n	8011864 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2100      	movs	r1, #0
 8011856:	4618      	mov	r0, r3
 8011858:	f002 fd93 	bl	8014382 <SDMMC_GetResponse>
 801185c:	4602      	mov	r2, r0
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b086      	sub	sp, #24
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011874:	2300      	movs	r3, #0
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	2300      	movs	r3, #0
 801187a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2100      	movs	r1, #0
 8011882:	4618      	mov	r0, r3
 8011884:	f002 fd7d 	bl	8014382 <SDMMC_GetResponse>
 8011888:	4603      	mov	r3, r0
 801188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801188e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011892:	d102      	bne.n	801189a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011898:	e02f      	b.n	80118fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801189a:	f107 030c 	add.w	r3, r7, #12
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 f879 	bl	8011998 <SD_FindSCR>
 80118a6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d001      	beq.n	80118b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	e023      	b.n	80118fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01c      	beq.n	80118f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681a      	ldr	r2, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118c4:	041b      	lsls	r3, r3, #16
 80118c6:	4619      	mov	r1, r3
 80118c8:	4610      	mov	r0, r2
 80118ca:	f002 fee6 	bl	801469a <SDMMC_CmdAppCommand>
 80118ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d001      	beq.n	80118da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	e00f      	b.n	80118fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2102      	movs	r1, #2
 80118e0:	4618      	mov	r0, r3
 80118e2:	f002 ff1d 	bl	8014720 <SDMMC_CmdBusWidth>
 80118e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d001      	beq.n	80118f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	e003      	b.n	80118fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e001      	b.n	80118fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80118f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b086      	sub	sp, #24
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801190a:	2300      	movs	r3, #0
 801190c:	60fb      	str	r3, [r7, #12]
 801190e:	2300      	movs	r3, #0
 8011910:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	2100      	movs	r1, #0
 8011918:	4618      	mov	r0, r3
 801191a:	f002 fd32 	bl	8014382 <SDMMC_GetResponse>
 801191e:	4603      	mov	r3, r0
 8011920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011928:	d102      	bne.n	8011930 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801192a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801192e:	e02f      	b.n	8011990 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011930:	f107 030c 	add.w	r3, r7, #12
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 f82e 	bl	8011998 <SD_FindSCR>
 801193c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d001      	beq.n	8011948 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	e023      	b.n	8011990 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801194e:	2b00      	cmp	r3, #0
 8011950:	d01c      	beq.n	801198c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195a:	041b      	lsls	r3, r3, #16
 801195c:	4619      	mov	r1, r3
 801195e:	4610      	mov	r0, r2
 8011960:	f002 fe9b 	bl	801469a <SDMMC_CmdAppCommand>
 8011964:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d001      	beq.n	8011970 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	e00f      	b.n	8011990 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2100      	movs	r1, #0
 8011976:	4618      	mov	r0, r3
 8011978:	f002 fed2 	bl	8014720 <SDMMC_CmdBusWidth>
 801197c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d001      	beq.n	8011988 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	e003      	b.n	8011990 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011988:	2300      	movs	r3, #0
 801198a:	e001      	b.n	8011990 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801198c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011990:	4618      	mov	r0, r3
 8011992:	3718      	adds	r7, #24
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b08e      	sub	sp, #56	; 0x38
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80119a2:	f7f3 fd63 	bl	800546c <HAL_GetTick>
 80119a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80119a8:	2300      	movs	r3, #0
 80119aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80119ac:	2300      	movs	r3, #0
 80119ae:	60bb      	str	r3, [r7, #8]
 80119b0:	2300      	movs	r3, #0
 80119b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2108      	movs	r1, #8
 80119be:	4618      	mov	r0, r3
 80119c0:	f002 fd1e 	bl	8014400 <SDMMC_CmdBlockLength>
 80119c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80119cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ce:	e0ad      	b.n	8011b2c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119d8:	041b      	lsls	r3, r3, #16
 80119da:	4619      	mov	r1, r3
 80119dc:	4610      	mov	r0, r2
 80119de:	f002 fe5c 	bl	801469a <SDMMC_CmdAppCommand>
 80119e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80119e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d001      	beq.n	80119ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	e09e      	b.n	8011b2c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80119ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80119f4:	2308      	movs	r3, #8
 80119f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80119f8:	2330      	movs	r3, #48	; 0x30
 80119fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80119fc:	2302      	movs	r3, #2
 80119fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011a00:	2300      	movs	r3, #0
 8011a02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011a04:	2301      	movs	r3, #1
 8011a06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f107 0210 	add.w	r2, r7, #16
 8011a10:	4611      	mov	r1, r2
 8011a12:	4618      	mov	r0, r3
 8011a14:	f002 fcc8 	bl	80143a8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f002 fea2 	bl	8014766 <SDMMC_CmdSendSCR>
 8011a22:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d027      	beq.n	8011a7a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2c:	e07e      	b.n	8011b2c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d113      	bne.n	8011a64 <SD_FindSCR+0xcc>
 8011a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d110      	bne.n	8011a64 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f002 fc26 	bl	8014298 <SDMMC_ReadFIFO>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f002 fc1f 	bl	8014298 <SDMMC_ReadFIFO>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	60fb      	str	r3, [r7, #12]
      index++;
 8011a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a60:	3301      	adds	r3, #1
 8011a62:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011a64:	f7f3 fd02 	bl	800546c <HAL_GetTick>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a72:	d102      	bne.n	8011a7a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a78:	e058      	b.n	8011b2c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a80:	f240 532a 	movw	r3, #1322	; 0x52a
 8011a84:	4013      	ands	r3, r2
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0d1      	beq.n	8011a2e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a90:	f003 0308 	and.w	r3, r3, #8
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d005      	beq.n	8011aa4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2208      	movs	r2, #8
 8011a9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	e043      	b.n	8011b2c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aaa:	f003 0302 	and.w	r3, r3, #2
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d005      	beq.n	8011abe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2202      	movs	r2, #2
 8011ab8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011aba:	2302      	movs	r3, #2
 8011abc:	e036      	b.n	8011b2c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ac4:	f003 0320 	and.w	r3, r3, #32
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d005      	beq.n	8011ad8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2220      	movs	r2, #32
 8011ad2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011ad4:	2320      	movs	r3, #32
 8011ad6:	e029      	b.n	8011b2c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4a15      	ldr	r2, [pc, #84]	; (8011b34 <SD_FindSCR+0x19c>)
 8011ade:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	061a      	lsls	r2, r3, #24
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	021b      	lsls	r3, r3, #8
 8011ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011aec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	0a1b      	lsrs	r3, r3, #8
 8011af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011af6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	0e1b      	lsrs	r3, r3, #24
 8011afc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	601a      	str	r2, [r3, #0]
    scr++;
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	3304      	adds	r3, #4
 8011b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	061a      	lsls	r2, r3, #24
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	0a1b      	lsrs	r3, r3, #8
 8011b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	0e1b      	lsrs	r3, r3, #24
 8011b24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3738      	adds	r7, #56	; 0x38
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	18000f3a 	.word	0x18000f3a

08011b38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d101      	bne.n	8011b4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	e02b      	b.n	8011ba4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d106      	bne.n	8011b66 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7f1 f86b 	bl	8002c3c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2202      	movs	r2, #2
 8011b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	3304      	adds	r3, #4
 8011b76:	4619      	mov	r1, r3
 8011b78:	4610      	mov	r0, r2
 8011b7a:	f002 fa61 	bl	8014040 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6818      	ldr	r0, [r3, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	461a      	mov	r2, r3
 8011b88:	6839      	ldr	r1, [r7, #0]
 8011b8a:	f002 fab5 	bl	80140f8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011b8e:	4b07      	ldr	r3, [pc, #28]	; (8011bac <HAL_SDRAM_Init+0x74>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a06      	ldr	r2, [pc, #24]	; (8011bac <HAL_SDRAM_Init+0x74>)
 8011b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011b98:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	52004000 	.word	0x52004000

08011bb0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011bc2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d101      	bne.n	8011bce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8011bca:	2302      	movs	r3, #2
 8011bcc:	e021      	b.n	8011c12 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8011bce:	7dfb      	ldrb	r3, [r7, #23]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d002      	beq.n	8011bda <HAL_SDRAM_SendCommand+0x2a>
 8011bd4:	7dfb      	ldrb	r3, [r7, #23]
 8011bd6:	2b05      	cmp	r3, #5
 8011bd8:	d118      	bne.n	8011c0c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2202      	movs	r2, #2
 8011bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	68b9      	ldr	r1, [r7, #8]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f002 faee 	bl	80141cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d104      	bne.n	8011c02 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2205      	movs	r2, #5
 8011bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011c00:	e006      	b.n	8011c10 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2201      	movs	r2, #1
 8011c06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011c0a:	e001      	b.n	8011c10 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e000      	b.n	8011c12 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011c10:	2300      	movs	r3, #0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3718      	adds	r7, #24
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011c1a:	b580      	push	{r7, lr}
 8011c1c:	b082      	sub	sp, #8
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
 8011c22:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d101      	bne.n	8011c34 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011c30:	2302      	movs	r3, #2
 8011c32:	e016      	b.n	8011c62 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d10f      	bne.n	8011c60 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2202      	movs	r2, #2
 8011c44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f002 fae0 	bl	8014214 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2201      	movs	r2, #1
 8011c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	e000      	b.n	8011c62 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
	...

08011c6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d101      	bne.n	8011c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e10f      	b.n	8011e9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2200      	movs	r2, #0
 8011c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4a87      	ldr	r2, [pc, #540]	; (8011ea8 <HAL_SPI_Init+0x23c>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d00f      	beq.n	8011cae <HAL_SPI_Init+0x42>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a86      	ldr	r2, [pc, #536]	; (8011eac <HAL_SPI_Init+0x240>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d00a      	beq.n	8011cae <HAL_SPI_Init+0x42>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4a84      	ldr	r2, [pc, #528]	; (8011eb0 <HAL_SPI_Init+0x244>)
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d005      	beq.n	8011cae <HAL_SPI_Init+0x42>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	2b0f      	cmp	r3, #15
 8011ca8:	d901      	bls.n	8011cae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011caa:	2301      	movs	r3, #1
 8011cac:	e0f7      	b.n	8011e9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 f900 	bl	8011eb4 <SPI_GetPacketSize>
 8011cb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a7b      	ldr	r2, [pc, #492]	; (8011ea8 <HAL_SPI_Init+0x23c>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d00c      	beq.n	8011cda <HAL_SPI_Init+0x6e>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	4a79      	ldr	r2, [pc, #484]	; (8011eac <HAL_SPI_Init+0x240>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d007      	beq.n	8011cda <HAL_SPI_Init+0x6e>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4a78      	ldr	r2, [pc, #480]	; (8011eb0 <HAL_SPI_Init+0x244>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d002      	beq.n	8011cda <HAL_SPI_Init+0x6e>
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2b08      	cmp	r3, #8
 8011cd8:	d811      	bhi.n	8011cfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011cde:	4a72      	ldr	r2, [pc, #456]	; (8011ea8 <HAL_SPI_Init+0x23c>)
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d009      	beq.n	8011cf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4a70      	ldr	r2, [pc, #448]	; (8011eac <HAL_SPI_Init+0x240>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d004      	beq.n	8011cf8 <HAL_SPI_Init+0x8c>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a6f      	ldr	r2, [pc, #444]	; (8011eb0 <HAL_SPI_Init+0x244>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d104      	bne.n	8011d02 <HAL_SPI_Init+0x96>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d901      	bls.n	8011d02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e0cd      	b.n	8011e9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d106      	bne.n	8011d1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7f1 ffa4 	bl	8003c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2202      	movs	r2, #2
 8011d20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	681a      	ldr	r2, [r3, #0]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f022 0201 	bic.w	r2, r2, #1
 8011d32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011d3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d48:	d119      	bne.n	8011d7e <HAL_SPI_Init+0x112>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d52:	d103      	bne.n	8011d5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d008      	beq.n	8011d6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10c      	bne.n	8011d7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d6c:	d107      	bne.n	8011d7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00f      	beq.n	8011daa <HAL_SPI_Init+0x13e>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	2b06      	cmp	r3, #6
 8011d90:	d90b      	bls.n	8011daa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	430a      	orrs	r2, r1
 8011da6:	601a      	str	r2, [r3, #0]
 8011da8:	e007      	b.n	8011dba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011db8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	69da      	ldr	r2, [r3, #28]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc2:	431a      	orrs	r2, r3
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	431a      	orrs	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dcc:	ea42 0103 	orr.w	r1, r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68da      	ldr	r2, [r3, #12]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	430a      	orrs	r2, r1
 8011dda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	431a      	orrs	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dea:	431a      	orrs	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	699b      	ldr	r3, [r3, #24]
 8011df0:	431a      	orrs	r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	691b      	ldr	r3, [r3, #16]
 8011df6:	431a      	orrs	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	695b      	ldr	r3, [r3, #20]
 8011dfc:	431a      	orrs	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6a1b      	ldr	r3, [r3, #32]
 8011e02:	431a      	orrs	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	431a      	orrs	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	431a      	orrs	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e1a:	ea42 0103 	orr.w	r1, r2, r3
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	430a      	orrs	r2, r1
 8011e28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d113      	bne.n	8011e5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f022 0201 	bic.w	r2, r2, #1
 8011e68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00a      	beq.n	8011e8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	430a      	orrs	r2, r1
 8011e8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2201      	movs	r2, #1
 8011e98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	40013000 	.word	0x40013000
 8011eac:	40003800 	.word	0x40003800
 8011eb0:	40003c00 	.word	0x40003c00

08011eb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ec0:	095b      	lsrs	r3, r3, #5
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	68db      	ldr	r3, [r3, #12]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	3307      	adds	r3, #7
 8011ed2:	08db      	lsrs	r3, r3, #3
 8011ed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	fb02 f303 	mul.w	r3, r2, r3
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3714      	adds	r7, #20
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b082      	sub	sp, #8
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d101      	bne.n	8011efc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e049      	b.n	8011f90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d106      	bne.n	8011f16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7f2 fa3f 	bl	8004394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2202      	movs	r2, #2
 8011f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	3304      	adds	r3, #4
 8011f26:	4619      	mov	r1, r3
 8011f28:	4610      	mov	r0, r2
 8011f2a:	f000 fa99 	bl	8012460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2201      	movs	r2, #1
 8011f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2201      	movs	r2, #1
 8011f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2201      	movs	r2, #1
 8011f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2201      	movs	r2, #1
 8011f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2201      	movs	r2, #1
 8011f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2201      	movs	r2, #1
 8011f82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2201      	movs	r2, #1
 8011f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d101      	bne.n	8011faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e049      	b.n	801203e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d106      	bne.n	8011fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7f2 f9c6 	bl	8004350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	f000 fa42 	bl	8012460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2201      	movs	r2, #1
 8012000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2201      	movs	r2, #1
 8012008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2201      	movs	r2, #1
 8012010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2201      	movs	r2, #1
 8012018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2201      	movs	r2, #1
 8012020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2201      	movs	r2, #1
 8012028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2201      	movs	r2, #1
 8012030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2201      	movs	r2, #1
 8012038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	3708      	adds	r7, #8
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
	...

08012048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b086      	sub	sp, #24
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012054:	2300      	movs	r3, #0
 8012056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801205e:	2b01      	cmp	r3, #1
 8012060:	d101      	bne.n	8012066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012062:	2302      	movs	r3, #2
 8012064:	e0ff      	b.n	8012266 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2b14      	cmp	r3, #20
 8012072:	f200 80f0 	bhi.w	8012256 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012076:	a201      	add	r2, pc, #4	; (adr r2, 801207c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801207c:	080120d1 	.word	0x080120d1
 8012080:	08012257 	.word	0x08012257
 8012084:	08012257 	.word	0x08012257
 8012088:	08012257 	.word	0x08012257
 801208c:	08012111 	.word	0x08012111
 8012090:	08012257 	.word	0x08012257
 8012094:	08012257 	.word	0x08012257
 8012098:	08012257 	.word	0x08012257
 801209c:	08012153 	.word	0x08012153
 80120a0:	08012257 	.word	0x08012257
 80120a4:	08012257 	.word	0x08012257
 80120a8:	08012257 	.word	0x08012257
 80120ac:	08012193 	.word	0x08012193
 80120b0:	08012257 	.word	0x08012257
 80120b4:	08012257 	.word	0x08012257
 80120b8:	08012257 	.word	0x08012257
 80120bc:	080121d5 	.word	0x080121d5
 80120c0:	08012257 	.word	0x08012257
 80120c4:	08012257 	.word	0x08012257
 80120c8:	08012257 	.word	0x08012257
 80120cc:	08012215 	.word	0x08012215
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68b9      	ldr	r1, [r7, #8]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f000 fa5c 	bl	8012594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	699a      	ldr	r2, [r3, #24]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f042 0208 	orr.w	r2, r2, #8
 80120ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	699a      	ldr	r2, [r3, #24]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f022 0204 	bic.w	r2, r2, #4
 80120fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	6999      	ldr	r1, [r3, #24]
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	691a      	ldr	r2, [r3, #16]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	430a      	orrs	r2, r1
 801210c:	619a      	str	r2, [r3, #24]
      break;
 801210e:	e0a5      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68b9      	ldr	r1, [r7, #8]
 8012116:	4618      	mov	r0, r3
 8012118:	f000 facc 	bl	80126b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	699a      	ldr	r2, [r3, #24]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801212a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	699a      	ldr	r2, [r3, #24]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801213a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	6999      	ldr	r1, [r3, #24]
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	021a      	lsls	r2, r3, #8
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	430a      	orrs	r2, r1
 801214e:	619a      	str	r2, [r3, #24]
      break;
 8012150:	e084      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	68b9      	ldr	r1, [r7, #8]
 8012158:	4618      	mov	r0, r3
 801215a:	f000 fb35 	bl	80127c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	69da      	ldr	r2, [r3, #28]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f042 0208 	orr.w	r2, r2, #8
 801216c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	69da      	ldr	r2, [r3, #28]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f022 0204 	bic.w	r2, r2, #4
 801217c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	69d9      	ldr	r1, [r3, #28]
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	691a      	ldr	r2, [r3, #16]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	430a      	orrs	r2, r1
 801218e:	61da      	str	r2, [r3, #28]
      break;
 8012190:	e064      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	68b9      	ldr	r1, [r7, #8]
 8012198:	4618      	mov	r0, r3
 801219a:	f000 fb9d 	bl	80128d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	69da      	ldr	r2, [r3, #28]
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80121ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	69da      	ldr	r2, [r3, #28]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80121bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	69d9      	ldr	r1, [r3, #28]
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	021a      	lsls	r2, r3, #8
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	430a      	orrs	r2, r1
 80121d0:	61da      	str	r2, [r3, #28]
      break;
 80121d2:	e043      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	68b9      	ldr	r1, [r7, #8]
 80121da:	4618      	mov	r0, r3
 80121dc:	f000 fbe6 	bl	80129ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f042 0208 	orr.w	r2, r2, #8
 80121ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	f022 0204 	bic.w	r2, r2, #4
 80121fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	691a      	ldr	r2, [r3, #16]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	430a      	orrs	r2, r1
 8012210:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012212:	e023      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68b9      	ldr	r1, [r7, #8]
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fc2a 	bl	8012a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801222e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801223e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	691b      	ldr	r3, [r3, #16]
 801224a:	021a      	lsls	r2, r3, #8
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	430a      	orrs	r2, r1
 8012252:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012254:	e002      	b.n	801225c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012256:	2301      	movs	r3, #1
 8012258:	75fb      	strb	r3, [r7, #23]
      break;
 801225a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012264:	7dfb      	ldrb	r3, [r7, #23]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop

08012270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012284:	2b01      	cmp	r3, #1
 8012286:	d101      	bne.n	801228c <HAL_TIM_ConfigClockSource+0x1c>
 8012288:	2302      	movs	r3, #2
 801228a:	e0dc      	b.n	8012446 <HAL_TIM_ConfigClockSource+0x1d6>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2201      	movs	r2, #1
 8012290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2202      	movs	r2, #2
 8012298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80122a4:	68ba      	ldr	r2, [r7, #8]
 80122a6:	4b6a      	ldr	r3, [pc, #424]	; (8012450 <HAL_TIM_ConfigClockSource+0x1e0>)
 80122a8:	4013      	ands	r3, r2
 80122aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80122b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4a64      	ldr	r2, [pc, #400]	; (8012454 <HAL_TIM_ConfigClockSource+0x1e4>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	f000 80a9 	beq.w	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 80122c8:	4a62      	ldr	r2, [pc, #392]	; (8012454 <HAL_TIM_ConfigClockSource+0x1e4>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	f200 80ae 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 80122d0:	4a61      	ldr	r2, [pc, #388]	; (8012458 <HAL_TIM_ConfigClockSource+0x1e8>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	f000 80a1 	beq.w	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 80122d8:	4a5f      	ldr	r2, [pc, #380]	; (8012458 <HAL_TIM_ConfigClockSource+0x1e8>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	f200 80a6 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 80122e0:	4a5e      	ldr	r2, [pc, #376]	; (801245c <HAL_TIM_ConfigClockSource+0x1ec>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	f000 8099 	beq.w	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 80122e8:	4a5c      	ldr	r2, [pc, #368]	; (801245c <HAL_TIM_ConfigClockSource+0x1ec>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	f200 809e 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 80122f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80122f4:	f000 8091 	beq.w	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 80122f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80122fc:	f200 8096 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 8012300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012304:	f000 8089 	beq.w	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 8012308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801230c:	f200 808e 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 8012310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012314:	d03e      	beq.n	8012394 <HAL_TIM_ConfigClockSource+0x124>
 8012316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801231a:	f200 8087 	bhi.w	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 801231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012322:	f000 8086 	beq.w	8012432 <HAL_TIM_ConfigClockSource+0x1c2>
 8012326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801232a:	d87f      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 801232c:	2b70      	cmp	r3, #112	; 0x70
 801232e:	d01a      	beq.n	8012366 <HAL_TIM_ConfigClockSource+0xf6>
 8012330:	2b70      	cmp	r3, #112	; 0x70
 8012332:	d87b      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 8012334:	2b60      	cmp	r3, #96	; 0x60
 8012336:	d050      	beq.n	80123da <HAL_TIM_ConfigClockSource+0x16a>
 8012338:	2b60      	cmp	r3, #96	; 0x60
 801233a:	d877      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 801233c:	2b50      	cmp	r3, #80	; 0x50
 801233e:	d03c      	beq.n	80123ba <HAL_TIM_ConfigClockSource+0x14a>
 8012340:	2b50      	cmp	r3, #80	; 0x50
 8012342:	d873      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 8012344:	2b40      	cmp	r3, #64	; 0x40
 8012346:	d058      	beq.n	80123fa <HAL_TIM_ConfigClockSource+0x18a>
 8012348:	2b40      	cmp	r3, #64	; 0x40
 801234a:	d86f      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 801234c:	2b30      	cmp	r3, #48	; 0x30
 801234e:	d064      	beq.n	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 8012350:	2b30      	cmp	r3, #48	; 0x30
 8012352:	d86b      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 8012354:	2b20      	cmp	r3, #32
 8012356:	d060      	beq.n	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 8012358:	2b20      	cmp	r3, #32
 801235a:	d867      	bhi.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
 801235c:	2b00      	cmp	r3, #0
 801235e:	d05c      	beq.n	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 8012360:	2b10      	cmp	r3, #16
 8012362:	d05a      	beq.n	801241a <HAL_TIM_ConfigClockSource+0x1aa>
 8012364:	e062      	b.n	801242c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012376:	f000 fc61 	bl	8012c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	68ba      	ldr	r2, [r7, #8]
 8012390:	609a      	str	r2, [r3, #8]
      break;
 8012392:	e04f      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80123a4:	f000 fc4a 	bl	8012c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	689a      	ldr	r2, [r3, #8]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80123b6:	609a      	str	r2, [r3, #8]
      break;
 80123b8:	e03c      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80123c6:	461a      	mov	r2, r3
 80123c8:	f000 fbba 	bl	8012b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2150      	movs	r1, #80	; 0x50
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 fc14 	bl	8012c00 <TIM_ITRx_SetConfig>
      break;
 80123d8:	e02c      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80123e6:	461a      	mov	r2, r3
 80123e8:	f000 fbd9 	bl	8012b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2160      	movs	r1, #96	; 0x60
 80123f2:	4618      	mov	r0, r3
 80123f4:	f000 fc04 	bl	8012c00 <TIM_ITRx_SetConfig>
      break;
 80123f8:	e01c      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012406:	461a      	mov	r2, r3
 8012408:	f000 fb9a 	bl	8012b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2140      	movs	r1, #64	; 0x40
 8012412:	4618      	mov	r0, r3
 8012414:	f000 fbf4 	bl	8012c00 <TIM_ITRx_SetConfig>
      break;
 8012418:	e00c      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4619      	mov	r1, r3
 8012424:	4610      	mov	r0, r2
 8012426:	f000 fbeb 	bl	8012c00 <TIM_ITRx_SetConfig>
      break;
 801242a:	e003      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801242c:	2301      	movs	r3, #1
 801242e:	73fb      	strb	r3, [r7, #15]
      break;
 8012430:	e000      	b.n	8012434 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2201      	movs	r2, #1
 8012438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2200      	movs	r2, #0
 8012440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012444:	7bfb      	ldrb	r3, [r7, #15]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3710      	adds	r7, #16
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	ffceff88 	.word	0xffceff88
 8012454:	00100040 	.word	0x00100040
 8012458:	00100030 	.word	0x00100030
 801245c:	00100020 	.word	0x00100020

08012460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012460:	b480      	push	{r7}
 8012462:	b085      	sub	sp, #20
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4a40      	ldr	r2, [pc, #256]	; (8012574 <TIM_Base_SetConfig+0x114>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d013      	beq.n	80124a0 <TIM_Base_SetConfig+0x40>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801247e:	d00f      	beq.n	80124a0 <TIM_Base_SetConfig+0x40>
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4a3d      	ldr	r2, [pc, #244]	; (8012578 <TIM_Base_SetConfig+0x118>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d00b      	beq.n	80124a0 <TIM_Base_SetConfig+0x40>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4a3c      	ldr	r2, [pc, #240]	; (801257c <TIM_Base_SetConfig+0x11c>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d007      	beq.n	80124a0 <TIM_Base_SetConfig+0x40>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4a3b      	ldr	r2, [pc, #236]	; (8012580 <TIM_Base_SetConfig+0x120>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d003      	beq.n	80124a0 <TIM_Base_SetConfig+0x40>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	4a3a      	ldr	r2, [pc, #232]	; (8012584 <TIM_Base_SetConfig+0x124>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d108      	bne.n	80124b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	68fa      	ldr	r2, [r7, #12]
 80124ae:	4313      	orrs	r3, r2
 80124b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a2f      	ldr	r2, [pc, #188]	; (8012574 <TIM_Base_SetConfig+0x114>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d01f      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124c0:	d01b      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a2c      	ldr	r2, [pc, #176]	; (8012578 <TIM_Base_SetConfig+0x118>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d017      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a2b      	ldr	r2, [pc, #172]	; (801257c <TIM_Base_SetConfig+0x11c>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d013      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a2a      	ldr	r2, [pc, #168]	; (8012580 <TIM_Base_SetConfig+0x120>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d00f      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a29      	ldr	r2, [pc, #164]	; (8012584 <TIM_Base_SetConfig+0x124>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d00b      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4a28      	ldr	r2, [pc, #160]	; (8012588 <TIM_Base_SetConfig+0x128>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d007      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4a27      	ldr	r2, [pc, #156]	; (801258c <TIM_Base_SetConfig+0x12c>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d003      	beq.n	80124fa <TIM_Base_SetConfig+0x9a>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4a26      	ldr	r2, [pc, #152]	; (8012590 <TIM_Base_SetConfig+0x130>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d108      	bne.n	801250c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	68fa      	ldr	r2, [r7, #12]
 8012508:	4313      	orrs	r3, r2
 801250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	695b      	ldr	r3, [r3, #20]
 8012516:	4313      	orrs	r3, r2
 8012518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	689a      	ldr	r2, [r3, #8]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4a10      	ldr	r2, [pc, #64]	; (8012574 <TIM_Base_SetConfig+0x114>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d00f      	beq.n	8012558 <TIM_Base_SetConfig+0xf8>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4a12      	ldr	r2, [pc, #72]	; (8012584 <TIM_Base_SetConfig+0x124>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d00b      	beq.n	8012558 <TIM_Base_SetConfig+0xf8>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a11      	ldr	r2, [pc, #68]	; (8012588 <TIM_Base_SetConfig+0x128>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d007      	beq.n	8012558 <TIM_Base_SetConfig+0xf8>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a10      	ldr	r2, [pc, #64]	; (801258c <TIM_Base_SetConfig+0x12c>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d003      	beq.n	8012558 <TIM_Base_SetConfig+0xf8>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4a0f      	ldr	r2, [pc, #60]	; (8012590 <TIM_Base_SetConfig+0x130>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d103      	bne.n	8012560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	691a      	ldr	r2, [r3, #16]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2201      	movs	r2, #1
 8012564:	615a      	str	r2, [r3, #20]
}
 8012566:	bf00      	nop
 8012568:	3714      	adds	r7, #20
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	40010000 	.word	0x40010000
 8012578:	40000400 	.word	0x40000400
 801257c:	40000800 	.word	0x40000800
 8012580:	40000c00 	.word	0x40000c00
 8012584:	40010400 	.word	0x40010400
 8012588:	40014000 	.word	0x40014000
 801258c:	40014400 	.word	0x40014400
 8012590:	40014800 	.word	0x40014800

08012594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012594:	b480      	push	{r7}
 8012596:	b087      	sub	sp, #28
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6a1b      	ldr	r3, [r3, #32]
 80125a2:	f023 0201 	bic.w	r2, r3, #1
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6a1b      	ldr	r3, [r3, #32]
 80125ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	699b      	ldr	r3, [r3, #24]
 80125ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	4b37      	ldr	r3, [pc, #220]	; (801269c <TIM_OC1_SetConfig+0x108>)
 80125c0:	4013      	ands	r3, r2
 80125c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f023 0303 	bic.w	r3, r3, #3
 80125ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	4313      	orrs	r3, r2
 80125d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	f023 0302 	bic.w	r3, r3, #2
 80125dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	689b      	ldr	r3, [r3, #8]
 80125e2:	697a      	ldr	r2, [r7, #20]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4a2d      	ldr	r2, [pc, #180]	; (80126a0 <TIM_OC1_SetConfig+0x10c>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d00f      	beq.n	8012610 <TIM_OC1_SetConfig+0x7c>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4a2c      	ldr	r2, [pc, #176]	; (80126a4 <TIM_OC1_SetConfig+0x110>)
 80125f4:	4293      	cmp	r3, r2
 80125f6:	d00b      	beq.n	8012610 <TIM_OC1_SetConfig+0x7c>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a2b      	ldr	r2, [pc, #172]	; (80126a8 <TIM_OC1_SetConfig+0x114>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d007      	beq.n	8012610 <TIM_OC1_SetConfig+0x7c>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4a2a      	ldr	r2, [pc, #168]	; (80126ac <TIM_OC1_SetConfig+0x118>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d003      	beq.n	8012610 <TIM_OC1_SetConfig+0x7c>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4a29      	ldr	r2, [pc, #164]	; (80126b0 <TIM_OC1_SetConfig+0x11c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d10c      	bne.n	801262a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	f023 0308 	bic.w	r3, r3, #8
 8012616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	697a      	ldr	r2, [r7, #20]
 801261e:	4313      	orrs	r3, r2
 8012620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f023 0304 	bic.w	r3, r3, #4
 8012628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4a1c      	ldr	r2, [pc, #112]	; (80126a0 <TIM_OC1_SetConfig+0x10c>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d00f      	beq.n	8012652 <TIM_OC1_SetConfig+0xbe>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4a1b      	ldr	r2, [pc, #108]	; (80126a4 <TIM_OC1_SetConfig+0x110>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d00b      	beq.n	8012652 <TIM_OC1_SetConfig+0xbe>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4a1a      	ldr	r2, [pc, #104]	; (80126a8 <TIM_OC1_SetConfig+0x114>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d007      	beq.n	8012652 <TIM_OC1_SetConfig+0xbe>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4a19      	ldr	r2, [pc, #100]	; (80126ac <TIM_OC1_SetConfig+0x118>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d003      	beq.n	8012652 <TIM_OC1_SetConfig+0xbe>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4a18      	ldr	r2, [pc, #96]	; (80126b0 <TIM_OC1_SetConfig+0x11c>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d111      	bne.n	8012676 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	695b      	ldr	r3, [r3, #20]
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	4313      	orrs	r3, r2
 801266a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	699b      	ldr	r3, [r3, #24]
 8012670:	693a      	ldr	r2, [r7, #16]
 8012672:	4313      	orrs	r3, r2
 8012674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	693a      	ldr	r2, [r7, #16]
 801267a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	685a      	ldr	r2, [r3, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	697a      	ldr	r2, [r7, #20]
 801268e:	621a      	str	r2, [r3, #32]
}
 8012690:	bf00      	nop
 8012692:	371c      	adds	r7, #28
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr
 801269c:	fffeff8f 	.word	0xfffeff8f
 80126a0:	40010000 	.word	0x40010000
 80126a4:	40010400 	.word	0x40010400
 80126a8:	40014000 	.word	0x40014000
 80126ac:	40014400 	.word	0x40014400
 80126b0:	40014800 	.word	0x40014800

080126b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b087      	sub	sp, #28
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a1b      	ldr	r3, [r3, #32]
 80126c2:	f023 0210 	bic.w	r2, r3, #16
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a1b      	ldr	r3, [r3, #32]
 80126ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	699b      	ldr	r3, [r3, #24]
 80126da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	4b34      	ldr	r3, [pc, #208]	; (80127b0 <TIM_OC2_SetConfig+0xfc>)
 80126e0:	4013      	ands	r3, r2
 80126e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80126ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	021b      	lsls	r3, r3, #8
 80126f2:	68fa      	ldr	r2, [r7, #12]
 80126f4:	4313      	orrs	r3, r2
 80126f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	f023 0320 	bic.w	r3, r3, #32
 80126fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	689b      	ldr	r3, [r3, #8]
 8012704:	011b      	lsls	r3, r3, #4
 8012706:	697a      	ldr	r2, [r7, #20]
 8012708:	4313      	orrs	r3, r2
 801270a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4a29      	ldr	r2, [pc, #164]	; (80127b4 <TIM_OC2_SetConfig+0x100>)
 8012710:	4293      	cmp	r3, r2
 8012712:	d003      	beq.n	801271c <TIM_OC2_SetConfig+0x68>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	4a28      	ldr	r2, [pc, #160]	; (80127b8 <TIM_OC2_SetConfig+0x104>)
 8012718:	4293      	cmp	r3, r2
 801271a:	d10d      	bne.n	8012738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	011b      	lsls	r3, r3, #4
 801272a:	697a      	ldr	r2, [r7, #20]
 801272c:	4313      	orrs	r3, r2
 801272e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a1e      	ldr	r2, [pc, #120]	; (80127b4 <TIM_OC2_SetConfig+0x100>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d00f      	beq.n	8012760 <TIM_OC2_SetConfig+0xac>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a1d      	ldr	r2, [pc, #116]	; (80127b8 <TIM_OC2_SetConfig+0x104>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d00b      	beq.n	8012760 <TIM_OC2_SetConfig+0xac>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a1c      	ldr	r2, [pc, #112]	; (80127bc <TIM_OC2_SetConfig+0x108>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d007      	beq.n	8012760 <TIM_OC2_SetConfig+0xac>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a1b      	ldr	r2, [pc, #108]	; (80127c0 <TIM_OC2_SetConfig+0x10c>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d003      	beq.n	8012760 <TIM_OC2_SetConfig+0xac>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a1a      	ldr	r2, [pc, #104]	; (80127c4 <TIM_OC2_SetConfig+0x110>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d113      	bne.n	8012788 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801276e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	695b      	ldr	r3, [r3, #20]
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	693a      	ldr	r2, [r7, #16]
 8012778:	4313      	orrs	r3, r2
 801277a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	699b      	ldr	r3, [r3, #24]
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	693a      	ldr	r2, [r7, #16]
 8012784:	4313      	orrs	r3, r2
 8012786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	693a      	ldr	r2, [r7, #16]
 801278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	685a      	ldr	r2, [r3, #4]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	697a      	ldr	r2, [r7, #20]
 80127a0:	621a      	str	r2, [r3, #32]
}
 80127a2:	bf00      	nop
 80127a4:	371c      	adds	r7, #28
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	feff8fff 	.word	0xfeff8fff
 80127b4:	40010000 	.word	0x40010000
 80127b8:	40010400 	.word	0x40010400
 80127bc:	40014000 	.word	0x40014000
 80127c0:	40014400 	.word	0x40014400
 80127c4:	40014800 	.word	0x40014800

080127c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b087      	sub	sp, #28
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6a1b      	ldr	r3, [r3, #32]
 80127d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a1b      	ldr	r3, [r3, #32]
 80127e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	69db      	ldr	r3, [r3, #28]
 80127ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	4b33      	ldr	r3, [pc, #204]	; (80128c0 <TIM_OC3_SetConfig+0xf8>)
 80127f4:	4013      	ands	r3, r2
 80127f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f023 0303 	bic.w	r3, r3, #3
 80127fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	4313      	orrs	r3, r2
 8012808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	021b      	lsls	r3, r3, #8
 8012818:	697a      	ldr	r2, [r7, #20]
 801281a:	4313      	orrs	r3, r2
 801281c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4a28      	ldr	r2, [pc, #160]	; (80128c4 <TIM_OC3_SetConfig+0xfc>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d003      	beq.n	801282e <TIM_OC3_SetConfig+0x66>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4a27      	ldr	r2, [pc, #156]	; (80128c8 <TIM_OC3_SetConfig+0x100>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d10d      	bne.n	801284a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	021b      	lsls	r3, r3, #8
 801283c:	697a      	ldr	r2, [r7, #20]
 801283e:	4313      	orrs	r3, r2
 8012840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4a1d      	ldr	r2, [pc, #116]	; (80128c4 <TIM_OC3_SetConfig+0xfc>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d00f      	beq.n	8012872 <TIM_OC3_SetConfig+0xaa>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4a1c      	ldr	r2, [pc, #112]	; (80128c8 <TIM_OC3_SetConfig+0x100>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d00b      	beq.n	8012872 <TIM_OC3_SetConfig+0xaa>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4a1b      	ldr	r2, [pc, #108]	; (80128cc <TIM_OC3_SetConfig+0x104>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d007      	beq.n	8012872 <TIM_OC3_SetConfig+0xaa>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4a1a      	ldr	r2, [pc, #104]	; (80128d0 <TIM_OC3_SetConfig+0x108>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d003      	beq.n	8012872 <TIM_OC3_SetConfig+0xaa>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4a19      	ldr	r2, [pc, #100]	; (80128d4 <TIM_OC3_SetConfig+0x10c>)
 801286e:	4293      	cmp	r3, r2
 8012870:	d113      	bne.n	801289a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	695b      	ldr	r3, [r3, #20]
 8012886:	011b      	lsls	r3, r3, #4
 8012888:	693a      	ldr	r2, [r7, #16]
 801288a:	4313      	orrs	r3, r2
 801288c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	699b      	ldr	r3, [r3, #24]
 8012892:	011b      	lsls	r3, r3, #4
 8012894:	693a      	ldr	r2, [r7, #16]
 8012896:	4313      	orrs	r3, r2
 8012898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	693a      	ldr	r2, [r7, #16]
 801289e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	685a      	ldr	r2, [r3, #4]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	697a      	ldr	r2, [r7, #20]
 80128b2:	621a      	str	r2, [r3, #32]
}
 80128b4:	bf00      	nop
 80128b6:	371c      	adds	r7, #28
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	fffeff8f 	.word	0xfffeff8f
 80128c4:	40010000 	.word	0x40010000
 80128c8:	40010400 	.word	0x40010400
 80128cc:	40014000 	.word	0x40014000
 80128d0:	40014400 	.word	0x40014400
 80128d4:	40014800 	.word	0x40014800

080128d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80128d8:	b480      	push	{r7}
 80128da:	b087      	sub	sp, #28
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6a1b      	ldr	r3, [r3, #32]
 80128e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	69db      	ldr	r3, [r3, #28]
 80128fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	4b24      	ldr	r3, [pc, #144]	; (8012994 <TIM_OC4_SetConfig+0xbc>)
 8012904:	4013      	ands	r3, r2
 8012906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801290e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	021b      	lsls	r3, r3, #8
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	4313      	orrs	r3, r2
 801291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	689b      	ldr	r3, [r3, #8]
 8012928:	031b      	lsls	r3, r3, #12
 801292a:	693a      	ldr	r2, [r7, #16]
 801292c:	4313      	orrs	r3, r2
 801292e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	4a19      	ldr	r2, [pc, #100]	; (8012998 <TIM_OC4_SetConfig+0xc0>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d00f      	beq.n	8012958 <TIM_OC4_SetConfig+0x80>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4a18      	ldr	r2, [pc, #96]	; (801299c <TIM_OC4_SetConfig+0xc4>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d00b      	beq.n	8012958 <TIM_OC4_SetConfig+0x80>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4a17      	ldr	r2, [pc, #92]	; (80129a0 <TIM_OC4_SetConfig+0xc8>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d007      	beq.n	8012958 <TIM_OC4_SetConfig+0x80>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4a16      	ldr	r2, [pc, #88]	; (80129a4 <TIM_OC4_SetConfig+0xcc>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d003      	beq.n	8012958 <TIM_OC4_SetConfig+0x80>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	4a15      	ldr	r2, [pc, #84]	; (80129a8 <TIM_OC4_SetConfig+0xd0>)
 8012954:	4293      	cmp	r3, r2
 8012956:	d109      	bne.n	801296c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801295e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	695b      	ldr	r3, [r3, #20]
 8012964:	019b      	lsls	r3, r3, #6
 8012966:	697a      	ldr	r2, [r7, #20]
 8012968:	4313      	orrs	r3, r2
 801296a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	697a      	ldr	r2, [r7, #20]
 8012970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	685a      	ldr	r2, [r3, #4]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	693a      	ldr	r2, [r7, #16]
 8012984:	621a      	str	r2, [r3, #32]
}
 8012986:	bf00      	nop
 8012988:	371c      	adds	r7, #28
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	feff8fff 	.word	0xfeff8fff
 8012998:	40010000 	.word	0x40010000
 801299c:	40010400 	.word	0x40010400
 80129a0:	40014000 	.word	0x40014000
 80129a4:	40014400 	.word	0x40014400
 80129a8:	40014800 	.word	0x40014800

080129ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b087      	sub	sp, #28
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a1b      	ldr	r3, [r3, #32]
 80129ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6a1b      	ldr	r3, [r3, #32]
 80129c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	4b21      	ldr	r3, [pc, #132]	; (8012a5c <TIM_OC5_SetConfig+0xb0>)
 80129d8:	4013      	ands	r3, r2
 80129da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	4313      	orrs	r3, r2
 80129e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80129ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	689b      	ldr	r3, [r3, #8]
 80129f2:	041b      	lsls	r3, r3, #16
 80129f4:	693a      	ldr	r2, [r7, #16]
 80129f6:	4313      	orrs	r3, r2
 80129f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4a18      	ldr	r2, [pc, #96]	; (8012a60 <TIM_OC5_SetConfig+0xb4>)
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d00f      	beq.n	8012a22 <TIM_OC5_SetConfig+0x76>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4a17      	ldr	r2, [pc, #92]	; (8012a64 <TIM_OC5_SetConfig+0xb8>)
 8012a06:	4293      	cmp	r3, r2
 8012a08:	d00b      	beq.n	8012a22 <TIM_OC5_SetConfig+0x76>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4a16      	ldr	r2, [pc, #88]	; (8012a68 <TIM_OC5_SetConfig+0xbc>)
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	d007      	beq.n	8012a22 <TIM_OC5_SetConfig+0x76>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4a15      	ldr	r2, [pc, #84]	; (8012a6c <TIM_OC5_SetConfig+0xc0>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d003      	beq.n	8012a22 <TIM_OC5_SetConfig+0x76>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4a14      	ldr	r2, [pc, #80]	; (8012a70 <TIM_OC5_SetConfig+0xc4>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d109      	bne.n	8012a36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012a28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	695b      	ldr	r3, [r3, #20]
 8012a2e:	021b      	lsls	r3, r3, #8
 8012a30:	697a      	ldr	r2, [r7, #20]
 8012a32:	4313      	orrs	r3, r2
 8012a34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	697a      	ldr	r2, [r7, #20]
 8012a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68fa      	ldr	r2, [r7, #12]
 8012a40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	693a      	ldr	r2, [r7, #16]
 8012a4e:	621a      	str	r2, [r3, #32]
}
 8012a50:	bf00      	nop
 8012a52:	371c      	adds	r7, #28
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr
 8012a5c:	fffeff8f 	.word	0xfffeff8f
 8012a60:	40010000 	.word	0x40010000
 8012a64:	40010400 	.word	0x40010400
 8012a68:	40014000 	.word	0x40014000
 8012a6c:	40014400 	.word	0x40014400
 8012a70:	40014800 	.word	0x40014800

08012a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b087      	sub	sp, #28
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6a1b      	ldr	r3, [r3, #32]
 8012a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	4b22      	ldr	r3, [pc, #136]	; (8012b28 <TIM_OC6_SetConfig+0xb4>)
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	021b      	lsls	r3, r3, #8
 8012aaa:	68fa      	ldr	r2, [r7, #12]
 8012aac:	4313      	orrs	r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	051b      	lsls	r3, r3, #20
 8012abe:	693a      	ldr	r2, [r7, #16]
 8012ac0:	4313      	orrs	r3, r2
 8012ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4a19      	ldr	r2, [pc, #100]	; (8012b2c <TIM_OC6_SetConfig+0xb8>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d00f      	beq.n	8012aec <TIM_OC6_SetConfig+0x78>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4a18      	ldr	r2, [pc, #96]	; (8012b30 <TIM_OC6_SetConfig+0xbc>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d00b      	beq.n	8012aec <TIM_OC6_SetConfig+0x78>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a17      	ldr	r2, [pc, #92]	; (8012b34 <TIM_OC6_SetConfig+0xc0>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d007      	beq.n	8012aec <TIM_OC6_SetConfig+0x78>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4a16      	ldr	r2, [pc, #88]	; (8012b38 <TIM_OC6_SetConfig+0xc4>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d003      	beq.n	8012aec <TIM_OC6_SetConfig+0x78>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4a15      	ldr	r2, [pc, #84]	; (8012b3c <TIM_OC6_SetConfig+0xc8>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d109      	bne.n	8012b00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	695b      	ldr	r3, [r3, #20]
 8012af8:	029b      	lsls	r3, r3, #10
 8012afa:	697a      	ldr	r2, [r7, #20]
 8012afc:	4313      	orrs	r3, r2
 8012afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	693a      	ldr	r2, [r7, #16]
 8012b18:	621a      	str	r2, [r3, #32]
}
 8012b1a:	bf00      	nop
 8012b1c:	371c      	adds	r7, #28
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr
 8012b26:	bf00      	nop
 8012b28:	feff8fff 	.word	0xfeff8fff
 8012b2c:	40010000 	.word	0x40010000
 8012b30:	40010400 	.word	0x40010400
 8012b34:	40014000 	.word	0x40014000
 8012b38:	40014400 	.word	0x40014400
 8012b3c:	40014800 	.word	0x40014800

08012b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b087      	sub	sp, #28
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	6a1b      	ldr	r3, [r3, #32]
 8012b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	6a1b      	ldr	r3, [r3, #32]
 8012b56:	f023 0201 	bic.w	r2, r3, #1
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	699b      	ldr	r3, [r3, #24]
 8012b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	011b      	lsls	r3, r3, #4
 8012b70:	693a      	ldr	r2, [r7, #16]
 8012b72:	4313      	orrs	r3, r2
 8012b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	f023 030a 	bic.w	r3, r3, #10
 8012b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012b7e:	697a      	ldr	r2, [r7, #20]
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	4313      	orrs	r3, r2
 8012b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	693a      	ldr	r2, [r7, #16]
 8012b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	697a      	ldr	r2, [r7, #20]
 8012b90:	621a      	str	r2, [r3, #32]
}
 8012b92:	bf00      	nop
 8012b94:	371c      	adds	r7, #28
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012b9e:	b480      	push	{r7}
 8012ba0:	b087      	sub	sp, #28
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	60f8      	str	r0, [r7, #12]
 8012ba6:	60b9      	str	r1, [r7, #8]
 8012ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	6a1b      	ldr	r3, [r3, #32]
 8012bae:	f023 0210 	bic.w	r2, r3, #16
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	699b      	ldr	r3, [r3, #24]
 8012bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6a1b      	ldr	r3, [r3, #32]
 8012bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	031b      	lsls	r3, r3, #12
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	011b      	lsls	r3, r3, #4
 8012be0:	693a      	ldr	r2, [r7, #16]
 8012be2:	4313      	orrs	r3, r2
 8012be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	697a      	ldr	r2, [r7, #20]
 8012bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	693a      	ldr	r2, [r7, #16]
 8012bf0:	621a      	str	r2, [r3, #32]
}
 8012bf2:	bf00      	nop
 8012bf4:	371c      	adds	r7, #28
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
	...

08012c00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	689b      	ldr	r3, [r3, #8]
 8012c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	4b09      	ldr	r3, [pc, #36]	; (8012c38 <TIM_ITRx_SetConfig+0x38>)
 8012c14:	4013      	ands	r3, r2
 8012c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012c18:	683a      	ldr	r2, [r7, #0]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	f043 0307 	orr.w	r3, r3, #7
 8012c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	68fa      	ldr	r2, [r7, #12]
 8012c28:	609a      	str	r2, [r3, #8]
}
 8012c2a:	bf00      	nop
 8012c2c:	3714      	adds	r7, #20
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	ffcfff8f 	.word	0xffcfff8f

08012c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b087      	sub	sp, #28
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
 8012c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	021a      	lsls	r2, r3, #8
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	431a      	orrs	r2, r3
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	4313      	orrs	r3, r2
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	4313      	orrs	r3, r2
 8012c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	697a      	ldr	r2, [r7, #20]
 8012c6e:	609a      	str	r2, [r3, #8]
}
 8012c70:	bf00      	nop
 8012c72:	371c      	adds	r7, #28
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d101      	bne.n	8012c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c90:	2302      	movs	r3, #2
 8012c92:	e06d      	b.n	8012d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2201      	movs	r2, #1
 8012c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2202      	movs	r2, #2
 8012ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	689b      	ldr	r3, [r3, #8]
 8012cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	4a30      	ldr	r2, [pc, #192]	; (8012d7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d004      	beq.n	8012cc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	4a2f      	ldr	r2, [pc, #188]	; (8012d80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d108      	bne.n	8012cda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012cce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	68fa      	ldr	r2, [r7, #12]
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ce0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	68fa      	ldr	r2, [r7, #12]
 8012cf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4a20      	ldr	r2, [pc, #128]	; (8012d7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d022      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d06:	d01d      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a1d      	ldr	r2, [pc, #116]	; (8012d84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d018      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a1c      	ldr	r2, [pc, #112]	; (8012d88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d013      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4a1a      	ldr	r2, [pc, #104]	; (8012d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d00e      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	4a15      	ldr	r2, [pc, #84]	; (8012d80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d009      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4a16      	ldr	r2, [pc, #88]	; (8012d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012d36:	4293      	cmp	r3, r2
 8012d38:	d004      	beq.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4a15      	ldr	r2, [pc, #84]	; (8012d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d10c      	bne.n	8012d5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	4313      	orrs	r3, r2
 8012d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	68ba      	ldr	r2, [r7, #8]
 8012d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2201      	movs	r2, #1
 8012d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3714      	adds	r7, #20
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr
 8012d7c:	40010000 	.word	0x40010000
 8012d80:	40010400 	.word	0x40010400
 8012d84:	40000400 	.word	0x40000400
 8012d88:	40000800 	.word	0x40000800
 8012d8c:	40000c00 	.word	0x40000c00
 8012d90:	40001800 	.word	0x40001800
 8012d94:	40014000 	.word	0x40014000

08012d98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b085      	sub	sp, #20
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012da2:	2300      	movs	r3, #0
 8012da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d101      	bne.n	8012db4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012db0:	2302      	movs	r3, #2
 8012db2:	e065      	b.n	8012e80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2201      	movs	r2, #1
 8012db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	4313      	orrs	r3, r2
 8012dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	4313      	orrs	r3, r2
 8012de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	4313      	orrs	r3, r2
 8012df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	4313      	orrs	r3, r2
 8012e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	695b      	ldr	r3, [r3, #20]
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	699b      	ldr	r3, [r3, #24]
 8012e28:	041b      	lsls	r3, r3, #16
 8012e2a:	4313      	orrs	r3, r2
 8012e2c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a16      	ldr	r2, [pc, #88]	; (8012e8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d004      	beq.n	8012e42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a14      	ldr	r2, [pc, #80]	; (8012e90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d115      	bne.n	8012e6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4c:	051b      	lsls	r3, r3, #20
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	69db      	ldr	r3, [r3, #28]
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	6a1b      	ldr	r3, [r3, #32]
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3714      	adds	r7, #20
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr
 8012e8c:	40010000 	.word	0x40010000
 8012e90:	40010400 	.word	0x40010400

08012e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d101      	bne.n	8012ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e042      	b.n	8012f2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d106      	bne.n	8012ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7f1 fb93 	bl	80045e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2224      	movs	r2, #36	; 0x24
 8012ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f022 0201 	bic.w	r2, r2, #1
 8012ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f000 f82c 	bl	8012f34 <UART_SetConfig>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d101      	bne.n	8012ee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	e022      	b.n	8012f2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d002      	beq.n	8012ef4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 fd88 	bl	8013a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	685a      	ldr	r2, [r3, #4]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	689a      	ldr	r2, [r3, #8]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f042 0201 	orr.w	r2, r2, #1
 8012f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 fe0f 	bl	8013b48 <UART_CheckIdleState>
 8012f2a:	4603      	mov	r3, r0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012f38:	b092      	sub	sp, #72	; 0x48
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	689a      	ldr	r2, [r3, #8]
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	431a      	orrs	r2, r3
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	695b      	ldr	r3, [r3, #20]
 8012f52:	431a      	orrs	r2, r3
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	69db      	ldr	r3, [r3, #28]
 8012f58:	4313      	orrs	r3, r2
 8012f5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	4bbe      	ldr	r3, [pc, #760]	; (801325c <UART_SetConfig+0x328>)
 8012f64:	4013      	ands	r3, r2
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	6812      	ldr	r2, [r2, #0]
 8012f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f6c:	430b      	orrs	r3, r1
 8012f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	68da      	ldr	r2, [r3, #12]
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	430a      	orrs	r2, r1
 8012f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	699b      	ldr	r3, [r3, #24]
 8012f8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4ab3      	ldr	r2, [pc, #716]	; (8013260 <UART_SetConfig+0x32c>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d004      	beq.n	8012fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	689a      	ldr	r2, [r3, #8]
 8012fa6:	4baf      	ldr	r3, [pc, #700]	; (8013264 <UART_SetConfig+0x330>)
 8012fa8:	4013      	ands	r3, r2
 8012faa:	697a      	ldr	r2, [r7, #20]
 8012fac:	6812      	ldr	r2, [r2, #0]
 8012fae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012fb0:	430b      	orrs	r3, r1
 8012fb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fba:	f023 010f 	bic.w	r1, r3, #15
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	430a      	orrs	r2, r1
 8012fc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4aa6      	ldr	r2, [pc, #664]	; (8013268 <UART_SetConfig+0x334>)
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	d177      	bne.n	80130c4 <UART_SetConfig+0x190>
 8012fd4:	4ba5      	ldr	r3, [pc, #660]	; (801326c <UART_SetConfig+0x338>)
 8012fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012fdc:	2b28      	cmp	r3, #40	; 0x28
 8012fde:	d86d      	bhi.n	80130bc <UART_SetConfig+0x188>
 8012fe0:	a201      	add	r2, pc, #4	; (adr r2, 8012fe8 <UART_SetConfig+0xb4>)
 8012fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe6:	bf00      	nop
 8012fe8:	0801308d 	.word	0x0801308d
 8012fec:	080130bd 	.word	0x080130bd
 8012ff0:	080130bd 	.word	0x080130bd
 8012ff4:	080130bd 	.word	0x080130bd
 8012ff8:	080130bd 	.word	0x080130bd
 8012ffc:	080130bd 	.word	0x080130bd
 8013000:	080130bd 	.word	0x080130bd
 8013004:	080130bd 	.word	0x080130bd
 8013008:	08013095 	.word	0x08013095
 801300c:	080130bd 	.word	0x080130bd
 8013010:	080130bd 	.word	0x080130bd
 8013014:	080130bd 	.word	0x080130bd
 8013018:	080130bd 	.word	0x080130bd
 801301c:	080130bd 	.word	0x080130bd
 8013020:	080130bd 	.word	0x080130bd
 8013024:	080130bd 	.word	0x080130bd
 8013028:	0801309d 	.word	0x0801309d
 801302c:	080130bd 	.word	0x080130bd
 8013030:	080130bd 	.word	0x080130bd
 8013034:	080130bd 	.word	0x080130bd
 8013038:	080130bd 	.word	0x080130bd
 801303c:	080130bd 	.word	0x080130bd
 8013040:	080130bd 	.word	0x080130bd
 8013044:	080130bd 	.word	0x080130bd
 8013048:	080130a5 	.word	0x080130a5
 801304c:	080130bd 	.word	0x080130bd
 8013050:	080130bd 	.word	0x080130bd
 8013054:	080130bd 	.word	0x080130bd
 8013058:	080130bd 	.word	0x080130bd
 801305c:	080130bd 	.word	0x080130bd
 8013060:	080130bd 	.word	0x080130bd
 8013064:	080130bd 	.word	0x080130bd
 8013068:	080130ad 	.word	0x080130ad
 801306c:	080130bd 	.word	0x080130bd
 8013070:	080130bd 	.word	0x080130bd
 8013074:	080130bd 	.word	0x080130bd
 8013078:	080130bd 	.word	0x080130bd
 801307c:	080130bd 	.word	0x080130bd
 8013080:	080130bd 	.word	0x080130bd
 8013084:	080130bd 	.word	0x080130bd
 8013088:	080130b5 	.word	0x080130b5
 801308c:	2301      	movs	r3, #1
 801308e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013092:	e222      	b.n	80134da <UART_SetConfig+0x5a6>
 8013094:	2304      	movs	r3, #4
 8013096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801309a:	e21e      	b.n	80134da <UART_SetConfig+0x5a6>
 801309c:	2308      	movs	r3, #8
 801309e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130a2:	e21a      	b.n	80134da <UART_SetConfig+0x5a6>
 80130a4:	2310      	movs	r3, #16
 80130a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130aa:	e216      	b.n	80134da <UART_SetConfig+0x5a6>
 80130ac:	2320      	movs	r3, #32
 80130ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130b2:	e212      	b.n	80134da <UART_SetConfig+0x5a6>
 80130b4:	2340      	movs	r3, #64	; 0x40
 80130b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ba:	e20e      	b.n	80134da <UART_SetConfig+0x5a6>
 80130bc:	2380      	movs	r3, #128	; 0x80
 80130be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130c2:	e20a      	b.n	80134da <UART_SetConfig+0x5a6>
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4a69      	ldr	r2, [pc, #420]	; (8013270 <UART_SetConfig+0x33c>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d130      	bne.n	8013130 <UART_SetConfig+0x1fc>
 80130ce:	4b67      	ldr	r3, [pc, #412]	; (801326c <UART_SetConfig+0x338>)
 80130d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130d2:	f003 0307 	and.w	r3, r3, #7
 80130d6:	2b05      	cmp	r3, #5
 80130d8:	d826      	bhi.n	8013128 <UART_SetConfig+0x1f4>
 80130da:	a201      	add	r2, pc, #4	; (adr r2, 80130e0 <UART_SetConfig+0x1ac>)
 80130dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130e0:	080130f9 	.word	0x080130f9
 80130e4:	08013101 	.word	0x08013101
 80130e8:	08013109 	.word	0x08013109
 80130ec:	08013111 	.word	0x08013111
 80130f0:	08013119 	.word	0x08013119
 80130f4:	08013121 	.word	0x08013121
 80130f8:	2300      	movs	r3, #0
 80130fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130fe:	e1ec      	b.n	80134da <UART_SetConfig+0x5a6>
 8013100:	2304      	movs	r3, #4
 8013102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013106:	e1e8      	b.n	80134da <UART_SetConfig+0x5a6>
 8013108:	2308      	movs	r3, #8
 801310a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310e:	e1e4      	b.n	80134da <UART_SetConfig+0x5a6>
 8013110:	2310      	movs	r3, #16
 8013112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013116:	e1e0      	b.n	80134da <UART_SetConfig+0x5a6>
 8013118:	2320      	movs	r3, #32
 801311a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311e:	e1dc      	b.n	80134da <UART_SetConfig+0x5a6>
 8013120:	2340      	movs	r3, #64	; 0x40
 8013122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013126:	e1d8      	b.n	80134da <UART_SetConfig+0x5a6>
 8013128:	2380      	movs	r3, #128	; 0x80
 801312a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312e:	e1d4      	b.n	80134da <UART_SetConfig+0x5a6>
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a4f      	ldr	r2, [pc, #316]	; (8013274 <UART_SetConfig+0x340>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d130      	bne.n	801319c <UART_SetConfig+0x268>
 801313a:	4b4c      	ldr	r3, [pc, #304]	; (801326c <UART_SetConfig+0x338>)
 801313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801313e:	f003 0307 	and.w	r3, r3, #7
 8013142:	2b05      	cmp	r3, #5
 8013144:	d826      	bhi.n	8013194 <UART_SetConfig+0x260>
 8013146:	a201      	add	r2, pc, #4	; (adr r2, 801314c <UART_SetConfig+0x218>)
 8013148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801314c:	08013165 	.word	0x08013165
 8013150:	0801316d 	.word	0x0801316d
 8013154:	08013175 	.word	0x08013175
 8013158:	0801317d 	.word	0x0801317d
 801315c:	08013185 	.word	0x08013185
 8013160:	0801318d 	.word	0x0801318d
 8013164:	2300      	movs	r3, #0
 8013166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801316a:	e1b6      	b.n	80134da <UART_SetConfig+0x5a6>
 801316c:	2304      	movs	r3, #4
 801316e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013172:	e1b2      	b.n	80134da <UART_SetConfig+0x5a6>
 8013174:	2308      	movs	r3, #8
 8013176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317a:	e1ae      	b.n	80134da <UART_SetConfig+0x5a6>
 801317c:	2310      	movs	r3, #16
 801317e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013182:	e1aa      	b.n	80134da <UART_SetConfig+0x5a6>
 8013184:	2320      	movs	r3, #32
 8013186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318a:	e1a6      	b.n	80134da <UART_SetConfig+0x5a6>
 801318c:	2340      	movs	r3, #64	; 0x40
 801318e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013192:	e1a2      	b.n	80134da <UART_SetConfig+0x5a6>
 8013194:	2380      	movs	r3, #128	; 0x80
 8013196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319a:	e19e      	b.n	80134da <UART_SetConfig+0x5a6>
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4a35      	ldr	r2, [pc, #212]	; (8013278 <UART_SetConfig+0x344>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d130      	bne.n	8013208 <UART_SetConfig+0x2d4>
 80131a6:	4b31      	ldr	r3, [pc, #196]	; (801326c <UART_SetConfig+0x338>)
 80131a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131aa:	f003 0307 	and.w	r3, r3, #7
 80131ae:	2b05      	cmp	r3, #5
 80131b0:	d826      	bhi.n	8013200 <UART_SetConfig+0x2cc>
 80131b2:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <UART_SetConfig+0x284>)
 80131b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b8:	080131d1 	.word	0x080131d1
 80131bc:	080131d9 	.word	0x080131d9
 80131c0:	080131e1 	.word	0x080131e1
 80131c4:	080131e9 	.word	0x080131e9
 80131c8:	080131f1 	.word	0x080131f1
 80131cc:	080131f9 	.word	0x080131f9
 80131d0:	2300      	movs	r3, #0
 80131d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131d6:	e180      	b.n	80134da <UART_SetConfig+0x5a6>
 80131d8:	2304      	movs	r3, #4
 80131da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131de:	e17c      	b.n	80134da <UART_SetConfig+0x5a6>
 80131e0:	2308      	movs	r3, #8
 80131e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e6:	e178      	b.n	80134da <UART_SetConfig+0x5a6>
 80131e8:	2310      	movs	r3, #16
 80131ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ee:	e174      	b.n	80134da <UART_SetConfig+0x5a6>
 80131f0:	2320      	movs	r3, #32
 80131f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f6:	e170      	b.n	80134da <UART_SetConfig+0x5a6>
 80131f8:	2340      	movs	r3, #64	; 0x40
 80131fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fe:	e16c      	b.n	80134da <UART_SetConfig+0x5a6>
 8013200:	2380      	movs	r3, #128	; 0x80
 8013202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013206:	e168      	b.n	80134da <UART_SetConfig+0x5a6>
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4a1b      	ldr	r2, [pc, #108]	; (801327c <UART_SetConfig+0x348>)
 801320e:	4293      	cmp	r3, r2
 8013210:	d142      	bne.n	8013298 <UART_SetConfig+0x364>
 8013212:	4b16      	ldr	r3, [pc, #88]	; (801326c <UART_SetConfig+0x338>)
 8013214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013216:	f003 0307 	and.w	r3, r3, #7
 801321a:	2b05      	cmp	r3, #5
 801321c:	d838      	bhi.n	8013290 <UART_SetConfig+0x35c>
 801321e:	a201      	add	r2, pc, #4	; (adr r2, 8013224 <UART_SetConfig+0x2f0>)
 8013220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013224:	0801323d 	.word	0x0801323d
 8013228:	08013245 	.word	0x08013245
 801322c:	0801324d 	.word	0x0801324d
 8013230:	08013255 	.word	0x08013255
 8013234:	08013281 	.word	0x08013281
 8013238:	08013289 	.word	0x08013289
 801323c:	2300      	movs	r3, #0
 801323e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013242:	e14a      	b.n	80134da <UART_SetConfig+0x5a6>
 8013244:	2304      	movs	r3, #4
 8013246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324a:	e146      	b.n	80134da <UART_SetConfig+0x5a6>
 801324c:	2308      	movs	r3, #8
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013252:	e142      	b.n	80134da <UART_SetConfig+0x5a6>
 8013254:	2310      	movs	r3, #16
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325a:	e13e      	b.n	80134da <UART_SetConfig+0x5a6>
 801325c:	cfff69f3 	.word	0xcfff69f3
 8013260:	58000c00 	.word	0x58000c00
 8013264:	11fff4ff 	.word	0x11fff4ff
 8013268:	40011000 	.word	0x40011000
 801326c:	58024400 	.word	0x58024400
 8013270:	40004400 	.word	0x40004400
 8013274:	40004800 	.word	0x40004800
 8013278:	40004c00 	.word	0x40004c00
 801327c:	40005000 	.word	0x40005000
 8013280:	2320      	movs	r3, #32
 8013282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013286:	e128      	b.n	80134da <UART_SetConfig+0x5a6>
 8013288:	2340      	movs	r3, #64	; 0x40
 801328a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801328e:	e124      	b.n	80134da <UART_SetConfig+0x5a6>
 8013290:	2380      	movs	r3, #128	; 0x80
 8013292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013296:	e120      	b.n	80134da <UART_SetConfig+0x5a6>
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4acb      	ldr	r2, [pc, #812]	; (80135cc <UART_SetConfig+0x698>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d176      	bne.n	8013390 <UART_SetConfig+0x45c>
 80132a2:	4bcb      	ldr	r3, [pc, #812]	; (80135d0 <UART_SetConfig+0x69c>)
 80132a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80132aa:	2b28      	cmp	r3, #40	; 0x28
 80132ac:	d86c      	bhi.n	8013388 <UART_SetConfig+0x454>
 80132ae:	a201      	add	r2, pc, #4	; (adr r2, 80132b4 <UART_SetConfig+0x380>)
 80132b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b4:	08013359 	.word	0x08013359
 80132b8:	08013389 	.word	0x08013389
 80132bc:	08013389 	.word	0x08013389
 80132c0:	08013389 	.word	0x08013389
 80132c4:	08013389 	.word	0x08013389
 80132c8:	08013389 	.word	0x08013389
 80132cc:	08013389 	.word	0x08013389
 80132d0:	08013389 	.word	0x08013389
 80132d4:	08013361 	.word	0x08013361
 80132d8:	08013389 	.word	0x08013389
 80132dc:	08013389 	.word	0x08013389
 80132e0:	08013389 	.word	0x08013389
 80132e4:	08013389 	.word	0x08013389
 80132e8:	08013389 	.word	0x08013389
 80132ec:	08013389 	.word	0x08013389
 80132f0:	08013389 	.word	0x08013389
 80132f4:	08013369 	.word	0x08013369
 80132f8:	08013389 	.word	0x08013389
 80132fc:	08013389 	.word	0x08013389
 8013300:	08013389 	.word	0x08013389
 8013304:	08013389 	.word	0x08013389
 8013308:	08013389 	.word	0x08013389
 801330c:	08013389 	.word	0x08013389
 8013310:	08013389 	.word	0x08013389
 8013314:	08013371 	.word	0x08013371
 8013318:	08013389 	.word	0x08013389
 801331c:	08013389 	.word	0x08013389
 8013320:	08013389 	.word	0x08013389
 8013324:	08013389 	.word	0x08013389
 8013328:	08013389 	.word	0x08013389
 801332c:	08013389 	.word	0x08013389
 8013330:	08013389 	.word	0x08013389
 8013334:	08013379 	.word	0x08013379
 8013338:	08013389 	.word	0x08013389
 801333c:	08013389 	.word	0x08013389
 8013340:	08013389 	.word	0x08013389
 8013344:	08013389 	.word	0x08013389
 8013348:	08013389 	.word	0x08013389
 801334c:	08013389 	.word	0x08013389
 8013350:	08013389 	.word	0x08013389
 8013354:	08013381 	.word	0x08013381
 8013358:	2301      	movs	r3, #1
 801335a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801335e:	e0bc      	b.n	80134da <UART_SetConfig+0x5a6>
 8013360:	2304      	movs	r3, #4
 8013362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013366:	e0b8      	b.n	80134da <UART_SetConfig+0x5a6>
 8013368:	2308      	movs	r3, #8
 801336a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801336e:	e0b4      	b.n	80134da <UART_SetConfig+0x5a6>
 8013370:	2310      	movs	r3, #16
 8013372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013376:	e0b0      	b.n	80134da <UART_SetConfig+0x5a6>
 8013378:	2320      	movs	r3, #32
 801337a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801337e:	e0ac      	b.n	80134da <UART_SetConfig+0x5a6>
 8013380:	2340      	movs	r3, #64	; 0x40
 8013382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013386:	e0a8      	b.n	80134da <UART_SetConfig+0x5a6>
 8013388:	2380      	movs	r3, #128	; 0x80
 801338a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801338e:	e0a4      	b.n	80134da <UART_SetConfig+0x5a6>
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4a8f      	ldr	r2, [pc, #572]	; (80135d4 <UART_SetConfig+0x6a0>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d130      	bne.n	80133fc <UART_SetConfig+0x4c8>
 801339a:	4b8d      	ldr	r3, [pc, #564]	; (80135d0 <UART_SetConfig+0x69c>)
 801339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801339e:	f003 0307 	and.w	r3, r3, #7
 80133a2:	2b05      	cmp	r3, #5
 80133a4:	d826      	bhi.n	80133f4 <UART_SetConfig+0x4c0>
 80133a6:	a201      	add	r2, pc, #4	; (adr r2, 80133ac <UART_SetConfig+0x478>)
 80133a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ac:	080133c5 	.word	0x080133c5
 80133b0:	080133cd 	.word	0x080133cd
 80133b4:	080133d5 	.word	0x080133d5
 80133b8:	080133dd 	.word	0x080133dd
 80133bc:	080133e5 	.word	0x080133e5
 80133c0:	080133ed 	.word	0x080133ed
 80133c4:	2300      	movs	r3, #0
 80133c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ca:	e086      	b.n	80134da <UART_SetConfig+0x5a6>
 80133cc:	2304      	movs	r3, #4
 80133ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133d2:	e082      	b.n	80134da <UART_SetConfig+0x5a6>
 80133d4:	2308      	movs	r3, #8
 80133d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133da:	e07e      	b.n	80134da <UART_SetConfig+0x5a6>
 80133dc:	2310      	movs	r3, #16
 80133de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133e2:	e07a      	b.n	80134da <UART_SetConfig+0x5a6>
 80133e4:	2320      	movs	r3, #32
 80133e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ea:	e076      	b.n	80134da <UART_SetConfig+0x5a6>
 80133ec:	2340      	movs	r3, #64	; 0x40
 80133ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133f2:	e072      	b.n	80134da <UART_SetConfig+0x5a6>
 80133f4:	2380      	movs	r3, #128	; 0x80
 80133f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133fa:	e06e      	b.n	80134da <UART_SetConfig+0x5a6>
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4a75      	ldr	r2, [pc, #468]	; (80135d8 <UART_SetConfig+0x6a4>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d130      	bne.n	8013468 <UART_SetConfig+0x534>
 8013406:	4b72      	ldr	r3, [pc, #456]	; (80135d0 <UART_SetConfig+0x69c>)
 8013408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801340a:	f003 0307 	and.w	r3, r3, #7
 801340e:	2b05      	cmp	r3, #5
 8013410:	d826      	bhi.n	8013460 <UART_SetConfig+0x52c>
 8013412:	a201      	add	r2, pc, #4	; (adr r2, 8013418 <UART_SetConfig+0x4e4>)
 8013414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013418:	08013431 	.word	0x08013431
 801341c:	08013439 	.word	0x08013439
 8013420:	08013441 	.word	0x08013441
 8013424:	08013449 	.word	0x08013449
 8013428:	08013451 	.word	0x08013451
 801342c:	08013459 	.word	0x08013459
 8013430:	2300      	movs	r3, #0
 8013432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013436:	e050      	b.n	80134da <UART_SetConfig+0x5a6>
 8013438:	2304      	movs	r3, #4
 801343a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801343e:	e04c      	b.n	80134da <UART_SetConfig+0x5a6>
 8013440:	2308      	movs	r3, #8
 8013442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013446:	e048      	b.n	80134da <UART_SetConfig+0x5a6>
 8013448:	2310      	movs	r3, #16
 801344a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801344e:	e044      	b.n	80134da <UART_SetConfig+0x5a6>
 8013450:	2320      	movs	r3, #32
 8013452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013456:	e040      	b.n	80134da <UART_SetConfig+0x5a6>
 8013458:	2340      	movs	r3, #64	; 0x40
 801345a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801345e:	e03c      	b.n	80134da <UART_SetConfig+0x5a6>
 8013460:	2380      	movs	r3, #128	; 0x80
 8013462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013466:	e038      	b.n	80134da <UART_SetConfig+0x5a6>
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4a5b      	ldr	r2, [pc, #364]	; (80135dc <UART_SetConfig+0x6a8>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d130      	bne.n	80134d4 <UART_SetConfig+0x5a0>
 8013472:	4b57      	ldr	r3, [pc, #348]	; (80135d0 <UART_SetConfig+0x69c>)
 8013474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013476:	f003 0307 	and.w	r3, r3, #7
 801347a:	2b05      	cmp	r3, #5
 801347c:	d826      	bhi.n	80134cc <UART_SetConfig+0x598>
 801347e:	a201      	add	r2, pc, #4	; (adr r2, 8013484 <UART_SetConfig+0x550>)
 8013480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013484:	0801349d 	.word	0x0801349d
 8013488:	080134a5 	.word	0x080134a5
 801348c:	080134ad 	.word	0x080134ad
 8013490:	080134b5 	.word	0x080134b5
 8013494:	080134bd 	.word	0x080134bd
 8013498:	080134c5 	.word	0x080134c5
 801349c:	2302      	movs	r3, #2
 801349e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134a2:	e01a      	b.n	80134da <UART_SetConfig+0x5a6>
 80134a4:	2304      	movs	r3, #4
 80134a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134aa:	e016      	b.n	80134da <UART_SetConfig+0x5a6>
 80134ac:	2308      	movs	r3, #8
 80134ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134b2:	e012      	b.n	80134da <UART_SetConfig+0x5a6>
 80134b4:	2310      	movs	r3, #16
 80134b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ba:	e00e      	b.n	80134da <UART_SetConfig+0x5a6>
 80134bc:	2320      	movs	r3, #32
 80134be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134c2:	e00a      	b.n	80134da <UART_SetConfig+0x5a6>
 80134c4:	2340      	movs	r3, #64	; 0x40
 80134c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ca:	e006      	b.n	80134da <UART_SetConfig+0x5a6>
 80134cc:	2380      	movs	r3, #128	; 0x80
 80134ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134d2:	e002      	b.n	80134da <UART_SetConfig+0x5a6>
 80134d4:	2380      	movs	r3, #128	; 0x80
 80134d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4a3f      	ldr	r2, [pc, #252]	; (80135dc <UART_SetConfig+0x6a8>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	f040 80f8 	bne.w	80136d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80134e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134ea:	2b20      	cmp	r3, #32
 80134ec:	dc46      	bgt.n	801357c <UART_SetConfig+0x648>
 80134ee:	2b02      	cmp	r3, #2
 80134f0:	f2c0 8082 	blt.w	80135f8 <UART_SetConfig+0x6c4>
 80134f4:	3b02      	subs	r3, #2
 80134f6:	2b1e      	cmp	r3, #30
 80134f8:	d87e      	bhi.n	80135f8 <UART_SetConfig+0x6c4>
 80134fa:	a201      	add	r2, pc, #4	; (adr r2, 8013500 <UART_SetConfig+0x5cc>)
 80134fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013500:	08013583 	.word	0x08013583
 8013504:	080135f9 	.word	0x080135f9
 8013508:	0801358b 	.word	0x0801358b
 801350c:	080135f9 	.word	0x080135f9
 8013510:	080135f9 	.word	0x080135f9
 8013514:	080135f9 	.word	0x080135f9
 8013518:	0801359b 	.word	0x0801359b
 801351c:	080135f9 	.word	0x080135f9
 8013520:	080135f9 	.word	0x080135f9
 8013524:	080135f9 	.word	0x080135f9
 8013528:	080135f9 	.word	0x080135f9
 801352c:	080135f9 	.word	0x080135f9
 8013530:	080135f9 	.word	0x080135f9
 8013534:	080135f9 	.word	0x080135f9
 8013538:	080135ab 	.word	0x080135ab
 801353c:	080135f9 	.word	0x080135f9
 8013540:	080135f9 	.word	0x080135f9
 8013544:	080135f9 	.word	0x080135f9
 8013548:	080135f9 	.word	0x080135f9
 801354c:	080135f9 	.word	0x080135f9
 8013550:	080135f9 	.word	0x080135f9
 8013554:	080135f9 	.word	0x080135f9
 8013558:	080135f9 	.word	0x080135f9
 801355c:	080135f9 	.word	0x080135f9
 8013560:	080135f9 	.word	0x080135f9
 8013564:	080135f9 	.word	0x080135f9
 8013568:	080135f9 	.word	0x080135f9
 801356c:	080135f9 	.word	0x080135f9
 8013570:	080135f9 	.word	0x080135f9
 8013574:	080135f9 	.word	0x080135f9
 8013578:	080135eb 	.word	0x080135eb
 801357c:	2b40      	cmp	r3, #64	; 0x40
 801357e:	d037      	beq.n	80135f0 <UART_SetConfig+0x6bc>
 8013580:	e03a      	b.n	80135f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013582:	f7fb fa85 	bl	800ea90 <HAL_RCCEx_GetD3PCLK1Freq>
 8013586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013588:	e03c      	b.n	8013604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801358a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801358e:	4618      	mov	r0, r3
 8013590:	f7fb fa94 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013598:	e034      	b.n	8013604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801359a:	f107 0318 	add.w	r3, r7, #24
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fb fbe0 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80135a4:	69fb      	ldr	r3, [r7, #28]
 80135a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135a8:	e02c      	b.n	8013604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135aa:	4b09      	ldr	r3, [pc, #36]	; (80135d0 <UART_SetConfig+0x69c>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f003 0320 	and.w	r3, r3, #32
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d016      	beq.n	80135e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80135b6:	4b06      	ldr	r3, [pc, #24]	; (80135d0 <UART_SetConfig+0x69c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	08db      	lsrs	r3, r3, #3
 80135bc:	f003 0303 	and.w	r3, r3, #3
 80135c0:	4a07      	ldr	r2, [pc, #28]	; (80135e0 <UART_SetConfig+0x6ac>)
 80135c2:	fa22 f303 	lsr.w	r3, r2, r3
 80135c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80135c8:	e01c      	b.n	8013604 <UART_SetConfig+0x6d0>
 80135ca:	bf00      	nop
 80135cc:	40011400 	.word	0x40011400
 80135d0:	58024400 	.word	0x58024400
 80135d4:	40007800 	.word	0x40007800
 80135d8:	40007c00 	.word	0x40007c00
 80135dc:	58000c00 	.word	0x58000c00
 80135e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80135e4:	4b9d      	ldr	r3, [pc, #628]	; (801385c <UART_SetConfig+0x928>)
 80135e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135e8:	e00c      	b.n	8013604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80135ea:	4b9d      	ldr	r3, [pc, #628]	; (8013860 <UART_SetConfig+0x92c>)
 80135ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135ee:	e009      	b.n	8013604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80135f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135f6:	e005      	b.n	8013604 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80135f8:	2300      	movs	r3, #0
 80135fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80135fc:	2301      	movs	r3, #1
 80135fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013602:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013606:	2b00      	cmp	r3, #0
 8013608:	f000 81de 	beq.w	80139c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013610:	4a94      	ldr	r2, [pc, #592]	; (8013864 <UART_SetConfig+0x930>)
 8013612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013616:	461a      	mov	r2, r3
 8013618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801361a:	fbb3 f3f2 	udiv	r3, r3, r2
 801361e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	685a      	ldr	r2, [r3, #4]
 8013624:	4613      	mov	r3, r2
 8013626:	005b      	lsls	r3, r3, #1
 8013628:	4413      	add	r3, r2
 801362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801362c:	429a      	cmp	r2, r3
 801362e:	d305      	bcc.n	801363c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013638:	429a      	cmp	r2, r3
 801363a:	d903      	bls.n	8013644 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801363c:	2301      	movs	r3, #1
 801363e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013642:	e1c1      	b.n	80139c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013646:	2200      	movs	r2, #0
 8013648:	60bb      	str	r3, [r7, #8]
 801364a:	60fa      	str	r2, [r7, #12]
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013650:	4a84      	ldr	r2, [pc, #528]	; (8013864 <UART_SetConfig+0x930>)
 8013652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013656:	b29b      	uxth	r3, r3
 8013658:	2200      	movs	r2, #0
 801365a:	603b      	str	r3, [r7, #0]
 801365c:	607a      	str	r2, [r7, #4]
 801365e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013666:	f7ec fe37 	bl	80002d8 <__aeabi_uldivmod>
 801366a:	4602      	mov	r2, r0
 801366c:	460b      	mov	r3, r1
 801366e:	4610      	mov	r0, r2
 8013670:	4619      	mov	r1, r3
 8013672:	f04f 0200 	mov.w	r2, #0
 8013676:	f04f 0300 	mov.w	r3, #0
 801367a:	020b      	lsls	r3, r1, #8
 801367c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013680:	0202      	lsls	r2, r0, #8
 8013682:	6979      	ldr	r1, [r7, #20]
 8013684:	6849      	ldr	r1, [r1, #4]
 8013686:	0849      	lsrs	r1, r1, #1
 8013688:	2000      	movs	r0, #0
 801368a:	460c      	mov	r4, r1
 801368c:	4605      	mov	r5, r0
 801368e:	eb12 0804 	adds.w	r8, r2, r4
 8013692:	eb43 0905 	adc.w	r9, r3, r5
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	469a      	mov	sl, r3
 801369e:	4693      	mov	fp, r2
 80136a0:	4652      	mov	r2, sl
 80136a2:	465b      	mov	r3, fp
 80136a4:	4640      	mov	r0, r8
 80136a6:	4649      	mov	r1, r9
 80136a8:	f7ec fe16 	bl	80002d8 <__aeabi_uldivmod>
 80136ac:	4602      	mov	r2, r0
 80136ae:	460b      	mov	r3, r1
 80136b0:	4613      	mov	r3, r2
 80136b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80136b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80136ba:	d308      	bcc.n	80136ce <UART_SetConfig+0x79a>
 80136bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80136c2:	d204      	bcs.n	80136ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136ca:	60da      	str	r2, [r3, #12]
 80136cc:	e17c      	b.n	80139c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80136ce:	2301      	movs	r3, #1
 80136d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80136d4:	e178      	b.n	80139c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	69db      	ldr	r3, [r3, #28]
 80136da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136de:	f040 80c5 	bne.w	801386c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80136e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80136e6:	2b20      	cmp	r3, #32
 80136e8:	dc48      	bgt.n	801377c <UART_SetConfig+0x848>
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	db7b      	blt.n	80137e6 <UART_SetConfig+0x8b2>
 80136ee:	2b20      	cmp	r3, #32
 80136f0:	d879      	bhi.n	80137e6 <UART_SetConfig+0x8b2>
 80136f2:	a201      	add	r2, pc, #4	; (adr r2, 80136f8 <UART_SetConfig+0x7c4>)
 80136f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f8:	08013783 	.word	0x08013783
 80136fc:	0801378b 	.word	0x0801378b
 8013700:	080137e7 	.word	0x080137e7
 8013704:	080137e7 	.word	0x080137e7
 8013708:	08013793 	.word	0x08013793
 801370c:	080137e7 	.word	0x080137e7
 8013710:	080137e7 	.word	0x080137e7
 8013714:	080137e7 	.word	0x080137e7
 8013718:	080137a3 	.word	0x080137a3
 801371c:	080137e7 	.word	0x080137e7
 8013720:	080137e7 	.word	0x080137e7
 8013724:	080137e7 	.word	0x080137e7
 8013728:	080137e7 	.word	0x080137e7
 801372c:	080137e7 	.word	0x080137e7
 8013730:	080137e7 	.word	0x080137e7
 8013734:	080137e7 	.word	0x080137e7
 8013738:	080137b3 	.word	0x080137b3
 801373c:	080137e7 	.word	0x080137e7
 8013740:	080137e7 	.word	0x080137e7
 8013744:	080137e7 	.word	0x080137e7
 8013748:	080137e7 	.word	0x080137e7
 801374c:	080137e7 	.word	0x080137e7
 8013750:	080137e7 	.word	0x080137e7
 8013754:	080137e7 	.word	0x080137e7
 8013758:	080137e7 	.word	0x080137e7
 801375c:	080137e7 	.word	0x080137e7
 8013760:	080137e7 	.word	0x080137e7
 8013764:	080137e7 	.word	0x080137e7
 8013768:	080137e7 	.word	0x080137e7
 801376c:	080137e7 	.word	0x080137e7
 8013770:	080137e7 	.word	0x080137e7
 8013774:	080137e7 	.word	0x080137e7
 8013778:	080137d9 	.word	0x080137d9
 801377c:	2b40      	cmp	r3, #64	; 0x40
 801377e:	d02e      	beq.n	80137de <UART_SetConfig+0x8aa>
 8013780:	e031      	b.n	80137e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013782:	f7f9 f9cf 	bl	800cb24 <HAL_RCC_GetPCLK1Freq>
 8013786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013788:	e033      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801378a:	f7f9 f9e1 	bl	800cb50 <HAL_RCC_GetPCLK2Freq>
 801378e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013790:	e02f      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013796:	4618      	mov	r0, r3
 8013798:	f7fb f990 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137a0:	e027      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137a2:	f107 0318 	add.w	r3, r7, #24
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fb fadc 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137b0:	e01f      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80137b2:	4b2d      	ldr	r3, [pc, #180]	; (8013868 <UART_SetConfig+0x934>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f003 0320 	and.w	r3, r3, #32
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d009      	beq.n	80137d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80137be:	4b2a      	ldr	r3, [pc, #168]	; (8013868 <UART_SetConfig+0x934>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	08db      	lsrs	r3, r3, #3
 80137c4:	f003 0303 	and.w	r3, r3, #3
 80137c8:	4a24      	ldr	r2, [pc, #144]	; (801385c <UART_SetConfig+0x928>)
 80137ca:	fa22 f303 	lsr.w	r3, r2, r3
 80137ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80137d0:	e00f      	b.n	80137f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80137d2:	4b22      	ldr	r3, [pc, #136]	; (801385c <UART_SetConfig+0x928>)
 80137d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137d6:	e00c      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80137d8:	4b21      	ldr	r3, [pc, #132]	; (8013860 <UART_SetConfig+0x92c>)
 80137da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137dc:	e009      	b.n	80137f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80137de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137e4:	e005      	b.n	80137f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80137e6:	2300      	movs	r3, #0
 80137e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80137ea:	2301      	movs	r3, #1
 80137ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80137f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80137f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f000 80e7 	beq.w	80139c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fe:	4a19      	ldr	r2, [pc, #100]	; (8013864 <UART_SetConfig+0x930>)
 8013800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013804:	461a      	mov	r2, r3
 8013806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013808:	fbb3 f3f2 	udiv	r3, r3, r2
 801380c:	005a      	lsls	r2, r3, #1
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	085b      	lsrs	r3, r3, #1
 8013814:	441a      	add	r2, r3
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	fbb2 f3f3 	udiv	r3, r2, r3
 801381e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013822:	2b0f      	cmp	r3, #15
 8013824:	d916      	bls.n	8013854 <UART_SetConfig+0x920>
 8013826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801382c:	d212      	bcs.n	8013854 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013830:	b29b      	uxth	r3, r3
 8013832:	f023 030f 	bic.w	r3, r3, #15
 8013836:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383a:	085b      	lsrs	r3, r3, #1
 801383c:	b29b      	uxth	r3, r3
 801383e:	f003 0307 	and.w	r3, r3, #7
 8013842:	b29a      	uxth	r2, r3
 8013844:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013846:	4313      	orrs	r3, r2
 8013848:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013850:	60da      	str	r2, [r3, #12]
 8013852:	e0b9      	b.n	80139c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013854:	2301      	movs	r3, #1
 8013856:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801385a:	e0b5      	b.n	80139c8 <UART_SetConfig+0xa94>
 801385c:	03d09000 	.word	0x03d09000
 8013860:	003d0900 	.word	0x003d0900
 8013864:	080181b4 	.word	0x080181b4
 8013868:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801386c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013870:	2b20      	cmp	r3, #32
 8013872:	dc49      	bgt.n	8013908 <UART_SetConfig+0x9d4>
 8013874:	2b00      	cmp	r3, #0
 8013876:	db7c      	blt.n	8013972 <UART_SetConfig+0xa3e>
 8013878:	2b20      	cmp	r3, #32
 801387a:	d87a      	bhi.n	8013972 <UART_SetConfig+0xa3e>
 801387c:	a201      	add	r2, pc, #4	; (adr r2, 8013884 <UART_SetConfig+0x950>)
 801387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013882:	bf00      	nop
 8013884:	0801390f 	.word	0x0801390f
 8013888:	08013917 	.word	0x08013917
 801388c:	08013973 	.word	0x08013973
 8013890:	08013973 	.word	0x08013973
 8013894:	0801391f 	.word	0x0801391f
 8013898:	08013973 	.word	0x08013973
 801389c:	08013973 	.word	0x08013973
 80138a0:	08013973 	.word	0x08013973
 80138a4:	0801392f 	.word	0x0801392f
 80138a8:	08013973 	.word	0x08013973
 80138ac:	08013973 	.word	0x08013973
 80138b0:	08013973 	.word	0x08013973
 80138b4:	08013973 	.word	0x08013973
 80138b8:	08013973 	.word	0x08013973
 80138bc:	08013973 	.word	0x08013973
 80138c0:	08013973 	.word	0x08013973
 80138c4:	0801393f 	.word	0x0801393f
 80138c8:	08013973 	.word	0x08013973
 80138cc:	08013973 	.word	0x08013973
 80138d0:	08013973 	.word	0x08013973
 80138d4:	08013973 	.word	0x08013973
 80138d8:	08013973 	.word	0x08013973
 80138dc:	08013973 	.word	0x08013973
 80138e0:	08013973 	.word	0x08013973
 80138e4:	08013973 	.word	0x08013973
 80138e8:	08013973 	.word	0x08013973
 80138ec:	08013973 	.word	0x08013973
 80138f0:	08013973 	.word	0x08013973
 80138f4:	08013973 	.word	0x08013973
 80138f8:	08013973 	.word	0x08013973
 80138fc:	08013973 	.word	0x08013973
 8013900:	08013973 	.word	0x08013973
 8013904:	08013965 	.word	0x08013965
 8013908:	2b40      	cmp	r3, #64	; 0x40
 801390a:	d02e      	beq.n	801396a <UART_SetConfig+0xa36>
 801390c:	e031      	b.n	8013972 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801390e:	f7f9 f909 	bl	800cb24 <HAL_RCC_GetPCLK1Freq>
 8013912:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013914:	e033      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013916:	f7f9 f91b 	bl	800cb50 <HAL_RCC_GetPCLK2Freq>
 801391a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801391c:	e02f      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801391e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013922:	4618      	mov	r0, r3
 8013924:	f7fb f8ca 	bl	800eabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801392c:	e027      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801392e:	f107 0318 	add.w	r3, r7, #24
 8013932:	4618      	mov	r0, r3
 8013934:	f7fb fa16 	bl	800ed64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801393c:	e01f      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801393e:	4b2d      	ldr	r3, [pc, #180]	; (80139f4 <UART_SetConfig+0xac0>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f003 0320 	and.w	r3, r3, #32
 8013946:	2b00      	cmp	r3, #0
 8013948:	d009      	beq.n	801395e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801394a:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <UART_SetConfig+0xac0>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	08db      	lsrs	r3, r3, #3
 8013950:	f003 0303 	and.w	r3, r3, #3
 8013954:	4a28      	ldr	r2, [pc, #160]	; (80139f8 <UART_SetConfig+0xac4>)
 8013956:	fa22 f303 	lsr.w	r3, r2, r3
 801395a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801395c:	e00f      	b.n	801397e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801395e:	4b26      	ldr	r3, [pc, #152]	; (80139f8 <UART_SetConfig+0xac4>)
 8013960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013962:	e00c      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013964:	4b25      	ldr	r3, [pc, #148]	; (80139fc <UART_SetConfig+0xac8>)
 8013966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013968:	e009      	b.n	801397e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801396e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013970:	e005      	b.n	801397e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013972:	2300      	movs	r3, #0
 8013974:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013976:	2301      	movs	r3, #1
 8013978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801397c:	bf00      	nop
    }

    if (pclk != 0U)
 801397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013980:	2b00      	cmp	r3, #0
 8013982:	d021      	beq.n	80139c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013988:	4a1d      	ldr	r2, [pc, #116]	; (8013a00 <UART_SetConfig+0xacc>)
 801398a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801398e:	461a      	mov	r2, r3
 8013990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013992:	fbb3 f2f2 	udiv	r2, r3, r2
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	085b      	lsrs	r3, r3, #1
 801399c:	441a      	add	r2, r3
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80139a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80139a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139aa:	2b0f      	cmp	r3, #15
 80139ac:	d909      	bls.n	80139c2 <UART_SetConfig+0xa8e>
 80139ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139b4:	d205      	bcs.n	80139c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	60da      	str	r2, [r3, #12]
 80139c0:	e002      	b.n	80139c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80139c2:	2301      	movs	r3, #1
 80139c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	2201      	movs	r2, #1
 80139cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2201      	movs	r2, #1
 80139d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	2200      	movs	r2, #0
 80139dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2200      	movs	r2, #0
 80139e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80139e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3748      	adds	r7, #72	; 0x48
 80139ec:	46bd      	mov	sp, r7
 80139ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80139f2:	bf00      	nop
 80139f4:	58024400 	.word	0x58024400
 80139f8:	03d09000 	.word	0x03d09000
 80139fc:	003d0900 	.word	0x003d0900
 8013a00:	080181b4 	.word	0x080181b4

08013a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a10:	f003 0301 	and.w	r3, r3, #1
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d00a      	beq.n	8013a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	430a      	orrs	r2, r1
 8013a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a32:	f003 0302 	and.w	r3, r3, #2
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d00a      	beq.n	8013a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	430a      	orrs	r2, r1
 8013a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a54:	f003 0304 	and.w	r3, r3, #4
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00a      	beq.n	8013a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	430a      	orrs	r2, r1
 8013a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a76:	f003 0308 	and.w	r3, r3, #8
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00a      	beq.n	8013a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	430a      	orrs	r2, r1
 8013a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a98:	f003 0310 	and.w	r3, r3, #16
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d00a      	beq.n	8013ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	689b      	ldr	r3, [r3, #8]
 8013aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	430a      	orrs	r2, r1
 8013ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aba:	f003 0320 	and.w	r3, r3, #32
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d00a      	beq.n	8013ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	689b      	ldr	r3, [r3, #8]
 8013ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	430a      	orrs	r2, r1
 8013ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d01a      	beq.n	8013b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	430a      	orrs	r2, r1
 8013af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b02:	d10a      	bne.n	8013b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	430a      	orrs	r2, r1
 8013b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00a      	beq.n	8013b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	430a      	orrs	r2, r1
 8013b3a:	605a      	str	r2, [r3, #4]
  }
}
 8013b3c:	bf00      	nop
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b098      	sub	sp, #96	; 0x60
 8013b4c:	af02      	add	r7, sp, #8
 8013b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013b58:	f7f1 fc88 	bl	800546c <HAL_GetTick>
 8013b5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f003 0308 	and.w	r3, r3, #8
 8013b68:	2b08      	cmp	r3, #8
 8013b6a:	d12f      	bne.n	8013bcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b74:	2200      	movs	r2, #0
 8013b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 f88e 	bl	8013c9c <UART_WaitOnFlagUntilTimeout>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d022      	beq.n	8013bcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8e:	e853 3f00 	ldrex	r3, [r3]
 8013b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8013ba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bac:	e841 2300 	strex	r3, r2, [r1]
 8013bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d1e6      	bne.n	8013b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2220      	movs	r2, #32
 8013bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013bc8:	2303      	movs	r3, #3
 8013bca:	e063      	b.n	8013c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	f003 0304 	and.w	r3, r3, #4
 8013bd6:	2b04      	cmp	r3, #4
 8013bd8:	d149      	bne.n	8013c6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013be2:	2200      	movs	r2, #0
 8013be4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f000 f857 	bl	8013c9c <UART_WaitOnFlagUntilTimeout>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d03c      	beq.n	8013c6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	e853 3f00 	ldrex	r3, [r3]
 8013c00:	623b      	str	r3, [r7, #32]
   return(result);
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	461a      	mov	r2, r3
 8013c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c12:	633b      	str	r3, [r7, #48]	; 0x30
 8013c14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c1a:	e841 2300 	strex	r3, r2, [r1]
 8013c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1e6      	bne.n	8013bf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	3308      	adds	r3, #8
 8013c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	e853 3f00 	ldrex	r3, [r3]
 8013c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f023 0301 	bic.w	r3, r3, #1
 8013c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	3308      	adds	r3, #8
 8013c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c46:	61fa      	str	r2, [r7, #28]
 8013c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c4a:	69b9      	ldr	r1, [r7, #24]
 8013c4c:	69fa      	ldr	r2, [r7, #28]
 8013c4e:	e841 2300 	strex	r3, r2, [r1]
 8013c52:	617b      	str	r3, [r7, #20]
   return(result);
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d1e5      	bne.n	8013c26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2220      	movs	r2, #32
 8013c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2200      	movs	r2, #0
 8013c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c6a:	2303      	movs	r3, #3
 8013c6c:	e012      	b.n	8013c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2220      	movs	r2, #32
 8013c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2220      	movs	r2, #32
 8013c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2200      	movs	r2, #0
 8013c88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013c92:	2300      	movs	r3, #0
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3758      	adds	r7, #88	; 0x58
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	603b      	str	r3, [r7, #0]
 8013ca8:	4613      	mov	r3, r2
 8013caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cac:	e049      	b.n	8013d42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cb4:	d045      	beq.n	8013d42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013cb6:	f7f1 fbd9 	bl	800546c <HAL_GetTick>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	69ba      	ldr	r2, [r7, #24]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d302      	bcc.n	8013ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d101      	bne.n	8013cd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013ccc:	2303      	movs	r3, #3
 8013cce:	e048      	b.n	8013d62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f003 0304 	and.w	r3, r3, #4
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d031      	beq.n	8013d42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	69db      	ldr	r3, [r3, #28]
 8013ce4:	f003 0308 	and.w	r3, r3, #8
 8013ce8:	2b08      	cmp	r3, #8
 8013cea:	d110      	bne.n	8013d0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	2208      	movs	r2, #8
 8013cf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013cf4:	68f8      	ldr	r0, [r7, #12]
 8013cf6:	f000 f839 	bl	8013d6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2208      	movs	r2, #8
 8013cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2200      	movs	r2, #0
 8013d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	e029      	b.n	8013d62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	69db      	ldr	r3, [r3, #28]
 8013d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d1c:	d111      	bne.n	8013d42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f000 f81f 	bl	8013d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	2220      	movs	r2, #32
 8013d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013d3e:	2303      	movs	r3, #3
 8013d40:	e00f      	b.n	8013d62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	69da      	ldr	r2, [r3, #28]
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	68ba      	ldr	r2, [r7, #8]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	bf0c      	ite	eq
 8013d52:	2301      	moveq	r3, #1
 8013d54:	2300      	movne	r3, #0
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	461a      	mov	r2, r3
 8013d5a:	79fb      	ldrb	r3, [r7, #7]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d0a6      	beq.n	8013cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
	...

08013d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b095      	sub	sp, #84	; 0x54
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d7c:	e853 3f00 	ldrex	r3, [r3]
 8013d80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	461a      	mov	r2, r3
 8013d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d92:	643b      	str	r3, [r7, #64]	; 0x40
 8013d94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d9a:	e841 2300 	strex	r3, r2, [r1]
 8013d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1e6      	bne.n	8013d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	3308      	adds	r3, #8
 8013dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dae:	6a3b      	ldr	r3, [r7, #32]
 8013db0:	e853 3f00 	ldrex	r3, [r3]
 8013db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013db6:	69fa      	ldr	r2, [r7, #28]
 8013db8:	4b1e      	ldr	r3, [pc, #120]	; (8013e34 <UART_EndRxTransfer+0xc8>)
 8013dba:	4013      	ands	r3, r2
 8013dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	3308      	adds	r3, #8
 8013dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dce:	e841 2300 	strex	r3, r2, [r1]
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1e5      	bne.n	8013da6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d118      	bne.n	8013e14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	e853 3f00 	ldrex	r3, [r3]
 8013dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	f023 0310 	bic.w	r3, r3, #16
 8013df6:	647b      	str	r3, [r7, #68]	; 0x44
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e00:	61bb      	str	r3, [r7, #24]
 8013e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e04:	6979      	ldr	r1, [r7, #20]
 8013e06:	69ba      	ldr	r2, [r7, #24]
 8013e08:	e841 2300 	strex	r3, r2, [r1]
 8013e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d1e6      	bne.n	8013de2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2220      	movs	r2, #32
 8013e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013e28:	bf00      	nop
 8013e2a:	3754      	adds	r7, #84	; 0x54
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr
 8013e34:	effffffe 	.word	0xeffffffe

08013e38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d101      	bne.n	8013e4e <HAL_UARTEx_DisableFifoMode+0x16>
 8013e4a:	2302      	movs	r3, #2
 8013e4c:	e027      	b.n	8013e9e <HAL_UARTEx_DisableFifoMode+0x66>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2201      	movs	r2, #1
 8013e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2224      	movs	r2, #36	; 0x24
 8013e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f022 0201 	bic.w	r2, r2, #1
 8013e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2220      	movs	r2, #32
 8013e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013e9c:	2300      	movs	r3, #0
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3714      	adds	r7, #20
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr

08013eaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b084      	sub	sp, #16
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	6078      	str	r0, [r7, #4]
 8013eb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013eba:	2b01      	cmp	r3, #1
 8013ebc:	d101      	bne.n	8013ec2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013ebe:	2302      	movs	r3, #2
 8013ec0:	e02d      	b.n	8013f1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2201      	movs	r2, #1
 8013ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2224      	movs	r2, #36	; 0x24
 8013ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f022 0201 	bic.w	r2, r2, #1
 8013ee8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	683a      	ldr	r2, [r7, #0]
 8013efa:	430a      	orrs	r2, r1
 8013efc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 f850 	bl	8013fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2220      	movs	r2, #32
 8013f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f1c:	2300      	movs	r3, #0
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}

08013f26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f26:	b580      	push	{r7, lr}
 8013f28:	b084      	sub	sp, #16
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
 8013f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d101      	bne.n	8013f3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	e02d      	b.n	8013f9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2201      	movs	r2, #1
 8013f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2224      	movs	r2, #36	; 0x24
 8013f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f022 0201 	bic.w	r2, r2, #1
 8013f64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	689b      	ldr	r3, [r3, #8]
 8013f6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	430a      	orrs	r2, r1
 8013f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 f812 	bl	8013fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	68fa      	ldr	r2, [r7, #12]
 8013f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2220      	movs	r2, #32
 8013f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
	...

08013fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d108      	bne.n	8013fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013fc4:	e031      	b.n	801402a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013fc6:	2310      	movs	r3, #16
 8013fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013fca:	2310      	movs	r3, #16
 8013fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	689b      	ldr	r3, [r3, #8]
 8013fd4:	0e5b      	lsrs	r3, r3, #25
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	f003 0307 	and.w	r3, r3, #7
 8013fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	689b      	ldr	r3, [r3, #8]
 8013fe4:	0f5b      	lsrs	r3, r3, #29
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	f003 0307 	and.w	r3, r3, #7
 8013fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013fee:	7bbb      	ldrb	r3, [r7, #14]
 8013ff0:	7b3a      	ldrb	r2, [r7, #12]
 8013ff2:	4911      	ldr	r1, [pc, #68]	; (8014038 <UARTEx_SetNbDataToProcess+0x94>)
 8013ff4:	5c8a      	ldrb	r2, [r1, r2]
 8013ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013ffa:	7b3a      	ldrb	r2, [r7, #12]
 8013ffc:	490f      	ldr	r1, [pc, #60]	; (801403c <UARTEx_SetNbDataToProcess+0x98>)
 8013ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014000:	fb93 f3f2 	sdiv	r3, r3, r2
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801400c:	7bfb      	ldrb	r3, [r7, #15]
 801400e:	7b7a      	ldrb	r2, [r7, #13]
 8014010:	4909      	ldr	r1, [pc, #36]	; (8014038 <UARTEx_SetNbDataToProcess+0x94>)
 8014012:	5c8a      	ldrb	r2, [r1, r2]
 8014014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014018:	7b7a      	ldrb	r2, [r7, #13]
 801401a:	4908      	ldr	r1, [pc, #32]	; (801403c <UARTEx_SetNbDataToProcess+0x98>)
 801401c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801401e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014022:	b29a      	uxth	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801402a:	bf00      	nop
 801402c:	3714      	adds	r7, #20
 801402e:	46bd      	mov	sp, r7
 8014030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop
 8014038:	080181cc 	.word	0x080181cc
 801403c:	080181d4 	.word	0x080181d4

08014040 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d121      	bne.n	8014096 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	4b27      	ldr	r3, [pc, #156]	; (80140f4 <FMC_SDRAM_Init+0xb4>)
 8014058:	4013      	ands	r3, r2
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	6851      	ldr	r1, [r2, #4]
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	6892      	ldr	r2, [r2, #8]
 8014062:	4311      	orrs	r1, r2
 8014064:	683a      	ldr	r2, [r7, #0]
 8014066:	68d2      	ldr	r2, [r2, #12]
 8014068:	4311      	orrs	r1, r2
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	6912      	ldr	r2, [r2, #16]
 801406e:	4311      	orrs	r1, r2
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	6952      	ldr	r2, [r2, #20]
 8014074:	4311      	orrs	r1, r2
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	6992      	ldr	r2, [r2, #24]
 801407a:	4311      	orrs	r1, r2
 801407c:	683a      	ldr	r2, [r7, #0]
 801407e:	69d2      	ldr	r2, [r2, #28]
 8014080:	4311      	orrs	r1, r2
 8014082:	683a      	ldr	r2, [r7, #0]
 8014084:	6a12      	ldr	r2, [r2, #32]
 8014086:	4311      	orrs	r1, r2
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801408c:	430a      	orrs	r2, r1
 801408e:	431a      	orrs	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	601a      	str	r2, [r3, #0]
 8014094:	e026      	b.n	80140e4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	69d9      	ldr	r1, [r3, #28]
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	6a1b      	ldr	r3, [r3, #32]
 80140a6:	4319      	orrs	r1, r3
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ac:	430b      	orrs	r3, r1
 80140ae:	431a      	orrs	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	685a      	ldr	r2, [r3, #4]
 80140b8:	4b0e      	ldr	r3, [pc, #56]	; (80140f4 <FMC_SDRAM_Init+0xb4>)
 80140ba:	4013      	ands	r3, r2
 80140bc:	683a      	ldr	r2, [r7, #0]
 80140be:	6851      	ldr	r1, [r2, #4]
 80140c0:	683a      	ldr	r2, [r7, #0]
 80140c2:	6892      	ldr	r2, [r2, #8]
 80140c4:	4311      	orrs	r1, r2
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	68d2      	ldr	r2, [r2, #12]
 80140ca:	4311      	orrs	r1, r2
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	6912      	ldr	r2, [r2, #16]
 80140d0:	4311      	orrs	r1, r2
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	6952      	ldr	r2, [r2, #20]
 80140d6:	4311      	orrs	r1, r2
 80140d8:	683a      	ldr	r2, [r7, #0]
 80140da:	6992      	ldr	r2, [r2, #24]
 80140dc:	430a      	orrs	r2, r1
 80140de:	431a      	orrs	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80140e4:	2300      	movs	r3, #0
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	370c      	adds	r7, #12
 80140ea:	46bd      	mov	sp, r7
 80140ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f0:	4770      	bx	lr
 80140f2:	bf00      	nop
 80140f4:	ffff8000 	.word	0xffff8000

080140f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b085      	sub	sp, #20
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d128      	bne.n	801415c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	1e59      	subs	r1, r3, #1
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	3b01      	subs	r3, #1
 801411e:	011b      	lsls	r3, r3, #4
 8014120:	4319      	orrs	r1, r3
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	689b      	ldr	r3, [r3, #8]
 8014126:	3b01      	subs	r3, #1
 8014128:	021b      	lsls	r3, r3, #8
 801412a:	4319      	orrs	r1, r3
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	3b01      	subs	r3, #1
 8014132:	031b      	lsls	r3, r3, #12
 8014134:	4319      	orrs	r1, r3
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	691b      	ldr	r3, [r3, #16]
 801413a:	3b01      	subs	r3, #1
 801413c:	041b      	lsls	r3, r3, #16
 801413e:	4319      	orrs	r1, r3
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	695b      	ldr	r3, [r3, #20]
 8014144:	3b01      	subs	r3, #1
 8014146:	051b      	lsls	r3, r3, #20
 8014148:	4319      	orrs	r1, r3
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	699b      	ldr	r3, [r3, #24]
 801414e:	3b01      	subs	r3, #1
 8014150:	061b      	lsls	r3, r3, #24
 8014152:	430b      	orrs	r3, r1
 8014154:	431a      	orrs	r2, r3
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	609a      	str	r2, [r3, #8]
 801415a:	e02d      	b.n	80141b8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	689a      	ldr	r2, [r3, #8]
 8014160:	4b19      	ldr	r3, [pc, #100]	; (80141c8 <FMC_SDRAM_Timing_Init+0xd0>)
 8014162:	4013      	ands	r3, r2
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	68d2      	ldr	r2, [r2, #12]
 8014168:	3a01      	subs	r2, #1
 801416a:	0311      	lsls	r1, r2, #12
 801416c:	68ba      	ldr	r2, [r7, #8]
 801416e:	6952      	ldr	r2, [r2, #20]
 8014170:	3a01      	subs	r2, #1
 8014172:	0512      	lsls	r2, r2, #20
 8014174:	430a      	orrs	r2, r1
 8014176:	431a      	orrs	r2, r3
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	1e59      	subs	r1, r3, #1
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	3b01      	subs	r3, #1
 8014190:	011b      	lsls	r3, r3, #4
 8014192:	4319      	orrs	r1, r3
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	689b      	ldr	r3, [r3, #8]
 8014198:	3b01      	subs	r3, #1
 801419a:	021b      	lsls	r3, r3, #8
 801419c:	4319      	orrs	r1, r3
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	3b01      	subs	r3, #1
 80141a4:	041b      	lsls	r3, r3, #16
 80141a6:	4319      	orrs	r1, r3
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	699b      	ldr	r3, [r3, #24]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	061b      	lsls	r3, r3, #24
 80141b0:	430b      	orrs	r3, r1
 80141b2:	431a      	orrs	r2, r3
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3714      	adds	r7, #20
 80141be:	46bd      	mov	sp, r7
 80141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop
 80141c8:	ff0f0fff 	.word	0xff0f0fff

080141cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b085      	sub	sp, #20
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	691a      	ldr	r2, [r3, #16]
 80141dc:	4b0c      	ldr	r3, [pc, #48]	; (8014210 <FMC_SDRAM_SendCommand+0x44>)
 80141de:	4013      	ands	r3, r2
 80141e0:	68ba      	ldr	r2, [r7, #8]
 80141e2:	6811      	ldr	r1, [r2, #0]
 80141e4:	68ba      	ldr	r2, [r7, #8]
 80141e6:	6852      	ldr	r2, [r2, #4]
 80141e8:	4311      	orrs	r1, r2
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	6892      	ldr	r2, [r2, #8]
 80141ee:	3a01      	subs	r2, #1
 80141f0:	0152      	lsls	r2, r2, #5
 80141f2:	4311      	orrs	r1, r2
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	68d2      	ldr	r2, [r2, #12]
 80141f8:	0252      	lsls	r2, r2, #9
 80141fa:	430a      	orrs	r2, r1
 80141fc:	431a      	orrs	r2, r3
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr
 8014210:	ffc00000 	.word	0xffc00000

08014214 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	695a      	ldr	r2, [r3, #20]
 8014222:	4b07      	ldr	r3, [pc, #28]	; (8014240 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014224:	4013      	ands	r3, r2
 8014226:	683a      	ldr	r2, [r7, #0]
 8014228:	0052      	lsls	r2, r2, #1
 801422a:	431a      	orrs	r2, r3
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	370c      	adds	r7, #12
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr
 801423e:	bf00      	nop
 8014240:	ffffc001 	.word	0xffffc001

08014244 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014244:	b084      	sub	sp, #16
 8014246:	b480      	push	{r7}
 8014248:	b085      	sub	sp, #20
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	f107 001c 	add.w	r0, r7, #28
 8014252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8014256:	2300      	movs	r3, #0
 8014258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801425a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801425c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801425e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8014260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8014262:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8014264:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8014266:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801426a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801426c:	68fa      	ldr	r2, [r7, #12]
 801426e:	4313      	orrs	r3, r2
 8014270:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	4b07      	ldr	r3, [pc, #28]	; (8014294 <SDMMC_Init+0x50>)
 8014278:	4013      	ands	r3, r2
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	431a      	orrs	r2, r3
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3714      	adds	r7, #20
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	b004      	add	sp, #16
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop
 8014294:	ffc02c00 	.word	0xffc02c00

08014298 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr

080142b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80142b2:	b480      	push	{r7}
 80142b4:	b083      	sub	sp, #12
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
 80142ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80142c6:	2300      	movs	r3, #0
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	370c      	adds	r7, #12
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr

080142d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80142d4:	b480      	push	{r7}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f043 0203 	orr.w	r2, r3, #3
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80142e8:	2300      	movs	r3, #0
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr

080142f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80142f6:	b480      	push	{r7}
 80142f8:	b083      	sub	sp, #12
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f003 0303 	and.w	r3, r3, #3
}
 8014306:	4618      	mov	r0, r3
 8014308:	370c      	adds	r7, #12
 801430a:	46bd      	mov	sp, r7
 801430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014310:	4770      	bx	lr
	...

08014314 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8014314:	b480      	push	{r7}
 8014316:	b085      	sub	sp, #20
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014332:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8014338:	431a      	orrs	r2, r3
                       Command->CPSM);
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801433e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014340:	68fa      	ldr	r2, [r7, #12]
 8014342:	4313      	orrs	r3, r2
 8014344:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	68da      	ldr	r2, [r3, #12]
 801434a:	4b06      	ldr	r3, [pc, #24]	; (8014364 <SDMMC_SendCommand+0x50>)
 801434c:	4013      	ands	r3, r2
 801434e:	68fa      	ldr	r2, [r7, #12]
 8014350:	431a      	orrs	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014356:	2300      	movs	r3, #0
}
 8014358:	4618      	mov	r0, r3
 801435a:	3714      	adds	r7, #20
 801435c:	46bd      	mov	sp, r7
 801435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014362:	4770      	bx	lr
 8014364:	fffee0c0 	.word	0xfffee0c0

08014368 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	b2db      	uxtb	r3, r3
}
 8014376:	4618      	mov	r0, r3
 8014378:	370c      	adds	r7, #12
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr

08014382 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014382:	b480      	push	{r7}
 8014384:	b085      	sub	sp, #20
 8014386:	af00      	add	r7, sp, #0
 8014388:	6078      	str	r0, [r7, #4]
 801438a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	3314      	adds	r3, #20
 8014390:	461a      	mov	r2, r3
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	4413      	add	r3, r2
 8014396:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
}
 801439c:	4618      	mov	r0, r3
 801439e:	3714      	adds	r7, #20
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80143a8:	b480      	push	{r7}
 80143aa:	b085      	sub	sp, #20
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80143b2:	2300      	movs	r3, #0
 80143b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	685a      	ldr	r2, [r3, #4]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80143ce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80143d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80143da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	4313      	orrs	r3, r2
 80143e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	431a      	orrs	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80143f2:	2300      	movs	r3, #0

}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3714      	adds	r7, #20
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b088      	sub	sp, #32
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801440e:	2310      	movs	r3, #16
 8014410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014418:	2300      	movs	r3, #0
 801441a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801441c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014422:	f107 0308 	add.w	r3, r7, #8
 8014426:	4619      	mov	r1, r3
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f7ff ff73 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014432:	2110      	movs	r1, #16
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f000 fa5f 	bl	80148f8 <SDMMC_GetCmdResp1>
 801443a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801443c:	69fb      	ldr	r3, [r7, #28]
}
 801443e:	4618      	mov	r0, r3
 8014440:	3720      	adds	r7, #32
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8014446:	b580      	push	{r7, lr}
 8014448:	b088      	sub	sp, #32
 801444a:	af00      	add	r7, sp, #0
 801444c:	6078      	str	r0, [r7, #4]
 801444e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8014454:	2311      	movs	r3, #17
 8014456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014458:	f44f 7380 	mov.w	r3, #256	; 0x100
 801445c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801445e:	2300      	movs	r3, #0
 8014460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014468:	f107 0308 	add.w	r3, r7, #8
 801446c:	4619      	mov	r1, r3
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f7ff ff50 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014474:	f241 3288 	movw	r2, #5000	; 0x1388
 8014478:	2111      	movs	r1, #17
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 fa3c 	bl	80148f8 <SDMMC_GetCmdResp1>
 8014480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014482:	69fb      	ldr	r3, [r7, #28]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3720      	adds	r7, #32
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b088      	sub	sp, #32
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801449a:	2312      	movs	r3, #18
 801449c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801449e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144a4:	2300      	movs	r3, #0
 80144a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144ae:	f107 0308 	add.w	r3, r7, #8
 80144b2:	4619      	mov	r1, r3
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff ff2d 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80144ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80144be:	2112      	movs	r1, #18
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fa19 	bl	80148f8 <SDMMC_GetCmdResp1>
 80144c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144c8:	69fb      	ldr	r3, [r7, #28]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3720      	adds	r7, #32
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b088      	sub	sp, #32
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
 80144da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80144e0:	2318      	movs	r3, #24
 80144e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ea:	2300      	movs	r3, #0
 80144ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144f4:	f107 0308 	add.w	r3, r7, #8
 80144f8:	4619      	mov	r1, r3
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7ff ff0a 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014500:	f241 3288 	movw	r2, #5000	; 0x1388
 8014504:	2118      	movs	r1, #24
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 f9f6 	bl	80148f8 <SDMMC_GetCmdResp1>
 801450c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801450e:	69fb      	ldr	r3, [r7, #28]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3720      	adds	r7, #32
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b088      	sub	sp, #32
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8014526:	2319      	movs	r3, #25
 8014528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801452a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801452e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014530:	2300      	movs	r3, #0
 8014532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801453a:	f107 0308 	add.w	r3, r7, #8
 801453e:	4619      	mov	r1, r3
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7ff fee7 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8014546:	f241 3288 	movw	r2, #5000	; 0x1388
 801454a:	2119      	movs	r1, #25
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 f9d3 	bl	80148f8 <SDMMC_GetCmdResp1>
 8014552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014554:	69fb      	ldr	r3, [r7, #28]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3720      	adds	r7, #32
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
	...

08014560 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b088      	sub	sp, #32
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014568:	2300      	movs	r3, #0
 801456a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801456c:	230c      	movs	r3, #12
 801456e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014576:	2300      	movs	r3, #0
 8014578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801457a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801457e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	68db      	ldr	r3, [r3, #12]
 8014584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014598:	f107 0308 	add.w	r3, r7, #8
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7ff feb8 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80145a4:	4a0b      	ldr	r2, [pc, #44]	; (80145d4 <SDMMC_CmdStopTransfer+0x74>)
 80145a6:	210c      	movs	r1, #12
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 f9a5 	bl	80148f8 <SDMMC_GetCmdResp1>
 80145ae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80145c2:	d101      	bne.n	80145c8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80145c4:	2300      	movs	r3, #0
 80145c6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80145c8:	69fb      	ldr	r3, [r7, #28]
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3720      	adds	r7, #32
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	05f5e100 	.word	0x05f5e100

080145d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b088      	sub	sp, #32
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80145e6:	2307      	movs	r3, #7
 80145e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80145ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80145ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145f0:	2300      	movs	r3, #0
 80145f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145fa:	f107 0308 	add.w	r3, r7, #8
 80145fe:	4619      	mov	r1, r3
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff fe87 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014606:	f241 3288 	movw	r2, #5000	; 0x1388
 801460a:	2107      	movs	r1, #7
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f000 f973 	bl	80148f8 <SDMMC_GetCmdResp1>
 8014612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014614:	69fb      	ldr	r3, [r7, #28]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3720      	adds	r7, #32
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b088      	sub	sp, #32
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014626:	2300      	movs	r3, #0
 8014628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801462a:	2300      	movs	r3, #0
 801462c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801462e:	2300      	movs	r3, #0
 8014630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014632:	2300      	movs	r3, #0
 8014634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801463a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801463c:	f107 0308 	add.w	r3, r7, #8
 8014640:	4619      	mov	r1, r3
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff fe66 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 fb97 	bl	8014d7c <SDMMC_GetCmdError>
 801464e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014650:	69fb      	ldr	r3, [r7, #28]
}
 8014652:	4618      	mov	r0, r3
 8014654:	3720      	adds	r7, #32
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801465a:	b580      	push	{r7, lr}
 801465c:	b088      	sub	sp, #32
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014662:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014668:	2308      	movs	r3, #8
 801466a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801466c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014672:	2300      	movs	r3, #0
 8014674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801467a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801467c:	f107 0308 	add.w	r3, r7, #8
 8014680:	4619      	mov	r1, r3
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7ff fe46 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f000 fb29 	bl	8014ce0 <SDMMC_GetCmdResp7>
 801468e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014690:	69fb      	ldr	r3, [r7, #28]
}
 8014692:	4618      	mov	r0, r3
 8014694:	3720      	adds	r7, #32
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b088      	sub	sp, #32
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
 80146a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80146a8:	2337      	movs	r3, #55	; 0x37
 80146aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146b2:	2300      	movs	r3, #0
 80146b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146bc:	f107 0308 	add.w	r3, r7, #8
 80146c0:	4619      	mov	r1, r3
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7ff fe26 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80146c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80146cc:	2137      	movs	r1, #55	; 0x37
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f912 	bl	80148f8 <SDMMC_GetCmdResp1>
 80146d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146d6:	69fb      	ldr	r3, [r7, #28]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3720      	adds	r7, #32
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b088      	sub	sp, #32
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80146ee:	2329      	movs	r3, #41	; 0x29
 80146f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146f8:	2300      	movs	r3, #0
 80146fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014702:	f107 0308 	add.w	r3, r7, #8
 8014706:	4619      	mov	r1, r3
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7ff fe03 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 fa2e 	bl	8014b70 <SDMMC_GetCmdResp3>
 8014714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014716:	69fb      	ldr	r3, [r7, #28]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3720      	adds	r7, #32
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b088      	sub	sp, #32
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801472e:	2306      	movs	r3, #6
 8014730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014738:	2300      	movs	r3, #0
 801473a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801473c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014742:	f107 0308 	add.w	r3, r7, #8
 8014746:	4619      	mov	r1, r3
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7ff fde3 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014752:	2106      	movs	r1, #6
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f000 f8cf 	bl	80148f8 <SDMMC_GetCmdResp1>
 801475a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801475c:	69fb      	ldr	r3, [r7, #28]
}
 801475e:	4618      	mov	r0, r3
 8014760:	3720      	adds	r7, #32
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b088      	sub	sp, #32
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801476e:	2300      	movs	r3, #0
 8014770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014772:	2333      	movs	r3, #51	; 0x33
 8014774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014776:	f44f 7380 	mov.w	r3, #256	; 0x100
 801477a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801477c:	2300      	movs	r3, #0
 801477e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014786:	f107 0308 	add.w	r3, r7, #8
 801478a:	4619      	mov	r1, r3
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f7ff fdc1 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014792:	f241 3288 	movw	r2, #5000	; 0x1388
 8014796:	2133      	movs	r1, #51	; 0x33
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 f8ad 	bl	80148f8 <SDMMC_GetCmdResp1>
 801479e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147a0:	69fb      	ldr	r3, [r7, #28]
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3720      	adds	r7, #32
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80147aa:	b580      	push	{r7, lr}
 80147ac:	b088      	sub	sp, #32
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80147b2:	2300      	movs	r3, #0
 80147b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80147b6:	2302      	movs	r3, #2
 80147b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80147ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80147be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147c0:	2300      	movs	r3, #0
 80147c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147ca:	f107 0308 	add.w	r3, r7, #8
 80147ce:	4619      	mov	r1, r3
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ff fd9f 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f000 f980 	bl	8014adc <SDMMC_GetCmdResp2>
 80147dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147de:	69fb      	ldr	r3, [r7, #28]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3720      	adds	r7, #32
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b088      	sub	sp, #32
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80147f6:	2309      	movs	r3, #9
 80147f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80147fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80147fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014800:	2300      	movs	r3, #0
 8014802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801480a:	f107 0308 	add.w	r3, r7, #8
 801480e:	4619      	mov	r1, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff fd7f 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 f960 	bl	8014adc <SDMMC_GetCmdResp2>
 801481c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801481e:	69fb      	ldr	r3, [r7, #28]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3720      	adds	r7, #32
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b088      	sub	sp, #32
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014832:	2300      	movs	r3, #0
 8014834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8014836:	2303      	movs	r3, #3
 8014838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801483a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801483e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014840:	2300      	movs	r3, #0
 8014842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801484a:	f107 0308 	add.w	r3, r7, #8
 801484e:	4619      	mov	r1, r3
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ff fd5f 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014856:	683a      	ldr	r2, [r7, #0]
 8014858:	2103      	movs	r1, #3
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 f9c8 	bl	8014bf0 <SDMMC_GetCmdResp6>
 8014860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014862:	69fb      	ldr	r3, [r7, #28]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3720      	adds	r7, #32
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b088      	sub	sp, #32
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801487a:	230d      	movs	r3, #13
 801487c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801487e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014884:	2300      	movs	r3, #0
 8014886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801488c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801488e:	f107 0308 	add.w	r3, r7, #8
 8014892:	4619      	mov	r1, r3
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7ff fd3d 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801489a:	f241 3288 	movw	r2, #5000	; 0x1388
 801489e:	210d      	movs	r1, #13
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 f829 	bl	80148f8 <SDMMC_GetCmdResp1>
 80148a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148a8:	69fb      	ldr	r3, [r7, #28]
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3720      	adds	r7, #32
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}

080148b2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80148b2:	b580      	push	{r7, lr}
 80148b4:	b088      	sub	sp, #32
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80148ba:	2300      	movs	r3, #0
 80148bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80148be:	230d      	movs	r3, #13
 80148c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80148c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80148c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148c8:	2300      	movs	r3, #0
 80148ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80148d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148d2:	f107 0308 	add.w	r3, r7, #8
 80148d6:	4619      	mov	r1, r3
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f7ff fd1b 	bl	8014314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80148de:	f241 3288 	movw	r2, #5000	; 0x1388
 80148e2:	210d      	movs	r1, #13
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f807 	bl	80148f8 <SDMMC_GetCmdResp1>
 80148ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148ec:	69fb      	ldr	r3, [r7, #28]
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3720      	adds	r7, #32
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
	...

080148f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b088      	sub	sp, #32
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	460b      	mov	r3, r1
 8014902:	607a      	str	r2, [r7, #4]
 8014904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8014906:	4b70      	ldr	r3, [pc, #448]	; (8014ac8 <SDMMC_GetCmdResp1+0x1d0>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4a70      	ldr	r2, [pc, #448]	; (8014acc <SDMMC_GetCmdResp1+0x1d4>)
 801490c:	fba2 2303 	umull	r2, r3, r2, r3
 8014910:	0a5a      	lsrs	r2, r3, #9
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	fb02 f303 	mul.w	r3, r2, r3
 8014918:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	1e5a      	subs	r2, r3, #1
 801491e:	61fa      	str	r2, [r7, #28]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d102      	bne.n	801492a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014928:	e0c9      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801492e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014930:	69ba      	ldr	r2, [r7, #24]
 8014932:	4b67      	ldr	r3, [pc, #412]	; (8014ad0 <SDMMC_GetCmdResp1+0x1d8>)
 8014934:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014936:	2b00      	cmp	r3, #0
 8014938:	d0ef      	beq.n	801491a <SDMMC_GetCmdResp1+0x22>
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1ea      	bne.n	801491a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014948:	f003 0304 	and.w	r3, r3, #4
 801494c:	2b00      	cmp	r3, #0
 801494e:	d004      	beq.n	801495a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2204      	movs	r2, #4
 8014954:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014956:	2304      	movs	r3, #4
 8014958:	e0b1      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801495e:	f003 0301 	and.w	r3, r3, #1
 8014962:	2b00      	cmp	r3, #0
 8014964:	d004      	beq.n	8014970 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2201      	movs	r2, #1
 801496a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801496c:	2301      	movs	r3, #1
 801496e:	e0a6      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	4a58      	ldr	r2, [pc, #352]	; (8014ad4 <SDMMC_GetCmdResp1+0x1dc>)
 8014974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014976:	68f8      	ldr	r0, [r7, #12]
 8014978:	f7ff fcf6 	bl	8014368 <SDMMC_GetCommandResponse>
 801497c:	4603      	mov	r3, r0
 801497e:	461a      	mov	r2, r3
 8014980:	7afb      	ldrb	r3, [r7, #11]
 8014982:	4293      	cmp	r3, r2
 8014984:	d001      	beq.n	801498a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014986:	2301      	movs	r3, #1
 8014988:	e099      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801498a:	2100      	movs	r1, #0
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f7ff fcf8 	bl	8014382 <SDMMC_GetResponse>
 8014992:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014994:	697a      	ldr	r2, [r7, #20]
 8014996:	4b50      	ldr	r3, [pc, #320]	; (8014ad8 <SDMMC_GetCmdResp1+0x1e0>)
 8014998:	4013      	ands	r3, r2
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801499e:	2300      	movs	r3, #0
 80149a0:	e08d      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	da02      	bge.n	80149ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80149a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80149ac:	e087      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d001      	beq.n	80149bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80149b8:	2340      	movs	r3, #64	; 0x40
 80149ba:	e080      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d001      	beq.n	80149ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80149c6:	2380      	movs	r3, #128	; 0x80
 80149c8:	e079      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d002      	beq.n	80149da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80149d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80149d8:	e071      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80149e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149e8:	e069      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d002      	beq.n	80149fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80149f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149f8:	e061      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d002      	beq.n	8014a0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a08:	e059      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014a18:	e051      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d002      	beq.n	8014a2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014a28:	e049      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d002      	beq.n	8014a3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014a38:	e041      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a48:	e039      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014a58:	e031      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d002      	beq.n	8014a6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014a68:	e029      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d002      	beq.n	8014a7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014a74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014a78:	e021      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d002      	beq.n	8014a8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014a88:	e019      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014a98:	e011      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014aa4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014aa8:	e009      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	f003 0308 	and.w	r3, r3, #8
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014ab4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014ab8:	e001      	b.n	8014abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3720      	adds	r7, #32
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20000018 	.word	0x20000018
 8014acc:	10624dd3 	.word	0x10624dd3
 8014ad0:	00200045 	.word	0x00200045
 8014ad4:	002000c5 	.word	0x002000c5
 8014ad8:	fdffe008 	.word	0xfdffe008

08014adc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b085      	sub	sp, #20
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014ae4:	4b1f      	ldr	r3, [pc, #124]	; (8014b64 <SDMMC_GetCmdResp2+0x88>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4a1f      	ldr	r2, [pc, #124]	; (8014b68 <SDMMC_GetCmdResp2+0x8c>)
 8014aea:	fba2 2303 	umull	r2, r3, r2, r3
 8014aee:	0a5b      	lsrs	r3, r3, #9
 8014af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8014af4:	fb02 f303 	mul.w	r3, r2, r3
 8014af8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	1e5a      	subs	r2, r3, #1
 8014afe:	60fa      	str	r2, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d102      	bne.n	8014b0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b08:	e026      	b.n	8014b58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d0ef      	beq.n	8014afa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d1ea      	bne.n	8014afa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b28:	f003 0304 	and.w	r3, r3, #4
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d004      	beq.n	8014b3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2204      	movs	r2, #4
 8014b34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b36:	2304      	movs	r3, #4
 8014b38:	e00e      	b.n	8014b58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b3e:	f003 0301 	and.w	r3, r3, #1
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d004      	beq.n	8014b50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2201      	movs	r2, #1
 8014b4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e003      	b.n	8014b58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	4a06      	ldr	r2, [pc, #24]	; (8014b6c <SDMMC_GetCmdResp2+0x90>)
 8014b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014b56:	2300      	movs	r3, #0
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3714      	adds	r7, #20
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr
 8014b64:	20000018 	.word	0x20000018
 8014b68:	10624dd3 	.word	0x10624dd3
 8014b6c:	002000c5 	.word	0x002000c5

08014b70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b78:	4b1a      	ldr	r3, [pc, #104]	; (8014be4 <SDMMC_GetCmdResp3+0x74>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4a1a      	ldr	r2, [pc, #104]	; (8014be8 <SDMMC_GetCmdResp3+0x78>)
 8014b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8014b82:	0a5b      	lsrs	r3, r3, #9
 8014b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b88:	fb02 f303 	mul.w	r3, r2, r3
 8014b8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	1e5a      	subs	r2, r3, #1
 8014b92:	60fa      	str	r2, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b9c:	e01b      	b.n	8014bd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ba2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d0ef      	beq.n	8014b8e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d1ea      	bne.n	8014b8e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bbc:	f003 0304 	and.w	r3, r3, #4
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d004      	beq.n	8014bce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2204      	movs	r2, #4
 8014bc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014bca:	2304      	movs	r3, #4
 8014bcc:	e003      	b.n	8014bd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	4a06      	ldr	r2, [pc, #24]	; (8014bec <SDMMC_GetCmdResp3+0x7c>)
 8014bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	20000018 	.word	0x20000018
 8014be8:	10624dd3 	.word	0x10624dd3
 8014bec:	002000c5 	.word	0x002000c5

08014bf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	607a      	str	r2, [r7, #4]
 8014bfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014bfe:	4b35      	ldr	r3, [pc, #212]	; (8014cd4 <SDMMC_GetCmdResp6+0xe4>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	4a35      	ldr	r2, [pc, #212]	; (8014cd8 <SDMMC_GetCmdResp6+0xe8>)
 8014c04:	fba2 2303 	umull	r2, r3, r2, r3
 8014c08:	0a5b      	lsrs	r3, r3, #9
 8014c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c0e:	fb02 f303 	mul.w	r3, r2, r3
 8014c12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	1e5a      	subs	r2, r3, #1
 8014c18:	61fa      	str	r2, [r7, #28]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d102      	bne.n	8014c24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c22:	e052      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c28:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c2a:	69bb      	ldr	r3, [r7, #24]
 8014c2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d0ef      	beq.n	8014c14 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d1ea      	bne.n	8014c14 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c42:	f003 0304 	and.w	r3, r3, #4
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d004      	beq.n	8014c54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2204      	movs	r2, #4
 8014c4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c50:	2304      	movs	r3, #4
 8014c52:	e03a      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c58:	f003 0301 	and.w	r3, r3, #1
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d004      	beq.n	8014c6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2201      	movs	r2, #1
 8014c64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c66:	2301      	movs	r3, #1
 8014c68:	e02f      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014c6a:	68f8      	ldr	r0, [r7, #12]
 8014c6c:	f7ff fb7c 	bl	8014368 <SDMMC_GetCommandResponse>
 8014c70:	4603      	mov	r3, r0
 8014c72:	461a      	mov	r2, r3
 8014c74:	7afb      	ldrb	r3, [r7, #11]
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d001      	beq.n	8014c7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e025      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	4a16      	ldr	r2, [pc, #88]	; (8014cdc <SDMMC_GetCmdResp6+0xec>)
 8014c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014c84:	2100      	movs	r1, #0
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7ff fb7b 	bl	8014382 <SDMMC_GetResponse>
 8014c8c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d106      	bne.n	8014ca6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	0c1b      	lsrs	r3, r3, #16
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	e011      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d002      	beq.n	8014cb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014cb4:	e009      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014cc4:	e001      	b.n	8014cca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3720      	adds	r7, #32
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	20000018 	.word	0x20000018
 8014cd8:	10624dd3 	.word	0x10624dd3
 8014cdc:	002000c5 	.word	0x002000c5

08014ce0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014ce8:	4b22      	ldr	r3, [pc, #136]	; (8014d74 <SDMMC_GetCmdResp7+0x94>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4a22      	ldr	r2, [pc, #136]	; (8014d78 <SDMMC_GetCmdResp7+0x98>)
 8014cee:	fba2 2303 	umull	r2, r3, r2, r3
 8014cf2:	0a5b      	lsrs	r3, r3, #9
 8014cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8014cf8:	fb02 f303 	mul.w	r3, r2, r3
 8014cfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	1e5a      	subs	r2, r3, #1
 8014d02:	60fa      	str	r2, [r7, #12]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d102      	bne.n	8014d0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d0c:	e02c      	b.n	8014d68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d0ef      	beq.n	8014cfe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d1ea      	bne.n	8014cfe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d2c:	f003 0304 	and.w	r3, r3, #4
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d004      	beq.n	8014d3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2204      	movs	r2, #4
 8014d38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d3a:	2304      	movs	r3, #4
 8014d3c:	e014      	b.n	8014d68 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d004      	beq.n	8014d54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d50:	2301      	movs	r3, #1
 8014d52:	e009      	b.n	8014d68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d002      	beq.n	8014d66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2240      	movs	r2, #64	; 0x40
 8014d64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014d66:	2300      	movs	r3, #0

}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3714      	adds	r7, #20
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr
 8014d74:	20000018 	.word	0x20000018
 8014d78:	10624dd3 	.word	0x10624dd3

08014d7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b085      	sub	sp, #20
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014d84:	4b11      	ldr	r3, [pc, #68]	; (8014dcc <SDMMC_GetCmdError+0x50>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4a11      	ldr	r2, [pc, #68]	; (8014dd0 <SDMMC_GetCmdError+0x54>)
 8014d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8014d8e:	0a5b      	lsrs	r3, r3, #9
 8014d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d94:	fb02 f303 	mul.w	r3, r2, r3
 8014d98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	1e5a      	subs	r2, r3, #1
 8014d9e:	60fa      	str	r2, [r7, #12]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d102      	bne.n	8014daa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014da8:	e009      	b.n	8014dbe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d0f1      	beq.n	8014d9a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	4a06      	ldr	r2, [pc, #24]	; (8014dd4 <SDMMC_GetCmdError+0x58>)
 8014dba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014dbc:	2300      	movs	r3, #0
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3714      	adds	r7, #20
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	20000018 	.word	0x20000018
 8014dd0:	10624dd3 	.word	0x10624dd3
 8014dd4:	002000c5 	.word	0x002000c5

08014dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014dd8:	b084      	sub	sp, #16
 8014dda:	b580      	push	{r7, lr}
 8014ddc:	b084      	sub	sp, #16
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	6078      	str	r0, [r7, #4]
 8014de2:	f107 001c 	add.w	r0, r7, #28
 8014de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	d120      	bne.n	8014e32 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68da      	ldr	r2, [r3, #12]
 8014e00:	4b2a      	ldr	r3, [pc, #168]	; (8014eac <USB_CoreInit+0xd4>)
 8014e02:	4013      	ands	r3, r2
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d105      	bne.n	8014e26 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	68db      	ldr	r3, [r3, #12]
 8014e1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f000 f9ee 	bl	8015208 <USB_CoreReset>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	73fb      	strb	r3, [r7, #15]
 8014e30:	e01a      	b.n	8014e68 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	68db      	ldr	r3, [r3, #12]
 8014e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 f9e2 	bl	8015208 <USB_CoreReset>
 8014e44:	4603      	mov	r3, r0
 8014e46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d106      	bne.n	8014e5c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	639a      	str	r2, [r3, #56]	; 0x38
 8014e5a:	e005      	b.n	8014e68 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d116      	bne.n	8014e9c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014e7c:	4b0c      	ldr	r3, [pc, #48]	; (8014eb0 <USB_CoreInit+0xd8>)
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	f043 0206 	orr.w	r2, r3, #6
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	f043 0220 	orr.w	r2, r3, #32
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3710      	adds	r7, #16
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014ea8:	b004      	add	sp, #16
 8014eaa:	4770      	bx	lr
 8014eac:	ffbdffbf 	.word	0xffbdffbf
 8014eb0:	03ee0000 	.word	0x03ee0000

08014eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	689b      	ldr	r3, [r3, #8]
 8014ec0:	f043 0201 	orr.w	r2, r3, #1
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ed6:	b480      	push	{r7}
 8014ed8:	b083      	sub	sp, #12
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	689b      	ldr	r3, [r3, #8]
 8014ee2:	f023 0201 	bic.w	r2, r3, #1
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014eea:	2300      	movs	r3, #0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	370c      	adds	r7, #12
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	460b      	mov	r3, r1
 8014f02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014f04:	2300      	movs	r3, #0
 8014f06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014f14:	78fb      	ldrb	r3, [r7, #3]
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d115      	bne.n	8014f46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	68db      	ldr	r3, [r3, #12]
 8014f1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014f26:	2001      	movs	r0, #1
 8014f28:	f7f0 faac 	bl	8005484 <HAL_Delay>
      ms++;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 f95a 	bl	80151ec <USB_GetMode>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d01e      	beq.n	8014f7c <USB_SetCurrentMode+0x84>
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2b31      	cmp	r3, #49	; 0x31
 8014f42:	d9f0      	bls.n	8014f26 <USB_SetCurrentMode+0x2e>
 8014f44:	e01a      	b.n	8014f7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014f46:	78fb      	ldrb	r3, [r7, #3]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d115      	bne.n	8014f78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014f58:	2001      	movs	r0, #1
 8014f5a:	f7f0 fa93 	bl	8005484 <HAL_Delay>
      ms++;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3301      	adds	r3, #1
 8014f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 f941 	bl	80151ec <USB_GetMode>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d005      	beq.n	8014f7c <USB_SetCurrentMode+0x84>
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2b31      	cmp	r3, #49	; 0x31
 8014f74:	d9f0      	bls.n	8014f58 <USB_SetCurrentMode+0x60>
 8014f76:	e001      	b.n	8014f7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014f78:	2301      	movs	r3, #1
 8014f7a:	e005      	b.n	8014f88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2b32      	cmp	r3, #50	; 0x32
 8014f80:	d101      	bne.n	8014f86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014f82:	2301      	movs	r3, #1
 8014f84:	e000      	b.n	8014f88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014f86:	2300      	movs	r3, #0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3710      	adds	r7, #16
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}

08014f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014f90:	b480      	push	{r7}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	4a13      	ldr	r2, [pc, #76]	; (8014ff4 <USB_FlushTxFifo+0x64>)
 8014fa8:	4293      	cmp	r3, r2
 8014faa:	d901      	bls.n	8014fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014fac:	2303      	movs	r3, #3
 8014fae:	e01b      	b.n	8014fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	691b      	ldr	r3, [r3, #16]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	daf2      	bge.n	8014f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	019b      	lsls	r3, r3, #6
 8014fc0:	f043 0220 	orr.w	r2, r3, #32
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	4a08      	ldr	r2, [pc, #32]	; (8014ff4 <USB_FlushTxFifo+0x64>)
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	d901      	bls.n	8014fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014fd6:	2303      	movs	r3, #3
 8014fd8:	e006      	b.n	8014fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	691b      	ldr	r3, [r3, #16]
 8014fde:	f003 0320 	and.w	r3, r3, #32
 8014fe2:	2b20      	cmp	r3, #32
 8014fe4:	d0f0      	beq.n	8014fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014fe6:	2300      	movs	r3, #0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3714      	adds	r7, #20
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr
 8014ff4:	00030d40 	.word	0x00030d40

08014ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b085      	sub	sp, #20
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015000:	2300      	movs	r3, #0
 8015002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	3301      	adds	r3, #1
 8015008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	4a11      	ldr	r2, [pc, #68]	; (8015054 <USB_FlushRxFifo+0x5c>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d901      	bls.n	8015016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015012:	2303      	movs	r3, #3
 8015014:	e018      	b.n	8015048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	691b      	ldr	r3, [r3, #16]
 801501a:	2b00      	cmp	r3, #0
 801501c:	daf2      	bge.n	8015004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801501e:	2300      	movs	r3, #0
 8015020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2210      	movs	r2, #16
 8015026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	3301      	adds	r3, #1
 801502c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	4a08      	ldr	r2, [pc, #32]	; (8015054 <USB_FlushRxFifo+0x5c>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d901      	bls.n	801503a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015036:	2303      	movs	r3, #3
 8015038:	e006      	b.n	8015048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	f003 0310 	and.w	r3, r3, #16
 8015042:	2b10      	cmp	r3, #16
 8015044:	d0f0      	beq.n	8015028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3714      	adds	r7, #20
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	00030d40 	.word	0x00030d40

08015058 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015058:	b480      	push	{r7}
 801505a:	b089      	sub	sp, #36	; 0x24
 801505c:	af00      	add	r7, sp, #0
 801505e:	60f8      	str	r0, [r7, #12]
 8015060:	60b9      	str	r1, [r7, #8]
 8015062:	4611      	mov	r1, r2
 8015064:	461a      	mov	r2, r3
 8015066:	460b      	mov	r3, r1
 8015068:	71fb      	strb	r3, [r7, #7]
 801506a:	4613      	mov	r3, r2
 801506c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801507a:	2b00      	cmp	r3, #0
 801507c:	d123      	bne.n	80150c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801507e:	88bb      	ldrh	r3, [r7, #4]
 8015080:	3303      	adds	r3, #3
 8015082:	089b      	lsrs	r3, r3, #2
 8015084:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015086:	2300      	movs	r3, #0
 8015088:	61bb      	str	r3, [r7, #24]
 801508a:	e018      	b.n	80150be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	031a      	lsls	r2, r3, #12
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	4413      	add	r3, r2
 8015094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015098:	461a      	mov	r2, r3
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	3301      	adds	r3, #1
 80150a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	3301      	adds	r3, #1
 80150aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	3301      	adds	r3, #1
 80150b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	3301      	adds	r3, #1
 80150b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	3301      	adds	r3, #1
 80150bc:	61bb      	str	r3, [r7, #24]
 80150be:	69ba      	ldr	r2, [r7, #24]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d3e2      	bcc.n	801508c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80150c6:	2300      	movs	r3, #0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3724      	adds	r7, #36	; 0x24
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b08b      	sub	sp, #44	; 0x2c
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	4613      	mov	r3, r2
 80150e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80150ea:	88fb      	ldrh	r3, [r7, #6]
 80150ec:	089b      	lsrs	r3, r3, #2
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80150f2:	88fb      	ldrh	r3, [r7, #6]
 80150f4:	f003 0303 	and.w	r3, r3, #3
 80150f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80150fa:	2300      	movs	r3, #0
 80150fc:	623b      	str	r3, [r7, #32]
 80150fe:	e014      	b.n	801512a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510a:	601a      	str	r2, [r3, #0]
    pDest++;
 801510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510e:	3301      	adds	r3, #1
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015114:	3301      	adds	r3, #1
 8015116:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	3301      	adds	r3, #1
 801511c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015120:	3301      	adds	r3, #1
 8015122:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015124:	6a3b      	ldr	r3, [r7, #32]
 8015126:	3301      	adds	r3, #1
 8015128:	623b      	str	r3, [r7, #32]
 801512a:	6a3a      	ldr	r2, [r7, #32]
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	429a      	cmp	r2, r3
 8015130:	d3e6      	bcc.n	8015100 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015132:	8bfb      	ldrh	r3, [r7, #30]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d01e      	beq.n	8015176 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015138:	2300      	movs	r3, #0
 801513a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801513c:	69bb      	ldr	r3, [r7, #24]
 801513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015142:	461a      	mov	r2, r3
 8015144:	f107 0310 	add.w	r3, r7, #16
 8015148:	6812      	ldr	r2, [r2, #0]
 801514a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801514c:	693a      	ldr	r2, [r7, #16]
 801514e:	6a3b      	ldr	r3, [r7, #32]
 8015150:	b2db      	uxtb	r3, r3
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	fa22 f303 	lsr.w	r3, r2, r3
 8015158:	b2da      	uxtb	r2, r3
 801515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515c:	701a      	strb	r2, [r3, #0]
      i++;
 801515e:	6a3b      	ldr	r3, [r7, #32]
 8015160:	3301      	adds	r3, #1
 8015162:	623b      	str	r3, [r7, #32]
      pDest++;
 8015164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015166:	3301      	adds	r3, #1
 8015168:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801516a:	8bfb      	ldrh	r3, [r7, #30]
 801516c:	3b01      	subs	r3, #1
 801516e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015170:	8bfb      	ldrh	r3, [r7, #30]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d1ea      	bne.n	801514c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015178:	4618      	mov	r0, r3
 801517a:	372c      	adds	r7, #44	; 0x2c
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015184:	b480      	push	{r7}
 8015186:	b085      	sub	sp, #20
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	695b      	ldr	r3, [r3, #20]
 8015190:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	699b      	ldr	r3, [r3, #24]
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	4013      	ands	r3, r2
 801519a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801519c:	68fb      	ldr	r3, [r7, #12]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3714      	adds	r7, #20
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80151aa:	b480      	push	{r7}
 80151ac:	b085      	sub	sp, #20
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
 80151b2:	460b      	mov	r3, r1
 80151b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80151ba:	78fb      	ldrb	r3, [r7, #3]
 80151bc:	015a      	lsls	r2, r3, #5
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	4413      	add	r3, r2
 80151c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80151ca:	78fb      	ldrb	r3, [r7, #3]
 80151cc:	015a      	lsls	r2, r3, #5
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	4413      	add	r3, r2
 80151d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	4013      	ands	r3, r2
 80151dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80151de:	68bb      	ldr	r3, [r7, #8]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3714      	adds	r7, #20
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b083      	sub	sp, #12
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	695b      	ldr	r3, [r3, #20]
 80151f8:	f003 0301 	and.w	r3, r3, #1
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	370c      	adds	r7, #12
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr

08015208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015208:	b480      	push	{r7}
 801520a:	b085      	sub	sp, #20
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015210:	2300      	movs	r3, #0
 8015212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	3301      	adds	r3, #1
 8015218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	4a13      	ldr	r2, [pc, #76]	; (801526c <USB_CoreReset+0x64>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d901      	bls.n	8015226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015222:	2303      	movs	r3, #3
 8015224:	e01b      	b.n	801525e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	691b      	ldr	r3, [r3, #16]
 801522a:	2b00      	cmp	r3, #0
 801522c:	daf2      	bge.n	8015214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801522e:	2300      	movs	r3, #0
 8015230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	691b      	ldr	r3, [r3, #16]
 8015236:	f043 0201 	orr.w	r2, r3, #1
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	3301      	adds	r3, #1
 8015242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	4a09      	ldr	r2, [pc, #36]	; (801526c <USB_CoreReset+0x64>)
 8015248:	4293      	cmp	r3, r2
 801524a:	d901      	bls.n	8015250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801524c:	2303      	movs	r3, #3
 801524e:	e006      	b.n	801525e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	691b      	ldr	r3, [r3, #16]
 8015254:	f003 0301 	and.w	r3, r3, #1
 8015258:	2b01      	cmp	r3, #1
 801525a:	d0f0      	beq.n	801523e <USB_CoreReset+0x36>

  return HAL_OK;
 801525c:	2300      	movs	r3, #0
}
 801525e:	4618      	mov	r0, r3
 8015260:	3714      	adds	r7, #20
 8015262:	46bd      	mov	sp, r7
 8015264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015268:	4770      	bx	lr
 801526a:	bf00      	nop
 801526c:	00030d40 	.word	0x00030d40

08015270 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015270:	b084      	sub	sp, #16
 8015272:	b580      	push	{r7, lr}
 8015274:	b086      	sub	sp, #24
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
 801527a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015282:	2300      	movs	r3, #0
 8015284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015290:	461a      	mov	r2, r3
 8015292:	2300      	movs	r3, #0
 8015294:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801529a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d018      	beq.n	80152ec <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d10a      	bne.n	80152d6 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	68fa      	ldr	r2, [r7, #12]
 80152ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80152ce:	f043 0304 	orr.w	r3, r3, #4
 80152d2:	6013      	str	r3, [r2, #0]
 80152d4:	e014      	b.n	8015300 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	68fa      	ldr	r2, [r7, #12]
 80152e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80152e4:	f023 0304 	bic.w	r3, r3, #4
 80152e8:	6013      	str	r3, [r2, #0]
 80152ea:	e009      	b.n	8015300 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80152fa:	f023 0304 	bic.w	r3, r3, #4
 80152fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015300:	2110      	movs	r1, #16
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f7ff fe44 	bl	8014f90 <USB_FlushTxFifo>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d001      	beq.n	8015312 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 801530e:	2301      	movs	r3, #1
 8015310:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7ff fe70 	bl	8014ff8 <USB_FlushRxFifo>
 8015318:	4603      	mov	r3, r0
 801531a:	2b00      	cmp	r3, #0
 801531c:	d001      	beq.n	8015322 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 801531e:	2301      	movs	r3, #1
 8015320:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8015322:	2300      	movs	r3, #0
 8015324:	613b      	str	r3, [r7, #16]
 8015326:	e015      	b.n	8015354 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	015a      	lsls	r2, r3, #5
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	4413      	add	r3, r2
 8015330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015334:	461a      	mov	r2, r3
 8015336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801533a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	015a      	lsls	r2, r3, #5
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	4413      	add	r3, r2
 8015344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015348:	461a      	mov	r2, r3
 801534a:	2300      	movs	r3, #0
 801534c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	3301      	adds	r3, #1
 8015352:	613b      	str	r3, [r7, #16]
 8015354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015356:	693a      	ldr	r2, [r7, #16]
 8015358:	429a      	cmp	r2, r3
 801535a:	d3e5      	bcc.n	8015328 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2200      	movs	r2, #0
 8015360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015368:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00b      	beq.n	801538e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801537c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	4a13      	ldr	r2, [pc, #76]	; (80153d0 <USB_HostInit+0x160>)
 8015382:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	4a13      	ldr	r2, [pc, #76]	; (80153d4 <USB_HostInit+0x164>)
 8015388:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801538c:	e009      	b.n	80153a2 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2280      	movs	r2, #128	; 0x80
 8015392:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	4a10      	ldr	r2, [pc, #64]	; (80153d8 <USB_HostInit+0x168>)
 8015398:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	4a0f      	ldr	r2, [pc, #60]	; (80153dc <USB_HostInit+0x16c>)
 801539e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80153a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d105      	bne.n	80153b4 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	699b      	ldr	r3, [r3, #24]
 80153ac:	f043 0210 	orr.w	r2, r3, #16
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	699a      	ldr	r2, [r3, #24]
 80153b8:	4b09      	ldr	r3, [pc, #36]	; (80153e0 <USB_HostInit+0x170>)
 80153ba:	4313      	orrs	r3, r2
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80153c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3718      	adds	r7, #24
 80153c6:	46bd      	mov	sp, r7
 80153c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80153cc:	b004      	add	sp, #16
 80153ce:	4770      	bx	lr
 80153d0:	01000200 	.word	0x01000200
 80153d4:	00e00300 	.word	0x00e00300
 80153d8:	00600080 	.word	0x00600080
 80153dc:	004000e0 	.word	0x004000e0
 80153e0:	a3200008 	.word	0xa3200008

080153e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80153e4:	b480      	push	{r7}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	460b      	mov	r3, r1
 80153ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	68fa      	ldr	r2, [r7, #12]
 80153fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015402:	f023 0303 	bic.w	r3, r3, #3
 8015406:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	78fb      	ldrb	r3, [r7, #3]
 8015412:	f003 0303 	and.w	r3, r3, #3
 8015416:	68f9      	ldr	r1, [r7, #12]
 8015418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801541c:	4313      	orrs	r3, r2
 801541e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8015420:	78fb      	ldrb	r3, [r7, #3]
 8015422:	2b01      	cmp	r3, #1
 8015424:	d107      	bne.n	8015436 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801542c:	461a      	mov	r2, r3
 801542e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8015432:	6053      	str	r3, [r2, #4]
 8015434:	e00c      	b.n	8015450 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8015436:	78fb      	ldrb	r3, [r7, #3]
 8015438:	2b02      	cmp	r3, #2
 801543a:	d107      	bne.n	801544c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015442:	461a      	mov	r2, r3
 8015444:	f241 7370 	movw	r3, #6000	; 0x1770
 8015448:	6053      	str	r3, [r2, #4]
 801544a:	e001      	b.n	8015450 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801544c:	2301      	movs	r3, #1
 801544e:	e000      	b.n	8015452 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	3714      	adds	r7, #20
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr

0801545e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801546a:	2300      	movs	r3, #0
 801546c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801547e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801548c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801548e:	2064      	movs	r0, #100	; 0x64
 8015490:	f7ef fff8 	bl	8005484 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	68fa      	ldr	r2, [r7, #12]
 8015498:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801549c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80154a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80154a2:	200a      	movs	r0, #10
 80154a4:	f7ef ffee 	bl	8005484 <HAL_Delay>

  return HAL_OK;
 80154a8:	2300      	movs	r3, #0
}
 80154aa:	4618      	mov	r0, r3
 80154ac:	3710      	adds	r7, #16
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}

080154b2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80154b2:	b480      	push	{r7}
 80154b4:	b085      	sub	sp, #20
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	460b      	mov	r3, r1
 80154bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80154c2:	2300      	movs	r3, #0
 80154c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80154d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d109      	bne.n	80154f6 <USB_DriveVbus+0x44>
 80154e2:	78fb      	ldrb	r3, [r7, #3]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d106      	bne.n	80154f6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	68fa      	ldr	r2, [r7, #12]
 80154ec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80154f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80154f4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80154fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015500:	d109      	bne.n	8015516 <USB_DriveVbus+0x64>
 8015502:	78fb      	ldrb	r3, [r7, #3]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d106      	bne.n	8015516 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015514:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3714      	adds	r7, #20
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015524:	b480      	push	{r7}
 8015526:	b085      	sub	sp, #20
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8015530:	2300      	movs	r3, #0
 8015532:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	0c5b      	lsrs	r3, r3, #17
 8015542:	f003 0303 	and.w	r3, r3, #3
}
 8015546:	4618      	mov	r0, r3
 8015548:	3714      	adds	r7, #20
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr

08015552 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8015552:	b480      	push	{r7}
 8015554:	b085      	sub	sp, #20
 8015556:	af00      	add	r7, sp, #0
 8015558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015564:	689b      	ldr	r3, [r3, #8]
 8015566:	b29b      	uxth	r3, r3
}
 8015568:	4618      	mov	r0, r3
 801556a:	3714      	adds	r7, #20
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr

08015574 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b088      	sub	sp, #32
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	4608      	mov	r0, r1
 801557e:	4611      	mov	r1, r2
 8015580:	461a      	mov	r2, r3
 8015582:	4603      	mov	r3, r0
 8015584:	70fb      	strb	r3, [r7, #3]
 8015586:	460b      	mov	r3, r1
 8015588:	70bb      	strb	r3, [r7, #2]
 801558a:	4613      	mov	r3, r2
 801558c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8015596:	78fb      	ldrb	r3, [r7, #3]
 8015598:	015a      	lsls	r2, r3, #5
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	4413      	add	r3, r2
 801559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155a2:	461a      	mov	r2, r3
 80155a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80155aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80155ae:	2b03      	cmp	r3, #3
 80155b0:	d87e      	bhi.n	80156b0 <USB_HC_Init+0x13c>
 80155b2:	a201      	add	r2, pc, #4	; (adr r2, 80155b8 <USB_HC_Init+0x44>)
 80155b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155b8:	080155c9 	.word	0x080155c9
 80155bc:	08015673 	.word	0x08015673
 80155c0:	080155c9 	.word	0x080155c9
 80155c4:	08015635 	.word	0x08015635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80155c8:	78fb      	ldrb	r3, [r7, #3]
 80155ca:	015a      	lsls	r2, r3, #5
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	4413      	add	r3, r2
 80155d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155d4:	461a      	mov	r2, r3
 80155d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80155da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80155dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	da10      	bge.n	8015606 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80155e4:	78fb      	ldrb	r3, [r7, #3]
 80155e6:	015a      	lsls	r2, r3, #5
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	4413      	add	r3, r2
 80155ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	78fa      	ldrb	r2, [r7, #3]
 80155f4:	0151      	lsls	r1, r2, #5
 80155f6:	693a      	ldr	r2, [r7, #16]
 80155f8:	440a      	add	r2, r1
 80155fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015602:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8015604:	e057      	b.n	80156b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801560e:	2b00      	cmp	r3, #0
 8015610:	d051      	beq.n	80156b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8015612:	78fb      	ldrb	r3, [r7, #3]
 8015614:	015a      	lsls	r2, r3, #5
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	4413      	add	r3, r2
 801561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	78fa      	ldrb	r2, [r7, #3]
 8015622:	0151      	lsls	r1, r2, #5
 8015624:	693a      	ldr	r2, [r7, #16]
 8015626:	440a      	add	r2, r1
 8015628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801562c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8015630:	60d3      	str	r3, [r2, #12]
      break;
 8015632:	e040      	b.n	80156b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015634:	78fb      	ldrb	r3, [r7, #3]
 8015636:	015a      	lsls	r2, r3, #5
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	4413      	add	r3, r2
 801563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015640:	461a      	mov	r2, r3
 8015642:	f240 639d 	movw	r3, #1693	; 0x69d
 8015646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801564c:	2b00      	cmp	r3, #0
 801564e:	da34      	bge.n	80156ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	015a      	lsls	r2, r3, #5
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	4413      	add	r3, r2
 8015658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	78fa      	ldrb	r2, [r7, #3]
 8015660:	0151      	lsls	r1, r2, #5
 8015662:	693a      	ldr	r2, [r7, #16]
 8015664:	440a      	add	r2, r1
 8015666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801566e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015670:	e023      	b.n	80156ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015672:	78fb      	ldrb	r3, [r7, #3]
 8015674:	015a      	lsls	r2, r3, #5
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	4413      	add	r3, r2
 801567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801567e:	461a      	mov	r2, r3
 8015680:	f240 2325 	movw	r3, #549	; 0x225
 8015684:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801568a:	2b00      	cmp	r3, #0
 801568c:	da17      	bge.n	80156be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801568e:	78fb      	ldrb	r3, [r7, #3]
 8015690:	015a      	lsls	r2, r3, #5
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	4413      	add	r3, r2
 8015696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	78fa      	ldrb	r2, [r7, #3]
 801569e:	0151      	lsls	r1, r2, #5
 80156a0:	693a      	ldr	r2, [r7, #16]
 80156a2:	440a      	add	r2, r1
 80156a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80156ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80156ae:	e006      	b.n	80156be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80156b0:	2301      	movs	r3, #1
 80156b2:	77fb      	strb	r3, [r7, #31]
      break;
 80156b4:	e004      	b.n	80156c0 <USB_HC_Init+0x14c>
      break;
 80156b6:	bf00      	nop
 80156b8:	e002      	b.n	80156c0 <USB_HC_Init+0x14c>
      break;
 80156ba:	bf00      	nop
 80156bc:	e000      	b.n	80156c0 <USB_HC_Init+0x14c>
      break;
 80156be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80156c0:	78fb      	ldrb	r3, [r7, #3]
 80156c2:	015a      	lsls	r2, r3, #5
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	4413      	add	r3, r2
 80156c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	78fa      	ldrb	r2, [r7, #3]
 80156d0:	0151      	lsls	r1, r2, #5
 80156d2:	693a      	ldr	r2, [r7, #16]
 80156d4:	440a      	add	r2, r1
 80156d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156da:	f043 0302 	orr.w	r3, r3, #2
 80156de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80156e6:	699a      	ldr	r2, [r3, #24]
 80156e8:	78fb      	ldrb	r3, [r7, #3]
 80156ea:	f003 030f 	and.w	r3, r3, #15
 80156ee:	2101      	movs	r1, #1
 80156f0:	fa01 f303 	lsl.w	r3, r1, r3
 80156f4:	6939      	ldr	r1, [r7, #16]
 80156f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80156fa:	4313      	orrs	r3, r2
 80156fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801570a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801570e:	2b00      	cmp	r3, #0
 8015710:	da03      	bge.n	801571a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8015712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015716:	61bb      	str	r3, [r7, #24]
 8015718:	e001      	b.n	801571e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 801571a:	2300      	movs	r3, #0
 801571c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7ff ff00 	bl	8015524 <USB_GetHostSpeed>
 8015724:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8015726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801572a:	2b02      	cmp	r3, #2
 801572c:	d106      	bne.n	801573c <USB_HC_Init+0x1c8>
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	2b02      	cmp	r3, #2
 8015732:	d003      	beq.n	801573c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8015734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015738:	617b      	str	r3, [r7, #20]
 801573a:	e001      	b.n	8015740 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801573c:	2300      	movs	r3, #0
 801573e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015740:	787b      	ldrb	r3, [r7, #1]
 8015742:	059b      	lsls	r3, r3, #22
 8015744:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015748:	78bb      	ldrb	r3, [r7, #2]
 801574a:	02db      	lsls	r3, r3, #11
 801574c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015750:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015756:	049b      	lsls	r3, r3, #18
 8015758:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801575c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 801575e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015760:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015764:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	431a      	orrs	r2, r3
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801576e:	78fa      	ldrb	r2, [r7, #3]
 8015770:	0151      	lsls	r1, r2, #5
 8015772:	693a      	ldr	r2, [r7, #16]
 8015774:	440a      	add	r2, r1
 8015776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801577a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801577e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8015780:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015784:	2b03      	cmp	r3, #3
 8015786:	d003      	beq.n	8015790 <USB_HC_Init+0x21c>
 8015788:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801578c:	2b01      	cmp	r3, #1
 801578e:	d10f      	bne.n	80157b0 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015790:	78fb      	ldrb	r3, [r7, #3]
 8015792:	015a      	lsls	r2, r3, #5
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	4413      	add	r3, r2
 8015798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	78fa      	ldrb	r2, [r7, #3]
 80157a0:	0151      	lsls	r1, r2, #5
 80157a2:	693a      	ldr	r2, [r7, #16]
 80157a4:	440a      	add	r2, r1
 80157a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80157aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80157ae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80157b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3720      	adds	r7, #32
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop

080157bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b08c      	sub	sp, #48	; 0x30
 80157c0:	af02      	add	r7, sp, #8
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	4613      	mov	r3, r2
 80157c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	785b      	ldrb	r3, [r3, #1]
 80157d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80157d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d02d      	beq.n	8015842 <USB_HC_StartXfer+0x86>
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	791b      	ldrb	r3, [r3, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d129      	bne.n	8015842 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80157ee:	79fb      	ldrb	r3, [r7, #7]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d117      	bne.n	8015824 <USB_HC_StartXfer+0x68>
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	79db      	ldrb	r3, [r3, #7]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d003      	beq.n	8015804 <USB_HC_StartXfer+0x48>
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	79db      	ldrb	r3, [r3, #7]
 8015800:	2b02      	cmp	r3, #2
 8015802:	d10f      	bne.n	8015824 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8015804:	69fb      	ldr	r3, [r7, #28]
 8015806:	015a      	lsls	r2, r3, #5
 8015808:	6a3b      	ldr	r3, [r7, #32]
 801580a:	4413      	add	r3, r2
 801580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	69fa      	ldr	r2, [r7, #28]
 8015814:	0151      	lsls	r1, r2, #5
 8015816:	6a3a      	ldr	r2, [r7, #32]
 8015818:	440a      	add	r2, r1
 801581a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015822:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8015824:	79fb      	ldrb	r3, [r7, #7]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d10b      	bne.n	8015842 <USB_HC_StartXfer+0x86>
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	795b      	ldrb	r3, [r3, #5]
 801582e:	2b01      	cmp	r3, #1
 8015830:	d107      	bne.n	8015842 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	785b      	ldrb	r3, [r3, #1]
 8015836:	4619      	mov	r1, r3
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f000 fa0f 	bl	8015c5c <USB_DoPing>
      return HAL_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	e0f8      	b.n	8015a34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	695b      	ldr	r3, [r3, #20]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d018      	beq.n	801587c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	695b      	ldr	r3, [r3, #20]
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	8912      	ldrh	r2, [r2, #8]
 8015852:	4413      	add	r3, r2
 8015854:	3b01      	subs	r3, #1
 8015856:	68ba      	ldr	r2, [r7, #8]
 8015858:	8912      	ldrh	r2, [r2, #8]
 801585a:	fbb3 f3f2 	udiv	r3, r3, r2
 801585e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8015860:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015862:	8b7b      	ldrh	r3, [r7, #26]
 8015864:	429a      	cmp	r2, r3
 8015866:	d90b      	bls.n	8015880 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8015868:	8b7b      	ldrh	r3, [r7, #26]
 801586a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801586c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	8912      	ldrh	r2, [r2, #8]
 8015872:	fb03 f202 	mul.w	r2, r3, r2
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	611a      	str	r2, [r3, #16]
 801587a:	e001      	b.n	8015880 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 801587c:	2301      	movs	r3, #1
 801587e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	78db      	ldrb	r3, [r3, #3]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d007      	beq.n	8015898 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801588a:	68ba      	ldr	r2, [r7, #8]
 801588c:	8912      	ldrh	r2, [r2, #8]
 801588e:	fb03 f202 	mul.w	r2, r3, r2
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	611a      	str	r2, [r3, #16]
 8015896:	e003      	b.n	80158a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	695a      	ldr	r2, [r3, #20]
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	691b      	ldr	r3, [r3, #16]
 80158a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80158a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158aa:	04d9      	lsls	r1, r3, #19
 80158ac:	4b63      	ldr	r3, [pc, #396]	; (8015a3c <USB_HC_StartXfer+0x280>)
 80158ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80158b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	7a9b      	ldrb	r3, [r3, #10]
 80158b6:	075b      	lsls	r3, r3, #29
 80158b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80158bc:	69f9      	ldr	r1, [r7, #28]
 80158be:	0148      	lsls	r0, r1, #5
 80158c0:	6a39      	ldr	r1, [r7, #32]
 80158c2:	4401      	add	r1, r0
 80158c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80158c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80158ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80158cc:	79fb      	ldrb	r3, [r7, #7]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d009      	beq.n	80158e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	68d9      	ldr	r1, [r3, #12]
 80158d6:	69fb      	ldr	r3, [r7, #28]
 80158d8:	015a      	lsls	r2, r3, #5
 80158da:	6a3b      	ldr	r3, [r7, #32]
 80158dc:	4413      	add	r3, r2
 80158de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158e2:	460a      	mov	r2, r1
 80158e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80158e6:	6a3b      	ldr	r3, [r7, #32]
 80158e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80158ec:	689b      	ldr	r3, [r3, #8]
 80158ee:	f003 0301 	and.w	r3, r3, #1
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	bf0c      	ite	eq
 80158f6:	2301      	moveq	r3, #1
 80158f8:	2300      	movne	r3, #0
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	015a      	lsls	r2, r3, #5
 8015902:	6a3b      	ldr	r3, [r7, #32]
 8015904:	4413      	add	r3, r2
 8015906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	69fa      	ldr	r2, [r7, #28]
 801590e:	0151      	lsls	r1, r2, #5
 8015910:	6a3a      	ldr	r2, [r7, #32]
 8015912:	440a      	add	r2, r1
 8015914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015918:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801591c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	015a      	lsls	r2, r3, #5
 8015922:	6a3b      	ldr	r3, [r7, #32]
 8015924:	4413      	add	r3, r2
 8015926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	7e7b      	ldrb	r3, [r7, #25]
 801592e:	075b      	lsls	r3, r3, #29
 8015930:	69f9      	ldr	r1, [r7, #28]
 8015932:	0148      	lsls	r0, r1, #5
 8015934:	6a39      	ldr	r1, [r7, #32]
 8015936:	4401      	add	r1, r0
 8015938:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801593c:	4313      	orrs	r3, r2
 801593e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	015a      	lsls	r2, r3, #5
 8015944:	6a3b      	ldr	r3, [r7, #32]
 8015946:	4413      	add	r3, r2
 8015948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015956:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	78db      	ldrb	r3, [r3, #3]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d004      	beq.n	801596a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015966:	613b      	str	r3, [r7, #16]
 8015968:	e003      	b.n	8015972 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015970:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015978:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	015a      	lsls	r2, r3, #5
 801597e:	6a3b      	ldr	r3, [r7, #32]
 8015980:	4413      	add	r3, r2
 8015982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015986:	461a      	mov	r2, r3
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801598c:	79fb      	ldrb	r3, [r7, #7]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d001      	beq.n	8015996 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015992:	2300      	movs	r3, #0
 8015994:	e04e      	b.n	8015a34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	78db      	ldrb	r3, [r3, #3]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d149      	bne.n	8015a32 <USB_HC_StartXfer+0x276>
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d045      	beq.n	8015a32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	79db      	ldrb	r3, [r3, #7]
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d830      	bhi.n	8015a10 <USB_HC_StartXfer+0x254>
 80159ae:	a201      	add	r2, pc, #4	; (adr r2, 80159b4 <USB_HC_StartXfer+0x1f8>)
 80159b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b4:	080159c5 	.word	0x080159c5
 80159b8:	080159e9 	.word	0x080159e9
 80159bc:	080159c5 	.word	0x080159c5
 80159c0:	080159e9 	.word	0x080159e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	695b      	ldr	r3, [r3, #20]
 80159c8:	3303      	adds	r3, #3
 80159ca:	089b      	lsrs	r3, r3, #2
 80159cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80159ce:	8afa      	ldrh	r2, [r7, #22]
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d91c      	bls.n	8015a14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	699b      	ldr	r3, [r3, #24]
 80159de:	f043 0220 	orr.w	r2, r3, #32
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80159e6:	e015      	b.n	8015a14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	695b      	ldr	r3, [r3, #20]
 80159ec:	3303      	adds	r3, #3
 80159ee:	089b      	lsrs	r3, r3, #2
 80159f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80159f2:	8afa      	ldrh	r2, [r7, #22]
 80159f4:	6a3b      	ldr	r3, [r7, #32]
 80159f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80159fa:	691b      	ldr	r3, [r3, #16]
 80159fc:	b29b      	uxth	r3, r3
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d90a      	bls.n	8015a18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	699b      	ldr	r3, [r3, #24]
 8015a06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8015a0e:	e003      	b.n	8015a18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015a10:	bf00      	nop
 8015a12:	e002      	b.n	8015a1a <USB_HC_StartXfer+0x25e>
        break;
 8015a14:	bf00      	nop
 8015a16:	e000      	b.n	8015a1a <USB_HC_StartXfer+0x25e>
        break;
 8015a18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	68d9      	ldr	r1, [r3, #12]
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	785a      	ldrb	r2, [r3, #1]
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	695b      	ldr	r3, [r3, #20]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	2000      	movs	r0, #0
 8015a2a:	9000      	str	r0, [sp, #0]
 8015a2c:	68f8      	ldr	r0, [r7, #12]
 8015a2e:	f7ff fb13 	bl	8015058 <USB_WritePacket>
  }

  return HAL_OK;
 8015a32:	2300      	movs	r3, #0
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3728      	adds	r7, #40	; 0x28
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	1ff80000 	.word	0x1ff80000

08015a40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b085      	sub	sp, #20
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015a52:	695b      	ldr	r3, [r3, #20]
 8015a54:	b29b      	uxth	r3, r3
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3714      	adds	r7, #20
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a60:	4770      	bx	lr

08015a62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015a62:	b480      	push	{r7}
 8015a64:	b089      	sub	sp, #36	; 0x24
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015a72:	78fb      	ldrb	r3, [r7, #3]
 8015a74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8015a76:	2300      	movs	r3, #0
 8015a78:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	015a      	lsls	r2, r3, #5
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	4413      	add	r3, r2
 8015a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	0c9b      	lsrs	r3, r3, #18
 8015a8a:	f003 0303 	and.w	r3, r3, #3
 8015a8e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	015a      	lsls	r2, r3, #5
 8015a94:	69fb      	ldr	r3, [r7, #28]
 8015a96:	4413      	add	r3, r2
 8015a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	0fdb      	lsrs	r3, r3, #31
 8015aa0:	f003 0301 	and.w	r3, r3, #1
 8015aa4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	f003 0320 	and.w	r3, r3, #32
 8015aae:	2b20      	cmp	r3, #32
 8015ab0:	d104      	bne.n	8015abc <USB_HC_Halt+0x5a>
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d101      	bne.n	8015abc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	e0c8      	b.n	8015c4e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d002      	beq.n	8015ac8 <USB_HC_Halt+0x66>
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2b02      	cmp	r3, #2
 8015ac6:	d163      	bne.n	8015b90 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	015a      	lsls	r2, r3, #5
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	4413      	add	r3, r2
 8015ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	69ba      	ldr	r2, [r7, #24]
 8015ad8:	0151      	lsls	r1, r2, #5
 8015ada:	69fa      	ldr	r2, [r7, #28]
 8015adc:	440a      	add	r2, r1
 8015ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015ae6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	689b      	ldr	r3, [r3, #8]
 8015aec:	f003 0320 	and.w	r3, r3, #32
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f040 80ab 	bne.w	8015c4c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d133      	bne.n	8015b6a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	015a      	lsls	r2, r3, #5
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	4413      	add	r3, r2
 8015b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	69ba      	ldr	r2, [r7, #24]
 8015b12:	0151      	lsls	r1, r2, #5
 8015b14:	69fa      	ldr	r2, [r7, #28]
 8015b16:	440a      	add	r2, r1
 8015b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015b22:	69bb      	ldr	r3, [r7, #24]
 8015b24:	015a      	lsls	r2, r3, #5
 8015b26:	69fb      	ldr	r3, [r7, #28]
 8015b28:	4413      	add	r3, r2
 8015b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	69ba      	ldr	r2, [r7, #24]
 8015b32:	0151      	lsls	r1, r2, #5
 8015b34:	69fa      	ldr	r2, [r7, #28]
 8015b36:	440a      	add	r2, r1
 8015b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b40:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	3301      	adds	r3, #1
 8015b46:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015b4e:	d81d      	bhi.n	8015b8c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015b50:	69bb      	ldr	r3, [r7, #24]
 8015b52:	015a      	lsls	r2, r3, #5
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	4413      	add	r3, r2
 8015b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b66:	d0ec      	beq.n	8015b42 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015b68:	e070      	b.n	8015c4c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	015a      	lsls	r2, r3, #5
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	4413      	add	r3, r2
 8015b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	69ba      	ldr	r2, [r7, #24]
 8015b7a:	0151      	lsls	r1, r2, #5
 8015b7c:	69fa      	ldr	r2, [r7, #28]
 8015b7e:	440a      	add	r2, r1
 8015b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015b8a:	e05f      	b.n	8015c4c <USB_HC_Halt+0x1ea>
            break;
 8015b8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015b8e:	e05d      	b.n	8015c4c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015b90:	69bb      	ldr	r3, [r7, #24]
 8015b92:	015a      	lsls	r2, r3, #5
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	4413      	add	r3, r2
 8015b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	69ba      	ldr	r2, [r7, #24]
 8015ba0:	0151      	lsls	r1, r2, #5
 8015ba2:	69fa      	ldr	r2, [r7, #28]
 8015ba4:	440a      	add	r2, r1
 8015ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015bae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015bb6:	691b      	ldr	r3, [r3, #16]
 8015bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d133      	bne.n	8015c28 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	015a      	lsls	r2, r3, #5
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	69ba      	ldr	r2, [r7, #24]
 8015bd0:	0151      	lsls	r1, r2, #5
 8015bd2:	69fa      	ldr	r2, [r7, #28]
 8015bd4:	440a      	add	r2, r1
 8015bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bde:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	015a      	lsls	r2, r3, #5
 8015be4:	69fb      	ldr	r3, [r7, #28]
 8015be6:	4413      	add	r3, r2
 8015be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	69ba      	ldr	r2, [r7, #24]
 8015bf0:	0151      	lsls	r1, r2, #5
 8015bf2:	69fa      	ldr	r2, [r7, #28]
 8015bf4:	440a      	add	r2, r1
 8015bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015bfe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	3301      	adds	r3, #1
 8015c04:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015c0c:	d81d      	bhi.n	8015c4a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	015a      	lsls	r2, r3, #5
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	4413      	add	r3, r2
 8015c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c24:	d0ec      	beq.n	8015c00 <USB_HC_Halt+0x19e>
 8015c26:	e011      	b.n	8015c4c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015c28:	69bb      	ldr	r3, [r7, #24]
 8015c2a:	015a      	lsls	r2, r3, #5
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	4413      	add	r3, r2
 8015c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	69ba      	ldr	r2, [r7, #24]
 8015c38:	0151      	lsls	r1, r2, #5
 8015c3a:	69fa      	ldr	r2, [r7, #28]
 8015c3c:	440a      	add	r2, r1
 8015c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c46:	6013      	str	r3, [r2, #0]
 8015c48:	e000      	b.n	8015c4c <USB_HC_Halt+0x1ea>
          break;
 8015c4a:	bf00      	nop
    }
  }

  return HAL_OK;
 8015c4c:	2300      	movs	r3, #0
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3724      	adds	r7, #36	; 0x24
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr
	...

08015c5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	b087      	sub	sp, #28
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
 8015c64:	460b      	mov	r3, r1
 8015c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015c6c:	78fb      	ldrb	r3, [r7, #3]
 8015c6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015c70:	2301      	movs	r3, #1
 8015c72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	04da      	lsls	r2, r3, #19
 8015c78:	4b15      	ldr	r3, [pc, #84]	; (8015cd0 <USB_DoPing+0x74>)
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	693a      	ldr	r2, [r7, #16]
 8015c7e:	0151      	lsls	r1, r2, #5
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	440a      	add	r2, r1
 8015c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	015a      	lsls	r2, r3, #5
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	4413      	add	r3, r2
 8015c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015ca4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015cac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	015a      	lsls	r2, r3, #5
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015cba:	461a      	mov	r2, r3
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015cc0:	2300      	movs	r3, #0
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	371c      	adds	r7, #28
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr
 8015cce:	bf00      	nop
 8015cd0:	1ff80000 	.word	0x1ff80000

08015cd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b088      	sub	sp, #32
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f7ff f8f4 	bl	8014ed6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015cee:	2110      	movs	r1, #16
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f7ff f94d 	bl	8014f90 <USB_FlushTxFifo>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d001      	beq.n	8015d00 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7ff f979 	bl	8014ff8 <USB_FlushRxFifo>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d001      	beq.n	8015d10 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015d10:	2300      	movs	r3, #0
 8015d12:	61bb      	str	r3, [r7, #24]
 8015d14:	e01f      	b.n	8015d56 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	015a      	lsls	r2, r3, #5
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	4413      	add	r3, r2
 8015d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015d2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015d3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015d3e:	69bb      	ldr	r3, [r7, #24]
 8015d40:	015a      	lsls	r2, r3, #5
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	4413      	add	r3, r2
 8015d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015d50:	69bb      	ldr	r3, [r7, #24]
 8015d52:	3301      	adds	r3, #1
 8015d54:	61bb      	str	r3, [r7, #24]
 8015d56:	69bb      	ldr	r3, [r7, #24]
 8015d58:	2b0f      	cmp	r3, #15
 8015d5a:	d9dc      	bls.n	8015d16 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	61bb      	str	r3, [r7, #24]
 8015d60:	e034      	b.n	8015dcc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	015a      	lsls	r2, r3, #5
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	4413      	add	r3, r2
 8015d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015d78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015d88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	015a      	lsls	r2, r3, #5
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	4413      	add	r3, r2
 8015d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d96:	461a      	mov	r2, r3
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015da8:	d80c      	bhi.n	8015dc4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015daa:	69bb      	ldr	r3, [r7, #24]
 8015dac:	015a      	lsls	r2, r3, #5
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	4413      	add	r3, r2
 8015db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015dc0:	d0ec      	beq.n	8015d9c <USB_StopHost+0xc8>
 8015dc2:	e000      	b.n	8015dc6 <USB_StopHost+0xf2>
        break;
 8015dc4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	61bb      	str	r3, [r7, #24]
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	2b0f      	cmp	r3, #15
 8015dd0:	d9c7      	bls.n	8015d62 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015dd8:	461a      	mov	r2, r3
 8015dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dde:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015de6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7ff f863 	bl	8014eb4 <USB_EnableGlobalInt>

  return ret;
 8015dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3720      	adds	r7, #32
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	4613      	mov	r3, r2
 8015e04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015e0c:	2302      	movs	r3, #2
 8015e0e:	e029      	b.n	8015e64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	79fa      	ldrb	r2, [r7, #7]
 8015e14:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2200      	movs	r2, #0
 8015e24:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f000 f81f 	bl	8015e6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2200      	movs	r2, #0
 8015e32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2200      	movs	r2, #0
 8015e42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d003      	beq.n	8015e5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	68ba      	ldr	r2, [r7, #8]
 8015e58:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015e5c:	68f8      	ldr	r0, [r7, #12]
 8015e5e:	f7ef f861 	bl	8004f24 <USBH_LL_Init>

  return USBH_OK;
 8015e62:	2300      	movs	r3, #0
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015e74:	2300      	movs	r3, #0
 8015e76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015e78:	2300      	movs	r3, #0
 8015e7a:	60fb      	str	r3, [r7, #12]
 8015e7c:	e00a      	b.n	8015e94 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	4413      	add	r3, r2
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	3301      	adds	r3, #1
 8015e92:	60fb      	str	r3, [r7, #12]
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2b0f      	cmp	r3, #15
 8015e98:	d9f1      	bls.n	8015e7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	60fb      	str	r3, [r7, #12]
 8015e9e:	e009      	b.n	8015eb4 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015eaa:	2200      	movs	r2, #0
 8015eac:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	60fb      	str	r3, [r7, #12]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015eba:	d3f1      	bcc.n	8015ea0 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2201      	movs	r2, #1
 8015eda:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2240      	movs	r2, #64	; 0x40
 8015ee0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2200      	movs	r2, #0
 8015f04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	331c      	adds	r3, #28
 8015f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f10:	2100      	movs	r1, #0
 8015f12:	4618      	mov	r0, r3
 8015f14:	f001 fd96 	bl	8017a44 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f22:	2100      	movs	r1, #0
 8015f24:	4618      	mov	r0, r3
 8015f26:	f001 fd8d 	bl	8017a44 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015f30:	2212      	movs	r2, #18
 8015f32:	2100      	movs	r1, #0
 8015f34:	4618      	mov	r0, r3
 8015f36:	f001 fd85 	bl	8017a44 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015f40:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015f44:	2100      	movs	r1, #0
 8015f46:	4618      	mov	r0, r3
 8015f48:	f001 fd7c 	bl	8017a44 <memset>

  return USBH_OK;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}

08015f56 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015f56:	b480      	push	{r7}
 8015f58:	b085      	sub	sp, #20
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
 8015f5e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015f60:	2300      	movs	r3, #0
 8015f62:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d017      	beq.n	8015f9a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d10f      	bne.n	8015f94 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015f7a:	1c59      	adds	r1, r3, #1
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015f88:	6839      	ldr	r1, [r7, #0]
 8015f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	73fb      	strb	r3, [r7, #15]
 8015f92:	e004      	b.n	8015f9e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015f94:	2302      	movs	r3, #2
 8015f96:	73fb      	strb	r3, [r7, #15]
 8015f98:	e001      	b.n	8015f9e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015f9a:	2302      	movs	r3, #2
 8015f9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr

08015fac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b085      	sub	sp, #20
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
 8015fb4:	460b      	mov	r3, r1
 8015fb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015fc2:	78fa      	ldrb	r2, [r7, #3]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d204      	bcs.n	8015fd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	78fa      	ldrb	r2, [r7, #3]
 8015fcc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015fd0:	e001      	b.n	8015fd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015fd2:	2302      	movs	r3, #2
 8015fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3714      	adds	r7, #20
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe2:	4770      	bx	lr

08015fe4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b087      	sub	sp, #28
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	4608      	mov	r0, r1
 8015fee:	4611      	mov	r1, r2
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	70fb      	strb	r3, [r7, #3]
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	70bb      	strb	r3, [r7, #2]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015ffe:	2300      	movs	r3, #0
 8016000:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016002:	2300      	movs	r3, #0
 8016004:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801600c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801600e:	e025      	b.n	801605c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8016010:	7dfb      	ldrb	r3, [r7, #23]
 8016012:	221a      	movs	r2, #26
 8016014:	fb02 f303 	mul.w	r3, r2, r3
 8016018:	3308      	adds	r3, #8
 801601a:	68fa      	ldr	r2, [r7, #12]
 801601c:	4413      	add	r3, r2
 801601e:	3302      	adds	r3, #2
 8016020:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	795b      	ldrb	r3, [r3, #5]
 8016026:	78fa      	ldrb	r2, [r7, #3]
 8016028:	429a      	cmp	r2, r3
 801602a:	d002      	beq.n	8016032 <USBH_FindInterface+0x4e>
 801602c:	78fb      	ldrb	r3, [r7, #3]
 801602e:	2bff      	cmp	r3, #255	; 0xff
 8016030:	d111      	bne.n	8016056 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8016036:	78ba      	ldrb	r2, [r7, #2]
 8016038:	429a      	cmp	r2, r3
 801603a:	d002      	beq.n	8016042 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801603c:	78bb      	ldrb	r3, [r7, #2]
 801603e:	2bff      	cmp	r3, #255	; 0xff
 8016040:	d109      	bne.n	8016056 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8016046:	787a      	ldrb	r2, [r7, #1]
 8016048:	429a      	cmp	r2, r3
 801604a:	d002      	beq.n	8016052 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801604c:	787b      	ldrb	r3, [r7, #1]
 801604e:	2bff      	cmp	r3, #255	; 0xff
 8016050:	d101      	bne.n	8016056 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8016052:	7dfb      	ldrb	r3, [r7, #23]
 8016054:	e006      	b.n	8016064 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8016056:	7dfb      	ldrb	r3, [r7, #23]
 8016058:	3301      	adds	r3, #1
 801605a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801605c:	7dfb      	ldrb	r3, [r7, #23]
 801605e:	2b09      	cmp	r3, #9
 8016060:	d9d6      	bls.n	8016010 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8016062:	23ff      	movs	r3, #255	; 0xff
}
 8016064:	4618      	mov	r0, r3
 8016066:	371c      	adds	r7, #28
 8016068:	46bd      	mov	sp, r7
 801606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606e:	4770      	bx	lr

08016070 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7ee ff8f 	bl	8004f9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 801607e:	2101      	movs	r1, #1
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ef f8a8 	bl	80051d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8016086:	2300      	movs	r3, #0
}
 8016088:	4618      	mov	r0, r3
 801608a:	3708      	adds	r7, #8
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8016098:	2100      	movs	r1, #0
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f7ef f89b 	bl	80051d6 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ee ff96 	bl	8004fd2 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	791b      	ldrb	r3, [r3, #4]
 80160aa:	4619      	mov	r1, r3
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f001 fb6c 	bl	801778a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	795b      	ldrb	r3, [r3, #5]
 80160b6:	4619      	mov	r1, r3
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f001 fb66 	bl	801778a <USBH_FreePipe>

  return USBH_OK;
 80160be:	2300      	movs	r3, #0
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b088      	sub	sp, #32
 80160cc:	af04      	add	r7, sp, #16
 80160ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80160d0:	2302      	movs	r3, #2
 80160d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80160d4:	2300      	movs	r3, #0
 80160d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d102      	bne.n	80160ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2203      	movs	r2, #3
 80160e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	b2db      	uxtb	r3, r3
 80160f0:	2b0b      	cmp	r3, #11
 80160f2:	f200 81c0 	bhi.w	8016476 <USBH_Process+0x3ae>
 80160f6:	a201      	add	r2, pc, #4	; (adr r2, 80160fc <USBH_Process+0x34>)
 80160f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160fc:	0801612d 	.word	0x0801612d
 8016100:	0801615f 	.word	0x0801615f
 8016104:	080161c7 	.word	0x080161c7
 8016108:	08016411 	.word	0x08016411
 801610c:	08016477 	.word	0x08016477
 8016110:	0801626b 	.word	0x0801626b
 8016114:	080163b7 	.word	0x080163b7
 8016118:	080162a1 	.word	0x080162a1
 801611c:	080162c1 	.word	0x080162c1
 8016120:	080162e1 	.word	0x080162e1
 8016124:	08016325 	.word	0x08016325
 8016128:	080163f9 	.word	0x080163f9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8016132:	b2db      	uxtb	r3, r3
 8016134:	2b00      	cmp	r3, #0
 8016136:	f000 81a0 	beq.w	801647a <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2201      	movs	r2, #1
 801613e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8016140:	20c8      	movs	r0, #200	; 0xc8
 8016142:	f7ef f88f 	bl	8005264 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7ee ff85 	bl	8005056 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2200      	movs	r2, #0
 8016150:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2200      	movs	r2, #0
 8016158:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801615c:	e18d      	b.n	801647a <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8016164:	2b01      	cmp	r3, #1
 8016166:	d107      	bne.n	8016178 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2200      	movs	r2, #0
 801616c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2202      	movs	r2, #2
 8016174:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016176:	e18f      	b.n	8016498 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801617e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016182:	d914      	bls.n	80161ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801618a:	3301      	adds	r3, #1
 801618c:	b2da      	uxtb	r2, r3
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801619a:	2b03      	cmp	r3, #3
 801619c:	d903      	bls.n	80161a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	220d      	movs	r2, #13
 80161a2:	701a      	strb	r2, [r3, #0]
      break;
 80161a4:	e178      	b.n	8016498 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2200      	movs	r2, #0
 80161aa:	701a      	strb	r2, [r3, #0]
      break;
 80161ac:	e174      	b.n	8016498 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80161b4:	f103 020a 	add.w	r2, r3, #10
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 80161be:	200a      	movs	r0, #10
 80161c0:	f7ef f850 	bl	8005264 <USBH_Delay>
      break;
 80161c4:	e168      	b.n	8016498 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d005      	beq.n	80161dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80161d6:	2104      	movs	r1, #4
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80161dc:	2064      	movs	r0, #100	; 0x64
 80161de:	f7ef f841 	bl	8005264 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f7ee ff10 	bl	8005008 <USBH_LL_GetSpeed>
 80161e8:	4603      	mov	r3, r0
 80161ea:	461a      	mov	r2, r3
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2205      	movs	r2, #5
 80161f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80161f8:	2100      	movs	r1, #0
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f001 faa3 	bl	8017746 <USBH_AllocPipe>
 8016200:	4603      	mov	r3, r0
 8016202:	461a      	mov	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8016208:	2180      	movs	r1, #128	; 0x80
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f001 fa9b 	bl	8017746 <USBH_AllocPipe>
 8016210:	4603      	mov	r3, r0
 8016212:	461a      	mov	r2, r3
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	7919      	ldrb	r1, [r3, #4]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801622c:	b292      	uxth	r2, r2
 801622e:	9202      	str	r2, [sp, #8]
 8016230:	2200      	movs	r2, #0
 8016232:	9201      	str	r2, [sp, #4]
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	4603      	mov	r3, r0
 8016238:	2280      	movs	r2, #128	; 0x80
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f001 fa54 	bl	80176e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	7959      	ldrb	r1, [r3, #5]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016254:	b292      	uxth	r2, r2
 8016256:	9202      	str	r2, [sp, #8]
 8016258:	2200      	movs	r2, #0
 801625a:	9201      	str	r2, [sp, #4]
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	4603      	mov	r3, r0
 8016260:	2200      	movs	r2, #0
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f001 fa40 	bl	80176e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016268:	e116      	b.n	8016498 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f000 f91a 	bl	80164a4 <USBH_HandleEnum>
 8016270:	4603      	mov	r3, r0
 8016272:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8016274:	7bbb      	ldrb	r3, [r7, #14]
 8016276:	b2db      	uxtb	r3, r3
 8016278:	2b00      	cmp	r3, #0
 801627a:	f040 8100 	bne.w	801647e <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801628c:	2b01      	cmp	r3, #1
 801628e:	d103      	bne.n	8016298 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2208      	movs	r2, #8
 8016294:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016296:	e0f2      	b.n	801647e <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2207      	movs	r2, #7
 801629c:	701a      	strb	r2, [r3, #0]
      break;
 801629e:	e0ee      	b.n	801647e <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f000 80eb 	beq.w	8016482 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80162b2:	2101      	movs	r1, #1
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	2208      	movs	r2, #8
 80162bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80162be:	e0e0      	b.n	8016482 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	4619      	mov	r1, r3
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f000 fc41 	bl	8016b52 <USBH_SetCfg>
 80162d0:	4603      	mov	r3, r0
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f040 80d7 	bne.w	8016486 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2209      	movs	r2, #9
 80162dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80162de:	e0d2      	b.n	8016486 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80162e6:	f003 0320 	and.w	r3, r3, #32
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d016      	beq.n	801631c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80162ee:	2101      	movs	r1, #1
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 fc51 	bl	8016b98 <USBH_SetFeature>
 80162f6:	4603      	mov	r3, r0
 80162f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80162fa:	7bbb      	ldrb	r3, [r7, #14]
 80162fc:	b2db      	uxtb	r3, r3
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d103      	bne.n	801630a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	220a      	movs	r2, #10
 8016306:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016308:	e0bf      	b.n	801648a <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 801630a:	7bbb      	ldrb	r3, [r7, #14]
 801630c:	b2db      	uxtb	r3, r3
 801630e:	2b03      	cmp	r3, #3
 8016310:	f040 80bb 	bne.w	801648a <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	220a      	movs	r2, #10
 8016318:	701a      	strb	r2, [r3, #0]
      break;
 801631a:	e0b6      	b.n	801648a <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	220a      	movs	r2, #10
 8016320:	701a      	strb	r2, [r3, #0]
      break;
 8016322:	e0b2      	b.n	801648a <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 801632a:	2b00      	cmp	r3, #0
 801632c:	f000 80af 	beq.w	801648e <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8016338:	2300      	movs	r3, #0
 801633a:	73fb      	strb	r3, [r7, #15]
 801633c:	e018      	b.n	8016370 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801633e:	7bfa      	ldrb	r2, [r7, #15]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8016346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801634a:	791a      	ldrb	r2, [r3, #4]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8016352:	429a      	cmp	r2, r3
 8016354:	d109      	bne.n	801636a <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8016356:	7bfa      	ldrb	r2, [r7, #15]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f502 7289 	add.w	r2, r2, #274	; 0x112
 801635e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8016368:	e005      	b.n	8016376 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801636a:	7bfb      	ldrb	r3, [r7, #15]
 801636c:	3301      	adds	r3, #1
 801636e:	73fb      	strb	r3, [r7, #15]
 8016370:	7bfb      	ldrb	r3, [r7, #15]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d0e3      	beq.n	801633e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801637c:	2b00      	cmp	r3, #0
 801637e:	d016      	beq.n	80163ae <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016386:	689b      	ldr	r3, [r3, #8]
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	4798      	blx	r3
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d109      	bne.n	80163a6 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2206      	movs	r2, #6
 8016396:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801639e:	2103      	movs	r1, #3
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80163a4:	e073      	b.n	801648e <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	220d      	movs	r2, #13
 80163aa:	701a      	strb	r2, [r3, #0]
      break;
 80163ac:	e06f      	b.n	801648e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	220d      	movs	r2, #13
 80163b2:	701a      	strb	r2, [r3, #0]
      break;
 80163b4:	e06b      	b.n	801648e <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d017      	beq.n	80163f0 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80163c6:	691b      	ldr	r3, [r3, #16]
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	4798      	blx	r3
 80163cc:	4603      	mov	r3, r0
 80163ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80163d0:	7bbb      	ldrb	r3, [r7, #14]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d103      	bne.n	80163e0 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	220b      	movs	r2, #11
 80163dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80163de:	e058      	b.n	8016492 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 80163e0:	7bbb      	ldrb	r3, [r7, #14]
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b02      	cmp	r3, #2
 80163e6:	d154      	bne.n	8016492 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	220d      	movs	r2, #13
 80163ec:	701a      	strb	r2, [r3, #0]
      break;
 80163ee:	e050      	b.n	8016492 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	220d      	movs	r2, #13
 80163f4:	701a      	strb	r2, [r3, #0]
      break;
 80163f6:	e04c      	b.n	8016492 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d049      	beq.n	8016496 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016408:	695b      	ldr	r3, [r3, #20]
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	4798      	blx	r3
      }
      break;
 801640e:	e042      	b.n	8016496 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2200      	movs	r2, #0
 8016414:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f7ff fd27 	bl	8015e6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016424:	2b00      	cmp	r3, #0
 8016426:	d009      	beq.n	801643c <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2200      	movs	r2, #0
 8016438:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016442:	2b00      	cmp	r3, #0
 8016444:	d005      	beq.n	8016452 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801644c:	2105      	movs	r1, #5
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8016458:	b2db      	uxtb	r3, r3
 801645a:	2b01      	cmp	r3, #1
 801645c:	d107      	bne.n	801646e <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2200      	movs	r2, #0
 8016462:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7ff fe02 	bl	8016070 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801646c:	e014      	b.n	8016498 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f7ee fd94 	bl	8004f9c <USBH_LL_Start>
      break;
 8016474:	e010      	b.n	8016498 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8016476:	bf00      	nop
 8016478:	e00e      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 801647a:	bf00      	nop
 801647c:	e00c      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 801647e:	bf00      	nop
 8016480:	e00a      	b.n	8016498 <USBH_Process+0x3d0>
    break;
 8016482:	bf00      	nop
 8016484:	e008      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 8016486:	bf00      	nop
 8016488:	e006      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 801648a:	bf00      	nop
 801648c:	e004      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 801648e:	bf00      	nop
 8016490:	e002      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 8016492:	bf00      	nop
 8016494:	e000      	b.n	8016498 <USBH_Process+0x3d0>
      break;
 8016496:	bf00      	nop
  }
  return USBH_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3710      	adds	r7, #16
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop

080164a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b088      	sub	sp, #32
 80164a8:	af04      	add	r7, sp, #16
 80164aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80164ac:	2301      	movs	r3, #1
 80164ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80164b0:	2301      	movs	r3, #1
 80164b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	785b      	ldrb	r3, [r3, #1]
 80164b8:	2b07      	cmp	r3, #7
 80164ba:	f200 81c1 	bhi.w	8016840 <USBH_HandleEnum+0x39c>
 80164be:	a201      	add	r2, pc, #4	; (adr r2, 80164c4 <USBH_HandleEnum+0x20>)
 80164c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c4:	080164e5 	.word	0x080164e5
 80164c8:	080165a3 	.word	0x080165a3
 80164cc:	0801660d 	.word	0x0801660d
 80164d0:	0801669b 	.word	0x0801669b
 80164d4:	08016705 	.word	0x08016705
 80164d8:	08016775 	.word	0x08016775
 80164dc:	080167bb 	.word	0x080167bb
 80164e0:	08016801 	.word	0x08016801
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80164e4:	2108      	movs	r1, #8
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 fa50 	bl	801698c <USBH_Get_DevDesc>
 80164ec:	4603      	mov	r3, r0
 80164ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80164f0:	7bbb      	ldrb	r3, [r7, #14]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d130      	bne.n	8016558 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2201      	movs	r2, #1
 8016504:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	7919      	ldrb	r1, [r3, #4]
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801651a:	b292      	uxth	r2, r2
 801651c:	9202      	str	r2, [sp, #8]
 801651e:	2200      	movs	r2, #0
 8016520:	9201      	str	r2, [sp, #4]
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	4603      	mov	r3, r0
 8016526:	2280      	movs	r2, #128	; 0x80
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f001 f8dd 	bl	80176e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	7959      	ldrb	r1, [r3, #5]
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016542:	b292      	uxth	r2, r2
 8016544:	9202      	str	r2, [sp, #8]
 8016546:	2200      	movs	r2, #0
 8016548:	9201      	str	r2, [sp, #4]
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	4603      	mov	r3, r0
 801654e:	2200      	movs	r2, #0
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f001 f8c9 	bl	80176e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016556:	e175      	b.n	8016844 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016558:	7bbb      	ldrb	r3, [r7, #14]
 801655a:	2b03      	cmp	r3, #3
 801655c:	f040 8172 	bne.w	8016844 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016566:	3301      	adds	r3, #1
 8016568:	b2da      	uxtb	r2, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016576:	2b03      	cmp	r3, #3
 8016578:	d903      	bls.n	8016582 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	220d      	movs	r2, #13
 801657e:	701a      	strb	r2, [r3, #0]
      break;
 8016580:	e160      	b.n	8016844 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	795b      	ldrb	r3, [r3, #5]
 8016586:	4619      	mov	r1, r3
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f001 f8fe 	bl	801778a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	791b      	ldrb	r3, [r3, #4]
 8016592:	4619      	mov	r1, r3
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f001 f8f8 	bl	801778a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2200      	movs	r2, #0
 801659e:	701a      	strb	r2, [r3, #0]
      break;
 80165a0:	e150      	b.n	8016844 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80165a2:	2112      	movs	r1, #18
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f000 f9f1 	bl	801698c <USBH_Get_DevDesc>
 80165aa:	4603      	mov	r3, r0
 80165ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80165ae:	7bbb      	ldrb	r3, [r7, #14]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d103      	bne.n	80165bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2202      	movs	r2, #2
 80165b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80165ba:	e145      	b.n	8016848 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80165bc:	7bbb      	ldrb	r3, [r7, #14]
 80165be:	2b03      	cmp	r3, #3
 80165c0:	f040 8142 	bne.w	8016848 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80165ca:	3301      	adds	r3, #1
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80165da:	2b03      	cmp	r3, #3
 80165dc:	d903      	bls.n	80165e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	220d      	movs	r2, #13
 80165e2:	701a      	strb	r2, [r3, #0]
      break;
 80165e4:	e130      	b.n	8016848 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	795b      	ldrb	r3, [r3, #5]
 80165ea:	4619      	mov	r1, r3
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f001 f8cc 	bl	801778a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	791b      	ldrb	r3, [r3, #4]
 80165f6:	4619      	mov	r1, r3
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f001 f8c6 	bl	801778a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2200      	movs	r2, #0
 8016602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	701a      	strb	r2, [r3, #0]
      break;
 801660a:	e11d      	b.n	8016848 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801660c:	2101      	movs	r1, #1
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f000 fa7b 	bl	8016b0a <USBH_SetAddress>
 8016614:	4603      	mov	r3, r0
 8016616:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016618:	7bbb      	ldrb	r3, [r7, #14]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d132      	bne.n	8016684 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801661e:	2002      	movs	r0, #2
 8016620:	f7ee fe20 	bl	8005264 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2201      	movs	r2, #1
 8016628:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2203      	movs	r2, #3
 8016630:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	7919      	ldrb	r1, [r3, #4]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016642:	687a      	ldr	r2, [r7, #4]
 8016644:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8016646:	b292      	uxth	r2, r2
 8016648:	9202      	str	r2, [sp, #8]
 801664a:	2200      	movs	r2, #0
 801664c:	9201      	str	r2, [sp, #4]
 801664e:	9300      	str	r3, [sp, #0]
 8016650:	4603      	mov	r3, r0
 8016652:	2280      	movs	r2, #128	; 0x80
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f001 f847 	bl	80176e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	7959      	ldrb	r1, [r3, #5]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801666a:	687a      	ldr	r2, [r7, #4]
 801666c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801666e:	b292      	uxth	r2, r2
 8016670:	9202      	str	r2, [sp, #8]
 8016672:	2200      	movs	r2, #0
 8016674:	9201      	str	r2, [sp, #4]
 8016676:	9300      	str	r3, [sp, #0]
 8016678:	4603      	mov	r3, r0
 801667a:	2200      	movs	r2, #0
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f001 f833 	bl	80176e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016682:	e0e3      	b.n	801684c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016684:	7bbb      	ldrb	r3, [r7, #14]
 8016686:	2b03      	cmp	r3, #3
 8016688:	f040 80e0 	bne.w	801684c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	220d      	movs	r2, #13
 8016690:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2200      	movs	r2, #0
 8016696:	705a      	strb	r2, [r3, #1]
      break;
 8016698:	e0d8      	b.n	801684c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801669a:	2109      	movs	r1, #9
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 f9a1 	bl	80169e4 <USBH_Get_CfgDesc>
 80166a2:	4603      	mov	r3, r0
 80166a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80166a6:	7bbb      	ldrb	r3, [r7, #14]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d103      	bne.n	80166b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2204      	movs	r2, #4
 80166b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80166b2:	e0cd      	b.n	8016850 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80166b4:	7bbb      	ldrb	r3, [r7, #14]
 80166b6:	2b03      	cmp	r3, #3
 80166b8:	f040 80ca 	bne.w	8016850 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80166c2:	3301      	adds	r3, #1
 80166c4:	b2da      	uxtb	r2, r3
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80166d2:	2b03      	cmp	r3, #3
 80166d4:	d903      	bls.n	80166de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	220d      	movs	r2, #13
 80166da:	701a      	strb	r2, [r3, #0]
      break;
 80166dc:	e0b8      	b.n	8016850 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	795b      	ldrb	r3, [r3, #5]
 80166e2:	4619      	mov	r1, r3
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f001 f850 	bl	801778a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	791b      	ldrb	r3, [r3, #4]
 80166ee:	4619      	mov	r1, r3
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f001 f84a 	bl	801778a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2200      	movs	r2, #0
 80166fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2200      	movs	r2, #0
 8016700:	701a      	strb	r2, [r3, #0]
      break;
 8016702:	e0a5      	b.n	8016850 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801670a:	4619      	mov	r1, r3
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 f969 	bl	80169e4 <USBH_Get_CfgDesc>
 8016712:	4603      	mov	r3, r0
 8016714:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016716:	7bbb      	ldrb	r3, [r7, #14]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d103      	bne.n	8016724 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2205      	movs	r2, #5
 8016720:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016722:	e097      	b.n	8016854 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016724:	7bbb      	ldrb	r3, [r7, #14]
 8016726:	2b03      	cmp	r3, #3
 8016728:	f040 8094 	bne.w	8016854 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016732:	3301      	adds	r3, #1
 8016734:	b2da      	uxtb	r2, r3
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016742:	2b03      	cmp	r3, #3
 8016744:	d903      	bls.n	801674e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	220d      	movs	r2, #13
 801674a:	701a      	strb	r2, [r3, #0]
      break;
 801674c:	e082      	b.n	8016854 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	795b      	ldrb	r3, [r3, #5]
 8016752:	4619      	mov	r1, r3
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f001 f818 	bl	801778a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	791b      	ldrb	r3, [r3, #4]
 801675e:	4619      	mov	r1, r3
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f001 f812 	bl	801778a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2200      	movs	r2, #0
 801676a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2200      	movs	r2, #0
 8016770:	701a      	strb	r2, [r3, #0]
      break;
 8016772:	e06f      	b.n	8016854 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801677a:	2b00      	cmp	r3, #0
 801677c:	d019      	beq.n	80167b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801678a:	23ff      	movs	r3, #255	; 0xff
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f000 f953 	bl	8016a38 <USBH_Get_StringDesc>
 8016792:	4603      	mov	r3, r0
 8016794:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016796:	7bbb      	ldrb	r3, [r7, #14]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d103      	bne.n	80167a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2206      	movs	r2, #6
 80167a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80167a2:	e059      	b.n	8016858 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80167a4:	7bbb      	ldrb	r3, [r7, #14]
 80167a6:	2b03      	cmp	r3, #3
 80167a8:	d156      	bne.n	8016858 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2206      	movs	r2, #6
 80167ae:	705a      	strb	r2, [r3, #1]
      break;
 80167b0:	e052      	b.n	8016858 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2206      	movs	r2, #6
 80167b6:	705a      	strb	r2, [r3, #1]
      break;
 80167b8:	e04e      	b.n	8016858 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d019      	beq.n	80167f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80167d0:	23ff      	movs	r3, #255	; 0xff
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 f930 	bl	8016a38 <USBH_Get_StringDesc>
 80167d8:	4603      	mov	r3, r0
 80167da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80167dc:	7bbb      	ldrb	r3, [r7, #14]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d103      	bne.n	80167ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2207      	movs	r2, #7
 80167e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80167e8:	e038      	b.n	801685c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80167ea:	7bbb      	ldrb	r3, [r7, #14]
 80167ec:	2b03      	cmp	r3, #3
 80167ee:	d135      	bne.n	801685c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2207      	movs	r2, #7
 80167f4:	705a      	strb	r2, [r3, #1]
      break;
 80167f6:	e031      	b.n	801685c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2207      	movs	r2, #7
 80167fc:	705a      	strb	r2, [r3, #1]
      break;
 80167fe:	e02d      	b.n	801685c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8016806:	2b00      	cmp	r3, #0
 8016808:	d017      	beq.n	801683a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016816:	23ff      	movs	r3, #255	; 0xff
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f000 f90d 	bl	8016a38 <USBH_Get_StringDesc>
 801681e:	4603      	mov	r3, r0
 8016820:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016822:	7bbb      	ldrb	r3, [r7, #14]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d102      	bne.n	801682e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8016828:	2300      	movs	r3, #0
 801682a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801682c:	e018      	b.n	8016860 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801682e:	7bbb      	ldrb	r3, [r7, #14]
 8016830:	2b03      	cmp	r3, #3
 8016832:	d115      	bne.n	8016860 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8016834:	2300      	movs	r3, #0
 8016836:	73fb      	strb	r3, [r7, #15]
      break;
 8016838:	e012      	b.n	8016860 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801683a:	2300      	movs	r3, #0
 801683c:	73fb      	strb	r3, [r7, #15]
      break;
 801683e:	e00f      	b.n	8016860 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8016840:	bf00      	nop
 8016842:	e00e      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016844:	bf00      	nop
 8016846:	e00c      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016848:	bf00      	nop
 801684a:	e00a      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 801684c:	bf00      	nop
 801684e:	e008      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016850:	bf00      	nop
 8016852:	e006      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016854:	bf00      	nop
 8016856:	e004      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016858:	bf00      	nop
 801685a:	e002      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 801685c:	bf00      	nop
 801685e:	e000      	b.n	8016862 <USBH_HandleEnum+0x3be>
      break;
 8016860:	bf00      	nop
  }
  return Status;
 8016862:	7bfb      	ldrb	r3, [r7, #15]
}
 8016864:	4618      	mov	r0, r3
 8016866:	3710      	adds	r7, #16
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	683a      	ldr	r2, [r7, #0]
 801687a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 801687e:	bf00      	nop
 8016880:	370c      	adds	r7, #12
 8016882:	46bd      	mov	sp, r7
 8016884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016888:	4770      	bx	lr

0801688a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b082      	sub	sp, #8
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 f804 	bl	80168ae <USBH_HandleSof>
}
 80168a6:	bf00      	nop
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b082      	sub	sp, #8
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	781b      	ldrb	r3, [r3, #0]
 80168ba:	b2db      	uxtb	r3, r3
 80168bc:	2b0b      	cmp	r3, #11
 80168be:	d10a      	bne.n	80168d6 <USBH_HandleSof+0x28>
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d005      	beq.n	80168d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80168d0:	699b      	ldr	r3, [r3, #24]
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	4798      	blx	r3
  }
}
 80168d6:	bf00      	nop
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}

080168de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80168de:	b480      	push	{r7}
 80168e0:	b083      	sub	sp, #12
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2201      	movs	r2, #1
 80168ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80168ee:	bf00      	nop
}
 80168f0:	370c      	adds	r7, #12
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr

080168fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80168fa:	b480      	push	{r7}
 80168fc:	b083      	sub	sp, #12
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801690a:	bf00      	nop
}
 801690c:	370c      	adds	r7, #12
 801690e:	46bd      	mov	sp, r7
 8016910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016914:	4770      	bx	lr

08016916 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8016916:	b480      	push	{r7}
 8016918:	b083      	sub	sp, #12
 801691a:	af00      	add	r7, sp, #0
 801691c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2201      	movs	r2, #1
 8016922:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2200      	movs	r2, #0
 8016932:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016936:	2300      	movs	r3, #0
}
 8016938:	4618      	mov	r0, r3
 801693a:	370c      	adds	r7, #12
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr

08016944 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2201      	movs	r2, #1
 8016950:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2200      	movs	r2, #0
 8016958:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2200      	movs	r2, #0
 8016960:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f7ee fb34 	bl	8004fd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	791b      	ldrb	r3, [r3, #4]
 801696e:	4619      	mov	r1, r3
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 ff0a 	bl	801778a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	795b      	ldrb	r3, [r3, #5]
 801697a:	4619      	mov	r1, r3
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 ff04 	bl	801778a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016982:	2300      	movs	r3, #0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b086      	sub	sp, #24
 8016990:	af02      	add	r7, sp, #8
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	460b      	mov	r3, r1
 8016996:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016998:	887b      	ldrh	r3, [r7, #2]
 801699a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801699e:	d901      	bls.n	80169a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80169a0:	2303      	movs	r3, #3
 80169a2:	e01b      	b.n	80169dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80169aa:	887b      	ldrh	r3, [r7, #2]
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	4613      	mov	r3, r2
 80169b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80169b4:	2100      	movs	r1, #0
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 f872 	bl	8016aa0 <USBH_GetDescriptor>
 80169bc:	4603      	mov	r3, r0
 80169be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80169c0:	7bfb      	ldrb	r3, [r7, #15]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d109      	bne.n	80169da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80169cc:	887a      	ldrh	r2, [r7, #2]
 80169ce:	4619      	mov	r1, r3
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 f929 	bl	8016c28 <USBH_ParseDevDesc>
 80169d6:	4603      	mov	r3, r0
 80169d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80169da:	7bfb      	ldrb	r3, [r7, #15]
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b086      	sub	sp, #24
 80169e8:	af02      	add	r7, sp, #8
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	460b      	mov	r3, r1
 80169ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	331c      	adds	r3, #28
 80169f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80169f6:	887b      	ldrh	r3, [r7, #2]
 80169f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169fc:	d901      	bls.n	8016a02 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80169fe:	2303      	movs	r3, #3
 8016a00:	e016      	b.n	8016a30 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8016a02:	887b      	ldrh	r3, [r7, #2]
 8016a04:	9300      	str	r3, [sp, #0]
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f846 	bl	8016aa0 <USBH_GetDescriptor>
 8016a14:	4603      	mov	r3, r0
 8016a16:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8016a18:	7bfb      	ldrb	r3, [r7, #15]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d107      	bne.n	8016a2e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016a1e:	887b      	ldrh	r3, [r7, #2]
 8016a20:	461a      	mov	r2, r3
 8016a22:	68b9      	ldr	r1, [r7, #8]
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f9b3 	bl	8016d90 <USBH_ParseCfgDesc>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3710      	adds	r7, #16
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b088      	sub	sp, #32
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	60f8      	str	r0, [r7, #12]
 8016a40:	607a      	str	r2, [r7, #4]
 8016a42:	461a      	mov	r2, r3
 8016a44:	460b      	mov	r3, r1
 8016a46:	72fb      	strb	r3, [r7, #11]
 8016a48:	4613      	mov	r3, r2
 8016a4a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016a4c:	893b      	ldrh	r3, [r7, #8]
 8016a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a52:	d802      	bhi.n	8016a5a <USBH_Get_StringDesc+0x22>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d101      	bne.n	8016a5e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016a5a:	2303      	movs	r3, #3
 8016a5c:	e01c      	b.n	8016a98 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016a5e:	7afb      	ldrb	r3, [r7, #11]
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016a66:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016a6e:	893b      	ldrh	r3, [r7, #8]
 8016a70:	9300      	str	r3, [sp, #0]
 8016a72:	460b      	mov	r3, r1
 8016a74:	2100      	movs	r1, #0
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f000 f812 	bl	8016aa0 <USBH_GetDescriptor>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d107      	bne.n	8016a96 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016a8c:	893a      	ldrh	r2, [r7, #8]
 8016a8e:	6879      	ldr	r1, [r7, #4]
 8016a90:	4618      	mov	r0, r3
 8016a92:	f000 fb8a 	bl	80171aa <USBH_ParseStringDesc>
  }

  return status;
 8016a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b084      	sub	sp, #16
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	607b      	str	r3, [r7, #4]
 8016aaa:	460b      	mov	r3, r1
 8016aac:	72fb      	strb	r3, [r7, #11]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	789b      	ldrb	r3, [r3, #2]
 8016ab6:	2b01      	cmp	r3, #1
 8016ab8:	d11c      	bne.n	8016af4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016aba:	7afb      	ldrb	r3, [r7, #11]
 8016abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016ac0:	b2da      	uxtb	r2, r3
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2206      	movs	r2, #6
 8016aca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	893a      	ldrh	r2, [r7, #8]
 8016ad0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016ad2:	893b      	ldrh	r3, [r7, #8]
 8016ad4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016adc:	d104      	bne.n	8016ae8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	f240 4209 	movw	r2, #1033	; 0x409
 8016ae4:	829a      	strh	r2, [r3, #20]
 8016ae6:	e002      	b.n	8016aee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2200      	movs	r2, #0
 8016aec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	8b3a      	ldrh	r2, [r7, #24]
 8016af2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8016af4:	8b3b      	ldrh	r3, [r7, #24]
 8016af6:	461a      	mov	r2, r3
 8016af8:	6879      	ldr	r1, [r7, #4]
 8016afa:	68f8      	ldr	r0, [r7, #12]
 8016afc:	f000 fba3 	bl	8017246 <USBH_CtlReq>
 8016b00:	4603      	mov	r3, r0
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016b0a:	b580      	push	{r7, lr}
 8016b0c:	b082      	sub	sp, #8
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
 8016b12:	460b      	mov	r3, r1
 8016b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	789b      	ldrb	r3, [r3, #2]
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d10f      	bne.n	8016b3e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2200      	movs	r2, #0
 8016b22:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2205      	movs	r2, #5
 8016b28:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016b2a:	78fb      	ldrb	r3, [r7, #3]
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2200      	movs	r2, #0
 8016b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016b3e:	2200      	movs	r2, #0
 8016b40:	2100      	movs	r1, #0
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f000 fb7f 	bl	8017246 <USBH_CtlReq>
 8016b48:	4603      	mov	r3, r0
}
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	3708      	adds	r7, #8
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}

08016b52 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016b52:	b580      	push	{r7, lr}
 8016b54:	b082      	sub	sp, #8
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	6078      	str	r0, [r7, #4]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	789b      	ldrb	r3, [r3, #2]
 8016b62:	2b01      	cmp	r3, #1
 8016b64:	d10e      	bne.n	8016b84 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2209      	movs	r2, #9
 8016b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	887a      	ldrh	r2, [r7, #2]
 8016b76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	2200      	movs	r2, #0
 8016b82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016b84:	2200      	movs	r2, #0
 8016b86:	2100      	movs	r1, #0
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f000 fb5c 	bl	8017246 <USBH_CtlReq>
 8016b8e:	4603      	mov	r3, r0
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3708      	adds	r7, #8
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b082      	sub	sp, #8
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	789b      	ldrb	r3, [r3, #2]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d10f      	bne.n	8016bcc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2203      	movs	r2, #3
 8016bb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016bb8:	78fb      	ldrb	r3, [r7, #3]
 8016bba:	b29a      	uxth	r2, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016bcc:	2200      	movs	r2, #0
 8016bce:	2100      	movs	r1, #0
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f000 fb38 	bl	8017246 <USBH_CtlReq>
 8016bd6:	4603      	mov	r3, r0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	460b      	mov	r3, r1
 8016bea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	789b      	ldrb	r3, [r3, #2]
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	d10f      	bne.n	8016c14 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2202      	movs	r2, #2
 8016bf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8016c06:	78fb      	ldrb	r3, [r7, #3]
 8016c08:	b29a      	uxth	r2, r3
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2200      	movs	r2, #0
 8016c12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016c14:	2200      	movs	r2, #0
 8016c16:	2100      	movs	r1, #0
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f000 fb14 	bl	8017246 <USBH_CtlReq>
 8016c1e:	4603      	mov	r3, r0
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b087      	sub	sp, #28
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	4613      	mov	r3, r2
 8016c34:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	f203 3326 	addw	r3, r3, #806	; 0x326
 8016c3c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d101      	bne.n	8016c4c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8016c48:	2302      	movs	r3, #2
 8016c4a:	e098      	b.n	8016d7e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	781a      	ldrb	r2, [r3, #0]
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	785a      	ldrb	r2, [r3, #1]
 8016c58:	693b      	ldr	r3, [r7, #16]
 8016c5a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	3302      	adds	r3, #2
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	3303      	adds	r3, #3
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	021b      	lsls	r3, r3, #8
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	4313      	orrs	r3, r2
 8016c72:	b29a      	uxth	r2, r3
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	791a      	ldrb	r2, [r3, #4]
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	795a      	ldrb	r2, [r3, #5]
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	799a      	ldrb	r2, [r3, #6]
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	79da      	ldrb	r2, [r3, #7]
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d004      	beq.n	8016cac <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016ca8:	2b01      	cmp	r3, #1
 8016caa:	d11b      	bne.n	8016ce4 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	79db      	ldrb	r3, [r3, #7]
 8016cb0:	2b20      	cmp	r3, #32
 8016cb2:	dc0f      	bgt.n	8016cd4 <USBH_ParseDevDesc+0xac>
 8016cb4:	2b08      	cmp	r3, #8
 8016cb6:	db0f      	blt.n	8016cd8 <USBH_ParseDevDesc+0xb0>
 8016cb8:	3b08      	subs	r3, #8
 8016cba:	4a34      	ldr	r2, [pc, #208]	; (8016d8c <USBH_ParseDevDesc+0x164>)
 8016cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8016cc0:	f003 0301 	and.w	r3, r3, #1
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	bf14      	ite	ne
 8016cc8:	2301      	movne	r3, #1
 8016cca:	2300      	moveq	r3, #0
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d106      	bne.n	8016ce0 <USBH_ParseDevDesc+0xb8>
 8016cd2:	e001      	b.n	8016cd8 <USBH_ParseDevDesc+0xb0>
 8016cd4:	2b40      	cmp	r3, #64	; 0x40
 8016cd6:	d003      	beq.n	8016ce0 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	2208      	movs	r2, #8
 8016cdc:	71da      	strb	r2, [r3, #7]
        break;
 8016cde:	e000      	b.n	8016ce2 <USBH_ParseDevDesc+0xba>
        break;
 8016ce0:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016ce2:	e00e      	b.n	8016d02 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016cea:	2b02      	cmp	r3, #2
 8016cec:	d107      	bne.n	8016cfe <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	79db      	ldrb	r3, [r3, #7]
 8016cf2:	2b08      	cmp	r3, #8
 8016cf4:	d005      	beq.n	8016d02 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	2208      	movs	r2, #8
 8016cfa:	71da      	strb	r2, [r3, #7]
 8016cfc:	e001      	b.n	8016d02 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016cfe:	2303      	movs	r3, #3
 8016d00:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016d02:	88fb      	ldrh	r3, [r7, #6]
 8016d04:	2b08      	cmp	r3, #8
 8016d06:	d939      	bls.n	8016d7c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	3308      	adds	r3, #8
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	b29a      	uxth	r2, r3
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	3309      	adds	r3, #9
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	021b      	lsls	r3, r3, #8
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	4313      	orrs	r3, r2
 8016d1e:	b29a      	uxth	r2, r3
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	330a      	adds	r3, #10
 8016d28:	781b      	ldrb	r3, [r3, #0]
 8016d2a:	b29a      	uxth	r2, r3
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	330b      	adds	r3, #11
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	021b      	lsls	r3, r3, #8
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	330c      	adds	r3, #12
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	b29a      	uxth	r2, r3
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	330d      	adds	r3, #13
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	021b      	lsls	r3, r3, #8
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	4313      	orrs	r3, r2
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	7b9a      	ldrb	r2, [r3, #14]
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016d64:	68bb      	ldr	r3, [r7, #8]
 8016d66:	7bda      	ldrb	r2, [r3, #15]
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	7c1a      	ldrb	r2, [r3, #16]
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	7c5a      	ldrb	r2, [r3, #17]
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	371c      	adds	r7, #28
 8016d82:	46bd      	mov	sp, r7
 8016d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d88:	4770      	bx	lr
 8016d8a:	bf00      	nop
 8016d8c:	01000101 	.word	0x01000101

08016d90 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b08c      	sub	sp, #48	; 0x30
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016da4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016da6:	2300      	movs	r3, #0
 8016da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016dac:	2300      	movs	r3, #0
 8016dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016db2:	2300      	movs	r3, #0
 8016db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d101      	bne.n	8016dc2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016dbe:	2302      	movs	r3, #2
 8016dc0:	e0d7      	b.n	8016f72 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	781a      	ldrb	r2, [r3, #0]
 8016dca:	6a3b      	ldr	r3, [r7, #32]
 8016dcc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	785a      	ldrb	r2, [r3, #1]
 8016dd2:	6a3b      	ldr	r3, [r7, #32]
 8016dd4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	3302      	adds	r3, #2
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	3303      	adds	r3, #3
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	b29b      	uxth	r3, r3
 8016de6:	021b      	lsls	r3, r3, #8
 8016de8:	b29b      	uxth	r3, r3
 8016dea:	4313      	orrs	r3, r2
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016df2:	bf28      	it	cs
 8016df4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	6a3b      	ldr	r3, [r7, #32]
 8016dfc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	791a      	ldrb	r2, [r3, #4]
 8016e02:	6a3b      	ldr	r3, [r7, #32]
 8016e04:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	795a      	ldrb	r2, [r3, #5]
 8016e0a:	6a3b      	ldr	r3, [r7, #32]
 8016e0c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	799a      	ldrb	r2, [r3, #6]
 8016e12:	6a3b      	ldr	r3, [r7, #32]
 8016e14:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	79da      	ldrb	r2, [r3, #7]
 8016e1a:	6a3b      	ldr	r3, [r7, #32]
 8016e1c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	7a1a      	ldrb	r2, [r3, #8]
 8016e22:	6a3b      	ldr	r3, [r7, #32]
 8016e24:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8016e26:	6a3b      	ldr	r3, [r7, #32]
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	2b09      	cmp	r3, #9
 8016e2c:	d002      	beq.n	8016e34 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016e2e:	6a3b      	ldr	r3, [r7, #32]
 8016e30:	2209      	movs	r2, #9
 8016e32:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016e34:	88fb      	ldrh	r3, [r7, #6]
 8016e36:	2b09      	cmp	r3, #9
 8016e38:	f240 8099 	bls.w	8016f6e <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8016e3c:	2309      	movs	r3, #9
 8016e3e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016e40:	2300      	movs	r3, #0
 8016e42:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016e44:	e07d      	b.n	8016f42 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016e46:	f107 0316 	add.w	r3, r7, #22
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e4e:	f000 f9df 	bl	8017210 <USBH_GetNextDesc>
 8016e52:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	785b      	ldrb	r3, [r3, #1]
 8016e58:	2b04      	cmp	r3, #4
 8016e5a:	d172      	bne.n	8016f42 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	2b09      	cmp	r3, #9
 8016e62:	d002      	beq.n	8016e6a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e66:	2209      	movs	r2, #9
 8016e68:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8016e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e6e:	221a      	movs	r2, #26
 8016e70:	fb02 f303 	mul.w	r3, r2, r3
 8016e74:	3308      	adds	r3, #8
 8016e76:	6a3a      	ldr	r2, [r7, #32]
 8016e78:	4413      	add	r3, r2
 8016e7a:	3302      	adds	r3, #2
 8016e7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e80:	69f8      	ldr	r0, [r7, #28]
 8016e82:	f000 f87a 	bl	8016f7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016e86:	2300      	movs	r3, #0
 8016e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016e90:	e03f      	b.n	8016f12 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016e92:	f107 0316 	add.w	r3, r7, #22
 8016e96:	4619      	mov	r1, r3
 8016e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e9a:	f000 f9b9 	bl	8017210 <USBH_GetNextDesc>
 8016e9e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea2:	785b      	ldrb	r3, [r3, #1]
 8016ea4:	2b05      	cmp	r3, #5
 8016ea6:	d134      	bne.n	8016f12 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016ea8:	69fb      	ldr	r3, [r7, #28]
 8016eaa:	795b      	ldrb	r3, [r3, #5]
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d10f      	bne.n	8016ed0 <USBH_ParseCfgDesc+0x140>
 8016eb0:	69fb      	ldr	r3, [r7, #28]
 8016eb2:	799b      	ldrb	r3, [r3, #6]
 8016eb4:	2b02      	cmp	r3, #2
 8016eb6:	d10b      	bne.n	8016ed0 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	79db      	ldrb	r3, [r3, #7]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d10b      	bne.n	8016ed8 <USBH_ParseCfgDesc+0x148>
 8016ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b09      	cmp	r3, #9
 8016ec6:	d007      	beq.n	8016ed8 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eca:	2209      	movs	r2, #9
 8016ecc:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016ece:	e003      	b.n	8016ed8 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed2:	2207      	movs	r2, #7
 8016ed4:	701a      	strb	r2, [r3, #0]
 8016ed6:	e000      	b.n	8016eda <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016ed8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ede:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	00d2      	lsls	r2, r2, #3
 8016ee6:	211a      	movs	r1, #26
 8016ee8:	fb01 f303 	mul.w	r3, r1, r3
 8016eec:	4413      	add	r3, r2
 8016eee:	3308      	adds	r3, #8
 8016ef0:	6a3a      	ldr	r2, [r7, #32]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	3304      	adds	r3, #4
 8016ef6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016efa:	69b9      	ldr	r1, [r7, #24]
 8016efc:	68f8      	ldr	r0, [r7, #12]
 8016efe:	f000 f86b 	bl	8016fd8 <USBH_ParseEPDesc>
 8016f02:	4603      	mov	r3, r0
 8016f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016f08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	791b      	ldrb	r3, [r3, #4]
 8016f16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d204      	bcs.n	8016f28 <USBH_ParseCfgDesc+0x198>
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	885a      	ldrh	r2, [r3, #2]
 8016f22:	8afb      	ldrh	r3, [r7, #22]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d8b4      	bhi.n	8016e92 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	791b      	ldrb	r3, [r3, #4]
 8016f2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016f30:	429a      	cmp	r2, r3
 8016f32:	d201      	bcs.n	8016f38 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8016f34:	2303      	movs	r3, #3
 8016f36:	e01c      	b.n	8016f72 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8016f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f3c:	3301      	adds	r3, #1
 8016f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f46:	2b09      	cmp	r3, #9
 8016f48:	d805      	bhi.n	8016f56 <USBH_ParseCfgDesc+0x1c6>
 8016f4a:	6a3b      	ldr	r3, [r7, #32]
 8016f4c:	885a      	ldrh	r2, [r3, #2]
 8016f4e:	8afb      	ldrh	r3, [r7, #22]
 8016f50:	429a      	cmp	r2, r3
 8016f52:	f63f af78 	bhi.w	8016e46 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8016f56:	6a3b      	ldr	r3, [r7, #32]
 8016f58:	791b      	ldrb	r3, [r3, #4]
 8016f5a:	2b0a      	cmp	r3, #10
 8016f5c:	bf28      	it	cs
 8016f5e:	230a      	movcs	r3, #10
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d201      	bcs.n	8016f6e <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016f6a:	2303      	movs	r3, #3
 8016f6c:	e001      	b.n	8016f72 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	3730      	adds	r7, #48	; 0x30
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}

08016f7a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016f7a:	b480      	push	{r7}
 8016f7c:	b083      	sub	sp, #12
 8016f7e:	af00      	add	r7, sp, #0
 8016f80:	6078      	str	r0, [r7, #4]
 8016f82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	781a      	ldrb	r2, [r3, #0]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	785a      	ldrb	r2, [r3, #1]
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	789a      	ldrb	r2, [r3, #2]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	78da      	ldrb	r2, [r3, #3]
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	791a      	ldrb	r2, [r3, #4]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	795a      	ldrb	r2, [r3, #5]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	799a      	ldrb	r2, [r3, #6]
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	79da      	ldrb	r2, [r3, #7]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	7a1a      	ldrb	r2, [r3, #8]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	721a      	strb	r2, [r3, #8]
}
 8016fcc:	bf00      	nop
 8016fce:	370c      	adds	r7, #12
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr

08016fd8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b087      	sub	sp, #28
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	781a      	ldrb	r2, [r3, #0]
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	785a      	ldrb	r2, [r3, #1]
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	789a      	ldrb	r2, [r3, #2]
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	78da      	ldrb	r2, [r3, #3]
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	3304      	adds	r3, #4
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	b29a      	uxth	r2, r3
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	3305      	adds	r3, #5
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	b29b      	uxth	r3, r3
 8017018:	021b      	lsls	r3, r3, #8
 801701a:	b29b      	uxth	r3, r3
 801701c:	4313      	orrs	r3, r2
 801701e:	b29a      	uxth	r2, r3
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	799a      	ldrb	r2, [r3, #6]
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	889b      	ldrh	r3, [r3, #4]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d009      	beq.n	8017048 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8017038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801703c:	d804      	bhi.n	8017048 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8017042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017046:	d901      	bls.n	801704c <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8017048:	2303      	movs	r3, #3
 801704a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017052:	2b00      	cmp	r3, #0
 8017054:	d136      	bne.n	80170c4 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	78db      	ldrb	r3, [r3, #3]
 801705a:	f003 0303 	and.w	r3, r3, #3
 801705e:	2b02      	cmp	r3, #2
 8017060:	d108      	bne.n	8017074 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	889b      	ldrh	r3, [r3, #4]
 8017066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801706a:	f240 8097 	bls.w	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801706e:	2303      	movs	r3, #3
 8017070:	75fb      	strb	r3, [r7, #23]
 8017072:	e093      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	78db      	ldrb	r3, [r3, #3]
 8017078:	f003 0303 	and.w	r3, r3, #3
 801707c:	2b00      	cmp	r3, #0
 801707e:	d107      	bne.n	8017090 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	889b      	ldrh	r3, [r3, #4]
 8017084:	2b40      	cmp	r3, #64	; 0x40
 8017086:	f240 8089 	bls.w	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801708a:	2303      	movs	r3, #3
 801708c:	75fb      	strb	r3, [r7, #23]
 801708e:	e085      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	78db      	ldrb	r3, [r3, #3]
 8017094:	f003 0303 	and.w	r3, r3, #3
 8017098:	2b01      	cmp	r3, #1
 801709a:	d005      	beq.n	80170a8 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	78db      	ldrb	r3, [r3, #3]
 80170a0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80170a4:	2b03      	cmp	r3, #3
 80170a6:	d10a      	bne.n	80170be <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	799b      	ldrb	r3, [r3, #6]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d003      	beq.n	80170b8 <USBH_ParseEPDesc+0xe0>
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	799b      	ldrb	r3, [r3, #6]
 80170b4:	2b10      	cmp	r3, #16
 80170b6:	d970      	bls.n	801719a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80170b8:	2303      	movs	r3, #3
 80170ba:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80170bc:	e06d      	b.n	801719a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80170be:	2303      	movs	r3, #3
 80170c0:	75fb      	strb	r3, [r7, #23]
 80170c2:	e06b      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d13c      	bne.n	8017148 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	78db      	ldrb	r3, [r3, #3]
 80170d2:	f003 0303 	and.w	r3, r3, #3
 80170d6:	2b02      	cmp	r3, #2
 80170d8:	d005      	beq.n	80170e6 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	78db      	ldrb	r3, [r3, #3]
 80170de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d106      	bne.n	80170f4 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	889b      	ldrh	r3, [r3, #4]
 80170ea:	2b40      	cmp	r3, #64	; 0x40
 80170ec:	d956      	bls.n	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80170ee:	2303      	movs	r3, #3
 80170f0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80170f2:	e053      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	78db      	ldrb	r3, [r3, #3]
 80170f8:	f003 0303 	and.w	r3, r3, #3
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d10e      	bne.n	801711e <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	799b      	ldrb	r3, [r3, #6]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d007      	beq.n	8017118 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801710c:	2b10      	cmp	r3, #16
 801710e:	d803      	bhi.n	8017118 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8017114:	2b40      	cmp	r3, #64	; 0x40
 8017116:	d941      	bls.n	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8017118:	2303      	movs	r3, #3
 801711a:	75fb      	strb	r3, [r7, #23]
 801711c:	e03e      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	78db      	ldrb	r3, [r3, #3]
 8017122:	f003 0303 	and.w	r3, r3, #3
 8017126:	2b03      	cmp	r3, #3
 8017128:	d10b      	bne.n	8017142 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	799b      	ldrb	r3, [r3, #6]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d004      	beq.n	801713c <USBH_ParseEPDesc+0x164>
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	889b      	ldrh	r3, [r3, #4]
 8017136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801713a:	d32f      	bcc.n	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801713c:	2303      	movs	r3, #3
 801713e:	75fb      	strb	r3, [r7, #23]
 8017140:	e02c      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8017142:	2303      	movs	r3, #3
 8017144:	75fb      	strb	r3, [r7, #23]
 8017146:	e029      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801714e:	2b02      	cmp	r3, #2
 8017150:	d120      	bne.n	8017194 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	78db      	ldrb	r3, [r3, #3]
 8017156:	f003 0303 	and.w	r3, r3, #3
 801715a:	2b00      	cmp	r3, #0
 801715c:	d106      	bne.n	801716c <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	889b      	ldrh	r3, [r3, #4]
 8017162:	2b08      	cmp	r3, #8
 8017164:	d01a      	beq.n	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8017166:	2303      	movs	r3, #3
 8017168:	75fb      	strb	r3, [r7, #23]
 801716a:	e017      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	78db      	ldrb	r3, [r3, #3]
 8017170:	f003 0303 	and.w	r3, r3, #3
 8017174:	2b03      	cmp	r3, #3
 8017176:	d10a      	bne.n	801718e <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	799b      	ldrb	r3, [r3, #6]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d003      	beq.n	8017188 <USBH_ParseEPDesc+0x1b0>
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	889b      	ldrh	r3, [r3, #4]
 8017184:	2b08      	cmp	r3, #8
 8017186:	d909      	bls.n	801719c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8017188:	2303      	movs	r3, #3
 801718a:	75fb      	strb	r3, [r7, #23]
 801718c:	e006      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801718e:	2303      	movs	r3, #3
 8017190:	75fb      	strb	r3, [r7, #23]
 8017192:	e003      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8017194:	2303      	movs	r3, #3
 8017196:	75fb      	strb	r3, [r7, #23]
 8017198:	e000      	b.n	801719c <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801719a:	bf00      	nop
  }

  return status;
 801719c:	7dfb      	ldrb	r3, [r7, #23]
}
 801719e:	4618      	mov	r0, r3
 80171a0:	371c      	adds	r7, #28
 80171a2:	46bd      	mov	sp, r7
 80171a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a8:	4770      	bx	lr

080171aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80171aa:	b480      	push	{r7}
 80171ac:	b087      	sub	sp, #28
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	60f8      	str	r0, [r7, #12]
 80171b2:	60b9      	str	r1, [r7, #8]
 80171b4:	4613      	mov	r3, r2
 80171b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	3301      	adds	r3, #1
 80171bc:	781b      	ldrb	r3, [r3, #0]
 80171be:	2b03      	cmp	r3, #3
 80171c0:	d120      	bne.n	8017204 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	1e9a      	subs	r2, r3, #2
 80171c8:	88fb      	ldrh	r3, [r7, #6]
 80171ca:	4293      	cmp	r3, r2
 80171cc:	bf28      	it	cs
 80171ce:	4613      	movcs	r3, r2
 80171d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	3302      	adds	r3, #2
 80171d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80171d8:	2300      	movs	r3, #0
 80171da:	82fb      	strh	r3, [r7, #22]
 80171dc:	e00b      	b.n	80171f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80171de:	8afb      	ldrh	r3, [r7, #22]
 80171e0:	68fa      	ldr	r2, [r7, #12]
 80171e2:	4413      	add	r3, r2
 80171e4:	781a      	ldrb	r2, [r3, #0]
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	3301      	adds	r3, #1
 80171ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80171f0:	8afb      	ldrh	r3, [r7, #22]
 80171f2:	3302      	adds	r3, #2
 80171f4:	82fb      	strh	r3, [r7, #22]
 80171f6:	8afa      	ldrh	r2, [r7, #22]
 80171f8:	8abb      	ldrh	r3, [r7, #20]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d3ef      	bcc.n	80171de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	2200      	movs	r2, #0
 8017202:	701a      	strb	r2, [r3, #0]
  }
}
 8017204:	bf00      	nop
 8017206:	371c      	adds	r7, #28
 8017208:	46bd      	mov	sp, r7
 801720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720e:	4770      	bx	lr

08017210 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017210:	b480      	push	{r7}
 8017212:	b085      	sub	sp, #20
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	881a      	ldrh	r2, [r3, #0]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	b29b      	uxth	r3, r3
 8017224:	4413      	add	r3, r2
 8017226:	b29a      	uxth	r2, r3
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4413      	add	r3, r2
 8017236:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017238:	68fb      	ldr	r3, [r7, #12]
}
 801723a:	4618      	mov	r0, r3
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr

08017246 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8017246:	b580      	push	{r7, lr}
 8017248:	b086      	sub	sp, #24
 801724a:	af00      	add	r7, sp, #0
 801724c:	60f8      	str	r0, [r7, #12]
 801724e:	60b9      	str	r1, [r7, #8]
 8017250:	4613      	mov	r3, r2
 8017252:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8017254:	2301      	movs	r3, #1
 8017256:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	789b      	ldrb	r3, [r3, #2]
 801725c:	2b01      	cmp	r3, #1
 801725e:	d002      	beq.n	8017266 <USBH_CtlReq+0x20>
 8017260:	2b02      	cmp	r3, #2
 8017262:	d00f      	beq.n	8017284 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8017264:	e027      	b.n	80172b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	68ba      	ldr	r2, [r7, #8]
 801726a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	88fa      	ldrh	r2, [r7, #6]
 8017270:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	2201      	movs	r2, #1
 8017276:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	2202      	movs	r2, #2
 801727c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801727e:	2301      	movs	r3, #1
 8017280:	75fb      	strb	r3, [r7, #23]
      break;
 8017282:	e018      	b.n	80172b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8017284:	68f8      	ldr	r0, [r7, #12]
 8017286:	f000 f81b 	bl	80172c0 <USBH_HandleControl>
 801728a:	4603      	mov	r3, r0
 801728c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801728e:	7dfb      	ldrb	r3, [r7, #23]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d002      	beq.n	801729a <USBH_CtlReq+0x54>
 8017294:	7dfb      	ldrb	r3, [r7, #23]
 8017296:	2b03      	cmp	r3, #3
 8017298:	d106      	bne.n	80172a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2201      	movs	r2, #1
 801729e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2200      	movs	r2, #0
 80172a4:	761a      	strb	r2, [r3, #24]
      break;
 80172a6:	e005      	b.n	80172b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80172a8:	7dfb      	ldrb	r3, [r7, #23]
 80172aa:	2b02      	cmp	r3, #2
 80172ac:	d102      	bne.n	80172b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2201      	movs	r2, #1
 80172b2:	709a      	strb	r2, [r3, #2]
      break;
 80172b4:	bf00      	nop
  }
  return status;
 80172b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3718      	adds	r7, #24
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b086      	sub	sp, #24
 80172c4:	af02      	add	r7, sp, #8
 80172c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80172c8:	2301      	movs	r3, #1
 80172ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80172cc:	2300      	movs	r3, #0
 80172ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	7e1b      	ldrb	r3, [r3, #24]
 80172d4:	3b01      	subs	r3, #1
 80172d6:	2b0a      	cmp	r3, #10
 80172d8:	f200 8156 	bhi.w	8017588 <USBH_HandleControl+0x2c8>
 80172dc:	a201      	add	r2, pc, #4	; (adr r2, 80172e4 <USBH_HandleControl+0x24>)
 80172de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172e2:	bf00      	nop
 80172e4:	08017311 	.word	0x08017311
 80172e8:	0801732b 	.word	0x0801732b
 80172ec:	08017395 	.word	0x08017395
 80172f0:	080173bb 	.word	0x080173bb
 80172f4:	080173f3 	.word	0x080173f3
 80172f8:	0801741d 	.word	0x0801741d
 80172fc:	0801746f 	.word	0x0801746f
 8017300:	08017491 	.word	0x08017491
 8017304:	080174cd 	.word	0x080174cd
 8017308:	080174f3 	.word	0x080174f3
 801730c:	08017531 	.word	0x08017531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f103 0110 	add.w	r1, r3, #16
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	795b      	ldrb	r3, [r3, #5]
 801731a:	461a      	mov	r2, r3
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 f943 	bl	80175a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2202      	movs	r2, #2
 8017326:	761a      	strb	r2, [r3, #24]
      break;
 8017328:	e139      	b.n	801759e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	795b      	ldrb	r3, [r3, #5]
 801732e:	4619      	mov	r1, r3
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7ed ff3d 	bl	80051b0 <USBH_LL_GetURBState>
 8017336:	4603      	mov	r3, r0
 8017338:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801733a:	7bbb      	ldrb	r3, [r7, #14]
 801733c:	2b01      	cmp	r3, #1
 801733e:	d11e      	bne.n	801737e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	7c1b      	ldrb	r3, [r3, #16]
 8017344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017348:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	8adb      	ldrh	r3, [r3, #22]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00a      	beq.n	8017368 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8017352:	7b7b      	ldrb	r3, [r7, #13]
 8017354:	2b80      	cmp	r3, #128	; 0x80
 8017356:	d103      	bne.n	8017360 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2203      	movs	r2, #3
 801735c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801735e:	e115      	b.n	801758c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2205      	movs	r2, #5
 8017364:	761a      	strb	r2, [r3, #24]
      break;
 8017366:	e111      	b.n	801758c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8017368:	7b7b      	ldrb	r3, [r7, #13]
 801736a:	2b80      	cmp	r3, #128	; 0x80
 801736c:	d103      	bne.n	8017376 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	2209      	movs	r2, #9
 8017372:	761a      	strb	r2, [r3, #24]
      break;
 8017374:	e10a      	b.n	801758c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	2207      	movs	r2, #7
 801737a:	761a      	strb	r2, [r3, #24]
      break;
 801737c:	e106      	b.n	801758c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801737e:	7bbb      	ldrb	r3, [r7, #14]
 8017380:	2b04      	cmp	r3, #4
 8017382:	d003      	beq.n	801738c <USBH_HandleControl+0xcc>
 8017384:	7bbb      	ldrb	r3, [r7, #14]
 8017386:	2b02      	cmp	r3, #2
 8017388:	f040 8100 	bne.w	801758c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	220b      	movs	r2, #11
 8017390:	761a      	strb	r2, [r3, #24]
      break;
 8017392:	e0fb      	b.n	801758c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6899      	ldr	r1, [r3, #8]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	899a      	ldrh	r2, [r3, #12]
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	791b      	ldrb	r3, [r3, #4]
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f000 f93a 	bl	8017626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2204      	movs	r2, #4
 80173b6:	761a      	strb	r2, [r3, #24]
      break;
 80173b8:	e0f1      	b.n	801759e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	791b      	ldrb	r3, [r3, #4]
 80173be:	4619      	mov	r1, r3
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7ed fef5 	bl	80051b0 <USBH_LL_GetURBState>
 80173c6:	4603      	mov	r3, r0
 80173c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80173ca:	7bbb      	ldrb	r3, [r7, #14]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d102      	bne.n	80173d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2209      	movs	r2, #9
 80173d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80173d6:	7bbb      	ldrb	r3, [r7, #14]
 80173d8:	2b05      	cmp	r3, #5
 80173da:	d102      	bne.n	80173e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80173dc:	2303      	movs	r3, #3
 80173de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80173e0:	e0d6      	b.n	8017590 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80173e2:	7bbb      	ldrb	r3, [r7, #14]
 80173e4:	2b04      	cmp	r3, #4
 80173e6:	f040 80d3 	bne.w	8017590 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	220b      	movs	r2, #11
 80173ee:	761a      	strb	r2, [r3, #24]
      break;
 80173f0:	e0ce      	b.n	8017590 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6899      	ldr	r1, [r3, #8]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	899a      	ldrh	r2, [r3, #12]
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	795b      	ldrb	r3, [r3, #5]
 80173fe:	2001      	movs	r0, #1
 8017400:	9000      	str	r0, [sp, #0]
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	f000 f8ea 	bl	80175dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801740e:	b29a      	uxth	r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2206      	movs	r2, #6
 8017418:	761a      	strb	r2, [r3, #24]
      break;
 801741a:	e0c0      	b.n	801759e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	795b      	ldrb	r3, [r3, #5]
 8017420:	4619      	mov	r1, r3
 8017422:	6878      	ldr	r0, [r7, #4]
 8017424:	f7ed fec4 	bl	80051b0 <USBH_LL_GetURBState>
 8017428:	4603      	mov	r3, r0
 801742a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801742c:	7bbb      	ldrb	r3, [r7, #14]
 801742e:	2b01      	cmp	r3, #1
 8017430:	d103      	bne.n	801743a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2207      	movs	r2, #7
 8017436:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017438:	e0ac      	b.n	8017594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801743a:	7bbb      	ldrb	r3, [r7, #14]
 801743c:	2b05      	cmp	r3, #5
 801743e:	d105      	bne.n	801744c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	220c      	movs	r2, #12
 8017444:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8017446:	2303      	movs	r3, #3
 8017448:	73fb      	strb	r3, [r7, #15]
      break;
 801744a:	e0a3      	b.n	8017594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 801744c:	7bbb      	ldrb	r3, [r7, #14]
 801744e:	2b02      	cmp	r3, #2
 8017450:	d103      	bne.n	801745a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2205      	movs	r2, #5
 8017456:	761a      	strb	r2, [r3, #24]
      break;
 8017458:	e09c      	b.n	8017594 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801745a:	7bbb      	ldrb	r3, [r7, #14]
 801745c:	2b04      	cmp	r3, #4
 801745e:	f040 8099 	bne.w	8017594 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	220b      	movs	r2, #11
 8017466:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8017468:	2302      	movs	r3, #2
 801746a:	73fb      	strb	r3, [r7, #15]
      break;
 801746c:	e092      	b.n	8017594 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	791b      	ldrb	r3, [r3, #4]
 8017472:	2200      	movs	r2, #0
 8017474:	2100      	movs	r1, #0
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f000 f8d5 	bl	8017626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017482:	b29a      	uxth	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	2208      	movs	r2, #8
 801748c:	761a      	strb	r2, [r3, #24]

      break;
 801748e:	e086      	b.n	801759e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	791b      	ldrb	r3, [r3, #4]
 8017494:	4619      	mov	r1, r3
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f7ed fe8a 	bl	80051b0 <USBH_LL_GetURBState>
 801749c:	4603      	mov	r3, r0
 801749e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80174a0:	7bbb      	ldrb	r3, [r7, #14]
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	d105      	bne.n	80174b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	220d      	movs	r2, #13
 80174aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80174ac:	2300      	movs	r3, #0
 80174ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80174b0:	e072      	b.n	8017598 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80174b2:	7bbb      	ldrb	r3, [r7, #14]
 80174b4:	2b04      	cmp	r3, #4
 80174b6:	d103      	bne.n	80174c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	220b      	movs	r2, #11
 80174bc:	761a      	strb	r2, [r3, #24]
      break;
 80174be:	e06b      	b.n	8017598 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80174c0:	7bbb      	ldrb	r3, [r7, #14]
 80174c2:	2b05      	cmp	r3, #5
 80174c4:	d168      	bne.n	8017598 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80174c6:	2303      	movs	r3, #3
 80174c8:	73fb      	strb	r3, [r7, #15]
      break;
 80174ca:	e065      	b.n	8017598 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	795b      	ldrb	r3, [r3, #5]
 80174d0:	2201      	movs	r2, #1
 80174d2:	9200      	str	r2, [sp, #0]
 80174d4:	2200      	movs	r2, #0
 80174d6:	2100      	movs	r1, #0
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f000 f87f 	bl	80175dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	220a      	movs	r2, #10
 80174ee:	761a      	strb	r2, [r3, #24]
      break;
 80174f0:	e055      	b.n	801759e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	795b      	ldrb	r3, [r3, #5]
 80174f6:	4619      	mov	r1, r3
 80174f8:	6878      	ldr	r0, [r7, #4]
 80174fa:	f7ed fe59 	bl	80051b0 <USBH_LL_GetURBState>
 80174fe:	4603      	mov	r3, r0
 8017500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8017502:	7bbb      	ldrb	r3, [r7, #14]
 8017504:	2b01      	cmp	r3, #1
 8017506:	d105      	bne.n	8017514 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8017508:	2300      	movs	r3, #0
 801750a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	220d      	movs	r2, #13
 8017510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017512:	e043      	b.n	801759c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017514:	7bbb      	ldrb	r3, [r7, #14]
 8017516:	2b02      	cmp	r3, #2
 8017518:	d103      	bne.n	8017522 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2209      	movs	r2, #9
 801751e:	761a      	strb	r2, [r3, #24]
      break;
 8017520:	e03c      	b.n	801759c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8017522:	7bbb      	ldrb	r3, [r7, #14]
 8017524:	2b04      	cmp	r3, #4
 8017526:	d139      	bne.n	801759c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	220b      	movs	r2, #11
 801752c:	761a      	strb	r2, [r3, #24]
      break;
 801752e:	e035      	b.n	801759c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	7e5b      	ldrb	r3, [r3, #25]
 8017534:	3301      	adds	r3, #1
 8017536:	b2da      	uxtb	r2, r3
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	765a      	strb	r2, [r3, #25]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	7e5b      	ldrb	r3, [r3, #25]
 8017540:	2b02      	cmp	r3, #2
 8017542:	d806      	bhi.n	8017552 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2201      	movs	r2, #1
 8017548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2201      	movs	r2, #1
 801754e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8017550:	e025      	b.n	801759e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8017558:	2106      	movs	r1, #6
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2200      	movs	r2, #0
 8017562:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	795b      	ldrb	r3, [r3, #5]
 8017568:	4619      	mov	r1, r3
 801756a:	6878      	ldr	r0, [r7, #4]
 801756c:	f000 f90d 	bl	801778a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	791b      	ldrb	r3, [r3, #4]
 8017574:	4619      	mov	r1, r3
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f000 f907 	bl	801778a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2200      	movs	r2, #0
 8017580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8017582:	2302      	movs	r3, #2
 8017584:	73fb      	strb	r3, [r7, #15]
      break;
 8017586:	e00a      	b.n	801759e <USBH_HandleControl+0x2de>

    default:
      break;
 8017588:	bf00      	nop
 801758a:	e008      	b.n	801759e <USBH_HandleControl+0x2de>
      break;
 801758c:	bf00      	nop
 801758e:	e006      	b.n	801759e <USBH_HandleControl+0x2de>
      break;
 8017590:	bf00      	nop
 8017592:	e004      	b.n	801759e <USBH_HandleControl+0x2de>
      break;
 8017594:	bf00      	nop
 8017596:	e002      	b.n	801759e <USBH_HandleControl+0x2de>
      break;
 8017598:	bf00      	nop
 801759a:	e000      	b.n	801759e <USBH_HandleControl+0x2de>
      break;
 801759c:	bf00      	nop
  }

  return status;
 801759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3710      	adds	r7, #16
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b088      	sub	sp, #32
 80175ac:	af04      	add	r7, sp, #16
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	4613      	mov	r3, r2
 80175b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80175b6:	79f9      	ldrb	r1, [r7, #7]
 80175b8:	2300      	movs	r3, #0
 80175ba:	9303      	str	r3, [sp, #12]
 80175bc:	2308      	movs	r3, #8
 80175be:	9302      	str	r3, [sp, #8]
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	9301      	str	r3, [sp, #4]
 80175c4:	2300      	movs	r3, #0
 80175c6:	9300      	str	r3, [sp, #0]
 80175c8:	2300      	movs	r3, #0
 80175ca:	2200      	movs	r2, #0
 80175cc:	68f8      	ldr	r0, [r7, #12]
 80175ce:	f7ed fdbe 	bl	800514e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3710      	adds	r7, #16
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b088      	sub	sp, #32
 80175e0:	af04      	add	r7, sp, #16
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	4611      	mov	r1, r2
 80175e8:	461a      	mov	r2, r3
 80175ea:	460b      	mov	r3, r1
 80175ec:	80fb      	strh	r3, [r7, #6]
 80175ee:	4613      	mov	r3, r2
 80175f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d001      	beq.n	8017600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80175fc:	2300      	movs	r3, #0
 80175fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017600:	7979      	ldrb	r1, [r7, #5]
 8017602:	7e3b      	ldrb	r3, [r7, #24]
 8017604:	9303      	str	r3, [sp, #12]
 8017606:	88fb      	ldrh	r3, [r7, #6]
 8017608:	9302      	str	r3, [sp, #8]
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	9301      	str	r3, [sp, #4]
 801760e:	2301      	movs	r3, #1
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	2300      	movs	r3, #0
 8017614:	2200      	movs	r2, #0
 8017616:	68f8      	ldr	r0, [r7, #12]
 8017618:	f7ed fd99 	bl	800514e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801761c:	2300      	movs	r3, #0
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}

08017626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8017626:	b580      	push	{r7, lr}
 8017628:	b088      	sub	sp, #32
 801762a:	af04      	add	r7, sp, #16
 801762c:	60f8      	str	r0, [r7, #12]
 801762e:	60b9      	str	r1, [r7, #8]
 8017630:	4611      	mov	r1, r2
 8017632:	461a      	mov	r2, r3
 8017634:	460b      	mov	r3, r1
 8017636:	80fb      	strh	r3, [r7, #6]
 8017638:	4613      	mov	r3, r2
 801763a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801763c:	7979      	ldrb	r1, [r7, #5]
 801763e:	2300      	movs	r3, #0
 8017640:	9303      	str	r3, [sp, #12]
 8017642:	88fb      	ldrh	r3, [r7, #6]
 8017644:	9302      	str	r3, [sp, #8]
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	9301      	str	r3, [sp, #4]
 801764a:	2301      	movs	r3, #1
 801764c:	9300      	str	r3, [sp, #0]
 801764e:	2300      	movs	r3, #0
 8017650:	2201      	movs	r2, #1
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f7ed fd7b 	bl	800514e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8017658:	2300      	movs	r3, #0

}
 801765a:	4618      	mov	r0, r3
 801765c:	3710      	adds	r7, #16
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}

08017662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8017662:	b580      	push	{r7, lr}
 8017664:	b088      	sub	sp, #32
 8017666:	af04      	add	r7, sp, #16
 8017668:	60f8      	str	r0, [r7, #12]
 801766a:	60b9      	str	r1, [r7, #8]
 801766c:	4611      	mov	r1, r2
 801766e:	461a      	mov	r2, r3
 8017670:	460b      	mov	r3, r1
 8017672:	80fb      	strh	r3, [r7, #6]
 8017674:	4613      	mov	r3, r2
 8017676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801767e:	2b00      	cmp	r3, #0
 8017680:	d001      	beq.n	8017686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8017682:	2300      	movs	r3, #0
 8017684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017686:	7979      	ldrb	r1, [r7, #5]
 8017688:	7e3b      	ldrb	r3, [r7, #24]
 801768a:	9303      	str	r3, [sp, #12]
 801768c:	88fb      	ldrh	r3, [r7, #6]
 801768e:	9302      	str	r3, [sp, #8]
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	9301      	str	r3, [sp, #4]
 8017694:	2301      	movs	r3, #1
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	2302      	movs	r3, #2
 801769a:	2200      	movs	r2, #0
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	f7ed fd56 	bl	800514e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af04      	add	r7, sp, #16
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	4611      	mov	r1, r2
 80176b8:	461a      	mov	r2, r3
 80176ba:	460b      	mov	r3, r1
 80176bc:	80fb      	strh	r3, [r7, #6]
 80176be:	4613      	mov	r3, r2
 80176c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80176c2:	7979      	ldrb	r1, [r7, #5]
 80176c4:	2300      	movs	r3, #0
 80176c6:	9303      	str	r3, [sp, #12]
 80176c8:	88fb      	ldrh	r3, [r7, #6]
 80176ca:	9302      	str	r3, [sp, #8]
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	9301      	str	r3, [sp, #4]
 80176d0:	2301      	movs	r3, #1
 80176d2:	9300      	str	r3, [sp, #0]
 80176d4:	2302      	movs	r3, #2
 80176d6:	2201      	movs	r2, #1
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f7ed fd38 	bl	800514e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80176de:	2300      	movs	r3, #0
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3710      	adds	r7, #16
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b086      	sub	sp, #24
 80176ec:	af04      	add	r7, sp, #16
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	4608      	mov	r0, r1
 80176f2:	4611      	mov	r1, r2
 80176f4:	461a      	mov	r2, r3
 80176f6:	4603      	mov	r3, r0
 80176f8:	70fb      	strb	r3, [r7, #3]
 80176fa:	460b      	mov	r3, r1
 80176fc:	70bb      	strb	r3, [r7, #2]
 80176fe:	4613      	mov	r3, r2
 8017700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8017702:	7878      	ldrb	r0, [r7, #1]
 8017704:	78ba      	ldrb	r2, [r7, #2]
 8017706:	78f9      	ldrb	r1, [r7, #3]
 8017708:	8b3b      	ldrh	r3, [r7, #24]
 801770a:	9302      	str	r3, [sp, #8]
 801770c:	7d3b      	ldrb	r3, [r7, #20]
 801770e:	9301      	str	r3, [sp, #4]
 8017710:	7c3b      	ldrb	r3, [r7, #16]
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	4603      	mov	r3, r0
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7ed fccb 	bl	80050b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 801771c:	2300      	movs	r3, #0
}
 801771e:	4618      	mov	r0, r3
 8017720:	3708      	adds	r7, #8
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}

08017726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8017726:	b580      	push	{r7, lr}
 8017728:	b082      	sub	sp, #8
 801772a:	af00      	add	r7, sp, #0
 801772c:	6078      	str	r0, [r7, #4]
 801772e:	460b      	mov	r3, r1
 8017730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8017732:	78fb      	ldrb	r3, [r7, #3]
 8017734:	4619      	mov	r1, r3
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f7ed fcea 	bl	8005110 <USBH_LL_ClosePipe>

  return USBH_OK;
 801773c:	2300      	movs	r3, #0
}
 801773e:	4618      	mov	r0, r3
 8017740:	3708      	adds	r7, #8
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}

08017746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8017746:	b580      	push	{r7, lr}
 8017748:	b084      	sub	sp, #16
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
 801774e:	460b      	mov	r3, r1
 8017750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f839 	bl	80177ca <USBH_GetFreePipe>
 8017758:	4603      	mov	r3, r0
 801775a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801775c:	89fb      	ldrh	r3, [r7, #14]
 801775e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017762:	4293      	cmp	r3, r2
 8017764:	d00b      	beq.n	801777e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8017766:	78fa      	ldrb	r2, [r7, #3]
 8017768:	89fb      	ldrh	r3, [r7, #14]
 801776a:	f003 030f 	and.w	r3, r3, #15
 801776e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017772:	6879      	ldr	r1, [r7, #4]
 8017774:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	440b      	add	r3, r1
 801777c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801777e:	89fb      	ldrh	r3, [r7, #14]
 8017780:	b2db      	uxtb	r3, r3
}
 8017782:	4618      	mov	r0, r3
 8017784:	3710      	adds	r7, #16
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}

0801778a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801778a:	b480      	push	{r7}
 801778c:	b083      	sub	sp, #12
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
 8017792:	460b      	mov	r3, r1
 8017794:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8017796:	78fb      	ldrb	r3, [r7, #3]
 8017798:	2b0f      	cmp	r3, #15
 801779a:	d80f      	bhi.n	80177bc <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801779c:	78fb      	ldrb	r3, [r7, #3]
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80177a4:	009b      	lsls	r3, r3, #2
 80177a6:	4413      	add	r3, r2
 80177a8:	685a      	ldr	r2, [r3, #4]
 80177aa:	78fb      	ldrb	r3, [r7, #3]
 80177ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80177b0:	6879      	ldr	r1, [r7, #4]
 80177b2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80177b6:	009b      	lsls	r3, r3, #2
 80177b8:	440b      	add	r3, r1
 80177ba:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80177bc:	2300      	movs	r3, #0
}
 80177be:	4618      	mov	r0, r3
 80177c0:	370c      	adds	r7, #12
 80177c2:	46bd      	mov	sp, r7
 80177c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c8:	4770      	bx	lr

080177ca <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80177ca:	b480      	push	{r7}
 80177cc:	b085      	sub	sp, #20
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80177d2:	2300      	movs	r3, #0
 80177d4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80177d6:	2300      	movs	r3, #0
 80177d8:	73fb      	strb	r3, [r7, #15]
 80177da:	e010      	b.n	80177fe <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80177dc:	7bfb      	ldrb	r3, [r7, #15]
 80177de:	687a      	ldr	r2, [r7, #4]
 80177e0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80177e4:	009b      	lsls	r3, r3, #2
 80177e6:	4413      	add	r3, r2
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d102      	bne.n	80177f8 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	e007      	b.n	8017808 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80177f8:	7bfb      	ldrb	r3, [r7, #15]
 80177fa:	3301      	adds	r3, #1
 80177fc:	73fb      	strb	r3, [r7, #15]
 80177fe:	7bfb      	ldrb	r3, [r7, #15]
 8017800:	2b0f      	cmp	r3, #15
 8017802:	d9eb      	bls.n	80177dc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8017804:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8017808:	4618      	mov	r0, r3
 801780a:	3714      	adds	r7, #20
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr

08017814 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017814:	b480      	push	{r7}
 8017816:	b087      	sub	sp, #28
 8017818:	af00      	add	r7, sp, #0
 801781a:	60f8      	str	r0, [r7, #12]
 801781c:	60b9      	str	r1, [r7, #8]
 801781e:	4613      	mov	r3, r2
 8017820:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017822:	2301      	movs	r3, #1
 8017824:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017826:	2300      	movs	r3, #0
 8017828:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801782a:	4b1f      	ldr	r3, [pc, #124]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 801782c:	7a5b      	ldrb	r3, [r3, #9]
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b00      	cmp	r3, #0
 8017832:	d131      	bne.n	8017898 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017834:	4b1c      	ldr	r3, [pc, #112]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 8017836:	7a5b      	ldrb	r3, [r3, #9]
 8017838:	b2db      	uxtb	r3, r3
 801783a:	461a      	mov	r2, r3
 801783c:	4b1a      	ldr	r3, [pc, #104]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 801783e:	2100      	movs	r1, #0
 8017840:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017842:	4b19      	ldr	r3, [pc, #100]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 8017844:	7a5b      	ldrb	r3, [r3, #9]
 8017846:	b2db      	uxtb	r3, r3
 8017848:	4a17      	ldr	r2, [pc, #92]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	4413      	add	r3, r2
 801784e:	68fa      	ldr	r2, [r7, #12]
 8017850:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017852:	4b15      	ldr	r3, [pc, #84]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 8017854:	7a5b      	ldrb	r3, [r3, #9]
 8017856:	b2db      	uxtb	r3, r3
 8017858:	461a      	mov	r2, r3
 801785a:	4b13      	ldr	r3, [pc, #76]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 801785c:	4413      	add	r3, r2
 801785e:	79fa      	ldrb	r2, [r7, #7]
 8017860:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017862:	4b11      	ldr	r3, [pc, #68]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 8017864:	7a5b      	ldrb	r3, [r3, #9]
 8017866:	b2db      	uxtb	r3, r3
 8017868:	1c5a      	adds	r2, r3, #1
 801786a:	b2d1      	uxtb	r1, r2
 801786c:	4a0e      	ldr	r2, [pc, #56]	; (80178a8 <FATFS_LinkDriverEx+0x94>)
 801786e:	7251      	strb	r1, [r2, #9]
 8017870:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017872:	7dbb      	ldrb	r3, [r7, #22]
 8017874:	3330      	adds	r3, #48	; 0x30
 8017876:	b2da      	uxtb	r2, r3
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	3301      	adds	r3, #1
 8017880:	223a      	movs	r2, #58	; 0x3a
 8017882:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	3302      	adds	r3, #2
 8017888:	222f      	movs	r2, #47	; 0x2f
 801788a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	3303      	adds	r3, #3
 8017890:	2200      	movs	r2, #0
 8017892:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017894:	2300      	movs	r3, #0
 8017896:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017898:	7dfb      	ldrb	r3, [r7, #23]
}
 801789a:	4618      	mov	r0, r3
 801789c:	371c      	adds	r7, #28
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop
 80178a8:	200020b0 	.word	0x200020b0

080178ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80178b6:	2200      	movs	r2, #0
 80178b8:	6839      	ldr	r1, [r7, #0]
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7ff ffaa 	bl	8017814 <FATFS_LinkDriverEx>
 80178c0:	4603      	mov	r3, r0
}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3708      	adds	r7, #8
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
	...

080178cc <malloc>:
 80178cc:	4b02      	ldr	r3, [pc, #8]	; (80178d8 <malloc+0xc>)
 80178ce:	4601      	mov	r1, r0
 80178d0:	6818      	ldr	r0, [r3, #0]
 80178d2:	f000 b82b 	b.w	801792c <_malloc_r>
 80178d6:	bf00      	nop
 80178d8:	20000094 	.word	0x20000094

080178dc <free>:
 80178dc:	4b02      	ldr	r3, [pc, #8]	; (80178e8 <free+0xc>)
 80178de:	4601      	mov	r1, r0
 80178e0:	6818      	ldr	r0, [r3, #0]
 80178e2:	f000 b901 	b.w	8017ae8 <_free_r>
 80178e6:	bf00      	nop
 80178e8:	20000094 	.word	0x20000094

080178ec <sbrk_aligned>:
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	4e0e      	ldr	r6, [pc, #56]	; (8017928 <sbrk_aligned+0x3c>)
 80178f0:	460c      	mov	r4, r1
 80178f2:	6831      	ldr	r1, [r6, #0]
 80178f4:	4605      	mov	r5, r0
 80178f6:	b911      	cbnz	r1, 80178fe <sbrk_aligned+0x12>
 80178f8:	f000 f8ac 	bl	8017a54 <_sbrk_r>
 80178fc:	6030      	str	r0, [r6, #0]
 80178fe:	4621      	mov	r1, r4
 8017900:	4628      	mov	r0, r5
 8017902:	f000 f8a7 	bl	8017a54 <_sbrk_r>
 8017906:	1c43      	adds	r3, r0, #1
 8017908:	d00a      	beq.n	8017920 <sbrk_aligned+0x34>
 801790a:	1cc4      	adds	r4, r0, #3
 801790c:	f024 0403 	bic.w	r4, r4, #3
 8017910:	42a0      	cmp	r0, r4
 8017912:	d007      	beq.n	8017924 <sbrk_aligned+0x38>
 8017914:	1a21      	subs	r1, r4, r0
 8017916:	4628      	mov	r0, r5
 8017918:	f000 f89c 	bl	8017a54 <_sbrk_r>
 801791c:	3001      	adds	r0, #1
 801791e:	d101      	bne.n	8017924 <sbrk_aligned+0x38>
 8017920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017924:	4620      	mov	r0, r4
 8017926:	bd70      	pop	{r4, r5, r6, pc}
 8017928:	200020c0 	.word	0x200020c0

0801792c <_malloc_r>:
 801792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017930:	1ccd      	adds	r5, r1, #3
 8017932:	f025 0503 	bic.w	r5, r5, #3
 8017936:	3508      	adds	r5, #8
 8017938:	2d0c      	cmp	r5, #12
 801793a:	bf38      	it	cc
 801793c:	250c      	movcc	r5, #12
 801793e:	2d00      	cmp	r5, #0
 8017940:	4607      	mov	r7, r0
 8017942:	db01      	blt.n	8017948 <_malloc_r+0x1c>
 8017944:	42a9      	cmp	r1, r5
 8017946:	d905      	bls.n	8017954 <_malloc_r+0x28>
 8017948:	230c      	movs	r3, #12
 801794a:	603b      	str	r3, [r7, #0]
 801794c:	2600      	movs	r6, #0
 801794e:	4630      	mov	r0, r6
 8017950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017954:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a28 <_malloc_r+0xfc>
 8017958:	f000 f868 	bl	8017a2c <__malloc_lock>
 801795c:	f8d8 3000 	ldr.w	r3, [r8]
 8017960:	461c      	mov	r4, r3
 8017962:	bb5c      	cbnz	r4, 80179bc <_malloc_r+0x90>
 8017964:	4629      	mov	r1, r5
 8017966:	4638      	mov	r0, r7
 8017968:	f7ff ffc0 	bl	80178ec <sbrk_aligned>
 801796c:	1c43      	adds	r3, r0, #1
 801796e:	4604      	mov	r4, r0
 8017970:	d155      	bne.n	8017a1e <_malloc_r+0xf2>
 8017972:	f8d8 4000 	ldr.w	r4, [r8]
 8017976:	4626      	mov	r6, r4
 8017978:	2e00      	cmp	r6, #0
 801797a:	d145      	bne.n	8017a08 <_malloc_r+0xdc>
 801797c:	2c00      	cmp	r4, #0
 801797e:	d048      	beq.n	8017a12 <_malloc_r+0xe6>
 8017980:	6823      	ldr	r3, [r4, #0]
 8017982:	4631      	mov	r1, r6
 8017984:	4638      	mov	r0, r7
 8017986:	eb04 0903 	add.w	r9, r4, r3
 801798a:	f000 f863 	bl	8017a54 <_sbrk_r>
 801798e:	4581      	cmp	r9, r0
 8017990:	d13f      	bne.n	8017a12 <_malloc_r+0xe6>
 8017992:	6821      	ldr	r1, [r4, #0]
 8017994:	1a6d      	subs	r5, r5, r1
 8017996:	4629      	mov	r1, r5
 8017998:	4638      	mov	r0, r7
 801799a:	f7ff ffa7 	bl	80178ec <sbrk_aligned>
 801799e:	3001      	adds	r0, #1
 80179a0:	d037      	beq.n	8017a12 <_malloc_r+0xe6>
 80179a2:	6823      	ldr	r3, [r4, #0]
 80179a4:	442b      	add	r3, r5
 80179a6:	6023      	str	r3, [r4, #0]
 80179a8:	f8d8 3000 	ldr.w	r3, [r8]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d038      	beq.n	8017a22 <_malloc_r+0xf6>
 80179b0:	685a      	ldr	r2, [r3, #4]
 80179b2:	42a2      	cmp	r2, r4
 80179b4:	d12b      	bne.n	8017a0e <_malloc_r+0xe2>
 80179b6:	2200      	movs	r2, #0
 80179b8:	605a      	str	r2, [r3, #4]
 80179ba:	e00f      	b.n	80179dc <_malloc_r+0xb0>
 80179bc:	6822      	ldr	r2, [r4, #0]
 80179be:	1b52      	subs	r2, r2, r5
 80179c0:	d41f      	bmi.n	8017a02 <_malloc_r+0xd6>
 80179c2:	2a0b      	cmp	r2, #11
 80179c4:	d917      	bls.n	80179f6 <_malloc_r+0xca>
 80179c6:	1961      	adds	r1, r4, r5
 80179c8:	42a3      	cmp	r3, r4
 80179ca:	6025      	str	r5, [r4, #0]
 80179cc:	bf18      	it	ne
 80179ce:	6059      	strne	r1, [r3, #4]
 80179d0:	6863      	ldr	r3, [r4, #4]
 80179d2:	bf08      	it	eq
 80179d4:	f8c8 1000 	streq.w	r1, [r8]
 80179d8:	5162      	str	r2, [r4, r5]
 80179da:	604b      	str	r3, [r1, #4]
 80179dc:	4638      	mov	r0, r7
 80179de:	f104 060b 	add.w	r6, r4, #11
 80179e2:	f000 f829 	bl	8017a38 <__malloc_unlock>
 80179e6:	f026 0607 	bic.w	r6, r6, #7
 80179ea:	1d23      	adds	r3, r4, #4
 80179ec:	1af2      	subs	r2, r6, r3
 80179ee:	d0ae      	beq.n	801794e <_malloc_r+0x22>
 80179f0:	1b9b      	subs	r3, r3, r6
 80179f2:	50a3      	str	r3, [r4, r2]
 80179f4:	e7ab      	b.n	801794e <_malloc_r+0x22>
 80179f6:	42a3      	cmp	r3, r4
 80179f8:	6862      	ldr	r2, [r4, #4]
 80179fa:	d1dd      	bne.n	80179b8 <_malloc_r+0x8c>
 80179fc:	f8c8 2000 	str.w	r2, [r8]
 8017a00:	e7ec      	b.n	80179dc <_malloc_r+0xb0>
 8017a02:	4623      	mov	r3, r4
 8017a04:	6864      	ldr	r4, [r4, #4]
 8017a06:	e7ac      	b.n	8017962 <_malloc_r+0x36>
 8017a08:	4634      	mov	r4, r6
 8017a0a:	6876      	ldr	r6, [r6, #4]
 8017a0c:	e7b4      	b.n	8017978 <_malloc_r+0x4c>
 8017a0e:	4613      	mov	r3, r2
 8017a10:	e7cc      	b.n	80179ac <_malloc_r+0x80>
 8017a12:	230c      	movs	r3, #12
 8017a14:	603b      	str	r3, [r7, #0]
 8017a16:	4638      	mov	r0, r7
 8017a18:	f000 f80e 	bl	8017a38 <__malloc_unlock>
 8017a1c:	e797      	b.n	801794e <_malloc_r+0x22>
 8017a1e:	6025      	str	r5, [r4, #0]
 8017a20:	e7dc      	b.n	80179dc <_malloc_r+0xb0>
 8017a22:	605b      	str	r3, [r3, #4]
 8017a24:	deff      	udf	#255	; 0xff
 8017a26:	bf00      	nop
 8017a28:	200020bc 	.word	0x200020bc

08017a2c <__malloc_lock>:
 8017a2c:	4801      	ldr	r0, [pc, #4]	; (8017a34 <__malloc_lock+0x8>)
 8017a2e:	f000 b84b 	b.w	8017ac8 <__retarget_lock_acquire_recursive>
 8017a32:	bf00      	nop
 8017a34:	200021fc 	.word	0x200021fc

08017a38 <__malloc_unlock>:
 8017a38:	4801      	ldr	r0, [pc, #4]	; (8017a40 <__malloc_unlock+0x8>)
 8017a3a:	f000 b846 	b.w	8017aca <__retarget_lock_release_recursive>
 8017a3e:	bf00      	nop
 8017a40:	200021fc 	.word	0x200021fc

08017a44 <memset>:
 8017a44:	4402      	add	r2, r0
 8017a46:	4603      	mov	r3, r0
 8017a48:	4293      	cmp	r3, r2
 8017a4a:	d100      	bne.n	8017a4e <memset+0xa>
 8017a4c:	4770      	bx	lr
 8017a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8017a52:	e7f9      	b.n	8017a48 <memset+0x4>

08017a54 <_sbrk_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4d06      	ldr	r5, [pc, #24]	; (8017a70 <_sbrk_r+0x1c>)
 8017a58:	2300      	movs	r3, #0
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	4608      	mov	r0, r1
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	f7ec fa1c 	bl	8003e9c <_sbrk>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_sbrk_r+0x1a>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_sbrk_r+0x1a>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	20002200 	.word	0x20002200

08017a74 <__errno>:
 8017a74:	4b01      	ldr	r3, [pc, #4]	; (8017a7c <__errno+0x8>)
 8017a76:	6818      	ldr	r0, [r3, #0]
 8017a78:	4770      	bx	lr
 8017a7a:	bf00      	nop
 8017a7c:	20000094 	.word	0x20000094

08017a80 <__libc_init_array>:
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	4d0d      	ldr	r5, [pc, #52]	; (8017ab8 <__libc_init_array+0x38>)
 8017a84:	4c0d      	ldr	r4, [pc, #52]	; (8017abc <__libc_init_array+0x3c>)
 8017a86:	1b64      	subs	r4, r4, r5
 8017a88:	10a4      	asrs	r4, r4, #2
 8017a8a:	2600      	movs	r6, #0
 8017a8c:	42a6      	cmp	r6, r4
 8017a8e:	d109      	bne.n	8017aa4 <__libc_init_array+0x24>
 8017a90:	4d0b      	ldr	r5, [pc, #44]	; (8017ac0 <__libc_init_array+0x40>)
 8017a92:	4c0c      	ldr	r4, [pc, #48]	; (8017ac4 <__libc_init_array+0x44>)
 8017a94:	f000 fb68 	bl	8018168 <_init>
 8017a98:	1b64      	subs	r4, r4, r5
 8017a9a:	10a4      	asrs	r4, r4, #2
 8017a9c:	2600      	movs	r6, #0
 8017a9e:	42a6      	cmp	r6, r4
 8017aa0:	d105      	bne.n	8017aae <__libc_init_array+0x2e>
 8017aa2:	bd70      	pop	{r4, r5, r6, pc}
 8017aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017aa8:	4798      	blx	r3
 8017aaa:	3601      	adds	r6, #1
 8017aac:	e7ee      	b.n	8017a8c <__libc_init_array+0xc>
 8017aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ab2:	4798      	blx	r3
 8017ab4:	3601      	adds	r6, #1
 8017ab6:	e7f2      	b.n	8017a9e <__libc_init_array+0x1e>
 8017ab8:	08019aa0 	.word	0x08019aa0
 8017abc:	08019aa0 	.word	0x08019aa0
 8017ac0:	08019aa0 	.word	0x08019aa0
 8017ac4:	08019aa4 	.word	0x08019aa4

08017ac8 <__retarget_lock_acquire_recursive>:
 8017ac8:	4770      	bx	lr

08017aca <__retarget_lock_release_recursive>:
 8017aca:	4770      	bx	lr

08017acc <memcpy>:
 8017acc:	440a      	add	r2, r1
 8017ace:	4291      	cmp	r1, r2
 8017ad0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017ad4:	d100      	bne.n	8017ad8 <memcpy+0xc>
 8017ad6:	4770      	bx	lr
 8017ad8:	b510      	push	{r4, lr}
 8017ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ae2:	4291      	cmp	r1, r2
 8017ae4:	d1f9      	bne.n	8017ada <memcpy+0xe>
 8017ae6:	bd10      	pop	{r4, pc}

08017ae8 <_free_r>:
 8017ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aea:	2900      	cmp	r1, #0
 8017aec:	d044      	beq.n	8017b78 <_free_r+0x90>
 8017aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017af2:	9001      	str	r0, [sp, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	f1a1 0404 	sub.w	r4, r1, #4
 8017afa:	bfb8      	it	lt
 8017afc:	18e4      	addlt	r4, r4, r3
 8017afe:	f7ff ff95 	bl	8017a2c <__malloc_lock>
 8017b02:	4a1e      	ldr	r2, [pc, #120]	; (8017b7c <_free_r+0x94>)
 8017b04:	9801      	ldr	r0, [sp, #4]
 8017b06:	6813      	ldr	r3, [r2, #0]
 8017b08:	b933      	cbnz	r3, 8017b18 <_free_r+0x30>
 8017b0a:	6063      	str	r3, [r4, #4]
 8017b0c:	6014      	str	r4, [r2, #0]
 8017b0e:	b003      	add	sp, #12
 8017b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b14:	f7ff bf90 	b.w	8017a38 <__malloc_unlock>
 8017b18:	42a3      	cmp	r3, r4
 8017b1a:	d908      	bls.n	8017b2e <_free_r+0x46>
 8017b1c:	6825      	ldr	r5, [r4, #0]
 8017b1e:	1961      	adds	r1, r4, r5
 8017b20:	428b      	cmp	r3, r1
 8017b22:	bf01      	itttt	eq
 8017b24:	6819      	ldreq	r1, [r3, #0]
 8017b26:	685b      	ldreq	r3, [r3, #4]
 8017b28:	1949      	addeq	r1, r1, r5
 8017b2a:	6021      	streq	r1, [r4, #0]
 8017b2c:	e7ed      	b.n	8017b0a <_free_r+0x22>
 8017b2e:	461a      	mov	r2, r3
 8017b30:	685b      	ldr	r3, [r3, #4]
 8017b32:	b10b      	cbz	r3, 8017b38 <_free_r+0x50>
 8017b34:	42a3      	cmp	r3, r4
 8017b36:	d9fa      	bls.n	8017b2e <_free_r+0x46>
 8017b38:	6811      	ldr	r1, [r2, #0]
 8017b3a:	1855      	adds	r5, r2, r1
 8017b3c:	42a5      	cmp	r5, r4
 8017b3e:	d10b      	bne.n	8017b58 <_free_r+0x70>
 8017b40:	6824      	ldr	r4, [r4, #0]
 8017b42:	4421      	add	r1, r4
 8017b44:	1854      	adds	r4, r2, r1
 8017b46:	42a3      	cmp	r3, r4
 8017b48:	6011      	str	r1, [r2, #0]
 8017b4a:	d1e0      	bne.n	8017b0e <_free_r+0x26>
 8017b4c:	681c      	ldr	r4, [r3, #0]
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	6053      	str	r3, [r2, #4]
 8017b52:	440c      	add	r4, r1
 8017b54:	6014      	str	r4, [r2, #0]
 8017b56:	e7da      	b.n	8017b0e <_free_r+0x26>
 8017b58:	d902      	bls.n	8017b60 <_free_r+0x78>
 8017b5a:	230c      	movs	r3, #12
 8017b5c:	6003      	str	r3, [r0, #0]
 8017b5e:	e7d6      	b.n	8017b0e <_free_r+0x26>
 8017b60:	6825      	ldr	r5, [r4, #0]
 8017b62:	1961      	adds	r1, r4, r5
 8017b64:	428b      	cmp	r3, r1
 8017b66:	bf04      	itt	eq
 8017b68:	6819      	ldreq	r1, [r3, #0]
 8017b6a:	685b      	ldreq	r3, [r3, #4]
 8017b6c:	6063      	str	r3, [r4, #4]
 8017b6e:	bf04      	itt	eq
 8017b70:	1949      	addeq	r1, r1, r5
 8017b72:	6021      	streq	r1, [r4, #0]
 8017b74:	6054      	str	r4, [r2, #4]
 8017b76:	e7ca      	b.n	8017b0e <_free_r+0x26>
 8017b78:	b003      	add	sp, #12
 8017b7a:	bd30      	pop	{r4, r5, pc}
 8017b7c:	200020bc 	.word	0x200020bc

08017b80 <with_errno>:
 8017b80:	b513      	push	{r0, r1, r4, lr}
 8017b82:	4604      	mov	r4, r0
 8017b84:	ed8d 0b00 	vstr	d0, [sp]
 8017b88:	f7ff ff74 	bl	8017a74 <__errno>
 8017b8c:	ed9d 0b00 	vldr	d0, [sp]
 8017b90:	6004      	str	r4, [r0, #0]
 8017b92:	b002      	add	sp, #8
 8017b94:	bd10      	pop	{r4, pc}

08017b96 <xflow>:
 8017b96:	b082      	sub	sp, #8
 8017b98:	b158      	cbz	r0, 8017bb2 <xflow+0x1c>
 8017b9a:	eeb1 7b40 	vneg.f64	d7, d0
 8017b9e:	ed8d 7b00 	vstr	d7, [sp]
 8017ba2:	ed9d 7b00 	vldr	d7, [sp]
 8017ba6:	2022      	movs	r0, #34	; 0x22
 8017ba8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017bac:	b002      	add	sp, #8
 8017bae:	f7ff bfe7 	b.w	8017b80 <with_errno>
 8017bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8017bb6:	e7f2      	b.n	8017b9e <xflow+0x8>

08017bb8 <__math_uflow>:
 8017bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017bc0 <__math_uflow+0x8>
 8017bbc:	f7ff bfeb 	b.w	8017b96 <xflow>
 8017bc0:	00000000 	.word	0x00000000
 8017bc4:	10000000 	.word	0x10000000

08017bc8 <__math_oflow>:
 8017bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017bd0 <__math_oflow+0x8>
 8017bcc:	f7ff bfe3 	b.w	8017b96 <xflow>
 8017bd0:	00000000 	.word	0x00000000
 8017bd4:	70000000 	.word	0x70000000

08017bd8 <__math_divzero>:
 8017bd8:	b082      	sub	sp, #8
 8017bda:	2800      	cmp	r0, #0
 8017bdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017be0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017be4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017be8:	ed8d 7b00 	vstr	d7, [sp]
 8017bec:	ed9d 0b00 	vldr	d0, [sp]
 8017bf0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8017c00 <__math_divzero+0x28>
 8017bf4:	2022      	movs	r0, #34	; 0x22
 8017bf6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017bfa:	b002      	add	sp, #8
 8017bfc:	f7ff bfc0 	b.w	8017b80 <with_errno>
	...

08017c08 <__math_invalid>:
 8017c08:	eeb0 7b40 	vmov.f64	d7, d0
 8017c0c:	eeb4 7b47 	vcmp.f64	d7, d7
 8017c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c14:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017c18:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017c1c:	d602      	bvs.n	8017c24 <__math_invalid+0x1c>
 8017c1e:	2021      	movs	r0, #33	; 0x21
 8017c20:	f7ff bfae 	b.w	8017b80 <with_errno>
 8017c24:	4770      	bx	lr

08017c26 <__math_check_uflow>:
 8017c26:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c2e:	d102      	bne.n	8017c36 <__math_check_uflow+0x10>
 8017c30:	2022      	movs	r0, #34	; 0x22
 8017c32:	f7ff bfa5 	b.w	8017b80 <with_errno>
 8017c36:	4770      	bx	lr

08017c38 <__math_check_oflow>:
 8017c38:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017c58 <__math_check_oflow+0x20>
 8017c3c:	eeb0 7bc0 	vabs.f64	d7, d0
 8017c40:	eeb4 7b46 	vcmp.f64	d7, d6
 8017c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c48:	dd02      	ble.n	8017c50 <__math_check_oflow+0x18>
 8017c4a:	2022      	movs	r0, #34	; 0x22
 8017c4c:	f7ff bf98 	b.w	8017b80 <with_errno>
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	f3af 8000 	nop.w
 8017c58:	ffffffff 	.word	0xffffffff
 8017c5c:	7fefffff 	.word	0x7fefffff

08017c60 <checkint>:
 8017c60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017c64:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	b570      	push	{r4, r5, r6, lr}
 8017c6c:	dd2a      	ble.n	8017cc4 <checkint+0x64>
 8017c6e:	f240 4333 	movw	r3, #1075	; 0x433
 8017c72:	429a      	cmp	r2, r3
 8017c74:	dc24      	bgt.n	8017cc0 <checkint+0x60>
 8017c76:	1a9b      	subs	r3, r3, r2
 8017c78:	f1a3 0620 	sub.w	r6, r3, #32
 8017c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c80:	fa02 f403 	lsl.w	r4, r2, r3
 8017c84:	fa02 f606 	lsl.w	r6, r2, r6
 8017c88:	f1c3 0520 	rsb	r5, r3, #32
 8017c8c:	fa22 f505 	lsr.w	r5, r2, r5
 8017c90:	4334      	orrs	r4, r6
 8017c92:	432c      	orrs	r4, r5
 8017c94:	409a      	lsls	r2, r3
 8017c96:	ea20 0202 	bic.w	r2, r0, r2
 8017c9a:	ea21 0404 	bic.w	r4, r1, r4
 8017c9e:	4322      	orrs	r2, r4
 8017ca0:	f1a3 0420 	sub.w	r4, r3, #32
 8017ca4:	f1c3 0220 	rsb	r2, r3, #32
 8017ca8:	d10c      	bne.n	8017cc4 <checkint+0x64>
 8017caa:	40d8      	lsrs	r0, r3
 8017cac:	fa01 f302 	lsl.w	r3, r1, r2
 8017cb0:	4318      	orrs	r0, r3
 8017cb2:	40e1      	lsrs	r1, r4
 8017cb4:	4308      	orrs	r0, r1
 8017cb6:	f000 0001 	and.w	r0, r0, #1
 8017cba:	f1d0 0002 	rsbs	r0, r0, #2
 8017cbe:	bd70      	pop	{r4, r5, r6, pc}
 8017cc0:	2002      	movs	r0, #2
 8017cc2:	e7fc      	b.n	8017cbe <checkint+0x5e>
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e7fa      	b.n	8017cbe <checkint+0x5e>

08017cc8 <pow>:
 8017cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ccc:	ee10 4a90 	vmov	r4, s1
 8017cd0:	ed2d 8b0a 	vpush	{d8-d12}
 8017cd4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017cd8:	ee11 aa90 	vmov	sl, s3
 8017cdc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017ce0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	ee10 5a10 	vmov	r5, s0
 8017cea:	ee11 0a10 	vmov	r0, s2
 8017cee:	b087      	sub	sp, #28
 8017cf0:	46c4      	mov	ip, r8
 8017cf2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8017cf6:	d806      	bhi.n	8017d06 <pow+0x3e>
 8017cf8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017cfc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8017d00:	2b7f      	cmp	r3, #127	; 0x7f
 8017d02:	f240 8156 	bls.w	8017fb2 <pow+0x2ea>
 8017d06:	1802      	adds	r2, r0, r0
 8017d08:	eb4a 010a 	adc.w	r1, sl, sl
 8017d0c:	f06f 0b01 	mvn.w	fp, #1
 8017d10:	1e57      	subs	r7, r2, #1
 8017d12:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8017d16:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8017d1a:	45bb      	cmp	fp, r7
 8017d1c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017d20:	d242      	bcs.n	8017da8 <pow+0xe0>
 8017d22:	ea52 0301 	orrs.w	r3, r2, r1
 8017d26:	f04f 0300 	mov.w	r3, #0
 8017d2a:	d10c      	bne.n	8017d46 <pow+0x7e>
 8017d2c:	196d      	adds	r5, r5, r5
 8017d2e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8017d32:	4164      	adcs	r4, r4
 8017d34:	42ab      	cmp	r3, r5
 8017d36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017d3a:	41a3      	sbcs	r3, r4
 8017d3c:	f0c0 808f 	bcc.w	8017e5e <pow+0x196>
 8017d40:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d44:	e02b      	b.n	8017d9e <pow+0xd6>
 8017d46:	4ed4      	ldr	r6, [pc, #848]	; (8018098 <pow+0x3d0>)
 8017d48:	42b4      	cmp	r4, r6
 8017d4a:	bf08      	it	eq
 8017d4c:	429d      	cmpeq	r5, r3
 8017d4e:	d109      	bne.n	8017d64 <pow+0x9c>
 8017d50:	1800      	adds	r0, r0, r0
 8017d52:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8017d56:	eb4a 0a0a 	adc.w	sl, sl, sl
 8017d5a:	4283      	cmp	r3, r0
 8017d5c:	4bcf      	ldr	r3, [pc, #828]	; (801809c <pow+0x3d4>)
 8017d5e:	eb73 030a 	sbcs.w	r3, r3, sl
 8017d62:	e7eb      	b.n	8017d3c <pow+0x74>
 8017d64:	196d      	adds	r5, r5, r5
 8017d66:	48ce      	ldr	r0, [pc, #824]	; (80180a0 <pow+0x3d8>)
 8017d68:	4164      	adcs	r4, r4
 8017d6a:	42ab      	cmp	r3, r5
 8017d6c:	eb70 0604 	sbcs.w	r6, r0, r4
 8017d70:	d375      	bcc.n	8017e5e <pow+0x196>
 8017d72:	4281      	cmp	r1, r0
 8017d74:	bf08      	it	eq
 8017d76:	429a      	cmpeq	r2, r3
 8017d78:	d171      	bne.n	8017e5e <pow+0x196>
 8017d7a:	4aca      	ldr	r2, [pc, #808]	; (80180a4 <pow+0x3dc>)
 8017d7c:	4294      	cmp	r4, r2
 8017d7e:	bf08      	it	eq
 8017d80:	429d      	cmpeq	r5, r3
 8017d82:	d0dd      	beq.n	8017d40 <pow+0x78>
 8017d84:	4294      	cmp	r4, r2
 8017d86:	ea6f 0a0a 	mvn.w	sl, sl
 8017d8a:	bf34      	ite	cc
 8017d8c:	2400      	movcc	r4, #0
 8017d8e:	2401      	movcs	r4, #1
 8017d90:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8017d94:	4554      	cmp	r4, sl
 8017d96:	f040 81dc 	bne.w	8018152 <pow+0x48a>
 8017d9a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8017d9e:	b007      	add	sp, #28
 8017da0:	ecbd 8b0a 	vpop	{d8-d12}
 8017da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da8:	196f      	adds	r7, r5, r5
 8017daa:	eb44 0904 	adc.w	r9, r4, r4
 8017dae:	1e7a      	subs	r2, r7, #1
 8017db0:	f169 0300 	sbc.w	r3, r9, #0
 8017db4:	4593      	cmp	fp, r2
 8017db6:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017dba:	d225      	bcs.n	8017e08 <pow+0x140>
 8017dbc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017dc0:	2c00      	cmp	r4, #0
 8017dc2:	da13      	bge.n	8017dec <pow+0x124>
 8017dc4:	4651      	mov	r1, sl
 8017dc6:	f7ff ff4b 	bl	8017c60 <checkint>
 8017dca:	2801      	cmp	r0, #1
 8017dcc:	d10e      	bne.n	8017dec <pow+0x124>
 8017dce:	eeb1 0b40 	vneg.f64	d0, d0
 8017dd2:	ea57 0909 	orrs.w	r9, r7, r9
 8017dd6:	d10b      	bne.n	8017df0 <pow+0x128>
 8017dd8:	f1ba 0f00 	cmp.w	sl, #0
 8017ddc:	dadf      	bge.n	8017d9e <pow+0xd6>
 8017dde:	b007      	add	sp, #28
 8017de0:	ecbd 8b0a 	vpop	{d8-d12}
 8017de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de8:	f7ff bef6 	b.w	8017bd8 <__math_divzero>
 8017dec:	2000      	movs	r0, #0
 8017dee:	e7f0      	b.n	8017dd2 <pow+0x10a>
 8017df0:	f1ba 0f00 	cmp.w	sl, #0
 8017df4:	dad3      	bge.n	8017d9e <pow+0xd6>
 8017df6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017dfa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017dfe:	ed8d 7b00 	vstr	d7, [sp]
 8017e02:	ed9d 0b00 	vldr	d0, [sp]
 8017e06:	e7ca      	b.n	8017d9e <pow+0xd6>
 8017e08:	2c00      	cmp	r4, #0
 8017e0a:	da2b      	bge.n	8017e64 <pow+0x19c>
 8017e0c:	4651      	mov	r1, sl
 8017e0e:	f7ff ff27 	bl	8017c60 <checkint>
 8017e12:	b930      	cbnz	r0, 8017e22 <pow+0x15a>
 8017e14:	b007      	add	sp, #28
 8017e16:	ecbd 8b0a 	vpop	{d8-d12}
 8017e1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e1e:	f7ff bef3 	b.w	8017c08 <__math_invalid>
 8017e22:	1e41      	subs	r1, r0, #1
 8017e24:	4248      	negs	r0, r1
 8017e26:	4148      	adcs	r0, r1
 8017e28:	0480      	lsls	r0, r0, #18
 8017e2a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017e2e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8017e32:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8017e36:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8017e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8017e3c:	d92d      	bls.n	8017e9a <pow+0x1d2>
 8017e3e:	4b96      	ldr	r3, [pc, #600]	; (8018098 <pow+0x3d0>)
 8017e40:	2000      	movs	r0, #0
 8017e42:	429c      	cmp	r4, r3
 8017e44:	bf08      	it	eq
 8017e46:	4285      	cmpeq	r5, r0
 8017e48:	f43f af7a 	beq.w	8017d40 <pow+0x78>
 8017e4c:	f240 31bd 	movw	r1, #957	; 0x3bd
 8017e50:	428a      	cmp	r2, r1
 8017e52:	d80c      	bhi.n	8017e6e <pow+0x1a6>
 8017e54:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017e58:	42a8      	cmp	r0, r5
 8017e5a:	41a3      	sbcs	r3, r4
 8017e5c:	d204      	bcs.n	8017e68 <pow+0x1a0>
 8017e5e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8017e62:	e79c      	b.n	8017d9e <pow+0xd6>
 8017e64:	2000      	movs	r0, #0
 8017e66:	e7e4      	b.n	8017e32 <pow+0x16a>
 8017e68:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017e6c:	e797      	b.n	8017d9e <pow+0xd6>
 8017e6e:	2d01      	cmp	r5, #1
 8017e70:	eb74 0303 	sbcs.w	r3, r4, r3
 8017e74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017e78:	bf34      	ite	cc
 8017e7a:	2301      	movcc	r3, #1
 8017e7c:	2300      	movcs	r3, #0
 8017e7e:	4296      	cmp	r6, r2
 8017e80:	bf8c      	ite	hi
 8017e82:	2600      	movhi	r6, #0
 8017e84:	2601      	movls	r6, #1
 8017e86:	42b3      	cmp	r3, r6
 8017e88:	f000 809b 	beq.w	8017fc2 <pow+0x2fa>
 8017e8c:	b007      	add	sp, #28
 8017e8e:	ecbd 8b0a 	vpop	{d8-d12}
 8017e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e96:	f7ff be97 	b.w	8017bc8 <__math_oflow>
 8017e9a:	f1bc 0f00 	cmp.w	ip, #0
 8017e9e:	d10b      	bne.n	8017eb8 <pow+0x1f0>
 8017ea0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8018088 <pow+0x3c0>
 8017ea4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017ea8:	ec53 2b17 	vmov	r2, r3, d7
 8017eac:	ee17 5a10 	vmov	r5, s14
 8017eb0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017eb4:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017eb8:	4b7b      	ldr	r3, [pc, #492]	; (80180a8 <pow+0x3e0>)
 8017eba:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017ebe:	4423      	add	r3, r4
 8017ec0:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017ec4:	1519      	asrs	r1, r3, #20
 8017ec6:	0d1b      	lsrs	r3, r3, #20
 8017ec8:	051b      	lsls	r3, r3, #20
 8017eca:	1ae7      	subs	r7, r4, r3
 8017ecc:	4b77      	ldr	r3, [pc, #476]	; (80180ac <pow+0x3e4>)
 8017ece:	ee03 1a10 	vmov	s6, r1
 8017ed2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017ed6:	1e2e      	subs	r6, r5, #0
 8017ed8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8017edc:	ec47 6b15 	vmov	d5, r6, r7
 8017ee0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017ee4:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017ee8:	ed93 7b00 	vldr	d7, [r3]
 8017eec:	ed93 5b02 	vldr	d5, [r3, #8]
 8017ef0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017ef4:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017ef8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8017efc:	ee36 4b02 	vadd.f64	d4, d6, d2
 8017f00:	ee32 2b44 	vsub.f64	d2, d2, d4
 8017f04:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017f08:	ed93 5b04 	vldr	d5, [r3, #16]
 8017f0c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8017f10:	ee37 7b02 	vadd.f64	d7, d7, d2
 8017f14:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017f18:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017f1c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8017f20:	eeb0 9b40 	vmov.f64	d9, d0
 8017f24:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017f28:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8017f2c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8017f30:	ed93 5b06 	vldr	d5, [r3, #24]
 8017f34:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017f38:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017f3c:	ed93 4b08 	vldr	d4, [r3, #32]
 8017f40:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8017f44:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017f48:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017f4c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8017f50:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8017f54:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017f58:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017f5c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017f60:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017f64:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017f68:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017f6c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017f70:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017f74:	ee16 3a90 	vmov	r3, s13
 8017f78:	eeb0 5b46 	vmov.f64	d5, d6
 8017f7c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017f80:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017f84:	18b2      	adds	r2, r6, r2
 8017f86:	2a3e      	cmp	r2, #62	; 0x3e
 8017f88:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017f8c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8017f90:	ee38 8b07 	vadd.f64	d8, d8, d7
 8017f94:	eea1 5b08 	vfma.f64	d5, d1, d8
 8017f98:	d91b      	bls.n	8017fd2 <pow+0x30a>
 8017f9a:	2a00      	cmp	r2, #0
 8017f9c:	da0b      	bge.n	8017fb6 <pow+0x2ee>
 8017f9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017fa2:	ee36 0b00 	vadd.f64	d0, d6, d0
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	f43f aef9 	beq.w	8017d9e <pow+0xd6>
 8017fac:	eeb1 0b40 	vneg.f64	d0, d0
 8017fb0:	e6f5      	b.n	8017d9e <pow+0xd6>
 8017fb2:	2000      	movs	r0, #0
 8017fb4:	e780      	b.n	8017eb8 <pow+0x1f0>
 8017fb6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017fba:	d909      	bls.n	8017fd0 <pow+0x308>
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	f6bf af65 	bge.w	8017e8c <pow+0x1c4>
 8017fc2:	b007      	add	sp, #28
 8017fc4:	ecbd 8b0a 	vpop	{d8-d12}
 8017fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	f7ff bdf4 	b.w	8017bb8 <__math_uflow>
 8017fd0:	2600      	movs	r6, #0
 8017fd2:	4937      	ldr	r1, [pc, #220]	; (80180b0 <pow+0x3e8>)
 8017fd4:	ed91 4b02 	vldr	d4, [r1, #8]
 8017fd8:	ed91 3b00 	vldr	d3, [r1]
 8017fdc:	eeb0 7b44 	vmov.f64	d7, d4
 8017fe0:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017fe4:	ee17 5a10 	vmov	r5, s14
 8017fe8:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017fec:	ed91 4b04 	vldr	d4, [r1, #16]
 8017ff0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017ff4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017ff8:	ed91 4b06 	vldr	d4, [r1, #24]
 8017ffc:	18dc      	adds	r4, r3, r3
 8017ffe:	f104 030f 	add.w	r3, r4, #15
 8018002:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8018006:	eea7 6b04 	vfma.f64	d6, d7, d4
 801800a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801800e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018012:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018016:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801801a:	ed91 4b08 	vldr	d4, [r1, #32]
 801801e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8018022:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018026:	eea5 4b03 	vfma.f64	d4, d5, d3
 801802a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801802e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018032:	ee26 6b06 	vmul.f64	d6, d6, d6
 8018036:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 801803a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801803e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8018042:	eea5 4b03 	vfma.f64	d4, d5, d3
 8018046:	1940      	adds	r0, r0, r5
 8018048:	2700      	movs	r7, #0
 801804a:	eb17 020c 	adds.w	r2, r7, ip
 801804e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8018052:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018056:	2e00      	cmp	r6, #0
 8018058:	d176      	bne.n	8018148 <pow+0x480>
 801805a:	42bd      	cmp	r5, r7
 801805c:	db2a      	blt.n	80180b4 <pow+0x3ec>
 801805e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8018062:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8018066:	4610      	mov	r0, r2
 8018068:	ec41 0b10 	vmov	d0, r0, r1
 801806c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018070:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8018090 <pow+0x3c8>
 8018074:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018078:	b007      	add	sp, #28
 801807a:	ecbd 8b0a 	vpop	{d8-d12}
 801807e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018082:	f7ff bdd9 	b.w	8017c38 <__math_check_oflow>
 8018086:	bf00      	nop
 8018088:	00000000 	.word	0x00000000
 801808c:	43300000 	.word	0x43300000
 8018090:	00000000 	.word	0x00000000
 8018094:	7f000000 	.word	0x7f000000
 8018098:	3ff00000 	.word	0x3ff00000
 801809c:	fff00000 	.word	0xfff00000
 80180a0:	ffe00000 	.word	0xffe00000
 80180a4:	7fe00000 	.word	0x7fe00000
 80180a8:	c0196aab 	.word	0xc0196aab
 80180ac:	08018a50 	.word	0x08018a50
 80180b0:	080181e0 	.word	0x080181e0
 80180b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80180b8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80180bc:	4610      	mov	r0, r2
 80180be:	ec41 0b15 	vmov	d5, r0, r1
 80180c2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80180c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80180ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 80180ce:	eeb0 4bc7 	vabs.f64	d4, d7
 80180d2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80180d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180da:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8018158 <pow+0x490>
 80180de:	d52a      	bpl.n	8018136 <pow+0x46e>
 80180e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80180e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80180e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ec:	ee35 5b06 	vadd.f64	d5, d5, d6
 80180f0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80180f4:	bf58      	it	pl
 80180f6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80180fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 80180fe:	ee34 6b43 	vsub.f64	d6, d4, d3
 8018102:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018106:	ee36 6b05 	vadd.f64	d6, d6, d5
 801810a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801810e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8018112:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811a:	d104      	bne.n	8018126 <pow+0x45e>
 801811c:	4632      	mov	r2, r6
 801811e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018122:	ec43 2b17 	vmov	d7, r2, r3
 8018126:	ed8d 0b02 	vstr	d0, [sp, #8]
 801812a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801812e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8018132:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018136:	ee27 0b00 	vmul.f64	d0, d7, d0
 801813a:	b007      	add	sp, #28
 801813c:	ecbd 8b0a 	vpop	{d8-d12}
 8018140:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018144:	f7ff bd6f 	b.w	8017c26 <__math_check_uflow>
 8018148:	ec43 2b10 	vmov	d0, r2, r3
 801814c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018150:	e625      	b.n	8017d9e <pow+0xd6>
 8018152:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8018160 <pow+0x498>
 8018156:	e622      	b.n	8017d9e <pow+0xd6>
 8018158:	00000000 	.word	0x00000000
 801815c:	00100000 	.word	0x00100000
	...

08018168 <_init>:
 8018168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801816a:	bf00      	nop
 801816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801816e:	bc08      	pop	{r3}
 8018170:	469e      	mov	lr, r3
 8018172:	4770      	bx	lr

08018174 <_fini>:
 8018174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018176:	bf00      	nop
 8018178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817a:	bc08      	pop	{r3}
 801817c:	469e      	mov	lr, r3
 801817e:	4770      	bx	lr
