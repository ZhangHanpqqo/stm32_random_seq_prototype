
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ce0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  08017f78  08017f78  00027f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019890  08019890  00029890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019898  08019898  00029898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801989c  0801989c  0002989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  080198a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002104  20000098  08019938  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000219c  08019938  0003219c  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY
 14 .debug_info   00049cbc  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009428  00000000  00000000  00079dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000039d0  00000000  00000000  000831f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d0f  00000000  00000000  00086bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00046608  00000000  00000000  000898cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050366  00000000  00000000  000cfed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195f14  00000000  00000000  0012023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ff08  00000000  00000000  002b6154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017f60 	.word	0x08017f60

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	08017f60 	.word	0x08017f60

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tTapeDelayExt_initToPool>:
    * you know you will write some comments one day, right
    */


void tTapeDelayExt_initToPool (tTapeDelayExt* const dlext, uint32_t* delays, uint32_t maxDelay, uint32_t numPoint, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
//	_tMempool* m = *mp;
    _tTapeDelayExt* d = *dlext = (_tTapeDelayExt*) malloc(sizeof(_tTapeDelayExt));
 80005e2:	2010      	movs	r0, #16
 80005e4:	f017 f86c 	bl	80176c0 <malloc>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]

    tTapeDelay_initToPool(&(d->tdelay), delays[0], maxDelay, mp);
 80005f6:	6938      	ldr	r0, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000604:	6a3a      	ldr	r2, [r7, #32]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	eeb0 0a67 	vmov.f32	s0, s15
 800060c:	f000 f981 	bl	8000912 <tTapeDelay_initToPool>
    d->numPoint = numPoint;
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	605a      	str	r2, [r3, #4]
    d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f017 f850 	bl	80176c0 <malloc>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	609a      	str	r2, [r3, #8]
    d->lastOuts = (Lfloat *) malloc(sizeof(Lfloat) * numPoint);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f017 f847 	bl	80176c0 <malloc>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < numPoint; i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e015      	b.n	800066c <tTapeDelayExt_initToPool+0x98>
    	d->delays[i] = delays[i];
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	441a      	add	r2, r3
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	601a      	str	r2, [r3, #0]
    	d->lastOuts[i] = 0.0f;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < numPoint; i++){
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8e5      	bhi.n	8000640 <tTapeDelayExt_initToPool+0x6c>
    }

}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <tTapeDelayExt_tick>:
	_tTapeDelayExt* d = *dlext;
//	_tTapeDelay* dt = &(d->tdelay);
	for (unsigned i = 0; i < (d->tdelay)->maxDelay; i++) (d->tdelay)->buff[i] = 0;
}

void tTapeDelayExt_tick(tTapeDelayExt* const dlext, Lfloat input){
 800067e:	b590      	push	{r4, r7, lr}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	ed87 0a00 	vstr	s0, [r7]
	_tTapeDelayExt* d = *dlext;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = (d->tdelay);
	tTapeDelay_tick(&(d->tdelay), input);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	ed97 0a00 	vldr	s0, [r7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f97f 	bl	800099a <tTapeDelay_tick>
	d->lastOuts[0] = (d->tdelay)->lastOut;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	68d2      	ldr	r2, [r2, #12]
 80006a6:	601a      	str	r2, [r3, #0]

	for(int i = 1; i < d->numPoint; i++){
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e01b      	b.n	80006e6 <tTapeDelayExt_tick+0x68>
		d->lastOuts[i] = tTapeDelay_tapOut(&(d->tdelay), d->delays[i]);
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	18d4      	adds	r4, r2, r3
 80006ce:	eeb0 0a67 	vmov.f32	s0, s15
 80006d2:	4608      	mov	r0, r1
 80006d4:	f000 fa75 	bl	8000bc2 <tTapeDelay_tapOut>
 80006d8:	eef0 7a40 	vmov.f32	s15, s0
 80006dc:	edc4 7a00 	vstr	s15, [r4]
	for(int i = 1; i < d->numPoint; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8de      	bhi.n	80006ae <tTapeDelayExt_tick+0x30>
	}

}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}

080006fa <tTapeDelayExt_setDelay>:

void tTapeDelayExt_setDelay(tTapeDelayExt* const dlext, uint32_t* delays){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = &(d->tdelay);
	tTapeDelay_setDelay(&(d->tdelay), delays[0]);
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000718:	eeb0 0a67 	vmov.f32	s0, s15
 800071c:	4610      	mov	r0, r2
 800071e:	f000 fa30 	bl	8000b82 <tTapeDelay_setDelay>
	for (int i = 0; i < d->numPoint; i++){
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e00d      	b.n	8000744 <tTapeDelayExt_setDelay+0x4a>
	    	d->delays[i] = delays[i];
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	441a      	add	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	6899      	ldr	r1, [r3, #8]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < d->numPoint; i++){
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8ec      	bhi.n	8000728 <tTapeDelayExt_setDelay+0x2e>
	    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <tTapeDelayExt_setNumPoint>:

void tTapeDelayExt_setNumPoint(tTapeDelayExt* const dlext, int numPoint){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	free(d->delays);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f016 ffaf 	bl	80176d0 <free>
	d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f016 ffa2 	bl	80176c0 <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	609a      	str	r2, [r3, #8]


	uint32_t* t = (float *)malloc(sizeof(float) * d->numPoint);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f016 ff98 	bl	80176c0 <malloc>
 8000790:	4603      	mov	r3, r0
 8000792:	60bb      	str	r3, [r7, #8]
	memcpy(t, d->lastOuts, sizeof(float) * d->numPoint);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	68d9      	ldr	r1, [r3, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f017 f88d 	bl	80178c0 <memcpy>
	free(d->lastOuts);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f016 ff90 	bl	80176d0 <free>
	d->lastOuts = (float *)malloc(sizeof(float) * numPoint);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f016 ff83 	bl	80176c0 <malloc>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	60da      	str	r2, [r3, #12]
	memcpy((d->lastOuts), t, (numPoint < d->numPoint ? numPoint : d->numPoint) * sizeof(uint32_t));
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	bf28      	it	cs
 80007d0:	4613      	movcs	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	461a      	mov	r2, r3
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	f017 f872 	bl	80178c0 <memcpy>
	free(t);
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f016 ff77 	bl	80176d0 <free>

	d->numPoint = numPoint;
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	605a      	str	r2, [r3, #4]
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_LEAF_clip>:

#endif

// cannot find things in delay_math.h
Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80007fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80007fe:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 8000802:	ed97 7a02 	vldr	s14, [r7, #8]
 8000806:	edd7 7a03 	vldr	s15, [r7, #12]
 800080a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d501      	bpl.n	8000818 <_LEAF_clip+0x28>
    {
        return min;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	e00b      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else if (val > max)
 8000818:	ed97 7a02 	vldr	s14, [r7, #8]
 800081c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	dd01      	ble.n	800082e <_LEAF_clip+0x3e>
    {
        return max;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	e000      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 800082e:	68bb      	ldr	r3, [r7, #8]
    }
}
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb0 0a67 	vmov.f32	s0, s15
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_LEAF_interpolate_hermite_x>:

Lfloat _LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
 8000842:	b480      	push	{r7}
 8000844:	b08d      	sub	sp, #52	; 0x34
 8000846:	af00      	add	r7, sp, #0
 8000848:	ed87 0a05 	vstr	s0, [r7, #20]
 800084c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000850:	ed87 1a03 	vstr	s2, [r7, #12]
 8000854:	edc7 1a02 	vstr	s3, [r7, #8]
 8000858:	ed87 2a01 	vstr	s4, [r7, #4]
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8000860:	ed97 7a03 	vldr	s14, [r7, #12]
 8000864:	edd7 7a05 	vldr	s15, [r7, #20]
 8000868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Lfloat y0my1 = yy0 - yy1;
 8000878:	ed97 7a05 	vldr	s14, [r7, #20]
 800087c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000884:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8000888:	ed97 7a04 	vldr	s14, [r7, #16]
 800088c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000894:	edd7 6a02 	vldr	s13, [r7, #8]
 8000898:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800089c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80008ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	edc7 7a08 	vstr	s15, [r7, #32]
    Lfloat c2 = y0my1 + c1 - c3;
 80008b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80008bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80008c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]

    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80008d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80008d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80008e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000900:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	3734      	adds	r7, #52	; 0x34
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	ed87 0a02 	vstr	s0, [r7, #8]
 800091e:	6079      	str	r1, [r7, #4]
 8000920:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	617b      	str	r3, [r7, #20]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 8000928:	6979      	ldr	r1, [r7, #20]
 800092a:	202c      	movs	r0, #44	; 0x2c
 800092c:	f000 fb19 	bl	8000f62 <mpool_alloc>
 8000930:	4602      	mov	r2, r0
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	619a      	str	r2, [r3, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	6979      	ldr	r1, [r7, #20]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb07 	bl	8000f62 <mpool_alloc>
 8000954:	4602      	mov	r2, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	609a      	str	r2, [r3, #8]

    d->gain = 1.0f;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000960:	605a      	str	r2, [r3, #4]

    d->lastIn = 0.0f;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	60da      	str	r2, [r3, #12]

    d->idx = 0.0f;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
    d->inc = 1.0f;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000980:	621a      	str	r2, [r3, #32]
    d->inPoint = 0;
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]

    tTapeDelay_setDelay(dl, delay);
 8000988:	ed97 0a02 	vldr	s0, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f8f8 	bl	8000b82 <tTapeDelay_setDelay>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]

    d->buff[d->inPoint] = input * d->gain;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c6:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <tTapeDelay_tick+0x4c>
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]

    int idx =  (int) d->idx;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f0:	ee17 3a90 	vmov	r3, s15
 80009f4:	60fb      	str	r3, [r7, #12]
    Lfloat alpha = d->idx - idx;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0a:	edc7 7a02 	vstr	s15, [r7, #8]

    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6899      	ldr	r1, [r3, #8]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	6992      	ldr	r2, [r2, #24]
 8000a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8000a24:	fb00 f202 	mul.w	r2, r0, r2
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a3c:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a52:	fb00 f303 	mul.w	r3, r0, r3
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a5c:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	6899      	ldr	r1, [r3, #8]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3302      	adds	r3, #2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a72:	fb00 f303 	mul.w	r3, r0, r3
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a7c:	ed93 6a00 	vldr	s12, [r3]
 8000a80:	ed97 2a02 	vldr	s4, [r7, #8]
 8000a84:	eef0 1a46 	vmov.f32	s3, s12
 8000a88:	eeb0 1a66 	vmov.f32	s2, s13
 8000a8c:	eef0 0a47 	vmov.f32	s1, s14
 8000a90:	eeb0 0a67 	vmov.f32	s0, s15
 8000a94:	f7ff fed5 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000a98:	eef0 7a40 	vmov.f32	s15, s0
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	edc3 7a03 	vstr	s15, [r3, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab8:	edc7 7a05 	vstr	s15, [r7, #20]
    while (diff < 0.f) diff += d->maxDelay;
 8000abc:	e00b      	b.n	8000ad6 <tTapeDelay_tick+0x13c>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad2:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d4ec      	bmi.n	8000abe <tTapeDelay_tick+0x124>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000aea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	ed93 7a07 	vldr	s14, [r3, #28]
 8000af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	edc3 7a08 	vstr	s15, [r3, #32]

    d->idx += d->inc;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8000b20:	e00d      	b.n	8000b3e <tTapeDelay_tick+0x1a4>
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	dae3      	bge.n	8000b22 <tTapeDelay_tick+0x188>

    if (d->lastOut)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	d002      	beq.n	8000b70 <tTapeDelay_tick+0x1d6>
        return d->lastOut;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	e001      	b.n	8000b74 <tTapeDelay_tick+0x1da>
    return 0.0f;
 8000b70:	f04f 0300 	mov.w	r3, #0
}
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60fb      	str	r3, [r7, #12]
    d->delay = _LEAF_clip(1.f, delay,  d->maxDelay);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba0:	eeb0 1a67 	vmov.f32	s2, s15
 8000ba4:	edd7 0a00 	vldr	s1, [r7]
 8000ba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bac:	f7ff fe20 	bl	80007f0 <_LEAF_clip>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <tTapeDelay_tapOut>:

Lfloat tTapeDelay_tapOut (tTapeDelay* const dl, Lfloat tapDelay)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b088      	sub	sp, #32
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	61bb      	str	r3, [r7, #24]

    Lfloat tap = (Lfloat) d->inPoint - tapDelay - 1.f;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000be0:	edd7 7a00 	vldr	s15, [r7]
 8000be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf0:	edc7 7a07 	vstr	s15, [r7, #28]

    // Check for wraparound.
    while ( tap < 0.f )   tap += (Lfloat)d->maxDelay;
 8000bf4:	e00b      	b.n	8000c0e <tTapeDelay_tapOut+0x4c>
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0a:	edc7 7a07 	vstr	s15, [r7, #28]
 8000c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d4ec      	bmi.n	8000bf6 <tTapeDelay_tapOut+0x34>

    int idx =  (int) tap;
 8000c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c24:	ee17 3a90 	vmov	r3, s15
 8000c28:	617b      	str	r3, [r7, #20]

    Lfloat alpha = tap - idx;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3c:	edc7 7a04 	vstr	s15, [r7, #16]

    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	6899      	ldr	r1, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	6992      	ldr	r2, [r2, #24]
 8000c52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c56:	fb00 f202 	mul.w	r2, r0, r2
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	6899      	ldr	r1, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c84:	fb00 f303 	mul.w	r3, r0, r3
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c8e:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	6899      	ldr	r1, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000ca4:	fb00 f303 	mul.w	r3, r0, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000cae:	ed93 6a00 	vldr	s12, [r3]
 8000cb2:	ed97 2a04 	vldr	s4, [r7, #16]
 8000cb6:	eef0 1a46 	vmov.f32	s3, s12
 8000cba:	eeb0 1a66 	vmov.f32	s2, s13
 8000cbe:	eef0 0a47 	vmov.f32	s1, s14
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f7ff fdbc 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000cca:	ed87 0a03 	vstr	s0, [r7, #12]
                                              alpha);

    return samp;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	ee07 3a90 	vmov	s15, r3

}
 8000cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cec:	6079      	str	r1, [r7, #4]
 8000cee:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8000cf6:	69f9      	ldr	r1, [r7, #28]
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f000 f932 	bl	8000f62 <mpool_alloc>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d26:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000de8 <tRamp_initToPool+0x108>
 8000d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d504      	bpl.n	8000d84 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	61da      	str	r2, [r3, #28]
 8000d82:	e002      	b.n	8000d8a <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	3a83126f 	.word	0x3a83126f

08000dec <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	db07      	blt.n	8000e7a <tRamp_tick+0x4a>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	dc12      	bgt.n	8000ea0 <tRamp_tick+0x70>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	d80f      	bhi.n	8000eb0 <tRamp_tick+0x80>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d507      	bpl.n	8000eb0 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	ee07 3a90 	vmov	s15, r3
}
 8000eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000ec6:	b590      	push	{r4, r7, lr}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af02      	add	r7, sp, #8
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685c      	ldr	r4, [r3, #4]
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f000 f902 	bl	80010e0 <mpool_align>
 8000edc:	4603      	mov	r3, r0
 8000ede:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d203      	bcs.n	8000f00 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6898      	ldr	r0, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	f000 f8ea 	bl	80010fc <create_node>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	615a      	str	r2, [r3, #20]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}

08000f36 <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	331c      	adds	r3, #28
 8000f46:	461a      	mov	r2, r3
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f7ff ffbb 	bl	8000ec6 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f103 021c 	add.w	r2, r3, #28
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b08d      	sub	sp, #52	; 0x34
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f72:	3201      	adds	r2, #1
 8000f74:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d116      	bne.n	8000fac <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d206      	bcs.n	8000f9c <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2101      	movs	r1, #1
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f9f9 	bl	800138c <LEAF_internalErrorCallback>
 8000f9a:	e005      	b.n	8000fa8 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f9f2 	bl	800138c <LEAF_internalErrorCallback>
        }
        return NULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e095      	b.n	80010d8 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f897 	bl	80010e0 <mpool_align>
 8000fb2:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000fba:	e01c      	b.n	8000ff6 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d116      	bne.n	8000ff6 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d206      	bcs.n	8000fe6 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f9d4 	bl	800138c <LEAF_internalErrorCallback>
 8000fe4:	e005      	b.n	8000ff2 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9cd 	bl	800138c <LEAF_internalErrorCallback>
            }
            return NULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e070      	b.n	80010d8 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8dd      	bhi.n	8000fbc <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	d924      	bls.n	8001066 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	441a      	add	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4413      	add	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	4622      	mov	r2, r4
 800105e:	f000 f84d 	bl	80010fc <create_node>
 8001062:	6238      	str	r0, [r7, #32]
 8001064:	e008      	b.n	8001078 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	441a      	add	r2, r3
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	429a      	cmp	r2, r3
 8001080:	d102      	bne.n	8001088 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6a3a      	ldr	r2, [r7, #32]
 8001086:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8001088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800108a:	f000 f855 	bl	8001138 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	440b      	add	r3, r1
 800109e:	441a      	add	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dd12      	ble.n	80010d4 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	e007      	b.n	80010ca <mpool_alloc+0x168>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f2      	bhi.n	80010ba <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	681b      	ldr	r3, [r3, #0]
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	372c      	adds	r7, #44	; 0x2c
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3307      	adds	r3, #7
 80010ec:	f023 0307 	bic.w	r3, r3, #7
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	441a      	add	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	601a      	str	r2, [r3, #0]
    node->next = next;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
    node->size = size;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	60da      	str	r2, [r3, #12]
    return node;
 800112a:	697b      	ldr	r3, [r7, #20]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6892      	ldr	r2, [r2, #8]
 8001150:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3318      	adds	r3, #24
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f804 	bl	80011a0 <tMempool_initToPool>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	2018      	movs	r0, #24
 80011b8:	f7ff fed3 	bl	8000f62 <mpool_alloc>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff fe76 	bl	8000ec6 <mpool_create>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	2018      	movs	r0, #24
 80011f8:	f7ff feb3 	bl	8000f62 <mpool_alloc>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	edd3 7a01 	vldr	s15, [r3, #4]
 8001228:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001248 <tCycle_initToPool+0x64>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800123c:	615a      	str	r2, [r3, #20]
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	4f800000 	.word	0x4f800000

0800124c <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 7a04 	vldr	s14, [r3, #16]
 800126a:	edd7 7a00 	vldr	s15, [r7]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 2a90 	vmov	r2, s15
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	460b      	mov	r3, r1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800129e:	69f9      	ldr	r1, [r7, #28]
 80012a0:	2018      	movs	r0, #24
 80012a2:	f7ff fe5e 	bl	8000f62 <mpool_alloc>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	7afa      	ldrb	r2, [r7, #11]
 80012c4:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	615a      	str	r2, [r3, #20]
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6178      	str	r0, [r7, #20]
 80012e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80012e4:	60f9      	str	r1, [r7, #12]
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff fe1e 	bl	8000f36 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8001300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001304:	ed97 7a04 	vldr	s14, [r7, #16]
 8001308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800136c <LEAF_init+0x94>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LEAF_init+0x98>)
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	e009      	b.n	8001352 <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	330e      	adds	r3, #14
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3301      	adds	r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b02      	cmp	r3, #2
 8001356:	ddf2      	ble.n	800133e <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2200      	movs	r2, #0
 800135c:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2200      	movs	r2, #0
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40c90fdb 	.word	0x40c90fdb
 8001370:	08001375 	.word	0x08001375

08001374 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	330e      	adds	r3, #14
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	4611      	mov	r1, r2
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MIDI_Application+0x54>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d111      	bne.n	80013ec <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MIDI_Application+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10d      	bne.n	80013ec <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	4911      	ldr	r1, [pc, #68]	; (8001418 <MIDI_Application+0x5c>)
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <MIDI_Application+0x60>)
 80013d6:	f003 fae2 	bl	800499e <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MIDI_Application+0x58>)
 80013dc:	2203      	movs	r2, #3
 80013de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MIDI_Application+0x64>)
 80013e8:	f008 f938 	bl	800965c <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MIDI_Application+0x54>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10b      	bne.n	800140c <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MIDI_Application+0x58>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <MIDI_Application+0x60>)
 80013fc:	f003 fa69 	bl	80048d2 <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MIDI_Application+0x64>)
 8001408:	f008 f928 	bl	800965c <HAL_GPIO_WritePin>
	}
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20001d38 	.word	0x20001d38
 8001414:	20000000 	.word	0x20000000
 8001418:	30000000 	.word	0x30000000
 800141c:	30000460 	.word	0x30000460
 8001420:	58020400 	.word	0x58020400

08001424 <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 800142c:	4bab      	ldr	r3, [pc, #684]	; (80016dc <ProcessReceivedMidiDatas+0x2b8>)
 800142e:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 814a 	beq.w	80016d2 <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 800143e:	e142      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4ba6      	ldr	r3, [pc, #664]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4ba3      	ldr	r3, [pc, #652]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001454:	705a      	strb	r2, [r3, #1]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b9f      	ldr	r3, [pc, #636]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001462:	709a      	strb	r2, [r3, #2]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	4b9c      	ldr	r3, [pc, #624]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001470:	70da      	strb	r2, [r3, #3]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8001478:	4b99      	ldr	r3, [pc, #612]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2bf0      	cmp	r3, #240	; 0xf0
 8001480:	f000 8120 	beq.w	80016c4 <ProcessReceivedMidiDatas+0x2a0>
 8001484:	2bf0      	cmp	r3, #240	; 0xf0
 8001486:	f300 811e 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 800148a:	2be0      	cmp	r3, #224	; 0xe0
 800148c:	f000 811b 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001490:	2be0      	cmp	r3, #224	; 0xe0
 8001492:	f300 8118 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001496:	2bd0      	cmp	r3, #208	; 0xd0
 8001498:	f000 8115 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 800149c:	2bd0      	cmp	r3, #208	; 0xd0
 800149e:	f300 8112 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014a2:	2bc0      	cmp	r3, #192	; 0xc0
 80014a4:	f000 810f 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014a8:	2bc0      	cmp	r3, #192	; 0xc0
 80014aa:	f300 810c 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014ae:	2bb0      	cmp	r3, #176	; 0xb0
 80014b0:	d02f      	beq.n	8001512 <ProcessReceivedMidiDatas+0xee>
 80014b2:	2bb0      	cmp	r3, #176	; 0xb0
 80014b4:	f300 8107 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014b8:	2ba0      	cmp	r3, #160	; 0xa0
 80014ba:	f000 8104 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014be:	2ba0      	cmp	r3, #160	; 0xa0
 80014c0:	f300 8101 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d002      	beq.n	80014ce <ProcessReceivedMidiDatas+0xaa>
 80014c8:	2b90      	cmp	r3, #144	; 0x90
 80014ca:	d011      	beq.n	80014f0 <ProcessReceivedMidiDatas+0xcc>
 80014cc:	e0fb      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 80014ce:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <ProcessReceivedMidiDatas+0x2c0>)
 80014d6:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80014d8:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <ProcessReceivedMidiDatas+0x2c4>)
 80014e0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	4880      	ldr	r0, [pc, #512]	; (80016ec <ProcessReceivedMidiDatas+0x2c8>)
 80014ea:	f008 f8b7 	bl	800965c <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 80014ee:	e0ea      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 80014f0:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <ProcessReceivedMidiDatas+0x2c0>)
 80014f8:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <ProcessReceivedMidiDatas+0x2c4>)
 8001502:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4878      	ldr	r0, [pc, #480]	; (80016ec <ProcessReceivedMidiDatas+0x2c8>)
 800150c:	f008 f8a6 	bl	800965c <HAL_GPIO_WritePin>

					break;
 8001510:	e0d9      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 8001512:	4b73      	ldr	r3, [pc, #460]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 800151a:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 800151c:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 800151e:	78db      	ldrb	r3, [r3, #3]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <ProcessReceivedMidiDatas+0x2d0>)
 8001524:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <ProcessReceivedMidiDatas+0x2d0>)
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <ProcessReceivedMidiDatas+0x2d4>)
 8001532:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	2b5e      	cmp	r3, #94	; 0x5e
 800153c:	f200 80c3 	bhi.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <ProcessReceivedMidiDatas+0x124>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	080016c7 	.word	0x080016c7
 800154c:	080016c7 	.word	0x080016c7
 8001550:	080016c7 	.word	0x080016c7
 8001554:	080016c7 	.word	0x080016c7
 8001558:	080016c7 	.word	0x080016c7
 800155c:	080016c7 	.word	0x080016c7
 8001560:	080016c7 	.word	0x080016c7
 8001564:	080016c7 	.word	0x080016c7
 8001568:	080016c7 	.word	0x080016c7
 800156c:	080016c7 	.word	0x080016c7
 8001570:	080016c7 	.word	0x080016c7
 8001574:	080016c7 	.word	0x080016c7
 8001578:	080016c7 	.word	0x080016c7
 800157c:	080016c7 	.word	0x080016c7
 8001580:	080016c7 	.word	0x080016c7
 8001584:	080016c7 	.word	0x080016c7
 8001588:	080016c7 	.word	0x080016c7
 800158c:	080016c7 	.word	0x080016c7
 8001590:	080016c7 	.word	0x080016c7
 8001594:	080016c7 	.word	0x080016c7
 8001598:	080016c7 	.word	0x080016c7
 800159c:	080016c7 	.word	0x080016c7
 80015a0:	080016c7 	.word	0x080016c7
 80015a4:	080016c7 	.word	0x080016c7
 80015a8:	080016c7 	.word	0x080016c7
 80015ac:	080016c7 	.word	0x080016c7
 80015b0:	080016c7 	.word	0x080016c7
 80015b4:	080016c7 	.word	0x080016c7
 80015b8:	080016c7 	.word	0x080016c7
 80015bc:	080016c7 	.word	0x080016c7
 80015c0:	080016c7 	.word	0x080016c7
 80015c4:	080016c7 	.word	0x080016c7
 80015c8:	080016c7 	.word	0x080016c7
 80015cc:	080016c7 	.word	0x080016c7
 80015d0:	080016c7 	.word	0x080016c7
 80015d4:	080016c7 	.word	0x080016c7
 80015d8:	080016c7 	.word	0x080016c7
 80015dc:	080016c7 	.word	0x080016c7
 80015e0:	080016c7 	.word	0x080016c7
 80015e4:	080016c7 	.word	0x080016c7
 80015e8:	080016c7 	.word	0x080016c7
 80015ec:	080016c7 	.word	0x080016c7
 80015f0:	080016c7 	.word	0x080016c7
 80015f4:	080016c7 	.word	0x080016c7
 80015f8:	080016c7 	.word	0x080016c7
 80015fc:	080016c7 	.word	0x080016c7
 8001600:	080016c7 	.word	0x080016c7
 8001604:	080016c7 	.word	0x080016c7
 8001608:	080016c7 	.word	0x080016c7
 800160c:	080016c7 	.word	0x080016c7
 8001610:	080016c7 	.word	0x080016c7
 8001614:	080016c7 	.word	0x080016c7
 8001618:	080016c7 	.word	0x080016c7
 800161c:	080016c7 	.word	0x080016c7
 8001620:	080016c7 	.word	0x080016c7
 8001624:	080016c7 	.word	0x080016c7
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016c7 	.word	0x080016c7
 800165c:	080016c7 	.word	0x080016c7
 8001660:	080016c7 	.word	0x080016c7
 8001664:	080016c7 	.word	0x080016c7
 8001668:	080016c7 	.word	0x080016c7
 800166c:	080016c7 	.word	0x080016c7
 8001670:	080016c7 	.word	0x080016c7
 8001674:	080016c7 	.word	0x080016c7
 8001678:	080016c7 	.word	0x080016c7
 800167c:	080016c7 	.word	0x080016c7
 8001680:	080016c7 	.word	0x080016c7
 8001684:	080016c7 	.word	0x080016c7
 8001688:	080016c7 	.word	0x080016c7
 800168c:	080016c7 	.word	0x080016c7
 8001690:	080016c7 	.word	0x080016c7
 8001694:	080016c7 	.word	0x080016c7
 8001698:	080016c7 	.word	0x080016c7
 800169c:	080016c7 	.word	0x080016c7
 80016a0:	080016c7 	.word	0x080016c7
 80016a4:	080016c7 	.word	0x080016c7
 80016a8:	080016c7 	.word	0x080016c7
 80016ac:	080016c7 	.word	0x080016c7
 80016b0:	080016c7 	.word	0x080016c7
 80016b4:	080016c7 	.word	0x080016c7
 80016b8:	080016c7 	.word	0x080016c7
 80016bc:	080016c7 	.word	0x080016c7
 80016c0:	080016c7 	.word	0x080016c7
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 80016c4:	bf00      	nop
		while(numberOfPackets--)
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	81fa      	strh	r2, [r7, #14]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f aeb7 	bne.w	8001440 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	30000000 	.word	0x30000000
 80016e0:	20000138 	.word	0x20000138
 80016e4:	200000b4 	.word	0x200000b4
 80016e8:	200000b5 	.word	0x200000b5
 80016ec:	58020000 	.word	0x58020000
 80016f0:	200000b6 	.word	0x200000b6
 80016f4:	200000b7 	.word	0x200000b7
 80016f8:	200000b8 	.word	0x200000b8

080016fc <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7ff fe8c 	bl	8001424 <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	4904      	ldr	r1, [pc, #16]	; (8001720 <USBH_MIDI_ReceiveCallback+0x24>)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <USBH_MIDI_ReceiveCallback+0x28>)
 8001712:	f003 f944 	bl	800499e <USBH_MIDI_Receive>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	30000000 	.word	0x30000000
 8001724:	30000460 	.word	0x30000460

08001728 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174c:	4b7b      	ldr	r3, [pc, #492]	; (800193c <MX_ADC1_Init+0x214>)
 800174e:	4a7c      	ldr	r2, [pc, #496]	; (8001940 <MX_ADC1_Init+0x218>)
 8001750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <MX_ADC1_Init+0x214>)
 8001754:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <MX_ADC1_Init+0x214>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <MX_ADC1_Init+0x214>)
 8001762:	2201      	movs	r2, #1
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001766:	4b75      	ldr	r3, [pc, #468]	; (800193c <MX_ADC1_Init+0x214>)
 8001768:	2208      	movs	r2, #8
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800176c:	4b73      	ldr	r3, [pc, #460]	; (800193c <MX_ADC1_Init+0x214>)
 800176e:	2200      	movs	r2, #0
 8001770:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <MX_ADC1_Init+0x214>)
 8001774:	2201      	movs	r2, #1
 8001776:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 8001778:	4b70      	ldr	r3, [pc, #448]	; (800193c <MX_ADC1_Init+0x214>)
 800177a:	220a      	movs	r2, #10
 800177c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <MX_ADC1_Init+0x214>)
 8001780:	2200      	movs	r2, #0
 8001782:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001784:	4b6d      	ldr	r3, [pc, #436]	; (800193c <MX_ADC1_Init+0x214>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <MX_ADC1_Init+0x214>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <MX_ADC1_Init+0x214>)
 8001792:	2203      	movs	r2, #3
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <MX_ADC1_Init+0x214>)
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <MX_ADC1_Init+0x214>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <MX_ADC1_Init+0x214>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017aa:	4864      	ldr	r0, [pc, #400]	; (800193c <MX_ADC1_Init+0x214>)
 80017ac:	f003 ffb0 	bl	8005710 <HAL_ADC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80017b6:	f001 fdbf 	bl	8003338 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	485d      	ldr	r0, [pc, #372]	; (800193c <MX_ADC1_Init+0x214>)
 80017c6:	f005 fa33 	bl	8006c30 <HAL_ADCEx_MultiModeConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017d0:	f001 fdb2 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017d4:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <MX_ADC1_Init+0x21c>)
 80017d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d8:	2306      	movs	r3, #6
 80017da:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e6:	2304      	movs	r3, #4
 80017e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	4851      	ldr	r0, [pc, #324]	; (800193c <MX_ADC1_Init+0x214>)
 80017f8:	f004 fc48 	bl	800608c <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001802:	f001 fd99 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <MX_ADC1_Init+0x220>)
 8001808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800180a:	230c      	movs	r3, #12
 800180c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4849      	ldr	r0, [pc, #292]	; (800193c <MX_ADC1_Init+0x214>)
 8001818:	f004 fc38 	bl	800608c <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001822:	f001 fd89 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <MX_ADC1_Init+0x224>)
 8001828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800182a:	2312      	movs	r3, #18
 800182c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4841      	ldr	r0, [pc, #260]	; (800193c <MX_ADC1_Init+0x214>)
 8001838:	f004 fc28 	bl	800608c <HAL_ADC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001842:	f001 fd79 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <MX_ADC1_Init+0x228>)
 8001848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800184a:	2318      	movs	r3, #24
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4839      	ldr	r0, [pc, #228]	; (800193c <MX_ADC1_Init+0x214>)
 8001858:	f004 fc18 	bl	800608c <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8001862:	f001 fd69 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <MX_ADC1_Init+0x22c>)
 8001868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4830      	ldr	r0, [pc, #192]	; (800193c <MX_ADC1_Init+0x214>)
 800187a:	f004 fc07 	bl	800608c <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001884:	f001 fd58 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <MX_ADC1_Init+0x230>)
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800188c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_ADC1_Init+0x214>)
 800189c:	f004 fbf6 	bl	800608c <HAL_ADC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80018a6:	f001 fd47 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_ADC1_Init+0x234>)
 80018ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018ae:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	481f      	ldr	r0, [pc, #124]	; (800193c <MX_ADC1_Init+0x214>)
 80018be:	f004 fbe5 	bl	800608c <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 80018c8:	f001 fd36 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <MX_ADC1_Init+0x238>)
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80018d0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80018d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <MX_ADC1_Init+0x214>)
 80018e0:	f004 fbd4 	bl	800608c <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80018ea:	f001 fd25 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_ADC1_Init+0x23c>)
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80018f2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80018f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fc:	463b      	mov	r3, r7
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <MX_ADC1_Init+0x214>)
 8001902:	f004 fbc3 	bl	800608c <HAL_ADC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800190c:	f001 fd14 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_ADC1_Init+0x240>)
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_ADC1_Init+0x214>)
 8001924:	f004 fbb2 	bl	800608c <HAL_ADC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 800192e:	f001 fd03 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000013c 	.word	0x2000013c
 8001940:	40022000 	.word	0x40022000
 8001944:	1d500080 	.word	0x1d500080
 8001948:	4fb80000 	.word	0x4fb80000
 800194c:	3ef08000 	.word	0x3ef08000
 8001950:	0c900008 	.word	0x0c900008
 8001954:	4b840000 	.word	0x4b840000
 8001958:	3ac04000 	.word	0x3ac04000
 800195c:	10c00010 	.word	0x10c00010
 8001960:	21800100 	.word	0x21800100
 8001964:	25b00200 	.word	0x25b00200
 8001968:	14f00020 	.word	0x14f00020

0800196c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001986:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <MX_ADC3_Init+0x128>)
 8001988:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <MX_ADC3_Init+0x124>)
 800198c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001990:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <MX_ADC3_Init+0x124>)
 800199a:	2201      	movs	r2, #1
 800199c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019a0:	2204      	movs	r2, #4
 80019a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019b2:	2205      	movs	r2, #5
 80019b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019e2:	482b      	ldr	r0, [pc, #172]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019e4:	f003 fe94 	bl	8005710 <HAL_ADC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80019ee:	f001 fca3 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_ADC3_Init+0x12c>)
 80019f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f6:	2306      	movs	r3, #6
 80019f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a04:	2304      	movs	r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	481e      	ldr	r0, [pc, #120]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a16:	f004 fb39 	bl	800608c <HAL_ADC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001a20:	f001 fc8a 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a24:	230c      	movs	r3, #12
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a2e:	f004 fb2d 	bl	800608c <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001a38:	f001 fc7e 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a46:	f004 fb21 	bl	800608c <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001a50:	f001 fc72 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a54:	2318      	movs	r3, #24
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a5e:	f004 fb15 	bl	800608c <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001a68:	f001 fc66 	bl	8003338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a78:	f004 fb08 	bl	800608c <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8001a82:	f001 fc59 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001a0 	.word	0x200001a0
 8001a94:	58026000 	.word	0x58026000
 8001a98:	08600004 	.word	0x08600004

08001a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6d      	ldr	r2, [pc, #436]	; (8001c70 <HAL_ADC_MspInit+0x1d4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 80a3 	bne.w	8001c06 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac6:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ac8:	f043 0320 	orr.w	r3, r3, #32
 8001acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b38:	2332      	movs	r3, #50	; 0x32
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	484b      	ldr	r0, [pc, #300]	; (8001c78 <HAL_ADC_MspInit+0x1dc>)
 8001b4c:	f007 fbbe 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b50:	23ff      	movs	r3, #255	; 0xff
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4846      	ldr	r0, [pc, #280]	; (8001c7c <HAL_ADC_MspInit+0x1e0>)
 8001b64:	f007 fbb2 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4841      	ldr	r0, [pc, #260]	; (8001c80 <HAL_ADC_MspInit+0x1e4>)
 8001b7c:	f007 fba6 	bl	80092cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_ADC_MspInit+0x1ec>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b88:	2209      	movs	r2, #9
 8001b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd8:	482a      	ldr	r0, [pc, #168]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bda:	f005 fa93 	bl	8007104 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001be4:	f001 fba8 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f005 f9d2 	bl	8006fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bfe:	2012      	movs	r0, #18
 8001c00:	f005 f9e9 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001c04:	e02f      	b.n	8001c66 <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_ADC_MspInit+0x1f0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12a      	bne.n	8001c66 <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c4c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <HAL_ADC_MspInit+0x1f4>)
 8001c62:	f007 fb33 	bl	80092cc <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020000 	.word	0x58020000
 8001c80:	58020400 	.word	0x58020400
 8001c84:	20000204 	.word	0x20000204
 8001c88:	40020010 	.word	0x40020010
 8001c8c:	58026000 	.word	0x58026000
 8001c90:	58021400 	.word	0x58021400

08001c94 <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001ca0:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <audioInit+0x18c>)
 8001ca2:	4a60      	ldr	r2, [pc, #384]	; (8001e24 <audioInit+0x190>)
 8001ca4:	4960      	ldr	r1, [pc, #384]	; (8001e28 <audioInit+0x194>)
 8001ca6:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001e2c <audioInit+0x198>
 8001caa:	4861      	ldr	r0, [pc, #388]	; (8001e30 <audioInit+0x19c>)
 8001cac:	f7ff fb14 	bl	80012d8 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <audioInit+0x19c>)
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	495f      	ldr	r1, [pc, #380]	; (8001e34 <audioInit+0x1a0>)
 8001cb8:	485f      	ldr	r0, [pc, #380]	; (8001e38 <audioInit+0x1a4>)
 8001cba:	f7ff fa5f 	bl	800117c <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <audioInit+0x19c>)
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <audioInit+0x1a8>)
 8001cc6:	485e      	ldr	r0, [pc, #376]	; (8001e40 <audioInit+0x1ac>)
 8001cc8:	f7ff fa58 	bl	800117c <tMempool_init>


	for (int i = 0; i < 6; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	e00d      	b.n	8001cee <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <audioInit+0x1b0>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <audioInit+0x1a4>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fffc 	bl	8000ce0 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	ddee      	ble.n	8001cd2 <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	e009      	b.n	8001d0e <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 8001cfa:	4a4f      	ldr	r2, [pc, #316]	; (8001e38 <audioInit+0x1a4>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001d02:	4851      	ldr	r0, [pc, #324]	; (8001e48 <audioInit+0x1b4>)
 8001d04:	f7fe ffec 	bl	8000ce0 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	ddf2      	ble.n	8001cfa <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <audioInit+0x1a4>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	484c      	ldr	r0, [pc, #304]	; (8001e4c <audioInit+0x1b8>)
 8001d1a:	f7ff fab6 	bl	800128a <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e013      	b.n	8001d4c <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <audioInit+0x1bc>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4942      	ldr	r1, [pc, #264]	; (8001e38 <audioInit+0x1a4>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fa58 	bl	80011e4 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <audioInit+0x1bc>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001e54 <audioInit+0x1c0>
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa83 	bl	800124c <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	dde8      	ble.n	8001d24 <audioInit+0x90>

//	for(int i = 0; i < 2; i++)
//	{
//		tTapeDelay_initToPool(&delT[i], SAMPLE_RATE, MAX_DELAY, &largePool);
//	}
	uint32_t* temp = (uint32_t *) malloc(sizeof(uint32_t) );
 8001d52:	2004      	movs	r0, #4
 8001d54:	f015 fcb4 	bl	80176c0 <malloc>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]
	*temp = SAMPLE_RATE;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d62:	601a      	str	r2, [r3, #0]
//	tDelayExt_initToPool(&delE, temp, MAX_DELAY, 1, &largePool);
	tTapeDelayExt_initToPool(&delTE, temp, MAX_DELAY, 1, &largePool);
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <audioInit+0x1ac>)
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <audioInit+0x1c4>)
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	483b      	ldr	r0, [pc, #236]	; (8001e5c <audioInit+0x1c8>)
 8001d70:	f7fe fc30 	bl	80005d4 <tTapeDelayExt_initToPool>
	free(temp);
 8001d74:	6938      	ldr	r0, [r7, #16]
 8001d76:	f015 fcab 	bl	80176d0 <free>


	HAL_Delay(10);
 8001d7a:	200a      	movs	r0, #10
 8001d7c:	f003 fa7c 	bl	8005278 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e007      	b.n	8001d96 <audioInit+0x102>
	{
		audioOutBuffer[i] = 0;
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <audioInit+0x1cc>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	ddf4      	ble.n	8001d86 <audioInit+0xf2>
	}



	HAL_Delay(1);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f003 fa6b 	bl	8005278 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	492e      	ldr	r1, [pc, #184]	; (8001e60 <audioInit+0x1cc>)
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f00d fe74 	bl	800fa94 <HAL_SAI_Transmit_DMA>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <audioInit+0x1d0>)
 8001db2:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	492c      	ldr	r1, [pc, #176]	; (8001e68 <audioInit+0x1d4>)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f00d ff21 	bl	800fc00 <HAL_SAI_Receive_DMA>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <audioInit+0x1d8>)
 8001dc4:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fc06 	bl	80025d8 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e01e      	b.n	8001e10 <audioInit+0x17c>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <audioInit+0x1dc>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <audioInit+0x1e0>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <audioInit+0x1e4>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <audioInit+0x1e8>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	dddd      	ble.n	8001dd2 <audioInit+0x13e>
	}

}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	08003275 	.word	0x08003275
 8001e24:	0007a120 	.word	0x0007a120
 8001e28:	24000000 	.word	0x24000000
 8001e2c:	473b8000 	.word	0x473b8000
 8001e30:	200016c0 	.word	0x200016c0
 8001e34:	20000338 	.word	0x20000338
 8001e38:	20001710 	.word	0x20001710
 8001e3c:	60000000 	.word	0x60000000
 8001e40:	20001714 	.word	0x20001714
 8001e44:	200002c0 	.word	0x200002c0
 8001e48:	200002f8 	.word	0x200002f8
 8001e4c:	200002d8 	.word	0x200002d8
 8001e50:	200002dc 	.word	0x200002dc
 8001e54:	43dc0000 	.word	0x43dc0000
 8001e58:	0003a980 	.word	0x0003a980
 8001e5c:	200002f4 	.word	0x200002f4
 8001e60:	30000040 	.word	0x30000040
 8001e64:	2000027c 	.word	0x2000027c
 8001e68:	30000240 	.word	0x30000240
 8001e6c:	2000027d 	.word	0x2000027d
 8001e70:	20001718 	.word	0x20001718
 8001e74:	20001738 	.word	0x20001738
 8001e78:	20001758 	.word	0x20001758
 8001e7c:	20001778 	.word	0x20001778

08001e80 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]

	frameCounter++;
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <audioFrame+0x128>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <audioFrame+0x128>)
 8001e98:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <audioFrame+0x128>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d904      	bls.n	8001eac <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <audioFrame+0x128>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 8001ea8:	f000 f97e 	bl	80021a8 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e017      	b.n	8001ee2 <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <audioFrame+0x12c>)
 8001eb8:	441a      	add	r2, r3
 8001eba:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <audioFrame+0x130>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001fb4 <audioFrame+0x134>
 8001ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7fe ff88 	bl	8000dec <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	dde4      	ble.n	8001eb2 <audioFrame+0x32>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <audioFrame+0x138>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d057      	beq.n	8001fa0 <audioFrame+0x120>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e051      	b.n	8001f9a <audioFrame+0x11a>
		{

			if ((i & 1) == 0)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11e      	bne.n	8001f3e <audioFrame+0xbe>
			{
				current_sample = (int32_t)(audioTickR(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <audioFrame+0x13c>)
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001fc0 <audioFrame+0x140>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f000 f92b 	bl	800217c <audioTickR>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001fc4 <audioFrame+0x144>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f36:	ee17 3a90 	vmov	r3, s15
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	e01d      	b.n	8001f7a <audioFrame+0xfa>
			}
			else
			{
				current_sample = (int32_t)(audioTickL(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <audioFrame+0x13c>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001fc0 <audioFrame+0x140>
 8001f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	f000 f836 	bl	8001fd0 <audioTickL>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001fc4 <audioFrame+0x144>
 8001f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	60bb      	str	r3, [r7, #8]
			}

			if (LED_States[2] == 1){		//mute
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <audioFrame+0x148>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <audioFrame+0x106>
				current_sample *= 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <audioFrame+0x14c>)
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f9e:	ddaa      	ble.n	8001ef6 <audioFrame+0x76>

		}
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002bc 	.word	0x200002bc
 8001fac:	200002c0 	.word	0x200002c0
 8001fb0:	30000440 	.word	0x30000440
 8001fb4:	377ffff6 	.word	0x377ffff6
 8001fb8:	2000027e 	.word	0x2000027e
 8001fbc:	30000240 	.word	0x30000240
 8001fc0:	2ffffff6 	.word	0x2ffffff6
 8001fc4:	4b000000 	.word	0x4b000000
 8001fc8:	200002b8 	.word	0x200002b8
 8001fcc:	30000040 	.word	0x30000040

08001fd0 <audioTickL>:
int num_delX = 4, num_delY = 4;
//int* delaysX, delaysY;
float a0 = 0.0f, a1 = 0.0f, a2 = 0.0f, b1 = 0.0f, b2 = 0.0f;

float audioTickL(float audioIn)
{
 8001fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fdc:	466b      	mov	r3, sp
 8001fde:	461e      	mov	r6, r3
//	tDelayExt_tick(&delE, audioIn);
//	sampleL = 0.0f;
//	for(int i = 0; i < num_delX; i++) sampleL += delE->lastOuts[i] / num_delX;

	/* multi tape delay */
	num_delX = (int) (ADC_values[0] * INV_TWO_TO_16 * 8) + 1;
 8001fe0:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <audioTickL+0x190>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fec:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002164 <audioTickL+0x194>
 8001ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	3301      	adds	r3, #1
 8002006:	4a58      	ldr	r2, [pc, #352]	; (8002168 <audioTickL+0x198>)
 8002008:	6013      	str	r3, [r2, #0]
	if (num_delX != delTE->numPoint)
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <audioTickL+0x19c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <audioTickL+0x198>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4293      	cmp	r3, r2
 8002016:	d005      	beq.n	8002024 <audioTickL+0x54>
	{
		tTapeDelayExt_setNumPoint(&delTE, num_delX);
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <audioTickL+0x198>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	4853      	ldr	r0, [pc, #332]	; (800216c <audioTickL+0x19c>)
 8002020:	f7fe fb9a 	bl	8000758 <tTapeDelayExt_setNumPoint>
	}

	del_lenX = (int)(pow(8, (9 * tRamp_tick(&adc[2]) - 1)) + 1);
 8002024:	4852      	ldr	r0, [pc, #328]	; (8002170 <audioTickL+0x1a0>)
 8002026:	f7fe ff03 	bl	8000e30 <tRamp_tick>
 800202a:	eef0 7a40 	vmov.f32	s15, s0
 800202e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800203a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800203e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002042:	eeb0 1b47 	vmov.f64	d1, d7
 8002046:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 800204a:	f015 fd39 	bl	8017ac0 <pow>
 800204e:	eeb0 7b40 	vmov.f64	d7, d0
 8002052:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002056:	ee37 7b06 	vadd.f64	d7, d7, d6
 800205a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800205e:	ee17 2a90 	vmov	r2, s15
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <audioTickL+0x1a4>)
 8002064:	601a      	str	r2, [r3, #0]
	uint32_t delaysX[num_delX];
 8002066:	4b40      	ldr	r3, [pc, #256]	; (8002168 <audioTickL+0x198>)
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	1e4b      	subs	r3, r1, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	460a      	mov	r2, r1
 8002070:	2300      	movs	r3, #0
 8002072:	4690      	mov	r8, r2
 8002074:	4699      	mov	r9, r3
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002082:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002086:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800208a:	460a      	mov	r2, r1
 800208c:	2300      	movs	r3, #0
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	016b      	lsls	r3, r5, #5
 800209c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020a0:	0162      	lsls	r2, r4, #5
 80020a2:	460b      	mov	r3, r1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3307      	adds	r3, #7
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	ebad 0d03 	sub.w	sp, sp, r3
 80020b0:	466b      	mov	r3, sp
 80020b2:	3303      	adds	r3, #3
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num_delX; i++) delaysX[i] = (uint32_t)(i+1) * del_lenX;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e00d      	b.n	80020dc <audioTickL+0x10c>
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <audioTickL+0x1a4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fb03 f102 	mul.w	r1, r3, r2
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <audioTickL+0x198>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbec      	blt.n	80020c0 <audioTickL+0xf0>
	tTapeDelayExt_setDelay(&delTE, &delaysX[0]);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4820      	ldr	r0, [pc, #128]	; (800216c <audioTickL+0x19c>)
 80020ec:	f7fe fb05 	bl	80006fa <tTapeDelayExt_setDelay>

	tTapeDelayExt_tick(&delTE, audioIn);
 80020f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80020f4:	481d      	ldr	r0, [pc, #116]	; (800216c <audioTickL+0x19c>)
 80020f6:	f7fe fac2 	bl	800067e <tTapeDelayExt_tick>
	sampleL = 0.0f;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <audioTickL+0x1a8>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < num_delX; i++) sampleL += delTE->lastOuts[i] / num_delX;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e01a      	b.n	800213e <audioTickL+0x16e>
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <audioTickL+0x19c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	edd3 6a00 	vldr	s13, [r3]
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <audioTickL+0x198>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <audioTickL+0x1a8>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <audioTickL+0x1a8>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <audioTickL+0x198>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbdf      	blt.n	8002108 <audioTickL+0x138>
	/*>-<*/

	return sampleL;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <audioTickL+0x1a8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	46b5      	mov	sp, r6
 800214e:	ee07 3a90 	vmov	s15, r3
}
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800215e:	bf00      	nop
 8002160:	30000440 	.word	0x30000440
 8002164:	377ffff6 	.word	0x377ffff6
 8002168:	20000008 	.word	0x20000008
 800216c:	200002f4 	.word	0x200002f4
 8002170:	200002c8 	.word	0x200002c8
 8002174:	20000004 	.word	0x20000004
 8002178:	20001798 	.word	0x20001798

0800217c <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <audioTickR+0x28>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	return sampleR;
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <audioTickR+0x28>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	ee07 3a90 	vmov	s15, r3
}
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	2000179c 	.word	0x2000179c

080021a8 <buttonCheck>:
}
/*>-<*/


void buttonCheck(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	489b      	ldr	r0, [pc, #620]	; (8002420 <buttonCheck+0x278>)
 80021b2:	f007 fa3b 	bl	800962c <HAL_GPIO_ReadPin>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b97      	ldr	r3, [pc, #604]	; (8002424 <buttonCheck+0x27c>)
 80021c6:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	4895      	ldr	r0, [pc, #596]	; (8002420 <buttonCheck+0x278>)
 80021cc:	f007 fa2e 	bl	800962c <HAL_GPIO_ReadPin>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4b91      	ldr	r3, [pc, #580]	; (8002424 <buttonCheck+0x27c>)
 80021e0:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 80021e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e6:	4890      	ldr	r0, [pc, #576]	; (8002428 <buttonCheck+0x280>)
 80021e8:	f007 fa20 	bl	800962c <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b8a      	ldr	r3, [pc, #552]	; (8002424 <buttonCheck+0x27c>)
 80021fc:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	e09e      	b.n	8002342 <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8002204:	4a87      	ldr	r2, [pc, #540]	; (8002424 <buttonCheck+0x27c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	4987      	ldr	r1, [pc, #540]	; (800242c <buttonCheck+0x284>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	440b      	add	r3, r1
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d00e      	beq.n	8002236 <buttonCheck+0x8e>
 8002218:	4a85      	ldr	r2, [pc, #532]	; (8002430 <buttonCheck+0x288>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d808      	bhi.n	8002236 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8002224:	4a82      	ldr	r2, [pc, #520]	; (8002430 <buttonCheck+0x288>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4980      	ldr	r1, [pc, #512]	; (8002430 <buttonCheck+0x288>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <buttonCheck+0x27c>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	497b      	ldr	r1, [pc, #492]	; (800242c <buttonCheck+0x284>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	440b      	add	r3, r1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d01e      	beq.n	8002288 <buttonCheck+0xe0>
 800224a:	4a79      	ldr	r2, [pc, #484]	; (8002430 <buttonCheck+0x288>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d918      	bls.n	8002288 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8002256:	4a73      	ldr	r2, [pc, #460]	; (8002424 <buttonCheck+0x27c>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d104      	bne.n	800226c <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8002262:	4a74      	ldr	r2, [pc, #464]	; (8002434 <buttonCheck+0x28c>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2101      	movs	r1, #1
 8002268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 800226c:	4a6d      	ldr	r2, [pc, #436]	; (8002424 <buttonCheck+0x27c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	7819      	ldrb	r1, [r3, #0]
 8002274:	4a6d      	ldr	r2, [pc, #436]	; (800242c <buttonCheck+0x284>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	460a      	mov	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <buttonCheck+0x288>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2100      	movs	r1, #0
 8002284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8002288:	4a6b      	ldr	r2, [pc, #428]	; (8002438 <buttonCheck+0x290>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d12d      	bne.n	80022f0 <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 8002294:	4a63      	ldr	r2, [pc, #396]	; (8002424 <buttonCheck+0x27c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00f      	beq.n	80022c0 <buttonCheck+0x118>
 80022a0:	4a66      	ldr	r2, [pc, #408]	; (800243c <buttonCheck+0x294>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ac:	d208      	bcs.n	80022c0 <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 80022ae:	4a63      	ldr	r2, [pc, #396]	; (800243c <buttonCheck+0x294>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4960      	ldr	r1, [pc, #384]	; (800243c <buttonCheck+0x294>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 80022c0:	4a58      	ldr	r2, [pc, #352]	; (8002424 <buttonCheck+0x27c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d037      	beq.n	800233c <buttonCheck+0x194>
 80022cc:	4a5b      	ldr	r2, [pc, #364]	; (800243c <buttonCheck+0x294>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d8:	d330      	bcc.n	800233c <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 80022da:	4a57      	ldr	r2, [pc, #348]	; (8002438 <buttonCheck+0x290>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2101      	movs	r1, #1
 80022e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 80022e4:	4a55      	ldr	r2, [pc, #340]	; (800243c <buttonCheck+0x294>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2100      	movs	r1, #0
 80022ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80022ee:	e025      	b.n	800233c <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <buttonCheck+0x27c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <buttonCheck+0x174>
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <buttonCheck+0x294>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002304:	2b31      	cmp	r3, #49	; 0x31
 8002306:	d809      	bhi.n	800231c <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <buttonCheck+0x294>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	494a      	ldr	r1, [pc, #296]	; (800243c <buttonCheck+0x294>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800231a:	e00f      	b.n	800233c <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 800231c:	4a41      	ldr	r2, [pc, #260]	; (8002424 <buttonCheck+0x27c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <buttonCheck+0x290>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2100      	movs	r1, #0
 800232e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 8002332:	4a42      	ldr	r2, [pc, #264]	; (800243c <buttonCheck+0x294>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2100      	movs	r1, #0
 8002338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3301      	adds	r3, #1
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	f77f af5d 	ble.w	8002204 <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <buttonCheck+0x28c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d119      	bne.n	8002386 <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <buttonCheck+0x298>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002360:	4838      	ldr	r0, [pc, #224]	; (8002444 <buttonCheck+0x29c>)
 8002362:	f007 f97b 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <buttonCheck+0x298>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e008      	b.n	8002380 <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002374:	4833      	ldr	r0, [pc, #204]	; (8002444 <buttonCheck+0x29c>)
 8002376:	f007 f971 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <buttonCheck+0x298>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <buttonCheck+0x28c>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <buttonCheck+0x28c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d116      	bne.n	80023bc <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <buttonCheck+0x298>)
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800239c:	4829      	ldr	r0, [pc, #164]	; (8002444 <buttonCheck+0x29c>)
 800239e:	f007 f95d 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <buttonCheck+0x298>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e008      	b.n	80023bc <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b0:	4824      	ldr	r0, [pc, #144]	; (8002444 <buttonCheck+0x29c>)
 80023b2:	f007 f953 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <buttonCheck+0x298>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <buttonCheck+0x28c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d119      	bne.n	80023f8 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <buttonCheck+0x298>)
 80023c6:	789b      	ldrb	r3, [r3, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d2:	4815      	ldr	r0, [pc, #84]	; (8002428 <buttonCheck+0x280>)
 80023d4:	f007 f942 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <buttonCheck+0x298>)
 80023da:	2201      	movs	r2, #1
 80023dc:	709a      	strb	r2, [r3, #2]
 80023de:	e008      	b.n	80023f2 <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	4810      	ldr	r0, [pc, #64]	; (8002428 <buttonCheck+0x280>)
 80023e8:	f007 f938 	bl	800965c <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <buttonCheck+0x298>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <buttonCheck+0x28c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <buttonCheck+0x290>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002400:	2201      	movs	r2, #1
 8002402:	2140      	movs	r1, #64	; 0x40
 8002404:	4810      	ldr	r0, [pc, #64]	; (8002448 <buttonCheck+0x2a0>)
 8002406:	f007 f929 	bl	800965c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 800240a:	e004      	b.n	8002416 <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <buttonCheck+0x2a0>)
 8002412:	f007 f923 	bl	800965c <HAL_GPIO_WritePin>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	58021800 	.word	0x58021800
 8002424:	20000280 	.word	0x20000280
 8002428:	58020c00 	.word	0x58020c00
 800242c:	20000284 	.word	0x20000284
 8002430:	20000288 	.word	0x20000288
 8002434:	20000294 	.word	0x20000294
 8002438:	200002ac 	.word	0x200002ac
 800243c:	200002a0 	.word	0x200002a0
 8002440:	200002b8 	.word	0x200002b8
 8002444:	58020000 	.word	0x58020000
 8002448:	58020800 	.word	0x58020800

0800244c <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	;
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	;
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  ;
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8002490:	2040      	movs	r0, #64	; 0x40
 8002492:	f7ff fcf5 	bl	8001e80 <audioFrame>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff fcea 	bl	8001e80 <audioFrame>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80024be:	f000 f879 	bl	80025b4 <BSP_SD_IsDetected>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80024c8:	2302      	movs	r3, #2
 80024ca:	e012      	b.n	80024f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80024cc:	480b      	ldr	r0, [pc, #44]	; (80024fc <BSP_SD_Init+0x48>)
 80024ce:	f00d fe7c 	bl	80101ca <HAL_SD_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80024dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <BSP_SD_Init+0x48>)
 80024e2:	f00e fd37 	bl	8010f54 <HAL_SD_ConfigWideBusOperation>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80024f0:	79fb      	ldrb	r3, [r7, #7]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20001a6c 	.word	0x20001a6c

08002500 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <BSP_SD_ReadBlocks+0x38>)
 800251e:	f00d ff73 	bl	8010408 <HAL_SD_ReadBlocks>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800252c:	7dfb      	ldrb	r3, [r7, #23]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20001a6c 	.word	0x20001a6c

0800253c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <BSP_SD_WriteBlocks+0x38>)
 800255a:	f00e f8df 	bl	801071c <HAL_SD_WriteBlocks>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002568:	7dfb      	ldrb	r3, [r7, #23]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20001a6c 	.word	0x20001a6c

08002578 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <BSP_SD_GetCardState+0x1c>)
 800257e:	f00e fdfb 	bl	8011178 <HAL_SD_GetCardState>
 8002582:	4603      	mov	r3, r0
 8002584:	2b04      	cmp	r3, #4
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20001a6c 	.word	0x20001a6c

08002598 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <BSP_SD_GetCardInfo+0x18>)
 80025a4:	f00e fcaa 	bl	8010efc <HAL_SD_GetCardInfo>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20001a6c 	.word	0x20001a6c

080025b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80025ba:	2301      	movs	r3, #1
 80025bc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80025be:	f000 f911 	bl	80027e4 <BSP_PlatformIsDetected>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	b2db      	uxtb	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e6:	4858      	ldr	r0, [pc, #352]	; (8002748 <AudioCodec_init+0x170>)
 80025e8:	f007 f838 	bl	800965c <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f002 fe43 	bl	8005278 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <AudioCodec_init+0x174>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 80025f8:	4b54      	ldr	r3, [pc, #336]	; (800274c <AudioCodec_init+0x174>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <AudioCodec_init+0x178>)
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	4b54      	ldr	r3, [pc, #336]	; (8002754 <AudioCodec_init+0x17c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	4a50      	ldr	r2, [pc, #320]	; (800274c <AudioCodec_init+0x174>)
 800260c:	2120      	movs	r1, #32
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f008 fde2 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <AudioCodec_init+0x180>)
 800261a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <AudioCodec_init+0x174>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <AudioCodec_init+0x174>)
 8002624:	2241      	movs	r2, #65	; 0x41
 8002626:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <AudioCodec_init+0x178>)
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	4b49      	ldr	r3, [pc, #292]	; (8002754 <AudioCodec_init+0x17c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <AudioCodec_init+0x174>)
 8002636:	2120      	movs	r1, #32
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f008 fdcd 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <AudioCodec_init+0x180>)
 8002644:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <AudioCodec_init+0x174>)
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <AudioCodec_init+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <AudioCodec_init+0x178>)
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <AudioCodec_init+0x17c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	4a3b      	ldr	r2, [pc, #236]	; (800274c <AudioCodec_init+0x174>)
 8002660:	2120      	movs	r1, #32
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f008 fdb8 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <AudioCodec_init+0x180>)
 800266e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <AudioCodec_init+0x174>)
 8002672:	2203      	movs	r2, #3
 8002674:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 8002676:	4b35      	ldr	r3, [pc, #212]	; (800274c <AudioCodec_init+0x174>)
 8002678:	2279      	movs	r2, #121	; 0x79
 800267a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800267c:	4b34      	ldr	r3, [pc, #208]	; (8002750 <AudioCodec_init+0x178>)
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <AudioCodec_init+0x17c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <AudioCodec_init+0x174>)
 800268a:	2120      	movs	r1, #32
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f008 fda3 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <AudioCodec_init+0x180>)
 8002698:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 800269a:	4b2c      	ldr	r3, [pc, #176]	; (800274c <AudioCodec_init+0x174>)
 800269c:	2204      	movs	r2, #4
 800269e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <AudioCodec_init+0x174>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <AudioCodec_init+0x178>)
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <AudioCodec_init+0x17c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <AudioCodec_init+0x174>)
 80026b4:	2120      	movs	r1, #32
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f008 fd8e 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <AudioCodec_init+0x180>)
 80026c2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <AudioCodec_init+0x174>)
 80026c6:	2205      	movs	r2, #5
 80026c8:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <AudioCodec_init+0x174>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <AudioCodec_init+0x178>)
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <AudioCodec_init+0x17c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <AudioCodec_init+0x174>)
 80026de:	2120      	movs	r1, #32
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f008 fd79 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <AudioCodec_init+0x180>)
 80026ec:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <AudioCodec_init+0x174>)
 80026f0:	2206      	movs	r2, #6
 80026f2:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <AudioCodec_init+0x174>)
 80026f6:	2210      	movs	r2, #16
 80026f8:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <AudioCodec_init+0x178>)
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <AudioCodec_init+0x17c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <AudioCodec_init+0x174>)
 8002708:	2120      	movs	r1, #32
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f008 fd64 	bl	800b1d8 <HAL_I2C_Master_Transmit>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <AudioCodec_init+0x180>)
 8002716:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <AudioCodec_init+0x174>)
 800271a:	2207      	movs	r2, #7
 800271c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <AudioCodec_init+0x174>)
 8002720:	2202      	movs	r2, #2
 8002722:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <AudioCodec_init+0x178>)
 8002726:	881a      	ldrh	r2, [r3, #0]
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <AudioCodec_init+0x17c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <AudioCodec_init+0x174>)
 8002732:	2120      	movs	r1, #32
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f008 fd4f 	bl	800b1d8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <AudioCodec_init+0x184>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]

}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	58020800 	.word	0x58020800
 800274c:	200017a0 	.word	0x200017a0
 8002750:	2000000c 	.word	0x2000000c
 8002754:	20000010 	.word	0x20000010
 8002758:	200017a2 	.word	0x200017a2
 800275c:	2000027e 	.word	0x2000027e

08002760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <MX_DMA_Init+0x5c>)
 8002768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <MX_DMA_Init+0x5c>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_DMA_Init+0x5c>)
 8002778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	200b      	movs	r0, #11
 800278a:	f004 fc0a 	bl	8006fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800278e:	200b      	movs	r0, #11
 8002790:	f004 fc21 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	200c      	movs	r0, #12
 800279a:	f004 fc02 	bl	8006fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800279e:	200c      	movs	r0, #12
 80027a0:	f004 fc19 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	200d      	movs	r0, #13
 80027aa:	f004 fbfa 	bl	8006fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027ae:	200d      	movs	r0, #13
 80027b0:	f004 fc11 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	58024400 	.word	0x58024400

080027c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80027c4:	4904      	ldr	r1, [pc, #16]	; (80027d8 <MX_FATFS_Init+0x18>)
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_FATFS_Init+0x1c>)
 80027c8:	f014 ff6a 	bl	80176a0 <FATFS_LinkDriver>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <MX_FATFS_Init+0x20>)
 80027d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200017a4 	.word	0x200017a4
 80027dc:	08017f80 	.word	0x08017f80
 80027e0:	200017a3 	.word	0x200017a3

080027e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80027ea:	2301      	movs	r3, #1
 80027ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80027ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f2:	4806      	ldr	r0, [pc, #24]	; (800280c <BSP_PlatformIsDetected+0x28>)
 80027f4:	f006 ff1a 	bl	800962c <HAL_GPIO_ReadPin>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8002802:	79fb      	ldrb	r3, [r7, #7]
}  
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58020800 	.word	0x58020800

08002810 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
 8002824:	615a      	str	r2, [r3, #20]
 8002826:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <MX_FMC_Init+0xa0>)
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <MX_FMC_Init+0xa4>)
 800282c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002836:	2201      	movs	r2, #1
 8002838:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_FMC_Init+0xa0>)
 800283c:	2208      	movs	r2, #8
 800283e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002842:	2210      	movs	r2, #16
 8002844:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_FMC_Init+0xa0>)
 800284e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002852:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_FMC_Init+0xa0>)
 800285c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002860:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_FMC_Init+0xa0>)
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002870:	2302      	movs	r3, #2
 8002872:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002874:	2306      	movs	r3, #6
 8002876:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002878:	2304      	movs	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800287c:	2306      	movs	r3, #6
 800287e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002880:	2302      	movs	r3, #2
 8002882:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002884:	2302      	movs	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002888:	2302      	movs	r3, #2
 800288a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <MX_FMC_Init+0xa0>)
 8002892:	f00f f84b 	bl	801192c <HAL_SDRAM_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800289c:	f000 fd4c 	bl	8003338 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80028a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80028a4:	f002 fd18 	bl	80052d8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200017a8 	.word	0x200017a8
 80028b4:	52004140 	.word	0x52004140

080028b8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0b8      	sub	sp, #224	; 0xe0
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_FMC_MspInit+0x15c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8099 	bne.w	8002a0a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_FMC_MspInit+0x15c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	22c0      	movs	r2, #192	; 0xc0
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f014 ffa6 	bl	8017838 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80028ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fc:	f107 0308 	add.w	r3, r7, #8
 8002900:	4618      	mov	r0, r3
 8002902:	f00a f835 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800290c:	f000 fd14 	bl	8003338 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_FMC_MspInit+0x160>)
 8002912:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HAL_FMC_MspInit+0x160>)
 8002918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_FMC_MspInit+0x160>)
 8002922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800292e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002948:	230c      	movs	r3, #12
 800294a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800294e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002952:	4619      	mov	r1, r3
 8002954:	4831      	ldr	r0, [pc, #196]	; (8002a1c <HAL_FMC_MspInit+0x164>)
 8002956:	f006 fcb9 	bl	80092cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800295a:	230d      	movs	r3, #13
 800295c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002972:	230c      	movs	r3, #12
 8002974:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002978:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800297c:	4619      	mov	r1, r3
 800297e:	4828      	ldr	r0, [pc, #160]	; (8002a20 <HAL_FMC_MspInit+0x168>)
 8002980:	f006 fca4 	bl	80092cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002984:	f248 1337 	movw	r3, #33079	; 0x8137
 8002988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800299e:	230c      	movs	r3, #12
 80029a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029a8:	4619      	mov	r1, r3
 80029aa:	481e      	ldr	r0, [pc, #120]	; (8002a24 <HAL_FMC_MspInit+0x16c>)
 80029ac:	f006 fc8e 	bl	80092cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80029b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ca:	230c      	movs	r3, #12
 80029cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029d4:	4619      	mov	r1, r3
 80029d6:	4814      	ldr	r0, [pc, #80]	; (8002a28 <HAL_FMC_MspInit+0x170>)
 80029d8:	f006 fc78 	bl	80092cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80029dc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f6:	230c      	movs	r3, #12
 80029f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a00:	4619      	mov	r1, r3
 8002a02:	480a      	ldr	r0, [pc, #40]	; (8002a2c <HAL_FMC_MspInit+0x174>)
 8002a04:	f006 fc62 	bl	80092cc <HAL_GPIO_Init>
 8002a08:	e000      	b.n	8002a0c <HAL_FMC_MspInit+0x154>
    return;
 8002a0a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a0c:	37e0      	adds	r7, #224	; 0xe0
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200017dc 	.word	0x200017dc
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	58021400 	.word	0x58021400
 8002a20:	58020800 	.word	0x58020800
 8002a24:	58021800 	.word	0x58021800
 8002a28:	58021000 	.word	0x58021000
 8002a2c:	58020c00 	.word	0x58020c00

08002a30 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a38:	f7ff ff3e 	bl	80028b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08e      	sub	sp, #56	; 0x38
 8002a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a5a:	4b9b      	ldr	r3, [pc, #620]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	4a99      	ldr	r2, [pc, #612]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a78:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	4a92      	ldr	r2, [pc, #584]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a96:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9c:	4a8a      	ldr	r2, [pc, #552]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa6:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab4:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aba:	4a83      	ldr	r2, [pc, #524]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac4:	4b80      	ldr	r3, [pc, #512]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	4a7b      	ldr	r2, [pc, #492]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae2:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a74      	ldr	r2, [pc, #464]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b14:	4a6c      	ldr	r2, [pc, #432]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2c:	4b66      	ldr	r3, [pc, #408]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b32:	4a65      	ldr	r2, [pc, #404]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3c:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <MX_GPIO_Init+0x284>)
 8002b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f244 0140 	movw	r1, #16448	; 0x4040
 8002b50:	485e      	ldr	r0, [pc, #376]	; (8002ccc <MX_GPIO_Init+0x288>)
 8002b52:	f006 fd83 	bl	800965c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002b56:	2200      	movs	r2, #0
 8002b58:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002b5c:	485c      	ldr	r0, [pc, #368]	; (8002cd0 <MX_GPIO_Init+0x28c>)
 8002b5e:	f006 fd7d 	bl	800965c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b68:	485a      	ldr	r0, [pc, #360]	; (8002cd4 <MX_GPIO_Init+0x290>)
 8002b6a:	f006 fd77 	bl	800965c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b74:	4858      	ldr	r0, [pc, #352]	; (8002cd8 <MX_GPIO_Init+0x294>)
 8002b76:	f006 fd71 	bl	800965c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	484f      	ldr	r0, [pc, #316]	; (8002ccc <MX_GPIO_Init+0x288>)
 8002b90:	f006 fb9c 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002b94:	f244 0340 	movw	r3, #16448	; 0x4040
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4847      	ldr	r0, [pc, #284]	; (8002ccc <MX_GPIO_Init+0x288>)
 8002bae:	f006 fb8d 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4840      	ldr	r0, [pc, #256]	; (8002ccc <MX_GPIO_Init+0x288>)
 8002bca:	f006 fb7f 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	4619      	mov	r1, r3
 8002be0:	483b      	ldr	r0, [pc, #236]	; (8002cd0 <MX_GPIO_Init+0x28c>)
 8002be2:	f006 fb73 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002be6:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4834      	ldr	r0, [pc, #208]	; (8002cd0 <MX_GPIO_Init+0x28c>)
 8002c00:	f006 fb64 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	482e      	ldr	r0, [pc, #184]	; (8002cd4 <MX_GPIO_Init+0x290>)
 8002c1a:	f006 fb57 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4827      	ldr	r0, [pc, #156]	; (8002cd4 <MX_GPIO_Init+0x290>)
 8002c38:	f006 fb48 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002c3c:	f242 0378 	movw	r3, #8312	; 0x2078
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c42:	2303      	movs	r3, #3
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4820      	ldr	r0, [pc, #128]	; (8002cd4 <MX_GPIO_Init+0x290>)
 8002c52:	f006 fb3b 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 8002c56:	f243 0308 	movw	r3, #12296	; 0x3008
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	4619      	mov	r1, r3
 8002c6a:	481c      	ldr	r0, [pc, #112]	; (8002cdc <MX_GPIO_Init+0x298>)
 8002c6c:	f006 fb2e 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c70:	23c0      	movs	r3, #192	; 0xc0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	4816      	ldr	r0, [pc, #88]	; (8002cdc <MX_GPIO_Init+0x298>)
 8002c84:	f006 fb22 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_GPIO_Init+0x294>)
 8002ca2:	f006 fb13 	bl	80092cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <MX_GPIO_Init+0x294>)
 8002cbc:	f006 fb06 	bl	80092cc <HAL_GPIO_Init>

}
 8002cc0:	bf00      	nop
 8002cc2:	3738      	adds	r7, #56	; 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58020800 	.word	0x58020800
 8002cd0:	58020400 	.word	0x58020400
 8002cd4:	58020c00 	.word	0x58020c00
 8002cd8:	58020000 	.word	0x58020000
 8002cdc:	58021800 	.word	0x58021800

08002ce0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <MX_I2C2_Init+0x78>)
 8002ce8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <MX_I2C2_Init+0x7c>)
 8002cee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d1a:	480e      	ldr	r0, [pc, #56]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d1c:	f008 f9cc 	bl	800b0b8 <HAL_I2C_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002d26:	f000 fb07 	bl	8003338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4809      	ldr	r0, [pc, #36]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d2e:	f008 fd57 	bl	800b7e0 <HAL_I2CEx_ConfigAnalogFilter>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d38:	f000 fafe 	bl	8003338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_I2C2_Init+0x74>)
 8002d40:	f008 fd99 	bl	800b876 <HAL_I2CEx_ConfigDigitalFilter>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002d4a:	f000 faf5 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200017e0 	.word	0x200017e0
 8002d58:	40005800 	.word	0x40005800
 8002d5c:	505097f4 	.word	0x505097f4

08002d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0ba      	sub	sp, #232	; 0xe8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	22c0      	movs	r2, #192	; 0xc0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f014 fd59 	bl	8017838 <memset>
  if(i2cHandle->Instance==I2C2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_I2C_MspInit+0xc8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d146      	bne.n	8002e1e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d90:	f04f 0208 	mov.w	r2, #8
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4618      	mov	r0, r3
 8002da8:	f009 fde2 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002db2:	f000 fac1 	bl	8003338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ddc:	2312      	movs	r3, #18
 8002dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dee:	2304      	movs	r3, #4
 8002df0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480d      	ldr	r0, [pc, #52]	; (8002e30 <HAL_I2C_MspInit+0xd0>)
 8002dfc:	f006 fa66 	bl	80092cc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002e08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_I2C_MspInit+0xcc>)
 8002e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002e1e:	bf00      	nop
 8002e20:	37e8      	adds	r7, #232	; 0xe8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40005800 	.word	0x40005800
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	58020400 	.word	0x58020400

08002e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8002e3a:	f000 fa3b 	bl	80032b4 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	; (8002fb0 <main+0x17c>)
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11b      	bne.n	8002e82 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e4a:	f3bf 8f4f 	dsb	sy
}
 8002e4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e50:	f3bf 8f6f 	isb	sy
}
 8002e54:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002e56:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <main+0x17c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002e5e:	f3bf 8f4f 	dsb	sy
}
 8002e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e64:	f3bf 8f6f 	isb	sy
}
 8002e68:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <main+0x17c>)
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <main+0x17c>)
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e76:	f3bf 8f4f 	dsb	sy
}
 8002e7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e7c:	f3bf 8f6f 	isb	sy
}
 8002e80:	e000      	b.n	8002e84 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002e82:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002e84:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <main+0x17c>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d138      	bne.n	8002f02 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <main+0x17c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002e98:	f3bf 8f4f 	dsb	sy
}
 8002e9c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <main+0x17c>)
 8002ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0b5b      	lsrs	r3, r3, #13
 8002eaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002eae:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	08db      	lsrs	r3, r3, #3
 8002eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002ec2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002ec8:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <main+0x17c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ef      	bne.n	8002eba <main+0x86>
    } while(sets-- != 0U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	60ba      	str	r2, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ee4:	f3bf 8f4f 	dsb	sy
}
 8002ee8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <main+0x17c>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <main+0x17c>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ef6:	f3bf 8f4f 	dsb	sy
}
 8002efa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002efc:	f3bf 8f6f 	isb	sy
}
 8002f00:	e000      	b.n	8002f04 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002f02:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f04:	f002 f926 	bl	8005154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f08:	f000 f860 	bl	8002fcc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002f0c:	f000 f90e 	bl	800312c <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f10:	f7ff fd98 	bl	8002a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f14:	f7ff fc24 	bl	8002760 <MX_DMA_Init>
  MX_FMC_Init();
 8002f18:	f7ff fc7a 	bl	8002810 <MX_FMC_Init>
  MX_ADC1_Init();
 8002f1c:	f7fe fc04 	bl	8001728 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002f20:	f7fe fd24 	bl	800196c <MX_ADC3_Init>
  MX_I2C2_Init();
 8002f24:	f7ff fedc 	bl	8002ce0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002f28:	f000 fca6 	bl	8003878 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002f2c:	f000 fd3e 	bl	80039ac <MX_SPI1_Init>
  MX_FATFS_Init();
 8002f30:	f7ff fc46 	bl	80027c0 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002f34:	f000 fa54 	bl	80033e0 <MX_SAI1_Init>
  MX_TIM3_Init();
 8002f38:	f000 ffc8 	bl	8003ecc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f3c:	f001 f83e 	bl	8003fbc <MX_TIM4_Init>
  MX_TIM7_Init();
 8002f40:	f001 f8ca 	bl	80040d8 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002f44:	f000 ff32 	bl	8003dac <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002f48:	f001 f9fa 	bl	8004340 <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002f4c:	f000 f9f8 	bl	8003340 <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002f50:	f001 fad2 	bl	80044f8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f5a:	4816      	ldr	r0, [pc, #88]	; (8002fb4 <main+0x180>)
 8002f5c:	f006 fb7e 	bl	800965c <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002f60:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8002f64:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	eee1 3a10 	vmsr	fpscr, r3
}
 8002f78:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8002f7a:	220a      	movs	r2, #10
 8002f7c:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <main+0x184>)
 8002f7e:	480f      	ldr	r0, [pc, #60]	; (8002fbc <main+0x188>)
 8002f80:	f002 fd68 	bl	8005a54 <HAL_ADC_Start_DMA>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <main+0x15a>
	{
	  Error_Handler();
 8002f8a:	f000 f9d5 	bl	8003338 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 8002f8e:	200a      	movs	r0, #10
 8002f90:	f002 f972 	bl	8005278 <HAL_Delay>

  SDRAM_Initialization_sequence();
 8002f94:	f000 f90a 	bl	80031ac <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8002f98:	2064      	movs	r0, #100	; 0x64
 8002f9a:	f002 f96d 	bl	8005278 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <main+0x18c>)
 8002fa0:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <main+0x190>)
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <main+0x194>)
 8002fa4:	f7fe fe76 	bl	8001c94 <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002fa8:	f001 face 	bl	8004548 <MX_USB_HOST_Process>
 8002fac:	e7fc      	b.n	8002fa8 <main+0x174>
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	58020800 	.word	0x58020800
 8002fb8:	30000440 	.word	0x30000440
 8002fbc:	2000013c 	.word	0x2000013c
 8002fc0:	200018e0 	.word	0x200018e0
 8002fc4:	20001848 	.word	0x20001848
 8002fc8:	200017e0 	.word	0x200017e0

08002fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b09e      	sub	sp, #120	; 0x78
 8002fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd6:	224c      	movs	r2, #76	; 0x4c
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f014 fc2c 	bl	8017838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f014 fc25 	bl	8017838 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fee:	2002      	movs	r0, #2
 8002ff0:	f008 fc8e 	bl	800b910 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <SystemClock_Config+0x154>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	4a48      	ldr	r2, [pc, #288]	; (8003120 <SystemClock_Config+0x154>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <SystemClock_Config+0x154>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b45      	ldr	r3, [pc, #276]	; (8003124 <SystemClock_Config+0x158>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4a44      	ldr	r2, [pc, #272]	; (8003124 <SystemClock_Config+0x158>)
 8003014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003018:	6193      	str	r3, [r2, #24]
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <SystemClock_Config+0x158>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003026:	bf00      	nop
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <SystemClock_Config+0x158>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d1f8      	bne.n	8003028 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <SystemClock_Config+0x15c>)
 8003038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800303c:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <SystemClock_Config+0x15c>)
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <SystemClock_Config+0x15c>)
 8003048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003054:	2300      	movs	r3, #0
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <SystemClock_Config+0x158>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <SystemClock_Config+0x158>)
 800305e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003062:	6193      	str	r3, [r2, #24]
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <SystemClock_Config+0x158>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <SystemClock_Config+0x154>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <SystemClock_Config+0x154>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <SystemClock_Config+0x154>)
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003086:	bf00      	nop
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <SystemClock_Config+0x158>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003094:	d1f8      	bne.n	8003088 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003096:	2321      	movs	r3, #33	; 0x21
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800309a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030a0:	2301      	movs	r3, #1
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a4:	2302      	movs	r3, #2
 80030a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a8:	2302      	movs	r3, #2
 80030aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80030ac:	2305      	movs	r3, #5
 80030ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80030b0:	23c0      	movs	r3, #192	; 0xc0
 80030b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80030b4:	2302      	movs	r3, #2
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030bc:	2302      	movs	r3, #2
 80030be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80030c0:	2308      	movs	r3, #8
 80030c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d0:	4618      	mov	r0, r3
 80030d2:	f008 fc67 	bl	800b9a4 <HAL_RCC_OscConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80030dc:	f000 f92c 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e0:	233f      	movs	r3, #63	; 0x3f
 80030e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e4:	2303      	movs	r3, #3
 80030e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80030ec:	2308      	movs	r3, #8
 80030ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80030fe:	2340      	movs	r3, #64	; 0x40
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	2104      	movs	r1, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f009 f8a5 	bl	800c258 <HAL_RCC_ClockConfig>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8003114:	f000 f910 	bl	8003338 <Error_Handler>
  }
}
 8003118:	bf00      	nop
 800311a:	3778      	adds	r7, #120	; 0x78
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58000400 	.word	0x58000400
 8003124:	58024800 	.word	0x58024800
 8003128:	58024400 	.word	0x58024400

0800312c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0b0      	sub	sp, #192	; 0xc0
 8003130:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003132:	463b      	mov	r3, r7
 8003134:	22c0      	movs	r2, #192	; 0xc0
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f014 fb7d 	bl	8017838 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <PeriphCommonClock_Config+0x68>)
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8003148:	2319      	movs	r3, #25
 800314a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800314c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8003150:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8003152:	2307      	movs	r3, #7
 8003154:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003156:	2302      	movs	r3, #2
 8003158:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800315a:	2302      	movs	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800316a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8003170:	2301      	movs	r3, #1
 8003172:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800317a:	463b      	mov	r3, r7
 800317c:	4618      	mov	r0, r3
 800317e:	f009 fbf7 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003188:	f000 f8d6 	bl	8003338 <Error_Handler>
  }
}
 800318c:	bf00      	nop
 800318e:	37c0      	adds	r7, #192	; 0xc0
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	00090100 	.word	0x00090100

08003198 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	;
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80031ba:	2310      	movs	r3, #16
 80031bc:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031cc:	4619      	mov	r1, r3
 80031ce:	4828      	ldr	r0, [pc, #160]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 80031d0:	f00e fbe8 	bl	80119a4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f002 f84f 	bl	8005278 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80031da:	2302      	movs	r3, #2
 80031dc:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80031de:	2310      	movs	r3, #16
 80031e0:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f0:	4619      	mov	r1, r3
 80031f2:	481f      	ldr	r0, [pc, #124]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 80031f4:	f00e fbd6 	bl	80119a4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80031f8:	f240 2322 	movw	r3, #546	; 0x222
 80031fc:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80031fe:	2304      	movs	r3, #4
 8003200:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003202:	2310      	movs	r3, #16
 8003204:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003214:	4619      	mov	r1, r3
 8003216:	4816      	ldr	r0, [pc, #88]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 8003218:	f00e fbc4 	bl	80119a4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800321c:	2303      	movs	r3, #3
 800321e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003220:	2310      	movs	r3, #16
 8003222:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003224:	2308      	movs	r3, #8
 8003226:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003232:	4619      	mov	r1, r3
 8003234:	480e      	ldr	r0, [pc, #56]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 8003236:	f00e fbb5 	bl	80119a4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f002 f81c 	bl	8005278 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003240:	2303      	movs	r3, #3
 8003242:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003244:	2310      	movs	r3, #16
 8003246:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003248:	2308      	movs	r3, #8
 800324a:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003256:	4619      	mov	r1, r3
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 800325a:	f00e fba3 	bl	80119a4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800325e:	f240 5169 	movw	r1, #1385	; 0x569
 8003262:	4803      	ldr	r0, [pc, #12]	; (8003270 <SDRAM_Initialization_sequence+0xc4>)
 8003264:	f00e fbd3 	bl	8011a0e <HAL_SDRAM_ProgramRefreshRate>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200017a8 	.word	0x200017a8

08003274 <randomNumber>:


float randomNumber(void) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800327a:	463b      	mov	r3, r7
 800327c:	4619      	mov	r1, r3
 800327e:	480b      	ldr	r0, [pc, #44]	; (80032ac <randomNumber+0x38>)
 8003280:	f00c f8d6 	bl	800f430 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80032b0 <randomNumber+0x3c>
 8003292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003296:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	ee07 3a90 	vmov	s15, r3
}
 80032a0:	eeb0 0a67 	vmov.f32	s0, s15
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20001834 	.word	0x20001834
 80032b0:	2f80000d 	.word	0x2f80000d

080032b4 <MPU_Conf>:


void MPU_Conf(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 80032ba:	f003 fea7 	bl	800700c <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80032be:	2301      	movs	r3, #1
 80032c0:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80032c2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80032c6:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80032c8:	2311      	movs	r3, #17
 80032ca:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80032cc:	2303      	movs	r3, #3
 80032ce:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 80032e4:	2300      	movs	r3, #0
 80032e6:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032ec:	463b      	mov	r3, r7
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fec4 	bl	800707c <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 80032f8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80032fc:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80032fe:	230f      	movs	r3, #15
 8003300:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003302:	2303      	movs	r3, #3
 8003304:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003306:	2301      	movs	r3, #1
 8003308:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003312:	2301      	movs	r3, #1
 8003314:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003316:	2301      	movs	r3, #1
 8003318:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003322:	463b      	mov	r3, r7
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fea9 	bl	800707c <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800332a:	2004      	movs	r0, #4
 800332c:	f003 fe86 	bl	800703c <HAL_MPU_Enable>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 800333c:	e7fe      	b.n	800333c <Error_Handler+0x4>
	...

08003340 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <MX_RNG_Init+0x24>)
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <MX_RNG_Init+0x28>)
 8003348:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <MX_RNG_Init+0x24>)
 800334c:	2200      	movs	r2, #0
 800334e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003350:	4804      	ldr	r0, [pc, #16]	; (8003364 <MX_RNG_Init+0x24>)
 8003352:	f00c f80b 	bl	800f36c <HAL_RNG_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800335c:	f7ff ffec 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20001834 	.word	0x20001834
 8003368:	48021800 	.word	0x48021800

0800336c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b0b4      	sub	sp, #208	; 0xd0
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003374:	f107 0310 	add.w	r3, r7, #16
 8003378:	22c0      	movs	r2, #192	; 0xc0
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f014 fa5b 	bl	8017838 <memset>
  if(rngHandle->Instance==RNG)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <HAL_RNG_MspInit+0x6c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d121      	bne.n	80033d0 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800338c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	4618      	mov	r0, r3
 80033a4:	f009 fae4 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80033ae:	f7ff ffc3 	bl	8003338 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RNG_MspInit+0x70>)
 80033b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_RNG_MspInit+0x70>)
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RNG_MspInit+0x70>)
 80033c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80033d0:	bf00      	nop
 80033d2:	37d0      	adds	r7, #208	; 0xd0
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	48021800 	.word	0x48021800
 80033dc:	58024400 	.word	0x58024400

080033e0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <MX_SAI1_Init+0xb0>)
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <MX_SAI1_Init+0xb4>)
 80033e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <MX_SAI1_Init+0xb0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <MX_SAI1_Init+0xb0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <MX_SAI1_Init+0xb0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <MX_SAI1_Init+0xb0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <MX_SAI1_Init+0xb0>)
 8003404:	2201      	movs	r2, #1
 8003406:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003408:	4b21      	ldr	r3, [pc, #132]	; (8003490 <MX_SAI1_Init+0xb0>)
 800340a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800340e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <MX_SAI1_Init+0xb0>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <MX_SAI1_Init+0xb0>)
 8003418:	2200      	movs	r2, #0
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <MX_SAI1_Init+0xb0>)
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <MX_SAI1_Init+0xb0>)
 8003424:	2200      	movs	r2, #0
 8003426:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003428:	2302      	movs	r3, #2
 800342a:	2202      	movs	r2, #2
 800342c:	2100      	movs	r1, #0
 800342e:	4818      	ldr	r0, [pc, #96]	; (8003490 <MX_SAI1_Init+0xb0>)
 8003430:	f00c f854 	bl	800f4dc <HAL_SAI_InitProtocol>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800343a:	f7ff ff7d 	bl	8003338 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <MX_SAI1_Init+0xbc>)
 8003442:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003446:	2203      	movs	r2, #3
 8003448:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <MX_SAI1_Init+0xb8>)
 800344c:	2201      	movs	r2, #1
 800344e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003458:	2201      	movs	r2, #1
 800345a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <MX_SAI1_Init+0xb8>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003464:	2200      	movs	r2, #0
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <MX_SAI1_Init+0xb8>)
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <MX_SAI1_Init+0xb8>)
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003474:	2302      	movs	r3, #2
 8003476:	2202      	movs	r2, #2
 8003478:	2100      	movs	r1, #0
 800347a:	4807      	ldr	r0, [pc, #28]	; (8003498 <MX_SAI1_Init+0xb8>)
 800347c:	f00c f82e 	bl	800f4dc <HAL_SAI_InitProtocol>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8003486:	f7ff ff57 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20001848 	.word	0x20001848
 8003494:	40015804 	.word	0x40015804
 8003498:	200018e0 	.word	0x200018e0
 800349c:	40015824 	.word	0x40015824

080034a0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a77      	ldr	r2, [pc, #476]	; (800368c <HAL_SAI_MspInit+0x1ec>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d179      	bne.n	80035a6 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80034b2:	4b77      	ldr	r3, [pc, #476]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80034bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c0:	4a74      	ldr	r2, [pc, #464]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80034c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80034cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80034d8:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a6c      	ldr	r2, [pc, #432]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80034e0:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80034e2:	2324      	movs	r3, #36	; 0x24
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80034f2:	2306      	movs	r3, #6
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	4619      	mov	r1, r3
 80034fc:	4866      	ldr	r0, [pc, #408]	; (8003698 <HAL_SAI_MspInit+0x1f8>)
 80034fe:	f005 fee5 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003502:	2350      	movs	r3, #80	; 0x50
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350e:	2302      	movs	r3, #2
 8003510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003512:	2306      	movs	r3, #6
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4619      	mov	r1, r3
 800351c:	485e      	ldr	r0, [pc, #376]	; (8003698 <HAL_SAI_MspInit+0x1f8>)
 800351e:	f005 fed5 	bl	80092cc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8003522:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003524:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_SAI_MspInit+0x200>)
 8003526:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003528:	4b5c      	ldr	r3, [pc, #368]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800352a:	2257      	movs	r2, #87	; 0x57
 800352c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003534:	4b59      	ldr	r3, [pc, #356]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800353a:	4b58      	ldr	r3, [pc, #352]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800353c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003540:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003548:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800354a:	4b54      	ldr	r3, [pc, #336]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800354c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003550:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003552:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003558:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800355a:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800355c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003560:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003562:	4b4e      	ldr	r3, [pc, #312]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003564:	2204      	movs	r2, #4
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003570:	2200      	movs	r2, #0
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003574:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800357a:	4848      	ldr	r0, [pc, #288]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800357c:	f003 fdc2 	bl	8007104 <HAL_DMA_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8003586:	f7ff fed7 	bl	8003338 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800358e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003592:	4a42      	ldr	r2, [pc, #264]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80035a0:	4a3e      	ldr	r2, [pc, #248]	; (800369c <HAL_SAI_MspInit+0x1fc>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <HAL_SAI_MspInit+0x204>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d169      	bne.n	8003684 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80035ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035be:	4a35      	ldr	r2, [pc, #212]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80035c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_SAI_MspInit+0x1f4>)
 80035ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_SAI_MspInit+0x1f0>)
 80035de:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035e0:	2308      	movs	r3, #8
 80035e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ec:	2302      	movs	r3, #2
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80035f0:	2306      	movs	r3, #6
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4827      	ldr	r0, [pc, #156]	; (8003698 <HAL_SAI_MspInit+0x1f8>)
 80035fc:	f005 fe66 	bl	80092cc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_SAI_MspInit+0x20c>)
 8003604:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003608:	2258      	movs	r2, #88	; 0x58
 800360a:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003626:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800362a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800362e:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003636:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800363a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800363e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003642:	2204      	movs	r2, #4
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800364e:	2200      	movs	r2, #0
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003658:	4813      	ldr	r0, [pc, #76]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800365a:	f003 fd53 	bl	8007104 <HAL_DMA_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 8003664:	f7ff fe68 	bl	8003338 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800366c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003670:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 800367a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_SAI_MspInit+0x208>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40015804 	.word	0x40015804
 8003690:	20001a68 	.word	0x20001a68
 8003694:	58024400 	.word	0x58024400
 8003698:	58021000 	.word	0x58021000
 800369c:	20001978 	.word	0x20001978
 80036a0:	40020028 	.word	0x40020028
 80036a4:	40015824 	.word	0x40015824
 80036a8:	200019f0 	.word	0x200019f0
 80036ac:	40020040 	.word	0x40020040

080036b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <SD_CheckStatus+0x38>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80036c0:	f7fe ff5a 	bl	8002578 <BSP_SD_GetCardState>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <SD_CheckStatus+0x38>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <SD_CheckStatus+0x38>)
 80036d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80036da:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <SD_CheckStatus+0x38>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000014 	.word	0x20000014

080036ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <SD_initialize+0x38>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80036fc:	f7fe feda 	bl	80024b4 <BSP_SD_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ffd1 	bl	80036b0 <SD_CheckStatus>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <SD_initialize+0x38>)
 8003714:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003716:	4b03      	ldr	r3, [pc, #12]	; (8003724 <SD_initialize+0x38>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000014 	.word	0x20000014

08003728 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ffbb 	bl	80036b0 <SD_CheckStatus>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68b8      	ldr	r0, [r7, #8]
 8003762:	f7fe fecd 	bl	8002500 <BSP_SD_ReadBlocks>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800376c:	bf00      	nop
 800376e:	f7fe ff03 	bl	8002578 <BSP_SD_GetCardState>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1fa      	bne.n	800376e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800379a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f7fe feca 	bl	800253c <BSP_SD_WriteBlocks>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80037ae:	bf00      	nop
 80037b0:	f7fe fee2 	bl	8002578 <BSP_SD_GetCardState>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1fa      	bne.n	80037b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	603a      	str	r2, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
 80037d4:	460b      	mov	r3, r1
 80037d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <SD_ioctl+0xac>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <SD_ioctl+0x28>
 80037ec:	2303      	movs	r3, #3
 80037ee:	e03c      	b.n	800386a <SD_ioctl+0xa2>

  switch (cmd)
 80037f0:	79bb      	ldrb	r3, [r7, #6]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d834      	bhi.n	8003860 <SD_ioctl+0x98>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <SD_ioctl+0x34>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	08003815 	.word	0x08003815
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003847 	.word	0x08003847
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003812:	e028      	b.n	8003866 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003814:	f107 0308 	add.w	r3, r7, #8
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe febd 	bl	8002598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800382a:	e01c      	b.n	8003866 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe feb1 	bl	8002598 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	b29a      	uxth	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003844:	e00f      	b.n	8003866 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fea4 	bl	8002598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	0a5a      	lsrs	r2, r3, #9
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800385e:	e002      	b.n	8003866 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003860:	2304      	movs	r3, #4
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800386a:	4618      	mov	r0, r3
 800386c:	3730      	adds	r7, #48	; 0x30
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000014 	.word	0x20000014

08003878 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 800387e:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <MX_SDMMC1_SD_Init+0x38>)
 8003880:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 8003890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003894:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <MX_SDMMC1_SD_Init+0x34>)
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	20001a6c 	.word	0x20001a6c
 80038b0:	52007000 	.word	0x52007000

080038b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_SD_MspInit+0xe8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d15e      	bne.n	8003994 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038d6:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_SD_MspInit+0xec>)
 80038d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038dc:	4a30      	ldr	r2, [pc, #192]	; (80039a0 <HAL_SD_MspInit+0xec>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80038e6:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <HAL_SD_MspInit+0xec>)
 80038e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_SD_MspInit+0xec>)
 80038f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fa:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_SD_MspInit+0xec>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_SD_MspInit+0xec>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_SD_MspInit+0xec>)
 8003914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003918:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <HAL_SD_MspInit+0xec>)
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_SD_MspInit+0xec>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003930:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393e:	2303      	movs	r3, #3
 8003940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003942:	230c      	movs	r3, #12
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4619      	mov	r1, r3
 800394c:	4815      	ldr	r0, [pc, #84]	; (80039a4 <HAL_SD_MspInit+0xf0>)
 800394e:	f005 fcbd 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003964:	230c      	movs	r3, #12
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	480d      	ldr	r0, [pc, #52]	; (80039a4 <HAL_SD_MspInit+0xf0>)
 8003970:	f005 fcac 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003974:	2304      	movs	r3, #4
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003984:	230c      	movs	r3, #12
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <HAL_SD_MspInit+0xf4>)
 8003990:	f005 fc9c 	bl	80092cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003994:	bf00      	nop
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	52007000 	.word	0x52007000
 80039a0:	58024400 	.word	0x58024400
 80039a4:	58020800 	.word	0x58020800
 80039a8:	58020c00 	.word	0x58020c00

080039ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039b2:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <MX_SPI1_Init+0xa8>)
 80039b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80039bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039c6:	2207      	movs	r2, #7
 80039c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f2:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <MX_SPI1_Init+0xa4>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a3c:	4804      	ldr	r0, [pc, #16]	; (8003a50 <MX_SPI1_Init+0xa4>)
 8003a3e:	f00e f80f 	bl	8011a60 <HAL_SPI_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003a48:	f7ff fc76 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20001ae8 	.word	0x20001ae8
 8003a54:	40013000 	.word	0x40013000

08003a58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b0bc      	sub	sp, #240	; 0xf0
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	22c0      	movs	r2, #192	; 0xc0
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f013 fedd 	bl	8017838 <memset>
  if(spiHandle->Instance==SPI1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a38      	ldr	r2, [pc, #224]	; (8003b64 <HAL_SPI_MspInit+0x10c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d169      	bne.n	8003b5c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a98:	f107 0318 	add.w	r3, r7, #24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f008 ff67 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003aa8:	f7ff fc46 	bl	8003338 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003ad2:	f043 0308 	orr.w	r3, r3, #8
 8003ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aee:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_SPI_MspInit+0x110>)
 8003afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b1e:	2305      	movs	r3, #5
 8003b20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4810      	ldr	r0, [pc, #64]	; (8003b6c <HAL_SPI_MspInit+0x114>)
 8003b2c:	f005 fbce 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003b30:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003b34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b54:	4619      	mov	r1, r3
 8003b56:	4806      	ldr	r0, [pc, #24]	; (8003b70 <HAL_SPI_MspInit+0x118>)
 8003b58:	f005 fbb8 	bl	80092cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	37f0      	adds	r7, #240	; 0xf0
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40013000 	.word	0x40013000
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	58020c00 	.word	0x58020c00
 8003b70:	58021800 	.word	0x58021800

08003b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_MspInit+0x30>)
 8003b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b80:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <HAL_MspInit+0x30>)
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_MspInit+0x30>)
 8003b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	58024400 	.word	0x58024400

08003ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	/* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bba:	e7fe      	b.n	8003bba <HardFault_Handler+0x4>

08003bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <MemManage_Handler+0x4>

08003bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bc6:	e7fe      	b.n	8003bc6 <BusFault_Handler+0x4>

08003bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <UsageFault_Handler+0x4>

08003bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bfc:	f001 fb1c 	bl	8005238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <DMA1_Stream0_IRQHandler+0x10>)
 8003c0a:	f004 f841 	bl	8007c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000204 	.word	0x20000204

08003c18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <DMA1_Stream1_IRQHandler+0x10>)
 8003c1e:	f004 f837 	bl	8007c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001978 	.word	0x20001978

08003c2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA1_Stream2_IRQHandler+0x10>)
 8003c32:	f004 f82d 	bl	8007c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200019f0 	.word	0x200019f0

08003c40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <ADC_IRQHandler+0x10>)
 8003c46:	f001 ffc9 	bl	8005bdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000013c 	.word	0x2000013c

08003c54 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003c5a:	f005 ff83 	bl	8009b64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20001d40 	.word	0x20001d40

08003c68 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8003c6e:	f005 ff79 	bl	8009b64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20001d40 	.word	0x20001d40

08003c7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003c80:	4802      	ldr	r0, [pc, #8]	; (8003c8c <OTG_FS_IRQHandler+0x10>)
 8003c82:	f005 ff6f 	bl	8009b64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20001d40 	.word	0x20001d40

08003c90 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <_sbrk+0x50>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk+0x16>
		heap_end = &end;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <_sbrk+0x50>)
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <_sbrk+0x54>)
 8003ca4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <_sbrk+0x50>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <_sbrk+0x50>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	466a      	mov	r2, sp
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d907      	bls.n	8003cca <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003cba:	f013 fdd5 	bl	8017868 <__errno>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	220c      	movs	r2, #12
 8003cc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc8:	e006      	b.n	8003cd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <_sbrk+0x50>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <_sbrk+0x50>)
 8003cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20001b70 	.word	0x20001b70
 8003ce4:	200021a0 	.word	0x200021a0

08003ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <SystemInit+0xac>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <SystemInit+0xac>)
 8003cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <SystemInit+0xb0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <SystemInit+0xb0>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <SystemInit+0xb0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d0e:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <SystemInit+0xb0>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4921      	ldr	r1, [pc, #132]	; (8003d98 <SystemInit+0xb0>)
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <SystemInit+0xb4>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d1a:	4b1f      	ldr	r3, [pc, #124]	; (8003d98 <SystemInit+0xb0>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <SystemInit+0xb0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <SystemInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <SystemInit+0xb0>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003d32:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <SystemInit+0xb0>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <SystemInit+0xb0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <SystemInit+0xb0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003d44:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <SystemInit+0xb0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <SystemInit+0xb0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <SystemInit+0xb0>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <SystemInit+0xb0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <SystemInit+0xb0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <SystemInit+0xb0>)
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <SystemInit+0xb0>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <SystemInit+0xb8>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <SystemInit+0xbc>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7a:	d202      	bcs.n	8003d82 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <SystemInit+0xc0>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <SystemInit+0xac>)
 8003d84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d88:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003da0:	5c001000 	.word	0x5c001000
 8003da4:	ffff0000 	.word	0xffff0000
 8003da8:	51008108 	.word	0x51008108

08003dac <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b096      	sub	sp, #88	; 0x58
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	615a      	str	r2, [r3, #20]
 8003dd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	222c      	movs	r2, #44	; 0x2c
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f013 fd2d 	bl	8017838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dde:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003de0:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <MX_TIM1_Init+0x11c>)
 8003de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003de4:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e0a:	482e      	ldr	r0, [pc, #184]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003e0c:	f00d ffbe 	bl	8011d8c <HAL_TIM_PWM_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003e16:	f7ff fa8f 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4825      	ldr	r0, [pc, #148]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003e2e:	f00e fe1f 	bl	8012a70 <HAL_TIMEx_MasterConfigSynchronization>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e38:	f7ff fa7e 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e3c:	2360      	movs	r3, #96	; 0x60
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e44:	2300      	movs	r3, #0
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e54:	2300      	movs	r3, #0
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4818      	ldr	r0, [pc, #96]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003e62:	f00d ffeb 	bl	8011e3c <HAL_TIM_PWM_ConfigChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e6c:	f7ff fa64 	bl	8003338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003ea6:	f00e fe71 	bl	8012b8c <HAL_TIMEx_ConfigBreakDeadTime>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003eb0:	f7ff fa42 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003eb4:	4803      	ldr	r0, [pc, #12]	; (8003ec4 <MX_TIM1_Init+0x118>)
 8003eb6:	f000 f9b7 	bl	8004228 <HAL_TIM_MspPostInit>

}
 8003eba:	bf00      	nop
 8003ebc:	3758      	adds	r7, #88	; 0x58
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001b74 	.word	0x20001b74
 8003ec8:	40010000 	.word	0x40010000

08003ecc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	; 0x38
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eec:	463b      	mov	r3, r7
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003efe:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <MX_TIM3_Init+0xec>)
 8003f02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f24:	4823      	ldr	r0, [pc, #140]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f26:	f00d feda 	bl	8011cde <HAL_TIM_Base_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003f30:	f7ff fa02 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3e:	4619      	mov	r1, r3
 8003f40:	481c      	ldr	r0, [pc, #112]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f42:	f00e f88f 	bl	8012064 <HAL_TIM_ConfigClockSource>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003f4c:	f7ff f9f4 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f50:	4818      	ldr	r0, [pc, #96]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f52:	f00d ff1b 	bl	8011d8c <HAL_TIM_PWM_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003f5c:	f7ff f9ec 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4811      	ldr	r0, [pc, #68]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f70:	f00e fd7e 	bl	8012a70 <HAL_TIMEx_MasterConfigSynchronization>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003f7a:	f7ff f9dd 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f7e:	2360      	movs	r3, #96	; 0x60
 8003f80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f8e:	463b      	mov	r3, r7
 8003f90:	2204      	movs	r2, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4807      	ldr	r0, [pc, #28]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003f96:	f00d ff51 	bl	8011e3c <HAL_TIM_PWM_ConfigChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003fa0:	f7ff f9ca 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fa4:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <MX_TIM3_Init+0xe8>)
 8003fa6:	f000 f93f 	bl	8004228 <HAL_TIM_MspPostInit>

}
 8003faa:	bf00      	nop
 8003fac:	3738      	adds	r7, #56	; 0x38
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20001bc0 	.word	0x20001bc0
 8003fb8:	40000400 	.word	0x40000400

08003fbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08e      	sub	sp, #56	; 0x38
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fdc:	463b      	mov	r3, r7
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <MX_TIM4_Init+0x114>)
 8003ff0:	4a38      	ldr	r2, [pc, #224]	; (80040d4 <MX_TIM4_Init+0x118>)
 8003ff2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ff4:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <MX_TIM4_Init+0x114>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <MX_TIM4_Init+0x114>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004000:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004006:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <MX_TIM4_Init+0x114>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004014:	482e      	ldr	r0, [pc, #184]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004016:	f00d fe62 	bl	8011cde <HAL_TIM_Base_Init>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004020:	f7ff f98a 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800402a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800402e:	4619      	mov	r1, r3
 8004030:	4827      	ldr	r0, [pc, #156]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004032:	f00e f817 	bl	8012064 <HAL_TIM_ConfigClockSource>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800403c:	f7ff f97c 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004040:	4823      	ldr	r0, [pc, #140]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004042:	f00d fea3 	bl	8011d8c <HAL_TIM_PWM_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800404c:	f7ff f974 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	4619      	mov	r1, r3
 800405e:	481c      	ldr	r0, [pc, #112]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004060:	f00e fd06 	bl	8012a70 <HAL_TIMEx_MasterConfigSynchronization>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800406a:	f7ff f965 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800406e:	2360      	movs	r3, #96	; 0x60
 8004070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	2200      	movs	r2, #0
 8004082:	4619      	mov	r1, r3
 8004084:	4812      	ldr	r0, [pc, #72]	; (80040d0 <MX_TIM4_Init+0x114>)
 8004086:	f00d fed9 	bl	8011e3c <HAL_TIM_PWM_ConfigChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004090:	f7ff f952 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004094:	463b      	mov	r3, r7
 8004096:	2204      	movs	r2, #4
 8004098:	4619      	mov	r1, r3
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <MX_TIM4_Init+0x114>)
 800409c:	f00d fece 	bl	8011e3c <HAL_TIM_PWM_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80040a6:	f7ff f947 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040aa:	463b      	mov	r3, r7
 80040ac:	220c      	movs	r2, #12
 80040ae:	4619      	mov	r1, r3
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <MX_TIM4_Init+0x114>)
 80040b2:	f00d fec3 	bl	8011e3c <HAL_TIM_PWM_ConfigChannel>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80040bc:	f7ff f93c 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80040c0:	4803      	ldr	r0, [pc, #12]	; (80040d0 <MX_TIM4_Init+0x114>)
 80040c2:	f000 f8b1 	bl	8004228 <HAL_TIM_MspPostInit>

}
 80040c6:	bf00      	nop
 80040c8:	3738      	adds	r7, #56	; 0x38
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20001c0c 	.word	0x20001c0c
 80040d4:	40000800 	.word	0x40000800

080040d8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <MX_TIM7_Init+0x64>)
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <MX_TIM7_Init+0x68>)
 80040ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <MX_TIM7_Init+0x64>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f4:	4b11      	ldr	r3, [pc, #68]	; (800413c <MX_TIM7_Init+0x64>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <MX_TIM7_Init+0x64>)
 80040fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004100:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <MX_TIM7_Init+0x64>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004108:	480c      	ldr	r0, [pc, #48]	; (800413c <MX_TIM7_Init+0x64>)
 800410a:	f00d fde8 	bl	8011cde <HAL_TIM_Base_Init>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004114:	f7ff f910 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_TIM7_Init+0x64>)
 8004126:	f00e fca3 	bl	8012a70 <HAL_TIMEx_MasterConfigSynchronization>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004130:	f7ff f902 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20001c58 	.word	0x20001c58
 8004140:	40001400 	.word	0x40001400

08004144 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <HAL_TIM_PWM_MspInit+0x3c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_TIM_PWM_MspInit+0x40>)
 8004158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800415c:	4a09      	ldr	r2, [pc, #36]	; (8004184 <HAL_TIM_PWM_MspInit+0x40>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_TIM_PWM_MspInit+0x40>)
 8004168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40010000 	.word	0x40010000
 8004184:	58024400 	.word	0x58024400

08004188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a20      	ldr	r2, [pc, #128]	; (8004218 <HAL_TIM_Base_MspInit+0x90>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10f      	bne.n	80041ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 800419c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041a2:	f043 0302 	orr.w	r3, r3, #2
 80041a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80041b8:	e028      	b.n	800420c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_TIM_Base_MspInit+0x98>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10f      	bne.n	80041e4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
}
 80041e2:	e013      	b.n	800420c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <HAL_TIM_Base_MspInit+0x9c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 80041f6:	f043 0320 	orr.w	r3, r3, #32
 80041fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_TIM_Base_MspInit+0x94>)
 8004200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40000400 	.word	0x40000400
 800421c:	58024400 	.word	0x58024400
 8004220:	40000800 	.word	0x40000800
 8004224:	40001400 	.word	0x40001400

08004228 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <HAL_TIM_MspPostInit+0x100>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d120      	bne.n	800428c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004250:	4a36      	ldr	r2, [pc, #216]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 800425c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800427a:	2301      	movs	r3, #1
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	482a      	ldr	r0, [pc, #168]	; (8004330 <HAL_TIM_MspPostInit+0x108>)
 8004286:	f005 f821 	bl	80092cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800428a:	e049      	b.n	8004320 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <HAL_TIM_MspPostInit+0x10c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d11f      	bne.n	80042d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004296:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 8004298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 80042a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042b4:	2320      	movs	r3, #32
 80042b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b8:	2302      	movs	r3, #2
 80042ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	2300      	movs	r3, #0
 80042c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042c4:	2302      	movs	r3, #2
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	481a      	ldr	r0, [pc, #104]	; (8004338 <HAL_TIM_MspPostInit+0x110>)
 80042d0:	f004 fffc 	bl	80092cc <HAL_GPIO_Init>
}
 80042d4:	e024      	b.n	8004320 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_TIM_MspPostInit+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d11f      	bne.n	8004320 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 80042e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_TIM_MspPostInit+0x104>)
 80042f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80042fe:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004310:	2302      	movs	r3, #2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4619      	mov	r1, r3
 800431a:	4807      	ldr	r0, [pc, #28]	; (8004338 <HAL_TIM_MspPostInit+0x110>)
 800431c:	f004 ffd6 	bl	80092cc <HAL_GPIO_Init>
}
 8004320:	bf00      	nop
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40010000 	.word	0x40010000
 800432c:	58024400 	.word	0x58024400
 8004330:	58020000 	.word	0x58020000
 8004334:	40000400 	.word	0x40000400
 8004338:	58020400 	.word	0x58020400
 800433c:	40000800 	.word	0x40000800

08004340 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <MX_USART6_UART_Init+0x94>)
 8004348:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800434c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004350:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004360:	2200      	movs	r2, #0
 8004362:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004366:	2204      	movs	r2, #4
 8004368:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800436a:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004372:	2200      	movs	r2, #0
 8004374:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004378:	2200      	movs	r2, #0
 800437a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800437e:	2200      	movs	r2, #0
 8004380:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 8004384:	2200      	movs	r2, #0
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004388:	4811      	ldr	r0, [pc, #68]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800438a:	f00e fc7d 	bl	8012c88 <HAL_UART_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004394:	f7fe ffd0 	bl	8003338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004398:	2100      	movs	r1, #0
 800439a:	480d      	ldr	r0, [pc, #52]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 800439c:	f00f fc7f 	bl	8013c9e <HAL_UARTEx_SetTxFifoThreshold>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80043a6:	f7fe ffc7 	bl	8003338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043aa:	2100      	movs	r1, #0
 80043ac:	4808      	ldr	r0, [pc, #32]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 80043ae:	f00f fcb4 	bl	8013d1a <HAL_UARTEx_SetRxFifoThreshold>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80043b8:	f7fe ffbe 	bl	8003338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80043bc:	4804      	ldr	r0, [pc, #16]	; (80043d0 <MX_USART6_UART_Init+0x90>)
 80043be:	f00f fc35 	bl	8013c2c <HAL_UARTEx_DisableFifoMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80043c8:	f7fe ffb6 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20001ca4 	.word	0x20001ca4
 80043d4:	40011400 	.word	0x40011400

080043d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b0bc      	sub	sp, #240	; 0xf0
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043f0:	f107 0318 	add.w	r3, r7, #24
 80043f4:	22c0      	movs	r2, #192	; 0xc0
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f013 fa1d 	bl	8017838 <memset>
  if(uartHandle->Instance==USART6)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a39      	ldr	r2, [pc, #228]	; (80044e8 <HAL_UART_MspInit+0x110>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d16a      	bne.n	80044de <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004408:	f04f 0201 	mov.w	r2, #1
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800441a:	f107 0318 	add.w	r3, r7, #24
 800441e:	4618      	mov	r0, r3
 8004420:	f008 faa6 	bl	800c970 <HAL_RCCEx_PeriphCLKConfig>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800442a:	f7fe ff85 	bl	8003338 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800442e:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <HAL_UART_MspInit+0x114>)
 8004430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004434:	4a2d      	ldr	r2, [pc, #180]	; (80044ec <HAL_UART_MspInit+0x114>)
 8004436:	f043 0320 	orr.w	r3, r3, #32
 800443a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_UART_MspInit+0x114>)
 8004440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <HAL_UART_MspInit+0x114>)
 800444e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004452:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_UART_MspInit+0x114>)
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_UART_MspInit+0x114>)
 800445e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_UART_MspInit+0x114>)
 800446c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004470:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <HAL_UART_MspInit+0x114>)
 8004472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <HAL_UART_MspInit+0x114>)
 800447c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80044a0:	2307      	movs	r3, #7
 80044a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044aa:	4619      	mov	r1, r3
 80044ac:	4810      	ldr	r0, [pc, #64]	; (80044f0 <HAL_UART_MspInit+0x118>)
 80044ae:	f004 ff0d 	bl	80092cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80044cc:	2307      	movs	r3, #7
 80044ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044d6:	4619      	mov	r1, r3
 80044d8:	4806      	ldr	r0, [pc, #24]	; (80044f4 <HAL_UART_MspInit+0x11c>)
 80044da:	f004 fef7 	bl	80092cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80044de:	bf00      	nop
 80044e0:	37f0      	adds	r7, #240	; 0xf0
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40011400 	.word	0x40011400
 80044ec:	58024400 	.word	0x58024400
 80044f0:	58020800 	.word	0x58020800
 80044f4:	58021800 	.word	0x58021800

080044f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80044fc:	2201      	movs	r2, #1
 80044fe:	490f      	ldr	r1, [pc, #60]	; (800453c <MX_USB_HOST_Init+0x44>)
 8004500:	480f      	ldr	r0, [pc, #60]	; (8004540 <MX_USB_HOST_Init+0x48>)
 8004502:	f011 fb73 	bl	8015bec <USBH_Init>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800450c:	f7fe ff14 	bl	8003338 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8004510:	490c      	ldr	r1, [pc, #48]	; (8004544 <MX_USB_HOST_Init+0x4c>)
 8004512:	480b      	ldr	r0, [pc, #44]	; (8004540 <MX_USB_HOST_Init+0x48>)
 8004514:	f011 fc19 	bl	8015d4a <USBH_RegisterClass>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800451e:	f7fe ff0b 	bl	8003338 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004522:	4807      	ldr	r0, [pc, #28]	; (8004540 <MX_USB_HOST_Init+0x48>)
 8004524:	f011 fc9e 	bl	8015e64 <USBH_Start>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800452e:	f7fe ff03 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004532:	f007 fa27 	bl	800b984 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	08004561 	.word	0x08004561
 8004540:	30000460 	.word	0x30000460
 8004544:	20000020 	.word	0x20000020

08004548 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800454c:	4803      	ldr	r0, [pc, #12]	; (800455c <MX_USB_HOST_Process+0x14>)
 800454e:	f011 fcb5 	bl	8015ebc <USBH_Process>
  MIDI_Application();
 8004552:	f7fc ff33 	bl	80013bc <MIDI_Application>
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	30000460 	.word	0x30000460

08004560 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	2b04      	cmp	r3, #4
 8004572:	d839      	bhi.n	80045e8 <USBH_UserProcess+0x88>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <USBH_UserProcess+0x1c>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045e9 	.word	0x080045e9
 8004580:	080045d3 	.word	0x080045d3
 8004584:	080045e9 	.word	0x080045e9
 8004588:	080045e1 	.word	0x080045e1
 800458c:	08004591 	.word	0x08004591
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <USBH_UserProcess+0x94>)
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 8004596:	4818      	ldr	r0, [pc, #96]	; (80045f8 <USBH_UserProcess+0x98>)
 8004598:	f011 fc74 	bl	8015e84 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e007      	b.n	80045b2 <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <USBH_UserProcess+0x9c>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b3f      	cmp	r3, #63	; 0x3f
 80045b6:	ddf4      	ble.n	80045a2 <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80045b8:	2201      	movs	r2, #1
 80045ba:	4911      	ldr	r1, [pc, #68]	; (8004600 <USBH_UserProcess+0xa0>)
 80045bc:	480e      	ldr	r0, [pc, #56]	; (80045f8 <USBH_UserProcess+0x98>)
 80045be:	f011 fb15 	bl	8015bec <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 80045c2:	4910      	ldr	r1, [pc, #64]	; (8004604 <USBH_UserProcess+0xa4>)
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <USBH_UserProcess+0x98>)
 80045c6:	f011 fbc0 	bl	8015d4a <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 80045ca:	480b      	ldr	r0, [pc, #44]	; (80045f8 <USBH_UserProcess+0x98>)
 80045cc:	f011 fc4a 	bl	8015e64 <USBH_Start>
	break;
 80045d0:	e00b      	b.n	80045ea <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <USBH_UserProcess+0x94>)
 80045d4:	2202      	movs	r2, #2
 80045d6:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <USBH_UserProcess+0xa8>)
 80045da:	2202      	movs	r2, #2
 80045dc:	701a      	strb	r2, [r3, #0]
  break;
 80045de:	e004      	b.n	80045ea <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <USBH_UserProcess+0x94>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
  break;
 80045e6:	e000      	b.n	80045ea <USBH_UserProcess+0x8a>

  default:
  break;
 80045e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20001d38 	.word	0x20001d38
 80045f8:	30000460 	.word	0x30000460
 80045fc:	30000000 	.word	0x30000000
 8004600:	08004561 	.word	0x08004561
 8004604:	20000020 	.word	0x20000020
 8004608:	20000000 	.word	0x20000000

0800460c <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af04      	add	r7, sp, #16
 8004612:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004614:	2302      	movs	r3, #2
 8004616:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 800461c:	23ff      	movs	r3, #255	; 0xff
 800461e:	2203      	movs	r2, #3
 8004620:	2101      	movs	r1, #1
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f011 fbd8 	bl	8015dd8 <USBH_FindInterface>
 8004628:	4603      	mov	r3, r0
 800462a:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 800462c:	7bbb      	ldrb	r3, [r7, #14]
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d102      	bne.n	8004638 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8004632:	2302      	movs	r3, #2
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e0f2      	b.n	800481e <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8004638:	7bbb      	ldrb	r3, [r7, #14]
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f011 fbaf 	bl	8015da0 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8004648:	201c      	movs	r0, #28
 800464a:	f013 f839 	bl	80176c0 <malloc>
 800464e:	4603      	mov	r3, r0
 8004650:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004662:	4619      	mov	r1, r3
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	231a      	movs	r3, #26
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b25b      	sxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	da1c      	bge.n	80046b4 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004680:	4619      	mov	r1, r3
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	231a      	movs	r3, #26
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800469c:	4619      	mov	r1, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	231a      	movs	r3, #26
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	811a      	strh	r2, [r3, #8]
 80046b2:	e01b      	b.n	80046ec <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046ba:	4619      	mov	r1, r3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	231a      	movs	r3, #26
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046d6:	4619      	mov	r1, r3
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	231a      	movs	r3, #26
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80046e6:	881a      	ldrh	r2, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046f2:	4619      	mov	r1, r3
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	231a      	movs	r3, #26
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b25b      	sxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	da1c      	bge.n	8004744 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004710:	4619      	mov	r1, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	231a      	movs	r3, #26
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800472c:	4619      	mov	r1, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	231a      	movs	r3, #26
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800473c:	881a      	ldrh	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	811a      	strh	r2, [r3, #8]
 8004742:	e01b      	b.n	800477c <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800474a:	4619      	mov	r1, r3
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	231a      	movs	r3, #26
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	f203 3356 	addw	r3, r3, #854	; 0x356
 800475a:	781a      	ldrb	r2, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004766:	4619      	mov	r1, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	231a      	movs	r3, #26
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f012 fed9 	bl	801753a <USBH_AllocPipe>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f012 fecf 	bl	801753a <USBH_AllocPipe>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	7899      	ldrb	r1, [r3, #2]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	78d8      	ldrb	r0, [r3, #3]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	88d2      	ldrh	r2, [r2, #6]
 80047bc:	9202      	str	r2, [sp, #8]
 80047be:	2202      	movs	r2, #2
 80047c0:	9201      	str	r2, [sp, #4]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4623      	mov	r3, r4
 80047c6:	4602      	mov	r2, r0
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f012 fe87 	bl	80174dc <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	7859      	ldrb	r1, [r3, #1]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	7918      	ldrb	r0, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	8912      	ldrh	r2, [r2, #8]
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	2202      	movs	r2, #2
 80047ea:	9201      	str	r2, [sp, #4]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	4623      	mov	r3, r4
 80047f0:	4602      	mov	r2, r0
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f012 fe72 	bl	80174dc <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2200      	movs	r2, #0
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fbf6 	bl	8004ff8 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	789b      	ldrb	r3, [r3, #2]
 8004810:	2200      	movs	r2, #0
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fbef 	bl	8004ff8 <USBH_LL_SetToggle>
		status = USBH_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}

08004828 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	789b      	ldrb	r3, [r3, #2]
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f012 fe66 	bl	801751a <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	789b      	ldrb	r3, [r3, #2]
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f012 fe92 	bl	801757e <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00e      	beq.n	8004886 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f012 fe53 	bl	801751a <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f012 fe7f 	bl	801757e <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4618      	mov	r0, r3
 800489c:	f012 ff18 	bl	80176d0 <free>
		phost->pActiveClass->pData = 0;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048a6:	2200      	movs	r2, #0
 80048a8:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80048c2:	2102      	movs	r1, #2
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3

	return USBH_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b0b      	cmp	r3, #11
 80048ec:	d10e      	bne.n	800490c <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f012 fe0d 	bl	801751a <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	789b      	ldrb	r3, [r3, #2]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f012 fe07 	bl	801751a <USBH_ClosePipe>
  }
  return USBH_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d012      	beq.n	800495e <USBH_MIDI_Process+0x48>
 8004938:	2b02      	cmp	r3, #2
 800493a:	dc1d      	bgt.n	8004978 <USBH_MIDI_Process+0x62>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <USBH_MIDI_Process+0x30>
 8004940:	2b01      	cmp	r3, #1
 8004942:	d003      	beq.n	800494c <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8004944:	e018      	b.n	8004978 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
		break;
 800494a:	e018      	b.n	800497e <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f851 	bl	80049f4 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8c0 	bl	8004ad8 <MIDI_ProcessReception>
		status = USBH_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]
		break;
 800495c:	e00f      	b.n	800497e <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 800495e:	2100      	movs	r1, #0
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f012 f837 	bl	80169d4 <USBH_ClrFeature>
 8004966:	4603      	mov	r3, r0
 8004968:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 800496a:	7bbb      	ldrb	r3, [r7, #14]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
		break;
 8004976:	e001      	b.n	800497c <USBH_MIDI_Process+0x66>
		break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <USBH_MIDI_Process+0x68>
		break;
 800497c:	bf00      	nop

	}

	return status;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800499e:	b480      	push	{r7}
 80049a0:	b087      	sub	sp, #28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <USBH_MIDI_Receive+0x2c>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2203      	movs	r2, #3
 80049e0:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	7e1b      	ldrb	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d002      	beq.n	8004a18 <MIDI_ProcessTransmission+0x24>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d021      	beq.n	8004a5a <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8004a16:	e05a      	b.n	8004ace <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8a9a      	ldrh	r2, [r3, #20]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88db      	ldrh	r3, [r3, #6]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d90b      	bls.n	8004a3c <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68d9      	ldr	r1, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88da      	ldrh	r2, [r3, #6]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	789b      	ldrb	r3, [r3, #2]
 8004a30:	2001      	movs	r0, #1
 8004a32:	9000      	str	r0, [sp, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f012 fd0e 	bl	8017456 <USBH_BulkSendData>
 8004a3a:	e00a      	b.n	8004a52 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68d9      	ldr	r1, [r3, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8a9a      	ldrh	r2, [r3, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	789b      	ldrb	r3, [r3, #2]
 8004a48:	2001      	movs	r0, #1
 8004a4a:	9000      	str	r0, [sp, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f012 fd02 	bl	8017456 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2202      	movs	r2, #2
 8004a56:	761a      	strb	r2, [r3, #24]
		break;
 8004a58:	e039      	b.n	8004ace <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa9f 	bl	8004fa4 <USBH_LL_GetURBState>
 8004a66:	4603      	mov	r3, r0
 8004a68:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d127      	bne.n	8004ac0 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8a9a      	ldrh	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88db      	ldrh	r3, [r3, #6]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d90f      	bls.n	8004a9c <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8a9a      	ldrh	r2, [r3, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88db      	ldrh	r3, [r3, #6]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	88d2      	ldrh	r2, [r2, #6]
 8004a94:	441a      	add	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	e002      	b.n	8004aa2 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8a9b      	ldrh	r3, [r3, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	761a      	strb	r2, [r3, #24]
		break;
 8004ab0:	e00c      	b.n	8004acc <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f86d 	bl	8004b98 <USBH_MIDI_TransmitCallback>
		break;
 8004abe:	e005      	b.n	8004acc <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d102      	bne.n	8004acc <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	761a      	strb	r2, [r3, #24]
		break;
 8004acc:	bf00      	nop
	}
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	7e5b      	ldrb	r3, [r3, #25]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d002      	beq.n	8004afc <MIDI_ProcessReception+0x24>
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d00d      	beq.n	8004b16 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8004afa:	e047      	b.n	8004b8c <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2204      	movs	r2, #4
 8004b00:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6919      	ldr	r1, [r3, #16]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	891a      	ldrh	r2, [r3, #8]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f012 fcc6 	bl	80174a0 <USBH_BulkReceiveData>
		break;
 8004b14:	e03a      	b.n	8004b8c <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa41 	bl	8004fa4 <USBH_LL_GetURBState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d12e      	bne.n	8004b8a <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <MIDI_ProcessReception+0xbc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9a1 	bl	8004e80 <USBH_LL_GetLastXferSize>
 8004b3e:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	8adb      	ldrh	r3, [r3, #22]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d017      	beq.n	8004b7c <MIDI_ProcessReception+0xa4>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	891b      	ldrh	r3, [r3, #8]
 8004b50:	461a      	mov	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d911      	bls.n	8004b7c <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	8ada      	ldrh	r2, [r3, #22]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	441a      	add	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2203      	movs	r2, #3
 8004b78:	765a      	strb	r2, [r3, #25]
		break;
 8004b7a:	e006      	b.n	8004b8a <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fc fdb9 	bl	80016fc <USBH_MIDI_ReceiveCallback>
		break;
 8004b8a:	bf00      	nop
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20001d3c 	.word	0x20001d3c

08004b98 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <HAL_HCD_MspInit+0xb8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d146      	bne.n	8004c5c <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bce:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd4:	4a24      	ldr	r2, [pc, #144]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004bec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004bfe:	230a      	movs	r3, #10
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	4619      	mov	r1, r3
 8004c08:	4818      	ldr	r0, [pc, #96]	; (8004c6c <HAL_HCD_MspInit+0xc0>)
 8004c0a:	f004 fb5f 	bl	80092cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_HCD_MspInit+0xbc>)
 8004c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2106      	movs	r1, #6
 8004c30:	2062      	movs	r0, #98	; 0x62
 8004c32:	f002 f9b6 	bl	8006fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004c36:	2062      	movs	r0, #98	; 0x62
 8004c38:	f002 f9cd 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2106      	movs	r1, #6
 8004c40:	2063      	movs	r0, #99	; 0x63
 8004c42:	f002 f9ae 	bl	8006fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8004c46:	2063      	movs	r0, #99	; 0x63
 8004c48:	f002 f9c5 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2065      	movs	r0, #101	; 0x65
 8004c52:	f002 f9a6 	bl	8006fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004c56:	2065      	movs	r0, #101	; 0x65
 8004c58:	f002 f9bd 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40080000 	.word	0x40080000
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	58020000 	.word	0x58020000

08004c70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f011 fcfd 	bl	801667e <USBH_LL_IncTimer>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f011 fd35 	bl	801670a <USBH_LL_Connect>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f011 fd3e 	bl	8016738 <USBH_LL_Disconnect>
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f011 fcef 	bl	80166d2 <USBH_LL_PortEnabled>
} 
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f011 fcef 	bl	80166ee <USBH_LL_PortDisabled>
} 
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d129      	bne.n	8004d7e <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d36:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <USBH_LL_Init+0x74>)
 8004d3e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d42:	2210      	movs	r2, #16
 8004d44:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d54:	2202      	movs	r2, #2
 8004d56:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d5e:	480a      	ldr	r0, [pc, #40]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d60:	f004 fc95 	bl	800968e <HAL_HCD_Init>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004d6a:	f7fe fae5 	bl	8003338 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004d6e:	4806      	ldr	r0, [pc, #24]	; (8004d88 <USBH_LL_Init+0x70>)
 8004d70:	f005 f87d 	bl	8009e6e <HAL_HCD_GetCurrentFrame>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f011 fc71 	bl	8016660 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20001d40 	.word	0x20001d40
 8004d8c:	40080000 	.word	0x40080000

08004d90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f004 ffeb 	bl	8009d82 <HAL_HCD_Start>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f95c 	bl	8005070 <USBH_Get_USB_Status>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f004 fff3 	bl	8009dc8 <HAL_HCD_Stop>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f941 	bl	8005070 <USBH_Get_USB_Status>
 8004dee:	4603      	mov	r3, r0
 8004df0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f005 f83b 	bl	8009e8a <HAL_HCD_GetCurrentSpeed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d00c      	beq.n	8004e34 <USBH_LL_GetSpeed+0x38>
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d80d      	bhi.n	8004e3a <USBH_LL_GetSpeed+0x3e>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <USBH_LL_GetSpeed+0x2c>
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d003      	beq.n	8004e2e <USBH_LL_GetSpeed+0x32>
 8004e26:	e008      	b.n	8004e3a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e2c:	e008      	b.n	8004e40 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
    break;
 8004e32:	e005      	b.n	8004e40 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8004e34:	2302      	movs	r3, #2
 8004e36:	73fb      	strb	r3, [r7, #15]
    break;
 8004e38:	e002      	b.n	8004e40 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8004e3e:	bf00      	nop
  }
  return  speed;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 ffce 	bl	8009e02 <HAL_HCD_ResetPort>
 8004e66:	4603      	mov	r3, r0
 8004e68:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f8ff 	bl	8005070 <USBH_Get_USB_Status>
 8004e72:	4603      	mov	r3, r0
 8004e74:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f004 ffd5 	bl	8009e46 <HAL_HCD_HC_GetXferCount>
 8004e9c:	4603      	mov	r3, r0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004ea6:	b590      	push	{r4, r7, lr}
 8004ea8:	b089      	sub	sp, #36	; 0x24
 8004eaa:	af04      	add	r7, sp, #16
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	4608      	mov	r0, r1
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	70fb      	strb	r3, [r7, #3]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70bb      	strb	r3, [r7, #2]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004ece:	787c      	ldrb	r4, [r7, #1]
 8004ed0:	78ba      	ldrb	r2, [r7, #2]
 8004ed2:	78f9      	ldrb	r1, [r7, #3]
 8004ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	f004 fc34 	bl	8009752 <HAL_HCD_HC_Init>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f8bd 	bl	8005070 <USBH_Get_USB_Status>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}

08004f04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f004 fca4 	bl	8009870 <HAL_HCD_HC_Halt>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f89e 	bl	8005070 <USBH_Get_USB_Status>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004f42:	b590      	push	{r4, r7, lr}
 8004f44:	b089      	sub	sp, #36	; 0x24
 8004f46:	af04      	add	r7, sp, #16
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	70fb      	strb	r3, [r7, #3]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70bb      	strb	r3, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004f6a:	787c      	ldrb	r4, [r7, #1]
 8004f6c:	78ba      	ldrb	r2, [r7, #2]
 8004f6e:	78f9      	ldrb	r1, [r7, #3]
 8004f70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f74:	9303      	str	r3, [sp, #12]
 8004f76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4623      	mov	r3, r4
 8004f86:	f004 fc97 	bl	80098b8 <HAL_HCD_HC_SubmitRequest>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f86d 	bl	8005070 <USBH_Get_USB_Status>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f004 ff2f 	bl	8009e1e <HAL_HCD_HC_GetURBState>
 8004fc0:	4603      	mov	r3, r0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d103      	bne.n	8004fe8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f870 	bl	80050c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004fe8:	20c8      	movs	r0, #200	; 0xc8
 8004fea:	f000 f945 	bl	8005278 <HAL_Delay>
  return USBH_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
 8005004:	4613      	mov	r3, r2
 8005006:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800500e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	333b      	adds	r3, #59	; 0x3b
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3354      	adds	r3, #84	; 0x54
 8005032:	78ba      	ldrb	r2, [r7, #2]
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e008      	b.n	800504a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3355      	adds	r3, #85	; 0x55
 8005046:	78ba      	ldrb	r2, [r7, #2]
 8005048:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f909 	bl	8005278 <HAL_Delay>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d817      	bhi.n	80050b4 <USBH_Get_USB_Status+0x44>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <USBH_Get_USB_Status+0x1c>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a3 	.word	0x080050a3
 8005094:	080050a9 	.word	0x080050a9
 8005098:	080050af 	.word	0x080050af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
    break;
 80050a0:	e00b      	b.n	80050ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80050a2:	2302      	movs	r3, #2
 80050a4:	73fb      	strb	r3, [r7, #15]
    break;
 80050a6:	e008      	b.n	80050ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
    break;
 80050ac:	e005      	b.n	80050ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80050ae:	2302      	movs	r3, #2
 80050b0:	73fb      	strb	r3, [r7, #15]
    break;
 80050b2:	e002      	b.n	80050ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80050b4:	2302      	movs	r3, #2
 80050b6:	73fb      	strb	r3, [r7, #15]
    break;
 80050b8:	bf00      	nop
  }
  return usb_status;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e001      	b.n	80050e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ee:	4803      	ldr	r0, [pc, #12]	; (80050fc <MX_DriverVbusFS+0x34>)
 80050f0:	f004 fab4 	bl	800965c <HAL_GPIO_WritePin>
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	58020400 	.word	0x58020400

08005100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005106:	e003      	b.n	8005110 <LoopCopyDataInit>

08005108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800510a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800510c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800510e:	3104      	adds	r1, #4

08005110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005110:	480b      	ldr	r0, [pc, #44]	; (8005140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005118:	d3f6      	bcc.n	8005108 <CopyDataInit>
  ldr  r2, =_sbss
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800511c:	e002      	b.n	8005124 <LoopFillZerobss>

0800511e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800511e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005120:	f842 3b04 	str.w	r3, [r2], #4

08005124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005128:	d3f9      	bcc.n	800511e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800512a:	f7fe fddd 	bl	8003ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800512e:	f012 fba1 	bl	8017874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005132:	f7fd fe7f 	bl	8002e34 <main>
  bx  lr    
 8005136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800513c:	080198a0 	.word	0x080198a0
  ldr  r0, =_sdata
 8005140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005144:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8005148:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800514c:	2000219c 	.word	0x2000219c

08005150 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005150:	e7fe      	b.n	8005150 <ADC3_IRQHandler>
	...

08005154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800515a:	2003      	movs	r0, #3
 800515c:	f001 ff16 	bl	8006f8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005160:	f007 fa30 	bl	800c5c4 <HAL_RCC_GetSysClockFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_Init+0x68>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	4913      	ldr	r1, [pc, #76]	; (80051c0 <HAL_Init+0x6c>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <HAL_Init+0x68>)
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <HAL_Init+0x6c>)
 8005188:	5cd3      	ldrb	r3, [r2, r3]
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <HAL_Init+0x70>)
 8005196:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005198:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <HAL_Init+0x74>)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800519e:	2000      	movs	r0, #0
 80051a0:	f000 f814 	bl	80051cc <HAL_InitTick>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e002      	b.n	80051b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80051ae:	f7fe fce1 	bl	8003b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	58024400 	.word	0x58024400
 80051c0:	08017f94 	.word	0x08017f94
 80051c4:	2000001c 	.word	0x2000001c
 80051c8:	20000018 	.word	0x20000018

080051cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80051d4:	4b15      	ldr	r3, [pc, #84]	; (800522c <HAL_InitTick+0x60>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e021      	b.n	8005224 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_InitTick+0x64>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <HAL_InitTick+0x60>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fefb 	bl	8006ff2 <HAL_SYSTICK_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e00e      	b.n	8005224 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	d80a      	bhi.n	8005222 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800520c:	2200      	movs	r2, #0
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005214:	f001 fec5 	bl	8006fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <HAL_InitTick+0x68>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000044 	.word	0x20000044
 8005230:	20000018 	.word	0x20000018
 8005234:	20000040 	.word	0x20000040

08005238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_IncTick+0x20>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_IncTick+0x24>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4413      	add	r3, r2
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_IncTick+0x24>)
 800524a:	6013      	str	r3, [r2, #0]
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000044 	.word	0x20000044
 800525c:	20002044 	.word	0x20002044

08005260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return uwTick;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_GetTick+0x14>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20002044 	.word	0x20002044

08005278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005280:	f7ff ffee 	bl	8005260 <HAL_GetTick>
 8005284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005290:	d005      	beq.n	800529e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_Delay+0x44>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800529e:	bf00      	nop
 80052a0:	f7ff ffde 	bl	8005260 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d8f7      	bhi.n	80052a0 <HAL_Delay+0x28>
  {
  }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000044 	.word	0x20000044

080052c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_GetREVID+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	0c1b      	lsrs	r3, r3, #16
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	5c001000 	.word	0x5c001000

080052d8 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052e8:	4904      	ldr	r1, [pc, #16]	; (80052fc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	52004000 	.word	0x52004000

08005300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	609a      	str	r2, [r3, #8]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3360      	adds	r3, #96	; 0x60
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	430b      	orrs	r3, r1
 8005396:	431a      	orrs	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	611a      	str	r2, [r3, #16]
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3360      	adds	r3, #96	; 0x60
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	431a      	orrs	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	601a      	str	r2, [r3, #0]
  }
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3330      	adds	r3, #48	; 0x30
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	4413      	add	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	211f      	movs	r1, #31
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	401a      	ands	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0e9b      	lsrs	r3, r3, #26
 800546e:	f003 011f 	and.w	r1, r3, #31
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	431a      	orrs	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f023 0203 	bic.w	r2, r3, #3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80054da:	b480      	push	{r7}
 80054dc:	b087      	sub	sp, #28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3314      	adds	r3, #20
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	0e5b      	lsrs	r3, r3, #25
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	4413      	add	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0d1b      	lsrs	r3, r3, #20
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2107      	movs	r1, #7
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	0d1b      	lsrs	r3, r3, #20
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	431a      	orrs	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0318 	and.w	r3, r3, #24
 8005552:	4908      	ldr	r1, [pc, #32]	; (8005574 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005554:	40d9      	lsrs	r1, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	400b      	ands	r3, r1
 800555a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800555e:	431a      	orrs	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	000fffff 	.word	0x000fffff

08005578 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 031f 	and.w	r3, r3, #31
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80055be:	4013      	ands	r3, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6093      	str	r3, [r2, #8]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	5fffffc0 	.word	0x5fffffc0

080055d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d101      	bne.n	80055ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <LL_ADC_EnableInternalRegulator+0x24>)
 800560a:	4013      	ands	r3, r2
 800560c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	6fffffc0 	.word	0x6fffffc0

08005624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005638:	d101      	bne.n	800563e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <LL_ADC_Enable+0x24>)
 800565a:	4013      	ands	r3, r2
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	7fffffc0 	.word	0x7fffffc0

08005674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <LL_ADC_IsEnabled+0x18>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <LL_ADC_IsEnabled+0x1a>
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <LL_ADC_REG_StartConversion+0x24>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	f043 0204 	orr.w	r2, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	7fffffc0 	.word	0x7fffffc0

080056c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d101      	bne.n	80056dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d101      	bne.n	8005702 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e18f      	b.n	8005a4a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc f9af 	bl	8001a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff3f 	bl	80055d4 <LL_ADC_IsDeepPowerDownEnabled>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff25 	bl	80055b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff5a 	bl	8005624 <LL_ADC_IsInternalRegulatorEnabled>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d114      	bne.n	80057a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff ff3e 	bl	80055fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005780:	4b87      	ldr	r3, [pc, #540]	; (80059a0 <HAL_ADC_Init+0x290>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	099b      	lsrs	r3, r3, #6
 8005786:	4a87      	ldr	r2, [pc, #540]	; (80059a4 <HAL_ADC_Init+0x294>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	3301      	adds	r3, #1
 8005790:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005792:	e002      	b.n	800579a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3b01      	subs	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f9      	bne.n	8005794 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff3d 	bl	8005624 <LL_ADC_IsInternalRegulatorEnabled>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f043 0210 	orr.w	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f043 0201 	orr.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff77 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 80057d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f040 8129 	bne.w	8005a38 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 8125 	bne.w	8005a38 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057f6:	f043 0202 	orr.w	r2, r3, #2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff36 	bl	8005674 <LL_ADC_IsEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d136      	bne.n	800587c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a65      	ldr	r2, [pc, #404]	; (80059a8 <HAL_ADC_Init+0x298>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_ADC_Init+0x112>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a63      	ldr	r2, [pc, #396]	; (80059ac <HAL_ADC_Init+0x29c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10e      	bne.n	8005840 <HAL_ADC_Init+0x130>
 8005822:	4861      	ldr	r0, [pc, #388]	; (80059a8 <HAL_ADC_Init+0x298>)
 8005824:	f7ff ff26 	bl	8005674 <LL_ADC_IsEnabled>
 8005828:	4604      	mov	r4, r0
 800582a:	4860      	ldr	r0, [pc, #384]	; (80059ac <HAL_ADC_Init+0x29c>)
 800582c:	f7ff ff22 	bl	8005674 <LL_ADC_IsEnabled>
 8005830:	4603      	mov	r3, r0
 8005832:	4323      	orrs	r3, r4
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e008      	b.n	8005852 <HAL_ADC_Init+0x142>
 8005840:	485b      	ldr	r0, [pc, #364]	; (80059b0 <HAL_ADC_Init+0x2a0>)
 8005842:	f7ff ff17 	bl	8005674 <LL_ADC_IsEnabled>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d012      	beq.n	800587c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a53      	ldr	r2, [pc, #332]	; (80059a8 <HAL_ADC_Init+0x298>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_ADC_Init+0x15a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_ADC_Init+0x29c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_ADC_Init+0x15e>
 800586a:	4a52      	ldr	r2, [pc, #328]	; (80059b4 <HAL_ADC_Init+0x2a4>)
 800586c:	e000      	b.n	8005870 <HAL_ADC_Init+0x160>
 800586e:	4a52      	ldr	r2, [pc, #328]	; (80059b8 <HAL_ADC_Init+0x2a8>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f7ff fd42 	bl	8005300 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800587c:	f7ff fd20 	bl	80052c0 <HAL_GetREVID>
 8005880:	4603      	mov	r3, r0
 8005882:	f241 0203 	movw	r2, #4099	; 0x1003
 8005886:	4293      	cmp	r3, r2
 8005888:	d914      	bls.n	80058b4 <HAL_ADC_Init+0x1a4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b10      	cmp	r3, #16
 8005890:	d110      	bne.n	80058b4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	7d5b      	ldrb	r3, [r3, #21]
 8005896:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800589c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80058a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7f1b      	ldrb	r3, [r3, #28]
 80058a8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80058aa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058ac:	f043 030c 	orr.w	r3, r3, #12
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e00d      	b.n	80058d0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7d5b      	ldrb	r3, [r3, #21]
 80058b8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058be:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80058c4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	7f1b      	ldrb	r3, [r3, #28]
 80058ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7f1b      	ldrb	r3, [r3, #28]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d106      	bne.n	80058e6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	3b01      	subs	r3, #1
 80058de:	045b      	lsls	r3, r3, #17
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <HAL_ADC_Init+0x2ac>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	430b      	orrs	r3, r1
 8005914:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fed2 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 8005920:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff fedf 	bl	80056ea <LL_ADC_INJ_IsConversionOngoing>
 800592c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d15f      	bne.n	80059f4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d15c      	bne.n	80059f4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7d1b      	ldrb	r3, [r3, #20]
 800593e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_ADC_Init+0x2b0>)
 8005950:	4013      	ands	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	430b      	orrs	r3, r1
 800595a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005962:	2b01      	cmp	r3, #1
 8005964:	d130      	bne.n	80059c8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <HAL_ADC_Init+0x2b4>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800597a:	3a01      	subs	r2, #1
 800597c:	0411      	lsls	r1, r2, #16
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800598e:	430a      	orrs	r2, r1
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	611a      	str	r2, [r3, #16]
 800599c:	e01c      	b.n	80059d8 <HAL_ADC_Init+0x2c8>
 800599e:	bf00      	nop
 80059a0:	20000018 	.word	0x20000018
 80059a4:	053e2d63 	.word	0x053e2d63
 80059a8:	40022000 	.word	0x40022000
 80059ac:	40022100 	.word	0x40022100
 80059b0:	58026000 	.word	0x58026000
 80059b4:	40022300 	.word	0x40022300
 80059b8:	58026300 	.word	0x58026300
 80059bc:	fff0c003 	.word	0xfff0c003
 80059c0:	ffffbffc 	.word	0xffffbffc
 80059c4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 ffba 	bl	8006968 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d10c      	bne.n	8005a16 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f023 010f 	bic.w	r1, r3, #15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
 8005a14:	e007      	b.n	8005a26 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020f 	bic.w	r2, r2, #15
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
 8005a36:	e007      	b.n	8005a48 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	f043 0210 	orr.w	r2, r3, #16
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}
 8005a52:	bf00      	nop

08005a54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a55      	ldr	r2, [pc, #340]	; (8005bbc <HAL_ADC_Start_DMA+0x168>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_ADC_Start_DMA+0x20>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a54      	ldr	r2, [pc, #336]	; (8005bc0 <HAL_ADC_Start_DMA+0x16c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_ADC_Start_DMA+0x24>
 8005a74:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_ADC_Start_DMA+0x170>)
 8005a76:	e000      	b.n	8005a7a <HAL_ADC_Start_DMA+0x26>
 8005a78:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <HAL_ADC_Start_DMA+0x174>)
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fd7c 	bl	8005578 <LL_ADC_GetMultimode>
 8005a80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fe1c 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 808c 	bne.w	8005bac <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_ADC_Start_DMA+0x4e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e087      	b.n	8005bb2 <HAL_ADC_Start_DMA+0x15e>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	d002      	beq.n	8005abc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d170      	bne.n	8005b9e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fe35 	bl	800672c <ADC_Enable>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d163      	bne.n	8005b94 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad0:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_ADC_Start_DMA+0x178>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <HAL_ADC_Start_DMA+0x16c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d002      	beq.n	8005aec <HAL_ADC_Start_DMA+0x98>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	e000      	b.n	8005aee <HAL_ADC_Start_DMA+0x9a>
 8005aec:	4b33      	ldr	r3, [pc, #204]	; (8005bbc <HAL_ADC_Start_DMA+0x168>)
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d002      	beq.n	8005afc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d006      	beq.n	8005b22 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f023 0206 	bic.w	r2, r3, #6
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b20:	e002      	b.n	8005b28 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2c:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <HAL_ADC_Start_DMA+0x17c>)
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <HAL_ADC_Start_DMA+0x180>)
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <HAL_ADC_Start_DMA+0x184>)
 8005b3e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	221c      	movs	r2, #28
 8005b46:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0210 	orr.w	r2, r2, #16
 8005b5e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7ff fc8f 	bl	800548e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3340      	adds	r3, #64	; 0x40
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f001 fe1c 	bl	80077bc <HAL_DMA_Start_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fd85 	bl	800569c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b92:	e00d      	b.n	8005bb0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005b9c:	e008      	b.n	8005bb0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005baa:	e001      	b.n	8005bb0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40022000 	.word	0x40022000
 8005bc0:	40022100 	.word	0x40022100
 8005bc4:	40022300 	.word	0x40022300
 8005bc8:	58026300 	.word	0x58026300
 8005bcc:	fffff0fe 	.word	0xfffff0fe
 8005bd0:	08006841 	.word	0x08006841
 8005bd4:	08006919 	.word	0x08006919
 8005bd8:	08006935 	.word	0x08006935

08005bdc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005be4:	2300      	movs	r3, #0
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a87      	ldr	r2, [pc, #540]	; (8005e1c <HAL_ADC_IRQHandler+0x240>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_ADC_IRQHandler+0x30>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a86      	ldr	r2, [pc, #536]	; (8005e20 <HAL_ADC_IRQHandler+0x244>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_ADC_IRQHandler+0x34>
 8005c0c:	4b85      	ldr	r3, [pc, #532]	; (8005e24 <HAL_ADC_IRQHandler+0x248>)
 8005c0e:	e000      	b.n	8005c12 <HAL_ADC_IRQHandler+0x36>
 8005c10:	4b85      	ldr	r3, [pc, #532]	; (8005e28 <HAL_ADC_IRQHandler+0x24c>)
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff fcb0 	bl	8005578 <LL_ADC_GetMultimode>
 8005c18:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_ADC_IRQHandler+0x78>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d012      	beq.n	8005c54 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ffe8 	bl	8006c1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2202      	movs	r2, #2
 8005c52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x8c>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8083 	beq.w	8005d7a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d07d      	beq.n	8005d7a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fbb8 	bl	8005410 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d062      	beq.n	8005d6c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5d      	ldr	r2, [pc, #372]	; (8005e20 <HAL_ADC_IRQHandler+0x244>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d002      	beq.n	8005cb6 <HAL_ADC_IRQHandler+0xda>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	e000      	b.n	8005cb8 <HAL_ADC_IRQHandler+0xdc>
 8005cb6:	4b59      	ldr	r3, [pc, #356]	; (8005e1c <HAL_ADC_IRQHandler+0x240>)
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d008      	beq.n	8005cd2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d002      	beq.n	8005cd2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b09      	cmp	r3, #9
 8005cd0:	d104      	bne.n	8005cdc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	e00c      	b.n	8005cf6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a4f      	ldr	r2, [pc, #316]	; (8005e20 <HAL_ADC_IRQHandler+0x244>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d002      	beq.n	8005cec <HAL_ADC_IRQHandler+0x110>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	e000      	b.n	8005cee <HAL_ADC_IRQHandler+0x112>
 8005cec:	4b4b      	ldr	r3, [pc, #300]	; (8005e1c <HAL_ADC_IRQHandler+0x240>)
 8005cee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d135      	bne.n	8005d6c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d12e      	bne.n	8005d6c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fcd6 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11a      	bne.n	8005d54 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 020c 	bic.w	r2, r2, #12
 8005d2c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d112      	bne.n	8005d6c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
 8005d52:	e00b      	b.n	8005d6c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0210 	orr.w	r2, r3, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fd fa13 	bl	8003198 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	220c      	movs	r2, #12
 8005d78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <HAL_ADC_IRQHandler+0x1b2>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a0 	beq.w	8005eda <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 809a 	beq.w	8005eda <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fb76 	bl	80054b4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005dc8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fb1e 	bl	8005410 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dd4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <HAL_ADC_IRQHandler+0x244>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d002      	beq.n	8005de6 <HAL_ADC_IRQHandler+0x20a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	e000      	b.n	8005de8 <HAL_ADC_IRQHandler+0x20c>
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <HAL_ADC_IRQHandler+0x240>)
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d008      	beq.n	8005e02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b06      	cmp	r3, #6
 8005dfa:	d002      	beq.n	8005e02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d104      	bne.n	8005e0c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	e014      	b.n	8005e36 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a03      	ldr	r2, [pc, #12]	; (8005e20 <HAL_ADC_IRQHandler+0x244>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00a      	beq.n	8005e2c <HAL_ADC_IRQHandler+0x250>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	e008      	b.n	8005e2e <HAL_ADC_IRQHandler+0x252>
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40022100 	.word	0x40022100
 8005e24:	40022300 	.word	0x40022300
 8005e28:	58026300 	.word	0x58026300
 8005e2c:	4b84      	ldr	r3, [pc, #528]	; (8006040 <HAL_ADC_IRQHandler+0x464>)
 8005e2e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d047      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <HAL_ADC_IRQHandler+0x27a>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d03f      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d13a      	bne.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d133      	bne.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d12e      	bne.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fc39 	bl	80056ea <LL_ADC_INJ_IsConversionOngoing>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d11a      	bne.n	8005eb4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e8c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d112      	bne.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
 8005eb2:	e00b      	b.n	8005ecc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	f043 0210 	orr.w	r2, r3, #16
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fe7d 	bl	8006bcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2260      	movs	r2, #96	; 0x60
 8005ed8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x32c>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8b2 	bl	8006064 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x35c>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fe63 	bl	8006bf4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <HAL_ADC_IRQHandler+0x38c>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fe55 	bl	8006c08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d043      	beq.n	8005ffa <HAL_ADC_IRQHandler+0x41e>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03e      	beq.n	8005ffa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005f84:	2301      	movs	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
 8005f88:	e021      	b.n	8005fce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <HAL_ADC_IRQHandler+0x464>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_ADC_IRQHandler+0x3c8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a29      	ldr	r2, [pc, #164]	; (8006044 <HAL_ADC_IRQHandler+0x468>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x3cc>
 8005fa4:	4b28      	ldr	r3, [pc, #160]	; (8006048 <HAL_ADC_IRQHandler+0x46c>)
 8005fa6:	e000      	b.n	8005faa <HAL_ADC_IRQHandler+0x3ce>
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_ADC_IRQHandler+0x470>)
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff faf2 	bl	8005594 <LL_ADC_GetMultiDMATransfer>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fba:	e008      	b.n	8005fce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d10e      	bne.n	8005ff2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe4:	f043 0202 	orr.w	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f843 	bl	8006078 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006000:	2b00      	cmp	r3, #0
 8006002:	d018      	beq.n	8006036 <HAL_ADC_IRQHandler+0x45a>
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f043 0208 	orr.w	r2, r3, #8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800602e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fdd5 	bl	8006be0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006036:	bf00      	nop
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40022000 	.word	0x40022000
 8006044:	40022100 	.word	0x40022100
 8006048:	40022300 	.word	0x40022300
 800604c:	58026300 	.word	0x58026300

08006050 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b0a1      	sub	sp, #132	; 0x84
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4a9d      	ldr	r2, [pc, #628]	; (800631c <HAL_ADC_ConfigChannel+0x290>)
 80060a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x2a>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e321      	b.n	80066fa <HAL_ADC_ConfigChannel+0x66e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fafe 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8306 	bne.w	80066dc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d108      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x62>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0e9b      	lsrs	r3, r3, #26
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2201      	movs	r2, #1
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	e016      	b.n	800611c <HAL_ADC_ConfigChannel+0x90>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f6:	fa93 f3a3 	rbit	r3, r3
 80060fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8006106:	2320      	movs	r3, #32
 8006108:	e003      	b.n	8006112 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800610a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800610c:	fab3 f383 	clz	r3, r3
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	69d1      	ldr	r1, [r2, #28]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	430b      	orrs	r3, r1
 8006128:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7ff f97d 	bl	8005436 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fabf 	bl	80056c4 <LL_ADC_REG_IsConversionOngoing>
 8006146:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff facc 	bl	80056ea <LL_ADC_INJ_IsConversionOngoing>
 8006152:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 80b3 	bne.w	80062c2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800615c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 80af 	bne.w	80062c2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	461a      	mov	r2, r3
 8006172:	f7ff f9b2 	bl	80054da <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006176:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <HAL_ADC_ConfigChannel+0x294>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006182:	d10b      	bne.n	800619c <HAL_ADC_ConfigChannel+0x110>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	e01d      	b.n	80061d8 <HAL_ADC_ConfigChannel+0x14c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <HAL_ADC_ConfigChannel+0x136>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	e00a      	b.n	80061d8 <HAL_ADC_ConfigChannel+0x14c>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d027      	beq.n	8006232 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6919      	ldr	r1, [r3, #16]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f0:	f7ff f8ba 	bl	8005368 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6919      	ldr	r1, [r3, #16]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	7e5b      	ldrb	r3, [r3, #25]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d102      	bne.n	800620a <HAL_ADC_ConfigChannel+0x17e>
 8006204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006208:	e000      	b.n	800620c <HAL_ADC_ConfigChannel+0x180>
 800620a:	2300      	movs	r3, #0
 800620c:	461a      	mov	r2, r3
 800620e:	f7ff f8e4 	bl	80053da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6919      	ldr	r1, [r3, #16]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	7e1b      	ldrb	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d102      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x19c>
 8006222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006226:	e000      	b.n	800622a <HAL_ADC_ConfigChannel+0x19e>
 8006228:	2300      	movs	r3, #0
 800622a:	461a      	mov	r2, r3
 800622c:	f7ff f8bc 	bl	80053a8 <LL_ADC_SetDataRightShift>
 8006230:	e047      	b.n	80062c2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	069b      	lsls	r3, r3, #26
 8006242:	429a      	cmp	r2, r3
 8006244:	d107      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006254:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	069b      	lsls	r3, r3, #26
 8006266:	429a      	cmp	r2, r3
 8006268:	d107      	bne.n	800627a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	069b      	lsls	r3, r3, #26
 800628a:	429a      	cmp	r2, r3
 800628c:	d107      	bne.n	800629e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800629c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	069b      	lsls	r3, r3, #26
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d107      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f9d4 	bl	8005674 <LL_ADC_IsEnabled>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 820d 	bne.w	80066ee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	6819      	ldr	r1, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	461a      	mov	r2, r3
 80062e2:	f7ff f925 	bl	8005530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <HAL_ADC_ConfigChannel+0x290>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	f040 8133 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d110      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x298>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0e9b      	lsrs	r3, r3, #26
 8006308:	3301      	adds	r3, #1
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b09      	cmp	r3, #9
 8006310:	bf94      	ite	ls
 8006312:	2301      	movls	r3, #1
 8006314:	2300      	movhi	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	e01e      	b.n	8006358 <HAL_ADC_ConfigChannel+0x2cc>
 800631a:	bf00      	nop
 800631c:	47ff0000 	.word	0x47ff0000
 8006320:	5c001000 	.word	0x5c001000
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632c:	fa93 f3a3 	rbit	r3, r3
 8006330:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006334:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800633c:	2320      	movs	r3, #32
 800633e:	e003      	b.n	8006348 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006342:	fab3 f383 	clz	r3, r3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3301      	adds	r3, #1
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2b09      	cmp	r3, #9
 8006350:	bf94      	ite	ls
 8006352:	2301      	movls	r3, #1
 8006354:	2300      	movhi	r3, #0
 8006356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006358:	2b00      	cmp	r3, #0
 800635a:	d079      	beq.n	8006450 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x2ec>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	0e9b      	lsrs	r3, r3, #26
 800636e:	3301      	adds	r3, #1
 8006370:	069b      	lsls	r3, r3, #26
 8006372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006376:	e015      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x318>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006380:	fa93 f3a3 	rbit	r3, r3
 8006384:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8006390:	2320      	movs	r3, #32
 8006392:	e003      	b.n	800639c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	fab3 f383 	clz	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	3301      	adds	r3, #1
 800639e:	069b      	lsls	r3, r3, #26
 80063a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <HAL_ADC_ConfigChannel+0x338>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	0e9b      	lsrs	r3, r3, #26
 80063b6:	3301      	adds	r3, #1
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	e017      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x368>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80063dc:	2320      	movs	r3, #32
 80063de:	e003      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80063e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	3301      	adds	r3, #1
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2101      	movs	r1, #1
 80063f0:	fa01 f303 	lsl.w	r3, r1, r3
 80063f4:	ea42 0103 	orr.w	r1, r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <HAL_ADC_ConfigChannel+0x38e>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	0e9b      	lsrs	r3, r3, #26
 800640a:	3301      	adds	r3, #1
 800640c:	f003 021f 	and.w	r2, r3, #31
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	e018      	b.n	800644c <HAL_ADC_ConfigChannel+0x3c0>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	fa93 f3a3 	rbit	r3, r3
 8006426:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8006432:	2320      	movs	r3, #32
 8006434:	e003      	b.n	800643e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	fab3 f383 	clz	r3, r3
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3301      	adds	r3, #1
 8006440:	f003 021f 	and.w	r2, r3, #31
 8006444:	4613      	mov	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4413      	add	r3, r2
 800644a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800644c:	430b      	orrs	r3, r1
 800644e:	e07e      	b.n	800654e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006458:	2b00      	cmp	r3, #0
 800645a:	d107      	bne.n	800646c <HAL_ADC_ConfigChannel+0x3e0>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0e9b      	lsrs	r3, r3, #26
 8006462:	3301      	adds	r3, #1
 8006464:	069b      	lsls	r3, r3, #26
 8006466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800646a:	e015      	b.n	8006498 <HAL_ADC_ConfigChannel+0x40c>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	fa93 f3a3 	rbit	r3, r3
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006484:	2320      	movs	r3, #32
 8006486:	e003      	b.n	8006490 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	fab3 f383 	clz	r3, r3
 800648e:	b2db      	uxtb	r3, r3
 8006490:	3301      	adds	r3, #1
 8006492:	069b      	lsls	r3, r3, #26
 8006494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x42c>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	0e9b      	lsrs	r3, r3, #26
 80064aa:	3301      	adds	r3, #1
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	e017      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x45c>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	61bb      	str	r3, [r7, #24]
  return result;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80064d0:	2320      	movs	r3, #32
 80064d2:	e003      	b.n	80064dc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2101      	movs	r1, #1
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	ea42 0103 	orr.w	r1, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <HAL_ADC_ConfigChannel+0x488>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	0e9b      	lsrs	r3, r3, #26
 80064fe:	3301      	adds	r3, #1
 8006500:	f003 021f 	and.w	r2, r3, #31
 8006504:	4613      	mov	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4413      	add	r3, r2
 800650a:	3b1e      	subs	r3, #30
 800650c:	051b      	lsls	r3, r3, #20
 800650e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006512:	e01b      	b.n	800654c <HAL_ADC_ConfigChannel+0x4c0>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	fa93 f3a3 	rbit	r3, r3
 8006520:	60fb      	str	r3, [r7, #12]
  return result;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800652c:	2320      	movs	r3, #32
 800652e:	e003      	b.n	8006538 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	fab3 f383 	clz	r3, r3
 8006536:	b2db      	uxtb	r3, r3
 8006538:	3301      	adds	r3, #1
 800653a:	f003 021f 	and.w	r2, r3, #31
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	3b1e      	subs	r3, #30
 8006546:	051b      	lsls	r3, r3, #20
 8006548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800654c:	430b      	orrs	r3, r1
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	6892      	ldr	r2, [r2, #8]
 8006552:	4619      	mov	r1, r3
 8006554:	f7fe ffc1 	bl	80054da <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f280 80c6 	bge.w	80066ee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a67      	ldr	r2, [pc, #412]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_ADC_ConfigChannel+0x4ea>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a65      	ldr	r2, [pc, #404]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d101      	bne.n	800657a <HAL_ADC_ConfigChannel+0x4ee>
 8006576:	4b65      	ldr	r3, [pc, #404]	; (800670c <HAL_ADC_ConfigChannel+0x680>)
 8006578:	e000      	b.n	800657c <HAL_ADC_ConfigChannel+0x4f0>
 800657a:	4b65      	ldr	r3, [pc, #404]	; (8006710 <HAL_ADC_ConfigChannel+0x684>)
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fee5 	bl	800534c <LL_ADC_GetCommonPathInternalCh>
 8006582:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a5e      	ldr	r2, [pc, #376]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_ADC_ConfigChannel+0x50c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a5d      	ldr	r2, [pc, #372]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10e      	bne.n	80065b6 <HAL_ADC_ConfigChannel+0x52a>
 8006598:	485a      	ldr	r0, [pc, #360]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 800659a:	f7ff f86b 	bl	8005674 <LL_ADC_IsEnabled>
 800659e:	4604      	mov	r4, r0
 80065a0:	4859      	ldr	r0, [pc, #356]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 80065a2:	f7ff f867 	bl	8005674 <LL_ADC_IsEnabled>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4323      	orrs	r3, r4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf0c      	ite	eq
 80065ae:	2301      	moveq	r3, #1
 80065b0:	2300      	movne	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e008      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x53c>
 80065b6:	4857      	ldr	r0, [pc, #348]	; (8006714 <HAL_ADC_ConfigChannel+0x688>)
 80065b8:	f7ff f85c 	bl	8005674 <LL_ADC_IsEnabled>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d07d      	beq.n	80066c8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a51      	ldr	r2, [pc, #324]	; (8006718 <HAL_ADC_ConfigChannel+0x68c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d130      	bne.n	8006638 <HAL_ADC_ConfigChannel+0x5ac>
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d12b      	bne.n	8006638 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a4b      	ldr	r2, [pc, #300]	; (8006714 <HAL_ADC_ConfigChannel+0x688>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f040 8081 	bne.w	80066ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a44      	ldr	r2, [pc, #272]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_ADC_ConfigChannel+0x574>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a43      	ldr	r2, [pc, #268]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d101      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x578>
 8006600:	4a42      	ldr	r2, [pc, #264]	; (800670c <HAL_ADC_ConfigChannel+0x680>)
 8006602:	e000      	b.n	8006606 <HAL_ADC_ConfigChannel+0x57a>
 8006604:	4a42      	ldr	r2, [pc, #264]	; (8006710 <HAL_ADC_ConfigChannel+0x684>)
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	f7fe fe89 	bl	8005326 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006614:	4b41      	ldr	r3, [pc, #260]	; (800671c <HAL_ADC_ConfigChannel+0x690>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	4a41      	ldr	r2, [pc, #260]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	099b      	lsrs	r3, r3, #6
 8006622:	3301      	adds	r3, #1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006628:	e002      	b.n	8006630 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3b01      	subs	r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f9      	bne.n	800662a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006636:	e05a      	b.n	80066ee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a39      	ldr	r2, [pc, #228]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d11e      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x5f4>
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d119      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_ADC_ConfigChannel+0x688>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d14b      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_ADC_ConfigChannel+0x5de>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a28      	ldr	r2, [pc, #160]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d101      	bne.n	800666e <HAL_ADC_ConfigChannel+0x5e2>
 800666a:	4a28      	ldr	r2, [pc, #160]	; (800670c <HAL_ADC_ConfigChannel+0x680>)
 800666c:	e000      	b.n	8006670 <HAL_ADC_ConfigChannel+0x5e4>
 800666e:	4a28      	ldr	r2, [pc, #160]	; (8006710 <HAL_ADC_ConfigChannel+0x684>)
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fe fe54 	bl	8005326 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800667e:	e036      	b.n	80066ee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a28      	ldr	r2, [pc, #160]	; (8006728 <HAL_ADC_ConfigChannel+0x69c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d131      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x662>
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d12c      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <HAL_ADC_ConfigChannel+0x688>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d127      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <HAL_ADC_ConfigChannel+0x678>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_ADC_ConfigChannel+0x626>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a16      	ldr	r2, [pc, #88]	; (8006708 <HAL_ADC_ConfigChannel+0x67c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_ADC_ConfigChannel+0x62a>
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_ADC_ConfigChannel+0x680>)
 80066b4:	e000      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x62c>
 80066b6:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_ADC_ConfigChannel+0x684>)
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fe fe30 	bl	8005326 <LL_ADC_SetCommonPathInternalCh>
 80066c6:	e012      	b.n	80066ee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066da:	e008      	b.n	80066ee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80066f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3784      	adds	r7, #132	; 0x84
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	40022000 	.word	0x40022000
 8006708:	40022100 	.word	0x40022100
 800670c:	40022300 	.word	0x40022300
 8006710:	58026300 	.word	0x58026300
 8006714:	58026000 	.word	0x58026000
 8006718:	cb840000 	.word	0xcb840000
 800671c:	20000018 	.word	0x20000018
 8006720:	053e2d63 	.word	0x053e2d63
 8006724:	c7520000 	.word	0xc7520000
 8006728:	cfb80000 	.word	0xcfb80000

0800672c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe ff9b 	bl	8005674 <LL_ADC_IsEnabled>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d16e      	bne.n	8006822 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <ADC_Enable+0x100>)
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006756:	f043 0210 	orr.w	r2, r3, #16
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	f043 0201 	orr.w	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e05a      	b.n	8006824 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe ff6a 	bl	800564c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006778:	f7fe fd72 	bl	8005260 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2b      	ldr	r2, [pc, #172]	; (8006830 <ADC_Enable+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <ADC_Enable+0x66>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a29      	ldr	r2, [pc, #164]	; (8006834 <ADC_Enable+0x108>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <ADC_Enable+0x6a>
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <ADC_Enable+0x10c>)
 8006794:	e000      	b.n	8006798 <ADC_Enable+0x6c>
 8006796:	4b29      	ldr	r3, [pc, #164]	; (800683c <ADC_Enable+0x110>)
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe feed 	bl	8005578 <LL_ADC_GetMultimode>
 800679e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a23      	ldr	r2, [pc, #140]	; (8006834 <ADC_Enable+0x108>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d002      	beq.n	80067b0 <ADC_Enable+0x84>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	e000      	b.n	80067b2 <ADC_Enable+0x86>
 80067b0:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <ADC_Enable+0x104>)
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02c      	beq.n	8006814 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d130      	bne.n	8006822 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067c0:	e028      	b.n	8006814 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe ff54 	bl	8005674 <LL_ADC_IsEnabled>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe ff38 	bl	800564c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067dc:	f7fe fd40 	bl	8005260 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d914      	bls.n	8006814 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d00d      	beq.n	8006814 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f043 0210 	orr.w	r2, r3, #16
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	f043 0201 	orr.w	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e007      	b.n	8006824 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d1cf      	bne.n	80067c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	8000003f 	.word	0x8000003f
 8006830:	40022000 	.word	0x40022000
 8006834:	40022100 	.word	0x40022100
 8006838:	40022300 	.word	0x40022300
 800683c:	58026300 	.word	0x58026300

08006840 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006856:	2b00      	cmp	r3, #0
 8006858:	d14b      	bne.n	80068f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d021      	beq.n	80068b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fdc9 	bl	8005410 <LL_ADC_REG_IsTriggerSourceSWStart>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d032      	beq.n	80068ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d12b      	bne.n	80068ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11f      	bne.n	80068ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
 80068b6:	e018      	b.n	80068ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d111      	bne.n	80068ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d105      	bne.n	80068ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fc fc54 	bl	8003198 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80068f0:	e00e      	b.n	8006910 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff fbba 	bl	8006078 <HAL_ADC_ErrorCallback>
}
 8006904:	e004      	b.n	8006910 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fb92 	bl	8006050 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f043 0204 	orr.w	r2, r3, #4
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff fb8c 	bl	8006078 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a7a      	ldr	r2, [pc, #488]	; (8006b60 <ADC_ConfigureBoostMode+0x1f8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <ADC_ConfigureBoostMode+0x1c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a79      	ldr	r2, [pc, #484]	; (8006b64 <ADC_ConfigureBoostMode+0x1fc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d109      	bne.n	8006998 <ADC_ConfigureBoostMode+0x30>
 8006984:	4b78      	ldr	r3, [pc, #480]	; (8006b68 <ADC_ConfigureBoostMode+0x200>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf14      	ite	ne
 8006990:	2301      	movne	r3, #1
 8006992:	2300      	moveq	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	e008      	b.n	80069aa <ADC_ConfigureBoostMode+0x42>
 8006998:	4b74      	ldr	r3, [pc, #464]	; (8006b6c <ADC_ConfigureBoostMode+0x204>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01c      	beq.n	80069e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80069ae:	f005 ff83 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 80069b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069bc:	d010      	beq.n	80069e0 <ADC_ConfigureBoostMode+0x78>
 80069be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069c2:	d873      	bhi.n	8006aac <ADC_ConfigureBoostMode+0x144>
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c8:	d002      	beq.n	80069d0 <ADC_ConfigureBoostMode+0x68>
 80069ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ce:	d16d      	bne.n	8006aac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	60fb      	str	r3, [r7, #12]
        break;
 80069de:	e068      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	60fb      	str	r3, [r7, #12]
        break;
 80069e6:	e064      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80069e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	f007 f9c8 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 80069f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80069fe:	d051      	beq.n	8006aa4 <ADC_ConfigureBoostMode+0x13c>
 8006a00:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a04:	d854      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a06:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a0a:	d047      	beq.n	8006a9c <ADC_ConfigureBoostMode+0x134>
 8006a0c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a10:	d84e      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a12:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a16:	d03d      	beq.n	8006a94 <ADC_ConfigureBoostMode+0x12c>
 8006a18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a1c:	d848      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a22:	d033      	beq.n	8006a8c <ADC_ConfigureBoostMode+0x124>
 8006a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a28:	d842      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a2a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a2e:	d029      	beq.n	8006a84 <ADC_ConfigureBoostMode+0x11c>
 8006a30:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a34:	d83c      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a36:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a3a:	d01a      	beq.n	8006a72 <ADC_ConfigureBoostMode+0x10a>
 8006a3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a40:	d836      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a42:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006a46:	d014      	beq.n	8006a72 <ADC_ConfigureBoostMode+0x10a>
 8006a48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006a4c:	d830      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d00e      	beq.n	8006a72 <ADC_ConfigureBoostMode+0x10a>
 8006a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a58:	d82a      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a5e:	d008      	beq.n	8006a72 <ADC_ConfigureBoostMode+0x10a>
 8006a60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a64:	d824      	bhi.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
 8006a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a6a:	d002      	beq.n	8006a72 <ADC_ConfigureBoostMode+0x10a>
 8006a6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a70:	d11e      	bne.n	8006ab0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	0c9b      	lsrs	r3, r3, #18
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	60fb      	str	r3, [r7, #12]
        break;
 8006a82:	e016      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	60fb      	str	r3, [r7, #12]
        break;
 8006a8a:	e012      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	60fb      	str	r3, [r7, #12]
        break;
 8006a92:	e00e      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	099b      	lsrs	r3, r3, #6
 8006a98:	60fb      	str	r3, [r7, #12]
        break;
 8006a9a:	e00a      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	60fb      	str	r3, [r7, #12]
        break;
 8006aa2:	e006      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	60fb      	str	r3, [r7, #12]
        break;
 8006aaa:	e002      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006aac:	bf00      	nop
 8006aae:	e000      	b.n	8006ab2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006ab0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006ab2:	f7fe fc05 	bl	80052c0 <HAL_GetREVID>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d815      	bhi.n	8006aec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <ADC_ConfigureBoostMode+0x208>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d908      	bls.n	8006ada <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006ad8:	e03e      	b.n	8006b58 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae8:	609a      	str	r2, [r3, #8]
}
 8006aea:	e035      	b.n	8006b58 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a1f      	ldr	r2, [pc, #124]	; (8006b74 <ADC_ConfigureBoostMode+0x20c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d808      	bhi.n	8006b0c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b08:	609a      	str	r2, [r3, #8]
}
 8006b0a:	e025      	b.n	8006b58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <ADC_ConfigureBoostMode+0x210>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d80a      	bhi.n	8006b2a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b26:	609a      	str	r2, [r3, #8]
}
 8006b28:	e016      	b.n	8006b58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <ADC_ConfigureBoostMode+0x214>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d80a      	bhi.n	8006b48 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	609a      	str	r2, [r3, #8]
}
 8006b46:	e007      	b.n	8006b58 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40022100 	.word	0x40022100
 8006b68:	40022300 	.word	0x40022300
 8006b6c:	58026300 	.word	0x58026300
 8006b70:	01312d00 	.word	0x01312d00
 8006b74:	005f5e10 	.word	0x005f5e10
 8006b78:	00bebc20 	.word	0x00bebc20
 8006b7c:	017d7840 	.word	0x017d7840

08006b80 <LL_ADC_IsEnabled>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <LL_ADC_IsEnabled+0x18>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <LL_ADC_IsEnabled+0x1a>
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d101      	bne.n	8006bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b09f      	sub	sp, #124	; 0x7c
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e0be      	b.n	8006dcc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006c56:	2300      	movs	r3, #0
 8006c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5c      	ldr	r2, [pc, #368]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d102      	bne.n	8006c6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c68:	4b5b      	ldr	r3, [pc, #364]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c6a:	60bb      	str	r3, [r7, #8]
 8006c6c:	e001      	b.n	8006c72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10b      	bne.n	8006c90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7c:	f043 0220 	orr.w	r2, r3, #32
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e09d      	b.n	8006dcc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff87 	bl	8006ba6 <LL_ADC_REG_IsConversionOngoing>
 8006c98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff ff81 	bl	8006ba6 <LL_ADC_REG_IsConversionOngoing>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d17f      	bne.n	8006daa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d17c      	bne.n	8006daa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a47      	ldr	r2, [pc, #284]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a46      	ldr	r2, [pc, #280]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d101      	bne.n	8006cc8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006cc4:	4b45      	ldr	r3, [pc, #276]	; (8006ddc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006cc6:	e000      	b.n	8006cca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006cc8:	4b45      	ldr	r3, [pc, #276]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006cca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d039      	beq.n	8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a3a      	ldr	r2, [pc, #232]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a38      	ldr	r2, [pc, #224]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10e      	bne.n	8006d18 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006cfa:	4836      	ldr	r0, [pc, #216]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cfc:	f7ff ff40 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d00:	4604      	mov	r4, r0
 8006d02:	4835      	ldr	r0, [pc, #212]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d04:	f7ff ff3c 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4323      	orrs	r3, r4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e008      	b.n	8006d2a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006d18:	4832      	ldr	r0, [pc, #200]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d1a:	f7ff ff31 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d047      	beq.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	6811      	ldr	r1, [r2, #0]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	431a      	orrs	r2, r3
 8006d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d46:	e03a      	b.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10e      	bne.n	8006d86 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006d68:	481a      	ldr	r0, [pc, #104]	; (8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d6a:	f7ff ff09 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4819      	ldr	r0, [pc, #100]	; (8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d72:	f7ff ff05 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4323      	orrs	r3, r4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf0c      	ite	eq
 8006d7e:	2301      	moveq	r3, #1
 8006d80:	2300      	movne	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	e008      	b.n	8006d98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006d86:	4817      	ldr	r0, [pc, #92]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d88:	f7ff fefa 	bl	8006b80 <LL_ADC_IsEnabled>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006da6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006da8:	e009      	b.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006dbc:	e000      	b.n	8006dc0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	377c      	adds	r7, #124	; 0x7c
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd90      	pop	{r4, r7, pc}
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40022100 	.word	0x40022100
 8006ddc:	40022300 	.word	0x40022300
 8006de0:	58026300 	.word	0x58026300
 8006de4:	58026000 	.word	0x58026000
 8006de8:	fffff0e0 	.word	0xfffff0e0

08006dec <__NVIC_SetPriorityGrouping>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <__NVIC_SetPriorityGrouping+0x40>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <__NVIC_SetPriorityGrouping+0x44>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1a:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <__NVIC_SetPriorityGrouping+0x40>)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	60d3      	str	r3, [r2, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000ed00 	.word	0xe000ed00
 8006e30:	05fa0000 	.word	0x05fa0000

08006e34 <__NVIC_GetPriorityGrouping>:
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <__NVIC_GetPriorityGrouping+0x18>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f003 0307 	and.w	r3, r3, #7
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00

08006e50 <__NVIC_EnableIRQ>:
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db0b      	blt.n	8006e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	f003 021f 	and.w	r2, r3, #31
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <__NVIC_EnableIRQ+0x38>)
 8006e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2001      	movs	r0, #1
 8006e72:	fa00 f202 	lsl.w	r2, r0, r2
 8006e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000e100 	.word	0xe000e100

08006e8c <__NVIC_SetPriority>:
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db0a      	blt.n	8006eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	490c      	ldr	r1, [pc, #48]	; (8006ed8 <__NVIC_SetPriority+0x4c>)
 8006ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eaa:	0112      	lsls	r2, r2, #4
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	440b      	add	r3, r1
 8006eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006eb4:	e00a      	b.n	8006ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	4908      	ldr	r1, [pc, #32]	; (8006edc <__NVIC_SetPriority+0x50>)
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	0112      	lsls	r2, r2, #4
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	440b      	add	r3, r1
 8006eca:	761a      	strb	r2, [r3, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	e000e100 	.word	0xe000e100
 8006edc:	e000ed00 	.word	0xe000ed00

08006ee0 <NVIC_EncodePriority>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b089      	sub	sp, #36	; 0x24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f1c3 0307 	rsb	r3, r3, #7
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	bf28      	it	cs
 8006efe:	2304      	movcs	r3, #4
 8006f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d902      	bls.n	8006f10 <NVIC_EncodePriority+0x30>
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3b03      	subs	r3, #3
 8006f0e:	e000      	b.n	8006f12 <NVIC_EncodePriority+0x32>
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	401a      	ands	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	43d9      	mvns	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f38:	4313      	orrs	r3, r2
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3724      	adds	r7, #36	; 0x24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f58:	d301      	bcc.n	8006f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e00f      	b.n	8006f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f5e:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <SysTick_Config+0x40>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f66:	210f      	movs	r1, #15
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6c:	f7ff ff8e 	bl	8006e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <SysTick_Config+0x40>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f76:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <SysTick_Config+0x40>)
 8006f78:	2207      	movs	r2, #7
 8006f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	e000e010 	.word	0xe000e010

08006f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff ff29 	bl	8006dec <__NVIC_SetPriorityGrouping>
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fb0:	f7ff ff40 	bl	8006e34 <__NVIC_GetPriorityGrouping>
 8006fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	6978      	ldr	r0, [r7, #20]
 8006fbc:	f7ff ff90 	bl	8006ee0 <NVIC_EncodePriority>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff ff5f 	bl	8006e8c <__NVIC_SetPriority>
}
 8006fce:	bf00      	nop
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff ff33 	bl	8006e50 <__NVIC_EnableIRQ>
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ffa4 	bl	8006f48 <SysTick_Config>
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007010:	f3bf 8f5f 	dmb	sy
}
 8007014:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <HAL_MPU_Disable+0x28>)
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	4a06      	ldr	r2, [pc, #24]	; (8007034 <HAL_MPU_Disable+0x28>)
 800701c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007020:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_MPU_Disable+0x2c>)
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	e000ed00 	.word	0xe000ed00
 8007038:	e000ed90 	.word	0xe000ed90

0800703c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007044:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <HAL_MPU_Enable+0x38>)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <HAL_MPU_Enable+0x3c>)
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	4a09      	ldr	r2, [pc, #36]	; (8007078 <HAL_MPU_Enable+0x3c>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800705a:	f3bf 8f4f 	dsb	sy
}
 800705e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007060:	f3bf 8f6f 	isb	sy
}
 8007064:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	e000ed90 	.word	0xe000ed90
 8007078:	e000ed00 	.word	0xe000ed00

0800707c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	785a      	ldrb	r2, [r3, #1]
 8007088:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <HAL_MPU_ConfigRegion+0x84>)
 800708a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d029      	beq.n	80070e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8007094:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <HAL_MPU_ConfigRegion+0x84>)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7b1b      	ldrb	r3, [r3, #12]
 80070a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7adb      	ldrb	r3, [r3, #11]
 80070a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7a9b      	ldrb	r3, [r3, #10]
 80070ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7b5b      	ldrb	r3, [r3, #13]
 80070b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7b9b      	ldrb	r3, [r3, #14]
 80070be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7bdb      	ldrb	r3, [r3, #15]
 80070c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7a5b      	ldrb	r3, [r3, #9]
 80070ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7a1b      	ldrb	r3, [r3, #8]
 80070d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070e0:	4a07      	ldr	r2, [pc, #28]	; (8007100 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80070e6:	e005      	b.n	80070f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_MPU_ConfigRegion+0x84>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <HAL_MPU_ConfigRegion+0x84>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	611a      	str	r2, [r3, #16]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000ed90 	.word	0xe000ed90

08007104 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800710c:	f7fe f8a8 	bl	8005260 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e316      	b.n	800774a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a66      	ldr	r2, [pc, #408]	; (80072bc <HAL_DMA_Init+0x1b8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d04a      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <HAL_DMA_Init+0x1bc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d045      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a63      	ldr	r2, [pc, #396]	; (80072c4 <HAL_DMA_Init+0x1c0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d040      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a62      	ldr	r2, [pc, #392]	; (80072c8 <HAL_DMA_Init+0x1c4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d03b      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a60      	ldr	r2, [pc, #384]	; (80072cc <HAL_DMA_Init+0x1c8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d036      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a5f      	ldr	r2, [pc, #380]	; (80072d0 <HAL_DMA_Init+0x1cc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d031      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5d      	ldr	r2, [pc, #372]	; (80072d4 <HAL_DMA_Init+0x1d0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02c      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_DMA_Init+0x1d4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d027      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5a      	ldr	r2, [pc, #360]	; (80072dc <HAL_DMA_Init+0x1d8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d022      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a59      	ldr	r2, [pc, #356]	; (80072e0 <HAL_DMA_Init+0x1dc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d01d      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a57      	ldr	r2, [pc, #348]	; (80072e4 <HAL_DMA_Init+0x1e0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d018      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a56      	ldr	r2, [pc, #344]	; (80072e8 <HAL_DMA_Init+0x1e4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a54      	ldr	r2, [pc, #336]	; (80072ec <HAL_DMA_Init+0x1e8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00e      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a53      	ldr	r2, [pc, #332]	; (80072f0 <HAL_DMA_Init+0x1ec>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d009      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a51      	ldr	r2, [pc, #324]	; (80072f4 <HAL_DMA_Init+0x1f0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_DMA_Init+0xb8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a50      	ldr	r2, [pc, #320]	; (80072f8 <HAL_DMA_Init+0x1f4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d101      	bne.n	80071c0 <HAL_DMA_Init+0xbc>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <HAL_DMA_Init+0xbe>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 813b 	beq.w	800743e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a37      	ldr	r2, [pc, #220]	; (80072bc <HAL_DMA_Init+0x1b8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_Init+0x174>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a36      	ldr	r2, [pc, #216]	; (80072c0 <HAL_DMA_Init+0x1bc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_Init+0x174>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a34      	ldr	r2, [pc, #208]	; (80072c4 <HAL_DMA_Init+0x1c0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_Init+0x174>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a33      	ldr	r2, [pc, #204]	; (80072c8 <HAL_DMA_Init+0x1c4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a31      	ldr	r2, [pc, #196]	; (80072cc <HAL_DMA_Init+0x1c8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_Init+0x174>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a30      	ldr	r2, [pc, #192]	; (80072d0 <HAL_DMA_Init+0x1cc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2e      	ldr	r2, [pc, #184]	; (80072d4 <HAL_DMA_Init+0x1d0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_Init+0x174>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2d      	ldr	r2, [pc, #180]	; (80072d8 <HAL_DMA_Init+0x1d4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2b      	ldr	r2, [pc, #172]	; (80072dc <HAL_DMA_Init+0x1d8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <HAL_DMA_Init+0x1dc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_Init+0x174>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a28      	ldr	r2, [pc, #160]	; (80072e4 <HAL_DMA_Init+0x1e0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a27      	ldr	r2, [pc, #156]	; (80072e8 <HAL_DMA_Init+0x1e4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a25      	ldr	r2, [pc, #148]	; (80072ec <HAL_DMA_Init+0x1e8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_Init+0x174>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <HAL_DMA_Init+0x1ec>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_Init+0x174>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <HAL_DMA_Init+0x1f0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_Init+0x174>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <HAL_DMA_Init+0x1f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d108      	bne.n	800728a <HAL_DMA_Init+0x186>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e007      	b.n	800729a <HAL_DMA_Init+0x196>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800729a:	e02f      	b.n	80072fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800729c:	f7fd ffe0 	bl	8005260 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d928      	bls.n	80072fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2203      	movs	r2, #3
 80072b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e246      	b.n	800774a <HAL_DMA_Init+0x646>
 80072bc:	40020010 	.word	0x40020010
 80072c0:	40020028 	.word	0x40020028
 80072c4:	40020040 	.word	0x40020040
 80072c8:	40020058 	.word	0x40020058
 80072cc:	40020070 	.word	0x40020070
 80072d0:	40020088 	.word	0x40020088
 80072d4:	400200a0 	.word	0x400200a0
 80072d8:	400200b8 	.word	0x400200b8
 80072dc:	40020410 	.word	0x40020410
 80072e0:	40020428 	.word	0x40020428
 80072e4:	40020440 	.word	0x40020440
 80072e8:	40020458 	.word	0x40020458
 80072ec:	40020470 	.word	0x40020470
 80072f0:	40020488 	.word	0x40020488
 80072f4:	400204a0 	.word	0x400204a0
 80072f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1c8      	bne.n	800729c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4b83      	ldr	r3, [pc, #524]	; (8007524 <HAL_DMA_Init+0x420>)
 8007316:	4013      	ands	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007322:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b04      	cmp	r3, #4
 800734e:	d107      	bne.n	8007360 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	4313      	orrs	r3, r2
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007360:	4b71      	ldr	r3, [pc, #452]	; (8007528 <HAL_DMA_Init+0x424>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b71      	ldr	r3, [pc, #452]	; (800752c <HAL_DMA_Init+0x428>)
 8007366:	4013      	ands	r3, r2
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736c:	d328      	bcc.n	80073c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b28      	cmp	r3, #40	; 0x28
 8007374:	d903      	bls.n	800737e <HAL_DMA_Init+0x27a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b2e      	cmp	r3, #46	; 0x2e
 800737c:	d917      	bls.n	80073ae <HAL_DMA_Init+0x2aa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b3e      	cmp	r3, #62	; 0x3e
 8007384:	d903      	bls.n	800738e <HAL_DMA_Init+0x28a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b42      	cmp	r3, #66	; 0x42
 800738c:	d90f      	bls.n	80073ae <HAL_DMA_Init+0x2aa>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b46      	cmp	r3, #70	; 0x46
 8007394:	d903      	bls.n	800739e <HAL_DMA_Init+0x29a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b48      	cmp	r3, #72	; 0x48
 800739c:	d907      	bls.n	80073ae <HAL_DMA_Init+0x2aa>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b4e      	cmp	r3, #78	; 0x4e
 80073a4:	d905      	bls.n	80073b2 <HAL_DMA_Init+0x2ae>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b52      	cmp	r3, #82	; 0x52
 80073ac:	d801      	bhi.n	80073b2 <HAL_DMA_Init+0x2ae>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <HAL_DMA_Init+0x2b0>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0307 	bic.w	r3, r3, #7
 80073d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d117      	bne.n	800741a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fddb 	bl	8008fb8 <DMA_CheckFifoParam>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e197      	b.n	800774a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fd16 	bl	8008e54 <DMA_CalcBaseAndBitshift>
 8007428:	4603      	mov	r3, r0
 800742a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	223f      	movs	r2, #63	; 0x3f
 8007436:	409a      	lsls	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	e0cd      	b.n	80075da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a3b      	ldr	r2, [pc, #236]	; (8007530 <HAL_DMA_Init+0x42c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d022      	beq.n	800748e <HAL_DMA_Init+0x38a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a39      	ldr	r2, [pc, #228]	; (8007534 <HAL_DMA_Init+0x430>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d01d      	beq.n	800748e <HAL_DMA_Init+0x38a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a38      	ldr	r2, [pc, #224]	; (8007538 <HAL_DMA_Init+0x434>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d018      	beq.n	800748e <HAL_DMA_Init+0x38a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a36      	ldr	r2, [pc, #216]	; (800753c <HAL_DMA_Init+0x438>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <HAL_DMA_Init+0x38a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a35      	ldr	r2, [pc, #212]	; (8007540 <HAL_DMA_Init+0x43c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_DMA_Init+0x38a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a33      	ldr	r2, [pc, #204]	; (8007544 <HAL_DMA_Init+0x440>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_DMA_Init+0x38a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a32      	ldr	r2, [pc, #200]	; (8007548 <HAL_DMA_Init+0x444>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_DMA_Init+0x38a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a30      	ldr	r2, [pc, #192]	; (800754c <HAL_DMA_Init+0x448>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d101      	bne.n	8007492 <HAL_DMA_Init+0x38e>
 800748e:	2301      	movs	r3, #1
 8007490:	e000      	b.n	8007494 <HAL_DMA_Init+0x390>
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8097 	beq.w	80075c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a24      	ldr	r2, [pc, #144]	; (8007530 <HAL_DMA_Init+0x42c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d021      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a22      	ldr	r2, [pc, #136]	; (8007534 <HAL_DMA_Init+0x430>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01c      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_DMA_Init+0x434>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d017      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1f      	ldr	r2, [pc, #124]	; (800753c <HAL_DMA_Init+0x438>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d012      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_DMA_Init+0x43c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00d      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_DMA_Init+0x440>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d008      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_DMA_Init+0x444>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <HAL_DMA_Init+0x3e4>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_DMA_Init+0x448>)
 80074e6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <HAL_DMA_Init+0x44c>)
 8007504:	4013      	ands	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d021      	beq.n	8007554 <HAL_DMA_Init+0x450>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d102      	bne.n	800751e <HAL_DMA_Init+0x41a>
 8007518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800751c:	e01b      	b.n	8007556 <HAL_DMA_Init+0x452>
 800751e:	2300      	movs	r3, #0
 8007520:	e019      	b.n	8007556 <HAL_DMA_Init+0x452>
 8007522:	bf00      	nop
 8007524:	fe10803f 	.word	0xfe10803f
 8007528:	5c001000 	.word	0x5c001000
 800752c:	ffff0000 	.word	0xffff0000
 8007530:	58025408 	.word	0x58025408
 8007534:	5802541c 	.word	0x5802541c
 8007538:	58025430 	.word	0x58025430
 800753c:	58025444 	.word	0x58025444
 8007540:	58025458 	.word	0x58025458
 8007544:	5802546c 	.word	0x5802546c
 8007548:	58025480 	.word	0x58025480
 800754c:	58025494 	.word	0x58025494
 8007550:	fffe000f 	.word	0xfffe000f
 8007554:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68d2      	ldr	r2, [r2, #12]
 800755a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800755c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800756c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800757c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007584:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	4b6e      	ldr	r3, [pc, #440]	; (8007754 <HAL_DMA_Init+0x650>)
 800759c:	4413      	add	r3, r2
 800759e:	4a6e      	ldr	r2, [pc, #440]	; (8007758 <HAL_DMA_Init+0x654>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	009a      	lsls	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fc51 	bl	8008e54 <DMA_CalcBaseAndBitshift>
 80075b2:	4603      	mov	r3, r0
 80075b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	409a      	lsls	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	e008      	b.n	80075da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0b7      	b.n	800774a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a5f      	ldr	r2, [pc, #380]	; (800775c <HAL_DMA_Init+0x658>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d072      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a5d      	ldr	r2, [pc, #372]	; (8007760 <HAL_DMA_Init+0x65c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d06d      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a5c      	ldr	r2, [pc, #368]	; (8007764 <HAL_DMA_Init+0x660>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d068      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5a      	ldr	r2, [pc, #360]	; (8007768 <HAL_DMA_Init+0x664>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d063      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a59      	ldr	r2, [pc, #356]	; (800776c <HAL_DMA_Init+0x668>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d05e      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a57      	ldr	r2, [pc, #348]	; (8007770 <HAL_DMA_Init+0x66c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d059      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a56      	ldr	r2, [pc, #344]	; (8007774 <HAL_DMA_Init+0x670>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d054      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a54      	ldr	r2, [pc, #336]	; (8007778 <HAL_DMA_Init+0x674>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04f      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a53      	ldr	r2, [pc, #332]	; (800777c <HAL_DMA_Init+0x678>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a51      	ldr	r2, [pc, #324]	; (8007780 <HAL_DMA_Init+0x67c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a50      	ldr	r2, [pc, #320]	; (8007784 <HAL_DMA_Init+0x680>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d040      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a4e      	ldr	r2, [pc, #312]	; (8007788 <HAL_DMA_Init+0x684>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d03b      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a4d      	ldr	r2, [pc, #308]	; (800778c <HAL_DMA_Init+0x688>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d036      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a4b      	ldr	r2, [pc, #300]	; (8007790 <HAL_DMA_Init+0x68c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d031      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4a      	ldr	r2, [pc, #296]	; (8007794 <HAL_DMA_Init+0x690>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d02c      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a48      	ldr	r2, [pc, #288]	; (8007798 <HAL_DMA_Init+0x694>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d027      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a47      	ldr	r2, [pc, #284]	; (800779c <HAL_DMA_Init+0x698>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d022      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a45      	ldr	r2, [pc, #276]	; (80077a0 <HAL_DMA_Init+0x69c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a44      	ldr	r2, [pc, #272]	; (80077a4 <HAL_DMA_Init+0x6a0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d018      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a42      	ldr	r2, [pc, #264]	; (80077a8 <HAL_DMA_Init+0x6a4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a41      	ldr	r2, [pc, #260]	; (80077ac <HAL_DMA_Init+0x6a8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a3f      	ldr	r2, [pc, #252]	; (80077b0 <HAL_DMA_Init+0x6ac>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a3e      	ldr	r2, [pc, #248]	; (80077b4 <HAL_DMA_Init+0x6b0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_DMA_Init+0x5c6>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a3c      	ldr	r2, [pc, #240]	; (80077b8 <HAL_DMA_Init+0x6b4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_DMA_Init+0x5ca>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_DMA_Init+0x5cc>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d032      	beq.n	800773a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fceb 	bl	80090b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d102      	bne.n	80076e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d010      	beq.n	8007728 <HAL_DMA_Init+0x624>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b08      	cmp	r3, #8
 800770c:	d80c      	bhi.n	8007728 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fd68 	bl	80091e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	e008      	b.n	800773a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	a7fdabf8 	.word	0xa7fdabf8
 8007758:	cccccccd 	.word	0xcccccccd
 800775c:	40020010 	.word	0x40020010
 8007760:	40020028 	.word	0x40020028
 8007764:	40020040 	.word	0x40020040
 8007768:	40020058 	.word	0x40020058
 800776c:	40020070 	.word	0x40020070
 8007770:	40020088 	.word	0x40020088
 8007774:	400200a0 	.word	0x400200a0
 8007778:	400200b8 	.word	0x400200b8
 800777c:	40020410 	.word	0x40020410
 8007780:	40020428 	.word	0x40020428
 8007784:	40020440 	.word	0x40020440
 8007788:	40020458 	.word	0x40020458
 800778c:	40020470 	.word	0x40020470
 8007790:	40020488 	.word	0x40020488
 8007794:	400204a0 	.word	0x400204a0
 8007798:	400204b8 	.word	0x400204b8
 800779c:	58025408 	.word	0x58025408
 80077a0:	5802541c 	.word	0x5802541c
 80077a4:	58025430 	.word	0x58025430
 80077a8:	58025444 	.word	0x58025444
 80077ac:	58025458 	.word	0x58025458
 80077b0:	5802546c 	.word	0x5802546c
 80077b4:	58025480 	.word	0x58025480
 80077b8:	58025494 	.word	0x58025494

080077bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e226      	b.n	8007c26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_DMA_Start_IT+0x2a>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e21f      	b.n	8007c26 <HAL_DMA_Start_IT+0x46a>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f040 820a 	bne.w	8007c10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a68      	ldr	r2, [pc, #416]	; (80079b0 <HAL_DMA_Start_IT+0x1f4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d04a      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a66      	ldr	r2, [pc, #408]	; (80079b4 <HAL_DMA_Start_IT+0x1f8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d045      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a65      	ldr	r2, [pc, #404]	; (80079b8 <HAL_DMA_Start_IT+0x1fc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d040      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a63      	ldr	r2, [pc, #396]	; (80079bc <HAL_DMA_Start_IT+0x200>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d03b      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a62      	ldr	r2, [pc, #392]	; (80079c0 <HAL_DMA_Start_IT+0x204>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d036      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a60      	ldr	r2, [pc, #384]	; (80079c4 <HAL_DMA_Start_IT+0x208>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d031      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a5f      	ldr	r2, [pc, #380]	; (80079c8 <HAL_DMA_Start_IT+0x20c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d02c      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a5d      	ldr	r2, [pc, #372]	; (80079cc <HAL_DMA_Start_IT+0x210>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d027      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a5c      	ldr	r2, [pc, #368]	; (80079d0 <HAL_DMA_Start_IT+0x214>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d022      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a5a      	ldr	r2, [pc, #360]	; (80079d4 <HAL_DMA_Start_IT+0x218>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01d      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a59      	ldr	r2, [pc, #356]	; (80079d8 <HAL_DMA_Start_IT+0x21c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d018      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a57      	ldr	r2, [pc, #348]	; (80079dc <HAL_DMA_Start_IT+0x220>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a56      	ldr	r2, [pc, #344]	; (80079e0 <HAL_DMA_Start_IT+0x224>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00e      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a54      	ldr	r2, [pc, #336]	; (80079e4 <HAL_DMA_Start_IT+0x228>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d009      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a53      	ldr	r2, [pc, #332]	; (80079e8 <HAL_DMA_Start_IT+0x22c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d004      	beq.n	80078aa <HAL_DMA_Start_IT+0xee>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a51      	ldr	r2, [pc, #324]	; (80079ec <HAL_DMA_Start_IT+0x230>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d108      	bne.n	80078bc <HAL_DMA_Start_IT+0x100>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e007      	b.n	80078cc <HAL_DMA_Start_IT+0x110>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0201 	bic.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 f912 	bl	8008afc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a34      	ldr	r2, [pc, #208]	; (80079b0 <HAL_DMA_Start_IT+0x1f4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d04a      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a33      	ldr	r2, [pc, #204]	; (80079b4 <HAL_DMA_Start_IT+0x1f8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d045      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <HAL_DMA_Start_IT+0x1fc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d040      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a30      	ldr	r2, [pc, #192]	; (80079bc <HAL_DMA_Start_IT+0x200>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d03b      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <HAL_DMA_Start_IT+0x204>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d036      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2d      	ldr	r2, [pc, #180]	; (80079c4 <HAL_DMA_Start_IT+0x208>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d031      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2b      	ldr	r2, [pc, #172]	; (80079c8 <HAL_DMA_Start_IT+0x20c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02c      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2a      	ldr	r2, [pc, #168]	; (80079cc <HAL_DMA_Start_IT+0x210>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d027      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a28      	ldr	r2, [pc, #160]	; (80079d0 <HAL_DMA_Start_IT+0x214>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d022      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <HAL_DMA_Start_IT+0x218>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d01d      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_DMA_Start_IT+0x21c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d018      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a24      	ldr	r2, [pc, #144]	; (80079dc <HAL_DMA_Start_IT+0x220>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d013      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <HAL_DMA_Start_IT+0x224>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <HAL_DMA_Start_IT+0x228>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <HAL_DMA_Start_IT+0x22c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_DMA_Start_IT+0x1bc>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <HAL_DMA_Start_IT+0x230>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_DMA_Start_IT+0x1c0>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <HAL_DMA_Start_IT+0x1c2>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d036      	beq.n	80079f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f023 021e 	bic.w	r2, r3, #30
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0216 	orr.w	r2, r2, #22
 8007994:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03e      	beq.n	8007a1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0208 	orr.w	r2, r2, #8
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e035      	b.n	8007a1c <HAL_DMA_Start_IT+0x260>
 80079b0:	40020010 	.word	0x40020010
 80079b4:	40020028 	.word	0x40020028
 80079b8:	40020040 	.word	0x40020040
 80079bc:	40020058 	.word	0x40020058
 80079c0:	40020070 	.word	0x40020070
 80079c4:	40020088 	.word	0x40020088
 80079c8:	400200a0 	.word	0x400200a0
 80079cc:	400200b8 	.word	0x400200b8
 80079d0:	40020410 	.word	0x40020410
 80079d4:	40020428 	.word	0x40020428
 80079d8:	40020440 	.word	0x40020440
 80079dc:	40020458 	.word	0x40020458
 80079e0:	40020470 	.word	0x40020470
 80079e4:	40020488 	.word	0x40020488
 80079e8:	400204a0 	.word	0x400204a0
 80079ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f023 020e 	bic.w	r2, r3, #14
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 020a 	orr.w	r2, r2, #10
 8007a02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0204 	orr.w	r2, r2, #4
 8007a1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a83      	ldr	r2, [pc, #524]	; (8007c30 <HAL_DMA_Start_IT+0x474>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d072      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a82      	ldr	r2, [pc, #520]	; (8007c34 <HAL_DMA_Start_IT+0x478>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d06d      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a80      	ldr	r2, [pc, #512]	; (8007c38 <HAL_DMA_Start_IT+0x47c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d068      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a7f      	ldr	r2, [pc, #508]	; (8007c3c <HAL_DMA_Start_IT+0x480>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d063      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7d      	ldr	r2, [pc, #500]	; (8007c40 <HAL_DMA_Start_IT+0x484>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d05e      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <HAL_DMA_Start_IT+0x488>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d059      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7a      	ldr	r2, [pc, #488]	; (8007c48 <HAL_DMA_Start_IT+0x48c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d054      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a79      	ldr	r2, [pc, #484]	; (8007c4c <HAL_DMA_Start_IT+0x490>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d04f      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a77      	ldr	r2, [pc, #476]	; (8007c50 <HAL_DMA_Start_IT+0x494>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d04a      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a76      	ldr	r2, [pc, #472]	; (8007c54 <HAL_DMA_Start_IT+0x498>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d045      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a74      	ldr	r2, [pc, #464]	; (8007c58 <HAL_DMA_Start_IT+0x49c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d040      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a73      	ldr	r2, [pc, #460]	; (8007c5c <HAL_DMA_Start_IT+0x4a0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d03b      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a71      	ldr	r2, [pc, #452]	; (8007c60 <HAL_DMA_Start_IT+0x4a4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d036      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a70      	ldr	r2, [pc, #448]	; (8007c64 <HAL_DMA_Start_IT+0x4a8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d031      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a6e      	ldr	r2, [pc, #440]	; (8007c68 <HAL_DMA_Start_IT+0x4ac>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d02c      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6d      	ldr	r2, [pc, #436]	; (8007c6c <HAL_DMA_Start_IT+0x4b0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d027      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6b      	ldr	r2, [pc, #428]	; (8007c70 <HAL_DMA_Start_IT+0x4b4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d022      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6a      	ldr	r2, [pc, #424]	; (8007c74 <HAL_DMA_Start_IT+0x4b8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d01d      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a68      	ldr	r2, [pc, #416]	; (8007c78 <HAL_DMA_Start_IT+0x4bc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a67      	ldr	r2, [pc, #412]	; (8007c7c <HAL_DMA_Start_IT+0x4c0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a65      	ldr	r2, [pc, #404]	; (8007c80 <HAL_DMA_Start_IT+0x4c4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a64      	ldr	r2, [pc, #400]	; (8007c84 <HAL_DMA_Start_IT+0x4c8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a62      	ldr	r2, [pc, #392]	; (8007c88 <HAL_DMA_Start_IT+0x4cc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_DMA_Start_IT+0x350>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a61      	ldr	r2, [pc, #388]	; (8007c8c <HAL_DMA_Start_IT+0x4d0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d101      	bne.n	8007b10 <HAL_DMA_Start_IT+0x354>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <HAL_DMA_Start_IT+0x356>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01a      	beq.n	8007b4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a37      	ldr	r2, [pc, #220]	; (8007c30 <HAL_DMA_Start_IT+0x474>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d04a      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a36      	ldr	r2, [pc, #216]	; (8007c34 <HAL_DMA_Start_IT+0x478>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d045      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a34      	ldr	r2, [pc, #208]	; (8007c38 <HAL_DMA_Start_IT+0x47c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d040      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a33      	ldr	r2, [pc, #204]	; (8007c3c <HAL_DMA_Start_IT+0x480>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d03b      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a31      	ldr	r2, [pc, #196]	; (8007c40 <HAL_DMA_Start_IT+0x484>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d036      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a30      	ldr	r2, [pc, #192]	; (8007c44 <HAL_DMA_Start_IT+0x488>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d031      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a2e      	ldr	r2, [pc, #184]	; (8007c48 <HAL_DMA_Start_IT+0x48c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d02c      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a2d      	ldr	r2, [pc, #180]	; (8007c4c <HAL_DMA_Start_IT+0x490>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d027      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a2b      	ldr	r2, [pc, #172]	; (8007c50 <HAL_DMA_Start_IT+0x494>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d022      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2a      	ldr	r2, [pc, #168]	; (8007c54 <HAL_DMA_Start_IT+0x498>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d01d      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a28      	ldr	r2, [pc, #160]	; (8007c58 <HAL_DMA_Start_IT+0x49c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d018      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a27      	ldr	r2, [pc, #156]	; (8007c5c <HAL_DMA_Start_IT+0x4a0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d013      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a25      	ldr	r2, [pc, #148]	; (8007c60 <HAL_DMA_Start_IT+0x4a4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00e      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <HAL_DMA_Start_IT+0x4a8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d009      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <HAL_DMA_Start_IT+0x4ac>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_DMA_Start_IT+0x430>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <HAL_DMA_Start_IT+0x4b0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d108      	bne.n	8007bfe <HAL_DMA_Start_IT+0x442>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e012      	b.n	8007c24 <HAL_DMA_Start_IT+0x468>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e009      	b.n	8007c24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40020010 	.word	0x40020010
 8007c34:	40020028 	.word	0x40020028
 8007c38:	40020040 	.word	0x40020040
 8007c3c:	40020058 	.word	0x40020058
 8007c40:	40020070 	.word	0x40020070
 8007c44:	40020088 	.word	0x40020088
 8007c48:	400200a0 	.word	0x400200a0
 8007c4c:	400200b8 	.word	0x400200b8
 8007c50:	40020410 	.word	0x40020410
 8007c54:	40020428 	.word	0x40020428
 8007c58:	40020440 	.word	0x40020440
 8007c5c:	40020458 	.word	0x40020458
 8007c60:	40020470 	.word	0x40020470
 8007c64:	40020488 	.word	0x40020488
 8007c68:	400204a0 	.word	0x400204a0
 8007c6c:	400204b8 	.word	0x400204b8
 8007c70:	58025408 	.word	0x58025408
 8007c74:	5802541c 	.word	0x5802541c
 8007c78:	58025430 	.word	0x58025430
 8007c7c:	58025444 	.word	0x58025444
 8007c80:	58025458 	.word	0x58025458
 8007c84:	5802546c 	.word	0x5802546c
 8007c88:	58025480 	.word	0x58025480
 8007c8c:	58025494 	.word	0x58025494

08007c90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c9c:	4b67      	ldr	r3, [pc, #412]	; (8007e3c <HAL_DMA_IRQHandler+0x1ac>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a67      	ldr	r2, [pc, #412]	; (8007e40 <HAL_DMA_IRQHandler+0x1b0>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	0a9b      	lsrs	r3, r3, #10
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a5f      	ldr	r2, [pc, #380]	; (8007e44 <HAL_DMA_IRQHandler+0x1b4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d04a      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5d      	ldr	r2, [pc, #372]	; (8007e48 <HAL_DMA_IRQHandler+0x1b8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d045      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a5c      	ldr	r2, [pc, #368]	; (8007e4c <HAL_DMA_IRQHandler+0x1bc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d040      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a5a      	ldr	r2, [pc, #360]	; (8007e50 <HAL_DMA_IRQHandler+0x1c0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d03b      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a59      	ldr	r2, [pc, #356]	; (8007e54 <HAL_DMA_IRQHandler+0x1c4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d036      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a57      	ldr	r2, [pc, #348]	; (8007e58 <HAL_DMA_IRQHandler+0x1c8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d031      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a56      	ldr	r2, [pc, #344]	; (8007e5c <HAL_DMA_IRQHandler+0x1cc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d02c      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a54      	ldr	r2, [pc, #336]	; (8007e60 <HAL_DMA_IRQHandler+0x1d0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d027      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a53      	ldr	r2, [pc, #332]	; (8007e64 <HAL_DMA_IRQHandler+0x1d4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d022      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a51      	ldr	r2, [pc, #324]	; (8007e68 <HAL_DMA_IRQHandler+0x1d8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01d      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a50      	ldr	r2, [pc, #320]	; (8007e6c <HAL_DMA_IRQHandler+0x1dc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d018      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a4e      	ldr	r2, [pc, #312]	; (8007e70 <HAL_DMA_IRQHandler+0x1e0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a4d      	ldr	r2, [pc, #308]	; (8007e74 <HAL_DMA_IRQHandler+0x1e4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00e      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a4b      	ldr	r2, [pc, #300]	; (8007e78 <HAL_DMA_IRQHandler+0x1e8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a4a      	ldr	r2, [pc, #296]	; (8007e7c <HAL_DMA_IRQHandler+0x1ec>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_DMA_IRQHandler+0xd2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a48      	ldr	r2, [pc, #288]	; (8007e80 <HAL_DMA_IRQHandler+0x1f0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d101      	bne.n	8007d66 <HAL_DMA_IRQHandler+0xd6>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <HAL_DMA_IRQHandler+0xd8>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 842b 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d72:	f003 031f 	and.w	r3, r3, #31
 8007d76:	2208      	movs	r2, #8
 8007d78:	409a      	lsls	r2, r3
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80a2 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2e      	ldr	r2, [pc, #184]	; (8007e44 <HAL_DMA_IRQHandler+0x1b4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d04a      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a2d      	ldr	r2, [pc, #180]	; (8007e48 <HAL_DMA_IRQHandler+0x1b8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d045      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <HAL_DMA_IRQHandler+0x1bc>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d040      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2a      	ldr	r2, [pc, #168]	; (8007e50 <HAL_DMA_IRQHandler+0x1c0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d03b      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <HAL_DMA_IRQHandler+0x1c4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d036      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <HAL_DMA_IRQHandler+0x1c8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d031      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <HAL_DMA_IRQHandler+0x1cc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d02c      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <HAL_DMA_IRQHandler+0x1d0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d027      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <HAL_DMA_IRQHandler+0x1d4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d022      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <HAL_DMA_IRQHandler+0x1d8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d01d      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <HAL_DMA_IRQHandler+0x1dc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d018      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <HAL_DMA_IRQHandler+0x1e0>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d013      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1c      	ldr	r2, [pc, #112]	; (8007e74 <HAL_DMA_IRQHandler+0x1e4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00e      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1b      	ldr	r2, [pc, #108]	; (8007e78 <HAL_DMA_IRQHandler+0x1e8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <HAL_DMA_IRQHandler+0x1ec>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x194>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <HAL_DMA_IRQHandler+0x1f0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d12f      	bne.n	8007e84 <HAL_DMA_IRQHandler+0x1f4>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bf14      	ite	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	2300      	moveq	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	e02e      	b.n	8007e98 <HAL_DMA_IRQHandler+0x208>
 8007e3a:	bf00      	nop
 8007e3c:	20000018 	.word	0x20000018
 8007e40:	1b4e81b5 	.word	0x1b4e81b5
 8007e44:	40020010 	.word	0x40020010
 8007e48:	40020028 	.word	0x40020028
 8007e4c:	40020040 	.word	0x40020040
 8007e50:	40020058 	.word	0x40020058
 8007e54:	40020070 	.word	0x40020070
 8007e58:	40020088 	.word	0x40020088
 8007e5c:	400200a0 	.word	0x400200a0
 8007e60:	400200b8 	.word	0x400200b8
 8007e64:	40020410 	.word	0x40020410
 8007e68:	40020428 	.word	0x40020428
 8007e6c:	40020440 	.word	0x40020440
 8007e70:	40020458 	.word	0x40020458
 8007e74:	40020470 	.word	0x40020470
 8007e78:	40020488 	.word	0x40020488
 8007e7c:	400204a0 	.word	0x400204a0
 8007e80:	400204b8 	.word	0x400204b8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bf14      	ite	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2300      	moveq	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0204 	bic.w	r2, r2, #4
 8007eaa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	f043 0201 	orr.w	r2, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d06e      	beq.n	8007fbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a69      	ldr	r2, [pc, #420]	; (8008088 <HAL_DMA_IRQHandler+0x3f8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d04a      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a67      	ldr	r2, [pc, #412]	; (800808c <HAL_DMA_IRQHandler+0x3fc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d045      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a66      	ldr	r2, [pc, #408]	; (8008090 <HAL_DMA_IRQHandler+0x400>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d040      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a64      	ldr	r2, [pc, #400]	; (8008094 <HAL_DMA_IRQHandler+0x404>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d03b      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a63      	ldr	r2, [pc, #396]	; (8008098 <HAL_DMA_IRQHandler+0x408>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d036      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a61      	ldr	r2, [pc, #388]	; (800809c <HAL_DMA_IRQHandler+0x40c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d031      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a60      	ldr	r2, [pc, #384]	; (80080a0 <HAL_DMA_IRQHandler+0x410>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d02c      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a5e      	ldr	r2, [pc, #376]	; (80080a4 <HAL_DMA_IRQHandler+0x414>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d027      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a5d      	ldr	r2, [pc, #372]	; (80080a8 <HAL_DMA_IRQHandler+0x418>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d022      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a5b      	ldr	r2, [pc, #364]	; (80080ac <HAL_DMA_IRQHandler+0x41c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01d      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a5a      	ldr	r2, [pc, #360]	; (80080b0 <HAL_DMA_IRQHandler+0x420>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d018      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a58      	ldr	r2, [pc, #352]	; (80080b4 <HAL_DMA_IRQHandler+0x424>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a57      	ldr	r2, [pc, #348]	; (80080b8 <HAL_DMA_IRQHandler+0x428>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00e      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a55      	ldr	r2, [pc, #340]	; (80080bc <HAL_DMA_IRQHandler+0x42c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a54      	ldr	r2, [pc, #336]	; (80080c0 <HAL_DMA_IRQHandler+0x430>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x2ee>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a52      	ldr	r2, [pc, #328]	; (80080c4 <HAL_DMA_IRQHandler+0x434>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10a      	bne.n	8007f94 <HAL_DMA_IRQHandler+0x304>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e003      	b.n	8007f9c <HAL_DMA_IRQHandler+0x30c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00d      	beq.n	8007fbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa4:	f003 031f 	and.w	r3, r3, #31
 8007fa8:	2201      	movs	r2, #1
 8007faa:	409a      	lsls	r2, r3
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb4:	f043 0202 	orr.w	r2, r3, #2
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 808f 	beq.w	80080f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <HAL_DMA_IRQHandler+0x3f8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	; (800808c <HAL_DMA_IRQHandler+0x3fc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a29      	ldr	r2, [pc, #164]	; (8008090 <HAL_DMA_IRQHandler+0x400>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a27      	ldr	r2, [pc, #156]	; (8008094 <HAL_DMA_IRQHandler+0x404>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a26      	ldr	r2, [pc, #152]	; (8008098 <HAL_DMA_IRQHandler+0x408>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a24      	ldr	r2, [pc, #144]	; (800809c <HAL_DMA_IRQHandler+0x40c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <HAL_DMA_IRQHandler+0x410>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a21      	ldr	r2, [pc, #132]	; (80080a4 <HAL_DMA_IRQHandler+0x414>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a20      	ldr	r2, [pc, #128]	; (80080a8 <HAL_DMA_IRQHandler+0x418>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <HAL_DMA_IRQHandler+0x41c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <HAL_DMA_IRQHandler+0x420>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1b      	ldr	r2, [pc, #108]	; (80080b4 <HAL_DMA_IRQHandler+0x424>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <HAL_DMA_IRQHandler+0x428>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <HAL_DMA_IRQHandler+0x42c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <HAL_DMA_IRQHandler+0x430>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_DMA_IRQHandler+0x3e2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <HAL_DMA_IRQHandler+0x434>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d12a      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x438>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	bf14      	ite	ne
 8008080:	2301      	movne	r3, #1
 8008082:	2300      	moveq	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	e023      	b.n	80080d0 <HAL_DMA_IRQHandler+0x440>
 8008088:	40020010 	.word	0x40020010
 800808c:	40020028 	.word	0x40020028
 8008090:	40020040 	.word	0x40020040
 8008094:	40020058 	.word	0x40020058
 8008098:	40020070 	.word	0x40020070
 800809c:	40020088 	.word	0x40020088
 80080a0:	400200a0 	.word	0x400200a0
 80080a4:	400200b8 	.word	0x400200b8
 80080a8:	40020410 	.word	0x40020410
 80080ac:	40020428 	.word	0x40020428
 80080b0:	40020440 	.word	0x40020440
 80080b4:	40020458 	.word	0x40020458
 80080b8:	40020470 	.word	0x40020470
 80080bc:	40020488 	.word	0x40020488
 80080c0:	400204a0 	.word	0x400204a0
 80080c4:	400204b8 	.word	0x400204b8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00d      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	2204      	movs	r2, #4
 80080de:	409a      	lsls	r2, r3
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	f043 0204 	orr.w	r2, r3, #4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	2210      	movs	r2, #16
 80080fa:	409a      	lsls	r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80a6 	beq.w	8008252 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a85      	ldr	r2, [pc, #532]	; (8008320 <HAL_DMA_IRQHandler+0x690>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d04a      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a83      	ldr	r2, [pc, #524]	; (8008324 <HAL_DMA_IRQHandler+0x694>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d045      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a82      	ldr	r2, [pc, #520]	; (8008328 <HAL_DMA_IRQHandler+0x698>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d040      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a80      	ldr	r2, [pc, #512]	; (800832c <HAL_DMA_IRQHandler+0x69c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d03b      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a7f      	ldr	r2, [pc, #508]	; (8008330 <HAL_DMA_IRQHandler+0x6a0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d036      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a7d      	ldr	r2, [pc, #500]	; (8008334 <HAL_DMA_IRQHandler+0x6a4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d031      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a7c      	ldr	r2, [pc, #496]	; (8008338 <HAL_DMA_IRQHandler+0x6a8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d02c      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a7a      	ldr	r2, [pc, #488]	; (800833c <HAL_DMA_IRQHandler+0x6ac>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d027      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a79      	ldr	r2, [pc, #484]	; (8008340 <HAL_DMA_IRQHandler+0x6b0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d022      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a77      	ldr	r2, [pc, #476]	; (8008344 <HAL_DMA_IRQHandler+0x6b4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d01d      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a76      	ldr	r2, [pc, #472]	; (8008348 <HAL_DMA_IRQHandler+0x6b8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d018      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a74      	ldr	r2, [pc, #464]	; (800834c <HAL_DMA_IRQHandler+0x6bc>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d013      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a73      	ldr	r2, [pc, #460]	; (8008350 <HAL_DMA_IRQHandler+0x6c0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00e      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a71      	ldr	r2, [pc, #452]	; (8008354 <HAL_DMA_IRQHandler+0x6c4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d009      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a70      	ldr	r2, [pc, #448]	; (8008358 <HAL_DMA_IRQHandler+0x6c8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d004      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x516>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a6e      	ldr	r2, [pc, #440]	; (800835c <HAL_DMA_IRQHandler+0x6cc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d10a      	bne.n	80081bc <HAL_DMA_IRQHandler+0x52c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e009      	b.n	80081d0 <HAL_DMA_IRQHandler+0x540>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	2300      	moveq	r3, #0
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d03e      	beq.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2210      	movs	r2, #16
 80081de:	409a      	lsls	r2, r3
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d018      	beq.n	8008224 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d108      	bne.n	8008212 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d024      	beq.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
 8008210:	e01f      	b.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01b      	beq.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	e016      	b.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0208 	bic.w	r2, r2, #8
 8008240:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2220      	movs	r2, #32
 800825c:	409a      	lsls	r2, r3
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8110 	beq.w	8008488 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a2c      	ldr	r2, [pc, #176]	; (8008320 <HAL_DMA_IRQHandler+0x690>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d04a      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a2b      	ldr	r2, [pc, #172]	; (8008324 <HAL_DMA_IRQHandler+0x694>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d045      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a29      	ldr	r2, [pc, #164]	; (8008328 <HAL_DMA_IRQHandler+0x698>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d040      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a28      	ldr	r2, [pc, #160]	; (800832c <HAL_DMA_IRQHandler+0x69c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d03b      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a26      	ldr	r2, [pc, #152]	; (8008330 <HAL_DMA_IRQHandler+0x6a0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d036      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a25      	ldr	r2, [pc, #148]	; (8008334 <HAL_DMA_IRQHandler+0x6a4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d031      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a23      	ldr	r2, [pc, #140]	; (8008338 <HAL_DMA_IRQHandler+0x6a8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d02c      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a22      	ldr	r2, [pc, #136]	; (800833c <HAL_DMA_IRQHandler+0x6ac>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d027      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a20      	ldr	r2, [pc, #128]	; (8008340 <HAL_DMA_IRQHandler+0x6b0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d022      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1f      	ldr	r2, [pc, #124]	; (8008344 <HAL_DMA_IRQHandler+0x6b4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d01d      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <HAL_DMA_IRQHandler+0x6b8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <HAL_DMA_IRQHandler+0x6bc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <HAL_DMA_IRQHandler+0x6c0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a19      	ldr	r2, [pc, #100]	; (8008354 <HAL_DMA_IRQHandler+0x6c4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a17      	ldr	r2, [pc, #92]	; (8008358 <HAL_DMA_IRQHandler+0x6c8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_DMA_IRQHandler+0x678>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <HAL_DMA_IRQHandler+0x6cc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d12b      	bne.n	8008360 <HAL_DMA_IRQHandler+0x6d0>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b00      	cmp	r3, #0
 8008314:	bf14      	ite	ne
 8008316:	2301      	movne	r3, #1
 8008318:	2300      	moveq	r3, #0
 800831a:	b2db      	uxtb	r3, r3
 800831c:	e02a      	b.n	8008374 <HAL_DMA_IRQHandler+0x6e4>
 800831e:	bf00      	nop
 8008320:	40020010 	.word	0x40020010
 8008324:	40020028 	.word	0x40020028
 8008328:	40020040 	.word	0x40020040
 800832c:	40020058 	.word	0x40020058
 8008330:	40020070 	.word	0x40020070
 8008334:	40020088 	.word	0x40020088
 8008338:	400200a0 	.word	0x400200a0
 800833c:	400200b8 	.word	0x400200b8
 8008340:	40020410 	.word	0x40020410
 8008344:	40020428 	.word	0x40020428
 8008348:	40020440 	.word	0x40020440
 800834c:	40020458 	.word	0x40020458
 8008350:	40020470 	.word	0x40020470
 8008354:	40020488 	.word	0x40020488
 8008358:	400204a0 	.word	0x400204a0
 800835c:	400204b8 	.word	0x400204b8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8087 	beq.w	8008488 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2220      	movs	r2, #32
 8008384:	409a      	lsls	r2, r3
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b04      	cmp	r3, #4
 8008394:	d139      	bne.n	800840a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0216 	bic.w	r2, r2, #22
 80083a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695a      	ldr	r2, [r3, #20]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <HAL_DMA_IRQHandler+0x736>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0208 	bic.w	r2, r2, #8
 80083d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	223f      	movs	r2, #63	; 0x3f
 80083e0:	409a      	lsls	r2, r3
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 834a 	beq.w	8008a94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
          }
          return;
 8008408:	e344      	b.n	8008a94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d018      	beq.n	800844a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d108      	bne.n	8008438 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	2b00      	cmp	r3, #0
 800842c:	d02c      	beq.n	8008488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
 8008436:	e027      	b.n	8008488 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d023      	beq.n	8008488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
 8008448:	e01e      	b.n	8008488 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10f      	bne.n	8008478 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0210 	bic.w	r2, r2, #16
 8008466:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8306 	beq.w	8008a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8088 	beq.w	80085b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2204      	movs	r2, #4
 80084a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a7a      	ldr	r2, [pc, #488]	; (8008698 <HAL_DMA_IRQHandler+0xa08>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d04a      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a79      	ldr	r2, [pc, #484]	; (800869c <HAL_DMA_IRQHandler+0xa0c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d045      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a77      	ldr	r2, [pc, #476]	; (80086a0 <HAL_DMA_IRQHandler+0xa10>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d040      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a76      	ldr	r2, [pc, #472]	; (80086a4 <HAL_DMA_IRQHandler+0xa14>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d03b      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a74      	ldr	r2, [pc, #464]	; (80086a8 <HAL_DMA_IRQHandler+0xa18>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d036      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a73      	ldr	r2, [pc, #460]	; (80086ac <HAL_DMA_IRQHandler+0xa1c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d031      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a71      	ldr	r2, [pc, #452]	; (80086b0 <HAL_DMA_IRQHandler+0xa20>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d02c      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a70      	ldr	r2, [pc, #448]	; (80086b4 <HAL_DMA_IRQHandler+0xa24>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d027      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a6e      	ldr	r2, [pc, #440]	; (80086b8 <HAL_DMA_IRQHandler+0xa28>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d022      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a6d      	ldr	r2, [pc, #436]	; (80086bc <HAL_DMA_IRQHandler+0xa2c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d01d      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a6b      	ldr	r2, [pc, #428]	; (80086c0 <HAL_DMA_IRQHandler+0xa30>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d018      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a6a      	ldr	r2, [pc, #424]	; (80086c4 <HAL_DMA_IRQHandler+0xa34>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d013      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a68      	ldr	r2, [pc, #416]	; (80086c8 <HAL_DMA_IRQHandler+0xa38>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00e      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a67      	ldr	r2, [pc, #412]	; (80086cc <HAL_DMA_IRQHandler+0xa3c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d009      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a65      	ldr	r2, [pc, #404]	; (80086d0 <HAL_DMA_IRQHandler+0xa40>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d004      	beq.n	8008548 <HAL_DMA_IRQHandler+0x8b8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a64      	ldr	r2, [pc, #400]	; (80086d4 <HAL_DMA_IRQHandler+0xa44>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d108      	bne.n	800855a <HAL_DMA_IRQHandler+0x8ca>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e007      	b.n	800856a <HAL_DMA_IRQHandler+0x8da>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0201 	bic.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d307      	bcc.n	8008586 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1f2      	bne.n	800856a <HAL_DMA_IRQHandler+0x8da>
 8008584:	e000      	b.n	8008588 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008586:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800859e:	e003      	b.n	80085a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8272 	beq.w	8008a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	e26c      	b.n	8008a9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a43      	ldr	r2, [pc, #268]	; (80086d8 <HAL_DMA_IRQHandler+0xa48>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d022      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a42      	ldr	r2, [pc, #264]	; (80086dc <HAL_DMA_IRQHandler+0xa4c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01d      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a40      	ldr	r2, [pc, #256]	; (80086e0 <HAL_DMA_IRQHandler+0xa50>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3f      	ldr	r2, [pc, #252]	; (80086e4 <HAL_DMA_IRQHandler+0xa54>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3d      	ldr	r2, [pc, #244]	; (80086e8 <HAL_DMA_IRQHandler+0xa58>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3c      	ldr	r2, [pc, #240]	; (80086ec <HAL_DMA_IRQHandler+0xa5c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3a      	ldr	r2, [pc, #232]	; (80086f0 <HAL_DMA_IRQHandler+0xa60>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_DMA_IRQHandler+0x984>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a39      	ldr	r2, [pc, #228]	; (80086f4 <HAL_DMA_IRQHandler+0xa64>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d101      	bne.n	8008618 <HAL_DMA_IRQHandler+0x988>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_DMA_IRQHandler+0x98a>
 8008618:	2300      	movs	r3, #0
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 823f 	beq.w	8008a9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	2204      	movs	r2, #4
 8008632:	409a      	lsls	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	4013      	ands	r3, r2
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80cd 	beq.w	80087d8 <HAL_DMA_IRQHandler+0xb48>
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80c7 	beq.w	80087d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2204      	movs	r2, #4
 8008654:	409a      	lsls	r2, r3
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d049      	beq.n	80086f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d109      	bne.n	8008682 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8210 	beq.w	8008a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008680:	e20a      	b.n	8008a98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 8206 	beq.w	8008a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008694:	e200      	b.n	8008a98 <HAL_DMA_IRQHandler+0xe08>
 8008696:	bf00      	nop
 8008698:	40020010 	.word	0x40020010
 800869c:	40020028 	.word	0x40020028
 80086a0:	40020040 	.word	0x40020040
 80086a4:	40020058 	.word	0x40020058
 80086a8:	40020070 	.word	0x40020070
 80086ac:	40020088 	.word	0x40020088
 80086b0:	400200a0 	.word	0x400200a0
 80086b4:	400200b8 	.word	0x400200b8
 80086b8:	40020410 	.word	0x40020410
 80086bc:	40020428 	.word	0x40020428
 80086c0:	40020440 	.word	0x40020440
 80086c4:	40020458 	.word	0x40020458
 80086c8:	40020470 	.word	0x40020470
 80086cc:	40020488 	.word	0x40020488
 80086d0:	400204a0 	.word	0x400204a0
 80086d4:	400204b8 	.word	0x400204b8
 80086d8:	58025408 	.word	0x58025408
 80086dc:	5802541c 	.word	0x5802541c
 80086e0:	58025430 	.word	0x58025430
 80086e4:	58025444 	.word	0x58025444
 80086e8:	58025458 	.word	0x58025458
 80086ec:	5802546c 	.word	0x5802546c
 80086f0:	58025480 	.word	0x58025480
 80086f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d160      	bne.n	80087c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a7f      	ldr	r2, [pc, #508]	; (8008904 <HAL_DMA_IRQHandler+0xc74>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d04a      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a7d      	ldr	r2, [pc, #500]	; (8008908 <HAL_DMA_IRQHandler+0xc78>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d045      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7c      	ldr	r2, [pc, #496]	; (800890c <HAL_DMA_IRQHandler+0xc7c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d040      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7a      	ldr	r2, [pc, #488]	; (8008910 <HAL_DMA_IRQHandler+0xc80>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d03b      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a79      	ldr	r2, [pc, #484]	; (8008914 <HAL_DMA_IRQHandler+0xc84>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d036      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a77      	ldr	r2, [pc, #476]	; (8008918 <HAL_DMA_IRQHandler+0xc88>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d031      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a76      	ldr	r2, [pc, #472]	; (800891c <HAL_DMA_IRQHandler+0xc8c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d02c      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a74      	ldr	r2, [pc, #464]	; (8008920 <HAL_DMA_IRQHandler+0xc90>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d027      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a73      	ldr	r2, [pc, #460]	; (8008924 <HAL_DMA_IRQHandler+0xc94>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d022      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a71      	ldr	r2, [pc, #452]	; (8008928 <HAL_DMA_IRQHandler+0xc98>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01d      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a70      	ldr	r2, [pc, #448]	; (800892c <HAL_DMA_IRQHandler+0xc9c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d018      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6e      	ldr	r2, [pc, #440]	; (8008930 <HAL_DMA_IRQHandler+0xca0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d013      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a6d      	ldr	r2, [pc, #436]	; (8008934 <HAL_DMA_IRQHandler+0xca4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00e      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a6b      	ldr	r2, [pc, #428]	; (8008938 <HAL_DMA_IRQHandler+0xca8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d009      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6a      	ldr	r2, [pc, #424]	; (800893c <HAL_DMA_IRQHandler+0xcac>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d004      	beq.n	80087a2 <HAL_DMA_IRQHandler+0xb12>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a68      	ldr	r2, [pc, #416]	; (8008940 <HAL_DMA_IRQHandler+0xcb0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d108      	bne.n	80087b4 <HAL_DMA_IRQHandler+0xb24>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0208 	bic.w	r2, r2, #8
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	e007      	b.n	80087c4 <HAL_DMA_IRQHandler+0xb34>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0204 	bic.w	r2, r2, #4
 80087c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 8165 	beq.w	8008a98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087d6:	e15f      	b.n	8008a98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	2202      	movs	r2, #2
 80087e2:	409a      	lsls	r2, r3
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4013      	ands	r3, r2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 80c5 	beq.w	8008978 <HAL_DMA_IRQHandler+0xce8>
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80bf 	beq.w	8008978 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2202      	movs	r2, #2
 8008804:	409a      	lsls	r2, r3
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d018      	beq.n	8008846 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 813a 	beq.w	8008a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008830:	e134      	b.n	8008a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8130 	beq.w	8008a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008844:	e12a      	b.n	8008a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 8089 	bne.w	8008964 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a2b      	ldr	r2, [pc, #172]	; (8008904 <HAL_DMA_IRQHandler+0xc74>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d04a      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a29      	ldr	r2, [pc, #164]	; (8008908 <HAL_DMA_IRQHandler+0xc78>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d045      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a28      	ldr	r2, [pc, #160]	; (800890c <HAL_DMA_IRQHandler+0xc7c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d040      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a26      	ldr	r2, [pc, #152]	; (8008910 <HAL_DMA_IRQHandler+0xc80>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d03b      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a25      	ldr	r2, [pc, #148]	; (8008914 <HAL_DMA_IRQHandler+0xc84>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d036      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a23      	ldr	r2, [pc, #140]	; (8008918 <HAL_DMA_IRQHandler+0xc88>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d031      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a22      	ldr	r2, [pc, #136]	; (800891c <HAL_DMA_IRQHandler+0xc8c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d02c      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a20      	ldr	r2, [pc, #128]	; (8008920 <HAL_DMA_IRQHandler+0xc90>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d027      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <HAL_DMA_IRQHandler+0xc94>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d022      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <HAL_DMA_IRQHandler+0xc98>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d01d      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1c      	ldr	r2, [pc, #112]	; (800892c <HAL_DMA_IRQHandler+0xc9c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d018      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1a      	ldr	r2, [pc, #104]	; (8008930 <HAL_DMA_IRQHandler+0xca0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d013      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a19      	ldr	r2, [pc, #100]	; (8008934 <HAL_DMA_IRQHandler+0xca4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00e      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <HAL_DMA_IRQHandler+0xca8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d009      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a16      	ldr	r2, [pc, #88]	; (800893c <HAL_DMA_IRQHandler+0xcac>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d004      	beq.n	80088f2 <HAL_DMA_IRQHandler+0xc62>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a14      	ldr	r2, [pc, #80]	; (8008940 <HAL_DMA_IRQHandler+0xcb0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d128      	bne.n	8008944 <HAL_DMA_IRQHandler+0xcb4>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0214 	bic.w	r2, r2, #20
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e027      	b.n	8008954 <HAL_DMA_IRQHandler+0xcc4>
 8008904:	40020010 	.word	0x40020010
 8008908:	40020028 	.word	0x40020028
 800890c:	40020040 	.word	0x40020040
 8008910:	40020058 	.word	0x40020058
 8008914:	40020070 	.word	0x40020070
 8008918:	40020088 	.word	0x40020088
 800891c:	400200a0 	.word	0x400200a0
 8008920:	400200b8 	.word	0x400200b8
 8008924:	40020410 	.word	0x40020410
 8008928:	40020428 	.word	0x40020428
 800892c:	40020440 	.word	0x40020440
 8008930:	40020458 	.word	0x40020458
 8008934:	40020470 	.word	0x40020470
 8008938:	40020488 	.word	0x40020488
 800893c:	400204a0 	.word	0x400204a0
 8008940:	400204b8 	.word	0x400204b8
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 020a 	bic.w	r2, r2, #10
 8008952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 8097 	beq.w	8008a9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008976:	e091      	b.n	8008a9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	2208      	movs	r2, #8
 8008982:	409a      	lsls	r2, r3
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8088 	beq.w	8008a9e <HAL_DMA_IRQHandler+0xe0e>
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8082 	beq.w	8008a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a41      	ldr	r2, [pc, #260]	; (8008aa4 <HAL_DMA_IRQHandler+0xe14>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d04a      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a3f      	ldr	r2, [pc, #252]	; (8008aa8 <HAL_DMA_IRQHandler+0xe18>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d045      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a3e      	ldr	r2, [pc, #248]	; (8008aac <HAL_DMA_IRQHandler+0xe1c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d040      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3c      	ldr	r2, [pc, #240]	; (8008ab0 <HAL_DMA_IRQHandler+0xe20>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d03b      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a3b      	ldr	r2, [pc, #236]	; (8008ab4 <HAL_DMA_IRQHandler+0xe24>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d036      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a39      	ldr	r2, [pc, #228]	; (8008ab8 <HAL_DMA_IRQHandler+0xe28>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d031      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a38      	ldr	r2, [pc, #224]	; (8008abc <HAL_DMA_IRQHandler+0xe2c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d02c      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a36      	ldr	r2, [pc, #216]	; (8008ac0 <HAL_DMA_IRQHandler+0xe30>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d027      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <HAL_DMA_IRQHandler+0xe34>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a33      	ldr	r2, [pc, #204]	; (8008ac8 <HAL_DMA_IRQHandler+0xe38>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01d      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a32      	ldr	r2, [pc, #200]	; (8008acc <HAL_DMA_IRQHandler+0xe3c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d018      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a30      	ldr	r2, [pc, #192]	; (8008ad0 <HAL_DMA_IRQHandler+0xe40>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2f      	ldr	r2, [pc, #188]	; (8008ad4 <HAL_DMA_IRQHandler+0xe44>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00e      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a2d      	ldr	r2, [pc, #180]	; (8008ad8 <HAL_DMA_IRQHandler+0xe48>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d009      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a2c      	ldr	r2, [pc, #176]	; (8008adc <HAL_DMA_IRQHandler+0xe4c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d004      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xdaa>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a2a      	ldr	r2, [pc, #168]	; (8008ae0 <HAL_DMA_IRQHandler+0xe50>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d108      	bne.n	8008a4c <HAL_DMA_IRQHandler+0xdbc>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 021c 	bic.w	r2, r2, #28
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e007      	b.n	8008a5c <HAL_DMA_IRQHandler+0xdcc>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 020e 	bic.w	r2, r2, #14
 8008a5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
 8008a92:	e004      	b.n	8008a9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008a94:	bf00      	nop
 8008a96:	e002      	b.n	8008a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a98:	bf00      	nop
 8008a9a:	e000      	b.n	8008a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a9e:	3728      	adds	r7, #40	; 0x28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40020010 	.word	0x40020010
 8008aa8:	40020028 	.word	0x40020028
 8008aac:	40020040 	.word	0x40020040
 8008ab0:	40020058 	.word	0x40020058
 8008ab4:	40020070 	.word	0x40020070
 8008ab8:	40020088 	.word	0x40020088
 8008abc:	400200a0 	.word	0x400200a0
 8008ac0:	400200b8 	.word	0x400200b8
 8008ac4:	40020410 	.word	0x40020410
 8008ac8:	40020428 	.word	0x40020428
 8008acc:	40020440 	.word	0x40020440
 8008ad0:	40020458 	.word	0x40020458
 8008ad4:	40020470 	.word	0x40020470
 8008ad8:	40020488 	.word	0x40020488
 8008adc:	400204a0 	.word	0x400204a0
 8008ae0:	400204b8 	.word	0x400204b8

08008ae4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a7f      	ldr	r2, [pc, #508]	; (8008d18 <DMA_SetConfig+0x21c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d072      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a7d      	ldr	r2, [pc, #500]	; (8008d1c <DMA_SetConfig+0x220>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d06d      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a7c      	ldr	r2, [pc, #496]	; (8008d20 <DMA_SetConfig+0x224>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d068      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a7a      	ldr	r2, [pc, #488]	; (8008d24 <DMA_SetConfig+0x228>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d063      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a79      	ldr	r2, [pc, #484]	; (8008d28 <DMA_SetConfig+0x22c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d05e      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a77      	ldr	r2, [pc, #476]	; (8008d2c <DMA_SetConfig+0x230>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d059      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a76      	ldr	r2, [pc, #472]	; (8008d30 <DMA_SetConfig+0x234>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d054      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a74      	ldr	r2, [pc, #464]	; (8008d34 <DMA_SetConfig+0x238>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d04f      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a73      	ldr	r2, [pc, #460]	; (8008d38 <DMA_SetConfig+0x23c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d04a      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a71      	ldr	r2, [pc, #452]	; (8008d3c <DMA_SetConfig+0x240>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d045      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a70      	ldr	r2, [pc, #448]	; (8008d40 <DMA_SetConfig+0x244>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d040      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a6e      	ldr	r2, [pc, #440]	; (8008d44 <DMA_SetConfig+0x248>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d03b      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a6d      	ldr	r2, [pc, #436]	; (8008d48 <DMA_SetConfig+0x24c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d036      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a6b      	ldr	r2, [pc, #428]	; (8008d4c <DMA_SetConfig+0x250>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d031      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a6a      	ldr	r2, [pc, #424]	; (8008d50 <DMA_SetConfig+0x254>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d02c      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a68      	ldr	r2, [pc, #416]	; (8008d54 <DMA_SetConfig+0x258>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d027      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a67      	ldr	r2, [pc, #412]	; (8008d58 <DMA_SetConfig+0x25c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d022      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a65      	ldr	r2, [pc, #404]	; (8008d5c <DMA_SetConfig+0x260>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01d      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a64      	ldr	r2, [pc, #400]	; (8008d60 <DMA_SetConfig+0x264>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d018      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a62      	ldr	r2, [pc, #392]	; (8008d64 <DMA_SetConfig+0x268>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d013      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a61      	ldr	r2, [pc, #388]	; (8008d68 <DMA_SetConfig+0x26c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00e      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a5f      	ldr	r2, [pc, #380]	; (8008d6c <DMA_SetConfig+0x270>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d009      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5e      	ldr	r2, [pc, #376]	; (8008d70 <DMA_SetConfig+0x274>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d004      	beq.n	8008c06 <DMA_SetConfig+0x10a>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a5c      	ldr	r2, [pc, #368]	; (8008d74 <DMA_SetConfig+0x278>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d101      	bne.n	8008c0a <DMA_SetConfig+0x10e>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <DMA_SetConfig+0x110>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00d      	beq.n	8008c2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a39      	ldr	r2, [pc, #228]	; (8008d18 <DMA_SetConfig+0x21c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d04a      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a38      	ldr	r2, [pc, #224]	; (8008d1c <DMA_SetConfig+0x220>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d045      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a36      	ldr	r2, [pc, #216]	; (8008d20 <DMA_SetConfig+0x224>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d040      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a35      	ldr	r2, [pc, #212]	; (8008d24 <DMA_SetConfig+0x228>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d03b      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a33      	ldr	r2, [pc, #204]	; (8008d28 <DMA_SetConfig+0x22c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d036      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a32      	ldr	r2, [pc, #200]	; (8008d2c <DMA_SetConfig+0x230>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d031      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a30      	ldr	r2, [pc, #192]	; (8008d30 <DMA_SetConfig+0x234>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d02c      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a2f      	ldr	r2, [pc, #188]	; (8008d34 <DMA_SetConfig+0x238>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d027      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a2d      	ldr	r2, [pc, #180]	; (8008d38 <DMA_SetConfig+0x23c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d022      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a2c      	ldr	r2, [pc, #176]	; (8008d3c <DMA_SetConfig+0x240>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d01d      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <DMA_SetConfig+0x244>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d018      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a29      	ldr	r2, [pc, #164]	; (8008d44 <DMA_SetConfig+0x248>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d013      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a27      	ldr	r2, [pc, #156]	; (8008d48 <DMA_SetConfig+0x24c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <DMA_SetConfig+0x250>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <DMA_SetConfig+0x254>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <DMA_SetConfig+0x1d0>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a23      	ldr	r2, [pc, #140]	; (8008d54 <DMA_SetConfig+0x258>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d101      	bne.n	8008cd0 <DMA_SetConfig+0x1d4>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <DMA_SetConfig+0x1d6>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d059      	beq.n	8008d8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cda:	f003 031f 	and.w	r3, r3, #31
 8008cde:	223f      	movs	r2, #63	; 0x3f
 8008ce0:	409a      	lsls	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008cf4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d138      	bne.n	8008d78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d16:	e086      	b.n	8008e26 <DMA_SetConfig+0x32a>
 8008d18:	40020010 	.word	0x40020010
 8008d1c:	40020028 	.word	0x40020028
 8008d20:	40020040 	.word	0x40020040
 8008d24:	40020058 	.word	0x40020058
 8008d28:	40020070 	.word	0x40020070
 8008d2c:	40020088 	.word	0x40020088
 8008d30:	400200a0 	.word	0x400200a0
 8008d34:	400200b8 	.word	0x400200b8
 8008d38:	40020410 	.word	0x40020410
 8008d3c:	40020428 	.word	0x40020428
 8008d40:	40020440 	.word	0x40020440
 8008d44:	40020458 	.word	0x40020458
 8008d48:	40020470 	.word	0x40020470
 8008d4c:	40020488 	.word	0x40020488
 8008d50:	400204a0 	.word	0x400204a0
 8008d54:	400204b8 	.word	0x400204b8
 8008d58:	58025408 	.word	0x58025408
 8008d5c:	5802541c 	.word	0x5802541c
 8008d60:	58025430 	.word	0x58025430
 8008d64:	58025444 	.word	0x58025444
 8008d68:	58025458 	.word	0x58025458
 8008d6c:	5802546c 	.word	0x5802546c
 8008d70:	58025480 	.word	0x58025480
 8008d74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	60da      	str	r2, [r3, #12]
}
 8008d88:	e04d      	b.n	8008e26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a29      	ldr	r2, [pc, #164]	; (8008e34 <DMA_SetConfig+0x338>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d022      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a27      	ldr	r2, [pc, #156]	; (8008e38 <DMA_SetConfig+0x33c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d01d      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a26      	ldr	r2, [pc, #152]	; (8008e3c <DMA_SetConfig+0x340>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d018      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a24      	ldr	r2, [pc, #144]	; (8008e40 <DMA_SetConfig+0x344>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d013      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a23      	ldr	r2, [pc, #140]	; (8008e44 <DMA_SetConfig+0x348>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00e      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <DMA_SetConfig+0x34c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d009      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a20      	ldr	r2, [pc, #128]	; (8008e4c <DMA_SetConfig+0x350>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d004      	beq.n	8008dda <DMA_SetConfig+0x2de>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <DMA_SetConfig+0x354>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d101      	bne.n	8008dde <DMA_SetConfig+0x2e2>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <DMA_SetConfig+0x2e4>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d020      	beq.n	8008e26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	2201      	movs	r2, #1
 8008dee:	409a      	lsls	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d108      	bne.n	8008e16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	60da      	str	r2, [r3, #12]
}
 8008e14:	e007      	b.n	8008e26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	60da      	str	r2, [r3, #12]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	58025408 	.word	0x58025408
 8008e38:	5802541c 	.word	0x5802541c
 8008e3c:	58025430 	.word	0x58025430
 8008e40:	58025444 	.word	0x58025444
 8008e44:	58025458 	.word	0x58025458
 8008e48:	5802546c 	.word	0x5802546c
 8008e4c:	58025480 	.word	0x58025480
 8008e50:	58025494 	.word	0x58025494

08008e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a42      	ldr	r2, [pc, #264]	; (8008f6c <DMA_CalcBaseAndBitshift+0x118>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d04a      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a41      	ldr	r2, [pc, #260]	; (8008f70 <DMA_CalcBaseAndBitshift+0x11c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d045      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a3f      	ldr	r2, [pc, #252]	; (8008f74 <DMA_CalcBaseAndBitshift+0x120>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d040      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a3e      	ldr	r2, [pc, #248]	; (8008f78 <DMA_CalcBaseAndBitshift+0x124>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d03b      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3c      	ldr	r2, [pc, #240]	; (8008f7c <DMA_CalcBaseAndBitshift+0x128>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d036      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a3b      	ldr	r2, [pc, #236]	; (8008f80 <DMA_CalcBaseAndBitshift+0x12c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d031      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a39      	ldr	r2, [pc, #228]	; (8008f84 <DMA_CalcBaseAndBitshift+0x130>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d02c      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a38      	ldr	r2, [pc, #224]	; (8008f88 <DMA_CalcBaseAndBitshift+0x134>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d027      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a36      	ldr	r2, [pc, #216]	; (8008f8c <DMA_CalcBaseAndBitshift+0x138>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d022      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a35      	ldr	r2, [pc, #212]	; (8008f90 <DMA_CalcBaseAndBitshift+0x13c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d01d      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a33      	ldr	r2, [pc, #204]	; (8008f94 <DMA_CalcBaseAndBitshift+0x140>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d018      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a32      	ldr	r2, [pc, #200]	; (8008f98 <DMA_CalcBaseAndBitshift+0x144>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a30      	ldr	r2, [pc, #192]	; (8008f9c <DMA_CalcBaseAndBitshift+0x148>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00e      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2f      	ldr	r2, [pc, #188]	; (8008fa0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d009      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <DMA_CalcBaseAndBitshift+0x150>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <DMA_CalcBaseAndBitshift+0xa8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2c      	ldr	r2, [pc, #176]	; (8008fa8 <DMA_CalcBaseAndBitshift+0x154>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d101      	bne.n	8008f00 <DMA_CalcBaseAndBitshift+0xac>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <DMA_CalcBaseAndBitshift+0xae>
 8008f00:	2300      	movs	r3, #0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d024      	beq.n	8008f50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	3b10      	subs	r3, #16
 8008f0e:	4a27      	ldr	r2, [pc, #156]	; (8008fac <DMA_CalcBaseAndBitshift+0x158>)
 8008f10:	fba2 2303 	umull	r2, r3, r2, r3
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	4a24      	ldr	r2, [pc, #144]	; (8008fb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f20:	5cd3      	ldrb	r3, [r2, r3]
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d908      	bls.n	8008f40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x160>)
 8008f36:	4013      	ands	r3, r2
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8008f3e:	e00d      	b.n	8008f5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x160>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f4e:	e005      	b.n	8008f5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40020010 	.word	0x40020010
 8008f70:	40020028 	.word	0x40020028
 8008f74:	40020040 	.word	0x40020040
 8008f78:	40020058 	.word	0x40020058
 8008f7c:	40020070 	.word	0x40020070
 8008f80:	40020088 	.word	0x40020088
 8008f84:	400200a0 	.word	0x400200a0
 8008f88:	400200b8 	.word	0x400200b8
 8008f8c:	40020410 	.word	0x40020410
 8008f90:	40020428 	.word	0x40020428
 8008f94:	40020440 	.word	0x40020440
 8008f98:	40020458 	.word	0x40020458
 8008f9c:	40020470 	.word	0x40020470
 8008fa0:	40020488 	.word	0x40020488
 8008fa4:	400204a0 	.word	0x400204a0
 8008fa8:	400204b8 	.word	0x400204b8
 8008fac:	aaaaaaab 	.word	0xaaaaaaab
 8008fb0:	08017fa4 	.word	0x08017fa4
 8008fb4:	fffffc00 	.word	0xfffffc00

08008fb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d120      	bne.n	800900e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d858      	bhi.n	8009086 <DMA_CheckFifoParam+0xce>
 8008fd4:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <DMA_CheckFifoParam+0x24>)
 8008fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fda:	bf00      	nop
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	08008fff 	.word	0x08008fff
 8008fe4:	08008fed 	.word	0x08008fed
 8008fe8:	08009087 	.word	0x08009087
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d048      	beq.n	800908a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ffc:	e045      	b.n	800908a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009006:	d142      	bne.n	800908e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800900c:	e03f      	b.n	800908e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009016:	d123      	bne.n	8009060 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901c:	2b03      	cmp	r3, #3
 800901e:	d838      	bhi.n	8009092 <DMA_CheckFifoParam+0xda>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <DMA_CheckFifoParam+0x70>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009039 	.word	0x08009039
 800902c:	0800903f 	.word	0x0800903f
 8009030:	08009039 	.word	0x08009039
 8009034:	08009051 	.word	0x08009051
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
        break;
 800903c:	e030      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d025      	beq.n	8009096 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800904e:	e022      	b.n	8009096 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009058:	d11f      	bne.n	800909a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800905e:	e01c      	b.n	800909a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	2b02      	cmp	r3, #2
 8009066:	d902      	bls.n	800906e <DMA_CheckFifoParam+0xb6>
 8009068:	2b03      	cmp	r3, #3
 800906a:	d003      	beq.n	8009074 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800906c:	e018      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
        break;
 8009072:	e015      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00e      	beq.n	800909e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	73fb      	strb	r3, [r7, #15]
    break;
 8009084:	e00b      	b.n	800909e <DMA_CheckFifoParam+0xe6>
        break;
 8009086:	bf00      	nop
 8009088:	e00a      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        break;
 800908a:	bf00      	nop
 800908c:	e008      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        break;
 800908e:	bf00      	nop
 8009090:	e006      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        break;
 8009092:	bf00      	nop
 8009094:	e004      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        break;
 8009096:	bf00      	nop
 8009098:	e002      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
        break;
 800909a:	bf00      	nop
 800909c:	e000      	b.n	80090a0 <DMA_CheckFifoParam+0xe8>
    break;
 800909e:	bf00      	nop
    }
  }

  return status;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a38      	ldr	r2, [pc, #224]	; (80091a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d022      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a36      	ldr	r2, [pc, #216]	; (80091a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01d      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a35      	ldr	r2, [pc, #212]	; (80091ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d018      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a33      	ldr	r2, [pc, #204]	; (80091b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a32      	ldr	r2, [pc, #200]	; (80091b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a30      	ldr	r2, [pc, #192]	; (80091b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a2f      	ldr	r2, [pc, #188]	; (80091bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d101      	bne.n	8009112 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01a      	beq.n	800914e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	3b08      	subs	r3, #8
 8009120:	4a28      	ldr	r2, [pc, #160]	; (80091c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	091b      	lsrs	r3, r3, #4
 8009128:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a24      	ldr	r2, [pc, #144]	; (80091cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800913c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	2201      	movs	r2, #1
 8009146:	409a      	lsls	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800914c:	e024      	b.n	8009198 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	3b10      	subs	r3, #16
 8009156:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	091b      	lsrs	r3, r3, #4
 800915e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4a1c      	ldr	r2, [pc, #112]	; (80091d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d806      	bhi.n	8009176 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4a1b      	ldr	r2, [pc, #108]	; (80091d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d902      	bls.n	8009176 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3308      	adds	r3, #8
 8009174:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4b18      	ldr	r3, [pc, #96]	; (80091dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800917a:	4413      	add	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009188:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2201      	movs	r2, #1
 8009192:	409a      	lsls	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	58025408 	.word	0x58025408
 80091a8:	5802541c 	.word	0x5802541c
 80091ac:	58025430 	.word	0x58025430
 80091b0:	58025444 	.word	0x58025444
 80091b4:	58025458 	.word	0x58025458
 80091b8:	5802546c 	.word	0x5802546c
 80091bc:	58025480 	.word	0x58025480
 80091c0:	58025494 	.word	0x58025494
 80091c4:	cccccccd 	.word	0xcccccccd
 80091c8:	16009600 	.word	0x16009600
 80091cc:	58025880 	.word	0x58025880
 80091d0:	aaaaaaab 	.word	0xaaaaaaab
 80091d4:	400204b8 	.word	0x400204b8
 80091d8:	4002040f 	.word	0x4002040f
 80091dc:	10008200 	.word	0x10008200
 80091e0:	40020880 	.word	0x40020880

080091e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04a      	beq.n	8009290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d847      	bhi.n	8009290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a25      	ldr	r2, [pc, #148]	; (800929c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d022      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a24      	ldr	r2, [pc, #144]	; (80092a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d01d      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a22      	ldr	r2, [pc, #136]	; (80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d018      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a21      	ldr	r2, [pc, #132]	; (80092a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1f      	ldr	r2, [pc, #124]	; (80092ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00e      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a1e      	ldr	r2, [pc, #120]	; (80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d009      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1c      	ldr	r2, [pc, #112]	; (80092b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1b      	ldr	r2, [pc, #108]	; (80092b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d101      	bne.n	8009254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4b17      	ldr	r3, [pc, #92]	; (80092bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800926c:	671a      	str	r2, [r3, #112]	; 0x70
 800926e:	e009      	b.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4b14      	ldr	r3, [pc, #80]	; (80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	461a      	mov	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009282:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3b01      	subs	r3, #1
 8009288:	2201      	movs	r2, #1
 800928a:	409a      	lsls	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	58025408 	.word	0x58025408
 80092a0:	5802541c 	.word	0x5802541c
 80092a4:	58025430 	.word	0x58025430
 80092a8:	58025444 	.word	0x58025444
 80092ac:	58025458 	.word	0x58025458
 80092b0:	5802546c 	.word	0x5802546c
 80092b4:	58025480 	.word	0x58025480
 80092b8:	58025494 	.word	0x58025494
 80092bc:	1600963f 	.word	0x1600963f
 80092c0:	58025940 	.word	0x58025940
 80092c4:	1000823f 	.word	0x1000823f
 80092c8:	40020940 	.word	0x40020940

080092cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b089      	sub	sp, #36	; 0x24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80092da:	4b89      	ldr	r3, [pc, #548]	; (8009500 <HAL_GPIO_Init+0x234>)
 80092dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092de:	e194      	b.n	800960a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	2101      	movs	r1, #1
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ec:	4013      	ands	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8186 	beq.w	8009604 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b01      	cmp	r3, #1
 8009302:	d005      	beq.n	8009310 <HAL_GPIO_Init+0x44>
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d130      	bne.n	8009372 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	2203      	movs	r2, #3
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	43db      	mvns	r3, r3
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	4013      	ands	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009346:	2201      	movs	r2, #1
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43db      	mvns	r3, r3
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	4013      	ands	r3, r2
 8009354:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	f003 0201 	and.w	r2, r3, #1
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	fa02 f303 	lsl.w	r3, r2, r3
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	4313      	orrs	r3, r2
 800936a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d017      	beq.n	80093ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	2203      	movs	r2, #3
 800938a:	fa02 f303 	lsl.w	r3, r2, r3
 800938e:	43db      	mvns	r3, r3
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4013      	ands	r3, r2
 8009394:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d123      	bne.n	8009402 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	08da      	lsrs	r2, r3, #3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3208      	adds	r2, #8
 80093c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	220f      	movs	r2, #15
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	43db      	mvns	r3, r3
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	4013      	ands	r3, r2
 80093dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f003 0307 	and.w	r3, r3, #7
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	fa02 f303 	lsl.w	r3, r2, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	08da      	lsrs	r2, r3, #3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3208      	adds	r2, #8
 80093fc:	69b9      	ldr	r1, [r7, #24]
 80093fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	2203      	movs	r2, #3
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	43db      	mvns	r3, r3
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	4013      	ands	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f003 0203 	and.w	r2, r3, #3
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	4313      	orrs	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80e0 	beq.w	8009604 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009444:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <HAL_GPIO_Init+0x238>)
 8009446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800944a:	4a2e      	ldr	r2, [pc, #184]	; (8009504 <HAL_GPIO_Init+0x238>)
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009454:	4b2b      	ldr	r3, [pc, #172]	; (8009504 <HAL_GPIO_Init+0x238>)
 8009456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009462:	4a29      	ldr	r2, [pc, #164]	; (8009508 <HAL_GPIO_Init+0x23c>)
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	089b      	lsrs	r3, r3, #2
 8009468:	3302      	adds	r3, #2
 800946a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800946e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	220f      	movs	r2, #15
 800947a:	fa02 f303 	lsl.w	r3, r2, r3
 800947e:	43db      	mvns	r3, r3
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	4013      	ands	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a20      	ldr	r2, [pc, #128]	; (800950c <HAL_GPIO_Init+0x240>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d052      	beq.n	8009534 <HAL_GPIO_Init+0x268>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a1f      	ldr	r2, [pc, #124]	; (8009510 <HAL_GPIO_Init+0x244>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d031      	beq.n	80094fa <HAL_GPIO_Init+0x22e>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <HAL_GPIO_Init+0x248>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d02b      	beq.n	80094f6 <HAL_GPIO_Init+0x22a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1d      	ldr	r2, [pc, #116]	; (8009518 <HAL_GPIO_Init+0x24c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d025      	beq.n	80094f2 <HAL_GPIO_Init+0x226>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a1c      	ldr	r2, [pc, #112]	; (800951c <HAL_GPIO_Init+0x250>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d01f      	beq.n	80094ee <HAL_GPIO_Init+0x222>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a1b      	ldr	r2, [pc, #108]	; (8009520 <HAL_GPIO_Init+0x254>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d019      	beq.n	80094ea <HAL_GPIO_Init+0x21e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1a      	ldr	r2, [pc, #104]	; (8009524 <HAL_GPIO_Init+0x258>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <HAL_GPIO_Init+0x21a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a19      	ldr	r2, [pc, #100]	; (8009528 <HAL_GPIO_Init+0x25c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00d      	beq.n	80094e2 <HAL_GPIO_Init+0x216>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a18      	ldr	r2, [pc, #96]	; (800952c <HAL_GPIO_Init+0x260>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <HAL_GPIO_Init+0x212>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a17      	ldr	r2, [pc, #92]	; (8009530 <HAL_GPIO_Init+0x264>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d101      	bne.n	80094da <HAL_GPIO_Init+0x20e>
 80094d6:	2309      	movs	r3, #9
 80094d8:	e02d      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094da:	230a      	movs	r3, #10
 80094dc:	e02b      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094de:	2308      	movs	r3, #8
 80094e0:	e029      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094e2:	2307      	movs	r3, #7
 80094e4:	e027      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094e6:	2306      	movs	r3, #6
 80094e8:	e025      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094ea:	2305      	movs	r3, #5
 80094ec:	e023      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094ee:	2304      	movs	r3, #4
 80094f0:	e021      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094f2:	2303      	movs	r3, #3
 80094f4:	e01f      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094f6:	2302      	movs	r3, #2
 80094f8:	e01d      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e01b      	b.n	8009536 <HAL_GPIO_Init+0x26a>
 80094fe:	bf00      	nop
 8009500:	58000080 	.word	0x58000080
 8009504:	58024400 	.word	0x58024400
 8009508:	58000400 	.word	0x58000400
 800950c:	58020000 	.word	0x58020000
 8009510:	58020400 	.word	0x58020400
 8009514:	58020800 	.word	0x58020800
 8009518:	58020c00 	.word	0x58020c00
 800951c:	58021000 	.word	0x58021000
 8009520:	58021400 	.word	0x58021400
 8009524:	58021800 	.word	0x58021800
 8009528:	58021c00 	.word	0x58021c00
 800952c:	58022000 	.word	0x58022000
 8009530:	58022400 	.word	0x58022400
 8009534:	2300      	movs	r3, #0
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	f002 0203 	and.w	r2, r2, #3
 800953c:	0092      	lsls	r2, r2, #2
 800953e:	4093      	lsls	r3, r2
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4313      	orrs	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009546:	4938      	ldr	r1, [pc, #224]	; (8009628 <HAL_GPIO_Init+0x35c>)
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	3302      	adds	r3, #2
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	43db      	mvns	r3, r3
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	4013      	ands	r3, r2
 8009564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800957a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	43db      	mvns	r3, r3
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	4013      	ands	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80095a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	43db      	mvns	r3, r3
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	4013      	ands	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	43db      	mvns	r3, r3
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4013      	ands	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	3301      	adds	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	fa22 f303 	lsr.w	r3, r2, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f ae63 	bne.w	80092e0 <HAL_GPIO_Init+0x14>
  }
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	3724      	adds	r7, #36	; 0x24
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	58000400 	.word	0x58000400

0800962c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	887b      	ldrh	r3, [r7, #2]
 800963e:	4013      	ands	r3, r2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009644:	2301      	movs	r3, #1
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	e001      	b.n	800964e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	807b      	strh	r3, [r7, #2]
 8009668:	4613      	mov	r3, r2
 800966a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800966c:	787b      	ldrb	r3, [r7, #1]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009672:	887a      	ldrh	r2, [r7, #2]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009678:	e003      	b.n	8009682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800967a:	887b      	ldrh	r3, [r7, #2]
 800967c:	041a      	lsls	r2, r3, #16
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	619a      	str	r2, [r3, #24]
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800968e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009690:	b08f      	sub	sp, #60	; 0x3c
 8009692:	af0a      	add	r7, sp, #40	; 0x28
 8009694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e054      	b.n	800974a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fb fa76 	bl	8004bac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2203      	movs	r2, #3
 80096c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d102      	bne.n	80096da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f00b faf3 	bl	8014cca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	687e      	ldr	r6, [r7, #4]
 80096ec:	466d      	mov	r5, sp
 80096ee:	f106 0410 	add.w	r4, r6, #16
 80096f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80096fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8009702:	1d33      	adds	r3, r6, #4
 8009704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009706:	6838      	ldr	r0, [r7, #0]
 8009708:	f00b fa60 	bl	8014bcc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f00b faea 	bl	8014cec <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	603b      	str	r3, [r7, #0]
 800971e:	687e      	ldr	r6, [r7, #4]
 8009720:	466d      	mov	r5, sp
 8009722:	f106 0410 	add.w	r4, r6, #16
 8009726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800972a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800972c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800972e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009732:	e885 0003 	stmia.w	r5, {r0, r1}
 8009736:	1d33      	adds	r3, r6, #4
 8009738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800973a:	6838      	ldr	r0, [r7, #0]
 800973c:	f00b fc92 	bl	8015064 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009752 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009752:	b590      	push	{r4, r7, lr}
 8009754:	b089      	sub	sp, #36	; 0x24
 8009756:	af04      	add	r7, sp, #16
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	461a      	mov	r2, r3
 8009760:	4603      	mov	r3, r0
 8009762:	70fb      	strb	r3, [r7, #3]
 8009764:	460b      	mov	r3, r1
 8009766:	70bb      	strb	r3, [r7, #2]
 8009768:	4613      	mov	r3, r2
 800976a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_HCD_HC_Init+0x28>
 8009776:	2302      	movs	r3, #2
 8009778:	e076      	b.n	8009868 <HAL_HCD_HC_Init+0x116>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	212c      	movs	r1, #44	; 0x2c
 8009788:	fb01 f303 	mul.w	r3, r1, r3
 800978c:	4413      	add	r3, r2
 800978e:	333d      	adds	r3, #61	; 0x3d
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	212c      	movs	r1, #44	; 0x2c
 800979a:	fb01 f303 	mul.w	r3, r1, r3
 800979e:	4413      	add	r3, r2
 80097a0:	3338      	adds	r3, #56	; 0x38
 80097a2:	787a      	ldrb	r2, [r7, #1]
 80097a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	212c      	movs	r1, #44	; 0x2c
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	3340      	adds	r3, #64	; 0x40
 80097b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80097b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	212c      	movs	r1, #44	; 0x2c
 80097be:	fb01 f303 	mul.w	r3, r1, r3
 80097c2:	4413      	add	r3, r2
 80097c4:	3339      	adds	r3, #57	; 0x39
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80097ca:	78fb      	ldrb	r3, [r7, #3]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	212c      	movs	r1, #44	; 0x2c
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	333f      	adds	r3, #63	; 0x3f
 80097d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80097dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	78ba      	ldrb	r2, [r7, #2]
 80097e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097e6:	b2d0      	uxtb	r0, r2
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	212c      	movs	r1, #44	; 0x2c
 80097ec:	fb01 f303 	mul.w	r3, r1, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	333a      	adds	r3, #58	; 0x3a
 80097f4:	4602      	mov	r2, r0
 80097f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80097f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da09      	bge.n	8009814 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	212c      	movs	r1, #44	; 0x2c
 8009806:	fb01 f303 	mul.w	r3, r1, r3
 800980a:	4413      	add	r3, r2
 800980c:	333b      	adds	r3, #59	; 0x3b
 800980e:	2201      	movs	r2, #1
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	e008      	b.n	8009826 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	212c      	movs	r1, #44	; 0x2c
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	333b      	adds	r3, #59	; 0x3b
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	212c      	movs	r1, #44	; 0x2c
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	333c      	adds	r3, #60	; 0x3c
 8009834:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009838:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	787c      	ldrb	r4, [r7, #1]
 8009840:	78ba      	ldrb	r2, [r7, #2]
 8009842:	78f9      	ldrb	r1, [r7, #3]
 8009844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009846:	9302      	str	r3, [sp, #8]
 8009848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4623      	mov	r3, r4
 8009856:	f00b fd87 	bl	8015368 <USB_HC_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	bd90      	pop	{r4, r7, pc}

08009870 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_HCD_HC_Halt+0x1e>
 800988a:	2302      	movs	r3, #2
 800988c:	e00f      	b.n	80098ae <HAL_HCD_HC_Halt+0x3e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f00b ffd9 	bl	8015856 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	70fb      	strb	r3, [r7, #3]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70bb      	strb	r3, [r7, #2]
 80098ce:	4613      	mov	r3, r2
 80098d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	212c      	movs	r1, #44	; 0x2c
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	4413      	add	r3, r2
 80098de:	333b      	adds	r3, #59	; 0x3b
 80098e0:	78ba      	ldrb	r2, [r7, #2]
 80098e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	212c      	movs	r1, #44	; 0x2c
 80098ea:	fb01 f303 	mul.w	r3, r1, r3
 80098ee:	4413      	add	r3, r2
 80098f0:	333f      	adds	r3, #63	; 0x3f
 80098f2:	787a      	ldrb	r2, [r7, #1]
 80098f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80098f6:	7c3b      	ldrb	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d112      	bne.n	8009922 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	212c      	movs	r1, #44	; 0x2c
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	4413      	add	r3, r2
 8009908:	3342      	adds	r3, #66	; 0x42
 800990a:	2203      	movs	r2, #3
 800990c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	212c      	movs	r1, #44	; 0x2c
 8009914:	fb01 f303 	mul.w	r3, r1, r3
 8009918:	4413      	add	r3, r2
 800991a:	333d      	adds	r3, #61	; 0x3d
 800991c:	7f3a      	ldrb	r2, [r7, #28]
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e008      	b.n	8009934 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	212c      	movs	r1, #44	; 0x2c
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	3342      	adds	r3, #66	; 0x42
 8009930:	2202      	movs	r2, #2
 8009932:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009934:	787b      	ldrb	r3, [r7, #1]
 8009936:	2b03      	cmp	r3, #3
 8009938:	f200 80c6 	bhi.w	8009ac8 <HAL_HCD_HC_SubmitRequest+0x210>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009955 	.word	0x08009955
 8009948:	08009ab5 	.word	0x08009ab5
 800994c:	080099b9 	.word	0x080099b9
 8009950:	08009a37 	.word	0x08009a37
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009954:	7c3b      	ldrb	r3, [r7, #16]
 8009956:	2b01      	cmp	r3, #1
 8009958:	f040 80b8 	bne.w	8009acc <HAL_HCD_HC_SubmitRequest+0x214>
 800995c:	78bb      	ldrb	r3, [r7, #2]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f040 80b4 	bne.w	8009acc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009964:	8b3b      	ldrh	r3, [r7, #24]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d108      	bne.n	800997c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	212c      	movs	r1, #44	; 0x2c
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3355      	adds	r3, #85	; 0x55
 8009978:	2201      	movs	r2, #1
 800997a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	212c      	movs	r1, #44	; 0x2c
 8009982:	fb01 f303 	mul.w	r3, r1, r3
 8009986:	4413      	add	r3, r2
 8009988:	3355      	adds	r3, #85	; 0x55
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	212c      	movs	r1, #44	; 0x2c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3342      	adds	r3, #66	; 0x42
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80099a2:	e093      	b.n	8009acc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	212c      	movs	r1, #44	; 0x2c
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	3342      	adds	r3, #66	; 0x42
 80099b2:	2202      	movs	r2, #2
 80099b4:	701a      	strb	r2, [r3, #0]
      break;
 80099b6:	e089      	b.n	8009acc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80099b8:	78bb      	ldrb	r3, [r7, #2]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d11d      	bne.n	80099fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	212c      	movs	r1, #44	; 0x2c
 80099c4:	fb01 f303 	mul.w	r3, r1, r3
 80099c8:	4413      	add	r3, r2
 80099ca:	3355      	adds	r3, #85	; 0x55
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	212c      	movs	r1, #44	; 0x2c
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	4413      	add	r3, r2
 80099de:	3342      	adds	r3, #66	; 0x42
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80099e4:	e073      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	212c      	movs	r1, #44	; 0x2c
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	3342      	adds	r3, #66	; 0x42
 80099f4:	2202      	movs	r2, #2
 80099f6:	701a      	strb	r2, [r3, #0]
      break;
 80099f8:	e069      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	212c      	movs	r1, #44	; 0x2c
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	3354      	adds	r3, #84	; 0x54
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d109      	bne.n	8009a22 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	212c      	movs	r1, #44	; 0x2c
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	3342      	adds	r3, #66	; 0x42
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
      break;
 8009a20:	e055      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	212c      	movs	r1, #44	; 0x2c
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3342      	adds	r3, #66	; 0x42
 8009a30:	2202      	movs	r2, #2
 8009a32:	701a      	strb	r2, [r3, #0]
      break;
 8009a34:	e04b      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009a36:	78bb      	ldrb	r3, [r7, #2]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11d      	bne.n	8009a78 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	212c      	movs	r1, #44	; 0x2c
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	3355      	adds	r3, #85	; 0x55
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d109      	bne.n	8009a64 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	212c      	movs	r1, #44	; 0x2c
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3342      	adds	r3, #66	; 0x42
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009a62:	e034      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	212c      	movs	r1, #44	; 0x2c
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	3342      	adds	r3, #66	; 0x42
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
      break;
 8009a76:	e02a      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3354      	adds	r3, #84	; 0x54
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d109      	bne.n	8009aa0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	212c      	movs	r1, #44	; 0x2c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	3342      	adds	r3, #66	; 0x42
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
      break;
 8009a9e:	e016      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	3342      	adds	r3, #66	; 0x42
 8009aae:	2202      	movs	r2, #2
 8009ab0:	701a      	strb	r2, [r3, #0]
      break;
 8009ab2:	e00c      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	212c      	movs	r1, #44	; 0x2c
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	3342      	adds	r3, #66	; 0x42
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	701a      	strb	r2, [r3, #0]
      break;
 8009ac6:	e002      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009ac8:	bf00      	nop
 8009aca:	e000      	b.n	8009ace <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009acc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009ace:	78fb      	ldrb	r3, [r7, #3]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	212c      	movs	r1, #44	; 0x2c
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	3344      	adds	r3, #68	; 0x44
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	8b3a      	ldrh	r2, [r7, #24]
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	202c      	movs	r0, #44	; 0x2c
 8009ae8:	fb00 f303 	mul.w	r3, r0, r3
 8009aec:	440b      	add	r3, r1
 8009aee:	334c      	adds	r3, #76	; 0x4c
 8009af0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	212c      	movs	r1, #44	; 0x2c
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	3360      	adds	r3, #96	; 0x60
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	212c      	movs	r1, #44	; 0x2c
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	3350      	adds	r3, #80	; 0x50
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	212c      	movs	r1, #44	; 0x2c
 8009b1c:	fb01 f303 	mul.w	r3, r1, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	3339      	adds	r3, #57	; 0x39
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	212c      	movs	r1, #44	; 0x2c
 8009b2e:	fb01 f303 	mul.w	r3, r1, r3
 8009b32:	4413      	add	r3, r2
 8009b34:	3361      	adds	r3, #97	; 0x61
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	222c      	movs	r2, #44	; 0x2c
 8009b42:	fb02 f303 	mul.w	r3, r2, r3
 8009b46:	3338      	adds	r3, #56	; 0x38
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	18d1      	adds	r1, r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	461a      	mov	r2, r3
 8009b54:	f00b fd2c 	bl	80155b0 <USB_HC_StartXfer>
 8009b58:	4603      	mov	r3, r0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop

08009b64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f00b fa30 	bl	8014fe0 <USB_GetMode>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	f040 80fa 	bne.w	8009d7c <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f00b f9f3 	bl	8014f78 <USB_ReadInterrupts>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80f0 	beq.w	8009d7a <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f00b f9ea 	bl	8014f78 <USB_ReadInterrupts>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bae:	d104      	bne.n	8009bba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f00b f9da 	bl	8014f78 <USB_ReadInterrupts>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bce:	d104      	bne.n	8009bda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f00b f9ca 	bl	8014f78 <USB_ReadInterrupts>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bee:	d104      	bne.n	8009bfa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009bf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f00b f9ba 	bl	8014f78 <USB_ReadInterrupts>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d103      	bne.n	8009c16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2202      	movs	r2, #2
 8009c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f00b f9ac 	bl	8014f78 <USB_ReadInterrupts>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c2a:	d120      	bne.n	8009c6e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009c34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d113      	bne.n	8009c6e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c46:	2110      	movs	r1, #16
 8009c48:	6938      	ldr	r0, [r7, #16]
 8009c4a:	f00b f89b 	bl	8014d84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009c4e:	6938      	ldr	r0, [r7, #16]
 8009c50:	f00b f8cc 	bl	8014dec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d105      	bne.n	8009c68 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2101      	movs	r1, #1
 8009c62:	4618      	mov	r0, r3
 8009c64:	f00b fab8 	bl	80151d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fb f81d 	bl	8004ca8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f00b f980 	bl	8014f78 <USB_ReadInterrupts>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c82:	d102      	bne.n	8009c8a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f9a3 	bl	800afd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f00b f972 	bl	8014f78 <USB_ReadInterrupts>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d106      	bne.n	8009cac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7fa ffe6 	bl	8004c70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2208      	movs	r2, #8
 8009caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f00b f961 	bl	8014f78 <USB_ReadInterrupts>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f003 0310 	and.w	r3, r3, #16
 8009cbc:	2b10      	cmp	r3, #16
 8009cbe:	d101      	bne.n	8009cc4 <HAL_HCD_IRQHandler+0x160>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e000      	b.n	8009cc6 <HAL_HCD_IRQHandler+0x162>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d012      	beq.n	8009cf0 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0210 	bic.w	r2, r2, #16
 8009cd8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f001 f8a6 	bl	800ae2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0210 	orr.w	r2, r2, #16
 8009cee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f00b f93f 	bl	8014f78 <USB_ReadInterrupts>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d04:	d13a      	bne.n	8009d7c <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f00b fd92 	bl	8015834 <USB_HC_ReadInterrupt>
 8009d10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e025      	b.n	8009d64 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f003 030f 	and.w	r3, r3, #15
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d018      	beq.n	8009d5e <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d42:	d106      	bne.n	8009d52 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8ab 	bl	8009ea6 <HCD_HC_IN_IRQHandler>
 8009d50:	e005      	b.n	8009d5e <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fcb5 	bl	800a6c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	3301      	adds	r3, #1
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d3d4      	bcc.n	8009d18 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d76:	615a      	str	r2, [r3, #20]
 8009d78:	e000      	b.n	8009d7c <HAL_HCD_IRQHandler+0x218>
      return;
 8009d7a:	bf00      	nop
    }
  }
}
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_HCD_Start+0x16>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e013      	b.n	8009dc0 <HAL_HCD_Start+0x3e>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2101      	movs	r1, #1
 8009da6:	4618      	mov	r0, r3
 8009da8:	f00b fa7d 	bl	80152a6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f00a ff79 	bl	8014ca8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d101      	bne.n	8009dde <HAL_HCD_Stop+0x16>
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e00d      	b.n	8009dfa <HAL_HCD_Stop+0x32>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00b fe6c 	bl	8015ac8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f00b fa1f 	bl	8015252 <USB_ResetPort>
 8009e14:	4603      	mov	r3, r0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	212c      	movs	r1, #44	; 0x2c
 8009e30:	fb01 f303 	mul.w	r3, r1, r3
 8009e34:	4413      	add	r3, r2
 8009e36:	3360      	adds	r3, #96	; 0x60
 8009e38:	781b      	ldrb	r3, [r3, #0]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	212c      	movs	r1, #44	; 0x2c
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3350      	adds	r3, #80	; 0x50
 8009e60:	681b      	ldr	r3, [r3, #0]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f00b fa63 	bl	8015346 <USB_GetCurrentFrame>
 8009e80:	4603      	mov	r3, r0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f00b fa3e 	bl	8015318 <USB_GetHostSpeed>
 8009e9c:	4603      	mov	r3, r0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b086      	sub	sp, #24
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	78fa      	ldrb	r2, [r7, #3]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f00b f86a 	bl	8014f9e <USB_ReadChInterrupts>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d119      	bne.n	8009f08 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	212c      	movs	r1, #44	; 0x2c
 8009eec:	fb01 f303 	mul.w	r3, r1, r3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3361      	adds	r3, #97	; 0x61
 8009ef4:	2207      	movs	r2, #7
 8009ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	78fa      	ldrb	r2, [r7, #3]
 8009efe:	4611      	mov	r1, r2
 8009f00:	4618      	mov	r0, r3
 8009f02:	f00b fca8 	bl	8015856 <USB_HC_Halt>
 8009f06:	e09a      	b.n	800a03e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	4618      	mov	r0, r3
 8009f12:	f00b f844 	bl	8014f9e <USB_ReadChInterrupts>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f20:	d11a      	bne.n	8009f58 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009f22:	78fb      	ldrb	r3, [r7, #3]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	212c      	movs	r1, #44	; 0x2c
 8009f3c:	fb01 f303 	mul.w	r3, r1, r3
 8009f40:	4413      	add	r3, r2
 8009f42:	3361      	adds	r3, #97	; 0x61
 8009f44:	2208      	movs	r2, #8
 8009f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	78fa      	ldrb	r2, [r7, #3]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	4618      	mov	r0, r3
 8009f52:	f00b fc80 	bl	8015856 <USB_HC_Halt>
 8009f56:	e072      	b.n	800a03e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	78fa      	ldrb	r2, [r7, #3]
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f00b f81c 	bl	8014f9e <USB_ReadChInterrupts>
 8009f66:	4603      	mov	r3, r0
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d119      	bne.n	8009fa4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2308      	movs	r3, #8
 8009f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	212c      	movs	r1, #44	; 0x2c
 8009f88:	fb01 f303 	mul.w	r3, r1, r3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3361      	adds	r3, #97	; 0x61
 8009f90:	2206      	movs	r2, #6
 8009f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	78fa      	ldrb	r2, [r7, #3]
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f00b fc5a 	bl	8015856 <USB_HC_Halt>
 8009fa2:	e04c      	b.n	800a03e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	78fa      	ldrb	r2, [r7, #3]
 8009faa:	4611      	mov	r1, r2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f00a fff6 	bl	8014f9e <USB_ReadChInterrupts>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fbc:	d11a      	bne.n	8009ff4 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	212c      	movs	r1, #44	; 0x2c
 8009fd8:	fb01 f303 	mul.w	r3, r1, r3
 8009fdc:	4413      	add	r3, r2
 8009fde:	3361      	adds	r3, #97	; 0x61
 8009fe0:	2209      	movs	r2, #9
 8009fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f00b fc32 	bl	8015856 <USB_HC_Halt>
 8009ff2:	e024      	b.n	800a03e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f00a ffce 	bl	8014f9e <USB_ReadChInterrupts>
 800a002:	4603      	mov	r3, r0
 800a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a008:	2b80      	cmp	r3, #128	; 0x80
 800a00a:	d118      	bne.n	800a03e <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4413      	add	r3, r2
 800a014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a018:	461a      	mov	r2, r3
 800a01a:	2380      	movs	r3, #128	; 0x80
 800a01c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	212c      	movs	r1, #44	; 0x2c
 800a024:	fb01 f303 	mul.w	r3, r1, r3
 800a028:	4413      	add	r3, r2
 800a02a:	3361      	adds	r3, #97	; 0x61
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f00b fc0c 	bl	8015856 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f00a ffa9 	bl	8014f9e <USB_ReadChInterrupts>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a056:	d111      	bne.n	800a07c <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f00b fbf8 	bl	8015856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a072:	461a      	mov	r2, r3
 800a074:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a078:	6093      	str	r3, [r2, #8]
 800a07a:	e322      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f00a ff8a 	bl	8014f9e <USB_ReadChInterrupts>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b01      	cmp	r3, #1
 800a092:	f040 80f0 	bne.w	800a276 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d019      	beq.n	800a0e4 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	212c      	movs	r1, #44	; 0x2c
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3348      	adds	r3, #72	; 0x48
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	1a8a      	subs	r2, r1, r2
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	202c      	movs	r0, #44	; 0x2c
 800a0da:	fb00 f303 	mul.w	r3, r0, r3
 800a0de:	440b      	add	r3, r1
 800a0e0:	3350      	adds	r3, #80	; 0x50
 800a0e2:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	212c      	movs	r1, #44	; 0x2c
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	3361      	adds	r3, #97	; 0x61
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	212c      	movs	r1, #44	; 0x2c
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	335c      	adds	r3, #92	; 0x5c
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a114:	461a      	mov	r2, r3
 800a116:	2301      	movs	r3, #1
 800a118:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	212c      	movs	r1, #44	; 0x2c
 800a120:	fb01 f303 	mul.w	r3, r1, r3
 800a124:	4413      	add	r3, r2
 800a126:	333f      	adds	r3, #63	; 0x3f
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	212c      	movs	r1, #44	; 0x2c
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	4413      	add	r3, r2
 800a13a:	333f      	adds	r3, #63	; 0x3f
 800a13c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d110      	bne.n	800a164 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	78fa      	ldrb	r2, [r7, #3]
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f00b fb83 	bl	8015856 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4413      	add	r3, r2
 800a158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a15c:	461a      	mov	r2, r3
 800a15e:	2310      	movs	r3, #16
 800a160:	6093      	str	r3, [r2, #8]
 800a162:	e039      	b.n	800a1d8 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	212c      	movs	r1, #44	; 0x2c
 800a16a:	fb01 f303 	mul.w	r3, r1, r3
 800a16e:	4413      	add	r3, r2
 800a170:	333f      	adds	r3, #63	; 0x3f
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b03      	cmp	r3, #3
 800a176:	d009      	beq.n	800a18c <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	212c      	movs	r1, #44	; 0x2c
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	333f      	adds	r3, #63	; 0x3f
 800a186:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d125      	bne.n	800a1d8 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	4413      	add	r3, r2
 800a194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	0151      	lsls	r1, r2, #5
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	212c      	movs	r1, #44	; 0x2c
 800a1b2:	fb01 f303 	mul.w	r3, r1, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3360      	adds	r3, #96	; 0x60
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	212c      	movs	r1, #44	; 0x2c
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3360      	adds	r3, #96	; 0x60
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fa fd76 	bl	8004cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d135      	bne.n	800a24c <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	212c      	movs	r1, #44	; 0x2c
 800a1e6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3350      	adds	r3, #80	; 0x50
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	78fa      	ldrb	r2, [r7, #3]
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	202c      	movs	r0, #44	; 0x2c
 800a1f6:	fb00 f202 	mul.w	r2, r0, r2
 800a1fa:	440a      	add	r2, r1
 800a1fc:	3240      	adds	r2, #64	; 0x40
 800a1fe:	8812      	ldrh	r2, [r2, #0]
 800a200:	4413      	add	r3, r2
 800a202:	3b01      	subs	r3, #1
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	202c      	movs	r0, #44	; 0x2c
 800a20a:	fb00 f202 	mul.w	r2, r0, r2
 800a20e:	440a      	add	r2, r1
 800a210:	3240      	adds	r2, #64	; 0x40
 800a212:	8812      	ldrh	r2, [r2, #0]
 800a214:	fbb3 f3f2 	udiv	r3, r3, r2
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 8250 	beq.w	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	212c      	movs	r1, #44	; 0x2c
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	4413      	add	r3, r2
 800a22e:	3354      	adds	r3, #84	; 0x54
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f082 0201 	eor.w	r2, r2, #1
 800a238:	b2d0      	uxtb	r0, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	212c      	movs	r1, #44	; 0x2c
 800a23e:	fb01 f303 	mul.w	r3, r1, r3
 800a242:	4413      	add	r3, r2
 800a244:	3354      	adds	r3, #84	; 0x54
 800a246:	4602      	mov	r2, r0
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	e23a      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	212c      	movs	r1, #44	; 0x2c
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3354      	adds	r3, #84	; 0x54
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	f082 0201 	eor.w	r2, r2, #1
 800a262:	b2d0      	uxtb	r0, r2
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	212c      	movs	r1, #44	; 0x2c
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	3354      	adds	r3, #84	; 0x54
 800a270:	4602      	mov	r2, r0
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	e225      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	78fa      	ldrb	r2, [r7, #3]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f00a fe8d 	bl	8014f9e <USB_ReadChInterrupts>
 800a284:	4603      	mov	r3, r0
 800a286:	f003 0320 	and.w	r3, r3, #32
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d109      	bne.n	800a2a2 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4413      	add	r3, r2
 800a296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29a:	461a      	mov	r2, r3
 800a29c:	2320      	movs	r3, #32
 800a29e:	6093      	str	r3, [r2, #8]
 800a2a0:	e20f      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f00a fe77 	bl	8014f9e <USB_ReadChInterrupts>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	f040 8168 	bne.w	800a58c <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	212c      	movs	r1, #44	; 0x2c
 800a2d4:	fb01 f303 	mul.w	r3, r1, r3
 800a2d8:	4413      	add	r3, r2
 800a2da:	3361      	adds	r3, #97	; 0x61
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d112      	bne.n	800a308 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	212c      	movs	r1, #44	; 0x2c
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3361      	adds	r3, #97	; 0x61
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a2f4:	78fb      	ldrb	r3, [r7, #3]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	212c      	movs	r1, #44	; 0x2c
 800a2fa:	fb01 f303 	mul.w	r3, r1, r3
 800a2fe:	4413      	add	r3, r2
 800a300:	3360      	adds	r3, #96	; 0x60
 800a302:	2201      	movs	r2, #1
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	e133      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	212c      	movs	r1, #44	; 0x2c
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	3361      	adds	r3, #97	; 0x61
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d112      	bne.n	800a342 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	212c      	movs	r1, #44	; 0x2c
 800a322:	fb01 f303 	mul.w	r3, r1, r3
 800a326:	4413      	add	r3, r2
 800a328:	3361      	adds	r3, #97	; 0x61
 800a32a:	2202      	movs	r2, #2
 800a32c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	212c      	movs	r1, #44	; 0x2c
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	4413      	add	r3, r2
 800a33a:	3360      	adds	r3, #96	; 0x60
 800a33c:	2205      	movs	r2, #5
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e116      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	212c      	movs	r1, #44	; 0x2c
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	3361      	adds	r3, #97	; 0x61
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b07      	cmp	r3, #7
 800a354:	d009      	beq.n	800a36a <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	212c      	movs	r1, #44	; 0x2c
 800a35c:	fb01 f303 	mul.w	r3, r1, r3
 800a360:	4413      	add	r3, r2
 800a362:	3361      	adds	r3, #97	; 0x61
 800a364:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a366:	2b09      	cmp	r3, #9
 800a368:	d158      	bne.n	800a41c <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	212c      	movs	r1, #44	; 0x2c
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	4413      	add	r3, r2
 800a376:	3361      	adds	r3, #97	; 0x61
 800a378:	2202      	movs	r2, #2
 800a37a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	222c      	movs	r2, #44	; 0x2c
 800a382:	fb03 f202 	mul.w	r2, r3, r2
 800a386:	440a      	add	r2, r1
 800a388:	325c      	adds	r2, #92	; 0x5c
 800a38a:	6812      	ldr	r2, [r2, #0]
 800a38c:	3201      	adds	r2, #1
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	202c      	movs	r0, #44	; 0x2c
 800a392:	fb00 f303 	mul.w	r3, r0, r3
 800a396:	440b      	add	r3, r1
 800a398:	335c      	adds	r3, #92	; 0x5c
 800a39a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	212c      	movs	r1, #44	; 0x2c
 800a3a2:	fb01 f303 	mul.w	r3, r1, r3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	335c      	adds	r3, #92	; 0x5c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d912      	bls.n	800a3d6 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	212c      	movs	r1, #44	; 0x2c
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	335c      	adds	r3, #92	; 0x5c
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a3c2:	78fb      	ldrb	r3, [r7, #3]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	212c      	movs	r1, #44	; 0x2c
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3360      	adds	r3, #96	; 0x60
 800a3d0:	2204      	movs	r2, #4
 800a3d2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a3d4:	e0cc      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	212c      	movs	r1, #44	; 0x2c
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3360      	adds	r3, #96	; 0x60
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a406:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	461a      	mov	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a41a:	e0a9      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	212c      	movs	r1, #44	; 0x2c
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	4413      	add	r3, r2
 800a428:	3361      	adds	r3, #97	; 0x61
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b05      	cmp	r3, #5
 800a42e:	d109      	bne.n	800a444 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	212c      	movs	r1, #44	; 0x2c
 800a436:	fb01 f303 	mul.w	r3, r1, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	3361      	adds	r3, #97	; 0x61
 800a43e:	2202      	movs	r2, #2
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	e095      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	212c      	movs	r1, #44	; 0x2c
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	4413      	add	r3, r2
 800a450:	3361      	adds	r3, #97	; 0x61
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b03      	cmp	r3, #3
 800a456:	d109      	bne.n	800a46c <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	212c      	movs	r1, #44	; 0x2c
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	3361      	adds	r3, #97	; 0x61
 800a466:	2202      	movs	r2, #2
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e081      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	212c      	movs	r1, #44	; 0x2c
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	4413      	add	r3, r2
 800a478:	3361      	adds	r3, #97	; 0x61
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d13f      	bne.n	800a500 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	212c      	movs	r1, #44	; 0x2c
 800a486:	fb01 f303 	mul.w	r3, r1, r3
 800a48a:	4413      	add	r3, r2
 800a48c:	3361      	adds	r3, #97	; 0x61
 800a48e:	2202      	movs	r2, #2
 800a490:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	212c      	movs	r1, #44	; 0x2c
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	4413      	add	r3, r2
 800a49e:	3360      	adds	r3, #96	; 0x60
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	212c      	movs	r1, #44	; 0x2c
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	333f      	adds	r3, #63	; 0x3f
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d009      	beq.n	800a4cc <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	212c      	movs	r1, #44	; 0x2c
 800a4be:	fb01 f303 	mul.w	r3, r1, r3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	333f      	adds	r3, #63	; 0x3f
 800a4c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d151      	bne.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	e037      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	212c      	movs	r1, #44	; 0x2c
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	3361      	adds	r3, #97	; 0x61
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b08      	cmp	r3, #8
 800a512:	d122      	bne.n	800a55a <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	212c      	movs	r1, #44	; 0x2c
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	3361      	adds	r3, #97	; 0x61
 800a522:	2202      	movs	r2, #2
 800a524:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	222c      	movs	r2, #44	; 0x2c
 800a52c:	fb03 f202 	mul.w	r2, r3, r2
 800a530:	440a      	add	r2, r1
 800a532:	325c      	adds	r2, #92	; 0x5c
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	3201      	adds	r2, #1
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	202c      	movs	r0, #44	; 0x2c
 800a53c:	fb00 f303 	mul.w	r3, r0, r3
 800a540:	440b      	add	r3, r1
 800a542:	335c      	adds	r3, #92	; 0x5c
 800a544:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	212c      	movs	r1, #44	; 0x2c
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	4413      	add	r3, r2
 800a552:	3360      	adds	r3, #96	; 0x60
 800a554:	2204      	movs	r2, #4
 800a556:	701a      	strb	r2, [r3, #0]
 800a558:	e00a      	b.n	800a570 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	212c      	movs	r1, #44	; 0x2c
 800a560:	fb01 f303 	mul.w	r3, r1, r3
 800a564:	4413      	add	r3, r2
 800a566:	3361      	adds	r3, #97	; 0x61
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	f000 80a8 	beq.w	800a6c0 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	3360      	adds	r3, #96	; 0x60
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7fa fb9d 	bl	8004cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a58a:	e09a      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	78fa      	ldrb	r2, [r7, #3]
 800a592:	4611      	mov	r1, r2
 800a594:	4618      	mov	r0, r3
 800a596:	f00a fd02 	bl	8014f9e <USB_ReadChInterrupts>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a0:	2b40      	cmp	r3, #64	; 0x40
 800a5a2:	d122      	bne.n	800a5ea <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2340      	movs	r3, #64	; 0x40
 800a5b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	212c      	movs	r1, #44	; 0x2c
 800a5bc:	fb01 f303 	mul.w	r3, r1, r3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	3361      	adds	r3, #97	; 0x61
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	212c      	movs	r1, #44	; 0x2c
 800a5ce:	fb01 f303 	mul.w	r3, r1, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	335c      	adds	r3, #92	; 0x5c
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f00b f937 	bl	8015856 <USB_HC_Halt>
 800a5e8:	e06b      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f00a fcd3 	bl	8014f9e <USB_ReadChInterrupts>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f003 0310 	and.w	r3, r3, #16
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d15f      	bne.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	212c      	movs	r1, #44	; 0x2c
 800a608:	fb01 f303 	mul.w	r3, r1, r3
 800a60c:	4413      	add	r3, r2
 800a60e:	333f      	adds	r3, #63	; 0x3f
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b03      	cmp	r3, #3
 800a614:	d119      	bne.n	800a64a <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	212c      	movs	r1, #44	; 0x2c
 800a61c:	fb01 f303 	mul.w	r3, r1, r3
 800a620:	4413      	add	r3, r2
 800a622:	335c      	adds	r3, #92	; 0x5c
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	212c      	movs	r1, #44	; 0x2c
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	3361      	adds	r3, #97	; 0x61
 800a636:	2204      	movs	r2, #4
 800a638:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f00b f907 	bl	8015856 <USB_HC_Halt>
 800a648:	e030      	b.n	800a6ac <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a64a:	78fb      	ldrb	r3, [r7, #3]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	212c      	movs	r1, #44	; 0x2c
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	333f      	adds	r3, #63	; 0x3f
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d009      	beq.n	800a672 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	212c      	movs	r1, #44	; 0x2c
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	4413      	add	r3, r2
 800a66a:	333f      	adds	r3, #63	; 0x3f
 800a66c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d11c      	bne.n	800a6ac <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	212c      	movs	r1, #44	; 0x2c
 800a678:	fb01 f303 	mul.w	r3, r1, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	335c      	adds	r3, #92	; 0x5c
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10f      	bne.n	800a6ac <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	212c      	movs	r1, #44	; 0x2c
 800a692:	fb01 f303 	mul.w	r3, r1, r3
 800a696:	4413      	add	r3, r2
 800a698:	3361      	adds	r3, #97	; 0x61
 800a69a:	2204      	movs	r2, #4
 800a69c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00b f8d5 	bl	8015856 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	6093      	str	r3, [r2, #8]
 800a6be:	e000      	b.n	800a6c2 <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a6c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	78fa      	ldrb	r2, [r7, #3]
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f00a fc59 	bl	8014f9e <USB_ReadChInterrupts>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d119      	bne.n	800a72a <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a702:	461a      	mov	r2, r3
 800a704:	2304      	movs	r3, #4
 800a706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	212c      	movs	r1, #44	; 0x2c
 800a70e:	fb01 f303 	mul.w	r3, r1, r3
 800a712:	4413      	add	r3, r2
 800a714:	3361      	adds	r3, #97	; 0x61
 800a716:	2207      	movs	r2, #7
 800a718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f00b f897 	bl	8015856 <USB_HC_Halt>
 800a728:	e37d      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f00a fc33 	bl	8014f9e <USB_ReadChInterrupts>
 800a738:	4603      	mov	r3, r0
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b20      	cmp	r3, #32
 800a740:	d136      	bne.n	800a7b0 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74e:	461a      	mov	r2, r3
 800a750:	2320      	movs	r3, #32
 800a752:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	212c      	movs	r1, #44	; 0x2c
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	4413      	add	r3, r2
 800a760:	333d      	adds	r3, #61	; 0x3d
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b01      	cmp	r3, #1
 800a766:	f040 835e 	bne.w	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	212c      	movs	r1, #44	; 0x2c
 800a770:	fb01 f303 	mul.w	r3, r1, r3
 800a774:	4413      	add	r3, r2
 800a776:	333d      	adds	r3, #61	; 0x3d
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	212c      	movs	r1, #44	; 0x2c
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	4413      	add	r3, r2
 800a788:	3360      	adds	r3, #96	; 0x60
 800a78a:	2202      	movs	r2, #2
 800a78c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	212c      	movs	r1, #44	; 0x2c
 800a794:	fb01 f303 	mul.w	r3, r1, r3
 800a798:	4413      	add	r3, r2
 800a79a:	3361      	adds	r3, #97	; 0x61
 800a79c:	2203      	movs	r2, #3
 800a79e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f00b f854 	bl	8015856 <USB_HC_Halt>
 800a7ae:	e33a      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f00a fbf0 	bl	8014f9e <USB_ReadChInterrupts>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c8:	d111      	bne.n	800a7ee <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f00b f835 	bl	8015856 <USB_HC_Halt>
 800a7ec:	e31b      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	78fa      	ldrb	r2, [r7, #3]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f00a fbd1 	bl	8014f9e <USB_ReadChInterrupts>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	2b01      	cmp	r3, #1
 800a804:	d140      	bne.n	800a888 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a806:	78fb      	ldrb	r3, [r7, #3]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	212c      	movs	r1, #44	; 0x2c
 800a80c:	fb01 f303 	mul.w	r3, r1, r3
 800a810:	4413      	add	r3, r2
 800a812:	335c      	adds	r3, #92	; 0x5c
 800a814:	2200      	movs	r2, #0
 800a816:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	78fa      	ldrb	r2, [r7, #3]
 800a81e:	4611      	mov	r1, r2
 800a820:	4618      	mov	r0, r3
 800a822:	f00a fbbc 	bl	8014f9e <USB_ReadChInterrupts>
 800a826:	4603      	mov	r3, r0
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d111      	bne.n	800a854 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	212c      	movs	r1, #44	; 0x2c
 800a836:	fb01 f303 	mul.w	r3, r1, r3
 800a83a:	4413      	add	r3, r2
 800a83c:	333d      	adds	r3, #61	; 0x3d
 800a83e:	2201      	movs	r2, #1
 800a840:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84e:	461a      	mov	r2, r3
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a860:	461a      	mov	r2, r3
 800a862:	2301      	movs	r3, #1
 800a864:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	212c      	movs	r1, #44	; 0x2c
 800a86c:	fb01 f303 	mul.w	r3, r1, r3
 800a870:	4413      	add	r3, r2
 800a872:	3361      	adds	r3, #97	; 0x61
 800a874:	2201      	movs	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	4611      	mov	r1, r2
 800a880:	4618      	mov	r0, r3
 800a882:	f00a ffe8 	bl	8015856 <USB_HC_Halt>
 800a886:	e2ce      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f00a fb84 	bl	8014f9e <USB_ReadChInterrupts>
 800a896:	4603      	mov	r3, r0
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d12b      	bne.n	800a8f8 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	212c      	movs	r1, #44	; 0x2c
 800a8a6:	fb01 f303 	mul.w	r3, r1, r3
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3361      	adds	r3, #97	; 0x61
 800a8ae:	2205      	movs	r2, #5
 800a8b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	212c      	movs	r1, #44	; 0x2c
 800a8b8:	fb01 f303 	mul.w	r3, r1, r3
 800a8bc:	4413      	add	r3, r2
 800a8be:	333d      	adds	r3, #61	; 0x3d
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	212c      	movs	r1, #44	; 0x2c
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	335c      	adds	r3, #92	; 0x5c
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f00a ffb9 	bl	8015856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	6093      	str	r3, [r2, #8]
 800a8f6:	e296      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f00a fb4c 	bl	8014f9e <USB_ReadChInterrupts>
 800a906:	4603      	mov	r3, r0
 800a908:	f003 0308 	and.w	r3, r3, #8
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d119      	bne.n	800a944 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	4413      	add	r3, r2
 800a918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91c:	461a      	mov	r2, r3
 800a91e:	2308      	movs	r3, #8
 800a920:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	212c      	movs	r1, #44	; 0x2c
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	4413      	add	r3, r2
 800a92e:	3361      	adds	r3, #97	; 0x61
 800a930:	2206      	movs	r2, #6
 800a932:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	78fa      	ldrb	r2, [r7, #3]
 800a93a:	4611      	mov	r1, r2
 800a93c:	4618      	mov	r0, r3
 800a93e:	f00a ff8a 	bl	8015856 <USB_HC_Halt>
 800a942:	e270      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f00a fb26 	bl	8014f9e <USB_ReadChInterrupts>
 800a952:	4603      	mov	r3, r0
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b10      	cmp	r3, #16
 800a95a:	d13f      	bne.n	800a9dc <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a95c:	78fb      	ldrb	r3, [r7, #3]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	212c      	movs	r1, #44	; 0x2c
 800a962:	fb01 f303 	mul.w	r3, r1, r3
 800a966:	4413      	add	r3, r2
 800a968:	335c      	adds	r3, #92	; 0x5c
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	212c      	movs	r1, #44	; 0x2c
 800a974:	fb01 f303 	mul.w	r3, r1, r3
 800a978:	4413      	add	r3, r2
 800a97a:	3361      	adds	r3, #97	; 0x61
 800a97c:	2204      	movs	r2, #4
 800a97e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	212c      	movs	r1, #44	; 0x2c
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	4413      	add	r3, r2
 800a98c:	333d      	adds	r3, #61	; 0x3d
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d112      	bne.n	800a9ba <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	212c      	movs	r1, #44	; 0x2c
 800a99a:	fb01 f303 	mul.w	r3, r1, r3
 800a99e:	4413      	add	r3, r2
 800a9a0:	333c      	adds	r3, #60	; 0x3c
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d108      	bne.n	800a9ba <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	212c      	movs	r1, #44	; 0x2c
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	333d      	adds	r3, #61	; 0x3d
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f00a ff47 	bl	8015856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2310      	movs	r3, #16
 800a9d8:	6093      	str	r3, [r2, #8]
 800a9da:	e224      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f00a fada 	bl	8014f9e <USB_ReadChInterrupts>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f0:	2b80      	cmp	r3, #128	; 0x80
 800a9f2:	d161      	bne.n	800aab8 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d110      	bne.n	800aa1e <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	212c      	movs	r1, #44	; 0x2c
 800aa02:	fb01 f303 	mul.w	r3, r1, r3
 800aa06:	4413      	add	r3, r2
 800aa08:	3361      	adds	r3, #97	; 0x61
 800aa0a:	2207      	movs	r2, #7
 800aa0c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f00a ff1d 	bl	8015856 <USB_HC_Halt>
 800aa1c:	e042      	b.n	800aaa4 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	222c      	movs	r2, #44	; 0x2c
 800aa24:	fb03 f202 	mul.w	r2, r3, r2
 800aa28:	440a      	add	r2, r1
 800aa2a:	325c      	adds	r2, #92	; 0x5c
 800aa2c:	6812      	ldr	r2, [r2, #0]
 800aa2e:	3201      	adds	r2, #1
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	202c      	movs	r0, #44	; 0x2c
 800aa34:	fb00 f303 	mul.w	r3, r0, r3
 800aa38:	440b      	add	r3, r1
 800aa3a:	335c      	adds	r3, #92	; 0x5c
 800aa3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	212c      	movs	r1, #44	; 0x2c
 800aa44:	fb01 f303 	mul.w	r3, r1, r3
 800aa48:	4413      	add	r3, r2
 800aa4a:	335c      	adds	r3, #92	; 0x5c
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d91f      	bls.n	800aa92 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	212c      	movs	r1, #44	; 0x2c
 800aa58:	fb01 f303 	mul.w	r3, r1, r3
 800aa5c:	4413      	add	r3, r2
 800aa5e:	335c      	adds	r3, #92	; 0x5c
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	212c      	movs	r1, #44	; 0x2c
 800aa6a:	fb01 f303 	mul.w	r3, r1, r3
 800aa6e:	4413      	add	r3, r2
 800aa70:	3360      	adds	r3, #96	; 0x60
 800aa72:	2204      	movs	r2, #4
 800aa74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	212c      	movs	r1, #44	; 0x2c
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	4413      	add	r3, r2
 800aa82:	3360      	adds	r3, #96	; 0x60
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	78fb      	ldrb	r3, [r7, #3]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fa f91a 	bl	8004cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aa90:	e008      	b.n	800aaa4 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	212c      	movs	r1, #44	; 0x2c
 800aa98:	fb01 f303 	mul.w	r3, r1, r3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3360      	adds	r3, #96	; 0x60
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab0:	461a      	mov	r2, r3
 800aab2:	2380      	movs	r3, #128	; 0x80
 800aab4:	6093      	str	r3, [r2, #8]
 800aab6:	e1b6      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	78fa      	ldrb	r2, [r7, #3]
 800aabe:	4611      	mov	r1, r2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f00a fa6c 	bl	8014f9e <USB_ReadChInterrupts>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad0:	d11a      	bne.n	800ab08 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	212c      	movs	r1, #44	; 0x2c
 800aad8:	fb01 f303 	mul.w	r3, r1, r3
 800aadc:	4413      	add	r3, r2
 800aade:	3361      	adds	r3, #97	; 0x61
 800aae0:	2209      	movs	r2, #9
 800aae2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f00a feb2 	bl	8015856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafe:	461a      	mov	r2, r3
 800ab00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab04:	6093      	str	r3, [r2, #8]
 800ab06:	e18e      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	78fa      	ldrb	r2, [r7, #3]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f00a fa44 	bl	8014f9e <USB_ReadChInterrupts>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f003 0302 	and.w	r3, r3, #2
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	f040 8182 	bne.w	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab2e:	461a      	mov	r2, r3
 800ab30:	2302      	movs	r3, #2
 800ab32:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	212c      	movs	r1, #44	; 0x2c
 800ab3a:	fb01 f303 	mul.w	r3, r1, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	3361      	adds	r3, #97	; 0x61
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	f040 8087 	bne.w	800ac58 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	212c      	movs	r1, #44	; 0x2c
 800ab50:	fb01 f303 	mul.w	r3, r1, r3
 800ab54:	4413      	add	r3, r2
 800ab56:	3361      	adds	r3, #97	; 0x61
 800ab58:	2202      	movs	r2, #2
 800ab5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	212c      	movs	r1, #44	; 0x2c
 800ab62:	fb01 f303 	mul.w	r3, r1, r3
 800ab66:	4413      	add	r3, r2
 800ab68:	3360      	adds	r3, #96	; 0x60
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ab6e:	78fb      	ldrb	r3, [r7, #3]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	212c      	movs	r1, #44	; 0x2c
 800ab74:	fb01 f303 	mul.w	r3, r1, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	333f      	adds	r3, #63	; 0x3f
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d00a      	beq.n	800ab98 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	212c      	movs	r1, #44	; 0x2c
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	333f      	adds	r3, #63	; 0x3f
 800ab90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	f040 8138 	bne.w	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d113      	bne.n	800abc8 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	212c      	movs	r1, #44	; 0x2c
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	4413      	add	r3, r2
 800abac:	3355      	adds	r3, #85	; 0x55
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	f082 0201 	eor.w	r2, r2, #1
 800abb6:	b2d0      	uxtb	r0, r2
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	212c      	movs	r1, #44	; 0x2c
 800abbc:	fb01 f303 	mul.w	r3, r1, r3
 800abc0:	4413      	add	r3, r2
 800abc2:	3355      	adds	r3, #85	; 0x55
 800abc4:	4602      	mov	r2, r0
 800abc6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	f040 811b 	bne.w	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	212c      	movs	r1, #44	; 0x2c
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	4413      	add	r3, r2
 800abde:	334c      	adds	r3, #76	; 0x4c
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 8110 	beq.w	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	212c      	movs	r1, #44	; 0x2c
 800abee:	fb01 f303 	mul.w	r3, r1, r3
 800abf2:	4413      	add	r3, r2
 800abf4:	334c      	adds	r3, #76	; 0x4c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	202c      	movs	r0, #44	; 0x2c
 800abfe:	fb00 f202 	mul.w	r2, r0, r2
 800ac02:	440a      	add	r2, r1
 800ac04:	3240      	adds	r2, #64	; 0x40
 800ac06:	8812      	ldrh	r2, [r2, #0]
 800ac08:	4413      	add	r3, r2
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	202c      	movs	r0, #44	; 0x2c
 800ac12:	fb00 f202 	mul.w	r2, r0, r2
 800ac16:	440a      	add	r2, r1
 800ac18:	3240      	adds	r2, #64	; 0x40
 800ac1a:	8812      	ldrh	r2, [r2, #0]
 800ac1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac20:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 80ed 	beq.w	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	212c      	movs	r1, #44	; 0x2c
 800ac34:	fb01 f303 	mul.w	r3, r1, r3
 800ac38:	4413      	add	r3, r2
 800ac3a:	3355      	adds	r3, #85	; 0x55
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	78fb      	ldrb	r3, [r7, #3]
 800ac40:	f082 0201 	eor.w	r2, r2, #1
 800ac44:	b2d0      	uxtb	r0, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	212c      	movs	r1, #44	; 0x2c
 800ac4a:	fb01 f303 	mul.w	r3, r1, r3
 800ac4e:	4413      	add	r3, r2
 800ac50:	3355      	adds	r3, #85	; 0x55
 800ac52:	4602      	mov	r2, r0
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e0d7      	b.n	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	212c      	movs	r1, #44	; 0x2c
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	3361      	adds	r3, #97	; 0x61
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d109      	bne.n	800ac80 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	212c      	movs	r1, #44	; 0x2c
 800ac72:	fb01 f303 	mul.w	r3, r1, r3
 800ac76:	4413      	add	r3, r2
 800ac78:	3361      	adds	r3, #97	; 0x61
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	e0c3      	b.n	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	212c      	movs	r1, #44	; 0x2c
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3361      	adds	r3, #97	; 0x61
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d112      	bne.n	800acba <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	212c      	movs	r1, #44	; 0x2c
 800ac9a:	fb01 f303 	mul.w	r3, r1, r3
 800ac9e:	4413      	add	r3, r2
 800aca0:	3361      	adds	r3, #97	; 0x61
 800aca2:	2202      	movs	r2, #2
 800aca4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	212c      	movs	r1, #44	; 0x2c
 800acac:	fb01 f303 	mul.w	r3, r1, r3
 800acb0:	4413      	add	r3, r2
 800acb2:	3360      	adds	r3, #96	; 0x60
 800acb4:	2202      	movs	r2, #2
 800acb6:	701a      	strb	r2, [r3, #0]
 800acb8:	e0a6      	b.n	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	212c      	movs	r1, #44	; 0x2c
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	3361      	adds	r3, #97	; 0x61
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	2b05      	cmp	r3, #5
 800accc:	d112      	bne.n	800acf4 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	212c      	movs	r1, #44	; 0x2c
 800acd4:	fb01 f303 	mul.w	r3, r1, r3
 800acd8:	4413      	add	r3, r2
 800acda:	3361      	adds	r3, #97	; 0x61
 800acdc:	2202      	movs	r2, #2
 800acde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	212c      	movs	r1, #44	; 0x2c
 800ace6:	fb01 f303 	mul.w	r3, r1, r3
 800acea:	4413      	add	r3, r2
 800acec:	3360      	adds	r3, #96	; 0x60
 800acee:	2202      	movs	r2, #2
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	e089      	b.n	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	212c      	movs	r1, #44	; 0x2c
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	4413      	add	r3, r2
 800ad00:	3361      	adds	r3, #97	; 0x61
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b06      	cmp	r3, #6
 800ad06:	d112      	bne.n	800ad2e <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	212c      	movs	r1, #44	; 0x2c
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	3361      	adds	r3, #97	; 0x61
 800ad16:	2202      	movs	r2, #2
 800ad18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	212c      	movs	r1, #44	; 0x2c
 800ad20:	fb01 f303 	mul.w	r3, r1, r3
 800ad24:	4413      	add	r3, r2
 800ad26:	3360      	adds	r3, #96	; 0x60
 800ad28:	2205      	movs	r2, #5
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	e06c      	b.n	800ae08 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	212c      	movs	r1, #44	; 0x2c
 800ad34:	fb01 f303 	mul.w	r3, r1, r3
 800ad38:	4413      	add	r3, r2
 800ad3a:	3361      	adds	r3, #97	; 0x61
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b07      	cmp	r3, #7
 800ad40:	d009      	beq.n	800ad56 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	212c      	movs	r1, #44	; 0x2c
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3361      	adds	r3, #97	; 0x61
 800ad50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d166      	bne.n	800ae24 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	212c      	movs	r1, #44	; 0x2c
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	3361      	adds	r3, #97	; 0x61
 800ad64:	2202      	movs	r2, #2
 800ad66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	222c      	movs	r2, #44	; 0x2c
 800ad6e:	fb03 f202 	mul.w	r2, r3, r2
 800ad72:	440a      	add	r2, r1
 800ad74:	325c      	adds	r2, #92	; 0x5c
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	3201      	adds	r2, #1
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	202c      	movs	r0, #44	; 0x2c
 800ad7e:	fb00 f303 	mul.w	r3, r0, r3
 800ad82:	440b      	add	r3, r1
 800ad84:	335c      	adds	r3, #92	; 0x5c
 800ad86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	212c      	movs	r1, #44	; 0x2c
 800ad8e:	fb01 f303 	mul.w	r3, r1, r3
 800ad92:	4413      	add	r3, r2
 800ad94:	335c      	adds	r3, #92	; 0x5c
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d912      	bls.n	800adc2 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	212c      	movs	r1, #44	; 0x2c
 800ada2:	fb01 f303 	mul.w	r3, r1, r3
 800ada6:	4413      	add	r3, r2
 800ada8:	335c      	adds	r3, #92	; 0x5c
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	212c      	movs	r1, #44	; 0x2c
 800adb4:	fb01 f303 	mul.w	r3, r1, r3
 800adb8:	4413      	add	r3, r2
 800adba:	3360      	adds	r3, #96	; 0x60
 800adbc:	2204      	movs	r2, #4
 800adbe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800adc0:	e021      	b.n	800ae06 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	212c      	movs	r1, #44	; 0x2c
 800adc8:	fb01 f303 	mul.w	r3, r1, r3
 800adcc:	4413      	add	r3, r2
 800adce:	3360      	adds	r3, #96	; 0x60
 800add0:	2202      	movs	r2, #2
 800add2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	4413      	add	r3, r2
 800addc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adf2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae00:	461a      	mov	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ae06:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	212c      	movs	r1, #44	; 0x2c
 800ae0e:	fb01 f303 	mul.w	r3, r1, r3
 800ae12:	4413      	add	r3, r2
 800ae14:	3360      	adds	r3, #96	; 0x60
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7f9 ff51 	bl	8004cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ae22:	e000      	b.n	800ae26 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800ae24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08a      	sub	sp, #40	; 0x28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f003 030f 	and.w	r3, r3, #15
 800ae4c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	0c5b      	lsrs	r3, r3, #17
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	091b      	lsrs	r3, r3, #4
 800ae5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d004      	beq.n	800ae72 <HCD_RXQLVL_IRQHandler+0x46>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b05      	cmp	r3, #5
 800ae6c:	f000 80a9 	beq.w	800afc2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ae70:	e0aa      	b.n	800afc8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 80a6 	beq.w	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	212c      	movs	r1, #44	; 0x2c
 800ae80:	fb01 f303 	mul.w	r3, r1, r3
 800ae84:	4413      	add	r3, r2
 800ae86:	3344      	adds	r3, #68	; 0x44
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 809b 	beq.w	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	212c      	movs	r1, #44	; 0x2c
 800ae96:	fb01 f303 	mul.w	r3, r1, r3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3350      	adds	r3, #80	; 0x50
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	441a      	add	r2, r3
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	202c      	movs	r0, #44	; 0x2c
 800aeaa:	fb00 f303 	mul.w	r3, r0, r3
 800aeae:	440b      	add	r3, r1
 800aeb0:	334c      	adds	r3, #76	; 0x4c
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d87a      	bhi.n	800afae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	212c      	movs	r1, #44	; 0x2c
 800aec2:	fb01 f303 	mul.w	r3, r1, r3
 800aec6:	4413      	add	r3, r2
 800aec8:	3344      	adds	r3, #68	; 0x44
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	b292      	uxth	r2, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	f009 fff9 	bl	8014ec8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	212c      	movs	r1, #44	; 0x2c
 800aedc:	fb01 f303 	mul.w	r3, r1, r3
 800aee0:	4413      	add	r3, r2
 800aee2:	3344      	adds	r3, #68	; 0x44
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	441a      	add	r2, r3
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	202c      	movs	r0, #44	; 0x2c
 800aef0:	fb00 f303 	mul.w	r3, r0, r3
 800aef4:	440b      	add	r3, r1
 800aef6:	3344      	adds	r3, #68	; 0x44
 800aef8:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	212c      	movs	r1, #44	; 0x2c
 800af00:	fb01 f303 	mul.w	r3, r1, r3
 800af04:	4413      	add	r3, r2
 800af06:	3350      	adds	r3, #80	; 0x50
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	441a      	add	r2, r3
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	202c      	movs	r0, #44	; 0x2c
 800af14:	fb00 f303 	mul.w	r3, r0, r3
 800af18:	440b      	add	r3, r1
 800af1a:	3350      	adds	r3, #80	; 0x50
 800af1c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	015a      	lsls	r2, r3, #5
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	4413      	add	r3, r2
 800af26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	0cdb      	lsrs	r3, r3, #19
 800af2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	212c      	movs	r1, #44	; 0x2c
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	4413      	add	r3, r2
 800af40:	3340      	adds	r3, #64	; 0x40
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	4293      	cmp	r3, r2
 800af4a:	d13c      	bne.n	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d039      	beq.n	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af68:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af70:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7e:	461a      	mov	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	212c      	movs	r1, #44	; 0x2c
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	3354      	adds	r3, #84	; 0x54
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f083 0301 	eor.w	r3, r3, #1
 800af98:	b2d8      	uxtb	r0, r3
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	212c      	movs	r1, #44	; 0x2c
 800afa0:	fb01 f303 	mul.w	r3, r1, r3
 800afa4:	4413      	add	r3, r2
 800afa6:	3354      	adds	r3, #84	; 0x54
 800afa8:	4602      	mov	r2, r0
 800afaa:	701a      	strb	r2, [r3, #0]
      break;
 800afac:	e00b      	b.n	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	212c      	movs	r1, #44	; 0x2c
 800afb4:	fb01 f303 	mul.w	r3, r1, r3
 800afb8:	4413      	add	r3, r2
 800afba:	3360      	adds	r3, #96	; 0x60
 800afbc:	2204      	movs	r2, #4
 800afbe:	701a      	strb	r2, [r3, #0]
      break;
 800afc0:	e001      	b.n	800afc6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800afc2:	bf00      	nop
 800afc4:	e000      	b.n	800afc8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800afc6:	bf00      	nop
  }
}
 800afc8:	bf00      	nop
 800afca:	3728      	adds	r7, #40	; 0x28
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800affc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b02      	cmp	r3, #2
 800b006:	d10b      	bne.n	800b020 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d102      	bne.n	800b018 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7f9 fe3a 	bl	8004c8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f043 0302 	orr.w	r3, r3, #2
 800b01e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f003 0308 	and.w	r3, r3, #8
 800b026:	2b08      	cmp	r3, #8
 800b028:	d132      	bne.n	800b090 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f043 0308 	orr.w	r3, r3, #8
 800b030:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d126      	bne.n	800b08a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	2b02      	cmp	r3, #2
 800b042:	d113      	bne.n	800b06c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b04a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b04e:	d106      	bne.n	800b05e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2102      	movs	r1, #2
 800b056:	4618      	mov	r0, r3
 800b058:	f00a f8be 	bl	80151d8 <USB_InitFSLSPClkSel>
 800b05c:	e011      	b.n	800b082 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2101      	movs	r1, #1
 800b064:	4618      	mov	r0, r3
 800b066:	f00a f8b7 	bl	80151d8 <USB_InitFSLSPClkSel>
 800b06a:	e00a      	b.n	800b082 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d106      	bne.n	800b082 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b07a:	461a      	mov	r2, r3
 800b07c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b080:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7f9 fe2c 	bl	8004ce0 <HAL_HCD_PortEnabled_Callback>
 800b088:	e002      	b.n	800b090 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7f9 fe36 	bl	8004cfc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b20      	cmp	r3, #32
 800b098:	d103      	bne.n	800b0a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f043 0320 	orr.w	r3, r3, #32
 800b0a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6013      	str	r3, [r2, #0]
}
 800b0ae:	bf00      	nop
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e07f      	b.n	800b1ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7f7 fe3e 	bl	8002d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2224      	movs	r2, #36	; 0x24
 800b0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0201 	bic.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689a      	ldr	r2, [r3, #8]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d107      	bne.n	800b132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689a      	ldr	r2, [r3, #8]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b12e:	609a      	str	r2, [r3, #8]
 800b130:	e006      	b.n	800b140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b13e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d104      	bne.n	800b152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6859      	ldr	r1, [r3, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	4b1d      	ldr	r3, [pc, #116]	; (800b1d4 <HAL_I2C_Init+0x11c>)
 800b15e:	430b      	orrs	r3, r1
 800b160:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	69d9      	ldr	r1, [r3, #28]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1a      	ldr	r2, [r3, #32]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	02008000 	.word	0x02008000

0800b1d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	817b      	strh	r3, [r7, #10]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	f040 80da 	bne.w	800b3ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <HAL_I2C_Master_Transmit+0x30>
 800b204:	2302      	movs	r3, #2
 800b206:	e0d3      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b210:	f7fa f826 	bl	8005260 <HAL_GetTick>
 800b214:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	2319      	movs	r3, #25
 800b21c:	2201      	movs	r2, #1
 800b21e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 f8f0 	bl	800b408 <I2C_WaitOnFlagUntilTimeout>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e0be      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2221      	movs	r2, #33	; 0x21
 800b236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2210      	movs	r2, #16
 800b23e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	893a      	ldrh	r2, [r7, #8]
 800b252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b25e:	b29b      	uxth	r3, r3
 800b260:	2bff      	cmp	r3, #255	; 0xff
 800b262:	d90e      	bls.n	800b282 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	22ff      	movs	r2, #255	; 0xff
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	8979      	ldrh	r1, [r7, #10]
 800b272:	4b51      	ldr	r3, [pc, #324]	; (800b3b8 <HAL_I2C_Master_Transmit+0x1e0>)
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fa7e 	bl	800b77c <I2C_TransferConfig>
 800b280:	e06c      	b.n	800b35c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b290:	b2da      	uxtb	r2, r3
 800b292:	8979      	ldrh	r1, [r7, #10]
 800b294:	4b48      	ldr	r3, [pc, #288]	; (800b3b8 <HAL_I2C_Master_Transmit+0x1e0>)
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 fa6d 	bl	800b77c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b2a2:	e05b      	b.n	800b35c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	6a39      	ldr	r1, [r7, #32]
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f8fc 	bl	800b4a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e07b      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d034      	beq.n	800b35c <HAL_I2C_Master_Transmit+0x184>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d130      	bne.n	800b35c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	2200      	movs	r2, #0
 800b302:	2180      	movs	r1, #128	; 0x80
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 f87f 	bl	800b408 <I2C_WaitOnFlagUntilTimeout>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e04d      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b318:	b29b      	uxth	r3, r3
 800b31a:	2bff      	cmp	r3, #255	; 0xff
 800b31c:	d90e      	bls.n	800b33c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	22ff      	movs	r2, #255	; 0xff
 800b322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	8979      	ldrh	r1, [r7, #10]
 800b32c:	2300      	movs	r3, #0
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 fa21 	bl	800b77c <I2C_TransferConfig>
 800b33a:	e00f      	b.n	800b35c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b340:	b29a      	uxth	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	8979      	ldrh	r1, [r7, #10]
 800b34e:	2300      	movs	r3, #0
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 fa10 	bl	800b77c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d19e      	bne.n	800b2a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	6a39      	ldr	r1, [r7, #32]
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 f8e2 	bl	800b534 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e01a      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2220      	movs	r2, #32
 800b380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6859      	ldr	r1, [r3, #4]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <HAL_I2C_Master_Transmit+0x1e4>)
 800b38e:	400b      	ands	r3, r1
 800b390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2220      	movs	r2, #32
 800b396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e000      	b.n	800b3b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b3ae:	2302      	movs	r3, #2
  }
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	80002000 	.word	0x80002000
 800b3bc:	fe00e800 	.word	0xfe00e800

0800b3c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d103      	bne.n	800b3de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d007      	beq.n	800b3fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	619a      	str	r2, [r3, #24]
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	4613      	mov	r3, r2
 800b416:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b418:	e031      	b.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b420:	d02d      	beq.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b422:	f7f9 ff1d 	bl	8005260 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d302      	bcc.n	800b438 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d122      	bne.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4013      	ands	r3, r2
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	429a      	cmp	r2, r3
 800b446:	bf0c      	ite	eq
 800b448:	2301      	moveq	r3, #1
 800b44a:	2300      	movne	r3, #0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	461a      	mov	r2, r3
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	429a      	cmp	r2, r3
 800b454:	d113      	bne.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	f043 0220 	orr.w	r2, r3, #32
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2220      	movs	r2, #32
 800b466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e00f      	b.n	800b49e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699a      	ldr	r2, [r3, #24]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4013      	ands	r3, r2
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	bf0c      	ite	eq
 800b48e:	2301      	moveq	r3, #1
 800b490:	2300      	movne	r3, #0
 800b492:	b2db      	uxtb	r3, r3
 800b494:	461a      	mov	r2, r3
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d0be      	beq.n	800b41a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4b2:	e033      	b.n	800b51c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 f87f 	bl	800b5bc <I2C_IsErrorOccurred>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e031      	b.n	800b52c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ce:	d025      	beq.n	800b51c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4d0:	f7f9 fec6 	bl	8005260 <HAL_GetTick>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d302      	bcc.n	800b4e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d11a      	bne.n	800b51c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d013      	beq.n	800b51c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f8:	f043 0220 	orr.w	r2, r3, #32
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2220      	movs	r2, #32
 800b504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e007      	b.n	800b52c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	f003 0302 	and.w	r3, r3, #2
 800b526:	2b02      	cmp	r3, #2
 800b528:	d1c4      	bne.n	800b4b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b540:	e02f      	b.n	800b5a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f838 	bl	800b5bc <I2C_IsErrorOccurred>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e02d      	b.n	800b5b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b556:	f7f9 fe83 	bl	8005260 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	429a      	cmp	r2, r3
 800b564:	d302      	bcc.n	800b56c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11a      	bne.n	800b5a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b20      	cmp	r3, #32
 800b578:	d013      	beq.n	800b5a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57e:	f043 0220 	orr.w	r2, r3, #32
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2220      	movs	r2, #32
 800b58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e007      	b.n	800b5b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	f003 0320 	and.w	r3, r3, #32
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d1c8      	bne.n	800b542 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	; 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d068      	beq.n	800b6ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2210      	movs	r2, #16
 800b5ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b5f0:	e049      	b.n	800b686 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5f8:	d045      	beq.n	800b686 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b5fa:	f7f9 fe31 	bl	8005260 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	d302      	bcc.n	800b610 <I2C_IsErrorOccurred+0x54>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d13a      	bne.n	800b686 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b61a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b622:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b632:	d121      	bne.n	800b678 <I2C_IsErrorOccurred+0xbc>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b63a:	d01d      	beq.n	800b678 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b63c:	7cfb      	ldrb	r3, [r7, #19]
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d01a      	beq.n	800b678 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b650:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b652:	f7f9 fe05 	bl	8005260 <HAL_GetTick>
 800b656:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b658:	e00e      	b.n	800b678 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b65a:	f7f9 fe01 	bl	8005260 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	2b19      	cmp	r3, #25
 800b666:	d907      	bls.n	800b678 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	f043 0320 	orr.w	r3, r3, #32
 800b66e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b676:	e006      	b.n	800b686 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b20      	cmp	r3, #32
 800b684:	d1e9      	bne.n	800b65a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b20      	cmp	r3, #32
 800b692:	d003      	beq.n	800b69c <I2C_IsErrorOccurred+0xe0>
 800b694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0aa      	beq.n	800b5f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	f043 0304 	orr.w	r3, r3, #4
 800b6b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	f043 0301 	orr.w	r3, r3, #1
 800b6d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00b      	beq.n	800b706 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	f043 0308 	orr.w	r3, r3, #8
 800b6f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00b      	beq.n	800b728 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	f043 0302 	orr.w	r3, r3, #2
 800b716:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d01c      	beq.n	800b76a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7ff fe45 	bl	800b3c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6859      	ldr	r1, [r3, #4]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	4b0d      	ldr	r3, [pc, #52]	; (800b778 <I2C_IsErrorOccurred+0x1bc>)
 800b742:	400b      	ands	r3, r1
 800b744:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3728      	adds	r7, #40	; 0x28
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	fe00e800 	.word	0xfe00e800

0800b77c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	607b      	str	r3, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	817b      	strh	r3, [r7, #10]
 800b78a:	4613      	mov	r3, r2
 800b78c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b78e:	897b      	ldrh	r3, [r7, #10]
 800b790:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b794:	7a7b      	ldrb	r3, [r7, #9]
 800b796:	041b      	lsls	r3, r3, #16
 800b798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b79c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	0d5b      	lsrs	r3, r3, #21
 800b7b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b7ba:	4b08      	ldr	r3, [pc, #32]	; (800b7dc <I2C_TransferConfig+0x60>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	43db      	mvns	r3, r3
 800b7c0:	ea02 0103 	and.w	r1, r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b7ce:	bf00      	nop
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	03ff63ff 	.word	0x03ff63ff

0800b7e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b20      	cmp	r3, #32
 800b7f4:	d138      	bne.n	800b868 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b800:	2302      	movs	r3, #2
 800b802:	e032      	b.n	800b86a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2224      	movs	r2, #36	; 0x24
 800b810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0201 	bic.w	r2, r2, #1
 800b822:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b832:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f042 0201 	orr.w	r2, r2, #1
 800b852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2220      	movs	r2, #32
 800b858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	e000      	b.n	800b86a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b868:	2302      	movs	r3, #2
  }
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b876:	b480      	push	{r7}
 800b878:	b085      	sub	sp, #20
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b20      	cmp	r3, #32
 800b88a:	d139      	bne.n	800b900 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b896:	2302      	movs	r3, #2
 800b898:	e033      	b.n	800b902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2224      	movs	r2, #36	; 0x24
 800b8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f022 0201 	bic.w	r2, r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b8c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	021b      	lsls	r3, r3, #8
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0201 	orr.w	r2, r2, #1
 800b8ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e000      	b.n	800b902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b900:	2302      	movs	r3, #2
  }
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
	...

0800b910 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b918:	4b19      	ldr	r3, [pc, #100]	; (800b980 <HAL_PWREx_ConfigSupply+0x70>)
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b04      	cmp	r3, #4
 800b922:	d00a      	beq.n	800b93a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b924:	4b16      	ldr	r3, [pc, #88]	; (800b980 <HAL_PWREx_ConfigSupply+0x70>)
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d001      	beq.n	800b936 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e01f      	b.n	800b976 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e01d      	b.n	800b976 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b93a:	4b11      	ldr	r3, [pc, #68]	; (800b980 <HAL_PWREx_ConfigSupply+0x70>)
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	f023 0207 	bic.w	r2, r3, #7
 800b942:	490f      	ldr	r1, [pc, #60]	; (800b980 <HAL_PWREx_ConfigSupply+0x70>)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4313      	orrs	r3, r2
 800b948:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b94a:	f7f9 fc89 	bl	8005260 <HAL_GetTick>
 800b94e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b950:	e009      	b.n	800b966 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b952:	f7f9 fc85 	bl	8005260 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b960:	d901      	bls.n	800b966 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e007      	b.n	800b976 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b966:	4b06      	ldr	r3, [pc, #24]	; (800b980 <HAL_PWREx_ConfigSupply+0x70>)
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b972:	d1ee      	bne.n	800b952 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	58024800 	.word	0x58024800

0800b984 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	4a04      	ldr	r2, [pc, #16]	; (800b9a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b98e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b992:	60d3      	str	r3, [r2, #12]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	58024800 	.word	0x58024800

0800b9a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08c      	sub	sp, #48	; 0x30
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f000 bc48 	b.w	800c248 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 8088 	beq.w	800bad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9c6:	4b99      	ldr	r3, [pc, #612]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b9d0:	4b96      	ldr	r3, [pc, #600]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	2b10      	cmp	r3, #16
 800b9da:	d007      	beq.n	800b9ec <HAL_RCC_OscConfig+0x48>
 800b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9de:	2b18      	cmp	r3, #24
 800b9e0:	d111      	bne.n	800ba06 <HAL_RCC_OscConfig+0x62>
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d10c      	bne.n	800ba06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9ec:	4b8f      	ldr	r3, [pc, #572]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d06d      	beq.n	800bad4 <HAL_RCC_OscConfig+0x130>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d169      	bne.n	800bad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	f000 bc21 	b.w	800c248 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba0e:	d106      	bne.n	800ba1e <HAL_RCC_OscConfig+0x7a>
 800ba10:	4b86      	ldr	r3, [pc, #536]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a85      	ldr	r2, [pc, #532]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	e02e      	b.n	800ba7c <HAL_RCC_OscConfig+0xd8>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10c      	bne.n	800ba40 <HAL_RCC_OscConfig+0x9c>
 800ba26:	4b81      	ldr	r3, [pc, #516]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a80      	ldr	r2, [pc, #512]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	4b7e      	ldr	r3, [pc, #504]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a7d      	ldr	r2, [pc, #500]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	e01d      	b.n	800ba7c <HAL_RCC_OscConfig+0xd8>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba48:	d10c      	bne.n	800ba64 <HAL_RCC_OscConfig+0xc0>
 800ba4a:	4b78      	ldr	r3, [pc, #480]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a77      	ldr	r2, [pc, #476]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	4b75      	ldr	r3, [pc, #468]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a74      	ldr	r2, [pc, #464]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	e00b      	b.n	800ba7c <HAL_RCC_OscConfig+0xd8>
 800ba64:	4b71      	ldr	r3, [pc, #452]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a70      	ldr	r2, [pc, #448]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	4b6e      	ldr	r3, [pc, #440]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a6d      	ldr	r2, [pc, #436]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800ba76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d013      	beq.n	800baac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba84:	f7f9 fbec 	bl	8005260 <HAL_GetTick>
 800ba88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba8a:	e008      	b.n	800ba9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba8c:	f7f9 fbe8 	bl	8005260 <HAL_GetTick>
 800ba90:	4602      	mov	r2, r0
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	2b64      	cmp	r3, #100	; 0x64
 800ba98:	d901      	bls.n	800ba9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e3d4      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba9e:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0f0      	beq.n	800ba8c <HAL_RCC_OscConfig+0xe8>
 800baaa:	e014      	b.n	800bad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baac:	f7f9 fbd8 	bl	8005260 <HAL_GetTick>
 800bab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bab2:	e008      	b.n	800bac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bab4:	f7f9 fbd4 	bl	8005260 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b64      	cmp	r3, #100	; 0x64
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e3c0      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bac6:	4b59      	ldr	r3, [pc, #356]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1f0      	bne.n	800bab4 <HAL_RCC_OscConfig+0x110>
 800bad2:	e000      	b.n	800bad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 80ca 	beq.w	800bc78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bae4:	4b51      	ldr	r3, [pc, #324]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800baee:	4b4f      	ldr	r3, [pc, #316]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800baf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800baf4:	6a3b      	ldr	r3, [r7, #32]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d007      	beq.n	800bb0a <HAL_RCC_OscConfig+0x166>
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	2b18      	cmp	r3, #24
 800bafe:	d156      	bne.n	800bbae <HAL_RCC_OscConfig+0x20a>
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d151      	bne.n	800bbae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb0a:	4b48      	ldr	r3, [pc, #288]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <HAL_RCC_OscConfig+0x17e>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e392      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bb22:	4b42      	ldr	r3, [pc, #264]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f023 0219 	bic.w	r2, r3, #25
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	493f      	ldr	r1, [pc, #252]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb34:	f7f9 fb94 	bl	8005260 <HAL_GetTick>
 800bb38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb3a:	e008      	b.n	800bb4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb3c:	f7f9 fb90 	bl	8005260 <HAL_GetTick>
 800bb40:	4602      	mov	r2, r0
 800bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d901      	bls.n	800bb4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e37c      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb4e:	4b37      	ldr	r3, [pc, #220]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0304 	and.w	r3, r3, #4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0f0      	beq.n	800bb3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb5a:	f7f9 fbb1 	bl	80052c0 <HAL_GetREVID>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f241 0203 	movw	r2, #4099	; 0x1003
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d817      	bhi.n	800bb98 <HAL_RCC_OscConfig+0x1f4>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	2b40      	cmp	r3, #64	; 0x40
 800bb6e:	d108      	bne.n	800bb82 <HAL_RCC_OscConfig+0x1de>
 800bb70:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb78:	4a2c      	ldr	r2, [pc, #176]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb80:	e07a      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb82:	4b2a      	ldr	r3, [pc, #168]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	031b      	lsls	r3, r3, #12
 800bb90:	4926      	ldr	r1, [pc, #152]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb96:	e06f      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb98:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	061b      	lsls	r3, r3, #24
 800bba6:	4921      	ldr	r1, [pc, #132]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbac:	e064      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d047      	beq.n	800bc46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f023 0219 	bic.w	r2, r3, #25
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	491a      	ldr	r1, [pc, #104]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc8:	f7f9 fb4a 	bl	8005260 <HAL_GetTick>
 800bbcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbd0:	f7f9 fb46 	bl	8005260 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e332      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbe2:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0f0      	beq.n	800bbd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbee:	f7f9 fb67 	bl	80052c0 <HAL_GetREVID>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f241 0203 	movw	r2, #4099	; 0x1003
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d819      	bhi.n	800bc30 <HAL_RCC_OscConfig+0x28c>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b40      	cmp	r3, #64	; 0x40
 800bc02:	d108      	bne.n	800bc16 <HAL_RCC_OscConfig+0x272>
 800bc04:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bc0c:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc12:	6053      	str	r3, [r2, #4]
 800bc14:	e030      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
 800bc16:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	031b      	lsls	r3, r3, #12
 800bc24:	4901      	ldr	r1, [pc, #4]	; (800bc2c <HAL_RCC_OscConfig+0x288>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	604b      	str	r3, [r1, #4]
 800bc2a:	e025      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
 800bc2c:	58024400 	.word	0x58024400
 800bc30:	4b9a      	ldr	r3, [pc, #616]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	061b      	lsls	r3, r3, #24
 800bc3e:	4997      	ldr	r1, [pc, #604]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	604b      	str	r3, [r1, #4]
 800bc44:	e018      	b.n	800bc78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc46:	4b95      	ldr	r3, [pc, #596]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a94      	ldr	r2, [pc, #592]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc52:	f7f9 fb05 	bl	8005260 <HAL_GetTick>
 800bc56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bc58:	e008      	b.n	800bc6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc5a:	f7f9 fb01 	bl	8005260 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d901      	bls.n	800bc6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e2ed      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bc6c:	4b8b      	ldr	r3, [pc, #556]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f0      	bne.n	800bc5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 0310 	and.w	r3, r3, #16
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 80a9 	beq.w	800bdd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc86:	4b85      	ldr	r3, [pc, #532]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc90:	4b82      	ldr	r3, [pc, #520]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d007      	beq.n	800bcac <HAL_RCC_OscConfig+0x308>
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	2b18      	cmp	r3, #24
 800bca0:	d13a      	bne.n	800bd18 <HAL_RCC_OscConfig+0x374>
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d135      	bne.n	800bd18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcac:	4b7b      	ldr	r3, [pc, #492]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <HAL_RCC_OscConfig+0x320>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	2b80      	cmp	r3, #128	; 0x80
 800bcbe:	d001      	beq.n	800bcc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e2c1      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcc4:	f7f9 fafc 	bl	80052c0 <HAL_GetREVID>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f241 0203 	movw	r2, #4099	; 0x1003
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d817      	bhi.n	800bd02 <HAL_RCC_OscConfig+0x35e>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	2b20      	cmp	r3, #32
 800bcd8:	d108      	bne.n	800bcec <HAL_RCC_OscConfig+0x348>
 800bcda:	4b70      	ldr	r3, [pc, #448]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bce2:	4a6e      	ldr	r2, [pc, #440]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bce8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcea:	e075      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcec:	4b6b      	ldr	r3, [pc, #428]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a1b      	ldr	r3, [r3, #32]
 800bcf8:	069b      	lsls	r3, r3, #26
 800bcfa:	4968      	ldr	r1, [pc, #416]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd00:	e06a      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd02:	4b66      	ldr	r3, [pc, #408]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	061b      	lsls	r3, r3, #24
 800bd10:	4962      	ldr	r1, [pc, #392]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd16:	e05f      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d042      	beq.n	800bda6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bd20:	4b5e      	ldr	r3, [pc, #376]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a5d      	ldr	r2, [pc, #372]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd2c:	f7f9 fa98 	bl	8005260 <HAL_GetTick>
 800bd30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd32:	e008      	b.n	800bd46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd34:	f7f9 fa94 	bl	8005260 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d901      	bls.n	800bd46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	e280      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd46:	4b55      	ldr	r3, [pc, #340]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f0      	beq.n	800bd34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd52:	f7f9 fab5 	bl	80052c0 <HAL_GetREVID>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f241 0203 	movw	r2, #4099	; 0x1003
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d817      	bhi.n	800bd90 <HAL_RCC_OscConfig+0x3ec>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	d108      	bne.n	800bd7a <HAL_RCC_OscConfig+0x3d6>
 800bd68:	4b4c      	ldr	r3, [pc, #304]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bd70:	4a4a      	ldr	r2, [pc, #296]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd76:	6053      	str	r3, [r2, #4]
 800bd78:	e02e      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
 800bd7a:	4b48      	ldr	r3, [pc, #288]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	069b      	lsls	r3, r3, #26
 800bd88:	4944      	ldr	r1, [pc, #272]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	604b      	str	r3, [r1, #4]
 800bd8e:	e023      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
 800bd90:	4b42      	ldr	r3, [pc, #264]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	061b      	lsls	r3, r3, #24
 800bd9e:	493f      	ldr	r1, [pc, #252]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60cb      	str	r3, [r1, #12]
 800bda4:	e018      	b.n	800bdd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bda6:	4b3d      	ldr	r3, [pc, #244]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a3c      	ldr	r2, [pc, #240]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bdac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb2:	f7f9 fa55 	bl	8005260 <HAL_GetTick>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bdb8:	e008      	b.n	800bdcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bdba:	f7f9 fa51 	bl	8005260 <HAL_GetTick>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d901      	bls.n	800bdcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e23d      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bdcc:	4b33      	ldr	r3, [pc, #204]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1f0      	bne.n	800bdba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0308 	and.w	r3, r3, #8
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d036      	beq.n	800be52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d019      	beq.n	800be20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdec:	4b2b      	ldr	r3, [pc, #172]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf0:	4a2a      	ldr	r2, [pc, #168]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800bdf2:	f043 0301 	orr.w	r3, r3, #1
 800bdf6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdf8:	f7f9 fa32 	bl	8005260 <HAL_GetTick>
 800bdfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bdfe:	e008      	b.n	800be12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be00:	f7f9 fa2e 	bl	8005260 <HAL_GetTick>
 800be04:	4602      	mov	r2, r0
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d901      	bls.n	800be12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e21a      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800be12:	4b22      	ldr	r3, [pc, #136]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be16:	f003 0302 	and.w	r3, r3, #2
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0f0      	beq.n	800be00 <HAL_RCC_OscConfig+0x45c>
 800be1e:	e018      	b.n	800be52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be20:	4b1e      	ldr	r3, [pc, #120]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be24:	4a1d      	ldr	r2, [pc, #116]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be26:	f023 0301 	bic.w	r3, r3, #1
 800be2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be2c:	f7f9 fa18 	bl	8005260 <HAL_GetTick>
 800be30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be34:	f7f9 fa14 	bl	8005260 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e200      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be46:	4b15      	ldr	r3, [pc, #84]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f0      	bne.n	800be34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d039      	beq.n	800bed2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d01c      	beq.n	800bea0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800be66:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a0c      	ldr	r2, [pc, #48]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be72:	f7f9 f9f5 	bl	8005260 <HAL_GetTick>
 800be76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be78:	e008      	b.n	800be8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be7a:	f7f9 f9f1 	bl	8005260 <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	2b02      	cmp	r3, #2
 800be86:	d901      	bls.n	800be8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e1dd      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be8c:	4b03      	ldr	r3, [pc, #12]	; (800be9c <HAL_RCC_OscConfig+0x4f8>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0f0      	beq.n	800be7a <HAL_RCC_OscConfig+0x4d6>
 800be98:	e01b      	b.n	800bed2 <HAL_RCC_OscConfig+0x52e>
 800be9a:	bf00      	nop
 800be9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bea0:	4b9b      	ldr	r3, [pc, #620]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a9a      	ldr	r2, [pc, #616]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800beac:	f7f9 f9d8 	bl	8005260 <HAL_GetTick>
 800beb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800beb4:	f7f9 f9d4 	bl	8005260 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e1c0      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bec6:	4b92      	ldr	r3, [pc, #584]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1f0      	bne.n	800beb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 8081 	beq.w	800bfe2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bee0:	4b8c      	ldr	r3, [pc, #560]	; (800c114 <HAL_RCC_OscConfig+0x770>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a8b      	ldr	r2, [pc, #556]	; (800c114 <HAL_RCC_OscConfig+0x770>)
 800bee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800beec:	f7f9 f9b8 	bl	8005260 <HAL_GetTick>
 800bef0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bef2:	e008      	b.n	800bf06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bef4:	f7f9 f9b4 	bl	8005260 <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	2b64      	cmp	r3, #100	; 0x64
 800bf00:	d901      	bls.n	800bf06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e1a0      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf06:	4b83      	ldr	r3, [pc, #524]	; (800c114 <HAL_RCC_OscConfig+0x770>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d0f0      	beq.n	800bef4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d106      	bne.n	800bf28 <HAL_RCC_OscConfig+0x584>
 800bf1a:	4b7d      	ldr	r3, [pc, #500]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1e:	4a7c      	ldr	r2, [pc, #496]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf20:	f043 0301 	orr.w	r3, r3, #1
 800bf24:	6713      	str	r3, [r2, #112]	; 0x70
 800bf26:	e02d      	b.n	800bf84 <HAL_RCC_OscConfig+0x5e0>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10c      	bne.n	800bf4a <HAL_RCC_OscConfig+0x5a6>
 800bf30:	4b77      	ldr	r3, [pc, #476]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf34:	4a76      	ldr	r2, [pc, #472]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf36:	f023 0301 	bic.w	r3, r3, #1
 800bf3a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf3c:	4b74      	ldr	r3, [pc, #464]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf40:	4a73      	ldr	r2, [pc, #460]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf42:	f023 0304 	bic.w	r3, r3, #4
 800bf46:	6713      	str	r3, [r2, #112]	; 0x70
 800bf48:	e01c      	b.n	800bf84 <HAL_RCC_OscConfig+0x5e0>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	2b05      	cmp	r3, #5
 800bf50:	d10c      	bne.n	800bf6c <HAL_RCC_OscConfig+0x5c8>
 800bf52:	4b6f      	ldr	r3, [pc, #444]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf56:	4a6e      	ldr	r2, [pc, #440]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf58:	f043 0304 	orr.w	r3, r3, #4
 800bf5c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf5e:	4b6c      	ldr	r3, [pc, #432]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf62:	4a6b      	ldr	r2, [pc, #428]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf64:	f043 0301 	orr.w	r3, r3, #1
 800bf68:	6713      	str	r3, [r2, #112]	; 0x70
 800bf6a:	e00b      	b.n	800bf84 <HAL_RCC_OscConfig+0x5e0>
 800bf6c:	4b68      	ldr	r3, [pc, #416]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf70:	4a67      	ldr	r2, [pc, #412]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf72:	f023 0301 	bic.w	r3, r3, #1
 800bf76:	6713      	str	r3, [r2, #112]	; 0x70
 800bf78:	4b65      	ldr	r3, [pc, #404]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7c:	4a64      	ldr	r2, [pc, #400]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bf7e:	f023 0304 	bic.w	r3, r3, #4
 800bf82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d015      	beq.n	800bfb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf8c:	f7f9 f968 	bl	8005260 <HAL_GetTick>
 800bf90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf92:	e00a      	b.n	800bfaa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf94:	f7f9 f964 	bl	8005260 <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d901      	bls.n	800bfaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e14e      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfaa:	4b59      	ldr	r3, [pc, #356]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bfac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0ee      	beq.n	800bf94 <HAL_RCC_OscConfig+0x5f0>
 800bfb6:	e014      	b.n	800bfe2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfb8:	f7f9 f952 	bl	8005260 <HAL_GetTick>
 800bfbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfbe:	e00a      	b.n	800bfd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfc0:	f7f9 f94e 	bl	8005260 <HAL_GetTick>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d901      	bls.n	800bfd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e138      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfd6:	4b4e      	ldr	r3, [pc, #312]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bfd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1ee      	bne.n	800bfc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 812d 	beq.w	800c246 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bfec:	4b48      	ldr	r3, [pc, #288]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bff4:	2b18      	cmp	r3, #24
 800bff6:	f000 80bd 	beq.w	800c174 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	2b02      	cmp	r3, #2
 800c000:	f040 809e 	bne.w	800c140 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c004:	4b42      	ldr	r3, [pc, #264]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a41      	ldr	r2, [pc, #260]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c00a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c00e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c010:	f7f9 f926 	bl	8005260 <HAL_GetTick>
 800c014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c016:	e008      	b.n	800c02a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c018:	f7f9 f922 	bl	8005260 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d901      	bls.n	800c02a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e10e      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c02a:	4b39      	ldr	r3, [pc, #228]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1f0      	bne.n	800c018 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c036:	4b36      	ldr	r3, [pc, #216]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c03a:	4b37      	ldr	r3, [pc, #220]	; (800c118 <HAL_RCC_OscConfig+0x774>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c046:	0112      	lsls	r2, r2, #4
 800c048:	430a      	orrs	r2, r1
 800c04a:	4931      	ldr	r1, [pc, #196]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	628b      	str	r3, [r1, #40]	; 0x28
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c054:	3b01      	subs	r3, #1
 800c056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05e:	3b01      	subs	r3, #1
 800c060:	025b      	lsls	r3, r3, #9
 800c062:	b29b      	uxth	r3, r3
 800c064:	431a      	orrs	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	3b01      	subs	r3, #1
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c078:	3b01      	subs	r3, #1
 800c07a:	061b      	lsls	r3, r3, #24
 800c07c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c080:	4923      	ldr	r1, [pc, #140]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c082:	4313      	orrs	r3, r2
 800c084:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c086:	4b22      	ldr	r3, [pc, #136]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	4a21      	ldr	r2, [pc, #132]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c092:	4b1f      	ldr	r3, [pc, #124]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c096:	4b21      	ldr	r3, [pc, #132]	; (800c11c <HAL_RCC_OscConfig+0x778>)
 800c098:	4013      	ands	r3, r2
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c09e:	00d2      	lsls	r2, r2, #3
 800c0a0:	491b      	ldr	r1, [pc, #108]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c0a6:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0aa:	f023 020c 	bic.w	r2, r3, #12
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	4917      	ldr	r1, [pc, #92]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c0b8:	4b15      	ldr	r3, [pc, #84]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	f023 0202 	bic.w	r2, r3, #2
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c4:	4912      	ldr	r1, [pc, #72]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c0ca:	4b11      	ldr	r3, [pc, #68]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	4a10      	ldr	r2, [pc, #64]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0d6:	4b0e      	ldr	r3, [pc, #56]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	4a0d      	ldr	r2, [pc, #52]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	4a0a      	ldr	r2, [pc, #40]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c0ee:	4b08      	ldr	r3, [pc, #32]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	4a07      	ldr	r2, [pc, #28]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0f4:	f043 0301 	orr.w	r3, r3, #1
 800c0f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c0fa:	4b05      	ldr	r3, [pc, #20]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a04      	ldr	r2, [pc, #16]	; (800c110 <HAL_RCC_OscConfig+0x76c>)
 800c100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c106:	f7f9 f8ab 	bl	8005260 <HAL_GetTick>
 800c10a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c10c:	e011      	b.n	800c132 <HAL_RCC_OscConfig+0x78e>
 800c10e:	bf00      	nop
 800c110:	58024400 	.word	0x58024400
 800c114:	58024800 	.word	0x58024800
 800c118:	fffffc0c 	.word	0xfffffc0c
 800c11c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c120:	f7f9 f89e 	bl	8005260 <HAL_GetTick>
 800c124:	4602      	mov	r2, r0
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d901      	bls.n	800c132 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e08a      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c132:	4b47      	ldr	r3, [pc, #284]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0f0      	beq.n	800c120 <HAL_RCC_OscConfig+0x77c>
 800c13e:	e082      	b.n	800c246 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c140:	4b43      	ldr	r3, [pc, #268]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a42      	ldr	r2, [pc, #264]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c14a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c14c:	f7f9 f888 	bl	8005260 <HAL_GetTick>
 800c150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c152:	e008      	b.n	800c166 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c154:	f7f9 f884 	bl	8005260 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d901      	bls.n	800c166 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e070      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c166:	4b3a      	ldr	r3, [pc, #232]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1f0      	bne.n	800c154 <HAL_RCC_OscConfig+0x7b0>
 800c172:	e068      	b.n	800c246 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c174:	4b36      	ldr	r3, [pc, #216]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c17a:	4b35      	ldr	r3, [pc, #212]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c184:	2b01      	cmp	r3, #1
 800c186:	d031      	beq.n	800c1ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f003 0203 	and.w	r2, r3, #3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c192:	429a      	cmp	r2, r3
 800c194:	d12a      	bne.n	800c1ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	091b      	lsrs	r3, r3, #4
 800c19a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d122      	bne.n	800c1ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d11a      	bne.n	800c1ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	0a5b      	lsrs	r3, r3, #9
 800c1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d111      	bne.n	800c1ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	0c1b      	lsrs	r3, r3, #16
 800c1cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d108      	bne.n	800c1ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	0e1b      	lsrs	r3, r3, #24
 800c1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d001      	beq.n	800c1f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e02b      	b.n	800c248 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f4:	08db      	lsrs	r3, r3, #3
 800c1f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	429a      	cmp	r2, r3
 800c204:	d01f      	beq.n	800c246 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c20c:	f023 0301 	bic.w	r3, r3, #1
 800c210:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c212:	f7f9 f825 	bl	8005260 <HAL_GetTick>
 800c216:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c218:	bf00      	nop
 800c21a:	f7f9 f821 	bl	8005260 <HAL_GetTick>
 800c21e:	4602      	mov	r2, r0
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	4293      	cmp	r3, r2
 800c224:	d0f9      	beq.n	800c21a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c226:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c22a:	4b0a      	ldr	r3, [pc, #40]	; (800c254 <HAL_RCC_OscConfig+0x8b0>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c232:	00d2      	lsls	r2, r2, #3
 800c234:	4906      	ldr	r1, [pc, #24]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c236:	4313      	orrs	r3, r2
 800c238:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <HAL_RCC_OscConfig+0x8ac>)
 800c240:	f043 0301 	orr.w	r3, r3, #1
 800c244:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3730      	adds	r7, #48	; 0x30
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	58024400 	.word	0x58024400
 800c254:	ffff0007 	.word	0xffff0007

0800c258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e19c      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c26c:	4b8a      	ldr	r3, [pc, #552]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 030f 	and.w	r3, r3, #15
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d910      	bls.n	800c29c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c27a:	4b87      	ldr	r3, [pc, #540]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f023 020f 	bic.w	r2, r3, #15
 800c282:	4985      	ldr	r1, [pc, #532]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	4313      	orrs	r3, r2
 800c288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c28a:	4b83      	ldr	r3, [pc, #524]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 030f 	and.w	r3, r3, #15
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	d001      	beq.n	800c29c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e184      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0304 	and.w	r3, r3, #4
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d010      	beq.n	800c2ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	691a      	ldr	r2, [r3, #16]
 800c2ac:	4b7b      	ldr	r3, [pc, #492]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d908      	bls.n	800c2ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c2b8:	4b78      	ldr	r3, [pc, #480]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	4975      	ldr	r1, [pc, #468]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d010      	beq.n	800c2f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	695a      	ldr	r2, [r3, #20]
 800c2da:	4b70      	ldr	r3, [pc, #448]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d908      	bls.n	800c2f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c2e6:	4b6d      	ldr	r3, [pc, #436]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	496a      	ldr	r1, [pc, #424]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0310 	and.w	r3, r3, #16
 800c300:	2b00      	cmp	r3, #0
 800c302:	d010      	beq.n	800c326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	699a      	ldr	r2, [r3, #24]
 800c308:	4b64      	ldr	r3, [pc, #400]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c310:	429a      	cmp	r2, r3
 800c312:	d908      	bls.n	800c326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c314:	4b61      	ldr	r3, [pc, #388]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	495e      	ldr	r1, [pc, #376]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c322:	4313      	orrs	r3, r2
 800c324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0320 	and.w	r3, r3, #32
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d010      	beq.n	800c354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	69da      	ldr	r2, [r3, #28]
 800c336:	4b59      	ldr	r3, [pc, #356]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c33e:	429a      	cmp	r2, r3
 800c340:	d908      	bls.n	800c354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c342:	4b56      	ldr	r3, [pc, #344]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	4953      	ldr	r1, [pc, #332]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c350:	4313      	orrs	r3, r2
 800c352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 0302 	and.w	r3, r3, #2
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d010      	beq.n	800c382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	4b4d      	ldr	r3, [pc, #308]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	f003 030f 	and.w	r3, r3, #15
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d908      	bls.n	800c382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c370:	4b4a      	ldr	r3, [pc, #296]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	f023 020f 	bic.w	r2, r3, #15
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	4947      	ldr	r1, [pc, #284]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c37e:	4313      	orrs	r3, r2
 800c380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d055      	beq.n	800c43a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c38e:	4b43      	ldr	r3, [pc, #268]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	4940      	ldr	r1, [pc, #256]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c39c:	4313      	orrs	r3, r2
 800c39e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d107      	bne.n	800c3b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3a8:	4b3c      	ldr	r3, [pc, #240]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d121      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e0f6      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d107      	bne.n	800c3d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3c0:	4b36      	ldr	r3, [pc, #216]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d115      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e0ea      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d107      	bne.n	800c3e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c3d8:	4b30      	ldr	r3, [pc, #192]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d109      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e0de      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3e8:	4b2c      	ldr	r3, [pc, #176]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e0d6      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c3f8:	4b28      	ldr	r3, [pc, #160]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	f023 0207 	bic.w	r2, r3, #7
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	4925      	ldr	r1, [pc, #148]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c406:	4313      	orrs	r3, r2
 800c408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c40a:	f7f8 ff29 	bl	8005260 <HAL_GetTick>
 800c40e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c410:	e00a      	b.n	800c428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c412:	f7f8 ff25 	bl	8005260 <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c420:	4293      	cmp	r3, r2
 800c422:	d901      	bls.n	800c428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e0be      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c428:	4b1c      	ldr	r3, [pc, #112]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	429a      	cmp	r2, r3
 800c438:	d1eb      	bne.n	800c412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0302 	and.w	r3, r3, #2
 800c442:	2b00      	cmp	r3, #0
 800c444:	d010      	beq.n	800c468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68da      	ldr	r2, [r3, #12]
 800c44a:	4b14      	ldr	r3, [pc, #80]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	f003 030f 	and.w	r3, r3, #15
 800c452:	429a      	cmp	r2, r3
 800c454:	d208      	bcs.n	800c468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	f023 020f 	bic.w	r2, r3, #15
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	490e      	ldr	r1, [pc, #56]	; (800c49c <HAL_RCC_ClockConfig+0x244>)
 800c464:	4313      	orrs	r3, r2
 800c466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d214      	bcs.n	800c4a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c476:	4b08      	ldr	r3, [pc, #32]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f023 020f 	bic.w	r2, r3, #15
 800c47e:	4906      	ldr	r1, [pc, #24]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	4313      	orrs	r3, r2
 800c484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c486:	4b04      	ldr	r3, [pc, #16]	; (800c498 <HAL_RCC_ClockConfig+0x240>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d005      	beq.n	800c4a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e086      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x34e>
 800c498:	52002000 	.word	0x52002000
 800c49c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d010      	beq.n	800c4ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	691a      	ldr	r2, [r3, #16]
 800c4b0:	4b3f      	ldr	r3, [pc, #252]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d208      	bcs.n	800c4ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c4bc:	4b3c      	ldr	r3, [pc, #240]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	4939      	ldr	r1, [pc, #228]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d010      	beq.n	800c4fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	695a      	ldr	r2, [r3, #20]
 800c4de:	4b34      	ldr	r3, [pc, #208]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d208      	bcs.n	800c4fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c4ea:	4b31      	ldr	r3, [pc, #196]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	492e      	ldr	r1, [pc, #184]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0310 	and.w	r3, r3, #16
 800c504:	2b00      	cmp	r3, #0
 800c506:	d010      	beq.n	800c52a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	699a      	ldr	r2, [r3, #24]
 800c50c:	4b28      	ldr	r3, [pc, #160]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c514:	429a      	cmp	r2, r3
 800c516:	d208      	bcs.n	800c52a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c518:	4b25      	ldr	r3, [pc, #148]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	4922      	ldr	r1, [pc, #136]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c526:	4313      	orrs	r3, r2
 800c528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 0320 	and.w	r3, r3, #32
 800c532:	2b00      	cmp	r3, #0
 800c534:	d010      	beq.n	800c558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69da      	ldr	r2, [r3, #28]
 800c53a:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c542:	429a      	cmp	r2, r3
 800c544:	d208      	bcs.n	800c558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c546:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	4917      	ldr	r1, [pc, #92]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c554:	4313      	orrs	r3, r2
 800c556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c558:	f000 f834 	bl	800c5c4 <HAL_RCC_GetSysClockFreq>
 800c55c:	4602      	mov	r2, r0
 800c55e:	4b14      	ldr	r3, [pc, #80]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	0a1b      	lsrs	r3, r3, #8
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	4912      	ldr	r1, [pc, #72]	; (800c5b4 <HAL_RCC_ClockConfig+0x35c>)
 800c56a:	5ccb      	ldrb	r3, [r1, r3]
 800c56c:	f003 031f 	and.w	r3, r3, #31
 800c570:	fa22 f303 	lsr.w	r3, r2, r3
 800c574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c576:	4b0e      	ldr	r3, [pc, #56]	; (800c5b0 <HAL_RCC_ClockConfig+0x358>)
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <HAL_RCC_ClockConfig+0x35c>)
 800c580:	5cd3      	ldrb	r3, [r2, r3]
 800c582:	f003 031f 	and.w	r3, r3, #31
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
 800c58c:	4a0a      	ldr	r2, [pc, #40]	; (800c5b8 <HAL_RCC_ClockConfig+0x360>)
 800c58e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <HAL_RCC_ClockConfig+0x364>)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c596:	4b0a      	ldr	r3, [pc, #40]	; (800c5c0 <HAL_RCC_ClockConfig+0x368>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7f8 fe16 	bl	80051cc <HAL_InitTick>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	58024400 	.word	0x58024400
 800c5b4:	08017f94 	.word	0x08017f94
 800c5b8:	2000001c 	.word	0x2000001c
 800c5bc:	20000018 	.word	0x20000018
 800c5c0:	20000040 	.word	0x20000040

0800c5c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b089      	sub	sp, #36	; 0x24
 800c5c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5ca:	4bb3      	ldr	r3, [pc, #716]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5d2:	2b18      	cmp	r3, #24
 800c5d4:	f200 8155 	bhi.w	800c882 <HAL_RCC_GetSysClockFreq+0x2be>
 800c5d8:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5de:	bf00      	nop
 800c5e0:	0800c645 	.word	0x0800c645
 800c5e4:	0800c883 	.word	0x0800c883
 800c5e8:	0800c883 	.word	0x0800c883
 800c5ec:	0800c883 	.word	0x0800c883
 800c5f0:	0800c883 	.word	0x0800c883
 800c5f4:	0800c883 	.word	0x0800c883
 800c5f8:	0800c883 	.word	0x0800c883
 800c5fc:	0800c883 	.word	0x0800c883
 800c600:	0800c66b 	.word	0x0800c66b
 800c604:	0800c883 	.word	0x0800c883
 800c608:	0800c883 	.word	0x0800c883
 800c60c:	0800c883 	.word	0x0800c883
 800c610:	0800c883 	.word	0x0800c883
 800c614:	0800c883 	.word	0x0800c883
 800c618:	0800c883 	.word	0x0800c883
 800c61c:	0800c883 	.word	0x0800c883
 800c620:	0800c671 	.word	0x0800c671
 800c624:	0800c883 	.word	0x0800c883
 800c628:	0800c883 	.word	0x0800c883
 800c62c:	0800c883 	.word	0x0800c883
 800c630:	0800c883 	.word	0x0800c883
 800c634:	0800c883 	.word	0x0800c883
 800c638:	0800c883 	.word	0x0800c883
 800c63c:	0800c883 	.word	0x0800c883
 800c640:	0800c677 	.word	0x0800c677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c644:	4b94      	ldr	r3, [pc, #592]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d009      	beq.n	800c664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c650:	4b91      	ldr	r3, [pc, #580]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	08db      	lsrs	r3, r3, #3
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	4a90      	ldr	r2, [pc, #576]	; (800c89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c65c:	fa22 f303 	lsr.w	r3, r2, r3
 800c660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c662:	e111      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c664:	4b8d      	ldr	r3, [pc, #564]	; (800c89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c666:	61bb      	str	r3, [r7, #24]
      break;
 800c668:	e10e      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c66a:	4b8d      	ldr	r3, [pc, #564]	; (800c8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c66c:	61bb      	str	r3, [r7, #24]
      break;
 800c66e:	e10b      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c670:	4b8c      	ldr	r3, [pc, #560]	; (800c8a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c672:	61bb      	str	r3, [r7, #24]
      break;
 800c674:	e108      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c676:	4b88      	ldr	r3, [pc, #544]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67a:	f003 0303 	and.w	r3, r3, #3
 800c67e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c680:	4b85      	ldr	r3, [pc, #532]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c684:	091b      	lsrs	r3, r3, #4
 800c686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c68a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c68c:	4b82      	ldr	r3, [pc, #520]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c696:	4b80      	ldr	r3, [pc, #512]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69a:	08db      	lsrs	r3, r3, #3
 800c69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 80e1 	beq.w	800c87c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	f000 8083 	beq.w	800c7c8 <HAL_RCC_GetSysClockFreq+0x204>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	f200 80a1 	bhi.w	800c80c <HAL_RCC_GetSysClockFreq+0x248>
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <HAL_RCC_GetSysClockFreq+0x114>
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d056      	beq.n	800c784 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c6d6:	e099      	b.n	800c80c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6d8:	4b6f      	ldr	r3, [pc, #444]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d02d      	beq.n	800c740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e4:	4b6c      	ldr	r3, [pc, #432]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	08db      	lsrs	r3, r3, #3
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	4a6b      	ldr	r2, [pc, #428]	; (800c89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	ee07 3a90 	vmov	s15, r3
 800c6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70e:	4b62      	ldr	r3, [pc, #392]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c722:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c73e:	e087      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	ee07 3a90 	vmov	s15, r3
 800c746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c8ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800c74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c752:	4b51      	ldr	r3, [pc, #324]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75a:	ee07 3a90 	vmov	s15, r3
 800c75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c762:	ed97 6a02 	vldr	s12, [r7, #8]
 800c766:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c782:	e065      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c796:	4b40      	ldr	r3, [pc, #256]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c7c6:	e043      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c8b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7da:	4b2f      	ldr	r3, [pc, #188]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c80a:	e021      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c816:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81e:	4b1e      	ldr	r3, [pc, #120]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c84e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c850:	4b11      	ldr	r3, [pc, #68]	; (800c898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c854:	0a5b      	lsrs	r3, r3, #9
 800c856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c85a:	3301      	adds	r3, #1
 800c85c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	ee07 3a90 	vmov	s15, r3
 800c864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c868:	edd7 6a07 	vldr	s13, [r7, #28]
 800c86c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c874:	ee17 3a90 	vmov	r3, s15
 800c878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c87a:	e005      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	61bb      	str	r3, [r7, #24]
      break;
 800c880:	e002      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c882:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c884:	61bb      	str	r3, [r7, #24]
      break;
 800c886:	bf00      	nop
  }

  return sysclockfreq;
 800c888:	69bb      	ldr	r3, [r7, #24]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3724      	adds	r7, #36	; 0x24
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	58024400 	.word	0x58024400
 800c89c:	03d09000 	.word	0x03d09000
 800c8a0:	003d0900 	.word	0x003d0900
 800c8a4:	017d7840 	.word	0x017d7840
 800c8a8:	46000000 	.word	0x46000000
 800c8ac:	4c742400 	.word	0x4c742400
 800c8b0:	4a742400 	.word	0x4a742400
 800c8b4:	4bbebc20 	.word	0x4bbebc20

0800c8b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c8be:	f7ff fe81 	bl	800c5c4 <HAL_RCC_GetSysClockFreq>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4b10      	ldr	r3, [pc, #64]	; (800c908 <HAL_RCC_GetHCLKFreq+0x50>)
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	0a1b      	lsrs	r3, r3, #8
 800c8ca:	f003 030f 	and.w	r3, r3, #15
 800c8ce:	490f      	ldr	r1, [pc, #60]	; (800c90c <HAL_RCC_GetHCLKFreq+0x54>)
 800c8d0:	5ccb      	ldrb	r3, [r1, r3]
 800c8d2:	f003 031f 	and.w	r3, r3, #31
 800c8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c8dc:	4b0a      	ldr	r3, [pc, #40]	; (800c908 <HAL_RCC_GetHCLKFreq+0x50>)
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	f003 030f 	and.w	r3, r3, #15
 800c8e4:	4a09      	ldr	r2, [pc, #36]	; (800c90c <HAL_RCC_GetHCLKFreq+0x54>)
 800c8e6:	5cd3      	ldrb	r3, [r2, r3]
 800c8e8:	f003 031f 	and.w	r3, r3, #31
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c8f2:	4a07      	ldr	r2, [pc, #28]	; (800c910 <HAL_RCC_GetHCLKFreq+0x58>)
 800c8f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c8f6:	4a07      	ldr	r2, [pc, #28]	; (800c914 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c8fc:	4b04      	ldr	r3, [pc, #16]	; (800c910 <HAL_RCC_GetHCLKFreq+0x58>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	58024400 	.word	0x58024400
 800c90c:	08017f94 	.word	0x08017f94
 800c910:	2000001c 	.word	0x2000001c
 800c914:	20000018 	.word	0x20000018

0800c918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c91c:	f7ff ffcc 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 800c920:	4602      	mov	r2, r0
 800c922:	4b06      	ldr	r3, [pc, #24]	; (800c93c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	091b      	lsrs	r3, r3, #4
 800c928:	f003 0307 	and.w	r3, r3, #7
 800c92c:	4904      	ldr	r1, [pc, #16]	; (800c940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c92e:	5ccb      	ldrb	r3, [r1, r3]
 800c930:	f003 031f 	and.w	r3, r3, #31
 800c934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c938:	4618      	mov	r0, r3
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	58024400 	.word	0x58024400
 800c940:	08017f94 	.word	0x08017f94

0800c944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c948:	f7ff ffb6 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 800c94c:	4602      	mov	r2, r0
 800c94e:	4b06      	ldr	r3, [pc, #24]	; (800c968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	0a1b      	lsrs	r3, r3, #8
 800c954:	f003 0307 	and.w	r3, r3, #7
 800c958:	4904      	ldr	r1, [pc, #16]	; (800c96c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c95a:	5ccb      	ldrb	r3, [r1, r3]
 800c95c:	f003 031f 	and.w	r3, r3, #31
 800c960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c964:	4618      	mov	r0, r3
 800c966:	bd80      	pop	{r7, pc}
 800c968:	58024400 	.word	0x58024400
 800c96c:	08017f94 	.word	0x08017f94

0800c970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c974:	b0ca      	sub	sp, #296	; 0x128
 800c976:	af00      	add	r7, sp, #0
 800c978:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c97c:	2300      	movs	r3, #0
 800c97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c982:	2300      	movs	r3, #0
 800c984:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c994:	2500      	movs	r5, #0
 800c996:	ea54 0305 	orrs.w	r3, r4, r5
 800c99a:	d049      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9a6:	d02f      	beq.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c9a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9ac:	d828      	bhi.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9b2:	d01a      	beq.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c9b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9b8:	d822      	bhi.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9c2:	d007      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c9c4:	e01c      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9c6:	4bb8      	ldr	r3, [pc, #736]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ca:	4ab7      	ldr	r2, [pc, #732]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9d2:	e01a      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d8:	3308      	adds	r3, #8
 800c9da:	2102      	movs	r1, #2
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f002 fb61 	bl	800f0a4 <RCCEx_PLL2_Config>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9e8:	e00f      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ee:	3328      	adds	r3, #40	; 0x28
 800c9f0:	2102      	movs	r1, #2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f002 fc08 	bl	800f208 <RCCEx_PLL3_Config>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9fe:	e004      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca06:	e000      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ca08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ca12:	4ba5      	ldr	r3, [pc, #660]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca20:	4aa1      	ldr	r2, [pc, #644]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca22:	430b      	orrs	r3, r1
 800ca24:	6513      	str	r3, [r2, #80]	; 0x50
 800ca26:	e003      	b.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ca30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ca3c:	f04f 0900 	mov.w	r9, #0
 800ca40:	ea58 0309 	orrs.w	r3, r8, r9
 800ca44:	d047      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ca46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d82a      	bhi.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ca50:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ca52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca56:	bf00      	nop
 800ca58:	0800ca6d 	.word	0x0800ca6d
 800ca5c:	0800ca7b 	.word	0x0800ca7b
 800ca60:	0800ca91 	.word	0x0800ca91
 800ca64:	0800caaf 	.word	0x0800caaf
 800ca68:	0800caaf 	.word	0x0800caaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca6c:	4b8e      	ldr	r3, [pc, #568]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	4a8d      	ldr	r2, [pc, #564]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca78:	e01a      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca7e:	3308      	adds	r3, #8
 800ca80:	2100      	movs	r1, #0
 800ca82:	4618      	mov	r0, r3
 800ca84:	f002 fb0e 	bl	800f0a4 <RCCEx_PLL2_Config>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca8e:	e00f      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca94:	3328      	adds	r3, #40	; 0x28
 800ca96:	2100      	movs	r1, #0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f002 fbb5 	bl	800f208 <RCCEx_PLL3_Config>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800caa4:	e004      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800caac:	e000      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800caae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10a      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cab8:	4b7b      	ldr	r3, [pc, #492]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800caba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cabc:	f023 0107 	bic.w	r1, r3, #7
 800cac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac6:	4a78      	ldr	r2, [pc, #480]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cac8:	430b      	orrs	r3, r1
 800caca:	6513      	str	r3, [r2, #80]	; 0x50
 800cacc:	e003      	b.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800cae2:	f04f 0b00 	mov.w	fp, #0
 800cae6:	ea5a 030b 	orrs.w	r3, sl, fp
 800caea:	d04c      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800caec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caf6:	d030      	beq.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800caf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cafc:	d829      	bhi.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cafe:	2bc0      	cmp	r3, #192	; 0xc0
 800cb00:	d02d      	beq.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cb02:	2bc0      	cmp	r3, #192	; 0xc0
 800cb04:	d825      	bhi.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb06:	2b80      	cmp	r3, #128	; 0x80
 800cb08:	d018      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cb0a:	2b80      	cmp	r3, #128	; 0x80
 800cb0c:	d821      	bhi.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	d007      	beq.n	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cb16:	e01c      	b.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb18:	4b63      	ldr	r3, [pc, #396]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1c:	4a62      	ldr	r2, [pc, #392]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb24:	e01c      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f002 fab8 	bl	800f0a4 <RCCEx_PLL2_Config>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb3a:	e011      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb40:	3328      	adds	r3, #40	; 0x28
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f002 fb5f 	bl	800f208 <RCCEx_PLL3_Config>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb50:	e006      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb58:	e002      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb5a:	bf00      	nop
 800cb5c:	e000      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10a      	bne.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cb68:	4b4f      	ldr	r3, [pc, #316]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800cb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb76:	4a4c      	ldr	r2, [pc, #304]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	6513      	str	r3, [r2, #80]	; 0x50
 800cb7c:	e003      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cb92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cb96:	2300      	movs	r3, #0
 800cb98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cb9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800cba0:	460b      	mov	r3, r1
 800cba2:	4313      	orrs	r3, r2
 800cba4:	d053      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cbae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbb2:	d035      	beq.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cbb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbb8:	d82e      	bhi.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cbbe:	d031      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cbc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cbc4:	d828      	bhi.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbca:	d01a      	beq.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cbcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbd0:	d822      	bhi.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cbd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbda:	d007      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cbdc:	e01c      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbde:	4b32      	ldr	r3, [pc, #200]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	4a31      	ldr	r2, [pc, #196]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbea:	e01c      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f002 fa55 	bl	800f0a4 <RCCEx_PLL2_Config>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cc00:	e011      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc06:	3328      	adds	r3, #40	; 0x28
 800cc08:	2100      	movs	r1, #0
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f002 fafc 	bl	800f208 <RCCEx_PLL3_Config>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc16:	e006      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc1e:	e002      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc20:	bf00      	nop
 800cc22:	e000      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10b      	bne.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cc2e:	4b1e      	ldr	r3, [pc, #120]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc32:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800cc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc3e:	4a1a      	ldr	r2, [pc, #104]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc40:	430b      	orrs	r3, r1
 800cc42:	6593      	str	r3, [r2, #88]	; 0x58
 800cc44:	e003      	b.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc56:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cc5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cc64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	d056      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cc76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc7a:	d038      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cc7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc80:	d831      	bhi.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc86:	d034      	beq.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cc88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc8c:	d82b      	bhi.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc92:	d01d      	beq.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cc94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc98:	d825      	bhi.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d006      	beq.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cc9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cca2:	d00a      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cca4:	e01f      	b.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cca6:	bf00      	nop
 800cca8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccac:	4ba2      	ldr	r3, [pc, #648]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb0:	4aa1      	ldr	r2, [pc, #644]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccb8:	e01c      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f002 f9ee 	bl	800f0a4 <RCCEx_PLL2_Config>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ccce:	e011      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccd4:	3328      	adds	r3, #40	; 0x28
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f002 fa95 	bl	800f208 <RCCEx_PLL3_Config>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cce4:	e006      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccec:	e002      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ccee:	bf00      	nop
 800ccf0:	e000      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ccf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10b      	bne.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ccfc:	4b8e      	ldr	r3, [pc, #568]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd0c:	4a8a      	ldr	r2, [pc, #552]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd0e:	430b      	orrs	r3, r1
 800cd10:	6593      	str	r3, [r2, #88]	; 0x58
 800cd12:	e003      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cd28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cd32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cd36:	460b      	mov	r3, r1
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	d03a      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd42:	2b30      	cmp	r3, #48	; 0x30
 800cd44:	d01f      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cd46:	2b30      	cmp	r3, #48	; 0x30
 800cd48:	d819      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d00c      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cd4e:	2b20      	cmp	r3, #32
 800cd50:	d815      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d019      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cd56:	2b10      	cmp	r3, #16
 800cd58:	d111      	bne.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd5a:	4b77      	ldr	r3, [pc, #476]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	4a76      	ldr	r2, [pc, #472]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd66:	e011      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	2102      	movs	r1, #2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f002 f997 	bl	800f0a4 <RCCEx_PLL2_Config>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd7c:	e006      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd84:	e002      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd86:	bf00      	nop
 800cd88:	e000      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cd94:	4b68      	ldr	r3, [pc, #416]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cda2:	4a65      	ldr	r2, [pc, #404]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cda4:	430b      	orrs	r3, r1
 800cda6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cda8:	e003      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cdbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	d051      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cddc:	d035      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cdde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cde2:	d82e      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cde4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cde8:	d031      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cdea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdee:	d828      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cdf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdf4:	d01a      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cdf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdfa:	d822      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ce00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce04:	d007      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ce06:	e01c      	b.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce08:	4b4b      	ldr	r3, [pc, #300]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	4a4a      	ldr	r2, [pc, #296]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce14:	e01c      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f002 f940 	bl	800f0a4 <RCCEx_PLL2_Config>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce2a:	e011      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce30:	3328      	adds	r3, #40	; 0x28
 800ce32:	2100      	movs	r1, #0
 800ce34:	4618      	mov	r0, r3
 800ce36:	f002 f9e7 	bl	800f208 <RCCEx_PLL3_Config>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce40:	e006      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce48:	e002      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce4a:	bf00      	nop
 800ce4c:	e000      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce58:	4b37      	ldr	r3, [pc, #220]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ce60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce66:	4a34      	ldr	r2, [pc, #208]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce68:	430b      	orrs	r3, r1
 800ce6a:	6513      	str	r3, [r2, #80]	; 0x50
 800ce6c:	e003      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ce82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce86:	2300      	movs	r3, #0
 800ce88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ce8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ce90:	460b      	mov	r3, r1
 800ce92:	4313      	orrs	r3, r2
 800ce94:	d056      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ce96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cea0:	d033      	beq.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cea6:	d82c      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceac:	d02f      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ceae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceb2:	d826      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ceb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ceb8:	d02b      	beq.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ceba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cebe:	d820      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cec4:	d012      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceca:	d81a      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d022      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ced0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced4:	d115      	bne.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ced6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceda:	3308      	adds	r3, #8
 800cedc:	2101      	movs	r1, #1
 800cede:	4618      	mov	r0, r3
 800cee0:	f002 f8e0 	bl	800f0a4 <RCCEx_PLL2_Config>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ceea:	e015      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ceec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cef0:	3328      	adds	r3, #40	; 0x28
 800cef2:	2101      	movs	r1, #1
 800cef4:	4618      	mov	r0, r3
 800cef6:	f002 f987 	bl	800f208 <RCCEx_PLL3_Config>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cf00:	e00a      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf08:	e006      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf0a:	bf00      	nop
 800cf0c:	e004      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf0e:	bf00      	nop
 800cf10:	e002      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf12:	bf00      	nop
 800cf14:	e000      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10d      	bne.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf24:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cf28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf2e:	4a02      	ldr	r2, [pc, #8]	; (800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf30:	430b      	orrs	r3, r1
 800cf32:	6513      	str	r3, [r2, #80]	; 0x50
 800cf34:	e006      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cf44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cf50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf54:	2300      	movs	r3, #0
 800cf56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4313      	orrs	r3, r2
 800cf62:	d055      	beq.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cf64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf70:	d033      	beq.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cf72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf76:	d82c      	bhi.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7c:	d02f      	beq.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf82:	d826      	bhi.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf88:	d02b      	beq.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cf8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf8e:	d820      	bhi.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf94:	d012      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cf96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9a:	d81a      	bhi.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d022      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cfa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfa4:	d115      	bne.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfaa:	3308      	adds	r3, #8
 800cfac:	2101      	movs	r1, #1
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f002 f878 	bl	800f0a4 <RCCEx_PLL2_Config>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfba:	e015      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfc0:	3328      	adds	r3, #40	; 0x28
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f002 f91f 	bl	800f208 <RCCEx_PLL3_Config>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfd0:	e00a      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfd8:	e006      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfda:	bf00      	nop
 800cfdc:	e004      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10b      	bne.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cff0:	4ba3      	ldr	r3, [pc, #652]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d000:	4a9f      	ldr	r2, [pc, #636]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d002:	430b      	orrs	r3, r1
 800d004:	6593      	str	r3, [r2, #88]	; 0x58
 800d006:	e003      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d00c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d01c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d020:	2300      	movs	r3, #0
 800d022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d02a:	460b      	mov	r3, r1
 800d02c:	4313      	orrs	r3, r2
 800d02e:	d037      	beq.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d03a:	d00e      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d040:	d816      	bhi.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d042:	2b00      	cmp	r3, #0
 800d044:	d018      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d04a:	d111      	bne.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d04c:	4b8c      	ldr	r3, [pc, #560]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	4a8b      	ldr	r2, [pc, #556]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d058:	e00f      	b.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d05e:	3308      	adds	r3, #8
 800d060:	2101      	movs	r1, #1
 800d062:	4618      	mov	r0, r3
 800d064:	f002 f81e 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d068:	4603      	mov	r3, r0
 800d06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d06e:	e004      	b.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d076:	e000      	b.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d082:	4b7f      	ldr	r3, [pc, #508]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d086:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d090:	4a7b      	ldr	r2, [pc, #492]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d092:	430b      	orrs	r3, r1
 800d094:	6513      	str	r3, [r2, #80]	; 0x50
 800d096:	e003      	b.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d09c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d0b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	d039      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d81c      	bhi.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d0ca:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d0:	0800d10d 	.word	0x0800d10d
 800d0d4:	0800d0e1 	.word	0x0800d0e1
 800d0d8:	0800d0ef 	.word	0x0800d0ef
 800d0dc:	0800d10d 	.word	0x0800d10d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0e0:	4b67      	ldr	r3, [pc, #412]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e4:	4a66      	ldr	r2, [pc, #408]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d0ec:	e00f      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	2102      	movs	r1, #2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f001 ffd4 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d102:	e004      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d10a:	e000      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d116:	4b5a      	ldr	r3, [pc, #360]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d11a:	f023 0103 	bic.w	r1, r3, #3
 800d11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d124:	4a56      	ldr	r2, [pc, #344]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d126:	430b      	orrs	r3, r1
 800d128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d12a:	e003      	b.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d12c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d144:	2300      	movs	r3, #0
 800d146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d14a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d14e:	460b      	mov	r3, r1
 800d150:	4313      	orrs	r3, r2
 800d152:	f000 809f 	beq.w	800d294 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d156:	4b4b      	ldr	r3, [pc, #300]	; (800d284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a4a      	ldr	r2, [pc, #296]	; (800d284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d15c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d162:	f7f8 f87d 	bl	8005260 <HAL_GetTick>
 800d166:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d16a:	e00b      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d16c:	f7f8 f878 	bl	8005260 <HAL_GetTick>
 800d170:	4602      	mov	r2, r0
 800d172:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	2b64      	cmp	r3, #100	; 0x64
 800d17a:	d903      	bls.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d17c:	2303      	movs	r3, #3
 800d17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d182:	e005      	b.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d184:	4b3f      	ldr	r3, [pc, #252]	; (800d284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d0ed      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d194:	2b00      	cmp	r3, #0
 800d196:	d179      	bne.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d198:	4b39      	ldr	r3, [pc, #228]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d19a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1a4:	4053      	eors	r3, r2
 800d1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d015      	beq.n	800d1da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d1ae:	4b34      	ldr	r3, [pc, #208]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1ba:	4b31      	ldr	r3, [pc, #196]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1be:	4a30      	ldr	r2, [pc, #192]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1c6:	4b2e      	ldr	r3, [pc, #184]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ca:	4a2d      	ldr	r2, [pc, #180]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d1d2:	4a2b      	ldr	r2, [pc, #172]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d1d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1e6:	d118      	bne.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1e8:	f7f8 f83a 	bl	8005260 <HAL_GetTick>
 800d1ec:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1f0:	e00d      	b.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1f2:	f7f8 f835 	bl	8005260 <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d1fc:	1ad2      	subs	r2, r2, r3
 800d1fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800d202:	429a      	cmp	r2, r3
 800d204:	d903      	bls.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d20c:	e005      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d20e:	4b1c      	ldr	r3, [pc, #112]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0eb      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d129      	bne.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d22a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d22e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d232:	d10e      	bne.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d234:	4b12      	ldr	r3, [pc, #72]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d244:	091a      	lsrs	r2, r3, #4
 800d246:	4b10      	ldr	r3, [pc, #64]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d248:	4013      	ands	r3, r2
 800d24a:	4a0d      	ldr	r2, [pc, #52]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d24c:	430b      	orrs	r3, r1
 800d24e:	6113      	str	r3, [r2, #16]
 800d250:	e005      	b.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d252:	4b0b      	ldr	r3, [pc, #44]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	4a0a      	ldr	r2, [pc, #40]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d25c:	6113      	str	r3, [r2, #16]
 800d25e:	4b08      	ldr	r3, [pc, #32]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d260:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d26a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d26e:	4a04      	ldr	r2, [pc, #16]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d270:	430b      	orrs	r3, r1
 800d272:	6713      	str	r3, [r2, #112]	; 0x70
 800d274:	e00e      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d27a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d27e:	e009      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d280:	58024400 	.word	0x58024400
 800d284:	58024800 	.word	0x58024800
 800d288:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d28c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	f002 0301 	and.w	r3, r2, #1
 800d2a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	f000 8089 	beq.w	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2bc:	2b28      	cmp	r3, #40	; 0x28
 800d2be:	d86b      	bhi.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d2c0:	a201      	add	r2, pc, #4	; (adr r2, 800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d3a1 	.word	0x0800d3a1
 800d2cc:	0800d399 	.word	0x0800d399
 800d2d0:	0800d399 	.word	0x0800d399
 800d2d4:	0800d399 	.word	0x0800d399
 800d2d8:	0800d399 	.word	0x0800d399
 800d2dc:	0800d399 	.word	0x0800d399
 800d2e0:	0800d399 	.word	0x0800d399
 800d2e4:	0800d399 	.word	0x0800d399
 800d2e8:	0800d36d 	.word	0x0800d36d
 800d2ec:	0800d399 	.word	0x0800d399
 800d2f0:	0800d399 	.word	0x0800d399
 800d2f4:	0800d399 	.word	0x0800d399
 800d2f8:	0800d399 	.word	0x0800d399
 800d2fc:	0800d399 	.word	0x0800d399
 800d300:	0800d399 	.word	0x0800d399
 800d304:	0800d399 	.word	0x0800d399
 800d308:	0800d383 	.word	0x0800d383
 800d30c:	0800d399 	.word	0x0800d399
 800d310:	0800d399 	.word	0x0800d399
 800d314:	0800d399 	.word	0x0800d399
 800d318:	0800d399 	.word	0x0800d399
 800d31c:	0800d399 	.word	0x0800d399
 800d320:	0800d399 	.word	0x0800d399
 800d324:	0800d399 	.word	0x0800d399
 800d328:	0800d3a1 	.word	0x0800d3a1
 800d32c:	0800d399 	.word	0x0800d399
 800d330:	0800d399 	.word	0x0800d399
 800d334:	0800d399 	.word	0x0800d399
 800d338:	0800d399 	.word	0x0800d399
 800d33c:	0800d399 	.word	0x0800d399
 800d340:	0800d399 	.word	0x0800d399
 800d344:	0800d399 	.word	0x0800d399
 800d348:	0800d3a1 	.word	0x0800d3a1
 800d34c:	0800d399 	.word	0x0800d399
 800d350:	0800d399 	.word	0x0800d399
 800d354:	0800d399 	.word	0x0800d399
 800d358:	0800d399 	.word	0x0800d399
 800d35c:	0800d399 	.word	0x0800d399
 800d360:	0800d399 	.word	0x0800d399
 800d364:	0800d399 	.word	0x0800d399
 800d368:	0800d3a1 	.word	0x0800d3a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d370:	3308      	adds	r3, #8
 800d372:	2101      	movs	r1, #1
 800d374:	4618      	mov	r0, r3
 800d376:	f001 fe95 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d380:	e00f      	b.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d386:	3328      	adds	r3, #40	; 0x28
 800d388:	2101      	movs	r1, #1
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 ff3c 	bl	800f208 <RCCEx_PLL3_Config>
 800d390:	4603      	mov	r3, r0
 800d392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d396:	e004      	b.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d39e:	e000      	b.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10a      	bne.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d3aa:	4bbf      	ldr	r3, [pc, #764]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b8:	4abb      	ldr	r2, [pc, #748]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3ba:	430b      	orrs	r3, r1
 800d3bc:	6553      	str	r3, [r2, #84]	; 0x54
 800d3be:	e003      	b.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d0:	f002 0302 	and.w	r3, r2, #2
 800d3d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d3de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	d041      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ee:	2b05      	cmp	r3, #5
 800d3f0:	d824      	bhi.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d3f2:	a201      	add	r2, pc, #4	; (adr r2, 800d3f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f8:	0800d445 	.word	0x0800d445
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d427 	.word	0x0800d427
 800d404:	0800d445 	.word	0x0800d445
 800d408:	0800d445 	.word	0x0800d445
 800d40c:	0800d445 	.word	0x0800d445
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d414:	3308      	adds	r3, #8
 800d416:	2101      	movs	r1, #1
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 fe43 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d41e:	4603      	mov	r3, r0
 800d420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d424:	e00f      	b.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d42a:	3328      	adds	r3, #40	; 0x28
 800d42c:	2101      	movs	r1, #1
 800d42e:	4618      	mov	r0, r3
 800d430:	f001 feea 	bl	800f208 <RCCEx_PLL3_Config>
 800d434:	4603      	mov	r3, r0
 800d436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d43a:	e004      	b.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d442:	e000      	b.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d444:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10a      	bne.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d44e:	4b96      	ldr	r3, [pc, #600]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d452:	f023 0107 	bic.w	r1, r3, #7
 800d456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d45a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d45c:	4a92      	ldr	r2, [pc, #584]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d45e:	430b      	orrs	r3, r1
 800d460:	6553      	str	r3, [r2, #84]	; 0x54
 800d462:	e003      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	f002 0304 	and.w	r3, r2, #4
 800d478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d47c:	2300      	movs	r3, #0
 800d47e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d482:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d486:	460b      	mov	r3, r1
 800d488:	4313      	orrs	r3, r2
 800d48a:	d044      	beq.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d494:	2b05      	cmp	r3, #5
 800d496:	d825      	bhi.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d498:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d4ed 	.word	0x0800d4ed
 800d4a4:	0800d4b9 	.word	0x0800d4b9
 800d4a8:	0800d4cf 	.word	0x0800d4cf
 800d4ac:	0800d4ed 	.word	0x0800d4ed
 800d4b0:	0800d4ed 	.word	0x0800d4ed
 800d4b4:	0800d4ed 	.word	0x0800d4ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4bc:	3308      	adds	r3, #8
 800d4be:	2101      	movs	r1, #1
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f001 fdef 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4cc:	e00f      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4d2:	3328      	adds	r3, #40	; 0x28
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f001 fe96 	bl	800f208 <RCCEx_PLL3_Config>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4e2:	e004      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d4ea:	e000      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10b      	bne.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d4f6:	4b6c      	ldr	r3, [pc, #432]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4fa:	f023 0107 	bic.w	r1, r3, #7
 800d4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d506:	4a68      	ldr	r2, [pc, #416]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d508:	430b      	orrs	r3, r1
 800d50a:	6593      	str	r3, [r2, #88]	; 0x58
 800d50c:	e003      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d50e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f002 0320 	and.w	r3, r2, #32
 800d522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d526:	2300      	movs	r3, #0
 800d528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d52c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d530:	460b      	mov	r3, r1
 800d532:	4313      	orrs	r3, r2
 800d534:	d055      	beq.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d53e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d542:	d033      	beq.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d548:	d82c      	bhi.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d54e:	d02f      	beq.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d554:	d826      	bhi.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d556:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d55a:	d02b      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d55c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d560:	d820      	bhi.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d566:	d012      	beq.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d56c:	d81a      	bhi.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d022      	beq.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d576:	d115      	bne.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d57c:	3308      	adds	r3, #8
 800d57e:	2100      	movs	r1, #0
 800d580:	4618      	mov	r0, r3
 800d582:	f001 fd8f 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d586:	4603      	mov	r3, r0
 800d588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d58c:	e015      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d592:	3328      	adds	r3, #40	; 0x28
 800d594:	2102      	movs	r1, #2
 800d596:	4618      	mov	r0, r3
 800d598:	f001 fe36 	bl	800f208 <RCCEx_PLL3_Config>
 800d59c:	4603      	mov	r3, r0
 800d59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5a2:	e00a      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5aa:	e006      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5ac:	bf00      	nop
 800d5ae:	e004      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5b0:	bf00      	nop
 800d5b2:	e002      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5b4:	bf00      	nop
 800d5b6:	e000      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10b      	bne.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d5c2:	4b39      	ldr	r3, [pc, #228]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5d2:	4a35      	ldr	r2, [pc, #212]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	6553      	str	r3, [r2, #84]	; 0x54
 800d5d8:	e003      	b.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d5f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4313      	orrs	r3, r2
 800d600:	d058      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d60a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d60e:	d033      	beq.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d610:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d614:	d82c      	bhi.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d61a:	d02f      	beq.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d620:	d826      	bhi.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d626:	d02b      	beq.n	800d680 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d62c:	d820      	bhi.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d62e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d632:	d012      	beq.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d638:	d81a      	bhi.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d022      	beq.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d63e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d642:	d115      	bne.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d648:	3308      	adds	r3, #8
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 fd29 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d652:	4603      	mov	r3, r0
 800d654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d658:	e015      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d65e:	3328      	adds	r3, #40	; 0x28
 800d660:	2102      	movs	r1, #2
 800d662:	4618      	mov	r0, r3
 800d664:	f001 fdd0 	bl	800f208 <RCCEx_PLL3_Config>
 800d668:	4603      	mov	r3, r0
 800d66a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d66e:	e00a      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d676:	e006      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d678:	bf00      	nop
 800d67a:	e004      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d67c:	bf00      	nop
 800d67e:	e002      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d680:	bf00      	nop
 800d682:	e000      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d684:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10e      	bne.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d692:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d69a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d69e:	4a02      	ldr	r2, [pc, #8]	; (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	6593      	str	r3, [r2, #88]	; 0x58
 800d6a4:	e006      	b.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d6a6:	bf00      	nop
 800d6a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d6c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	d055      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d6dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6e0:	d033      	beq.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d6e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6e6:	d82c      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d6e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6ec:	d02f      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d6ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6f2:	d826      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d6f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d6f8:	d02b      	beq.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d6fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d6fe:	d820      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d704:	d012      	beq.n	800d72c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d70a:	d81a      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d022      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d714:	d115      	bne.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d71a:	3308      	adds	r3, #8
 800d71c:	2100      	movs	r1, #0
 800d71e:	4618      	mov	r0, r3
 800d720:	f001 fcc0 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d72a:	e015      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d730:	3328      	adds	r3, #40	; 0x28
 800d732:	2102      	movs	r1, #2
 800d734:	4618      	mov	r0, r3
 800d736:	f001 fd67 	bl	800f208 <RCCEx_PLL3_Config>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d740:	e00a      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d748:	e006      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d74a:	bf00      	nop
 800d74c:	e004      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d74e:	bf00      	nop
 800d750:	e002      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d752:	bf00      	nop
 800d754:	e000      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d756:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d760:	4ba1      	ldr	r3, [pc, #644]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d764:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d76c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d770:	4a9d      	ldr	r2, [pc, #628]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d772:	430b      	orrs	r3, r1
 800d774:	6593      	str	r3, [r2, #88]	; 0x58
 800d776:	e003      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d77c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f002 0308 	and.w	r3, r2, #8
 800d78c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d790:	2300      	movs	r3, #0
 800d792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d796:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d79a:	460b      	mov	r3, r1
 800d79c:	4313      	orrs	r3, r2
 800d79e:	d01e      	beq.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ac:	d10c      	bne.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b2:	3328      	adds	r3, #40	; 0x28
 800d7b4:	2102      	movs	r1, #2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fd26 	bl	800f208 <RCCEx_PLL3_Config>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d7c8:	4b87      	ldr	r3, [pc, #540]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7d8:	4a83      	ldr	r2, [pc, #524]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7da:	430b      	orrs	r3, r1
 800d7dc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f002 0310 	and.w	r3, r2, #16
 800d7ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d7f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	d01e      	beq.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d80a:	d10c      	bne.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d810:	3328      	adds	r3, #40	; 0x28
 800d812:	2102      	movs	r1, #2
 800d814:	4618      	mov	r0, r3
 800d816:	f001 fcf7 	bl	800f208 <RCCEx_PLL3_Config>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d826:	4b70      	ldr	r3, [pc, #448]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d82a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d836:	4a6c      	ldr	r2, [pc, #432]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d838:	430b      	orrs	r3, r1
 800d83a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d84c:	2300      	movs	r3, #0
 800d84e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d852:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d856:	460b      	mov	r3, r1
 800d858:	4313      	orrs	r3, r2
 800d85a:	d03e      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d868:	d022      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d86a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d86e:	d81b      	bhi.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d870:	2b00      	cmp	r3, #0
 800d872:	d003      	beq.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d878:	d00b      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d87a:	e015      	b.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d880:	3308      	adds	r3, #8
 800d882:	2100      	movs	r1, #0
 800d884:	4618      	mov	r0, r3
 800d886:	f001 fc0d 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d88a:	4603      	mov	r3, r0
 800d88c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d890:	e00f      	b.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d896:	3328      	adds	r3, #40	; 0x28
 800d898:	2102      	movs	r1, #2
 800d89a:	4618      	mov	r0, r3
 800d89c:	f001 fcb4 	bl	800f208 <RCCEx_PLL3_Config>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8a6:	e004      	b.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d8ae:	e000      	b.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d8b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10b      	bne.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8ba:	4b4b      	ldr	r3, [pc, #300]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8ca:	4a47      	ldr	r2, [pc, #284]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8cc:	430b      	orrs	r3, r1
 800d8ce:	6593      	str	r3, [r2, #88]	; 0x58
 800d8d0:	e003      	b.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d8e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	d03b      	beq.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d902:	d01f      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d908:	d818      	bhi.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d90a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d90e:	d003      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d914:	d007      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d916:	e011      	b.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d918:	4b33      	ldr	r3, [pc, #204]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91c:	4a32      	ldr	r2, [pc, #200]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d91e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d924:	e00f      	b.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d92a:	3328      	adds	r3, #40	; 0x28
 800d92c:	2101      	movs	r1, #1
 800d92e:	4618      	mov	r0, r3
 800d930:	f001 fc6a 	bl	800f208 <RCCEx_PLL3_Config>
 800d934:	4603      	mov	r3, r0
 800d936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d93a:	e004      	b.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d942:	e000      	b.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d944:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10b      	bne.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d94e:	4b26      	ldr	r3, [pc, #152]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d952:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d95e:	4a22      	ldr	r2, [pc, #136]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d960:	430b      	orrs	r3, r1
 800d962:	6553      	str	r3, [r2, #84]	; 0x54
 800d964:	e003      	b.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d96a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d97a:	673b      	str	r3, [r7, #112]	; 0x70
 800d97c:	2300      	movs	r3, #0
 800d97e:	677b      	str	r3, [r7, #116]	; 0x74
 800d980:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d984:	460b      	mov	r3, r1
 800d986:	4313      	orrs	r3, r2
 800d988:	d034      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d998:	d007      	beq.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d99a:	e011      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d99c:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a0:	4a11      	ldr	r2, [pc, #68]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9a8:	e00e      	b.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	2102      	movs	r1, #2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f001 fb76 	bl	800f0a4 <RCCEx_PLL2_Config>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9be:	e003      	b.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10d      	bne.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d9d0:	4b05      	ldr	r3, [pc, #20]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9de:	4a02      	ldr	r2, [pc, #8]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9e0:	430b      	orrs	r3, r1
 800d9e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d9e4:	e006      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d9e6:	bf00      	nop
 800d9e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800da00:	66bb      	str	r3, [r7, #104]	; 0x68
 800da02:	2300      	movs	r3, #0
 800da04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800da0a:	460b      	mov	r3, r1
 800da0c:	4313      	orrs	r3, r2
 800da0e:	d00c      	beq.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da14:	3328      	adds	r3, #40	; 0x28
 800da16:	2102      	movs	r1, #2
 800da18:	4618      	mov	r0, r3
 800da1a:	f001 fbf5 	bl	800f208 <RCCEx_PLL3_Config>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800da24:	2301      	movs	r3, #1
 800da26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800da2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800da36:	663b      	str	r3, [r7, #96]	; 0x60
 800da38:	2300      	movs	r3, #0
 800da3a:	667b      	str	r3, [r7, #100]	; 0x64
 800da3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800da40:	460b      	mov	r3, r1
 800da42:	4313      	orrs	r3, r2
 800da44:	d038      	beq.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800da46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da52:	d018      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800da54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da58:	d811      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da5e:	d014      	beq.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800da60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da64:	d80b      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da66:	2b00      	cmp	r3, #0
 800da68:	d011      	beq.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800da6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da6e:	d106      	bne.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da70:	4bc3      	ldr	r3, [pc, #780]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4ac2      	ldr	r2, [pc, #776]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800da7c:	e008      	b.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da84:	e004      	b.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da86:	bf00      	nop
 800da88:	e002      	b.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da8a:	bf00      	nop
 800da8c:	e000      	b.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800da98:	4bb9      	ldr	r3, [pc, #740]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800daa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa8:	4ab5      	ldr	r2, [pc, #724]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daaa:	430b      	orrs	r3, r1
 800daac:	6553      	str	r3, [r2, #84]	; 0x54
 800daae:	e003      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dac4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dac6:	2300      	movs	r3, #0
 800dac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800daca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dace:	460b      	mov	r3, r1
 800dad0:	4313      	orrs	r3, r2
 800dad2:	d009      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dad4:	4baa      	ldr	r3, [pc, #680]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae2:	4aa7      	ldr	r2, [pc, #668]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dae4:	430b      	orrs	r3, r1
 800dae6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800daf4:	653b      	str	r3, [r7, #80]	; 0x50
 800daf6:	2300      	movs	r3, #0
 800daf8:	657b      	str	r3, [r7, #84]	; 0x54
 800dafa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dafe:	460b      	mov	r3, r1
 800db00:	4313      	orrs	r3, r2
 800db02:	d00a      	beq.n	800db1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800db04:	4b9e      	ldr	r3, [pc, #632]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db06:	691b      	ldr	r3, [r3, #16]
 800db08:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800db0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800db14:	4a9a      	ldr	r2, [pc, #616]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db16:	430b      	orrs	r3, r1
 800db18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800db26:	64bb      	str	r3, [r7, #72]	; 0x48
 800db28:	2300      	movs	r3, #0
 800db2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800db30:	460b      	mov	r3, r1
 800db32:	4313      	orrs	r3, r2
 800db34:	d009      	beq.n	800db4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db36:	4b92      	ldr	r3, [pc, #584]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db3a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db44:	4a8e      	ldr	r2, [pc, #568]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db46:	430b      	orrs	r3, r1
 800db48:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800db4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800db56:	643b      	str	r3, [r7, #64]	; 0x40
 800db58:	2300      	movs	r3, #0
 800db5a:	647b      	str	r3, [r7, #68]	; 0x44
 800db5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800db60:	460b      	mov	r3, r1
 800db62:	4313      	orrs	r3, r2
 800db64:	d00e      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800db66:	4b86      	ldr	r3, [pc, #536]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4a85      	ldr	r2, [pc, #532]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db70:	6113      	str	r3, [r2, #16]
 800db72:	4b83      	ldr	r3, [pc, #524]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db74:	6919      	ldr	r1, [r3, #16]
 800db76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db7e:	4a80      	ldr	r2, [pc, #512]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db80:	430b      	orrs	r3, r1
 800db82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800db84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800db90:	63bb      	str	r3, [r7, #56]	; 0x38
 800db92:	2300      	movs	r3, #0
 800db94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800db9a:	460b      	mov	r3, r1
 800db9c:	4313      	orrs	r3, r2
 800db9e:	d009      	beq.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dba0:	4b77      	ldr	r3, [pc, #476]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	4a74      	ldr	r2, [pc, #464]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbb0:	430b      	orrs	r3, r1
 800dbb2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dbc0:	633b      	str	r3, [r7, #48]	; 0x30
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	d00a      	beq.n	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dbd0:	4b6b      	ldr	r3, [pc, #428]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800dbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbe0:	4a67      	ldr	r2, [pc, #412]	; (800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbe2:	430b      	orrs	r3, r1
 800dbe4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	2100      	movs	r1, #0
 800dbf0:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	d011      	beq.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc06:	3308      	adds	r3, #8
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f001 fa4a 	bl	800f0a4 <RCCEx_PLL2_Config>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	2100      	movs	r1, #0
 800dc30:	6239      	str	r1, [r7, #32]
 800dc32:	f003 0302 	and.w	r3, r3, #2
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
 800dc38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	d011      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc46:	3308      	adds	r3, #8
 800dc48:	2101      	movs	r1, #1
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f001 fa2a 	bl	800f0a4 <RCCEx_PLL2_Config>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	2100      	movs	r1, #0
 800dc70:	61b9      	str	r1, [r7, #24]
 800dc72:	f003 0304 	and.w	r3, r3, #4
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	d011      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc86:	3308      	adds	r3, #8
 800dc88:	2102      	movs	r1, #2
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f001 fa0a 	bl	800f0a4 <RCCEx_PLL2_Config>
 800dc90:	4603      	mov	r3, r0
 800dc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d003      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	2100      	movs	r1, #0
 800dcb0:	6139      	str	r1, [r7, #16]
 800dcb2:	f003 0308 	and.w	r3, r3, #8
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	d011      	beq.n	800dce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcc6:	3328      	adds	r3, #40	; 0x28
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4618      	mov	r0, r3
 800dccc:	f001 fa9c 	bl	800f208 <RCCEx_PLL3_Config>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800dcd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	2100      	movs	r1, #0
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	f003 0310 	and.w	r3, r3, #16
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	d011      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd06:	3328      	adds	r3, #40	; 0x28
 800dd08:	2101      	movs	r1, #1
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f001 fa7c 	bl	800f208 <RCCEx_PLL3_Config>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6039      	str	r1, [r7, #0]
 800dd32:	f003 0320 	and.w	r3, r3, #32
 800dd36:	607b      	str	r3, [r7, #4]
 800dd38:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	d011      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd46:	3328      	adds	r3, #40	; 0x28
 800dd48:	2102      	movs	r1, #2
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f001 fa5c 	bl	800f208 <RCCEx_PLL3_Config>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dd56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800dd66:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d101      	bne.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	e000      	b.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd80:	58024400 	.word	0x58024400

0800dd84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b090      	sub	sp, #64	; 0x40
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800dd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd92:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800dd96:	430b      	orrs	r3, r1
 800dd98:	f040 8094 	bne.w	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800dd9c:	4b9e      	ldr	r3, [pc, #632]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	f200 8087 	bhi.w	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ddae:	a201      	add	r2, pc, #4	; (adr r2, 800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ddb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb4:	0800ddc9 	.word	0x0800ddc9
 800ddb8:	0800ddf1 	.word	0x0800ddf1
 800ddbc:	0800de19 	.word	0x0800de19
 800ddc0:	0800deb5 	.word	0x0800deb5
 800ddc4:	0800de41 	.word	0x0800de41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ddc8:	4b93      	ldr	r3, [pc, #588]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddd4:	d108      	bne.n	800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddda:	4618      	mov	r0, r3
 800dddc:	f001 f810 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dde4:	f000 bd45 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddec:	f000 bd41 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ddf0:	4b89      	ldr	r3, [pc, #548]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddfc:	d108      	bne.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddfe:	f107 0318 	add.w	r3, r7, #24
 800de02:	4618      	mov	r0, r3
 800de04:	f000 fd54 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de0c:	f000 bd31 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de14:	f000 bd2d 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de18:	4b7f      	ldr	r3, [pc, #508]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de24:	d108      	bne.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de26:	f107 030c 	add.w	r3, r7, #12
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 fe94 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de34:	f000 bd1d 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de3c:	f000 bd19 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de40:	4b75      	ldr	r3, [pc, #468]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de4a:	4b73      	ldr	r3, [pc, #460]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 0304 	and.w	r3, r3, #4
 800de52:	2b04      	cmp	r3, #4
 800de54:	d10c      	bne.n	800de70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800de56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d109      	bne.n	800de70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de5c:	4b6e      	ldr	r3, [pc, #440]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	08db      	lsrs	r3, r3, #3
 800de62:	f003 0303 	and.w	r3, r3, #3
 800de66:	4a6d      	ldr	r2, [pc, #436]	; (800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800de68:	fa22 f303 	lsr.w	r3, r2, r3
 800de6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de6e:	e01f      	b.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de70:	4b69      	ldr	r3, [pc, #420]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de7c:	d106      	bne.n	800de8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800de7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de84:	d102      	bne.n	800de8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800de86:	4b66      	ldr	r3, [pc, #408]	; (800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de8a:	e011      	b.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de8c:	4b62      	ldr	r3, [pc, #392]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de98:	d106      	bne.n	800dea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800de9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dea0:	d102      	bne.n	800dea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dea2:	4b60      	ldr	r3, [pc, #384]	; (800e024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dea6:	e003      	b.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800deac:	f000 bce1 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800deb0:	f000 bcdf 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800deb4:	4b5c      	ldr	r3, [pc, #368]	; (800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb8:	f000 bcdb 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec0:	f000 bcd7 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800dec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800decc:	430b      	orrs	r3, r1
 800dece:	f040 80ad 	bne.w	800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ded2:	4b51      	ldr	r3, [pc, #324]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ded4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ded6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800deda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dee2:	d056      	beq.n	800df92 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deea:	f200 8090 	bhi.w	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	2bc0      	cmp	r3, #192	; 0xc0
 800def2:	f000 8088 	beq.w	800e006 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	2bc0      	cmp	r3, #192	; 0xc0
 800defa:	f200 8088 	bhi.w	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df00:	2b80      	cmp	r3, #128	; 0x80
 800df02:	d032      	beq.n	800df6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	2b80      	cmp	r3, #128	; 0x80
 800df08:	f200 8081 	bhi.w	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	2b40      	cmp	r3, #64	; 0x40
 800df16:	d014      	beq.n	800df42 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800df18:	e079      	b.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df1a:	4b3f      	ldr	r3, [pc, #252]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df26:	d108      	bne.n	800df3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 ff67 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df36:	f000 bc9c 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df3e:	f000 bc98 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df42:	4b35      	ldr	r3, [pc, #212]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df4e:	d108      	bne.n	800df62 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df50:	f107 0318 	add.w	r3, r7, #24
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fcab 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df5e:	f000 bc88 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df66:	f000 bc84 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df6a:	4b2b      	ldr	r3, [pc, #172]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df76:	d108      	bne.n	800df8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df78:	f107 030c 	add.w	r3, r7, #12
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fdeb 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df86:	f000 bc74 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df8e:	f000 bc70 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df92:	4b21      	ldr	r3, [pc, #132]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800df9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df9c:	4b1e      	ldr	r3, [pc, #120]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f003 0304 	and.w	r3, r3, #4
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	d10c      	bne.n	800dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800dfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d109      	bne.n	800dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfae:	4b1a      	ldr	r3, [pc, #104]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	08db      	lsrs	r3, r3, #3
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	4a18      	ldr	r2, [pc, #96]	; (800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dfba:	fa22 f303 	lsr.w	r3, r2, r3
 800dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfc0:	e01f      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfc2:	4b15      	ldr	r3, [pc, #84]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfce:	d106      	bne.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800dfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfd6:	d102      	bne.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dfd8:	4b11      	ldr	r3, [pc, #68]	; (800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800dfda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfdc:	e011      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dfde:	4b0e      	ldr	r3, [pc, #56]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfea:	d106      	bne.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800dfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dff2:	d102      	bne.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dff4:	4b0b      	ldr	r3, [pc, #44]	; (800e024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dff8:	e003      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dffe:	f000 bc38 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e002:	f000 bc36 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e006:	4b08      	ldr	r3, [pc, #32]	; (800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e00a:	f000 bc32 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e012:	f000 bc2e 	b.w	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e016:	bf00      	nop
 800e018:	58024400 	.word	0x58024400
 800e01c:	03d09000 	.word	0x03d09000
 800e020:	003d0900 	.word	0x003d0900
 800e024:	017d7840 	.word	0x017d7840
 800e028:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e030:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e034:	430b      	orrs	r3, r1
 800e036:	f040 809c 	bne.w	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e03a:	4b9e      	ldr	r3, [pc, #632]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e03e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e04a:	d054      	beq.n	800e0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e052:	f200 808b 	bhi.w	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e058:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e05c:	f000 8083 	beq.w	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e066:	f200 8081 	bhi.w	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e070:	d02f      	beq.n	800e0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e078:	d878      	bhi.n	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d004      	beq.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e086:	d012      	beq.n	800e0ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e088:	e070      	b.n	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e08a:	4b8a      	ldr	r3, [pc, #552]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e096:	d107      	bne.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 feaf 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0a6:	e3e4      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ac:	e3e1      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0ae:	4b81      	ldr	r3, [pc, #516]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0ba:	d107      	bne.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0bc:	f107 0318 	add.w	r3, r7, #24
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 fbf5 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0ca:	e3d2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d0:	e3cf      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0d2:	4b78      	ldr	r3, [pc, #480]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0de:	d107      	bne.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0e0:	f107 030c 	add.w	r3, r7, #12
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f000 fd37 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0ee:	e3c0      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f4:	e3bd      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0f6:	4b6f      	ldr	r3, [pc, #444]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e0fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e100:	4b6c      	ldr	r3, [pc, #432]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f003 0304 	and.w	r3, r3, #4
 800e108:	2b04      	cmp	r3, #4
 800e10a:	d10c      	bne.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d109      	bne.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e112:	4b68      	ldr	r3, [pc, #416]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	08db      	lsrs	r3, r3, #3
 800e118:	f003 0303 	and.w	r3, r3, #3
 800e11c:	4a66      	ldr	r2, [pc, #408]	; (800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e11e:	fa22 f303 	lsr.w	r3, r2, r3
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e124:	e01e      	b.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e126:	4b63      	ldr	r3, [pc, #396]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e132:	d106      	bne.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e13a:	d102      	bne.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e13c:	4b5f      	ldr	r3, [pc, #380]	; (800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e140:	e010      	b.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e142:	4b5c      	ldr	r3, [pc, #368]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e14e:	d106      	bne.n	800e15e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e156:	d102      	bne.n	800e15e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e158:	4b59      	ldr	r3, [pc, #356]	; (800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e15c:	e002      	b.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e162:	e386      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e164:	e385      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e166:	4b57      	ldr	r3, [pc, #348]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e16a:	e382      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e170:	e37f      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e172:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e176:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e17a:	430b      	orrs	r3, r1
 800e17c:	f040 80a7 	bne.w	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e180:	4b4c      	ldr	r3, [pc, #304]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e184:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e188:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e190:	d055      	beq.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e198:	f200 8096 	bhi.w	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1a2:	f000 8084 	beq.w	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1ac:	f200 808c 	bhi.w	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1b6:	d030      	beq.n	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1be:	f200 8083 	bhi.w	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d004      	beq.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1ce:	d012      	beq.n	800e1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e1d0:	e07a      	b.n	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1d2:	4b38      	ldr	r3, [pc, #224]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1de:	d107      	bne.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 fe0b 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1ee:	e340      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f4:	e33d      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1f6:	4b2f      	ldr	r3, [pc, #188]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e202:	d107      	bne.n	800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e204:	f107 0318 	add.w	r3, r7, #24
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 fb51 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e212:	e32e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e218:	e32b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e21a:	4b26      	ldr	r3, [pc, #152]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e226:	d107      	bne.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e228:	f107 030c 	add.w	r3, r7, #12
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 fc93 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e236:	e31c      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23c:	e319      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e23e:	4b1d      	ldr	r3, [pc, #116]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e248:	4b1a      	ldr	r3, [pc, #104]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b04      	cmp	r3, #4
 800e252:	d10c      	bne.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e256:	2b00      	cmp	r3, #0
 800e258:	d109      	bne.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e25a:	4b16      	ldr	r3, [pc, #88]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	08db      	lsrs	r3, r3, #3
 800e260:	f003 0303 	and.w	r3, r3, #3
 800e264:	4a14      	ldr	r2, [pc, #80]	; (800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e266:	fa22 f303 	lsr.w	r3, r2, r3
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e26c:	e01e      	b.n	800e2ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e26e:	4b11      	ldr	r3, [pc, #68]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e27a:	d106      	bne.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e282:	d102      	bne.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e284:	4b0d      	ldr	r3, [pc, #52]	; (800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e288:	e010      	b.n	800e2ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e28a:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e296:	d106      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e29e:	d102      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e2a0:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2a4:	e002      	b.n	800e2ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e2aa:	e2e2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2ac:	e2e1      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2b2:	e2de      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2b4:	58024400 	.word	0x58024400
 800e2b8:	03d09000 	.word	0x03d09000
 800e2bc:	003d0900 	.word	0x003d0900
 800e2c0:	017d7840 	.word	0x017d7840
 800e2c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2cc:	e2d1      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e2d6:	430b      	orrs	r3, r1
 800e2d8:	f040 809c 	bne.w	800e414 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e2dc:	4b93      	ldr	r3, [pc, #588]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e2e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2ec:	d054      	beq.n	800e398 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2f4:	f200 808b 	bhi.w	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e2fe:	f000 8083 	beq.w	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e308:	f200 8081 	bhi.w	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e312:	d02f      	beq.n	800e374 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e31a:	d878      	bhi.n	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d004      	beq.n	800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e328:	d012      	beq.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e32a:	e070      	b.n	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e32c:	4b7f      	ldr	r3, [pc, #508]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e338:	d107      	bne.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 fd5e 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e348:	e293      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e34e:	e290      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e350:	4b76      	ldr	r3, [pc, #472]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e35c:	d107      	bne.n	800e36e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e35e:	f107 0318 	add.w	r3, r7, #24
 800e362:	4618      	mov	r0, r3
 800e364:	f000 faa4 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e36c:	e281      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e36e:	2300      	movs	r3, #0
 800e370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e372:	e27e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e374:	4b6d      	ldr	r3, [pc, #436]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e37c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e380:	d107      	bne.n	800e392 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e382:	f107 030c 	add.w	r3, r7, #12
 800e386:	4618      	mov	r0, r3
 800e388:	f000 fbe6 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e390:	e26f      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e396:	e26c      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e398:	4b64      	ldr	r3, [pc, #400]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e39c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e3a2:	4b62      	ldr	r3, [pc, #392]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f003 0304 	and.w	r3, r3, #4
 800e3aa:	2b04      	cmp	r3, #4
 800e3ac:	d10c      	bne.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d109      	bne.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3b4:	4b5d      	ldr	r3, [pc, #372]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	08db      	lsrs	r3, r3, #3
 800e3ba:	f003 0303 	and.w	r3, r3, #3
 800e3be:	4a5c      	ldr	r2, [pc, #368]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3c6:	e01e      	b.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e3c8:	4b58      	ldr	r3, [pc, #352]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3d4:	d106      	bne.n	800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3dc:	d102      	bne.n	800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3de:	4b55      	ldr	r3, [pc, #340]	; (800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3e2:	e010      	b.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3e4:	4b51      	ldr	r3, [pc, #324]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3f0:	d106      	bne.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3f8:	d102      	bne.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e3fa:	4b4f      	ldr	r3, [pc, #316]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3fe:	e002      	b.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e404:	e235      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e406:	e234      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e408:	4b4c      	ldr	r3, [pc, #304]	; (800e53c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e40c:	e231      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e412:	e22e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e418:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e41c:	430b      	orrs	r3, r1
 800e41e:	f040 808f 	bne.w	800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e422:	4b42      	ldr	r3, [pc, #264]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e426:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e42a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e432:	d06b      	beq.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e43a:	d874      	bhi.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e442:	d056      	beq.n	800e4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e44a:	d86c      	bhi.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e452:	d03b      	beq.n	800e4cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e45a:	d864      	bhi.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e462:	d021      	beq.n	800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e46a:	d85c      	bhi.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e478:	d004      	beq.n	800e484 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e47a:	e054      	b.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e47c:	f7fe fa4c 	bl	800c918 <HAL_RCC_GetPCLK1Freq>
 800e480:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e482:	e1f6      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e484:	4b29      	ldr	r3, [pc, #164]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e48c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e490:	d107      	bne.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e492:	f107 0318 	add.w	r3, r7, #24
 800e496:	4618      	mov	r0, r3
 800e498:	f000 fa0a 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4a0:	e1e7      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4a6:	e1e4      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4a8:	4b20      	ldr	r3, [pc, #128]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4b4:	d107      	bne.n	800e4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4b6:	f107 030c 	add.w	r3, r7, #12
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 fb4c 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4c4:	e1d5      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ca:	e1d2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e4cc:	4b17      	ldr	r3, [pc, #92]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f003 0304 	and.w	r3, r3, #4
 800e4d4:	2b04      	cmp	r3, #4
 800e4d6:	d109      	bne.n	800e4ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4d8:	4b14      	ldr	r3, [pc, #80]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	08db      	lsrs	r3, r3, #3
 800e4de:	f003 0303 	and.w	r3, r3, #3
 800e4e2:	4a13      	ldr	r2, [pc, #76]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4ea:	e1c2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4f0:	e1bf      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e4f2:	4b0e      	ldr	r3, [pc, #56]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4fe:	d102      	bne.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e500:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e504:	e1b5      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e50a:	e1b2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e50c:	4b07      	ldr	r3, [pc, #28]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e518:	d102      	bne.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e51a:	4b07      	ldr	r3, [pc, #28]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e51e:	e1a8      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e524:	e1a5      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e52a:	e1a2      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e52c:	58024400 	.word	0x58024400
 800e530:	03d09000 	.word	0x03d09000
 800e534:	003d0900 	.word	0x003d0900
 800e538:	017d7840 	.word	0x017d7840
 800e53c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e544:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e548:	430b      	orrs	r3, r1
 800e54a:	d173      	bne.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e54c:	4b9c      	ldr	r3, [pc, #624]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e554:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e55c:	d02f      	beq.n	800e5be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e564:	d863      	bhi.n	800e62e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e572:	d012      	beq.n	800e59a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e574:	e05b      	b.n	800e62e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e576:	4b92      	ldr	r3, [pc, #584]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e582:	d107      	bne.n	800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e584:	f107 0318 	add.w	r3, r7, #24
 800e588:	4618      	mov	r0, r3
 800e58a:	f000 f991 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e592:	e16e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e594:	2300      	movs	r3, #0
 800e596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e598:	e16b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e59a:	4b89      	ldr	r3, [pc, #548]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5a6:	d107      	bne.n	800e5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5a8:	f107 030c 	add.w	r3, r7, #12
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 fad3 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5b6:	e15c      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5bc:	e159      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e5be:	4b80      	ldr	r3, [pc, #512]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e5c8:	4b7d      	ldr	r3, [pc, #500]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 0304 	and.w	r3, r3, #4
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d10c      	bne.n	800e5ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d109      	bne.n	800e5ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5da:	4b79      	ldr	r3, [pc, #484]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	08db      	lsrs	r3, r3, #3
 800e5e0:	f003 0303 	and.w	r3, r3, #3
 800e5e4:	4a77      	ldr	r2, [pc, #476]	; (800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5ec:	e01e      	b.n	800e62c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e5ee:	4b74      	ldr	r3, [pc, #464]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5fa:	d106      	bne.n	800e60a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e602:	d102      	bne.n	800e60a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e604:	4b70      	ldr	r3, [pc, #448]	; (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e608:	e010      	b.n	800e62c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e60a:	4b6d      	ldr	r3, [pc, #436]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e616:	d106      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e61e:	d102      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e620:	4b6a      	ldr	r3, [pc, #424]	; (800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e624:	e002      	b.n	800e62c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e62a:	e122      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e62c:	e121      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e632:	e11e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e634:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e638:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e63c:	430b      	orrs	r3, r1
 800e63e:	d133      	bne.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e640:	4b5f      	ldr	r3, [pc, #380]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e648:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e656:	d012      	beq.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e658:	e023      	b.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e65a:	4b59      	ldr	r3, [pc, #356]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e666:	d107      	bne.n	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fbc7 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e676:	e0fc      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e67c:	e0f9      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e67e:	4b50      	ldr	r3, [pc, #320]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e68a:	d107      	bne.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e68c:	f107 0318 	add.w	r3, r7, #24
 800e690:	4618      	mov	r0, r3
 800e692:	f000 f90d 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e69a:	e0ea      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6a0:	e0e7      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6a6:	e0e4      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e6b0:	430b      	orrs	r3, r1
 800e6b2:	f040 808d 	bne.w	800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e6b6:	4b42      	ldr	r3, [pc, #264]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e6be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6c6:	d06b      	beq.n	800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6ce:	d874      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6d6:	d056      	beq.n	800e786 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6de:	d86c      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6e6:	d03b      	beq.n	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6ee:	d864      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6f6:	d021      	beq.n	800e73c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6fe:	d85c      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	2b00      	cmp	r3, #0
 800e704:	d004      	beq.n	800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e70c:	d004      	beq.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e70e:	e054      	b.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e710:	f000 f8b8 	bl	800e884 <HAL_RCCEx_GetD3PCLK1Freq>
 800e714:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e716:	e0ac      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e718:	4b29      	ldr	r3, [pc, #164]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e724:	d107      	bne.n	800e736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e726:	f107 0318 	add.w	r3, r7, #24
 800e72a:	4618      	mov	r0, r3
 800e72c:	f000 f8c0 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e734:	e09d      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e73a:	e09a      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e73c:	4b20      	ldr	r3, [pc, #128]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e748:	d107      	bne.n	800e75a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e74a:	f107 030c 	add.w	r3, r7, #12
 800e74e:	4618      	mov	r0, r3
 800e750:	f000 fa02 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e758:	e08b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75e:	e088      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e760:	4b17      	ldr	r3, [pc, #92]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f003 0304 	and.w	r3, r3, #4
 800e768:	2b04      	cmp	r3, #4
 800e76a:	d109      	bne.n	800e780 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e76c:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	08db      	lsrs	r3, r3, #3
 800e772:	f003 0303 	and.w	r3, r3, #3
 800e776:	4a13      	ldr	r2, [pc, #76]	; (800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e778:	fa22 f303 	lsr.w	r3, r2, r3
 800e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e77e:	e078      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e780:	2300      	movs	r3, #0
 800e782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e784:	e075      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e786:	4b0e      	ldr	r3, [pc, #56]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e792:	d102      	bne.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e794:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e798:	e06b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e79e:	e068      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e7a0:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7ac:	d102      	bne.n	800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e7ae:	4b07      	ldr	r3, [pc, #28]	; (800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7b2:	e05e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b8:	e05b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7be:	e058      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7c0:	58024400 	.word	0x58024400
 800e7c4:	03d09000 	.word	0x03d09000
 800e7c8:	003d0900 	.word	0x003d0900
 800e7cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e7d8:	430b      	orrs	r3, r1
 800e7da:	d148      	bne.n	800e86e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e7dc:	4b27      	ldr	r3, [pc, #156]	; (800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7ec:	d02a      	beq.n	800e844 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7f4:	d838      	bhi.n	800e868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e802:	d00d      	beq.n	800e820 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e804:	e030      	b.n	800e868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e806:	4b1d      	ldr	r3, [pc, #116]	; (800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e80e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e812:	d102      	bne.n	800e81a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e814:	4b1a      	ldr	r3, [pc, #104]	; (800e880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e818:	e02b      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e81e:	e028      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e820:	4b16      	ldr	r3, [pc, #88]	; (800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e82c:	d107      	bne.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e82e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e832:	4618      	mov	r0, r3
 800e834:	f000 fae4 	bl	800ee00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e83c:	e019      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e842:	e016      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e844:	4b0d      	ldr	r3, [pc, #52]	; (800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e84c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e850:	d107      	bne.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e852:	f107 0318 	add.w	r3, r7, #24
 800e856:	4618      	mov	r0, r3
 800e858:	f000 f82a 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e860:	e007      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e866:	e004      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e86c:	e001      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e874:	4618      	mov	r0, r3
 800e876:	3740      	adds	r7, #64	; 0x40
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	58024400 	.word	0x58024400
 800e880:	017d7840 	.word	0x017d7840

0800e884 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e888:	f7fe f816 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 800e88c:	4602      	mov	r2, r0
 800e88e:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	091b      	lsrs	r3, r3, #4
 800e894:	f003 0307 	and.w	r3, r3, #7
 800e898:	4904      	ldr	r1, [pc, #16]	; (800e8ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e89a:	5ccb      	ldrb	r3, [r1, r3]
 800e89c:	f003 031f 	and.w	r3, r3, #31
 800e8a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	58024400 	.word	0x58024400
 800e8ac:	08017f94 	.word	0x08017f94

0800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b089      	sub	sp, #36	; 0x24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8b8:	4ba1      	ldr	r3, [pc, #644]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8bc:	f003 0303 	and.w	r3, r3, #3
 800e8c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e8c2:	4b9f      	ldr	r3, [pc, #636]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c6:	0b1b      	lsrs	r3, r3, #12
 800e8c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e8ce:	4b9c      	ldr	r3, [pc, #624]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d2:	091b      	lsrs	r3, r3, #4
 800e8d4:	f003 0301 	and.w	r3, r3, #1
 800e8d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e8da:	4b99      	ldr	r3, [pc, #612]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8de:	08db      	lsrs	r3, r3, #3
 800e8e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ea:	ee07 3a90 	vmov	s15, r3
 800e8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 8111 	beq.w	800eb20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	2b02      	cmp	r3, #2
 800e902:	f000 8083 	beq.w	800ea0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	f200 80a1 	bhi.w	800ea50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d056      	beq.n	800e9c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e91a:	e099      	b.n	800ea50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e91c:	4b88      	ldr	r3, [pc, #544]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f003 0320 	and.w	r3, r3, #32
 800e924:	2b00      	cmp	r3, #0
 800e926:	d02d      	beq.n	800e984 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e928:	4b85      	ldr	r3, [pc, #532]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	08db      	lsrs	r3, r3, #3
 800e92e:	f003 0303 	and.w	r3, r3, #3
 800e932:	4a84      	ldr	r2, [pc, #528]	; (800eb44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e934:	fa22 f303 	lsr.w	r3, r2, r3
 800e938:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	ee07 3a90 	vmov	s15, r3
 800e940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	ee07 3a90 	vmov	s15, r3
 800e94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e94e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e952:	4b7b      	ldr	r3, [pc, #492]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e95a:	ee07 3a90 	vmov	s15, r3
 800e95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e962:	ed97 6a03 	vldr	s12, [r7, #12]
 800e966:	eddf 5a78 	vldr	s11, [pc, #480]	; 800eb48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e97e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e982:	e087      	b.n	800ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	ee07 3a90 	vmov	s15, r3
 800e98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e98e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eb4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e996:	4b6a      	ldr	r3, [pc, #424]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99e:	ee07 3a90 	vmov	s15, r3
 800e9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800eb48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9c6:	e065      	b.n	800ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	ee07 3a90 	vmov	s15, r3
 800e9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800eb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9da:	4b59      	ldr	r3, [pc, #356]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9e2:	ee07 3a90 	vmov	s15, r3
 800e9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800eb48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea0a:	e043      	b.n	800ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	ee07 3a90 	vmov	s15, r3
 800ea12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ea1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea1e:	4b48      	ldr	r3, [pc, #288]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea26:	ee07 3a90 	vmov	s15, r3
 800ea2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800eb48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea4e:	e021      	b.n	800ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	ee07 3a90 	vmov	s15, r3
 800ea56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ea5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea62:	4b37      	ldr	r3, [pc, #220]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea6a:	ee07 3a90 	vmov	s15, r3
 800ea6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800eb48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ea94:	4b2a      	ldr	r3, [pc, #168]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea98:	0a5b      	lsrs	r3, r3, #9
 800ea9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea9e:	ee07 3a90 	vmov	s15, r3
 800eaa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eaae:	edd7 6a07 	vldr	s13, [r7, #28]
 800eab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaba:	ee17 2a90 	vmov	r2, s15
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800eac2:	4b1f      	ldr	r3, [pc, #124]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac6:	0c1b      	lsrs	r3, r3, #16
 800eac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eacc:	ee07 3a90 	vmov	s15, r3
 800ead0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ead4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ead8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eadc:	edd7 6a07 	vldr	s13, [r7, #28]
 800eae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eae8:	ee17 2a90 	vmov	r2, s15
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800eaf0:	4b13      	ldr	r3, [pc, #76]	; (800eb40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf4:	0e1b      	lsrs	r3, r3, #24
 800eaf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eafa:	ee07 3a90 	vmov	s15, r3
 800eafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb16:	ee17 2a90 	vmov	r2, s15
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800eb1e:	e008      	b.n	800eb32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	609a      	str	r2, [r3, #8]
}
 800eb32:	bf00      	nop
 800eb34:	3724      	adds	r7, #36	; 0x24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	58024400 	.word	0x58024400
 800eb44:	03d09000 	.word	0x03d09000
 800eb48:	46000000 	.word	0x46000000
 800eb4c:	4c742400 	.word	0x4c742400
 800eb50:	4a742400 	.word	0x4a742400
 800eb54:	4bbebc20 	.word	0x4bbebc20

0800eb58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b089      	sub	sp, #36	; 0x24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb60:	4ba1      	ldr	r3, [pc, #644]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800eb6a:	4b9f      	ldr	r3, [pc, #636]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6e:	0d1b      	lsrs	r3, r3, #20
 800eb70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800eb76:	4b9c      	ldr	r3, [pc, #624]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	0a1b      	lsrs	r3, r3, #8
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800eb82:	4b99      	ldr	r3, [pc, #612]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb86:	08db      	lsrs	r3, r3, #3
 800eb88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	fb02 f303 	mul.w	r3, r2, r3
 800eb92:	ee07 3a90 	vmov	s15, r3
 800eb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f000 8111 	beq.w	800edc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	f000 8083 	beq.w	800ecb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	f200 80a1 	bhi.w	800ecf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d056      	beq.n	800ec70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ebc2:	e099      	b.n	800ecf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebc4:	4b88      	ldr	r3, [pc, #544]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 0320 	and.w	r3, r3, #32
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d02d      	beq.n	800ec2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebd0:	4b85      	ldr	r3, [pc, #532]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	08db      	lsrs	r3, r3, #3
 800ebd6:	f003 0303 	and.w	r3, r3, #3
 800ebda:	4a84      	ldr	r2, [pc, #528]	; (800edec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ebdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	ee07 3a90 	vmov	s15, r3
 800ebe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	ee07 3a90 	vmov	s15, r3
 800ebf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebfa:	4b7b      	ldr	r3, [pc, #492]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec02:	ee07 3a90 	vmov	s15, r3
 800ec06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800edf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec2a:	e087      	b.n	800ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	ee07 3a90 	vmov	s15, r3
 800ec32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800edf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ec3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec3e:	4b6a      	ldr	r3, [pc, #424]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec46:	ee07 3a90 	vmov	s15, r3
 800ec4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800edf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec6e:	e065      	b.n	800ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800edf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ec7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec82:	4b59      	ldr	r3, [pc, #356]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec8a:	ee07 3a90 	vmov	s15, r3
 800ec8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800edf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecb2:	e043      	b.n	800ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	ee07 3a90 	vmov	s15, r3
 800ecba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ecc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecc6:	4b48      	ldr	r3, [pc, #288]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ecc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecce:	ee07 3a90 	vmov	s15, r3
 800ecd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800edf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ece2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ece6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecf6:	e021      	b.n	800ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	ee07 3a90 	vmov	s15, r3
 800ecfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800edf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ed06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed0a:	4b37      	ldr	r3, [pc, #220]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed12:	ee07 3a90 	vmov	s15, r3
 800ed16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800edf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ed3c:	4b2a      	ldr	r3, [pc, #168]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed40:	0a5b      	lsrs	r3, r3, #9
 800ed42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed46:	ee07 3a90 	vmov	s15, r3
 800ed4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed62:	ee17 2a90 	vmov	r2, s15
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ed6a:	4b1f      	ldr	r3, [pc, #124]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6e:	0c1b      	lsrs	r3, r3, #16
 800ed70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed74:	ee07 3a90 	vmov	s15, r3
 800ed78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed90:	ee17 2a90 	vmov	r2, s15
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ed98:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9c:	0e1b      	lsrs	r3, r3, #24
 800ed9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eda2:	ee07 3a90 	vmov	s15, r3
 800eda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800edb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edbe:	ee17 2a90 	vmov	r2, s15
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800edc6:	e008      	b.n	800edda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	609a      	str	r2, [r3, #8]
}
 800edda:	bf00      	nop
 800eddc:	3724      	adds	r7, #36	; 0x24
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	58024400 	.word	0x58024400
 800edec:	03d09000 	.word	0x03d09000
 800edf0:	46000000 	.word	0x46000000
 800edf4:	4c742400 	.word	0x4c742400
 800edf8:	4a742400 	.word	0x4a742400
 800edfc:	4bbebc20 	.word	0x4bbebc20

0800ee00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b089      	sub	sp, #36	; 0x24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee08:	4ba0      	ldr	r3, [pc, #640]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0c:	f003 0303 	and.w	r3, r3, #3
 800ee10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ee12:	4b9e      	ldr	r3, [pc, #632]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee16:	091b      	lsrs	r3, r3, #4
 800ee18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ee1e:	4b9b      	ldr	r3, [pc, #620]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee28:	4b98      	ldr	r3, [pc, #608]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2c:	08db      	lsrs	r3, r3, #3
 800ee2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	fb02 f303 	mul.w	r3, r2, r3
 800ee38:	ee07 3a90 	vmov	s15, r3
 800ee3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f000 8111 	beq.w	800f06e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	f000 8083 	beq.w	800ef5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	f200 80a1 	bhi.w	800ef9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d003      	beq.n	800ee6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d056      	beq.n	800ef16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ee68:	e099      	b.n	800ef9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee6a:	4b88      	ldr	r3, [pc, #544]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f003 0320 	and.w	r3, r3, #32
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d02d      	beq.n	800eed2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee76:	4b85      	ldr	r3, [pc, #532]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	08db      	lsrs	r3, r3, #3
 800ee7c:	f003 0303 	and.w	r3, r3, #3
 800ee80:	4a83      	ldr	r2, [pc, #524]	; (800f090 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ee82:	fa22 f303 	lsr.w	r3, r2, r3
 800ee86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	ee07 3a90 	vmov	s15, r3
 800ee8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	ee07 3a90 	vmov	s15, r3
 800ee98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eea0:	4b7a      	ldr	r3, [pc, #488]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea8:	ee07 3a90 	vmov	s15, r3
 800eeac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eeb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eecc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eed0:	e087      	b.n	800efe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	ee07 3a90 	vmov	s15, r3
 800eed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eedc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eee4:	4b69      	ldr	r3, [pc, #420]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeec:	ee07 3a90 	vmov	s15, r3
 800eef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eef4:	ed97 6a03 	vldr	s12, [r7, #12]
 800eef8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eefc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef14:	e065      	b.n	800efe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	ee07 3a90 	vmov	s15, r3
 800ef1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f09c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ef24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef28:	4b58      	ldr	r3, [pc, #352]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef30:	ee07 3a90 	vmov	s15, r3
 800ef34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef38:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef58:	e043      	b.n	800efe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	ee07 3a90 	vmov	s15, r3
 800ef60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ef68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef6c:	4b47      	ldr	r3, [pc, #284]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef74:	ee07 3a90 	vmov	s15, r3
 800ef78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef80:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef9c:	e021      	b.n	800efe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	ee07 3a90 	vmov	s15, r3
 800efa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efa8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800efac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efb0:	4b36      	ldr	r3, [pc, #216]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800efb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb8:	ee07 3a90 	vmov	s15, r3
 800efbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800efc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800efc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efe0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800efe2:	4b2a      	ldr	r3, [pc, #168]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800efe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe6:	0a5b      	lsrs	r3, r3, #9
 800efe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efec:	ee07 3a90 	vmov	s15, r3
 800eff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800effc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f008:	ee17 2a90 	vmov	r2, s15
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f010:	4b1e      	ldr	r3, [pc, #120]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f014:	0c1b      	lsrs	r3, r3, #16
 800f016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01a:	ee07 3a90 	vmov	s15, r3
 800f01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f02a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f036:	ee17 2a90 	vmov	r2, s15
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f042:	0e1b      	lsrs	r3, r3, #24
 800f044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f048:	ee07 3a90 	vmov	s15, r3
 800f04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f054:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f058:	edd7 6a07 	vldr	s13, [r7, #28]
 800f05c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f064:	ee17 2a90 	vmov	r2, s15
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f06c:	e008      	b.n	800f080 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	609a      	str	r2, [r3, #8]
}
 800f080:	bf00      	nop
 800f082:	3724      	adds	r7, #36	; 0x24
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	58024400 	.word	0x58024400
 800f090:	03d09000 	.word	0x03d09000
 800f094:	46000000 	.word	0x46000000
 800f098:	4c742400 	.word	0x4c742400
 800f09c:	4a742400 	.word	0x4a742400
 800f0a0:	4bbebc20 	.word	0x4bbebc20

0800f0a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f0b2:	4b53      	ldr	r3, [pc, #332]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0b6:	f003 0303 	and.w	r3, r3, #3
 800f0ba:	2b03      	cmp	r3, #3
 800f0bc:	d101      	bne.n	800f0c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e099      	b.n	800f1f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f0c2:	4b4f      	ldr	r3, [pc, #316]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a4e      	ldr	r2, [pc, #312]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f0c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0ce:	f7f6 f8c7 	bl	8005260 <HAL_GetTick>
 800f0d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f0d4:	e008      	b.n	800f0e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f0d6:	f7f6 f8c3 	bl	8005260 <HAL_GetTick>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d901      	bls.n	800f0e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e086      	b.n	800f1f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f0e8:	4b45      	ldr	r3, [pc, #276]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1f0      	bne.n	800f0d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f0f4:	4b42      	ldr	r3, [pc, #264]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	031b      	lsls	r3, r3, #12
 800f102:	493f      	ldr	r1, [pc, #252]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f104:	4313      	orrs	r3, r2
 800f106:	628b      	str	r3, [r1, #40]	; 0x28
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	3b01      	subs	r3, #1
 800f118:	025b      	lsls	r3, r3, #9
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	431a      	orrs	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	3b01      	subs	r3, #1
 800f124:	041b      	lsls	r3, r3, #16
 800f126:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f12a:	431a      	orrs	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	3b01      	subs	r3, #1
 800f132:	061b      	lsls	r3, r3, #24
 800f134:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f138:	4931      	ldr	r1, [pc, #196]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f13a:	4313      	orrs	r3, r2
 800f13c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f13e:	4b30      	ldr	r3, [pc, #192]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	695b      	ldr	r3, [r3, #20]
 800f14a:	492d      	ldr	r1, [pc, #180]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f14c:	4313      	orrs	r3, r2
 800f14e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f150:	4b2b      	ldr	r3, [pc, #172]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f154:	f023 0220 	bic.w	r2, r3, #32
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	4928      	ldr	r1, [pc, #160]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f15e:	4313      	orrs	r3, r2
 800f160:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f162:	4b27      	ldr	r3, [pc, #156]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f166:	4a26      	ldr	r2, [pc, #152]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f168:	f023 0310 	bic.w	r3, r3, #16
 800f16c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f16e:	4b24      	ldr	r3, [pc, #144]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f172:	4b24      	ldr	r3, [pc, #144]	; (800f204 <RCCEx_PLL2_Config+0x160>)
 800f174:	4013      	ands	r3, r2
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	69d2      	ldr	r2, [r2, #28]
 800f17a:	00d2      	lsls	r2, r2, #3
 800f17c:	4920      	ldr	r1, [pc, #128]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f17e:	4313      	orrs	r3, r2
 800f180:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f182:	4b1f      	ldr	r3, [pc, #124]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f186:	4a1e      	ldr	r2, [pc, #120]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f188:	f043 0310 	orr.w	r3, r3, #16
 800f18c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d106      	bne.n	800f1a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f194:	4b1a      	ldr	r3, [pc, #104]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	4a19      	ldr	r2, [pc, #100]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f19a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f19e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f1a0:	e00f      	b.n	800f1c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d106      	bne.n	800f1b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f1a8:	4b15      	ldr	r3, [pc, #84]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ac:	4a14      	ldr	r2, [pc, #80]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f1b4:	e005      	b.n	800f1c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f1b6:	4b12      	ldr	r3, [pc, #72]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ba:	4a11      	ldr	r2, [pc, #68]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f1c2:	4b0f      	ldr	r3, [pc, #60]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a0e      	ldr	r2, [pc, #56]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f1cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1ce:	f7f6 f847 	bl	8005260 <HAL_GetTick>
 800f1d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f1d4:	e008      	b.n	800f1e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f1d6:	f7f6 f843 	bl	8005260 <HAL_GetTick>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d901      	bls.n	800f1e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e006      	b.n	800f1f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f1e8:	4b05      	ldr	r3, [pc, #20]	; (800f200 <RCCEx_PLL2_Config+0x15c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0f0      	beq.n	800f1d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	58024400 	.word	0x58024400
 800f204:	ffff0007 	.word	0xffff0007

0800f208 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f216:	4b53      	ldr	r3, [pc, #332]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21a:	f003 0303 	and.w	r3, r3, #3
 800f21e:	2b03      	cmp	r3, #3
 800f220:	d101      	bne.n	800f226 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	e099      	b.n	800f35a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f226:	4b4f      	ldr	r3, [pc, #316]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a4e      	ldr	r2, [pc, #312]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f22c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f232:	f7f6 f815 	bl	8005260 <HAL_GetTick>
 800f236:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f238:	e008      	b.n	800f24c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f23a:	f7f6 f811 	bl	8005260 <HAL_GetTick>
 800f23e:	4602      	mov	r2, r0
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	2b02      	cmp	r3, #2
 800f246:	d901      	bls.n	800f24c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f248:	2303      	movs	r3, #3
 800f24a:	e086      	b.n	800f35a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f24c:	4b45      	ldr	r3, [pc, #276]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1f0      	bne.n	800f23a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f258:	4b42      	ldr	r3, [pc, #264]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	051b      	lsls	r3, r3, #20
 800f266:	493f      	ldr	r1, [pc, #252]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f268:	4313      	orrs	r3, r2
 800f26a:	628b      	str	r3, [r1, #40]	; 0x28
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	3b01      	subs	r3, #1
 800f272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	025b      	lsls	r3, r3, #9
 800f27e:	b29b      	uxth	r3, r3
 800f280:	431a      	orrs	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	3b01      	subs	r3, #1
 800f288:	041b      	lsls	r3, r3, #16
 800f28a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f28e:	431a      	orrs	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	3b01      	subs	r3, #1
 800f296:	061b      	lsls	r3, r3, #24
 800f298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f29c:	4931      	ldr	r1, [pc, #196]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f2a2:	4b30      	ldr	r3, [pc, #192]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	492d      	ldr	r1, [pc, #180]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f2b4:	4b2b      	ldr	r3, [pc, #172]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	4928      	ldr	r1, [pc, #160]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f2c6:	4b27      	ldr	r3, [pc, #156]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ca:	4a26      	ldr	r2, [pc, #152]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f2d2:	4b24      	ldr	r3, [pc, #144]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2d6:	4b24      	ldr	r3, [pc, #144]	; (800f368 <RCCEx_PLL3_Config+0x160>)
 800f2d8:	4013      	ands	r3, r2
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	69d2      	ldr	r2, [r2, #28]
 800f2de:	00d2      	lsls	r2, r2, #3
 800f2e0:	4920      	ldr	r1, [pc, #128]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f2e6:	4b1f      	ldr	r3, [pc, #124]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ea:	4a1e      	ldr	r2, [pc, #120]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d106      	bne.n	800f306 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f2f8:	4b1a      	ldr	r3, [pc, #104]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fc:	4a19      	ldr	r2, [pc, #100]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f2fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f304:	e00f      	b.n	800f326 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d106      	bne.n	800f31a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f30c:	4b15      	ldr	r3, [pc, #84]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f310:	4a14      	ldr	r2, [pc, #80]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f316:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f318:	e005      	b.n	800f326 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f31a:	4b12      	ldr	r3, [pc, #72]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31e:	4a11      	ldr	r2, [pc, #68]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f326:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a0e      	ldr	r2, [pc, #56]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f32c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f332:	f7f5 ff95 	bl	8005260 <HAL_GetTick>
 800f336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f338:	e008      	b.n	800f34c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f33a:	f7f5 ff91 	bl	8005260 <HAL_GetTick>
 800f33e:	4602      	mov	r2, r0
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	2b02      	cmp	r3, #2
 800f346:	d901      	bls.n	800f34c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f348:	2303      	movs	r3, #3
 800f34a:	e006      	b.n	800f35a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f34c:	4b05      	ldr	r3, [pc, #20]	; (800f364 <RCCEx_PLL3_Config+0x15c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d0f0      	beq.n	800f33a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f358:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	58024400 	.word	0x58024400
 800f368:	ffff0007 	.word	0xffff0007

0800f36c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	e054      	b.n	800f428 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	7a5b      	ldrb	r3, [r3, #9]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d105      	bne.n	800f394 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7f3 ffec 	bl	800336c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2202      	movs	r2, #2
 800f398:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f023 0120 	bic.w	r1, r3, #32
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f042 0204 	orr.w	r2, r2, #4
 800f3be:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ca:	2b40      	cmp	r3, #64	; 0x40
 800f3cc:	d104      	bne.n	800f3d8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2204      	movs	r2, #4
 800f3d2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e027      	b.n	800f428 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f3d8:	f7f5 ff42 	bl	8005260 <HAL_GetTick>
 800f3dc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f3de:	e015      	b.n	800f40c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f3e0:	f7f5 ff3e 	bl	8005260 <HAL_GetTick>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	d90e      	bls.n	800f40c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	f003 0304 	and.w	r3, r3, #4
 800f3f8:	2b04      	cmp	r3, #4
 800f3fa:	d107      	bne.n	800f40c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2204      	movs	r2, #4
 800f400:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2202      	movs	r2, #2
 800f406:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f408:	2301      	movs	r3, #1
 800f40a:	e00d      	b.n	800f428 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f003 0304 	and.w	r3, r3, #4
 800f416:	2b04      	cmp	r3, #4
 800f418:	d0e2      	beq.n	800f3e0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2201      	movs	r2, #1
 800f41e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	7a1b      	ldrb	r3, [r3, #8]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d101      	bne.n	800f44a <HAL_RNG_GenerateRandomNumber+0x1a>
 800f446:	2302      	movs	r3, #2
 800f448:	e044      	b.n	800f4d4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	7a5b      	ldrb	r3, [r3, #9]
 800f454:	b2db      	uxtb	r3, r3
 800f456:	2b01      	cmp	r3, #1
 800f458:	d133      	bne.n	800f4c2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2202      	movs	r2, #2
 800f45e:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f460:	f7f5 fefe 	bl	8005260 <HAL_GetTick>
 800f464:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f466:	e018      	b.n	800f49a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f468:	f7f5 fefa 	bl	8005260 <HAL_GetTick>
 800f46c:	4602      	mov	r2, r0
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	2b02      	cmp	r3, #2
 800f474:	d911      	bls.n	800f49a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	f003 0301 	and.w	r3, r3, #1
 800f480:	2b01      	cmp	r3, #1
 800f482:	d00a      	beq.n	800f49a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2202      	movs	r2, #2
 800f48e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	e01c      	b.n	800f4d4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d1df      	bne.n	800f468 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689a      	ldr	r2, [r3, #8]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	691a      	ldr	r2, [r3, #16]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	725a      	strb	r2, [r3, #9]
 800f4c0:	e004      	b.n	800f4cc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2204      	movs	r2, #4
 800f4c6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	721a      	strb	r2, [r3, #8]

  return status;
 800f4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3710      	adds	r7, #16
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b086      	sub	sp, #24
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
 800f4e8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	d904      	bls.n	800f4fa <HAL_SAI_InitProtocol+0x1e>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	3b03      	subs	r3, #3
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d812      	bhi.n	800f51e <HAL_SAI_InitProtocol+0x42>
 800f4f8:	e008      	b.n	800f50c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	68b9      	ldr	r1, [r7, #8]
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f000 fc11 	bl	800fd28 <SAI_InitI2S>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
      break;
 800f50a:	e00b      	b.n	800f524 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	68b9      	ldr	r1, [r7, #8]
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 fcba 	bl	800fe8c <SAI_InitPCM>
 800f518:	4603      	mov	r3, r0
 800f51a:	75fb      	strb	r3, [r7, #23]
      break;
 800f51c:	e002      	b.n	800f524 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	75fb      	strb	r3, [r7, #23]
      break;
 800f522:	bf00      	nop
  }

  if (status == HAL_OK)
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d104      	bne.n	800f534 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f000 f808 	bl	800f540 <HAL_SAI_Init>
 800f530:	4603      	mov	r3, r0
 800f532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f534:	7dfb      	ldrb	r3, [r7, #23]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b08a      	sub	sp, #40	; 0x28
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e28e      	b.n	800fa70 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f552:	f7f5 feb5 	bl	80052c0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d113      	bne.n	800f588 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a96      	ldr	r2, [pc, #600]	; (800f7c0 <HAL_SAI_Init+0x280>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d004      	beq.n	800f574 <HAL_SAI_Init+0x34>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a95      	ldr	r2, [pc, #596]	; (800f7c4 <HAL_SAI_Init+0x284>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d107      	bne.n	800f584 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d103      	bne.n	800f584 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f584:	2301      	movs	r3, #1
 800f586:	e273      	b.n	800fa70 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a8c      	ldr	r2, [pc, #560]	; (800f7c0 <HAL_SAI_Init+0x280>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d004      	beq.n	800f59c <HAL_SAI_Init+0x5c>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a8c      	ldr	r2, [pc, #560]	; (800f7c8 <HAL_SAI_Init+0x288>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d102      	bne.n	800f5a2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f59c:	4b8b      	ldr	r3, [pc, #556]	; (800f7cc <HAL_SAI_Init+0x28c>)
 800f59e:	61bb      	str	r3, [r7, #24]
 800f5a0:	e028      	b.n	800f5f4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a8a      	ldr	r2, [pc, #552]	; (800f7d0 <HAL_SAI_Init+0x290>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d004      	beq.n	800f5b6 <HAL_SAI_Init+0x76>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a88      	ldr	r2, [pc, #544]	; (800f7d4 <HAL_SAI_Init+0x294>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d102      	bne.n	800f5bc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f5b6:	4b88      	ldr	r3, [pc, #544]	; (800f7d8 <HAL_SAI_Init+0x298>)
 800f5b8:	61bb      	str	r3, [r7, #24]
 800f5ba:	e01b      	b.n	800f5f4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a86      	ldr	r2, [pc, #536]	; (800f7dc <HAL_SAI_Init+0x29c>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d004      	beq.n	800f5d0 <HAL_SAI_Init+0x90>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a85      	ldr	r2, [pc, #532]	; (800f7e0 <HAL_SAI_Init+0x2a0>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d102      	bne.n	800f5d6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f5d0:	4b84      	ldr	r3, [pc, #528]	; (800f7e4 <HAL_SAI_Init+0x2a4>)
 800f5d2:	61bb      	str	r3, [r7, #24]
 800f5d4:	e00e      	b.n	800f5f4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a7a      	ldr	r2, [pc, #488]	; (800f7c4 <HAL_SAI_Init+0x284>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d004      	beq.n	800f5ea <HAL_SAI_Init+0xaa>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a80      	ldr	r2, [pc, #512]	; (800f7e8 <HAL_SAI_Init+0x2a8>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d102      	bne.n	800f5f0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f5ea:	4b80      	ldr	r3, [pc, #512]	; (800f7ec <HAL_SAI_Init+0x2ac>)
 800f5ec:	61bb      	str	r3, [r7, #24]
 800f5ee:	e001      	b.n	800f5f4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e23d      	b.n	800fa70 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d106      	bne.n	800f60e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7f3 ff49 	bl	80034a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fcf6 	bl	8010000 <SAI_Disable>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d001      	beq.n	800f61e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e228      	b.n	800fa70 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2202      	movs	r2, #2
 800f622:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d00c      	beq.n	800f648 <HAL_SAI_Init+0x108>
 800f62e:	2b02      	cmp	r3, #2
 800f630:	d80d      	bhi.n	800f64e <HAL_SAI_Init+0x10e>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d002      	beq.n	800f63c <HAL_SAI_Init+0xfc>
 800f636:	2b01      	cmp	r3, #1
 800f638:	d003      	beq.n	800f642 <HAL_SAI_Init+0x102>
 800f63a:	e008      	b.n	800f64e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f640:	e008      	b.n	800f654 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f642:	2310      	movs	r3, #16
 800f644:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f646:	e005      	b.n	800f654 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f648:	2320      	movs	r3, #32
 800f64a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f64c:	e002      	b.n	800f654 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f652:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	2b05      	cmp	r3, #5
 800f65a:	d832      	bhi.n	800f6c2 <HAL_SAI_Init+0x182>
 800f65c:	a201      	add	r2, pc, #4	; (adr r2, 800f664 <HAL_SAI_Init+0x124>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f67d 	.word	0x0800f67d
 800f668:	0800f683 	.word	0x0800f683
 800f66c:	0800f68b 	.word	0x0800f68b
 800f670:	0800f693 	.word	0x0800f693
 800f674:	0800f6a3 	.word	0x0800f6a3
 800f678:	0800f6b3 	.word	0x0800f6b3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	61fb      	str	r3, [r7, #28]
      break;
 800f680:	e022      	b.n	800f6c8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f686:	61fb      	str	r3, [r7, #28]
      break;
 800f688:	e01e      	b.n	800f6c8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f68a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f68e:	61fb      	str	r3, [r7, #28]
      break;
 800f690:	e01a      	b.n	800f6c8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f692:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f696:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	f043 0301 	orr.w	r3, r3, #1
 800f69e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6a0:	e012      	b.n	800f6c8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6a6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	f043 0302 	orr.w	r3, r3, #2
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6b0:	e00a      	b.n	800f6c8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6b6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	f043 0303 	orr.w	r3, r3, #3
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6c0:	e002      	b.n	800f6c8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	61fb      	str	r3, [r7, #28]
      break;
 800f6c6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6cc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	f000 80c5 	beq.w	800f862 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a37      	ldr	r2, [pc, #220]	; (800f7c0 <HAL_SAI_Init+0x280>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d004      	beq.n	800f6f0 <HAL_SAI_Init+0x1b0>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4a37      	ldr	r2, [pc, #220]	; (800f7c8 <HAL_SAI_Init+0x288>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d106      	bne.n	800f6fe <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f6f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f6f4:	f04f 0100 	mov.w	r1, #0
 800f6f8:	f7fe fb44 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 800f6fc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a33      	ldr	r2, [pc, #204]	; (800f7d0 <HAL_SAI_Init+0x290>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d004      	beq.n	800f712 <HAL_SAI_Init+0x1d2>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a31      	ldr	r2, [pc, #196]	; (800f7d4 <HAL_SAI_Init+0x294>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d106      	bne.n	800f720 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f712:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f716:	f04f 0100 	mov.w	r1, #0
 800f71a:	f7fe fb33 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 800f71e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a2d      	ldr	r2, [pc, #180]	; (800f7dc <HAL_SAI_Init+0x29c>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d004      	beq.n	800f734 <HAL_SAI_Init+0x1f4>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a2c      	ldr	r2, [pc, #176]	; (800f7e0 <HAL_SAI_Init+0x2a0>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d106      	bne.n	800f742 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f734:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f738:	f04f 0100 	mov.w	r1, #0
 800f73c:	f7fe fb22 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 800f740:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a1f      	ldr	r2, [pc, #124]	; (800f7c4 <HAL_SAI_Init+0x284>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d106      	bne.n	800f75a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f74c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f750:	f04f 0100 	mov.w	r1, #0
 800f754:	f7fe fb16 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 800f758:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a22      	ldr	r2, [pc, #136]	; (800f7e8 <HAL_SAI_Init+0x2a8>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d106      	bne.n	800f772 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f764:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f768:	f04f 0100 	mov.w	r1, #0
 800f76c:	f7fe fb0a 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 800f770:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f77a:	d139      	bne.n	800f7f0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f780:	2b04      	cmp	r3, #4
 800f782:	d102      	bne.n	800f78a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f784:	2340      	movs	r3, #64	; 0x40
 800f786:	60fb      	str	r3, [r7, #12]
 800f788:	e00a      	b.n	800f7a0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78e:	2b08      	cmp	r3, #8
 800f790:	d103      	bne.n	800f79a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f792:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	e002      	b.n	800f7a0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f79e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f7a0:	697a      	ldr	r2, [r7, #20]
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4413      	add	r3, r2
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a1b      	ldr	r3, [r3, #32]
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	fb02 f303 	mul.w	r3, r2, r3
 800f7b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7ba:	613b      	str	r3, [r7, #16]
 800f7bc:	e030      	b.n	800f820 <HAL_SAI_Init+0x2e0>
 800f7be:	bf00      	nop
 800f7c0:	40015804 	.word	0x40015804
 800f7c4:	58005404 	.word	0x58005404
 800f7c8:	40015824 	.word	0x40015824
 800f7cc:	40015800 	.word	0x40015800
 800f7d0:	40015c04 	.word	0x40015c04
 800f7d4:	40015c24 	.word	0x40015c24
 800f7d8:	40015c00 	.word	0x40015c00
 800f7dc:	40016004 	.word	0x40016004
 800f7e0:	40016024 	.word	0x40016024
 800f7e4:	40016000 	.word	0x40016000
 800f7e8:	58005424 	.word	0x58005424
 800f7ec:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f7f8:	d101      	bne.n	800f7fe <HAL_SAI_Init+0x2be>
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	e000      	b.n	800f800 <HAL_SAI_Init+0x2c0>
 800f7fe:	2301      	movs	r3, #1
 800f800:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	4613      	mov	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	4619      	mov	r1, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	fb02 f303 	mul.w	r3, r2, r3
 800f818:	021b      	lsls	r3, r3, #8
 800f81a:	fbb1 f3f3 	udiv	r3, r1, r3
 800f81e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	4a95      	ldr	r2, [pc, #596]	; (800fa78 <HAL_SAI_Init+0x538>)
 800f824:	fba2 2303 	umull	r2, r3, r2, r3
 800f828:	08da      	lsrs	r2, r3, #3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f82e:	6939      	ldr	r1, [r7, #16]
 800f830:	4b91      	ldr	r3, [pc, #580]	; (800fa78 <HAL_SAI_Init+0x538>)
 800f832:	fba3 2301 	umull	r2, r3, r3, r1
 800f836:	08da      	lsrs	r2, r3, #3
 800f838:	4613      	mov	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	1aca      	subs	r2, r1, r3
 800f842:	2a08      	cmp	r2, #8
 800f844:	d904      	bls.n	800f850 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f854:	2b04      	cmp	r3, #4
 800f856:	d104      	bne.n	800f862 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85c:	085a      	lsrs	r2, r3, #1
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <HAL_SAI_Init+0x332>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d109      	bne.n	800f886 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f876:	2b01      	cmp	r3, #1
 800f878:	d101      	bne.n	800f87e <HAL_SAI_Init+0x33e>
 800f87a:	2300      	movs	r3, #0
 800f87c:	e001      	b.n	800f882 <HAL_SAI_Init+0x342>
 800f87e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f882:	623b      	str	r3, [r7, #32]
 800f884:	e008      	b.n	800f898 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d102      	bne.n	800f894 <HAL_SAI_Init+0x354>
 800f88e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f892:	e000      	b.n	800f896 <HAL_SAI_Init+0x356>
 800f894:	2300      	movs	r3, #0
 800f896:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f898:	f7f5 fd12 	bl	80052c0 <HAL_GetREVID>
 800f89c:	4603      	mov	r3, r0
 800f89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8a2:	d331      	bcc.n	800f908 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6819      	ldr	r1, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	4b73      	ldr	r3, [pc, #460]	; (800fa7c <HAL_SAI_Init+0x53c>)
 800f8b0:	400b      	ands	r3, r1
 800f8b2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6819      	ldr	r1, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8c2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8c8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ce:	431a      	orrs	r2, r3
 800f8d0:	6a3b      	ldr	r3, [r7, #32]
 800f8d2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f8dc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8e8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ee:	051b      	lsls	r3, r3, #20
 800f8f0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8f6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	430a      	orrs	r2, r1
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	e02d      	b.n	800f964 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6819      	ldr	r1, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	4b5b      	ldr	r3, [pc, #364]	; (800fa80 <HAL_SAI_Init+0x540>)
 800f914:	400b      	ands	r3, r1
 800f916:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	6819      	ldr	r1, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f926:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f92c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f932:	431a      	orrs	r2, r3
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f940:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f94c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f952:	051b      	lsls	r3, r3, #20
 800f954:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f95a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	430a      	orrs	r2, r1
 800f962:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	6859      	ldr	r1, [r3, #4]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	4b45      	ldr	r3, [pc, #276]	; (800fa84 <HAL_SAI_Init+0x544>)
 800f970:	400b      	ands	r3, r1
 800f972:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6859      	ldr	r1, [r3, #4]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	69da      	ldr	r2, [r3, #28]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f982:	431a      	orrs	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f988:	431a      	orrs	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	430a      	orrs	r2, r1
 800f990:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	6899      	ldr	r1, [r3, #8]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	4b3a      	ldr	r3, [pc, #232]	; (800fa88 <HAL_SAI_Init+0x548>)
 800f99e:	400b      	ands	r3, r1
 800f9a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6899      	ldr	r1, [r3, #8]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f9b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f9be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f9c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	430a      	orrs	r2, r1
 800f9d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68d9      	ldr	r1, [r3, #12]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f9e0:	400b      	ands	r3, r1
 800f9e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68d9      	ldr	r1, [r3, #12]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f9fa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa00:	3b01      	subs	r3, #1
 800fa02:	021b      	lsls	r3, r3, #8
 800fa04:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a1e      	ldr	r2, [pc, #120]	; (800fa8c <HAL_SAI_Init+0x54c>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d004      	beq.n	800fa22 <HAL_SAI_Init+0x4e2>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a1c      	ldr	r2, [pc, #112]	; (800fa90 <HAL_SAI_Init+0x550>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d119      	bne.n	800fa56 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa26:	f023 0201 	bic.w	r2, r3, #1
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d10e      	bne.n	800fa56 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa40:	3b01      	subs	r3, #1
 800fa42:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa44:	431a      	orrs	r2, r3
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa4e:	f043 0201 	orr.w	r2, r3, #1
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3728      	adds	r7, #40	; 0x28
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	cccccccd 	.word	0xcccccccd
 800fa7c:	f005c010 	.word	0xf005c010
 800fa80:	f805c010 	.word	0xf805c010
 800fa84:	ffff1ff0 	.word	0xffff1ff0
 800fa88:	fff88000 	.word	0xfff88000
 800fa8c:	40015804 	.word	0x40015804
 800fa90:	58005404 	.word	0x58005404

0800fa94 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800faa2:	f7f5 fbdd 	bl	8005260 <HAL_GetTick>
 800faa6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <HAL_SAI_Transmit_DMA+0x20>
 800faae:	88fb      	ldrh	r3, [r7, #6]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e098      	b.n	800fbea <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	f040 8091 	bne.w	800fbe8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800facc:	2b01      	cmp	r3, #1
 800face:	d101      	bne.n	800fad4 <HAL_SAI_Transmit_DMA+0x40>
 800fad0:	2302      	movs	r3, #2
 800fad2:	e08a      	b.n	800fbea <HAL_SAI_Transmit_DMA+0x156>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	88fa      	ldrh	r2, [r7, #6]
 800fae6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	88fa      	ldrh	r2, [r7, #6]
 800faee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2212      	movs	r2, #18
 800fafe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb08:	4a3a      	ldr	r2, [pc, #232]	; (800fbf4 <HAL_SAI_Transmit_DMA+0x160>)
 800fb0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb12:	4a39      	ldr	r2, [pc, #228]	; (800fbf8 <HAL_SAI_Transmit_DMA+0x164>)
 800fb14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb1c:	4a37      	ldr	r2, [pc, #220]	; (800fbfc <HAL_SAI_Transmit_DMA+0x168>)
 800fb1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb26:	2200      	movs	r2, #0
 800fb28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb34:	4619      	mov	r1, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	331c      	adds	r3, #28
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fb44:	f7f7 fe3a 	bl	80077bc <HAL_DMA_Start_IT>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d005      	beq.n	800fb5a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	e047      	b.n	800fbea <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 fa17 	bl	800ff90 <SAI_InterruptFlag>
 800fb62:	4601      	mov	r1, r0
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	691a      	ldr	r2, [r3, #16]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	430a      	orrs	r2, r1
 800fb70:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb80:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fb82:	e015      	b.n	800fbb0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fb84:	f7f5 fb6c 	bl	8005260 <HAL_GetTick>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb92:	d90d      	bls.n	800fbb0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fbac:	2303      	movs	r3, #3
 800fbae:	e01c      	b.n	800fbea <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0e2      	beq.n	800fb84 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d107      	bne.n	800fbdc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fbda:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	e000      	b.n	800fbea <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fbe8:	2302      	movs	r3, #2
  }
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	080100d5 	.word	0x080100d5
 800fbf8:	08010075 	.word	0x08010075
 800fbfc:	0801016d 	.word	0x0801016d

0800fc00 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <HAL_SAI_Receive_DMA+0x1a>
 800fc14:	88fb      	ldrh	r3, [r7, #6]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d101      	bne.n	800fc1e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e079      	b.n	800fd12 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d172      	bne.n	800fd10 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d101      	bne.n	800fc38 <HAL_SAI_Receive_DMA+0x38>
 800fc34:	2302      	movs	r3, #2
 800fc36:	e06c      	b.n	800fd12 <HAL_SAI_Receive_DMA+0x112>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	88fa      	ldrh	r2, [r7, #6]
 800fc4a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	88fa      	ldrh	r2, [r7, #6]
 800fc52:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2222      	movs	r2, #34	; 0x22
 800fc62:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc6c:	4a2b      	ldr	r2, [pc, #172]	; (800fd1c <HAL_SAI_Receive_DMA+0x11c>)
 800fc6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc76:	4a2a      	ldr	r2, [pc, #168]	; (800fd20 <HAL_SAI_Receive_DMA+0x120>)
 800fc78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc80:	4a28      	ldr	r2, [pc, #160]	; (800fd24 <HAL_SAI_Receive_DMA+0x124>)
 800fc82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	331c      	adds	r3, #28
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fca0:	461a      	mov	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fca8:	f7f7 fd88 	bl	80077bc <HAL_DMA_Start_IT>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d005      	beq.n	800fcbe <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e029      	b.n	800fd12 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f000 f965 	bl	800ff90 <SAI_InterruptFlag>
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	691a      	ldr	r2, [r3, #16]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	430a      	orrs	r2, r1
 800fcd4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fce4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d107      	bne.n	800fd04 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fd02:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	e000      	b.n	800fd12 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800fd10:	2302      	movs	r3, #2
  }
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08010151 	.word	0x08010151
 800fd20:	080100f1 	.word	0x080100f1
 800fd24:	0801016d 	.word	0x0801016d

0800fd28 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2200      	movs	r2, #0
 800fd44:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <SAI_InitI2S+0x2e>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	d103      	bne.n	800fd5e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	651a      	str	r2, [r3, #80]	; 0x50
 800fd5c:	e002      	b.n	800fd64 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2201      	movs	r2, #1
 800fd62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fd6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd72:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	683a      	ldr	r2, [r7, #0]
 800fd7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	f003 0301 	and.w	r3, r3, #1
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e077      	b.n	800fe7e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d107      	bne.n	800fda4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2200      	movs	r2, #0
 800fd98:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fda0:	665a      	str	r2, [r3, #100]	; 0x64
 800fda2:	e006      	b.n	800fdb2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fdaa:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d84f      	bhi.n	800fe58 <SAI_InitI2S+0x130>
 800fdb8:	a201      	add	r2, pc, #4	; (adr r2, 800fdc0 <SAI_InitI2S+0x98>)
 800fdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbe:	bf00      	nop
 800fdc0:	0800fdd1 	.word	0x0800fdd1
 800fdc4:	0800fdf3 	.word	0x0800fdf3
 800fdc8:	0800fe15 	.word	0x0800fe15
 800fdcc:	0800fe37 	.word	0x0800fe37
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2280      	movs	r2, #128	; 0x80
 800fdd4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	085b      	lsrs	r3, r3, #1
 800fdda:	015a      	lsls	r2, r3, #5
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	085b      	lsrs	r3, r3, #1
 800fde4:	011a      	lsls	r2, r3, #4
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2240      	movs	r2, #64	; 0x40
 800fdee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fdf0:	e035      	b.n	800fe5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2280      	movs	r2, #128	; 0x80
 800fdf6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	085b      	lsrs	r3, r3, #1
 800fdfc:	019a      	lsls	r2, r3, #6
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	085b      	lsrs	r3, r3, #1
 800fe06:	015a      	lsls	r2, r3, #5
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2280      	movs	r2, #128	; 0x80
 800fe10:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe12:	e024      	b.n	800fe5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	22c0      	movs	r2, #192	; 0xc0
 800fe18:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	085b      	lsrs	r3, r3, #1
 800fe1e:	019a      	lsls	r2, r3, #6
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	085b      	lsrs	r3, r3, #1
 800fe28:	015a      	lsls	r2, r3, #5
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2280      	movs	r2, #128	; 0x80
 800fe32:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe34:	e013      	b.n	800fe5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	22e0      	movs	r2, #224	; 0xe0
 800fe3a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	085b      	lsrs	r3, r3, #1
 800fe40:	019a      	lsls	r2, r3, #6
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	085b      	lsrs	r3, r3, #1
 800fe4a:	015a      	lsls	r2, r3, #5
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2280      	movs	r2, #128	; 0x80
 800fe54:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe56:	e002      	b.n	800fe5e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe5c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d10b      	bne.n	800fe7c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d102      	bne.n	800fe70 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2210      	movs	r2, #16
 800fe6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d102      	bne.n	800fe7c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2208      	movs	r2, #8
 800fe7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	371c      	adds	r7, #28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop

0800fe8c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b087      	sub	sp, #28
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <SAI_InitPCM+0x2e>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d103      	bne.n	800fec2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2201      	movs	r2, #1
 800febe:	651a      	str	r2, [r3, #80]	; 0x50
 800fec0:	e002      	b.n	800fec8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fed4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fedc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2200      	movs	r2, #0
 800fee2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fef0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	d103      	bne.n	800ff00 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2201      	movs	r2, #1
 800fefc:	659a      	str	r2, [r3, #88]	; 0x58
 800fefe:	e002      	b.n	800ff06 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	220d      	movs	r2, #13
 800ff04:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	d837      	bhi.n	800ff7c <SAI_InitPCM+0xf0>
 800ff0c:	a201      	add	r2, pc, #4	; (adr r2, 800ff14 <SAI_InitPCM+0x88>)
 800ff0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff12:	bf00      	nop
 800ff14:	0800ff25 	.word	0x0800ff25
 800ff18:	0800ff3b 	.word	0x0800ff3b
 800ff1c:	0800ff51 	.word	0x0800ff51
 800ff20:	0800ff67 	.word	0x0800ff67
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2280      	movs	r2, #128	; 0x80
 800ff28:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	011a      	lsls	r2, r3, #4
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2240      	movs	r2, #64	; 0x40
 800ff36:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff38:	e023      	b.n	800ff82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2280      	movs	r2, #128	; 0x80
 800ff3e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	015a      	lsls	r2, r3, #5
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2280      	movs	r2, #128	; 0x80
 800ff4c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff4e:	e018      	b.n	800ff82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	22c0      	movs	r2, #192	; 0xc0
 800ff54:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	015a      	lsls	r2, r3, #5
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2280      	movs	r2, #128	; 0x80
 800ff62:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff64:	e00d      	b.n	800ff82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	22e0      	movs	r2, #224	; 0xe0
 800ff6a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2280      	movs	r2, #128	; 0x80
 800ff78:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff7a:	e002      	b.n	800ff82 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ff80:	bf00      	nop
  }

  return status;
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	371c      	adds	r7, #28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr

0800ff90 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	460b      	mov	r3, r1
 800ff9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ffa0:	78fb      	ldrb	r3, [r7, #3]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d103      	bne.n	800ffae <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f043 0308 	orr.w	r3, r3, #8
 800ffac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffb2:	2b08      	cmp	r3, #8
 800ffb4:	d10b      	bne.n	800ffce <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	d003      	beq.n	800ffc6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d103      	bne.n	800ffce <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f043 0310 	orr.w	r3, r3, #16
 800ffcc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d003      	beq.n	800ffde <SAI_InterruptFlag+0x4e>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d104      	bne.n	800ffe8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ffe4:	60fb      	str	r3, [r7, #12]
 800ffe6:	e003      	b.n	800fff0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f043 0304 	orr.w	r3, r3, #4
 800ffee:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fff0:	68fb      	ldr	r3, [r7, #12]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3714      	adds	r7, #20
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
	...

08010000 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010008:	4b18      	ldr	r3, [pc, #96]	; (801006c <SAI_Disable+0x6c>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a18      	ldr	r2, [pc, #96]	; (8010070 <SAI_Disable+0x70>)
 801000e:	fba2 2303 	umull	r2, r3, r2, r3
 8010012:	0b1b      	lsrs	r3, r3, #12
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801002a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8010042:	2303      	movs	r3, #3
 8010044:	72fb      	strb	r3, [r7, #11]
      break;
 8010046:	e009      	b.n	801005c <SAI_Disable+0x5c>
    }
    count--;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3b01      	subs	r3, #1
 801004c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1e7      	bne.n	801002c <SAI_Disable+0x2c>

  return status;
 801005c:	7afb      	ldrb	r3, [r7, #11]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	20000018 	.word	0x20000018
 8010070:	95cbec1b 	.word	0x95cbec1b

08010074 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010080:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	69db      	ldr	r3, [r3, #28]
 8010086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801008a:	d01c      	beq.n	80100c6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80100a2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80100a4:	2100      	movs	r1, #0
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f7ff ff72 	bl	800ff90 <SAI_InterruptFlag>
 80100ac:	4603      	mov	r3, r0
 80100ae:	43d9      	mvns	r1, r3
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	691a      	ldr	r2, [r3, #16]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	400a      	ands	r2, r1
 80100bc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2201      	movs	r2, #1
 80100c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7f2 f9ca 	bl	8002460 <HAL_SAI_TxCpltCallback>
#endif
}
 80100cc:	bf00      	nop
 80100ce:	3710      	adds	r7, #16
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f7f2 f9c6 	bl	8002474 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100fc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	69db      	ldr	r3, [r3, #28]
 8010102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010106:	d01c      	beq.n	8010142 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010116:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010120:	2100      	movs	r1, #0
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f7ff ff34 	bl	800ff90 <SAI_InterruptFlag>
 8010128:	4603      	mov	r3, r0
 801012a:	43d9      	mvns	r1, r3
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	691a      	ldr	r2, [r3, #16]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	400a      	ands	r2, r1
 8010138:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2201      	movs	r2, #1
 801013e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7f2 f9a0 	bl	8002488 <HAL_SAI_RxCpltCallback>
#endif
}
 8010148:	bf00      	nop
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801015c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7f2 f99d 	bl	800249e <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8010164:	bf00      	nop
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010178:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7f8 fcb2 	bl	8008ae4 <HAL_DMA_GetError>
 8010180:	4603      	mov	r3, r0
 8010182:	2b02      	cmp	r3, #2
 8010184:	d01d      	beq.n	80101c2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801018c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80101a4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f7ff ff2a 	bl	8010000 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f7f2 f945 	bl	800244c <HAL_SAI_ErrorCallback>
#endif
  }
}
 80101c2:	bf00      	nop
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b08a      	sub	sp, #40	; 0x28
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d101      	bne.n	80101dc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80101d8:	2301      	movs	r3, #1
 80101da:	e075      	b.n	80102c8 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d105      	bne.n	80101f4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7f3 fb60 	bl	80038b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2204      	movs	r2, #4
 80101f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 f867 	bl	80102d0 <HAL_SD_InitCard>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d001      	beq.n	801020c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	e05d      	b.n	80102c8 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801020c:	f107 0308 	add.w	r3, r7, #8
 8010210:	4619      	mov	r1, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 fdb4 	bl	8010d80 <HAL_SD_GetCardStatus>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801021e:	2301      	movs	r3, #1
 8010220:	e052      	b.n	80102c8 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8010222:	7e3b      	ldrb	r3, [r7, #24]
 8010224:	b2db      	uxtb	r3, r3
 8010226:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8010228:	7e7b      	ldrb	r3, [r7, #25]
 801022a:	b2db      	uxtb	r3, r3
 801022c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010232:	2b01      	cmp	r3, #1
 8010234:	d10a      	bne.n	801024c <HAL_SD_Init+0x82>
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <HAL_SD_Init+0x78>
 801023c:	6a3b      	ldr	r3, [r7, #32]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d004      	beq.n	801024c <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010248:	659a      	str	r2, [r3, #88]	; 0x58
 801024a:	e00b      	b.n	8010264 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010250:	2b01      	cmp	r3, #1
 8010252:	d104      	bne.n	801025e <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f44f 7280 	mov.w	r2, #256	; 0x100
 801025a:	659a      	str	r2, [r3, #88]	; 0x58
 801025c:	e002      	b.n	8010264 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fe72 	bl	8010f54 <HAL_SD_ConfigWideBusOperation>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e026      	b.n	80102c8 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801027a:	f7f4 fff1 	bl	8005260 <HAL_GetTick>
 801027e:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8010280:	e011      	b.n	80102a6 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010282:	f7f4 ffed 	bl	8005260 <HAL_GetTick>
 8010286:	4602      	mov	r2, r0
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010290:	d109      	bne.n	80102a6 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010298:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e010      	b.n	80102c8 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 ff66 	bl	8011178 <HAL_SD_GetCardState>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d1e7      	bne.n	8010282 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3728      	adds	r7, #40	; 0x28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b08d      	sub	sp, #52	; 0x34
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80102d8:	2300      	movs	r3, #0
 80102da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80102dc:	2300      	movs	r3, #0
 80102de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80102e0:	2300      	movs	r3, #0
 80102e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80102e4:	2300      	movs	r3, #0
 80102e6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80102e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80102ec:	f04f 0100 	mov.w	r1, #0
 80102f0:	f7fd fd48 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 80102f4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d109      	bne.n	8010310 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801030a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801030c:	2301      	movs	r3, #1
 801030e:	e070      	b.n	80103f2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	0a1b      	lsrs	r3, r3, #8
 8010314:	4a39      	ldr	r2, [pc, #228]	; (80103fc <HAL_SD_InitCard+0x12c>)
 8010316:	fba2 2303 	umull	r2, r3, r2, r3
 801031a:	091b      	lsrs	r3, r3, #4
 801031c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681c      	ldr	r4, [r3, #0]
 8010322:	466a      	mov	r2, sp
 8010324:	f107 0318 	add.w	r3, r7, #24
 8010328:	e893 0003 	ldmia.w	r3, {r0, r1}
 801032c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010330:	f107 030c 	add.w	r3, r7, #12
 8010334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010336:	4620      	mov	r0, r4
 8010338:	f003 fe7e 	bl	8014038 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4618      	mov	r0, r3
 8010342:	f003 fec1 	bl	80140c8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d005      	beq.n	8010358 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	005b      	lsls	r3, r3, #1
 8010350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010352:	fbb2 f3f3 	udiv	r3, r2, r3
 8010356:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8010358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035a:	2b00      	cmp	r3, #0
 801035c:	d007      	beq.n	801036e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801035e:	4a28      	ldr	r2, [pc, #160]	; (8010400 <HAL_SD_InitCard+0x130>)
 8010360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010362:	fbb2 f3f3 	udiv	r3, r2, r3
 8010366:	3301      	adds	r3, #1
 8010368:	4618      	mov	r0, r3
 801036a:	f7f4 ff85 	bl	8005278 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fff0 	bl	8011354 <SD_PowerON>
 8010374:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010388:	6a3b      	ldr	r3, [r7, #32]
 801038a:	431a      	orrs	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010390:	2301      	movs	r3, #1
 8010392:	e02e      	b.n	80103f2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 ff0f 	bl	80111b8 <SD_InitCard>
 801039a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00b      	beq.n	80103ba <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103ae:	6a3b      	ldr	r3, [r7, #32]
 80103b0:	431a      	orrs	r2, r3
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80103b6:	2301      	movs	r3, #1
 80103b8:	e01b      	b.n	80103f2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103c2:	4618      	mov	r0, r3
 80103c4:	f003 ff16 	bl	80141f4 <SDMMC_CmdBlockLength>
 80103c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80103ca:	6a3b      	ldr	r3, [r7, #32]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00f      	beq.n	80103f0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a0b      	ldr	r2, [pc, #44]	; (8010404 <HAL_SD_InitCard+0x134>)
 80103d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103dc:	6a3b      	ldr	r3, [r7, #32]
 80103de:	431a      	orrs	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	e000      	b.n	80103f2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	372c      	adds	r7, #44	; 0x2c
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd90      	pop	{r4, r7, pc}
 80103fa:	bf00      	nop
 80103fc:	014f8b59 	.word	0x014f8b59
 8010400:	00012110 	.word	0x00012110
 8010404:	1fe00fff 	.word	0x1fe00fff

08010408 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b092      	sub	sp, #72	; 0x48
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
 8010414:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010416:	f7f4 ff23 	bl	8005260 <HAL_GetTick>
 801041a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d107      	bne.n	801043a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801042e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	e167      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b01      	cmp	r3, #1
 8010444:	f040 815a 	bne.w	80106fc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801044e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	441a      	add	r2, r3
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010458:	429a      	cmp	r2, r3
 801045a:	d907      	bls.n	801046c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010460:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	e14e      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2203      	movs	r2, #3
 8010470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2200      	movs	r2, #0
 801047a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010480:	2b01      	cmp	r3, #1
 8010482:	d002      	beq.n	801048a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010486:	025b      	lsls	r3, r3, #9
 8010488:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801048a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801048e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	025b      	lsls	r3, r3, #9
 8010494:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010496:	2390      	movs	r3, #144	; 0x90
 8010498:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801049a:	2302      	movs	r3, #2
 801049c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801049e:	2300      	movs	r3, #0
 80104a0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f107 0214 	add.w	r2, r7, #20
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f003 fe73 	bl	801419c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68da      	ldr	r2, [r3, #12]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80104c4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d90a      	bls.n	80104e2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2202      	movs	r2, #2
 80104d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104d8:	4618      	mov	r0, r3
 80104da:	f003 fed1 	bl	8014280 <SDMMC_CmdReadMultiBlock>
 80104de:	6478      	str	r0, [r7, #68]	; 0x44
 80104e0:	e009      	b.n	80104f6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2201      	movs	r2, #1
 80104e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104ee:	4618      	mov	r0, r3
 80104f0:	f003 fea3 	bl	801423a <SDMMC_CmdReadSingleBlock>
 80104f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80104f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d012      	beq.n	8010522 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a84      	ldr	r2, [pc, #528]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 8010502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801050a:	431a      	orrs	r2, r3
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2201      	movs	r2, #1
 8010514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	e0f3      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010526:	e058      	b.n	80105da <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801052e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d033      	beq.n	801059e <HAL_SD_ReadBlocks+0x196>
 8010536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010538:	2b1f      	cmp	r3, #31
 801053a:	d930      	bls.n	801059e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 801053c:	2300      	movs	r3, #0
 801053e:	643b      	str	r3, [r7, #64]	; 0x40
 8010540:	e027      	b.n	8010592 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4618      	mov	r0, r3
 8010548:	f003 fda0 	bl	801408c <SDMMC_ReadFIFO>
 801054c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 801054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010550:	b2da      	uxtb	r2, r3
 8010552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010554:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010558:	3301      	adds	r3, #1
 801055a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055e:	0a1b      	lsrs	r3, r3, #8
 8010560:	b2da      	uxtb	r2, r3
 8010562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010564:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	3301      	adds	r3, #1
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	0c1b      	lsrs	r3, r3, #16
 8010570:	b2da      	uxtb	r2, r3
 8010572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010574:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	3301      	adds	r3, #1
 801057a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	0e1b      	lsrs	r3, r3, #24
 8010580:	b2da      	uxtb	r2, r3
 8010582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010584:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010588:	3301      	adds	r3, #1
 801058a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 801058c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801058e:	3301      	adds	r3, #1
 8010590:	643b      	str	r3, [r7, #64]	; 0x40
 8010592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010594:	2b07      	cmp	r3, #7
 8010596:	d9d4      	bls.n	8010542 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801059a:	3b20      	subs	r3, #32
 801059c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801059e:	f7f4 fe5f 	bl	8005260 <HAL_GetTick>
 80105a2:	4602      	mov	r2, r0
 80105a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d902      	bls.n	80105b4 <HAL_SD_ReadBlocks+0x1ac>
 80105ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d112      	bne.n	80105da <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a56      	ldr	r2, [pc, #344]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 80105ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2200      	movs	r2, #0
 80105d4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80105d6:	2303      	movs	r3, #3
 80105d8:	e097      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d09f      	beq.n	8010528 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68da      	ldr	r2, [r3, #12]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105f6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010602:	2b00      	cmp	r3, #0
 8010604:	d022      	beq.n	801064c <HAL_SD_ReadBlocks+0x244>
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d91f      	bls.n	801064c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010610:	2b03      	cmp	r3, #3
 8010612:	d01b      	beq.n	801064c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4618      	mov	r0, r3
 801061a:	f003 fe9b 	bl	8014354 <SDMMC_CmdStopTransfer>
 801061e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010622:	2b00      	cmp	r3, #0
 8010624:	d012      	beq.n	801064c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a3a      	ldr	r2, [pc, #232]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 801062c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010634:	431a      	orrs	r2, r3
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2201      	movs	r2, #1
 801063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010648:	2301      	movs	r3, #1
 801064a:	e05e      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010652:	f003 0308 	and.w	r3, r3, #8
 8010656:	2b00      	cmp	r3, #0
 8010658:	d012      	beq.n	8010680 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a2d      	ldr	r2, [pc, #180]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 8010660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010666:	f043 0208 	orr.w	r2, r3, #8
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2201      	movs	r2, #1
 8010672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2200      	movs	r2, #0
 801067a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	e044      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010686:	f003 0302 	and.w	r3, r3, #2
 801068a:	2b00      	cmp	r3, #0
 801068c:	d012      	beq.n	80106b4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a20      	ldr	r2, [pc, #128]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 8010694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801069a:	f043 0202 	orr.w	r2, r3, #2
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2201      	movs	r2, #1
 80106a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2200      	movs	r2, #0
 80106ae:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80106b0:	2301      	movs	r3, #1
 80106b2:	e02a      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ba:	f003 0320 	and.w	r3, r3, #32
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d012      	beq.n	80106e8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a13      	ldr	r2, [pc, #76]	; (8010714 <HAL_SD_ReadBlocks+0x30c>)
 80106c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	f043 0220 	orr.w	r2, r3, #32
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2201      	movs	r2, #1
 80106da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e010      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4a0a      	ldr	r2, [pc, #40]	; (8010718 <HAL_SD_ReadBlocks+0x310>)
 80106ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2201      	movs	r2, #1
 80106f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	e006      	b.n	801070a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010700:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010708:	2301      	movs	r3, #1
  }
}
 801070a:	4618      	mov	r0, r3
 801070c:	3748      	adds	r7, #72	; 0x48
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	1fe00fff 	.word	0x1fe00fff
 8010718:	18000f3a 	.word	0x18000f3a

0801071c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b092      	sub	sp, #72	; 0x48
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801072a:	f7f4 fd99 	bl	8005260 <HAL_GetTick>
 801072e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d107      	bne.n	801074e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	e16b      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b01      	cmp	r3, #1
 8010758:	f040 815e 	bne.w	8010a18 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	441a      	add	r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801076c:	429a      	cmp	r2, r3
 801076e:	d907      	bls.n	8010780 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010774:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801077c:	2301      	movs	r3, #1
 801077e:	e152      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2203      	movs	r2, #3
 8010784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2200      	movs	r2, #0
 801078e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010794:	2b01      	cmp	r3, #1
 8010796:	d002      	beq.n	801079e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8010798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079a:	025b      	lsls	r3, r3, #9
 801079c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801079e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107a2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	025b      	lsls	r3, r3, #9
 80107a8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80107aa:	2390      	movs	r3, #144	; 0x90
 80107ac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80107ae:	2300      	movs	r3, #0
 80107b0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80107b6:	2300      	movs	r3, #0
 80107b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f107 0218 	add.w	r2, r7, #24
 80107c2:	4611      	mov	r1, r2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f003 fce9 	bl	801419c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68da      	ldr	r2, [r3, #12]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107d8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d90a      	bls.n	80107f6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2220      	movs	r2, #32
 80107e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80107ec:	4618      	mov	r0, r3
 80107ee:	f003 fd8d 	bl	801430c <SDMMC_CmdWriteMultiBlock>
 80107f2:	6478      	str	r0, [r7, #68]	; 0x44
 80107f4:	e009      	b.n	801080a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2210      	movs	r2, #16
 80107fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010802:	4618      	mov	r0, r3
 8010804:	f003 fd5f 	bl	80142c6 <SDMMC_CmdWriteSingleBlock>
 8010808:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801080a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801080c:	2b00      	cmp	r3, #0
 801080e:	d012      	beq.n	8010836 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a86      	ldr	r2, [pc, #536]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 8010816:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801081c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801081e:	431a      	orrs	r2, r3
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010832:	2301      	movs	r3, #1
 8010834:	e0f7      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801083a:	e05c      	b.n	80108f6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010846:	2b00      	cmp	r3, #0
 8010848:	d037      	beq.n	80108ba <HAL_SD_WriteBlocks+0x19e>
 801084a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801084c:	2b1f      	cmp	r3, #31
 801084e:	d934      	bls.n	80108ba <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8010850:	2300      	movs	r3, #0
 8010852:	643b      	str	r3, [r7, #64]	; 0x40
 8010854:	e02b      	b.n	80108ae <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8010856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801085c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085e:	3301      	adds	r3, #1
 8010860:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8010862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	021a      	lsls	r2, r3, #8
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	4313      	orrs	r3, r2
 801086c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801086e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010870:	3301      	adds	r3, #1
 8010872:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	041a      	lsls	r2, r3, #16
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	4313      	orrs	r3, r2
 801087e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010882:	3301      	adds	r3, #1
 8010884:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	061a      	lsls	r2, r3, #24
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	4313      	orrs	r3, r2
 8010890:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	3301      	adds	r3, #1
 8010896:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f107 0214 	add.w	r2, r7, #20
 80108a0:	4611      	mov	r1, r2
 80108a2:	4618      	mov	r0, r3
 80108a4:	f003 fbff 	bl	80140a6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80108a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108aa:	3301      	adds	r3, #1
 80108ac:	643b      	str	r3, [r7, #64]	; 0x40
 80108ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108b0:	2b07      	cmp	r3, #7
 80108b2:	d9d0      	bls.n	8010856 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80108b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b6:	3b20      	subs	r3, #32
 80108b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80108ba:	f7f4 fcd1 	bl	8005260 <HAL_GetTick>
 80108be:	4602      	mov	r2, r0
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d902      	bls.n	80108d0 <HAL_SD_WriteBlocks+0x1b4>
 80108ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d112      	bne.n	80108f6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a56      	ldr	r2, [pc, #344]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 80108d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108de:	431a      	orrs	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80108f2:	2303      	movs	r3, #3
 80108f4:	e097      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8010900:	2b00      	cmp	r3, #0
 8010902:	d09b      	beq.n	801083c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010912:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801091a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801091e:	2b00      	cmp	r3, #0
 8010920:	d022      	beq.n	8010968 <HAL_SD_WriteBlocks+0x24c>
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2b01      	cmp	r3, #1
 8010926:	d91f      	bls.n	8010968 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092c:	2b03      	cmp	r3, #3
 801092e:	d01b      	beq.n	8010968 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4618      	mov	r0, r3
 8010936:	f003 fd0d 	bl	8014354 <SDMMC_CmdStopTransfer>
 801093a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801093c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801093e:	2b00      	cmp	r3, #0
 8010940:	d012      	beq.n	8010968 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4a3a      	ldr	r2, [pc, #232]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 8010948:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801094e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010950:	431a      	orrs	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010964:	2301      	movs	r3, #1
 8010966:	e05e      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096e:	f003 0308 	and.w	r3, r3, #8
 8010972:	2b00      	cmp	r3, #0
 8010974:	d012      	beq.n	801099c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a2d      	ldr	r2, [pc, #180]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 801097c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010982:	f043 0208 	orr.w	r2, r3, #8
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2201      	movs	r2, #1
 801098e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	e044      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a2:	f003 0302 	and.w	r3, r3, #2
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d012      	beq.n	80109d0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a20      	ldr	r2, [pc, #128]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 80109b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b6:	f043 0202 	orr.w	r2, r3, #2
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80109cc:	2301      	movs	r3, #1
 80109ce:	e02a      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d6:	f003 0310 	and.w	r3, r3, #16
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d012      	beq.n	8010a04 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a13      	ldr	r2, [pc, #76]	; (8010a30 <HAL_SD_WriteBlocks+0x314>)
 80109e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ea:	f043 0210 	orr.w	r2, r3, #16
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2200      	movs	r2, #0
 80109fe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010a00:	2301      	movs	r3, #1
 8010a02:	e010      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a0a      	ldr	r2, [pc, #40]	; (8010a34 <HAL_SD_WriteBlocks+0x318>)
 8010a0a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	e006      	b.n	8010a26 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010a24:	2301      	movs	r3, #1
  }
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3748      	adds	r7, #72	; 0x48
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	1fe00fff 	.word	0x1fe00fff
 8010a34:	18000f3a 	.word	0x18000f3a

08010a38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a46:	0f9b      	lsrs	r3, r3, #30
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a52:	0e9b      	lsrs	r3, r3, #26
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 030f 	and.w	r3, r3, #15
 8010a5a:	b2da      	uxtb	r2, r3
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a64:	0e1b      	lsrs	r3, r3, #24
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	f003 0303 	and.w	r3, r3, #3
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a76:	0c1b      	lsrs	r3, r3, #16
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a82:	0a1b      	lsrs	r3, r3, #8
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a98:	0d1b      	lsrs	r3, r3, #20
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aa4:	0c1b      	lsrs	r3, r3, #16
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	f003 030f 	and.w	r3, r3, #15
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ab6:	0bdb      	lsrs	r3, r3, #15
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ac8:	0b9b      	lsrs	r3, r3, #14
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	f003 0301 	and.w	r3, r3, #1
 8010ad0:	b2da      	uxtb	r2, r3
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ada:	0b5b      	lsrs	r3, r3, #13
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	f003 0301 	and.w	r3, r3, #1
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aec:	0b1b      	lsrs	r3, r3, #12
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	f003 0301 	and.w	r3, r3, #1
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2200      	movs	r2, #0
 8010afe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d163      	bne.n	8010bd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b0c:	009a      	lsls	r2, r3, #2
 8010b0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010b12:	4013      	ands	r3, r2
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010b18:	0f92      	lsrs	r2, r2, #30
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b24:	0edb      	lsrs	r3, r3, #27
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	f003 0307 	and.w	r3, r3, #7
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b36:	0e1b      	lsrs	r3, r3, #24
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	f003 0307 	and.w	r3, r3, #7
 8010b3e:	b2da      	uxtb	r2, r3
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b48:	0d5b      	lsrs	r3, r3, #21
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	f003 0307 	and.w	r3, r3, #7
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b5a:	0c9b      	lsrs	r3, r3, #18
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	f003 0307 	and.w	r3, r3, #7
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b6c:	0bdb      	lsrs	r3, r3, #15
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	f003 0307 	and.w	r3, r3, #7
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	691b      	ldr	r3, [r3, #16]
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	7e1b      	ldrb	r3, [r3, #24]
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	3302      	adds	r3, #2
 8010b90:	2201      	movs	r2, #1
 8010b92:	fa02 f303 	lsl.w	r3, r2, r3
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010b9a:	fb03 f202 	mul.w	r2, r3, r2
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	7a1b      	ldrb	r3, [r3, #8]
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	f003 030f 	and.w	r3, r3, #15
 8010bac:	2201      	movs	r2, #1
 8010bae:	409a      	lsls	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010bbc:	0a52      	lsrs	r2, r2, #9
 8010bbe:	fb03 f202 	mul.w	r2, r3, r2
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bcc:	655a      	str	r2, [r3, #84]	; 0x54
 8010bce:	e031      	b.n	8010c34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d11d      	bne.n	8010c14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bdc:	041b      	lsls	r3, r3, #16
 8010bde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010be6:	0c1b      	lsrs	r3, r3, #16
 8010be8:	431a      	orrs	r2, r3
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	691b      	ldr	r3, [r3, #16]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	029a      	lsls	r2, r3, #10
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c08:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	655a      	str	r2, [r3, #84]	; 0x54
 8010c12:	e00f      	b.n	8010c34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4a58      	ldr	r2, [pc, #352]	; (8010d7c <HAL_SD_GetCardCSD+0x344>)
 8010c1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010c30:	2301      	movs	r3, #1
 8010c32:	e09d      	b.n	8010d70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c38:	0b9b      	lsrs	r3, r3, #14
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c4a:	09db      	lsrs	r3, r3, #7
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c62:	b2da      	uxtb	r2, r3
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c6c:	0fdb      	lsrs	r3, r3, #31
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c78:	0f5b      	lsrs	r3, r3, #29
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	f003 0303 	and.w	r3, r3, #3
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c8a:	0e9b      	lsrs	r3, r3, #26
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	f003 0307 	and.w	r3, r3, #7
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c9c:	0d9b      	lsrs	r3, r3, #22
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	f003 030f 	and.w	r3, r3, #15
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cae:	0d5b      	lsrs	r3, r3, #21
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	f003 0301 	and.w	r3, r3, #1
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cca:	0c1b      	lsrs	r3, r3, #16
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	b2da      	uxtb	r2, r3
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cde:	0bdb      	lsrs	r3, r3, #15
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cf2:	0b9b      	lsrs	r3, r3, #14
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d06:	0b5b      	lsrs	r3, r3, #13
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	f003 0301 	and.w	r3, r3, #1
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d1a:	0b1b      	lsrs	r3, r3, #12
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	f003 0301 	and.w	r3, r3, #1
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d2e:	0a9b      	lsrs	r3, r3, #10
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	f003 0303 	and.w	r3, r3, #3
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d42:	0a1b      	lsrs	r3, r3, #8
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f003 0303 	and.w	r3, r3, #3
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d56:	085b      	lsrs	r3, r3, #1
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010d6e:	2300      	movs	r3, #0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	1fe00fff 	.word	0x1fe00fff

08010d80 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b094      	sub	sp, #80	; 0x50
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	2b03      	cmp	r3, #3
 8010d9a:	d101      	bne.n	8010da0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	e0a7      	b.n	8010ef0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010da0:	f107 0308 	add.w	r3, r7, #8
 8010da4:	4619      	mov	r1, r3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 fb62 	bl	8011470 <SD_SendSDStatus>
 8010dac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d011      	beq.n	8010dd8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a4f      	ldr	r2, [pc, #316]	; (8010ef8 <HAL_SD_GetCardStatus+0x178>)
 8010dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc2:	431a      	orrs	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010dd6:	e070      	b.n	8010eba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	099b      	lsrs	r3, r3, #6
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	f003 0303 	and.w	r3, r3, #3
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	095b      	lsrs	r3, r3, #5
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	f003 0301 	and.w	r3, r3, #1
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	0a1b      	lsrs	r3, r3, #8
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	0e1b      	lsrs	r3, r3, #24
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	061a      	lsls	r2, r3, #24
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	021b      	lsls	r3, r3, #8
 8010e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e1e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	0a1b      	lsrs	r3, r3, #8
 8010e24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e28:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	0e1b      	lsrs	r3, r3, #24
 8010e2e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	0a1b      	lsrs	r3, r3, #8
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	0d1b      	lsrs	r3, r3, #20
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	f003 030f 	and.w	r3, r3, #15
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	0c1b      	lsrs	r3, r3, #16
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	0a9b      	lsrs	r3, r3, #10
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	0a1b      	lsrs	r3, r3, #8
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f003 0303 	and.w	r3, r3, #3
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	091b      	lsrs	r3, r3, #4
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	f003 030f 	and.w	r3, r3, #15
 8010e9c:	b2da      	uxtb	r2, r3
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	f003 030f 	and.w	r3, r3, #15
 8010eaa:	b2da      	uxtb	r2, r3
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	0e1b      	lsrs	r3, r3, #24
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f003 f996 	bl	80141f4 <SDMMC_CmdBlockLength>
 8010ec8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00d      	beq.n	8010eec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a08      	ldr	r2, [pc, #32]	; (8010ef8 <HAL_SD_GetCardStatus+0x178>)
 8010ed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010edc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8010eec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3750      	adds	r7, #80	; 0x50
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	1fe00fff 	.word	0x1fe00fff

08010efc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010f46:	2300      	movs	r3, #0
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	b08d      	sub	sp, #52	; 0x34
 8010f58:	af02      	add	r7, sp, #8
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2203      	movs	r2, #3
 8010f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	d02e      	beq.n	8010fd2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f7a:	d106      	bne.n	8010f8a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	635a      	str	r2, [r3, #52]	; 0x34
 8010f88:	e029      	b.n	8010fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f90:	d10a      	bne.n	8010fa8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fb64 	bl	8011660 <SD_WideBus_Enable>
 8010f98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f9e:	6a3b      	ldr	r3, [r7, #32]
 8010fa0:	431a      	orrs	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8010fa6:	e01a      	b.n	8010fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 fba1 	bl	80116f6 <SD_WideBus_Disable>
 8010fb4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fba:	6a3b      	ldr	r3, [r7, #32]
 8010fbc:	431a      	orrs	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8010fc2:	e00c      	b.n	8010fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	635a      	str	r2, [r3, #52]	; 0x34
 8010fd0:	e005      	b.n	8010fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d007      	beq.n	8010ff6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4a5f      	ldr	r2, [pc, #380]	; (8011168 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010fec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ff4:	e096      	b.n	8011124 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010ff6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010ffa:	f04f 0100 	mov.w	r1, #0
 8010ffe:	f7fc fec1 	bl	800dd84 <HAL_RCCEx_GetPeriphCLKFreq>
 8011002:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	2b00      	cmp	r3, #0
 8011008:	f000 8083 	beq.w	8011112 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	695a      	ldr	r2, [r3, #20]
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	4950      	ldr	r1, [pc, #320]	; (801116c <HAL_SD_ConfigWideBusOperation+0x218>)
 801102a:	fba1 1303 	umull	r1, r3, r1, r3
 801102e:	0e1b      	lsrs	r3, r3, #24
 8011030:	429a      	cmp	r2, r3
 8011032:	d303      	bcc.n	801103c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	61bb      	str	r3, [r7, #24]
 801103a:	e05a      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011044:	d103      	bne.n	801104e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	695b      	ldr	r3, [r3, #20]
 801104a:	61bb      	str	r3, [r7, #24]
 801104c:	e051      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011056:	d126      	bne.n	80110a6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	695b      	ldr	r3, [r3, #20]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10e      	bne.n	801107e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	4a43      	ldr	r2, [pc, #268]	; (8011170 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d906      	bls.n	8011076 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	4a40      	ldr	r2, [pc, #256]	; (801116c <HAL_SD_ConfigWideBusOperation+0x218>)
 801106c:	fba2 2303 	umull	r2, r3, r2, r3
 8011070:	0e5b      	lsrs	r3, r3, #25
 8011072:	61bb      	str	r3, [r7, #24]
 8011074:	e03d      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	695b      	ldr	r3, [r3, #20]
 801107a:	61bb      	str	r3, [r7, #24]
 801107c:	e039      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	695b      	ldr	r3, [r3, #20]
 8011082:	005b      	lsls	r3, r3, #1
 8011084:	69fa      	ldr	r2, [r7, #28]
 8011086:	fbb2 f3f3 	udiv	r3, r2, r3
 801108a:	4a39      	ldr	r2, [pc, #228]	; (8011170 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801108c:	4293      	cmp	r3, r2
 801108e:	d906      	bls.n	801109e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	4a36      	ldr	r2, [pc, #216]	; (801116c <HAL_SD_ConfigWideBusOperation+0x218>)
 8011094:	fba2 2303 	umull	r2, r3, r2, r3
 8011098:	0e5b      	lsrs	r3, r3, #25
 801109a:	61bb      	str	r3, [r7, #24]
 801109c:	e029      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	695b      	ldr	r3, [r3, #20]
 80110a2:	61bb      	str	r3, [r7, #24]
 80110a4:	e025      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d10e      	bne.n	80110cc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	4a30      	ldr	r2, [pc, #192]	; (8011174 <HAL_SD_ConfigWideBusOperation+0x220>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d906      	bls.n	80110c4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	4a2c      	ldr	r2, [pc, #176]	; (801116c <HAL_SD_ConfigWideBusOperation+0x218>)
 80110ba:	fba2 2303 	umull	r2, r3, r2, r3
 80110be:	0e1b      	lsrs	r3, r3, #24
 80110c0:	61bb      	str	r3, [r7, #24]
 80110c2:	e016      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	695b      	ldr	r3, [r3, #20]
 80110c8:	61bb      	str	r3, [r7, #24]
 80110ca:	e012      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	69fa      	ldr	r2, [r7, #28]
 80110d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80110d8:	4a26      	ldr	r2, [pc, #152]	; (8011174 <HAL_SD_ConfigWideBusOperation+0x220>)
 80110da:	4293      	cmp	r3, r2
 80110dc:	d906      	bls.n	80110ec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	4a22      	ldr	r2, [pc, #136]	; (801116c <HAL_SD_ConfigWideBusOperation+0x218>)
 80110e2:	fba2 2303 	umull	r2, r3, r2, r3
 80110e6:	0e1b      	lsrs	r3, r3, #24
 80110e8:	61bb      	str	r3, [r7, #24]
 80110ea:	e002      	b.n	80110f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	695b      	ldr	r3, [r3, #20]
 80110f0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681c      	ldr	r4, [r3, #0]
 80110f6:	466a      	mov	r2, sp
 80110f8:	f107 0314 	add.w	r3, r7, #20
 80110fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011100:	e882 0003 	stmia.w	r2, {r0, r1}
 8011104:	f107 0308 	add.w	r3, r7, #8
 8011108:	cb0e      	ldmia	r3, {r1, r2, r3}
 801110a:	4620      	mov	r0, r4
 801110c:	f002 ff94 	bl	8014038 <SDMMC_Init>
 8011110:	e008      	b.n	8011124 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011116:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 801111e:	2301      	movs	r3, #1
 8011120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f44f 7100 	mov.w	r1, #512	; 0x200
 801112c:	4618      	mov	r0, r3
 801112e:	f003 f861 	bl	80141f4 <SDMMC_CmdBlockLength>
 8011132:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00c      	beq.n	8011154 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a0a      	ldr	r2, [pc, #40]	; (8011168 <HAL_SD_ConfigWideBusOperation+0x214>)
 8011140:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011146:	6a3b      	ldr	r3, [r7, #32]
 8011148:	431a      	orrs	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801114e:	2301      	movs	r3, #1
 8011150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 801115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011160:	4618      	mov	r0, r3
 8011162:	372c      	adds	r7, #44	; 0x2c
 8011164:	46bd      	mov	sp, r7
 8011166:	bd90      	pop	{r4, r7, pc}
 8011168:	1fe00fff 	.word	0x1fe00fff
 801116c:	55e63b89 	.word	0x55e63b89
 8011170:	02faf080 	.word	0x02faf080
 8011174:	017d7840 	.word	0x017d7840

08011178 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011180:	2300      	movs	r3, #0
 8011182:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011184:	f107 030c 	add.w	r3, r7, #12
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 fa40 	bl	8011610 <SD_SendStatus>
 8011190:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d005      	beq.n	80111a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	431a      	orrs	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	0a5b      	lsrs	r3, r3, #9
 80111a8:	f003 030f 	and.w	r3, r3, #15
 80111ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80111ae:	693b      	ldr	r3, [r7, #16]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b090      	sub	sp, #64	; 0x40
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80111c0:	2300      	movs	r3, #0
 80111c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80111c4:	f7f4 f84c 	bl	8005260 <HAL_GetTick>
 80111c8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4618      	mov	r0, r3
 80111d0:	f002 ff8b 	bl	80140ea <SDMMC_GetPowerState>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d102      	bne.n	80111e0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80111da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80111de:	e0b5      	b.n	801134c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111e4:	2b03      	cmp	r3, #3
 80111e6:	d02e      	beq.n	8011246 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f003 f9d6 	bl	801459e <SDMMC_CmdSendCID>
 80111f2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80111f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <SD_InitCard+0x46>
    {
      return errorstate;
 80111fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fc:	e0a6      	b.n	801134c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2100      	movs	r1, #0
 8011204:	4618      	mov	r0, r3
 8011206:	f002 ffb6 	bl	8014176 <SDMMC_GetResponse>
 801120a:	4602      	mov	r2, r0
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2104      	movs	r1, #4
 8011216:	4618      	mov	r0, r3
 8011218:	f002 ffad 	bl	8014176 <SDMMC_GetResponse>
 801121c:	4602      	mov	r2, r0
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	2108      	movs	r1, #8
 8011228:	4618      	mov	r0, r3
 801122a:	f002 ffa4 	bl	8014176 <SDMMC_GetResponse>
 801122e:	4602      	mov	r2, r0
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	210c      	movs	r1, #12
 801123a:	4618      	mov	r0, r3
 801123c:	f002 ff9b 	bl	8014176 <SDMMC_GetResponse>
 8011240:	4602      	mov	r2, r0
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801124a:	2b03      	cmp	r3, #3
 801124c:	d01d      	beq.n	801128a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801124e:	e019      	b.n	8011284 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f107 020a 	add.w	r2, r7, #10
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f003 f9de 	bl	801461c <SDMMC_CmdSetRelAdd>
 8011260:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	2b00      	cmp	r3, #0
 8011266:	d001      	beq.n	801126c <SD_InitCard+0xb4>
      {
        return errorstate;
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	e06f      	b.n	801134c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 801126c:	f7f3 fff8 	bl	8005260 <HAL_GetTick>
 8011270:	4602      	mov	r2, r0
 8011272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	f241 3287 	movw	r2, #4999	; 0x1387
 801127a:	4293      	cmp	r3, r2
 801127c:	d902      	bls.n	8011284 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801127e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011282:	e063      	b.n	801134c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8011284:	897b      	ldrh	r3, [r7, #10]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d0e2      	beq.n	8011250 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801128e:	2b03      	cmp	r3, #3
 8011290:	d036      	beq.n	8011300 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8011292:	897b      	ldrh	r3, [r7, #10]
 8011294:	461a      	mov	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112a2:	041b      	lsls	r3, r3, #16
 80112a4:	4619      	mov	r1, r3
 80112a6:	4610      	mov	r0, r2
 80112a8:	f003 f998 	bl	80145dc <SDMMC_CmdSendCSD>
 80112ac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80112ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <SD_InitCard+0x100>
    {
      return errorstate;
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	e049      	b.n	801134c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2100      	movs	r1, #0
 80112be:	4618      	mov	r0, r3
 80112c0:	f002 ff59 	bl	8014176 <SDMMC_GetResponse>
 80112c4:	4602      	mov	r2, r0
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2104      	movs	r1, #4
 80112d0:	4618      	mov	r0, r3
 80112d2:	f002 ff50 	bl	8014176 <SDMMC_GetResponse>
 80112d6:	4602      	mov	r2, r0
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2108      	movs	r1, #8
 80112e2:	4618      	mov	r0, r3
 80112e4:	f002 ff47 	bl	8014176 <SDMMC_GetResponse>
 80112e8:	4602      	mov	r2, r0
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	210c      	movs	r1, #12
 80112f4:	4618      	mov	r0, r3
 80112f6:	f002 ff3e 	bl	8014176 <SDMMC_GetResponse>
 80112fa:	4602      	mov	r2, r0
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2104      	movs	r1, #4
 8011306:	4618      	mov	r0, r3
 8011308:	f002 ff35 	bl	8014176 <SDMMC_GetResponse>
 801130c:	4603      	mov	r3, r0
 801130e:	0d1a      	lsrs	r2, r3, #20
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011314:	f107 030c 	add.w	r3, r7, #12
 8011318:	4619      	mov	r1, r3
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff fb8c 	bl	8010a38 <HAL_SD_GetCardCSD>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d002      	beq.n	801132c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011326:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801132a:	e00f      	b.n	801134c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011334:	041b      	lsls	r3, r3, #16
 8011336:	4619      	mov	r1, r3
 8011338:	4610      	mov	r0, r2
 801133a:	f003 f847 	bl	80143cc <SDMMC_CmdSelDesel>
 801133e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <SD_InitCard+0x192>
  {
    return errorstate;
 8011346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011348:	e000      	b.n	801134c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3740      	adds	r7, #64	; 0x40
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801135c:	2300      	movs	r3, #0
 801135e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8011360:	2300      	movs	r3, #0
 8011362:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011364:	2300      	movs	r3, #0
 8011366:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4618      	mov	r0, r3
 801136e:	f003 f850 	bl	8014412 <SDMMC_CmdGoIdleState>
 8011372:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <SD_PowerON+0x2a>
  {
    return errorstate;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	e072      	b.n	8011464 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4618      	mov	r0, r3
 8011384:	f003 f863 	bl	801444e <SDMMC_CmdOperCond>
 8011388:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011390:	d10d      	bne.n	80113ae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f003 f838 	bl	8014412 <SDMMC_CmdGoIdleState>
 80113a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d004      	beq.n	80113b4 <SD_PowerON+0x60>
    {
      return errorstate;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	e05a      	b.n	8011464 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2201      	movs	r2, #1
 80113b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d137      	bne.n	801142c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2100      	movs	r1, #0
 80113c2:	4618      	mov	r0, r3
 80113c4:	f003 f863 	bl	801448e <SDMMC_CmdAppCommand>
 80113c8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d02d      	beq.n	801142c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80113d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80113d4:	e046      	b.n	8011464 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2100      	movs	r1, #0
 80113dc:	4618      	mov	r0, r3
 80113de:	f003 f856 	bl	801448e <SDMMC_CmdAppCommand>
 80113e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <SD_PowerON+0x9a>
    {
      return errorstate;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	e03a      	b.n	8011464 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	491e      	ldr	r1, [pc, #120]	; (801146c <SD_PowerON+0x118>)
 80113f4:	4618      	mov	r0, r3
 80113f6:	f003 f86d 	bl	80144d4 <SDMMC_CmdAppOperCommand>
 80113fa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d002      	beq.n	8011408 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011406:	e02d      	b.n	8011464 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2100      	movs	r1, #0
 801140e:	4618      	mov	r0, r3
 8011410:	f002 feb1 	bl	8014176 <SDMMC_GetResponse>
 8011414:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	0fdb      	lsrs	r3, r3, #31
 801141a:	2b01      	cmp	r3, #1
 801141c:	d101      	bne.n	8011422 <SD_PowerON+0xce>
 801141e:	2301      	movs	r3, #1
 8011420:	e000      	b.n	8011424 <SD_PowerON+0xd0>
 8011422:	2300      	movs	r3, #0
 8011424:	613b      	str	r3, [r7, #16]

    count++;
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	3301      	adds	r3, #1
 801142a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011432:	4293      	cmp	r3, r2
 8011434:	d802      	bhi.n	801143c <SD_PowerON+0xe8>
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0cc      	beq.n	80113d6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011442:	4293      	cmp	r3, r2
 8011444:	d902      	bls.n	801144c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011446:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801144a:	e00b      	b.n	8011464 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2200      	movs	r2, #0
 8011450:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2201      	movs	r2, #1
 8011460:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8011462:	2300      	movs	r3, #0
}
 8011464:	4618      	mov	r0, r3
 8011466:	3718      	adds	r7, #24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	c1100000 	.word	0xc1100000

08011470 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08c      	sub	sp, #48	; 0x30
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801147a:	f7f3 fef1 	bl	8005260 <HAL_GetTick>
 801147e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2100      	movs	r1, #0
 801148a:	4618      	mov	r0, r3
 801148c:	f002 fe73 	bl	8014176 <SDMMC_GetResponse>
 8011490:	4603      	mov	r3, r0
 8011492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801149a:	d102      	bne.n	80114a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801149c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114a0:	e0b0      	b.n	8011604 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2140      	movs	r1, #64	; 0x40
 80114a8:	4618      	mov	r0, r3
 80114aa:	f002 fea3 	bl	80141f4 <SDMMC_CmdBlockLength>
 80114ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80114b0:	6a3b      	ldr	r3, [r7, #32]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d005      	beq.n	80114c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	e0a0      	b.n	8011604 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681a      	ldr	r2, [r3, #0]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ca:	041b      	lsls	r3, r3, #16
 80114cc:	4619      	mov	r1, r3
 80114ce:	4610      	mov	r0, r2
 80114d0:	f002 ffdd 	bl	801448e <SDMMC_CmdAppCommand>
 80114d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80114d6:	6a3b      	ldr	r3, [r7, #32]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d005      	beq.n	80114e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	e08d      	b.n	8011604 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80114e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80114ee:	2340      	movs	r3, #64	; 0x40
 80114f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80114f2:	2360      	movs	r3, #96	; 0x60
 80114f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80114f6:	2302      	movs	r3, #2
 80114f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80114fe:	2301      	movs	r3, #1
 8011500:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f107 0208 	add.w	r2, r7, #8
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f002 fe45 	bl	801419c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4618      	mov	r0, r3
 8011518:	f003 f8c5 	bl	80146a6 <SDMMC_CmdStatusRegister>
 801151c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801151e:	6a3b      	ldr	r3, [r7, #32]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d02b      	beq.n	801157c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801152c:	6a3b      	ldr	r3, [r7, #32]
 801152e:	e069      	b.n	8011604 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801153a:	2b00      	cmp	r3, #0
 801153c:	d013      	beq.n	8011566 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 801153e:	2300      	movs	r3, #0
 8011540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011542:	e00d      	b.n	8011560 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4618      	mov	r0, r3
 801154a:	f002 fd9f 	bl	801408c <SDMMC_ReadFIFO>
 801154e:	4602      	mov	r2, r0
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	601a      	str	r2, [r3, #0]
        pData++;
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	3304      	adds	r3, #4
 8011558:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 801155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155c:	3301      	adds	r3, #1
 801155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	2b07      	cmp	r3, #7
 8011564:	d9ee      	bls.n	8011544 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011566:	f7f3 fe7b 	bl	8005260 <HAL_GetTick>
 801156a:	4602      	mov	r2, r0
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011574:	d102      	bne.n	801157c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801157a:	e043      	b.n	8011604 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011582:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8011586:	2b00      	cmp	r3, #0
 8011588:	d0d2      	beq.n	8011530 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011590:	f003 0308 	and.w	r3, r3, #8
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011598:	2308      	movs	r3, #8
 801159a:	e033      	b.n	8011604 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a2:	f003 0302 	and.w	r3, r3, #2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80115aa:	2302      	movs	r3, #2
 80115ac:	e02a      	b.n	8011604 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115b4:	f003 0320 	and.w	r3, r3, #32
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d017      	beq.n	80115ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80115bc:	2320      	movs	r3, #32
 80115be:	e021      	b.n	8011604 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f002 fd61 	bl	801408c <SDMMC_ReadFIFO>
 80115ca:	4602      	mov	r2, r0
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	601a      	str	r2, [r3, #0]
    pData++;
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	3304      	adds	r3, #4
 80115d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80115d6:	f7f3 fe43 	bl	8005260 <HAL_GetTick>
 80115da:	4602      	mov	r2, r0
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115e4:	d102      	bne.n	80115ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80115e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115ea:	e00b      	b.n	8011604 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d1e2      	bne.n	80115c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a03      	ldr	r2, [pc, #12]	; (801160c <SD_SendSDStatus+0x19c>)
 8011600:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	3730      	adds	r7, #48	; 0x30
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	18000f3a 	.word	0x18000f3a

08011610 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d102      	bne.n	8011626 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011624:	e018      	b.n	8011658 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801162e:	041b      	lsls	r3, r3, #16
 8011630:	4619      	mov	r1, r3
 8011632:	4610      	mov	r0, r2
 8011634:	f003 f814 	bl	8014660 <SDMMC_CmdSendStatus>
 8011638:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <SD_SendStatus+0x34>
  {
    return errorstate;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	e009      	b.n	8011658 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2100      	movs	r1, #0
 801164a:	4618      	mov	r0, r3
 801164c:	f002 fd93 	bl	8014176 <SDMMC_GetResponse>
 8011650:	4602      	mov	r2, r0
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b086      	sub	sp, #24
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011668:	2300      	movs	r3, #0
 801166a:	60fb      	str	r3, [r7, #12]
 801166c:	2300      	movs	r3, #0
 801166e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2100      	movs	r1, #0
 8011676:	4618      	mov	r0, r3
 8011678:	f002 fd7d 	bl	8014176 <SDMMC_GetResponse>
 801167c:	4603      	mov	r3, r0
 801167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011686:	d102      	bne.n	801168e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801168c:	e02f      	b.n	80116ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801168e:	f107 030c 	add.w	r3, r7, #12
 8011692:	4619      	mov	r1, r3
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 f879 	bl	801178c <SD_FindSCR>
 801169a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	e023      	b.n	80116ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d01c      	beq.n	80116ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b8:	041b      	lsls	r3, r3, #16
 80116ba:	4619      	mov	r1, r3
 80116bc:	4610      	mov	r0, r2
 80116be:	f002 fee6 	bl	801448e <SDMMC_CmdAppCommand>
 80116c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d001      	beq.n	80116ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	e00f      	b.n	80116ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2102      	movs	r1, #2
 80116d4:	4618      	mov	r0, r3
 80116d6:	f002 ff1d 	bl	8014514 <SDMMC_CmdBusWidth>
 80116da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d001      	beq.n	80116e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	e003      	b.n	80116ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80116e6:	2300      	movs	r3, #0
 80116e8:	e001      	b.n	80116ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80116ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b086      	sub	sp, #24
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80116fe:	2300      	movs	r3, #0
 8011700:	60fb      	str	r3, [r7, #12]
 8011702:	2300      	movs	r3, #0
 8011704:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2100      	movs	r1, #0
 801170c:	4618      	mov	r0, r3
 801170e:	f002 fd32 	bl	8014176 <SDMMC_GetResponse>
 8011712:	4603      	mov	r3, r0
 8011714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801171c:	d102      	bne.n	8011724 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801171e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011722:	e02f      	b.n	8011784 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011724:	f107 030c 	add.w	r3, r7, #12
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f82e 	bl	801178c <SD_FindSCR>
 8011730:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	e023      	b.n	8011784 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011742:	2b00      	cmp	r3, #0
 8011744:	d01c      	beq.n	8011780 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801174e:	041b      	lsls	r3, r3, #16
 8011750:	4619      	mov	r1, r3
 8011752:	4610      	mov	r0, r2
 8011754:	f002 fe9b 	bl	801448e <SDMMC_CmdAppCommand>
 8011758:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	e00f      	b.n	8011784 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2100      	movs	r1, #0
 801176a:	4618      	mov	r0, r3
 801176c:	f002 fed2 	bl	8014514 <SDMMC_CmdBusWidth>
 8011770:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	e003      	b.n	8011784 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801177c:	2300      	movs	r3, #0
 801177e:	e001      	b.n	8011784 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011784:	4618      	mov	r0, r3
 8011786:	3718      	adds	r7, #24
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b08e      	sub	sp, #56	; 0x38
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011796:	f7f3 fd63 	bl	8005260 <HAL_GetTick>
 801179a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801179c:	2300      	movs	r3, #0
 801179e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80117a0:	2300      	movs	r3, #0
 80117a2:	60bb      	str	r3, [r7, #8]
 80117a4:	2300      	movs	r3, #0
 80117a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2108      	movs	r1, #8
 80117b2:	4618      	mov	r0, r3
 80117b4:	f002 fd1e 	bl	80141f4 <SDMMC_CmdBlockLength>
 80117b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80117ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d001      	beq.n	80117c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80117c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c2:	e0ad      	b.n	8011920 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117cc:	041b      	lsls	r3, r3, #16
 80117ce:	4619      	mov	r1, r3
 80117d0:	4610      	mov	r0, r2
 80117d2:	f002 fe5c 	bl	801448e <SDMMC_CmdAppCommand>
 80117d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80117d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d001      	beq.n	80117e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80117de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e0:	e09e      	b.n	8011920 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80117e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80117e8:	2308      	movs	r3, #8
 80117ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80117ec:	2330      	movs	r3, #48	; 0x30
 80117ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80117f0:	2302      	movs	r3, #2
 80117f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80117f8:	2301      	movs	r3, #1
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f107 0210 	add.w	r2, r7, #16
 8011804:	4611      	mov	r1, r2
 8011806:	4618      	mov	r0, r3
 8011808:	f002 fcc8 	bl	801419c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4618      	mov	r0, r3
 8011812:	f002 fea2 	bl	801455a <SDMMC_CmdSendSCR>
 8011816:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181a:	2b00      	cmp	r3, #0
 801181c:	d027      	beq.n	801186e <SD_FindSCR+0xe2>
  {
    return errorstate;
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	e07e      	b.n	8011920 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801182c:	2b00      	cmp	r3, #0
 801182e:	d113      	bne.n	8011858 <SD_FindSCR+0xcc>
 8011830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011832:	2b00      	cmp	r3, #0
 8011834:	d110      	bne.n	8011858 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4618      	mov	r0, r3
 801183c:	f002 fc26 	bl	801408c <SDMMC_ReadFIFO>
 8011840:	4603      	mov	r3, r0
 8011842:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4618      	mov	r0, r3
 801184a:	f002 fc1f 	bl	801408c <SDMMC_ReadFIFO>
 801184e:	4603      	mov	r3, r0
 8011850:	60fb      	str	r3, [r7, #12]
      index++;
 8011852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011854:	3301      	adds	r3, #1
 8011856:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011858:	f7f3 fd02 	bl	8005260 <HAL_GetTick>
 801185c:	4602      	mov	r2, r0
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011866:	d102      	bne.n	801186e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011868:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801186c:	e058      	b.n	8011920 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011874:	f240 532a 	movw	r3, #1322	; 0x52a
 8011878:	4013      	ands	r3, r2
 801187a:	2b00      	cmp	r3, #0
 801187c:	d0d1      	beq.n	8011822 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011884:	f003 0308 	and.w	r3, r3, #8
 8011888:	2b00      	cmp	r3, #0
 801188a:	d005      	beq.n	8011898 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2208      	movs	r2, #8
 8011892:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011894:	2308      	movs	r3, #8
 8011896:	e043      	b.n	8011920 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801189e:	f003 0302 	and.w	r3, r3, #2
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d005      	beq.n	80118b2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2202      	movs	r2, #2
 80118ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80118ae:	2302      	movs	r3, #2
 80118b0:	e036      	b.n	8011920 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b8:	f003 0320 	and.w	r3, r3, #32
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d005      	beq.n	80118cc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2220      	movs	r2, #32
 80118c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80118c8:	2320      	movs	r3, #32
 80118ca:	e029      	b.n	8011920 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a15      	ldr	r2, [pc, #84]	; (8011928 <SD_FindSCR+0x19c>)
 80118d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	061a      	lsls	r2, r3, #24
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	021b      	lsls	r3, r3, #8
 80118dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80118e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	0a1b      	lsrs	r3, r3, #8
 80118e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80118ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	0e1b      	lsrs	r3, r3, #24
 80118f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80118f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f4:	601a      	str	r2, [r3, #0]
    scr++;
 80118f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f8:	3304      	adds	r3, #4
 80118fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	061a      	lsls	r2, r3, #24
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	021b      	lsls	r3, r3, #8
 8011904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011908:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	0a1b      	lsrs	r3, r3, #8
 801190e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011912:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	0e1b      	lsrs	r3, r3, #24
 8011918:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801191e:	2300      	movs	r3, #0
}
 8011920:	4618      	mov	r0, r3
 8011922:	3738      	adds	r7, #56	; 0x38
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	18000f3a 	.word	0x18000f3a

0801192c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d101      	bne.n	8011940 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	e02b      	b.n	8011998 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	d106      	bne.n	801195a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2200      	movs	r2, #0
 8011950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7f1 f86b 	bl	8002a30 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2202      	movs	r2, #2
 801195e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3304      	adds	r3, #4
 801196a:	4619      	mov	r1, r3
 801196c:	4610      	mov	r0, r2
 801196e:	f002 fa61 	bl	8013e34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	461a      	mov	r2, r3
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	f002 fab5 	bl	8013eec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011982:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <HAL_SDRAM_Init+0x74>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a06      	ldr	r2, [pc, #24]	; (80119a0 <HAL_SDRAM_Init+0x74>)
 8011988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801198c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2201      	movs	r2, #1
 8011992:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	52004000 	.word	0x52004000

080119a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80119b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80119b8:	7dfb      	ldrb	r3, [r7, #23]
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d101      	bne.n	80119c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80119be:	2302      	movs	r3, #2
 80119c0:	e021      	b.n	8011a06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80119c2:	7dfb      	ldrb	r3, [r7, #23]
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d002      	beq.n	80119ce <HAL_SDRAM_SendCommand+0x2a>
 80119c8:	7dfb      	ldrb	r3, [r7, #23]
 80119ca:	2b05      	cmp	r3, #5
 80119cc:	d118      	bne.n	8011a00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2202      	movs	r2, #2
 80119d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	68b9      	ldr	r1, [r7, #8]
 80119de:	4618      	mov	r0, r3
 80119e0:	f002 faee 	bl	8013fc0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d104      	bne.n	80119f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2205      	movs	r2, #5
 80119f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80119f4:	e006      	b.n	8011a04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2201      	movs	r2, #1
 80119fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80119fe:	e001      	b.n	8011a04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011a00:	2301      	movs	r3, #1
 8011a02:	e000      	b.n	8011a06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3718      	adds	r7, #24
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b082      	sub	sp, #8
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d101      	bne.n	8011a28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011a24:	2302      	movs	r3, #2
 8011a26:	e016      	b.n	8011a56 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d10f      	bne.n	8011a54 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2202      	movs	r2, #2
 8011a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f002 fae0 	bl	8014008 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	e000      	b.n	8011a56 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011a54:	2301      	movs	r3, #1
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3708      	adds	r7, #8
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
	...

08011a60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e10f      	b.n	8011c92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4a87      	ldr	r2, [pc, #540]	; (8011c9c <HAL_SPI_Init+0x23c>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d00f      	beq.n	8011aa2 <HAL_SPI_Init+0x42>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4a86      	ldr	r2, [pc, #536]	; (8011ca0 <HAL_SPI_Init+0x240>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d00a      	beq.n	8011aa2 <HAL_SPI_Init+0x42>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	4a84      	ldr	r2, [pc, #528]	; (8011ca4 <HAL_SPI_Init+0x244>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d005      	beq.n	8011aa2 <HAL_SPI_Init+0x42>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	2b0f      	cmp	r3, #15
 8011a9c:	d901      	bls.n	8011aa2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e0f7      	b.n	8011c92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 f900 	bl	8011ca8 <SPI_GetPacketSize>
 8011aa8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4a7b      	ldr	r2, [pc, #492]	; (8011c9c <HAL_SPI_Init+0x23c>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d00c      	beq.n	8011ace <HAL_SPI_Init+0x6e>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4a79      	ldr	r2, [pc, #484]	; (8011ca0 <HAL_SPI_Init+0x240>)
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d007      	beq.n	8011ace <HAL_SPI_Init+0x6e>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a78      	ldr	r2, [pc, #480]	; (8011ca4 <HAL_SPI_Init+0x244>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d002      	beq.n	8011ace <HAL_SPI_Init+0x6e>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b08      	cmp	r3, #8
 8011acc:	d811      	bhi.n	8011af2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011ad2:	4a72      	ldr	r2, [pc, #456]	; (8011c9c <HAL_SPI_Init+0x23c>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d009      	beq.n	8011aec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4a70      	ldr	r2, [pc, #448]	; (8011ca0 <HAL_SPI_Init+0x240>)
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d004      	beq.n	8011aec <HAL_SPI_Init+0x8c>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4a6f      	ldr	r2, [pc, #444]	; (8011ca4 <HAL_SPI_Init+0x244>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d104      	bne.n	8011af6 <HAL_SPI_Init+0x96>
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2b10      	cmp	r3, #16
 8011af0:	d901      	bls.n	8011af6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	e0cd      	b.n	8011c92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d106      	bne.n	8011b10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2200      	movs	r2, #0
 8011b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7f1 ffa4 	bl	8003a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2202      	movs	r2, #2
 8011b14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f022 0201 	bic.w	r2, r2, #1
 8011b26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011b32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	699b      	ldr	r3, [r3, #24]
 8011b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011b3c:	d119      	bne.n	8011b72 <HAL_SPI_Init+0x112>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b46:	d103      	bne.n	8011b50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d008      	beq.n	8011b62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10c      	bne.n	8011b72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011b60:	d107      	bne.n	8011b72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011b70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00f      	beq.n	8011b9e <HAL_SPI_Init+0x13e>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	2b06      	cmp	r3, #6
 8011b84:	d90b      	bls.n	8011b9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	430a      	orrs	r2, r1
 8011b9a:	601a      	str	r2, [r3, #0]
 8011b9c:	e007      	b.n	8011bae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011bac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	69da      	ldr	r2, [r3, #28]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bb6:	431a      	orrs	r2, r3
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	431a      	orrs	r2, r3
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bc0:	ea42 0103 	orr.w	r1, r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	68da      	ldr	r2, [r3, #12]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	430a      	orrs	r2, r1
 8011bce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd8:	431a      	orrs	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bde:	431a      	orrs	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	699b      	ldr	r3, [r3, #24]
 8011be4:	431a      	orrs	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	691b      	ldr	r3, [r3, #16]
 8011bea:	431a      	orrs	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	695b      	ldr	r3, [r3, #20]
 8011bf0:	431a      	orrs	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	431a      	orrs	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	431a      	orrs	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c02:	431a      	orrs	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	689b      	ldr	r3, [r3, #8]
 8011c08:	431a      	orrs	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c0e:	ea42 0103 	orr.w	r1, r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	430a      	orrs	r2, r1
 8011c1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d113      	bne.n	8011c4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f022 0201 	bic.w	r2, r2, #1
 8011c5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00a      	beq.n	8011c80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	430a      	orrs	r2, r1
 8011c7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	40013000 	.word	0x40013000
 8011ca0:	40003800 	.word	0x40003800
 8011ca4:	40003c00 	.word	0x40003c00

08011ca8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cb4:	095b      	lsrs	r3, r3, #5
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	3307      	adds	r3, #7
 8011cc6:	08db      	lsrs	r3, r3, #3
 8011cc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	fb02 f303 	mul.w	r3, r2, r3
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3714      	adds	r7, #20
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b082      	sub	sp, #8
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011cec:	2301      	movs	r3, #1
 8011cee:	e049      	b.n	8011d84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d106      	bne.n	8011d0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f7f2 fa3f 	bl	8004188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2202      	movs	r2, #2
 8011d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3304      	adds	r3, #4
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f000 fa99 	bl	8012254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2201      	movs	r2, #1
 8011d26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2201      	movs	r2, #1
 8011d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2201      	movs	r2, #1
 8011d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2201      	movs	r2, #1
 8011d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d101      	bne.n	8011d9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e049      	b.n	8011e32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d106      	bne.n	8011db8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7f2 f9c6 	bl	8004144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2202      	movs	r2, #2
 8011dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	3304      	adds	r3, #4
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4610      	mov	r0, r2
 8011dcc:	f000 fa42 	bl	8012254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2201      	movs	r2, #1
 8011df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2201      	movs	r2, #1
 8011e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2201      	movs	r2, #1
 8011e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2201      	movs	r2, #1
 8011e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d101      	bne.n	8011e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011e56:	2302      	movs	r3, #2
 8011e58:	e0ff      	b.n	801205a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2b14      	cmp	r3, #20
 8011e66:	f200 80f0 	bhi.w	801204a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011e6a:	a201      	add	r2, pc, #4	; (adr r2, 8011e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e70:	08011ec5 	.word	0x08011ec5
 8011e74:	0801204b 	.word	0x0801204b
 8011e78:	0801204b 	.word	0x0801204b
 8011e7c:	0801204b 	.word	0x0801204b
 8011e80:	08011f05 	.word	0x08011f05
 8011e84:	0801204b 	.word	0x0801204b
 8011e88:	0801204b 	.word	0x0801204b
 8011e8c:	0801204b 	.word	0x0801204b
 8011e90:	08011f47 	.word	0x08011f47
 8011e94:	0801204b 	.word	0x0801204b
 8011e98:	0801204b 	.word	0x0801204b
 8011e9c:	0801204b 	.word	0x0801204b
 8011ea0:	08011f87 	.word	0x08011f87
 8011ea4:	0801204b 	.word	0x0801204b
 8011ea8:	0801204b 	.word	0x0801204b
 8011eac:	0801204b 	.word	0x0801204b
 8011eb0:	08011fc9 	.word	0x08011fc9
 8011eb4:	0801204b 	.word	0x0801204b
 8011eb8:	0801204b 	.word	0x0801204b
 8011ebc:	0801204b 	.word	0x0801204b
 8011ec0:	08012009 	.word	0x08012009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 fa5c 	bl	8012388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	699a      	ldr	r2, [r3, #24]
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f042 0208 	orr.w	r2, r2, #8
 8011ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	699a      	ldr	r2, [r3, #24]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f022 0204 	bic.w	r2, r2, #4
 8011eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6999      	ldr	r1, [r3, #24]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	691a      	ldr	r2, [r3, #16]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	430a      	orrs	r2, r1
 8011f00:	619a      	str	r2, [r3, #24]
      break;
 8011f02:	e0a5      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f000 facc 	bl	80124a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	699a      	ldr	r2, [r3, #24]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	699a      	ldr	r2, [r3, #24]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	6999      	ldr	r1, [r3, #24]
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	021a      	lsls	r2, r3, #8
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	430a      	orrs	r2, r1
 8011f42:	619a      	str	r2, [r3, #24]
      break;
 8011f44:	e084      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	68b9      	ldr	r1, [r7, #8]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 fb35 	bl	80125bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	69da      	ldr	r2, [r3, #28]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f042 0208 	orr.w	r2, r2, #8
 8011f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	69da      	ldr	r2, [r3, #28]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f022 0204 	bic.w	r2, r2, #4
 8011f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	69d9      	ldr	r1, [r3, #28]
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	691a      	ldr	r2, [r3, #16]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	61da      	str	r2, [r3, #28]
      break;
 8011f84:	e064      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	68b9      	ldr	r1, [r7, #8]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f000 fb9d 	bl	80126cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	69da      	ldr	r2, [r3, #28]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	69da      	ldr	r2, [r3, #28]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	69d9      	ldr	r1, [r3, #28]
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	691b      	ldr	r3, [r3, #16]
 8011fbc:	021a      	lsls	r2, r3, #8
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	430a      	orrs	r2, r1
 8011fc4:	61da      	str	r2, [r3, #28]
      break;
 8011fc6:	e043      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	68b9      	ldr	r1, [r7, #8]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 fbe6 	bl	80127a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f042 0208 	orr.w	r2, r2, #8
 8011fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f022 0204 	bic.w	r2, r2, #4
 8011ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	691a      	ldr	r2, [r3, #16]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	430a      	orrs	r2, r1
 8012004:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012006:	e023      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	68b9      	ldr	r1, [r7, #8]
 801200e:	4618      	mov	r0, r3
 8012010:	f000 fc2a 	bl	8012868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	021a      	lsls	r2, r3, #8
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	430a      	orrs	r2, r1
 8012046:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012048:	e002      	b.n	8012050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801204a:	2301      	movs	r3, #1
 801204c:	75fb      	strb	r3, [r7, #23]
      break;
 801204e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012058:	7dfb      	ldrb	r3, [r7, #23]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3718      	adds	r7, #24
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop

08012064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801206e:	2300      	movs	r3, #0
 8012070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012078:	2b01      	cmp	r3, #1
 801207a:	d101      	bne.n	8012080 <HAL_TIM_ConfigClockSource+0x1c>
 801207c:	2302      	movs	r3, #2
 801207e:	e0dc      	b.n	801223a <HAL_TIM_ConfigClockSource+0x1d6>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2201      	movs	r2, #1
 8012084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2202      	movs	r2, #2
 801208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	4b6a      	ldr	r3, [pc, #424]	; (8012244 <HAL_TIM_ConfigClockSource+0x1e0>)
 801209c:	4013      	ands	r3, r2
 801209e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80120a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	68ba      	ldr	r2, [r7, #8]
 80120ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a64      	ldr	r2, [pc, #400]	; (8012248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80120b6:	4293      	cmp	r3, r2
 80120b8:	f000 80a9 	beq.w	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 80120bc:	4a62      	ldr	r2, [pc, #392]	; (8012248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80120be:	4293      	cmp	r3, r2
 80120c0:	f200 80ae 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 80120c4:	4a61      	ldr	r2, [pc, #388]	; (801224c <HAL_TIM_ConfigClockSource+0x1e8>)
 80120c6:	4293      	cmp	r3, r2
 80120c8:	f000 80a1 	beq.w	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 80120cc:	4a5f      	ldr	r2, [pc, #380]	; (801224c <HAL_TIM_ConfigClockSource+0x1e8>)
 80120ce:	4293      	cmp	r3, r2
 80120d0:	f200 80a6 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 80120d4:	4a5e      	ldr	r2, [pc, #376]	; (8012250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	f000 8099 	beq.w	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 80120dc:	4a5c      	ldr	r2, [pc, #368]	; (8012250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	f200 809e 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 80120e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80120e8:	f000 8091 	beq.w	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 80120ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80120f0:	f200 8096 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 80120f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80120f8:	f000 8089 	beq.w	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 80120fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012100:	f200 808e 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012108:	d03e      	beq.n	8012188 <HAL_TIM_ConfigClockSource+0x124>
 801210a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801210e:	f200 8087 	bhi.w	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012116:	f000 8086 	beq.w	8012226 <HAL_TIM_ConfigClockSource+0x1c2>
 801211a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801211e:	d87f      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012120:	2b70      	cmp	r3, #112	; 0x70
 8012122:	d01a      	beq.n	801215a <HAL_TIM_ConfigClockSource+0xf6>
 8012124:	2b70      	cmp	r3, #112	; 0x70
 8012126:	d87b      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012128:	2b60      	cmp	r3, #96	; 0x60
 801212a:	d050      	beq.n	80121ce <HAL_TIM_ConfigClockSource+0x16a>
 801212c:	2b60      	cmp	r3, #96	; 0x60
 801212e:	d877      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012130:	2b50      	cmp	r3, #80	; 0x50
 8012132:	d03c      	beq.n	80121ae <HAL_TIM_ConfigClockSource+0x14a>
 8012134:	2b50      	cmp	r3, #80	; 0x50
 8012136:	d873      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012138:	2b40      	cmp	r3, #64	; 0x40
 801213a:	d058      	beq.n	80121ee <HAL_TIM_ConfigClockSource+0x18a>
 801213c:	2b40      	cmp	r3, #64	; 0x40
 801213e:	d86f      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012140:	2b30      	cmp	r3, #48	; 0x30
 8012142:	d064      	beq.n	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 8012144:	2b30      	cmp	r3, #48	; 0x30
 8012146:	d86b      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012148:	2b20      	cmp	r3, #32
 801214a:	d060      	beq.n	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 801214c:	2b20      	cmp	r3, #32
 801214e:	d867      	bhi.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
 8012150:	2b00      	cmp	r3, #0
 8012152:	d05c      	beq.n	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 8012154:	2b10      	cmp	r3, #16
 8012156:	d05a      	beq.n	801220e <HAL_TIM_ConfigClockSource+0x1aa>
 8012158:	e062      	b.n	8012220 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801216a:	f000 fc61 	bl	8012a30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	689b      	ldr	r3, [r3, #8]
 8012174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801217c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	68ba      	ldr	r2, [r7, #8]
 8012184:	609a      	str	r2, [r3, #8]
      break;
 8012186:	e04f      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012198:	f000 fc4a 	bl	8012a30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	689a      	ldr	r2, [r3, #8]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80121aa:	609a      	str	r2, [r3, #8]
      break;
 80121ac:	e03c      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80121ba:	461a      	mov	r2, r3
 80121bc:	f000 fbba 	bl	8012934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2150      	movs	r1, #80	; 0x50
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 fc14 	bl	80129f4 <TIM_ITRx_SetConfig>
      break;
 80121cc:	e02c      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80121da:	461a      	mov	r2, r3
 80121dc:	f000 fbd9 	bl	8012992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2160      	movs	r1, #96	; 0x60
 80121e6:	4618      	mov	r0, r3
 80121e8:	f000 fc04 	bl	80129f4 <TIM_ITRx_SetConfig>
      break;
 80121ec:	e01c      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80121fa:	461a      	mov	r2, r3
 80121fc:	f000 fb9a 	bl	8012934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2140      	movs	r1, #64	; 0x40
 8012206:	4618      	mov	r0, r3
 8012208:	f000 fbf4 	bl	80129f4 <TIM_ITRx_SetConfig>
      break;
 801220c:	e00c      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	4619      	mov	r1, r3
 8012218:	4610      	mov	r0, r2
 801221a:	f000 fbeb 	bl	80129f4 <TIM_ITRx_SetConfig>
      break;
 801221e:	e003      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012220:	2301      	movs	r3, #1
 8012222:	73fb      	strb	r3, [r7, #15]
      break;
 8012224:	e000      	b.n	8012228 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012238:	7bfb      	ldrb	r3, [r7, #15]
}
 801223a:	4618      	mov	r0, r3
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	ffceff88 	.word	0xffceff88
 8012248:	00100040 	.word	0x00100040
 801224c:	00100030 	.word	0x00100030
 8012250:	00100020 	.word	0x00100020

08012254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	4a40      	ldr	r2, [pc, #256]	; (8012368 <TIM_Base_SetConfig+0x114>)
 8012268:	4293      	cmp	r3, r2
 801226a:	d013      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012272:	d00f      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4a3d      	ldr	r2, [pc, #244]	; (801236c <TIM_Base_SetConfig+0x118>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d00b      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4a3c      	ldr	r2, [pc, #240]	; (8012370 <TIM_Base_SetConfig+0x11c>)
 8012280:	4293      	cmp	r3, r2
 8012282:	d007      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	4a3b      	ldr	r2, [pc, #236]	; (8012374 <TIM_Base_SetConfig+0x120>)
 8012288:	4293      	cmp	r3, r2
 801228a:	d003      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	4a3a      	ldr	r2, [pc, #232]	; (8012378 <TIM_Base_SetConfig+0x124>)
 8012290:	4293      	cmp	r3, r2
 8012292:	d108      	bne.n	80122a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	4313      	orrs	r3, r2
 80122a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4a2f      	ldr	r2, [pc, #188]	; (8012368 <TIM_Base_SetConfig+0x114>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d01f      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122b4:	d01b      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4a2c      	ldr	r2, [pc, #176]	; (801236c <TIM_Base_SetConfig+0x118>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d017      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a2b      	ldr	r2, [pc, #172]	; (8012370 <TIM_Base_SetConfig+0x11c>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d013      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a2a      	ldr	r2, [pc, #168]	; (8012374 <TIM_Base_SetConfig+0x120>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d00f      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a29      	ldr	r2, [pc, #164]	; (8012378 <TIM_Base_SetConfig+0x124>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d00b      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a28      	ldr	r2, [pc, #160]	; (801237c <TIM_Base_SetConfig+0x128>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d007      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4a27      	ldr	r2, [pc, #156]	; (8012380 <TIM_Base_SetConfig+0x12c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d003      	beq.n	80122ee <TIM_Base_SetConfig+0x9a>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4a26      	ldr	r2, [pc, #152]	; (8012384 <TIM_Base_SetConfig+0x130>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d108      	bne.n	8012300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	4313      	orrs	r3, r2
 80122fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	695b      	ldr	r3, [r3, #20]
 801230a:	4313      	orrs	r3, r2
 801230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	689a      	ldr	r2, [r3, #8]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	4a10      	ldr	r2, [pc, #64]	; (8012368 <TIM_Base_SetConfig+0x114>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d00f      	beq.n	801234c <TIM_Base_SetConfig+0xf8>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	4a12      	ldr	r2, [pc, #72]	; (8012378 <TIM_Base_SetConfig+0x124>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d00b      	beq.n	801234c <TIM_Base_SetConfig+0xf8>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4a11      	ldr	r2, [pc, #68]	; (801237c <TIM_Base_SetConfig+0x128>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d007      	beq.n	801234c <TIM_Base_SetConfig+0xf8>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4a10      	ldr	r2, [pc, #64]	; (8012380 <TIM_Base_SetConfig+0x12c>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d003      	beq.n	801234c <TIM_Base_SetConfig+0xf8>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a0f      	ldr	r2, [pc, #60]	; (8012384 <TIM_Base_SetConfig+0x130>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d103      	bne.n	8012354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	691a      	ldr	r2, [r3, #16]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	615a      	str	r2, [r3, #20]
}
 801235a:	bf00      	nop
 801235c:	3714      	adds	r7, #20
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	40010000 	.word	0x40010000
 801236c:	40000400 	.word	0x40000400
 8012370:	40000800 	.word	0x40000800
 8012374:	40000c00 	.word	0x40000c00
 8012378:	40010400 	.word	0x40010400
 801237c:	40014000 	.word	0x40014000
 8012380:	40014400 	.word	0x40014400
 8012384:	40014800 	.word	0x40014800

08012388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012388:	b480      	push	{r7}
 801238a:	b087      	sub	sp, #28
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6a1b      	ldr	r3, [r3, #32]
 8012396:	f023 0201 	bic.w	r2, r3, #1
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a1b      	ldr	r3, [r3, #32]
 80123a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	699b      	ldr	r3, [r3, #24]
 80123ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	4b37      	ldr	r3, [pc, #220]	; (8012490 <TIM_OC1_SetConfig+0x108>)
 80123b4:	4013      	ands	r3, r2
 80123b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f023 0303 	bic.w	r3, r3, #3
 80123be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	4313      	orrs	r3, r2
 80123c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	f023 0302 	bic.w	r3, r3, #2
 80123d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	697a      	ldr	r2, [r7, #20]
 80123d8:	4313      	orrs	r3, r2
 80123da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a2d      	ldr	r2, [pc, #180]	; (8012494 <TIM_OC1_SetConfig+0x10c>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d00f      	beq.n	8012404 <TIM_OC1_SetConfig+0x7c>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	4a2c      	ldr	r2, [pc, #176]	; (8012498 <TIM_OC1_SetConfig+0x110>)
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d00b      	beq.n	8012404 <TIM_OC1_SetConfig+0x7c>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4a2b      	ldr	r2, [pc, #172]	; (801249c <TIM_OC1_SetConfig+0x114>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d007      	beq.n	8012404 <TIM_OC1_SetConfig+0x7c>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	4a2a      	ldr	r2, [pc, #168]	; (80124a0 <TIM_OC1_SetConfig+0x118>)
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d003      	beq.n	8012404 <TIM_OC1_SetConfig+0x7c>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	4a29      	ldr	r2, [pc, #164]	; (80124a4 <TIM_OC1_SetConfig+0x11c>)
 8012400:	4293      	cmp	r3, r2
 8012402:	d10c      	bne.n	801241e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	f023 0308 	bic.w	r3, r3, #8
 801240a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	4313      	orrs	r3, r2
 8012414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	f023 0304 	bic.w	r3, r3, #4
 801241c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	4a1c      	ldr	r2, [pc, #112]	; (8012494 <TIM_OC1_SetConfig+0x10c>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d00f      	beq.n	8012446 <TIM_OC1_SetConfig+0xbe>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	4a1b      	ldr	r2, [pc, #108]	; (8012498 <TIM_OC1_SetConfig+0x110>)
 801242a:	4293      	cmp	r3, r2
 801242c:	d00b      	beq.n	8012446 <TIM_OC1_SetConfig+0xbe>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	4a1a      	ldr	r2, [pc, #104]	; (801249c <TIM_OC1_SetConfig+0x114>)
 8012432:	4293      	cmp	r3, r2
 8012434:	d007      	beq.n	8012446 <TIM_OC1_SetConfig+0xbe>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	4a19      	ldr	r2, [pc, #100]	; (80124a0 <TIM_OC1_SetConfig+0x118>)
 801243a:	4293      	cmp	r3, r2
 801243c:	d003      	beq.n	8012446 <TIM_OC1_SetConfig+0xbe>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	4a18      	ldr	r2, [pc, #96]	; (80124a4 <TIM_OC1_SetConfig+0x11c>)
 8012442:	4293      	cmp	r3, r2
 8012444:	d111      	bne.n	801246a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801244c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	695b      	ldr	r3, [r3, #20]
 801245a:	693a      	ldr	r2, [r7, #16]
 801245c:	4313      	orrs	r3, r2
 801245e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	699b      	ldr	r3, [r3, #24]
 8012464:	693a      	ldr	r2, [r7, #16]
 8012466:	4313      	orrs	r3, r2
 8012468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	693a      	ldr	r2, [r7, #16]
 801246e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	68fa      	ldr	r2, [r7, #12]
 8012474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	685a      	ldr	r2, [r3, #4]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	697a      	ldr	r2, [r7, #20]
 8012482:	621a      	str	r2, [r3, #32]
}
 8012484:	bf00      	nop
 8012486:	371c      	adds	r7, #28
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr
 8012490:	fffeff8f 	.word	0xfffeff8f
 8012494:	40010000 	.word	0x40010000
 8012498:	40010400 	.word	0x40010400
 801249c:	40014000 	.word	0x40014000
 80124a0:	40014400 	.word	0x40014400
 80124a4:	40014800 	.word	0x40014800

080124a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6a1b      	ldr	r3, [r3, #32]
 80124b6:	f023 0210 	bic.w	r2, r3, #16
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6a1b      	ldr	r3, [r3, #32]
 80124c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	699b      	ldr	r3, [r3, #24]
 80124ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80124d0:	68fa      	ldr	r2, [r7, #12]
 80124d2:	4b34      	ldr	r3, [pc, #208]	; (80125a4 <TIM_OC2_SetConfig+0xfc>)
 80124d4:	4013      	ands	r3, r2
 80124d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	021b      	lsls	r3, r3, #8
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f023 0320 	bic.w	r3, r3, #32
 80124f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	011b      	lsls	r3, r3, #4
 80124fa:	697a      	ldr	r2, [r7, #20]
 80124fc:	4313      	orrs	r3, r2
 80124fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4a29      	ldr	r2, [pc, #164]	; (80125a8 <TIM_OC2_SetConfig+0x100>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d003      	beq.n	8012510 <TIM_OC2_SetConfig+0x68>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	4a28      	ldr	r2, [pc, #160]	; (80125ac <TIM_OC2_SetConfig+0x104>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d10d      	bne.n	801252c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	011b      	lsls	r3, r3, #4
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	4313      	orrs	r3, r2
 8012522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801252a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4a1e      	ldr	r2, [pc, #120]	; (80125a8 <TIM_OC2_SetConfig+0x100>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d00f      	beq.n	8012554 <TIM_OC2_SetConfig+0xac>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	4a1d      	ldr	r2, [pc, #116]	; (80125ac <TIM_OC2_SetConfig+0x104>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d00b      	beq.n	8012554 <TIM_OC2_SetConfig+0xac>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	4a1c      	ldr	r2, [pc, #112]	; (80125b0 <TIM_OC2_SetConfig+0x108>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d007      	beq.n	8012554 <TIM_OC2_SetConfig+0xac>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	4a1b      	ldr	r2, [pc, #108]	; (80125b4 <TIM_OC2_SetConfig+0x10c>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d003      	beq.n	8012554 <TIM_OC2_SetConfig+0xac>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4a1a      	ldr	r2, [pc, #104]	; (80125b8 <TIM_OC2_SetConfig+0x110>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d113      	bne.n	801257c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801255a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	695b      	ldr	r3, [r3, #20]
 8012568:	009b      	lsls	r3, r3, #2
 801256a:	693a      	ldr	r2, [r7, #16]
 801256c:	4313      	orrs	r3, r2
 801256e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	699b      	ldr	r3, [r3, #24]
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	693a      	ldr	r2, [r7, #16]
 8012578:	4313      	orrs	r3, r2
 801257a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68fa      	ldr	r2, [r7, #12]
 8012586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	685a      	ldr	r2, [r3, #4]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	697a      	ldr	r2, [r7, #20]
 8012594:	621a      	str	r2, [r3, #32]
}
 8012596:	bf00      	nop
 8012598:	371c      	adds	r7, #28
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	feff8fff 	.word	0xfeff8fff
 80125a8:	40010000 	.word	0x40010000
 80125ac:	40010400 	.word	0x40010400
 80125b0:	40014000 	.word	0x40014000
 80125b4:	40014400 	.word	0x40014400
 80125b8:	40014800 	.word	0x40014800

080125bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80125bc:	b480      	push	{r7}
 80125be:	b087      	sub	sp, #28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6a1b      	ldr	r3, [r3, #32]
 80125d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	69db      	ldr	r3, [r3, #28]
 80125e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	4b33      	ldr	r3, [pc, #204]	; (80126b4 <TIM_OC3_SetConfig+0xf8>)
 80125e8:	4013      	ands	r3, r2
 80125ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f023 0303 	bic.w	r3, r3, #3
 80125f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	4313      	orrs	r3, r2
 80125fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	021b      	lsls	r3, r3, #8
 801260c:	697a      	ldr	r2, [r7, #20]
 801260e:	4313      	orrs	r3, r2
 8012610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4a28      	ldr	r2, [pc, #160]	; (80126b8 <TIM_OC3_SetConfig+0xfc>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d003      	beq.n	8012622 <TIM_OC3_SetConfig+0x66>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4a27      	ldr	r2, [pc, #156]	; (80126bc <TIM_OC3_SetConfig+0x100>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d10d      	bne.n	801263e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	021b      	lsls	r3, r3, #8
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	4313      	orrs	r3, r2
 8012634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801263c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	4a1d      	ldr	r2, [pc, #116]	; (80126b8 <TIM_OC3_SetConfig+0xfc>)
 8012642:	4293      	cmp	r3, r2
 8012644:	d00f      	beq.n	8012666 <TIM_OC3_SetConfig+0xaa>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	4a1c      	ldr	r2, [pc, #112]	; (80126bc <TIM_OC3_SetConfig+0x100>)
 801264a:	4293      	cmp	r3, r2
 801264c:	d00b      	beq.n	8012666 <TIM_OC3_SetConfig+0xaa>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	4a1b      	ldr	r2, [pc, #108]	; (80126c0 <TIM_OC3_SetConfig+0x104>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d007      	beq.n	8012666 <TIM_OC3_SetConfig+0xaa>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4a1a      	ldr	r2, [pc, #104]	; (80126c4 <TIM_OC3_SetConfig+0x108>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d003      	beq.n	8012666 <TIM_OC3_SetConfig+0xaa>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4a19      	ldr	r2, [pc, #100]	; (80126c8 <TIM_OC3_SetConfig+0x10c>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d113      	bne.n	801268e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801266c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	695b      	ldr	r3, [r3, #20]
 801267a:	011b      	lsls	r3, r3, #4
 801267c:	693a      	ldr	r2, [r7, #16]
 801267e:	4313      	orrs	r3, r2
 8012680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	699b      	ldr	r3, [r3, #24]
 8012686:	011b      	lsls	r3, r3, #4
 8012688:	693a      	ldr	r2, [r7, #16]
 801268a:	4313      	orrs	r3, r2
 801268c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	697a      	ldr	r2, [r7, #20]
 80126a6:	621a      	str	r2, [r3, #32]
}
 80126a8:	bf00      	nop
 80126aa:	371c      	adds	r7, #28
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	fffeff8f 	.word	0xfffeff8f
 80126b8:	40010000 	.word	0x40010000
 80126bc:	40010400 	.word	0x40010400
 80126c0:	40014000 	.word	0x40014000
 80126c4:	40014400 	.word	0x40014400
 80126c8:	40014800 	.word	0x40014800

080126cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126cc:	b480      	push	{r7}
 80126ce:	b087      	sub	sp, #28
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a1b      	ldr	r3, [r3, #32]
 80126da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	69db      	ldr	r3, [r3, #28]
 80126f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	4b24      	ldr	r3, [pc, #144]	; (8012788 <TIM_OC4_SetConfig+0xbc>)
 80126f8:	4013      	ands	r3, r2
 80126fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	021b      	lsls	r3, r3, #8
 801270a:	68fa      	ldr	r2, [r7, #12]
 801270c:	4313      	orrs	r3, r2
 801270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	031b      	lsls	r3, r3, #12
 801271e:	693a      	ldr	r2, [r7, #16]
 8012720:	4313      	orrs	r3, r2
 8012722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4a19      	ldr	r2, [pc, #100]	; (801278c <TIM_OC4_SetConfig+0xc0>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d00f      	beq.n	801274c <TIM_OC4_SetConfig+0x80>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	4a18      	ldr	r2, [pc, #96]	; (8012790 <TIM_OC4_SetConfig+0xc4>)
 8012730:	4293      	cmp	r3, r2
 8012732:	d00b      	beq.n	801274c <TIM_OC4_SetConfig+0x80>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	4a17      	ldr	r2, [pc, #92]	; (8012794 <TIM_OC4_SetConfig+0xc8>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d007      	beq.n	801274c <TIM_OC4_SetConfig+0x80>
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	4a16      	ldr	r2, [pc, #88]	; (8012798 <TIM_OC4_SetConfig+0xcc>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d003      	beq.n	801274c <TIM_OC4_SetConfig+0x80>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	4a15      	ldr	r2, [pc, #84]	; (801279c <TIM_OC4_SetConfig+0xd0>)
 8012748:	4293      	cmp	r3, r2
 801274a:	d109      	bne.n	8012760 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	695b      	ldr	r3, [r3, #20]
 8012758:	019b      	lsls	r3, r3, #6
 801275a:	697a      	ldr	r2, [r7, #20]
 801275c:	4313      	orrs	r3, r2
 801275e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	697a      	ldr	r2, [r7, #20]
 8012764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	685a      	ldr	r2, [r3, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	693a      	ldr	r2, [r7, #16]
 8012778:	621a      	str	r2, [r3, #32]
}
 801277a:	bf00      	nop
 801277c:	371c      	adds	r7, #28
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	feff8fff 	.word	0xfeff8fff
 801278c:	40010000 	.word	0x40010000
 8012790:	40010400 	.word	0x40010400
 8012794:	40014000 	.word	0x40014000
 8012798:	40014400 	.word	0x40014400
 801279c:	40014800 	.word	0x40014800

080127a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b087      	sub	sp, #28
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6a1b      	ldr	r3, [r3, #32]
 80127ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	4b21      	ldr	r3, [pc, #132]	; (8012850 <TIM_OC5_SetConfig+0xb0>)
 80127cc:	4013      	ands	r3, r2
 80127ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	4313      	orrs	r3, r2
 80127d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80127e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	041b      	lsls	r3, r3, #16
 80127e8:	693a      	ldr	r2, [r7, #16]
 80127ea:	4313      	orrs	r3, r2
 80127ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4a18      	ldr	r2, [pc, #96]	; (8012854 <TIM_OC5_SetConfig+0xb4>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d00f      	beq.n	8012816 <TIM_OC5_SetConfig+0x76>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a17      	ldr	r2, [pc, #92]	; (8012858 <TIM_OC5_SetConfig+0xb8>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d00b      	beq.n	8012816 <TIM_OC5_SetConfig+0x76>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4a16      	ldr	r2, [pc, #88]	; (801285c <TIM_OC5_SetConfig+0xbc>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d007      	beq.n	8012816 <TIM_OC5_SetConfig+0x76>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4a15      	ldr	r2, [pc, #84]	; (8012860 <TIM_OC5_SetConfig+0xc0>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d003      	beq.n	8012816 <TIM_OC5_SetConfig+0x76>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4a14      	ldr	r2, [pc, #80]	; (8012864 <TIM_OC5_SetConfig+0xc4>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d109      	bne.n	801282a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801281c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	695b      	ldr	r3, [r3, #20]
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	697a      	ldr	r2, [r7, #20]
 8012826:	4313      	orrs	r3, r2
 8012828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	693a      	ldr	r2, [r7, #16]
 8012842:	621a      	str	r2, [r3, #32]
}
 8012844:	bf00      	nop
 8012846:	371c      	adds	r7, #28
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr
 8012850:	fffeff8f 	.word	0xfffeff8f
 8012854:	40010000 	.word	0x40010000
 8012858:	40010400 	.word	0x40010400
 801285c:	40014000 	.word	0x40014000
 8012860:	40014400 	.word	0x40014400
 8012864:	40014800 	.word	0x40014800

08012868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012868:	b480      	push	{r7}
 801286a:	b087      	sub	sp, #28
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6a1b      	ldr	r3, [r3, #32]
 8012876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6a1b      	ldr	r3, [r3, #32]
 8012882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	4b22      	ldr	r3, [pc, #136]	; (801291c <TIM_OC6_SetConfig+0xb4>)
 8012894:	4013      	ands	r3, r2
 8012896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	021b      	lsls	r3, r3, #8
 801289e:	68fa      	ldr	r2, [r7, #12]
 80128a0:	4313      	orrs	r3, r2
 80128a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80128a4:	693b      	ldr	r3, [r7, #16]
 80128a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80128aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	051b      	lsls	r3, r3, #20
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	4313      	orrs	r3, r2
 80128b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4a19      	ldr	r2, [pc, #100]	; (8012920 <TIM_OC6_SetConfig+0xb8>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d00f      	beq.n	80128e0 <TIM_OC6_SetConfig+0x78>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4a18      	ldr	r2, [pc, #96]	; (8012924 <TIM_OC6_SetConfig+0xbc>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d00b      	beq.n	80128e0 <TIM_OC6_SetConfig+0x78>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4a17      	ldr	r2, [pc, #92]	; (8012928 <TIM_OC6_SetConfig+0xc0>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d007      	beq.n	80128e0 <TIM_OC6_SetConfig+0x78>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4a16      	ldr	r2, [pc, #88]	; (801292c <TIM_OC6_SetConfig+0xc4>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d003      	beq.n	80128e0 <TIM_OC6_SetConfig+0x78>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4a15      	ldr	r2, [pc, #84]	; (8012930 <TIM_OC6_SetConfig+0xc8>)
 80128dc:	4293      	cmp	r3, r2
 80128de:	d109      	bne.n	80128f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80128e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	695b      	ldr	r3, [r3, #20]
 80128ec:	029b      	lsls	r3, r3, #10
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	697a      	ldr	r2, [r7, #20]
 80128f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	685a      	ldr	r2, [r3, #4]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	693a      	ldr	r2, [r7, #16]
 801290c:	621a      	str	r2, [r3, #32]
}
 801290e:	bf00      	nop
 8012910:	371c      	adds	r7, #28
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	feff8fff 	.word	0xfeff8fff
 8012920:	40010000 	.word	0x40010000
 8012924:	40010400 	.word	0x40010400
 8012928:	40014000 	.word	0x40014000
 801292c:	40014400 	.word	0x40014400
 8012930:	40014800 	.word	0x40014800

08012934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012934:	b480      	push	{r7}
 8012936:	b087      	sub	sp, #28
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	6a1b      	ldr	r3, [r3, #32]
 8012944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6a1b      	ldr	r3, [r3, #32]
 801294a:	f023 0201 	bic.w	r2, r3, #1
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	699b      	ldr	r3, [r3, #24]
 8012956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	011b      	lsls	r3, r3, #4
 8012964:	693a      	ldr	r2, [r7, #16]
 8012966:	4313      	orrs	r3, r2
 8012968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	f023 030a 	bic.w	r3, r3, #10
 8012970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	4313      	orrs	r3, r2
 8012978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	697a      	ldr	r2, [r7, #20]
 8012984:	621a      	str	r2, [r3, #32]
}
 8012986:	bf00      	nop
 8012988:	371c      	adds	r7, #28
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012992:	b480      	push	{r7}
 8012994:	b087      	sub	sp, #28
 8012996:	af00      	add	r7, sp, #0
 8012998:	60f8      	str	r0, [r7, #12]
 801299a:	60b9      	str	r1, [r7, #8]
 801299c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6a1b      	ldr	r3, [r3, #32]
 80129a2:	f023 0210 	bic.w	r2, r3, #16
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	699b      	ldr	r3, [r3, #24]
 80129ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	6a1b      	ldr	r3, [r3, #32]
 80129b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80129bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	031b      	lsls	r3, r3, #12
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	4313      	orrs	r3, r2
 80129c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80129ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	011b      	lsls	r3, r3, #4
 80129d4:	693a      	ldr	r2, [r7, #16]
 80129d6:	4313      	orrs	r3, r2
 80129d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	697a      	ldr	r2, [r7, #20]
 80129de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	693a      	ldr	r2, [r7, #16]
 80129e4:	621a      	str	r2, [r3, #32]
}
 80129e6:	bf00      	nop
 80129e8:	371c      	adds	r7, #28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
	...

080129f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a04:	68fa      	ldr	r2, [r7, #12]
 8012a06:	4b09      	ldr	r3, [pc, #36]	; (8012a2c <TIM_ITRx_SetConfig+0x38>)
 8012a08:	4013      	ands	r3, r2
 8012a0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a0c:	683a      	ldr	r2, [r7, #0]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	4313      	orrs	r3, r2
 8012a12:	f043 0307 	orr.w	r3, r3, #7
 8012a16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	609a      	str	r2, [r3, #8]
}
 8012a1e:	bf00      	nop
 8012a20:	3714      	adds	r7, #20
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	ffcfff8f 	.word	0xffcfff8f

08012a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b087      	sub	sp, #28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	689b      	ldr	r3, [r3, #8]
 8012a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	021a      	lsls	r2, r3, #8
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	431a      	orrs	r2, r3
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	4313      	orrs	r3, r2
 8012a58:	697a      	ldr	r2, [r7, #20]
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	697a      	ldr	r2, [r7, #20]
 8012a62:	609a      	str	r2, [r3, #8]
}
 8012a64:	bf00      	nop
 8012a66:	371c      	adds	r7, #28
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d101      	bne.n	8012a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012a84:	2302      	movs	r3, #2
 8012a86:	e06d      	b.n	8012b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2202      	movs	r2, #2
 8012a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	689b      	ldr	r3, [r3, #8]
 8012aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a30      	ldr	r2, [pc, #192]	; (8012b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d004      	beq.n	8012abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a2f      	ldr	r2, [pc, #188]	; (8012b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d108      	bne.n	8012ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	4313      	orrs	r3, r2
 8012acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ad4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	68fa      	ldr	r2, [r7, #12]
 8012adc:	4313      	orrs	r3, r2
 8012ade:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a20      	ldr	r2, [pc, #128]	; (8012b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d022      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012afa:	d01d      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a1d      	ldr	r2, [pc, #116]	; (8012b78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d018      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a1c      	ldr	r2, [pc, #112]	; (8012b7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d013      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a1a      	ldr	r2, [pc, #104]	; (8012b80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d00e      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a15      	ldr	r2, [pc, #84]	; (8012b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d009      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a16      	ldr	r2, [pc, #88]	; (8012b84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d004      	beq.n	8012b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a15      	ldr	r2, [pc, #84]	; (8012b88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d10c      	bne.n	8012b52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	689b      	ldr	r3, [r3, #8]
 8012b44:	68ba      	ldr	r2, [r7, #8]
 8012b46:	4313      	orrs	r3, r2
 8012b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2201      	movs	r2, #1
 8012b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012b62:	2300      	movs	r3, #0
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr
 8012b70:	40010000 	.word	0x40010000
 8012b74:	40010400 	.word	0x40010400
 8012b78:	40000400 	.word	0x40000400
 8012b7c:	40000800 	.word	0x40000800
 8012b80:	40000c00 	.word	0x40000c00
 8012b84:	40001800 	.word	0x40001800
 8012b88:	40014000 	.word	0x40014000

08012b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012b96:	2300      	movs	r3, #0
 8012b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d101      	bne.n	8012ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012ba4:	2302      	movs	r3, #2
 8012ba6:	e065      	b.n	8012c74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2201      	movs	r2, #1
 8012bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	4313      	orrs	r3, r2
 8012bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	4313      	orrs	r3, r2
 8012bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4313      	orrs	r3, r2
 8012be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	691b      	ldr	r3, [r3, #16]
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	695b      	ldr	r3, [r3, #20]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c0e:	4313      	orrs	r3, r2
 8012c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	699b      	ldr	r3, [r3, #24]
 8012c1c:	041b      	lsls	r3, r3, #16
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a16      	ldr	r2, [pc, #88]	; (8012c80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d004      	beq.n	8012c36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a14      	ldr	r2, [pc, #80]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d115      	bne.n	8012c62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c40:	051b      	lsls	r3, r3, #20
 8012c42:	4313      	orrs	r3, r2
 8012c44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	69db      	ldr	r3, [r3, #28]
 8012c50:	4313      	orrs	r3, r2
 8012c52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	6a1b      	ldr	r3, [r3, #32]
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c72:	2300      	movs	r3, #0
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	40010000 	.word	0x40010000
 8012c84:	40010400 	.word	0x40010400

08012c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d101      	bne.n	8012c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012c96:	2301      	movs	r3, #1
 8012c98:	e042      	b.n	8012d20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d106      	bne.n	8012cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f7f1 fb93 	bl	80043d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2224      	movs	r2, #36	; 0x24
 8012cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f022 0201 	bic.w	r2, r2, #1
 8012cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 f82c 	bl	8012d28 <UART_SetConfig>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d101      	bne.n	8012cda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	e022      	b.n	8012d20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d002      	beq.n	8012ce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 fd88 	bl	80137f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	685a      	ldr	r2, [r3, #4]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	689a      	ldr	r2, [r3, #8]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f042 0201 	orr.w	r2, r2, #1
 8012d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 fe0f 	bl	801393c <UART_CheckIdleState>
 8012d1e:	4603      	mov	r3, r0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d2c:	b092      	sub	sp, #72	; 0x48
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d32:	2300      	movs	r3, #0
 8012d34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	689a      	ldr	r2, [r3, #8]
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	691b      	ldr	r3, [r3, #16]
 8012d40:	431a      	orrs	r2, r3
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	695b      	ldr	r3, [r3, #20]
 8012d46:	431a      	orrs	r2, r3
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	69db      	ldr	r3, [r3, #28]
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	4bbe      	ldr	r3, [pc, #760]	; (8013050 <UART_SetConfig+0x328>)
 8012d58:	4013      	ands	r3, r2
 8012d5a:	697a      	ldr	r2, [r7, #20]
 8012d5c:	6812      	ldr	r2, [r2, #0]
 8012d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d60:	430b      	orrs	r3, r1
 8012d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	68da      	ldr	r2, [r3, #12]
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	430a      	orrs	r2, r1
 8012d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	699b      	ldr	r3, [r3, #24]
 8012d7e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4ab3      	ldr	r2, [pc, #716]	; (8013054 <UART_SetConfig+0x32c>)
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d004      	beq.n	8012d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	6a1b      	ldr	r3, [r3, #32]
 8012d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d90:	4313      	orrs	r3, r2
 8012d92:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	689a      	ldr	r2, [r3, #8]
 8012d9a:	4baf      	ldr	r3, [pc, #700]	; (8013058 <UART_SetConfig+0x330>)
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	697a      	ldr	r2, [r7, #20]
 8012da0:	6812      	ldr	r2, [r2, #0]
 8012da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012da4:	430b      	orrs	r3, r1
 8012da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dae:	f023 010f 	bic.w	r1, r3, #15
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	430a      	orrs	r2, r1
 8012dbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4aa6      	ldr	r2, [pc, #664]	; (801305c <UART_SetConfig+0x334>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d177      	bne.n	8012eb8 <UART_SetConfig+0x190>
 8012dc8:	4ba5      	ldr	r3, [pc, #660]	; (8013060 <UART_SetConfig+0x338>)
 8012dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012dd0:	2b28      	cmp	r3, #40	; 0x28
 8012dd2:	d86d      	bhi.n	8012eb0 <UART_SetConfig+0x188>
 8012dd4:	a201      	add	r2, pc, #4	; (adr r2, 8012ddc <UART_SetConfig+0xb4>)
 8012dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dda:	bf00      	nop
 8012ddc:	08012e81 	.word	0x08012e81
 8012de0:	08012eb1 	.word	0x08012eb1
 8012de4:	08012eb1 	.word	0x08012eb1
 8012de8:	08012eb1 	.word	0x08012eb1
 8012dec:	08012eb1 	.word	0x08012eb1
 8012df0:	08012eb1 	.word	0x08012eb1
 8012df4:	08012eb1 	.word	0x08012eb1
 8012df8:	08012eb1 	.word	0x08012eb1
 8012dfc:	08012e89 	.word	0x08012e89
 8012e00:	08012eb1 	.word	0x08012eb1
 8012e04:	08012eb1 	.word	0x08012eb1
 8012e08:	08012eb1 	.word	0x08012eb1
 8012e0c:	08012eb1 	.word	0x08012eb1
 8012e10:	08012eb1 	.word	0x08012eb1
 8012e14:	08012eb1 	.word	0x08012eb1
 8012e18:	08012eb1 	.word	0x08012eb1
 8012e1c:	08012e91 	.word	0x08012e91
 8012e20:	08012eb1 	.word	0x08012eb1
 8012e24:	08012eb1 	.word	0x08012eb1
 8012e28:	08012eb1 	.word	0x08012eb1
 8012e2c:	08012eb1 	.word	0x08012eb1
 8012e30:	08012eb1 	.word	0x08012eb1
 8012e34:	08012eb1 	.word	0x08012eb1
 8012e38:	08012eb1 	.word	0x08012eb1
 8012e3c:	08012e99 	.word	0x08012e99
 8012e40:	08012eb1 	.word	0x08012eb1
 8012e44:	08012eb1 	.word	0x08012eb1
 8012e48:	08012eb1 	.word	0x08012eb1
 8012e4c:	08012eb1 	.word	0x08012eb1
 8012e50:	08012eb1 	.word	0x08012eb1
 8012e54:	08012eb1 	.word	0x08012eb1
 8012e58:	08012eb1 	.word	0x08012eb1
 8012e5c:	08012ea1 	.word	0x08012ea1
 8012e60:	08012eb1 	.word	0x08012eb1
 8012e64:	08012eb1 	.word	0x08012eb1
 8012e68:	08012eb1 	.word	0x08012eb1
 8012e6c:	08012eb1 	.word	0x08012eb1
 8012e70:	08012eb1 	.word	0x08012eb1
 8012e74:	08012eb1 	.word	0x08012eb1
 8012e78:	08012eb1 	.word	0x08012eb1
 8012e7c:	08012ea9 	.word	0x08012ea9
 8012e80:	2301      	movs	r3, #1
 8012e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e86:	e222      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012e88:	2304      	movs	r3, #4
 8012e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e8e:	e21e      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012e90:	2308      	movs	r3, #8
 8012e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e96:	e21a      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012e98:	2310      	movs	r3, #16
 8012e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e9e:	e216      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012ea0:	2320      	movs	r3, #32
 8012ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ea6:	e212      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012ea8:	2340      	movs	r3, #64	; 0x40
 8012eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eae:	e20e      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012eb0:	2380      	movs	r3, #128	; 0x80
 8012eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb6:	e20a      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a69      	ldr	r2, [pc, #420]	; (8013064 <UART_SetConfig+0x33c>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d130      	bne.n	8012f24 <UART_SetConfig+0x1fc>
 8012ec2:	4b67      	ldr	r3, [pc, #412]	; (8013060 <UART_SetConfig+0x338>)
 8012ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ec6:	f003 0307 	and.w	r3, r3, #7
 8012eca:	2b05      	cmp	r3, #5
 8012ecc:	d826      	bhi.n	8012f1c <UART_SetConfig+0x1f4>
 8012ece:	a201      	add	r2, pc, #4	; (adr r2, 8012ed4 <UART_SetConfig+0x1ac>)
 8012ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed4:	08012eed 	.word	0x08012eed
 8012ed8:	08012ef5 	.word	0x08012ef5
 8012edc:	08012efd 	.word	0x08012efd
 8012ee0:	08012f05 	.word	0x08012f05
 8012ee4:	08012f0d 	.word	0x08012f0d
 8012ee8:	08012f15 	.word	0x08012f15
 8012eec:	2300      	movs	r3, #0
 8012eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ef2:	e1ec      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012ef4:	2304      	movs	r3, #4
 8012ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012efa:	e1e8      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012efc:	2308      	movs	r3, #8
 8012efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f02:	e1e4      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f04:	2310      	movs	r3, #16
 8012f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0a:	e1e0      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f0c:	2320      	movs	r3, #32
 8012f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f12:	e1dc      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f14:	2340      	movs	r3, #64	; 0x40
 8012f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1a:	e1d8      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f1c:	2380      	movs	r3, #128	; 0x80
 8012f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f22:	e1d4      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a4f      	ldr	r2, [pc, #316]	; (8013068 <UART_SetConfig+0x340>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d130      	bne.n	8012f90 <UART_SetConfig+0x268>
 8012f2e:	4b4c      	ldr	r3, [pc, #304]	; (8013060 <UART_SetConfig+0x338>)
 8012f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f32:	f003 0307 	and.w	r3, r3, #7
 8012f36:	2b05      	cmp	r3, #5
 8012f38:	d826      	bhi.n	8012f88 <UART_SetConfig+0x260>
 8012f3a:	a201      	add	r2, pc, #4	; (adr r2, 8012f40 <UART_SetConfig+0x218>)
 8012f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f40:	08012f59 	.word	0x08012f59
 8012f44:	08012f61 	.word	0x08012f61
 8012f48:	08012f69 	.word	0x08012f69
 8012f4c:	08012f71 	.word	0x08012f71
 8012f50:	08012f79 	.word	0x08012f79
 8012f54:	08012f81 	.word	0x08012f81
 8012f58:	2300      	movs	r3, #0
 8012f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f5e:	e1b6      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f60:	2304      	movs	r3, #4
 8012f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f66:	e1b2      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f68:	2308      	movs	r3, #8
 8012f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f6e:	e1ae      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f70:	2310      	movs	r3, #16
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f76:	e1aa      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f78:	2320      	movs	r3, #32
 8012f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f7e:	e1a6      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f80:	2340      	movs	r3, #64	; 0x40
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f86:	e1a2      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f88:	2380      	movs	r3, #128	; 0x80
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8e:	e19e      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4a35      	ldr	r2, [pc, #212]	; (801306c <UART_SetConfig+0x344>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d130      	bne.n	8012ffc <UART_SetConfig+0x2d4>
 8012f9a:	4b31      	ldr	r3, [pc, #196]	; (8013060 <UART_SetConfig+0x338>)
 8012f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f9e:	f003 0307 	and.w	r3, r3, #7
 8012fa2:	2b05      	cmp	r3, #5
 8012fa4:	d826      	bhi.n	8012ff4 <UART_SetConfig+0x2cc>
 8012fa6:	a201      	add	r2, pc, #4	; (adr r2, 8012fac <UART_SetConfig+0x284>)
 8012fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fac:	08012fc5 	.word	0x08012fc5
 8012fb0:	08012fcd 	.word	0x08012fcd
 8012fb4:	08012fd5 	.word	0x08012fd5
 8012fb8:	08012fdd 	.word	0x08012fdd
 8012fbc:	08012fe5 	.word	0x08012fe5
 8012fc0:	08012fed 	.word	0x08012fed
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fca:	e180      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012fcc:	2304      	movs	r3, #4
 8012fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fd2:	e17c      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012fd4:	2308      	movs	r3, #8
 8012fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fda:	e178      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012fdc:	2310      	movs	r3, #16
 8012fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fe2:	e174      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012fe4:	2320      	movs	r3, #32
 8012fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fea:	e170      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012fec:	2340      	movs	r3, #64	; 0x40
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff2:	e16c      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012ff4:	2380      	movs	r3, #128	; 0x80
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ffa:	e168      	b.n	80132ce <UART_SetConfig+0x5a6>
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4a1b      	ldr	r2, [pc, #108]	; (8013070 <UART_SetConfig+0x348>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d142      	bne.n	801308c <UART_SetConfig+0x364>
 8013006:	4b16      	ldr	r3, [pc, #88]	; (8013060 <UART_SetConfig+0x338>)
 8013008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801300a:	f003 0307 	and.w	r3, r3, #7
 801300e:	2b05      	cmp	r3, #5
 8013010:	d838      	bhi.n	8013084 <UART_SetConfig+0x35c>
 8013012:	a201      	add	r2, pc, #4	; (adr r2, 8013018 <UART_SetConfig+0x2f0>)
 8013014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013018:	08013031 	.word	0x08013031
 801301c:	08013039 	.word	0x08013039
 8013020:	08013041 	.word	0x08013041
 8013024:	08013049 	.word	0x08013049
 8013028:	08013075 	.word	0x08013075
 801302c:	0801307d 	.word	0x0801307d
 8013030:	2300      	movs	r3, #0
 8013032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013036:	e14a      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013038:	2304      	movs	r3, #4
 801303a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801303e:	e146      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013040:	2308      	movs	r3, #8
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013046:	e142      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013048:	2310      	movs	r3, #16
 801304a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801304e:	e13e      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013050:	cfff69f3 	.word	0xcfff69f3
 8013054:	58000c00 	.word	0x58000c00
 8013058:	11fff4ff 	.word	0x11fff4ff
 801305c:	40011000 	.word	0x40011000
 8013060:	58024400 	.word	0x58024400
 8013064:	40004400 	.word	0x40004400
 8013068:	40004800 	.word	0x40004800
 801306c:	40004c00 	.word	0x40004c00
 8013070:	40005000 	.word	0x40005000
 8013074:	2320      	movs	r3, #32
 8013076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801307a:	e128      	b.n	80132ce <UART_SetConfig+0x5a6>
 801307c:	2340      	movs	r3, #64	; 0x40
 801307e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013082:	e124      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013084:	2380      	movs	r3, #128	; 0x80
 8013086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801308a:	e120      	b.n	80132ce <UART_SetConfig+0x5a6>
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4acb      	ldr	r2, [pc, #812]	; (80133c0 <UART_SetConfig+0x698>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d176      	bne.n	8013184 <UART_SetConfig+0x45c>
 8013096:	4bcb      	ldr	r3, [pc, #812]	; (80133c4 <UART_SetConfig+0x69c>)
 8013098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801309e:	2b28      	cmp	r3, #40	; 0x28
 80130a0:	d86c      	bhi.n	801317c <UART_SetConfig+0x454>
 80130a2:	a201      	add	r2, pc, #4	; (adr r2, 80130a8 <UART_SetConfig+0x380>)
 80130a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a8:	0801314d 	.word	0x0801314d
 80130ac:	0801317d 	.word	0x0801317d
 80130b0:	0801317d 	.word	0x0801317d
 80130b4:	0801317d 	.word	0x0801317d
 80130b8:	0801317d 	.word	0x0801317d
 80130bc:	0801317d 	.word	0x0801317d
 80130c0:	0801317d 	.word	0x0801317d
 80130c4:	0801317d 	.word	0x0801317d
 80130c8:	08013155 	.word	0x08013155
 80130cc:	0801317d 	.word	0x0801317d
 80130d0:	0801317d 	.word	0x0801317d
 80130d4:	0801317d 	.word	0x0801317d
 80130d8:	0801317d 	.word	0x0801317d
 80130dc:	0801317d 	.word	0x0801317d
 80130e0:	0801317d 	.word	0x0801317d
 80130e4:	0801317d 	.word	0x0801317d
 80130e8:	0801315d 	.word	0x0801315d
 80130ec:	0801317d 	.word	0x0801317d
 80130f0:	0801317d 	.word	0x0801317d
 80130f4:	0801317d 	.word	0x0801317d
 80130f8:	0801317d 	.word	0x0801317d
 80130fc:	0801317d 	.word	0x0801317d
 8013100:	0801317d 	.word	0x0801317d
 8013104:	0801317d 	.word	0x0801317d
 8013108:	08013165 	.word	0x08013165
 801310c:	0801317d 	.word	0x0801317d
 8013110:	0801317d 	.word	0x0801317d
 8013114:	0801317d 	.word	0x0801317d
 8013118:	0801317d 	.word	0x0801317d
 801311c:	0801317d 	.word	0x0801317d
 8013120:	0801317d 	.word	0x0801317d
 8013124:	0801317d 	.word	0x0801317d
 8013128:	0801316d 	.word	0x0801316d
 801312c:	0801317d 	.word	0x0801317d
 8013130:	0801317d 	.word	0x0801317d
 8013134:	0801317d 	.word	0x0801317d
 8013138:	0801317d 	.word	0x0801317d
 801313c:	0801317d 	.word	0x0801317d
 8013140:	0801317d 	.word	0x0801317d
 8013144:	0801317d 	.word	0x0801317d
 8013148:	08013175 	.word	0x08013175
 801314c:	2301      	movs	r3, #1
 801314e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013152:	e0bc      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013154:	2304      	movs	r3, #4
 8013156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801315a:	e0b8      	b.n	80132ce <UART_SetConfig+0x5a6>
 801315c:	2308      	movs	r3, #8
 801315e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013162:	e0b4      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013164:	2310      	movs	r3, #16
 8013166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801316a:	e0b0      	b.n	80132ce <UART_SetConfig+0x5a6>
 801316c:	2320      	movs	r3, #32
 801316e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013172:	e0ac      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013174:	2340      	movs	r3, #64	; 0x40
 8013176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317a:	e0a8      	b.n	80132ce <UART_SetConfig+0x5a6>
 801317c:	2380      	movs	r3, #128	; 0x80
 801317e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013182:	e0a4      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a8f      	ldr	r2, [pc, #572]	; (80133c8 <UART_SetConfig+0x6a0>)
 801318a:	4293      	cmp	r3, r2
 801318c:	d130      	bne.n	80131f0 <UART_SetConfig+0x4c8>
 801318e:	4b8d      	ldr	r3, [pc, #564]	; (80133c4 <UART_SetConfig+0x69c>)
 8013190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013192:	f003 0307 	and.w	r3, r3, #7
 8013196:	2b05      	cmp	r3, #5
 8013198:	d826      	bhi.n	80131e8 <UART_SetConfig+0x4c0>
 801319a:	a201      	add	r2, pc, #4	; (adr r2, 80131a0 <UART_SetConfig+0x478>)
 801319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a0:	080131b9 	.word	0x080131b9
 80131a4:	080131c1 	.word	0x080131c1
 80131a8:	080131c9 	.word	0x080131c9
 80131ac:	080131d1 	.word	0x080131d1
 80131b0:	080131d9 	.word	0x080131d9
 80131b4:	080131e1 	.word	0x080131e1
 80131b8:	2300      	movs	r3, #0
 80131ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131be:	e086      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131c0:	2304      	movs	r3, #4
 80131c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131c6:	e082      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131c8:	2308      	movs	r3, #8
 80131ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ce:	e07e      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131d0:	2310      	movs	r3, #16
 80131d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131d6:	e07a      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131d8:	2320      	movs	r3, #32
 80131da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131de:	e076      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131e0:	2340      	movs	r3, #64	; 0x40
 80131e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e6:	e072      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131e8:	2380      	movs	r3, #128	; 0x80
 80131ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ee:	e06e      	b.n	80132ce <UART_SetConfig+0x5a6>
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4a75      	ldr	r2, [pc, #468]	; (80133cc <UART_SetConfig+0x6a4>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d130      	bne.n	801325c <UART_SetConfig+0x534>
 80131fa:	4b72      	ldr	r3, [pc, #456]	; (80133c4 <UART_SetConfig+0x69c>)
 80131fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131fe:	f003 0307 	and.w	r3, r3, #7
 8013202:	2b05      	cmp	r3, #5
 8013204:	d826      	bhi.n	8013254 <UART_SetConfig+0x52c>
 8013206:	a201      	add	r2, pc, #4	; (adr r2, 801320c <UART_SetConfig+0x4e4>)
 8013208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801320c:	08013225 	.word	0x08013225
 8013210:	0801322d 	.word	0x0801322d
 8013214:	08013235 	.word	0x08013235
 8013218:	0801323d 	.word	0x0801323d
 801321c:	08013245 	.word	0x08013245
 8013220:	0801324d 	.word	0x0801324d
 8013224:	2300      	movs	r3, #0
 8013226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801322a:	e050      	b.n	80132ce <UART_SetConfig+0x5a6>
 801322c:	2304      	movs	r3, #4
 801322e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013232:	e04c      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013234:	2308      	movs	r3, #8
 8013236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801323a:	e048      	b.n	80132ce <UART_SetConfig+0x5a6>
 801323c:	2310      	movs	r3, #16
 801323e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013242:	e044      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013244:	2320      	movs	r3, #32
 8013246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324a:	e040      	b.n	80132ce <UART_SetConfig+0x5a6>
 801324c:	2340      	movs	r3, #64	; 0x40
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013252:	e03c      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013254:	2380      	movs	r3, #128	; 0x80
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325a:	e038      	b.n	80132ce <UART_SetConfig+0x5a6>
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a5b      	ldr	r2, [pc, #364]	; (80133d0 <UART_SetConfig+0x6a8>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d130      	bne.n	80132c8 <UART_SetConfig+0x5a0>
 8013266:	4b57      	ldr	r3, [pc, #348]	; (80133c4 <UART_SetConfig+0x69c>)
 8013268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801326a:	f003 0307 	and.w	r3, r3, #7
 801326e:	2b05      	cmp	r3, #5
 8013270:	d826      	bhi.n	80132c0 <UART_SetConfig+0x598>
 8013272:	a201      	add	r2, pc, #4	; (adr r2, 8013278 <UART_SetConfig+0x550>)
 8013274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013278:	08013291 	.word	0x08013291
 801327c:	08013299 	.word	0x08013299
 8013280:	080132a1 	.word	0x080132a1
 8013284:	080132a9 	.word	0x080132a9
 8013288:	080132b1 	.word	0x080132b1
 801328c:	080132b9 	.word	0x080132b9
 8013290:	2302      	movs	r3, #2
 8013292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013296:	e01a      	b.n	80132ce <UART_SetConfig+0x5a6>
 8013298:	2304      	movs	r3, #4
 801329a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801329e:	e016      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132a0:	2308      	movs	r3, #8
 80132a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132a6:	e012      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132a8:	2310      	movs	r3, #16
 80132aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ae:	e00e      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132b0:	2320      	movs	r3, #32
 80132b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132b6:	e00a      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132b8:	2340      	movs	r3, #64	; 0x40
 80132ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132be:	e006      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132c0:	2380      	movs	r3, #128	; 0x80
 80132c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132c6:	e002      	b.n	80132ce <UART_SetConfig+0x5a6>
 80132c8:	2380      	movs	r3, #128	; 0x80
 80132ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	4a3f      	ldr	r2, [pc, #252]	; (80133d0 <UART_SetConfig+0x6a8>)
 80132d4:	4293      	cmp	r3, r2
 80132d6:	f040 80f8 	bne.w	80134ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80132da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80132de:	2b20      	cmp	r3, #32
 80132e0:	dc46      	bgt.n	8013370 <UART_SetConfig+0x648>
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	f2c0 8082 	blt.w	80133ec <UART_SetConfig+0x6c4>
 80132e8:	3b02      	subs	r3, #2
 80132ea:	2b1e      	cmp	r3, #30
 80132ec:	d87e      	bhi.n	80133ec <UART_SetConfig+0x6c4>
 80132ee:	a201      	add	r2, pc, #4	; (adr r2, 80132f4 <UART_SetConfig+0x5cc>)
 80132f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f4:	08013377 	.word	0x08013377
 80132f8:	080133ed 	.word	0x080133ed
 80132fc:	0801337f 	.word	0x0801337f
 8013300:	080133ed 	.word	0x080133ed
 8013304:	080133ed 	.word	0x080133ed
 8013308:	080133ed 	.word	0x080133ed
 801330c:	0801338f 	.word	0x0801338f
 8013310:	080133ed 	.word	0x080133ed
 8013314:	080133ed 	.word	0x080133ed
 8013318:	080133ed 	.word	0x080133ed
 801331c:	080133ed 	.word	0x080133ed
 8013320:	080133ed 	.word	0x080133ed
 8013324:	080133ed 	.word	0x080133ed
 8013328:	080133ed 	.word	0x080133ed
 801332c:	0801339f 	.word	0x0801339f
 8013330:	080133ed 	.word	0x080133ed
 8013334:	080133ed 	.word	0x080133ed
 8013338:	080133ed 	.word	0x080133ed
 801333c:	080133ed 	.word	0x080133ed
 8013340:	080133ed 	.word	0x080133ed
 8013344:	080133ed 	.word	0x080133ed
 8013348:	080133ed 	.word	0x080133ed
 801334c:	080133ed 	.word	0x080133ed
 8013350:	080133ed 	.word	0x080133ed
 8013354:	080133ed 	.word	0x080133ed
 8013358:	080133ed 	.word	0x080133ed
 801335c:	080133ed 	.word	0x080133ed
 8013360:	080133ed 	.word	0x080133ed
 8013364:	080133ed 	.word	0x080133ed
 8013368:	080133ed 	.word	0x080133ed
 801336c:	080133df 	.word	0x080133df
 8013370:	2b40      	cmp	r3, #64	; 0x40
 8013372:	d037      	beq.n	80133e4 <UART_SetConfig+0x6bc>
 8013374:	e03a      	b.n	80133ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013376:	f7fb fa85 	bl	800e884 <HAL_RCCEx_GetD3PCLK1Freq>
 801337a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801337c:	e03c      	b.n	80133f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013382:	4618      	mov	r0, r3
 8013384:	f7fb fa94 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801338c:	e034      	b.n	80133f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801338e:	f107 0318 	add.w	r3, r7, #24
 8013392:	4618      	mov	r0, r3
 8013394:	f7fb fbe0 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801339c:	e02c      	b.n	80133f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801339e:	4b09      	ldr	r3, [pc, #36]	; (80133c4 <UART_SetConfig+0x69c>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f003 0320 	and.w	r3, r3, #32
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d016      	beq.n	80133d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80133aa:	4b06      	ldr	r3, [pc, #24]	; (80133c4 <UART_SetConfig+0x69c>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	08db      	lsrs	r3, r3, #3
 80133b0:	f003 0303 	and.w	r3, r3, #3
 80133b4:	4a07      	ldr	r2, [pc, #28]	; (80133d4 <UART_SetConfig+0x6ac>)
 80133b6:	fa22 f303 	lsr.w	r3, r2, r3
 80133ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80133bc:	e01c      	b.n	80133f8 <UART_SetConfig+0x6d0>
 80133be:	bf00      	nop
 80133c0:	40011400 	.word	0x40011400
 80133c4:	58024400 	.word	0x58024400
 80133c8:	40007800 	.word	0x40007800
 80133cc:	40007c00 	.word	0x40007c00
 80133d0:	58000c00 	.word	0x58000c00
 80133d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80133d8:	4b9d      	ldr	r3, [pc, #628]	; (8013650 <UART_SetConfig+0x928>)
 80133da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133dc:	e00c      	b.n	80133f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80133de:	4b9d      	ldr	r3, [pc, #628]	; (8013654 <UART_SetConfig+0x92c>)
 80133e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133e2:	e009      	b.n	80133f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80133e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133ea:	e005      	b.n	80133f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80133ec:	2300      	movs	r3, #0
 80133ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80133f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80133f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	f000 81de 	beq.w	80137bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013404:	4a94      	ldr	r2, [pc, #592]	; (8013658 <UART_SetConfig+0x930>)
 8013406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801340a:	461a      	mov	r2, r3
 801340c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801340e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013412:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	685a      	ldr	r2, [r3, #4]
 8013418:	4613      	mov	r3, r2
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	4413      	add	r3, r2
 801341e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013420:	429a      	cmp	r2, r3
 8013422:	d305      	bcc.n	8013430 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801342c:	429a      	cmp	r2, r3
 801342e:	d903      	bls.n	8013438 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013436:	e1c1      	b.n	80137bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801343a:	2200      	movs	r2, #0
 801343c:	60bb      	str	r3, [r7, #8]
 801343e:	60fa      	str	r2, [r7, #12]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013444:	4a84      	ldr	r2, [pc, #528]	; (8013658 <UART_SetConfig+0x930>)
 8013446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801344a:	b29b      	uxth	r3, r3
 801344c:	2200      	movs	r2, #0
 801344e:	603b      	str	r3, [r7, #0]
 8013450:	607a      	str	r2, [r7, #4]
 8013452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013456:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801345a:	f7ec ff3d 	bl	80002d8 <__aeabi_uldivmod>
 801345e:	4602      	mov	r2, r0
 8013460:	460b      	mov	r3, r1
 8013462:	4610      	mov	r0, r2
 8013464:	4619      	mov	r1, r3
 8013466:	f04f 0200 	mov.w	r2, #0
 801346a:	f04f 0300 	mov.w	r3, #0
 801346e:	020b      	lsls	r3, r1, #8
 8013470:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013474:	0202      	lsls	r2, r0, #8
 8013476:	6979      	ldr	r1, [r7, #20]
 8013478:	6849      	ldr	r1, [r1, #4]
 801347a:	0849      	lsrs	r1, r1, #1
 801347c:	2000      	movs	r0, #0
 801347e:	460c      	mov	r4, r1
 8013480:	4605      	mov	r5, r0
 8013482:	eb12 0804 	adds.w	r8, r2, r4
 8013486:	eb43 0905 	adc.w	r9, r3, r5
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	2200      	movs	r2, #0
 8013490:	469a      	mov	sl, r3
 8013492:	4693      	mov	fp, r2
 8013494:	4652      	mov	r2, sl
 8013496:	465b      	mov	r3, fp
 8013498:	4640      	mov	r0, r8
 801349a:	4649      	mov	r1, r9
 801349c:	f7ec ff1c 	bl	80002d8 <__aeabi_uldivmod>
 80134a0:	4602      	mov	r2, r0
 80134a2:	460b      	mov	r3, r1
 80134a4:	4613      	mov	r3, r2
 80134a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80134a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80134ae:	d308      	bcc.n	80134c2 <UART_SetConfig+0x79a>
 80134b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80134b6:	d204      	bcs.n	80134c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134be:	60da      	str	r2, [r3, #12]
 80134c0:	e17c      	b.n	80137bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80134c2:	2301      	movs	r3, #1
 80134c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80134c8:	e178      	b.n	80137bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	69db      	ldr	r3, [r3, #28]
 80134ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134d2:	f040 80c5 	bne.w	8013660 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80134d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134da:	2b20      	cmp	r3, #32
 80134dc:	dc48      	bgt.n	8013570 <UART_SetConfig+0x848>
 80134de:	2b00      	cmp	r3, #0
 80134e0:	db7b      	blt.n	80135da <UART_SetConfig+0x8b2>
 80134e2:	2b20      	cmp	r3, #32
 80134e4:	d879      	bhi.n	80135da <UART_SetConfig+0x8b2>
 80134e6:	a201      	add	r2, pc, #4	; (adr r2, 80134ec <UART_SetConfig+0x7c4>)
 80134e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ec:	08013577 	.word	0x08013577
 80134f0:	0801357f 	.word	0x0801357f
 80134f4:	080135db 	.word	0x080135db
 80134f8:	080135db 	.word	0x080135db
 80134fc:	08013587 	.word	0x08013587
 8013500:	080135db 	.word	0x080135db
 8013504:	080135db 	.word	0x080135db
 8013508:	080135db 	.word	0x080135db
 801350c:	08013597 	.word	0x08013597
 8013510:	080135db 	.word	0x080135db
 8013514:	080135db 	.word	0x080135db
 8013518:	080135db 	.word	0x080135db
 801351c:	080135db 	.word	0x080135db
 8013520:	080135db 	.word	0x080135db
 8013524:	080135db 	.word	0x080135db
 8013528:	080135db 	.word	0x080135db
 801352c:	080135a7 	.word	0x080135a7
 8013530:	080135db 	.word	0x080135db
 8013534:	080135db 	.word	0x080135db
 8013538:	080135db 	.word	0x080135db
 801353c:	080135db 	.word	0x080135db
 8013540:	080135db 	.word	0x080135db
 8013544:	080135db 	.word	0x080135db
 8013548:	080135db 	.word	0x080135db
 801354c:	080135db 	.word	0x080135db
 8013550:	080135db 	.word	0x080135db
 8013554:	080135db 	.word	0x080135db
 8013558:	080135db 	.word	0x080135db
 801355c:	080135db 	.word	0x080135db
 8013560:	080135db 	.word	0x080135db
 8013564:	080135db 	.word	0x080135db
 8013568:	080135db 	.word	0x080135db
 801356c:	080135cd 	.word	0x080135cd
 8013570:	2b40      	cmp	r3, #64	; 0x40
 8013572:	d02e      	beq.n	80135d2 <UART_SetConfig+0x8aa>
 8013574:	e031      	b.n	80135da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013576:	f7f9 f9cf 	bl	800c918 <HAL_RCC_GetPCLK1Freq>
 801357a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801357c:	e033      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801357e:	f7f9 f9e1 	bl	800c944 <HAL_RCC_GetPCLK2Freq>
 8013582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013584:	e02f      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801358a:	4618      	mov	r0, r3
 801358c:	f7fb f990 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013594:	e027      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013596:	f107 0318 	add.w	r3, r7, #24
 801359a:	4618      	mov	r0, r3
 801359c:	f7fb fadc 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135a4:	e01f      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135a6:	4b2d      	ldr	r3, [pc, #180]	; (801365c <UART_SetConfig+0x934>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	f003 0320 	and.w	r3, r3, #32
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d009      	beq.n	80135c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80135b2:	4b2a      	ldr	r3, [pc, #168]	; (801365c <UART_SetConfig+0x934>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	08db      	lsrs	r3, r3, #3
 80135b8:	f003 0303 	and.w	r3, r3, #3
 80135bc:	4a24      	ldr	r2, [pc, #144]	; (8013650 <UART_SetConfig+0x928>)
 80135be:	fa22 f303 	lsr.w	r3, r2, r3
 80135c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80135c4:	e00f      	b.n	80135e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80135c6:	4b22      	ldr	r3, [pc, #136]	; (8013650 <UART_SetConfig+0x928>)
 80135c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135ca:	e00c      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80135cc:	4b21      	ldr	r3, [pc, #132]	; (8013654 <UART_SetConfig+0x92c>)
 80135ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135d0:	e009      	b.n	80135e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80135d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135d8:	e005      	b.n	80135e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80135da:	2300      	movs	r3, #0
 80135dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80135de:	2301      	movs	r3, #1
 80135e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80135e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80135e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f000 80e7 	beq.w	80137bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f2:	4a19      	ldr	r2, [pc, #100]	; (8013658 <UART_SetConfig+0x930>)
 80135f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135f8:	461a      	mov	r2, r3
 80135fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013600:	005a      	lsls	r2, r3, #1
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	085b      	lsrs	r3, r3, #1
 8013608:	441a      	add	r2, r3
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013612:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013616:	2b0f      	cmp	r3, #15
 8013618:	d916      	bls.n	8013648 <UART_SetConfig+0x920>
 801361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013620:	d212      	bcs.n	8013648 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013624:	b29b      	uxth	r3, r3
 8013626:	f023 030f 	bic.w	r3, r3, #15
 801362a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362e:	085b      	lsrs	r3, r3, #1
 8013630:	b29b      	uxth	r3, r3
 8013632:	f003 0307 	and.w	r3, r3, #7
 8013636:	b29a      	uxth	r2, r3
 8013638:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801363a:	4313      	orrs	r3, r2
 801363c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013644:	60da      	str	r2, [r3, #12]
 8013646:	e0b9      	b.n	80137bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013648:	2301      	movs	r3, #1
 801364a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801364e:	e0b5      	b.n	80137bc <UART_SetConfig+0xa94>
 8013650:	03d09000 	.word	0x03d09000
 8013654:	003d0900 	.word	0x003d0900
 8013658:	08017fac 	.word	0x08017fac
 801365c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013664:	2b20      	cmp	r3, #32
 8013666:	dc49      	bgt.n	80136fc <UART_SetConfig+0x9d4>
 8013668:	2b00      	cmp	r3, #0
 801366a:	db7c      	blt.n	8013766 <UART_SetConfig+0xa3e>
 801366c:	2b20      	cmp	r3, #32
 801366e:	d87a      	bhi.n	8013766 <UART_SetConfig+0xa3e>
 8013670:	a201      	add	r2, pc, #4	; (adr r2, 8013678 <UART_SetConfig+0x950>)
 8013672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013676:	bf00      	nop
 8013678:	08013703 	.word	0x08013703
 801367c:	0801370b 	.word	0x0801370b
 8013680:	08013767 	.word	0x08013767
 8013684:	08013767 	.word	0x08013767
 8013688:	08013713 	.word	0x08013713
 801368c:	08013767 	.word	0x08013767
 8013690:	08013767 	.word	0x08013767
 8013694:	08013767 	.word	0x08013767
 8013698:	08013723 	.word	0x08013723
 801369c:	08013767 	.word	0x08013767
 80136a0:	08013767 	.word	0x08013767
 80136a4:	08013767 	.word	0x08013767
 80136a8:	08013767 	.word	0x08013767
 80136ac:	08013767 	.word	0x08013767
 80136b0:	08013767 	.word	0x08013767
 80136b4:	08013767 	.word	0x08013767
 80136b8:	08013733 	.word	0x08013733
 80136bc:	08013767 	.word	0x08013767
 80136c0:	08013767 	.word	0x08013767
 80136c4:	08013767 	.word	0x08013767
 80136c8:	08013767 	.word	0x08013767
 80136cc:	08013767 	.word	0x08013767
 80136d0:	08013767 	.word	0x08013767
 80136d4:	08013767 	.word	0x08013767
 80136d8:	08013767 	.word	0x08013767
 80136dc:	08013767 	.word	0x08013767
 80136e0:	08013767 	.word	0x08013767
 80136e4:	08013767 	.word	0x08013767
 80136e8:	08013767 	.word	0x08013767
 80136ec:	08013767 	.word	0x08013767
 80136f0:	08013767 	.word	0x08013767
 80136f4:	08013767 	.word	0x08013767
 80136f8:	08013759 	.word	0x08013759
 80136fc:	2b40      	cmp	r3, #64	; 0x40
 80136fe:	d02e      	beq.n	801375e <UART_SetConfig+0xa36>
 8013700:	e031      	b.n	8013766 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013702:	f7f9 f909 	bl	800c918 <HAL_RCC_GetPCLK1Freq>
 8013706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013708:	e033      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801370a:	f7f9 f91b 	bl	800c944 <HAL_RCC_GetPCLK2Freq>
 801370e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013710:	e02f      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013716:	4618      	mov	r0, r3
 8013718:	f7fb f8ca 	bl	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013720:	e027      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013722:	f107 0318 	add.w	r3, r7, #24
 8013726:	4618      	mov	r0, r3
 8013728:	f7fb fa16 	bl	800eb58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013730:	e01f      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013732:	4b2d      	ldr	r3, [pc, #180]	; (80137e8 <UART_SetConfig+0xac0>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f003 0320 	and.w	r3, r3, #32
 801373a:	2b00      	cmp	r3, #0
 801373c:	d009      	beq.n	8013752 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801373e:	4b2a      	ldr	r3, [pc, #168]	; (80137e8 <UART_SetConfig+0xac0>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	08db      	lsrs	r3, r3, #3
 8013744:	f003 0303 	and.w	r3, r3, #3
 8013748:	4a28      	ldr	r2, [pc, #160]	; (80137ec <UART_SetConfig+0xac4>)
 801374a:	fa22 f303 	lsr.w	r3, r2, r3
 801374e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013750:	e00f      	b.n	8013772 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013752:	4b26      	ldr	r3, [pc, #152]	; (80137ec <UART_SetConfig+0xac4>)
 8013754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013756:	e00c      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013758:	4b25      	ldr	r3, [pc, #148]	; (80137f0 <UART_SetConfig+0xac8>)
 801375a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801375c:	e009      	b.n	8013772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013764:	e005      	b.n	8013772 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013766:	2300      	movs	r3, #0
 8013768:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801376a:	2301      	movs	r3, #1
 801376c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013770:	bf00      	nop
    }

    if (pclk != 0U)
 8013772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d021      	beq.n	80137bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801377c:	4a1d      	ldr	r2, [pc, #116]	; (80137f4 <UART_SetConfig+0xacc>)
 801377e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013782:	461a      	mov	r2, r3
 8013784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013786:	fbb3 f2f2 	udiv	r2, r3, r2
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	085b      	lsrs	r3, r3, #1
 8013790:	441a      	add	r2, r3
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	fbb2 f3f3 	udiv	r3, r2, r3
 801379a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379e:	2b0f      	cmp	r3, #15
 80137a0:	d909      	bls.n	80137b6 <UART_SetConfig+0xa8e>
 80137a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137a8:	d205      	bcs.n	80137b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80137aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	60da      	str	r2, [r3, #12]
 80137b4:	e002      	b.n	80137bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80137b6:	2301      	movs	r3, #1
 80137b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	2201      	movs	r2, #1
 80137c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2201      	movs	r2, #1
 80137c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	2200      	movs	r2, #0
 80137d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2200      	movs	r2, #0
 80137d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80137d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3748      	adds	r7, #72	; 0x48
 80137e0:	46bd      	mov	sp, r7
 80137e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80137e6:	bf00      	nop
 80137e8:	58024400 	.word	0x58024400
 80137ec:	03d09000 	.word	0x03d09000
 80137f0:	003d0900 	.word	0x003d0900
 80137f4:	08017fac 	.word	0x08017fac

080137f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013804:	f003 0301 	and.w	r3, r3, #1
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00a      	beq.n	8013822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	430a      	orrs	r2, r1
 8013820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013826:	f003 0302 	and.w	r3, r3, #2
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00a      	beq.n	8013844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	430a      	orrs	r2, r1
 8013842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013848:	f003 0304 	and.w	r3, r3, #4
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	430a      	orrs	r2, r1
 8013864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801386a:	f003 0308 	and.w	r3, r3, #8
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00a      	beq.n	8013888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	430a      	orrs	r2, r1
 8013886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801388c:	f003 0310 	and.w	r3, r3, #16
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00a      	beq.n	80138aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	430a      	orrs	r2, r1
 80138a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ae:	f003 0320 	and.w	r3, r3, #32
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00a      	beq.n	80138cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	430a      	orrs	r2, r1
 80138ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d01a      	beq.n	801390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	430a      	orrs	r2, r1
 80138ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80138f6:	d10a      	bne.n	801390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	430a      	orrs	r2, r1
 801390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013916:	2b00      	cmp	r3, #0
 8013918:	d00a      	beq.n	8013930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	430a      	orrs	r2, r1
 801392e:	605a      	str	r2, [r3, #4]
  }
}
 8013930:	bf00      	nop
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b098      	sub	sp, #96	; 0x60
 8013940:	af02      	add	r7, sp, #8
 8013942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801394c:	f7f1 fc88 	bl	8005260 <HAL_GetTick>
 8013950:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f003 0308 	and.w	r3, r3, #8
 801395c:	2b08      	cmp	r3, #8
 801395e:	d12f      	bne.n	80139c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013968:	2200      	movs	r2, #0
 801396a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 f88e 	bl	8013a90 <UART_WaitOnFlagUntilTimeout>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d022      	beq.n	80139c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013982:	e853 3f00 	ldrex	r3, [r3]
 8013986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801398a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801398e:	653b      	str	r3, [r7, #80]	; 0x50
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	461a      	mov	r2, r3
 8013996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013998:	647b      	str	r3, [r7, #68]	; 0x44
 801399a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801399c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801399e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139a0:	e841 2300 	strex	r3, r2, [r1]
 80139a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80139a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d1e6      	bne.n	801397a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2220      	movs	r2, #32
 80139b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2200      	movs	r2, #0
 80139b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139bc:	2303      	movs	r3, #3
 80139be:	e063      	b.n	8013a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0304 	and.w	r3, r3, #4
 80139ca:	2b04      	cmp	r3, #4
 80139cc:	d149      	bne.n	8013a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80139ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80139d2:	9300      	str	r3, [sp, #0]
 80139d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d6:	2200      	movs	r2, #0
 80139d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 f857 	bl	8013a90 <UART_WaitOnFlagUntilTimeout>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d03c      	beq.n	8013a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	e853 3f00 	ldrex	r3, [r3]
 80139f4:	623b      	str	r3, [r7, #32]
   return(result);
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80139fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	461a      	mov	r2, r3
 8013a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a06:	633b      	str	r3, [r7, #48]	; 0x30
 8013a08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a0e:	e841 2300 	strex	r3, r2, [r1]
 8013a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d1e6      	bne.n	80139e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	e853 3f00 	ldrex	r3, [r3]
 8013a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f023 0301 	bic.w	r3, r3, #1
 8013a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3308      	adds	r3, #8
 8013a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a3a:	61fa      	str	r2, [r7, #28]
 8013a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a3e:	69b9      	ldr	r1, [r7, #24]
 8013a40:	69fa      	ldr	r2, [r7, #28]
 8013a42:	e841 2300 	strex	r3, r2, [r1]
 8013a46:	617b      	str	r3, [r7, #20]
   return(result);
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e5      	bne.n	8013a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2220      	movs	r2, #32
 8013a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	e012      	b.n	8013a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2220      	movs	r2, #32
 8013a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2220      	movs	r2, #32
 8013a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3758      	adds	r7, #88	; 0x58
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	603b      	str	r3, [r7, #0]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013aa0:	e049      	b.n	8013b36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aa8:	d045      	beq.n	8013b36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013aaa:	f7f1 fbd9 	bl	8005260 <HAL_GetTick>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	1ad3      	subs	r3, r2, r3
 8013ab4:	69ba      	ldr	r2, [r7, #24]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d302      	bcc.n	8013ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013ac0:	2303      	movs	r3, #3
 8013ac2:	e048      	b.n	8013b56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f003 0304 	and.w	r3, r3, #4
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d031      	beq.n	8013b36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	69db      	ldr	r3, [r3, #28]
 8013ad8:	f003 0308 	and.w	r3, r3, #8
 8013adc:	2b08      	cmp	r3, #8
 8013ade:	d110      	bne.n	8013b02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2208      	movs	r2, #8
 8013ae6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f000 f839 	bl	8013b60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2208      	movs	r2, #8
 8013af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2200      	movs	r2, #0
 8013afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013afe:	2301      	movs	r3, #1
 8013b00:	e029      	b.n	8013b56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	69db      	ldr	r3, [r3, #28]
 8013b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b10:	d111      	bne.n	8013b36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013b1c:	68f8      	ldr	r0, [r7, #12]
 8013b1e:	f000 f81f 	bl	8013b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2220      	movs	r2, #32
 8013b26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013b32:	2303      	movs	r3, #3
 8013b34:	e00f      	b.n	8013b56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	69da      	ldr	r2, [r3, #28]
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	4013      	ands	r3, r2
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	bf0c      	ite	eq
 8013b46:	2301      	moveq	r3, #1
 8013b48:	2300      	movne	r3, #0
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	79fb      	ldrb	r3, [r7, #7]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d0a6      	beq.n	8013aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013b54:	2300      	movs	r3, #0
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
	...

08013b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b095      	sub	sp, #84	; 0x54
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b70:	e853 3f00 	ldrex	r3, [r3]
 8013b74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	461a      	mov	r2, r3
 8013b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b86:	643b      	str	r3, [r7, #64]	; 0x40
 8013b88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b8e:	e841 2300 	strex	r3, r2, [r1]
 8013b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1e6      	bne.n	8013b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	3308      	adds	r3, #8
 8013ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba2:	6a3b      	ldr	r3, [r7, #32]
 8013ba4:	e853 3f00 	ldrex	r3, [r3]
 8013ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8013baa:	69fa      	ldr	r2, [r7, #28]
 8013bac:	4b1e      	ldr	r3, [pc, #120]	; (8013c28 <UART_EndRxTransfer+0xc8>)
 8013bae:	4013      	ands	r3, r2
 8013bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	3308      	adds	r3, #8
 8013bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc2:	e841 2300 	strex	r3, r2, [r1]
 8013bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d1e5      	bne.n	8013b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d118      	bne.n	8013c08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	e853 3f00 	ldrex	r3, [r3]
 8013be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	f023 0310 	bic.w	r3, r3, #16
 8013bea:	647b      	str	r3, [r7, #68]	; 0x44
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf4:	61bb      	str	r3, [r7, #24]
 8013bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bf8:	6979      	ldr	r1, [r7, #20]
 8013bfa:	69ba      	ldr	r2, [r7, #24]
 8013bfc:	e841 2300 	strex	r3, r2, [r1]
 8013c00:	613b      	str	r3, [r7, #16]
   return(result);
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d1e6      	bne.n	8013bd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2220      	movs	r2, #32
 8013c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2200      	movs	r2, #0
 8013c14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013c1c:	bf00      	nop
 8013c1e:	3754      	adds	r7, #84	; 0x54
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	effffffe 	.word	0xeffffffe

08013c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b085      	sub	sp, #20
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d101      	bne.n	8013c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8013c3e:	2302      	movs	r3, #2
 8013c40:	e027      	b.n	8013c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2201      	movs	r2, #1
 8013c46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2224      	movs	r2, #36	; 0x24
 8013c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f022 0201 	bic.w	r2, r2, #1
 8013c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2220      	movs	r2, #32
 8013c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013c90:	2300      	movs	r3, #0
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3714      	adds	r7, #20
 8013c96:	46bd      	mov	sp, r7
 8013c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9c:	4770      	bx	lr

08013c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b084      	sub	sp, #16
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
 8013ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013cae:	2b01      	cmp	r3, #1
 8013cb0:	d101      	bne.n	8013cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013cb2:	2302      	movs	r3, #2
 8013cb4:	e02d      	b.n	8013d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2201      	movs	r2, #1
 8013cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2224      	movs	r2, #36	; 0x24
 8013cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f022 0201 	bic.w	r2, r2, #1
 8013cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	430a      	orrs	r2, r1
 8013cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f850 	bl	8013d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2220      	movs	r2, #32
 8013d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3710      	adds	r7, #16
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b084      	sub	sp, #16
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d101      	bne.n	8013d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013d2e:	2302      	movs	r3, #2
 8013d30:	e02d      	b.n	8013d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2201      	movs	r2, #1
 8013d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2224      	movs	r2, #36	; 0x24
 8013d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f022 0201 	bic.w	r2, r2, #1
 8013d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	689b      	ldr	r3, [r3, #8]
 8013d60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	683a      	ldr	r2, [r7, #0]
 8013d6a:	430a      	orrs	r2, r1
 8013d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f812 	bl	8013d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2220      	movs	r2, #32
 8013d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3710      	adds	r7, #16
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
	...

08013d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d108      	bne.n	8013dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2201      	movs	r2, #1
 8013dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2201      	movs	r2, #1
 8013db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013db8:	e031      	b.n	8013e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013dba:	2310      	movs	r3, #16
 8013dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013dbe:	2310      	movs	r3, #16
 8013dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	0e5b      	lsrs	r3, r3, #25
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	f003 0307 	and.w	r3, r3, #7
 8013dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	689b      	ldr	r3, [r3, #8]
 8013dd8:	0f5b      	lsrs	r3, r3, #29
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	f003 0307 	and.w	r3, r3, #7
 8013de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013de2:	7bbb      	ldrb	r3, [r7, #14]
 8013de4:	7b3a      	ldrb	r2, [r7, #12]
 8013de6:	4911      	ldr	r1, [pc, #68]	; (8013e2c <UARTEx_SetNbDataToProcess+0x94>)
 8013de8:	5c8a      	ldrb	r2, [r1, r2]
 8013dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013dee:	7b3a      	ldrb	r2, [r7, #12]
 8013df0:	490f      	ldr	r1, [pc, #60]	; (8013e30 <UARTEx_SetNbDataToProcess+0x98>)
 8013df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013e00:	7bfb      	ldrb	r3, [r7, #15]
 8013e02:	7b7a      	ldrb	r2, [r7, #13]
 8013e04:	4909      	ldr	r1, [pc, #36]	; (8013e2c <UARTEx_SetNbDataToProcess+0x94>)
 8013e06:	5c8a      	ldrb	r2, [r1, r2]
 8013e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013e0c:	7b7a      	ldrb	r2, [r7, #13]
 8013e0e:	4908      	ldr	r1, [pc, #32]	; (8013e30 <UARTEx_SetNbDataToProcess+0x98>)
 8013e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013e1e:	bf00      	nop
 8013e20:	3714      	adds	r7, #20
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	08017fc4 	.word	0x08017fc4
 8013e30:	08017fcc 	.word	0x08017fcc

08013e34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d121      	bne.n	8013e8a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	4b27      	ldr	r3, [pc, #156]	; (8013ee8 <FMC_SDRAM_Init+0xb4>)
 8013e4c:	4013      	ands	r3, r2
 8013e4e:	683a      	ldr	r2, [r7, #0]
 8013e50:	6851      	ldr	r1, [r2, #4]
 8013e52:	683a      	ldr	r2, [r7, #0]
 8013e54:	6892      	ldr	r2, [r2, #8]
 8013e56:	4311      	orrs	r1, r2
 8013e58:	683a      	ldr	r2, [r7, #0]
 8013e5a:	68d2      	ldr	r2, [r2, #12]
 8013e5c:	4311      	orrs	r1, r2
 8013e5e:	683a      	ldr	r2, [r7, #0]
 8013e60:	6912      	ldr	r2, [r2, #16]
 8013e62:	4311      	orrs	r1, r2
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	6952      	ldr	r2, [r2, #20]
 8013e68:	4311      	orrs	r1, r2
 8013e6a:	683a      	ldr	r2, [r7, #0]
 8013e6c:	6992      	ldr	r2, [r2, #24]
 8013e6e:	4311      	orrs	r1, r2
 8013e70:	683a      	ldr	r2, [r7, #0]
 8013e72:	69d2      	ldr	r2, [r2, #28]
 8013e74:	4311      	orrs	r1, r2
 8013e76:	683a      	ldr	r2, [r7, #0]
 8013e78:	6a12      	ldr	r2, [r2, #32]
 8013e7a:	4311      	orrs	r1, r2
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013e80:	430a      	orrs	r2, r1
 8013e82:	431a      	orrs	r2, r3
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	e026      	b.n	8013ed8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	69d9      	ldr	r1, [r3, #28]
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	6a1b      	ldr	r3, [r3, #32]
 8013e9a:	4319      	orrs	r1, r3
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea0:	430b      	orrs	r3, r1
 8013ea2:	431a      	orrs	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685a      	ldr	r2, [r3, #4]
 8013eac:	4b0e      	ldr	r3, [pc, #56]	; (8013ee8 <FMC_SDRAM_Init+0xb4>)
 8013eae:	4013      	ands	r3, r2
 8013eb0:	683a      	ldr	r2, [r7, #0]
 8013eb2:	6851      	ldr	r1, [r2, #4]
 8013eb4:	683a      	ldr	r2, [r7, #0]
 8013eb6:	6892      	ldr	r2, [r2, #8]
 8013eb8:	4311      	orrs	r1, r2
 8013eba:	683a      	ldr	r2, [r7, #0]
 8013ebc:	68d2      	ldr	r2, [r2, #12]
 8013ebe:	4311      	orrs	r1, r2
 8013ec0:	683a      	ldr	r2, [r7, #0]
 8013ec2:	6912      	ldr	r2, [r2, #16]
 8013ec4:	4311      	orrs	r1, r2
 8013ec6:	683a      	ldr	r2, [r7, #0]
 8013ec8:	6952      	ldr	r2, [r2, #20]
 8013eca:	4311      	orrs	r1, r2
 8013ecc:	683a      	ldr	r2, [r7, #0]
 8013ece:	6992      	ldr	r2, [r2, #24]
 8013ed0:	430a      	orrs	r2, r1
 8013ed2:	431a      	orrs	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013ed8:	2300      	movs	r3, #0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	370c      	adds	r7, #12
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr
 8013ee6:	bf00      	nop
 8013ee8:	ffff8000 	.word	0xffff8000

08013eec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013eec:	b480      	push	{r7}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d128      	bne.n	8013f50 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	689b      	ldr	r3, [r3, #8]
 8013f02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	1e59      	subs	r1, r3, #1
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	3b01      	subs	r3, #1
 8013f12:	011b      	lsls	r3, r3, #4
 8013f14:	4319      	orrs	r1, r3
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	021b      	lsls	r3, r3, #8
 8013f1e:	4319      	orrs	r1, r3
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	3b01      	subs	r3, #1
 8013f26:	031b      	lsls	r3, r3, #12
 8013f28:	4319      	orrs	r1, r3
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	691b      	ldr	r3, [r3, #16]
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	041b      	lsls	r3, r3, #16
 8013f32:	4319      	orrs	r1, r3
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	695b      	ldr	r3, [r3, #20]
 8013f38:	3b01      	subs	r3, #1
 8013f3a:	051b      	lsls	r3, r3, #20
 8013f3c:	4319      	orrs	r1, r3
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	699b      	ldr	r3, [r3, #24]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	061b      	lsls	r3, r3, #24
 8013f46:	430b      	orrs	r3, r1
 8013f48:	431a      	orrs	r2, r3
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	609a      	str	r2, [r3, #8]
 8013f4e:	e02d      	b.n	8013fac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	689a      	ldr	r2, [r3, #8]
 8013f54:	4b19      	ldr	r3, [pc, #100]	; (8013fbc <FMC_SDRAM_Timing_Init+0xd0>)
 8013f56:	4013      	ands	r3, r2
 8013f58:	68ba      	ldr	r2, [r7, #8]
 8013f5a:	68d2      	ldr	r2, [r2, #12]
 8013f5c:	3a01      	subs	r2, #1
 8013f5e:	0311      	lsls	r1, r2, #12
 8013f60:	68ba      	ldr	r2, [r7, #8]
 8013f62:	6952      	ldr	r2, [r2, #20]
 8013f64:	3a01      	subs	r2, #1
 8013f66:	0512      	lsls	r2, r2, #20
 8013f68:	430a      	orrs	r2, r1
 8013f6a:	431a      	orrs	r2, r3
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	1e59      	subs	r1, r3, #1
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	3b01      	subs	r3, #1
 8013f84:	011b      	lsls	r3, r3, #4
 8013f86:	4319      	orrs	r1, r3
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	3b01      	subs	r3, #1
 8013f8e:	021b      	lsls	r3, r3, #8
 8013f90:	4319      	orrs	r1, r3
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	691b      	ldr	r3, [r3, #16]
 8013f96:	3b01      	subs	r3, #1
 8013f98:	041b      	lsls	r3, r3, #16
 8013f9a:	4319      	orrs	r1, r3
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	3b01      	subs	r3, #1
 8013fa2:	061b      	lsls	r3, r3, #24
 8013fa4:	430b      	orrs	r3, r1
 8013fa6:	431a      	orrs	r2, r3
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013fac:	2300      	movs	r3, #0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3714      	adds	r7, #20
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr
 8013fba:	bf00      	nop
 8013fbc:	ff0f0fff 	.word	0xff0f0fff

08013fc0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	691a      	ldr	r2, [r3, #16]
 8013fd0:	4b0c      	ldr	r3, [pc, #48]	; (8014004 <FMC_SDRAM_SendCommand+0x44>)
 8013fd2:	4013      	ands	r3, r2
 8013fd4:	68ba      	ldr	r2, [r7, #8]
 8013fd6:	6811      	ldr	r1, [r2, #0]
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	6852      	ldr	r2, [r2, #4]
 8013fdc:	4311      	orrs	r1, r2
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	6892      	ldr	r2, [r2, #8]
 8013fe2:	3a01      	subs	r2, #1
 8013fe4:	0152      	lsls	r2, r2, #5
 8013fe6:	4311      	orrs	r1, r2
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	68d2      	ldr	r2, [r2, #12]
 8013fec:	0252      	lsls	r2, r2, #9
 8013fee:	430a      	orrs	r2, r1
 8013ff0:	431a      	orrs	r2, r3
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3714      	adds	r7, #20
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr
 8014004:	ffc00000 	.word	0xffc00000

08014008 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	695a      	ldr	r2, [r3, #20]
 8014016:	4b07      	ldr	r3, [pc, #28]	; (8014034 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014018:	4013      	ands	r3, r2
 801401a:	683a      	ldr	r2, [r7, #0]
 801401c:	0052      	lsls	r2, r2, #1
 801401e:	431a      	orrs	r2, r3
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014024:	2300      	movs	r3, #0
}
 8014026:	4618      	mov	r0, r3
 8014028:	370c      	adds	r7, #12
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop
 8014034:	ffffc001 	.word	0xffffc001

08014038 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014038:	b084      	sub	sp, #16
 801403a:	b480      	push	{r7}
 801403c:	b085      	sub	sp, #20
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
 8014042:	f107 001c 	add.w	r0, r7, #28
 8014046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801404a:	2300      	movs	r3, #0
 801404c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801404e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8014050:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8014052:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8014056:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8014058:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801405a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801405e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8014060:	68fa      	ldr	r2, [r7, #12]
 8014062:	4313      	orrs	r3, r2
 8014064:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	4b07      	ldr	r3, [pc, #28]	; (8014088 <SDMMC_Init+0x50>)
 801406c:	4013      	ands	r3, r2
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	431a      	orrs	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014076:	2300      	movs	r3, #0
}
 8014078:	4618      	mov	r0, r3
 801407a:	3714      	adds	r7, #20
 801407c:	46bd      	mov	sp, r7
 801407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014082:	b004      	add	sp, #16
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	ffc02c00 	.word	0xffc02c00

0801408c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801409a:	4618      	mov	r0, r3
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr

080140a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80140a6:	b480      	push	{r7}
 80140a8:	b083      	sub	sp, #12
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	6078      	str	r0, [r7, #4]
 80140ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80140ba:	2300      	movs	r3, #0
}
 80140bc:	4618      	mov	r0, r3
 80140be:	370c      	adds	r7, #12
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr

080140c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80140c8:	b480      	push	{r7}
 80140ca:	b083      	sub	sp, #12
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f043 0203 	orr.w	r2, r3, #3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	370c      	adds	r7, #12
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr

080140ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80140ea:	b480      	push	{r7}
 80140ec:	b083      	sub	sp, #12
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	f003 0303 	and.w	r3, r3, #3
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	370c      	adds	r7, #12
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
	...

08014108 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8014108:	b480      	push	{r7}
 801410a:	b085      	sub	sp, #20
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014112:	2300      	movs	r3, #0
 8014114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014126:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801412c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8014132:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014134:	68fa      	ldr	r2, [r7, #12]
 8014136:	4313      	orrs	r3, r2
 8014138:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	68da      	ldr	r2, [r3, #12]
 801413e:	4b06      	ldr	r3, [pc, #24]	; (8014158 <SDMMC_SendCommand+0x50>)
 8014140:	4013      	ands	r3, r2
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	431a      	orrs	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	3714      	adds	r7, #20
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr
 8014158:	fffee0c0 	.word	0xfffee0c0

0801415c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801415c:	b480      	push	{r7}
 801415e:	b083      	sub	sp, #12
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	691b      	ldr	r3, [r3, #16]
 8014168:	b2db      	uxtb	r3, r3
}
 801416a:	4618      	mov	r0, r3
 801416c:	370c      	adds	r7, #12
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr

08014176 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014176:	b480      	push	{r7}
 8014178:	b085      	sub	sp, #20
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	3314      	adds	r3, #20
 8014184:	461a      	mov	r2, r3
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	4413      	add	r3, r2
 801418a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
}
 8014190:	4618      	mov	r0, r3
 8014192:	3714      	adds	r7, #20
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801419c:	b480      	push	{r7}
 801419e:	b085      	sub	sp, #20
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80141a6:	2300      	movs	r3, #0
 80141a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	685a      	ldr	r2, [r3, #4]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141c2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80141c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80141ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	4313      	orrs	r3, r2
 80141d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	431a      	orrs	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80141e6:	2300      	movs	r3, #0

}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3714      	adds	r7, #20
 80141ec:	46bd      	mov	sp, r7
 80141ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f2:	4770      	bx	lr

080141f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b088      	sub	sp, #32
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8014202:	2310      	movs	r3, #16
 8014204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014206:	f44f 7380 	mov.w	r3, #256	; 0x100
 801420a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801420c:	2300      	movs	r3, #0
 801420e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014216:	f107 0308 	add.w	r3, r7, #8
 801421a:	4619      	mov	r1, r3
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7ff ff73 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8014222:	f241 3288 	movw	r2, #5000	; 0x1388
 8014226:	2110      	movs	r1, #16
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f000 fa5f 	bl	80146ec <SDMMC_GetCmdResp1>
 801422e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014230:	69fb      	ldr	r3, [r7, #28]
}
 8014232:	4618      	mov	r0, r3
 8014234:	3720      	adds	r7, #32
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b088      	sub	sp, #32
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
 8014242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8014248:	2311      	movs	r3, #17
 801424a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801424c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014252:	2300      	movs	r3, #0
 8014254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801425a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801425c:	f107 0308 	add.w	r3, r7, #8
 8014260:	4619      	mov	r1, r3
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7ff ff50 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014268:	f241 3288 	movw	r2, #5000	; 0x1388
 801426c:	2111      	movs	r1, #17
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f000 fa3c 	bl	80146ec <SDMMC_GetCmdResp1>
 8014274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014276:	69fb      	ldr	r3, [r7, #28]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3720      	adds	r7, #32
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801428e:	2312      	movs	r3, #18
 8014290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014298:	2300      	movs	r3, #0
 801429a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801429c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142a2:	f107 0308 	add.w	r3, r7, #8
 80142a6:	4619      	mov	r1, r3
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff ff2d 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80142ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80142b2:	2112      	movs	r1, #18
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 fa19 	bl	80146ec <SDMMC_GetCmdResp1>
 80142ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142bc:	69fb      	ldr	r3, [r7, #28]
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3720      	adds	r7, #32
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}

080142c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b088      	sub	sp, #32
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80142d4:	2318      	movs	r3, #24
 80142d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142de:	2300      	movs	r3, #0
 80142e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142e8:	f107 0308 	add.w	r3, r7, #8
 80142ec:	4619      	mov	r1, r3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff ff0a 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80142f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80142f8:	2118      	movs	r1, #24
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 f9f6 	bl	80146ec <SDMMC_GetCmdResp1>
 8014300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014302:	69fb      	ldr	r3, [r7, #28]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3720      	adds	r7, #32
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801431a:	2319      	movs	r3, #25
 801431c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801431e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014324:	2300      	movs	r3, #0
 8014326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801432c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801432e:	f107 0308 	add.w	r3, r7, #8
 8014332:	4619      	mov	r1, r3
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f7ff fee7 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801433a:	f241 3288 	movw	r2, #5000	; 0x1388
 801433e:	2119      	movs	r1, #25
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 f9d3 	bl	80146ec <SDMMC_GetCmdResp1>
 8014346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014348:	69fb      	ldr	r3, [r7, #28]
}
 801434a:	4618      	mov	r0, r3
 801434c:	3720      	adds	r7, #32
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
	...

08014354 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b088      	sub	sp, #32
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801435c:	2300      	movs	r3, #0
 801435e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014360:	230c      	movs	r3, #12
 8014362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801436a:	2300      	movs	r3, #0
 801436c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801436e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014372:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801438c:	f107 0308 	add.w	r3, r7, #8
 8014390:	4619      	mov	r1, r3
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f7ff feb8 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8014398:	4a0b      	ldr	r2, [pc, #44]	; (80143c8 <SDMMC_CmdStopTransfer+0x74>)
 801439a:	210c      	movs	r1, #12
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f000 f9a5 	bl	80146ec <SDMMC_GetCmdResp1>
 80143a2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80143b6:	d101      	bne.n	80143bc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80143b8:	2300      	movs	r3, #0
 80143ba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80143bc:	69fb      	ldr	r3, [r7, #28]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3720      	adds	r7, #32
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	05f5e100 	.word	0x05f5e100

080143cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b088      	sub	sp, #32
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80143da:	2307      	movs	r3, #7
 80143dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80143e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143e4:	2300      	movs	r3, #0
 80143e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80143ee:	f107 0308 	add.w	r3, r7, #8
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7ff fe87 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80143fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80143fe:	2107      	movs	r1, #7
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 f973 	bl	80146ec <SDMMC_GetCmdResp1>
 8014406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014408:	69fb      	ldr	r3, [r7, #28]
}
 801440a:	4618      	mov	r0, r3
 801440c:	3720      	adds	r7, #32
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8014412:	b580      	push	{r7, lr}
 8014414:	b088      	sub	sp, #32
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801441a:	2300      	movs	r3, #0
 801441c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801441e:	2300      	movs	r3, #0
 8014420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8014422:	2300      	movs	r3, #0
 8014424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014426:	2300      	movs	r3, #0
 8014428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801442a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801442e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014430:	f107 0308 	add.w	r3, r7, #8
 8014434:	4619      	mov	r1, r3
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f7ff fe66 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 fb97 	bl	8014b70 <SDMMC_GetCmdError>
 8014442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014444:	69fb      	ldr	r3, [r7, #28]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3720      	adds	r7, #32
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801444e:	b580      	push	{r7, lr}
 8014450:	b088      	sub	sp, #32
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014456:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801445a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801445c:	2308      	movs	r3, #8
 801445e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014466:	2300      	movs	r3, #0
 8014468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801446a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801446e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014470:	f107 0308 	add.w	r3, r7, #8
 8014474:	4619      	mov	r1, r3
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7ff fe46 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fb29 	bl	8014ad4 <SDMMC_GetCmdResp7>
 8014482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014484:	69fb      	ldr	r3, [r7, #28]
}
 8014486:	4618      	mov	r0, r3
 8014488:	3720      	adds	r7, #32
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b088      	sub	sp, #32
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
 8014496:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801449c:	2337      	movs	r3, #55	; 0x37
 801449e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144a6:	2300      	movs	r3, #0
 80144a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144b0:	f107 0308 	add.w	r3, r7, #8
 80144b4:	4619      	mov	r1, r3
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7ff fe26 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80144bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80144c0:	2137      	movs	r1, #55	; 0x37
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 f912 	bl	80146ec <SDMMC_GetCmdResp1>
 80144c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144ca:	69fb      	ldr	r3, [r7, #28]
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3720      	adds	r7, #32
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b088      	sub	sp, #32
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80144e2:	2329      	movs	r3, #41	; 0x29
 80144e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ec:	2300      	movs	r3, #0
 80144ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144f6:	f107 0308 	add.w	r3, r7, #8
 80144fa:	4619      	mov	r1, r3
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7ff fe03 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 fa2e 	bl	8014964 <SDMMC_GetCmdResp3>
 8014508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801450a:	69fb      	ldr	r3, [r7, #28]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3720      	adds	r7, #32
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b088      	sub	sp, #32
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014522:	2306      	movs	r3, #6
 8014524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014526:	f44f 7380 	mov.w	r3, #256	; 0x100
 801452a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801452c:	2300      	movs	r3, #0
 801452e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014534:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014536:	f107 0308 	add.w	r3, r7, #8
 801453a:	4619      	mov	r1, r3
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ff fde3 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8014542:	f241 3288 	movw	r2, #5000	; 0x1388
 8014546:	2106      	movs	r1, #6
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f000 f8cf 	bl	80146ec <SDMMC_GetCmdResp1>
 801454e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014550:	69fb      	ldr	r3, [r7, #28]
}
 8014552:	4618      	mov	r0, r3
 8014554:	3720      	adds	r7, #32
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}

0801455a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801455a:	b580      	push	{r7, lr}
 801455c:	b088      	sub	sp, #32
 801455e:	af00      	add	r7, sp, #0
 8014560:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014562:	2300      	movs	r3, #0
 8014564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014566:	2333      	movs	r3, #51	; 0x33
 8014568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801456a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801456e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014570:	2300      	movs	r3, #0
 8014572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801457a:	f107 0308 	add.w	r3, r7, #8
 801457e:	4619      	mov	r1, r3
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff fdc1 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014586:	f241 3288 	movw	r2, #5000	; 0x1388
 801458a:	2133      	movs	r1, #51	; 0x33
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 f8ad 	bl	80146ec <SDMMC_GetCmdResp1>
 8014592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014594:	69fb      	ldr	r3, [r7, #28]
}
 8014596:	4618      	mov	r0, r3
 8014598:	3720      	adds	r7, #32
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b088      	sub	sp, #32
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80145a6:	2300      	movs	r3, #0
 80145a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80145aa:	2302      	movs	r3, #2
 80145ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80145ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80145b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145b4:	2300      	movs	r3, #0
 80145b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145be:	f107 0308 	add.w	r3, r7, #8
 80145c2:	4619      	mov	r1, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7ff fd9f 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 f980 	bl	80148d0 <SDMMC_GetCmdResp2>
 80145d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145d2:	69fb      	ldr	r3, [r7, #28]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3720      	adds	r7, #32
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b088      	sub	sp, #32
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80145ea:	2309      	movs	r3, #9
 80145ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80145ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80145f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145f4:	2300      	movs	r3, #0
 80145f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145fe:	f107 0308 	add.w	r3, r7, #8
 8014602:	4619      	mov	r1, r3
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7ff fd7f 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 f960 	bl	80148d0 <SDMMC_GetCmdResp2>
 8014610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014612:	69fb      	ldr	r3, [r7, #28]
}
 8014614:	4618      	mov	r0, r3
 8014616:	3720      	adds	r7, #32
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b088      	sub	sp, #32
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014626:	2300      	movs	r3, #0
 8014628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801462a:	2303      	movs	r3, #3
 801462c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014634:	2300      	movs	r3, #0
 8014636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801463c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801463e:	f107 0308 	add.w	r3, r7, #8
 8014642:	4619      	mov	r1, r3
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7ff fd5f 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801464a:	683a      	ldr	r2, [r7, #0]
 801464c:	2103      	movs	r1, #3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 f9c8 	bl	80149e4 <SDMMC_GetCmdResp6>
 8014654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014656:	69fb      	ldr	r3, [r7, #28]
}
 8014658:	4618      	mov	r0, r3
 801465a:	3720      	adds	r7, #32
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b088      	sub	sp, #32
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801466e:	230d      	movs	r3, #13
 8014670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014678:	2300      	movs	r3, #0
 801467a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801467c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014680:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014682:	f107 0308 	add.w	r3, r7, #8
 8014686:	4619      	mov	r1, r3
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7ff fd3d 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014692:	210d      	movs	r1, #13
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f000 f829 	bl	80146ec <SDMMC_GetCmdResp1>
 801469a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801469c:	69fb      	ldr	r3, [r7, #28]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3720      	adds	r7, #32
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b088      	sub	sp, #32
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80146ae:	2300      	movs	r3, #0
 80146b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80146b2:	230d      	movs	r3, #13
 80146b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146bc:	2300      	movs	r3, #0
 80146be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146c6:	f107 0308 	add.w	r3, r7, #8
 80146ca:	4619      	mov	r1, r3
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f7ff fd1b 	bl	8014108 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80146d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80146d6:	210d      	movs	r1, #13
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 f807 	bl	80146ec <SDMMC_GetCmdResp1>
 80146de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146e0:	69fb      	ldr	r3, [r7, #28]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3720      	adds	r7, #32
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
	...

080146ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b088      	sub	sp, #32
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	460b      	mov	r3, r1
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80146fa:	4b70      	ldr	r3, [pc, #448]	; (80148bc <SDMMC_GetCmdResp1+0x1d0>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	4a70      	ldr	r2, [pc, #448]	; (80148c0 <SDMMC_GetCmdResp1+0x1d4>)
 8014700:	fba2 2303 	umull	r2, r3, r2, r3
 8014704:	0a5a      	lsrs	r2, r3, #9
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	fb02 f303 	mul.w	r3, r2, r3
 801470c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	1e5a      	subs	r2, r3, #1
 8014712:	61fa      	str	r2, [r7, #28]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d102      	bne.n	801471e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801471c:	e0c9      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014722:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014724:	69ba      	ldr	r2, [r7, #24]
 8014726:	4b67      	ldr	r3, [pc, #412]	; (80148c4 <SDMMC_GetCmdResp1+0x1d8>)
 8014728:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801472a:	2b00      	cmp	r3, #0
 801472c:	d0ef      	beq.n	801470e <SDMMC_GetCmdResp1+0x22>
 801472e:	69bb      	ldr	r3, [r7, #24]
 8014730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014734:	2b00      	cmp	r3, #0
 8014736:	d1ea      	bne.n	801470e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801473c:	f003 0304 	and.w	r3, r3, #4
 8014740:	2b00      	cmp	r3, #0
 8014742:	d004      	beq.n	801474e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	2204      	movs	r2, #4
 8014748:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801474a:	2304      	movs	r3, #4
 801474c:	e0b1      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	2b00      	cmp	r3, #0
 8014758:	d004      	beq.n	8014764 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2201      	movs	r2, #1
 801475e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014760:	2301      	movs	r3, #1
 8014762:	e0a6      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	4a58      	ldr	r2, [pc, #352]	; (80148c8 <SDMMC_GetCmdResp1+0x1dc>)
 8014768:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f7ff fcf6 	bl	801415c <SDMMC_GetCommandResponse>
 8014770:	4603      	mov	r3, r0
 8014772:	461a      	mov	r2, r3
 8014774:	7afb      	ldrb	r3, [r7, #11]
 8014776:	4293      	cmp	r3, r2
 8014778:	d001      	beq.n	801477e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801477a:	2301      	movs	r3, #1
 801477c:	e099      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801477e:	2100      	movs	r1, #0
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f7ff fcf8 	bl	8014176 <SDMMC_GetResponse>
 8014786:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014788:	697a      	ldr	r2, [r7, #20]
 801478a:	4b50      	ldr	r3, [pc, #320]	; (80148cc <SDMMC_GetCmdResp1+0x1e0>)
 801478c:	4013      	ands	r3, r2
 801478e:	2b00      	cmp	r3, #0
 8014790:	d101      	bne.n	8014796 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014792:	2300      	movs	r3, #0
 8014794:	e08d      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2b00      	cmp	r3, #0
 801479a:	da02      	bge.n	80147a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801479c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80147a0:	e087      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d001      	beq.n	80147b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80147ac:	2340      	movs	r3, #64	; 0x40
 80147ae:	e080      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d001      	beq.n	80147be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80147ba:	2380      	movs	r3, #128	; 0x80
 80147bc:	e079      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d002      	beq.n	80147ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80147c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80147cc:	e071      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d002      	beq.n	80147de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80147d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147dc:	e069      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d002      	beq.n	80147ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80147e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147ec:	e061      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d002      	beq.n	80147fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80147f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147fc:	e059      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014804:	2b00      	cmp	r3, #0
 8014806:	d002      	beq.n	801480e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801480c:	e051      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014814:	2b00      	cmp	r3, #0
 8014816:	d002      	beq.n	801481e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801481c:	e049      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014824:	2b00      	cmp	r3, #0
 8014826:	d002      	beq.n	801482e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014828:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801482c:	e041      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014834:	2b00      	cmp	r3, #0
 8014836:	d002      	beq.n	801483e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801483c:	e039      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801484c:	e031      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014854:	2b00      	cmp	r3, #0
 8014856:	d002      	beq.n	801485e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801485c:	e029      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014864:	2b00      	cmp	r3, #0
 8014866:	d002      	beq.n	801486e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014868:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801486c:	e021      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014874:	2b00      	cmp	r3, #0
 8014876:	d002      	beq.n	801487e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014878:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801487c:	e019      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014884:	2b00      	cmp	r3, #0
 8014886:	d002      	beq.n	801488e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801488c:	e011      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014894:	2b00      	cmp	r3, #0
 8014896:	d002      	beq.n	801489e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801489c:	e009      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	f003 0308 	and.w	r3, r3, #8
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d002      	beq.n	80148ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80148a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80148ac:	e001      	b.n	80148b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80148ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3720      	adds	r7, #32
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20000018 	.word	0x20000018
 80148c0:	10624dd3 	.word	0x10624dd3
 80148c4:	00200045 	.word	0x00200045
 80148c8:	002000c5 	.word	0x002000c5
 80148cc:	fdffe008 	.word	0xfdffe008

080148d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b085      	sub	sp, #20
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80148d8:	4b1f      	ldr	r3, [pc, #124]	; (8014958 <SDMMC_GetCmdResp2+0x88>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	4a1f      	ldr	r2, [pc, #124]	; (801495c <SDMMC_GetCmdResp2+0x8c>)
 80148de:	fba2 2303 	umull	r2, r3, r2, r3
 80148e2:	0a5b      	lsrs	r3, r3, #9
 80148e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80148e8:	fb02 f303 	mul.w	r3, r2, r3
 80148ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	1e5a      	subs	r2, r3, #1
 80148f2:	60fa      	str	r2, [r7, #12]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d102      	bne.n	80148fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80148f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80148fc:	e026      	b.n	801494c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014902:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801490a:	2b00      	cmp	r3, #0
 801490c:	d0ef      	beq.n	80148ee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1ea      	bne.n	80148ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801491c:	f003 0304 	and.w	r3, r3, #4
 8014920:	2b00      	cmp	r3, #0
 8014922:	d004      	beq.n	801492e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2204      	movs	r2, #4
 8014928:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801492a:	2304      	movs	r3, #4
 801492c:	e00e      	b.n	801494c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014932:	f003 0301 	and.w	r3, r3, #1
 8014936:	2b00      	cmp	r3, #0
 8014938:	d004      	beq.n	8014944 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2201      	movs	r2, #1
 801493e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014940:	2301      	movs	r3, #1
 8014942:	e003      	b.n	801494c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	4a06      	ldr	r2, [pc, #24]	; (8014960 <SDMMC_GetCmdResp2+0x90>)
 8014948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801494a:	2300      	movs	r3, #0
}
 801494c:	4618      	mov	r0, r3
 801494e:	3714      	adds	r7, #20
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr
 8014958:	20000018 	.word	0x20000018
 801495c:	10624dd3 	.word	0x10624dd3
 8014960:	002000c5 	.word	0x002000c5

08014964 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014964:	b480      	push	{r7}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801496c:	4b1a      	ldr	r3, [pc, #104]	; (80149d8 <SDMMC_GetCmdResp3+0x74>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	4a1a      	ldr	r2, [pc, #104]	; (80149dc <SDMMC_GetCmdResp3+0x78>)
 8014972:	fba2 2303 	umull	r2, r3, r2, r3
 8014976:	0a5b      	lsrs	r3, r3, #9
 8014978:	f241 3288 	movw	r2, #5000	; 0x1388
 801497c:	fb02 f303 	mul.w	r3, r2, r3
 8014980:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	1e5a      	subs	r2, r3, #1
 8014986:	60fa      	str	r2, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801498c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014990:	e01b      	b.n	80149ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014996:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d0ef      	beq.n	8014982 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d1ea      	bne.n	8014982 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149b0:	f003 0304 	and.w	r3, r3, #4
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d004      	beq.n	80149c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2204      	movs	r2, #4
 80149bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149be:	2304      	movs	r3, #4
 80149c0:	e003      	b.n	80149ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	4a06      	ldr	r2, [pc, #24]	; (80149e0 <SDMMC_GetCmdResp3+0x7c>)
 80149c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80149c8:	2300      	movs	r3, #0
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3714      	adds	r7, #20
 80149ce:	46bd      	mov	sp, r7
 80149d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop
 80149d8:	20000018 	.word	0x20000018
 80149dc:	10624dd3 	.word	0x10624dd3
 80149e0:	002000c5 	.word	0x002000c5

080149e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b088      	sub	sp, #32
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	460b      	mov	r3, r1
 80149ee:	607a      	str	r2, [r7, #4]
 80149f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80149f2:	4b35      	ldr	r3, [pc, #212]	; (8014ac8 <SDMMC_GetCmdResp6+0xe4>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4a35      	ldr	r2, [pc, #212]	; (8014acc <SDMMC_GetCmdResp6+0xe8>)
 80149f8:	fba2 2303 	umull	r2, r3, r2, r3
 80149fc:	0a5b      	lsrs	r3, r3, #9
 80149fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a02:	fb02 f303 	mul.w	r3, r2, r3
 8014a06:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	1e5a      	subs	r2, r3, #1
 8014a0c:	61fa      	str	r2, [r7, #28]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d102      	bne.n	8014a18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014a16:	e052      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a1c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d0ef      	beq.n	8014a08 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014a28:	69bb      	ldr	r3, [r7, #24]
 8014a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1ea      	bne.n	8014a08 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a36:	f003 0304 	and.w	r3, r3, #4
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d004      	beq.n	8014a48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2204      	movs	r2, #4
 8014a42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a44:	2304      	movs	r3, #4
 8014a46:	e03a      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a4c:	f003 0301 	and.w	r3, r3, #1
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d004      	beq.n	8014a5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2201      	movs	r2, #1
 8014a58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	e02f      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014a5e:	68f8      	ldr	r0, [r7, #12]
 8014a60:	f7ff fb7c 	bl	801415c <SDMMC_GetCommandResponse>
 8014a64:	4603      	mov	r3, r0
 8014a66:	461a      	mov	r2, r3
 8014a68:	7afb      	ldrb	r3, [r7, #11]
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d001      	beq.n	8014a72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a6e:	2301      	movs	r3, #1
 8014a70:	e025      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	4a16      	ldr	r2, [pc, #88]	; (8014ad0 <SDMMC_GetCmdResp6+0xec>)
 8014a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014a78:	2100      	movs	r1, #0
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f7ff fb7b 	bl	8014176 <SDMMC_GetResponse>
 8014a80:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d106      	bne.n	8014a9a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	0c1b      	lsrs	r3, r3, #16
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e011      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014aa8:	e009      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014ab8:	e001      	b.n	8014abe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3720      	adds	r7, #32
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20000018 	.word	0x20000018
 8014acc:	10624dd3 	.word	0x10624dd3
 8014ad0:	002000c5 	.word	0x002000c5

08014ad4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b085      	sub	sp, #20
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014adc:	4b22      	ldr	r3, [pc, #136]	; (8014b68 <SDMMC_GetCmdResp7+0x94>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	4a22      	ldr	r2, [pc, #136]	; (8014b6c <SDMMC_GetCmdResp7+0x98>)
 8014ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ae6:	0a5b      	lsrs	r3, r3, #9
 8014ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8014aec:	fb02 f303 	mul.w	r3, r2, r3
 8014af0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	1e5a      	subs	r2, r3, #1
 8014af6:	60fa      	str	r2, [r7, #12]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d102      	bne.n	8014b02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014afc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b00:	e02c      	b.n	8014b5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b06:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d0ef      	beq.n	8014af2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d1ea      	bne.n	8014af2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b20:	f003 0304 	and.w	r3, r3, #4
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d004      	beq.n	8014b32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2204      	movs	r2, #4
 8014b2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b2e:	2304      	movs	r3, #4
 8014b30:	e014      	b.n	8014b5c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b36:	f003 0301 	and.w	r3, r3, #1
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d004      	beq.n	8014b48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2201      	movs	r2, #1
 8014b42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b44:	2301      	movs	r3, #1
 8014b46:	e009      	b.n	8014b5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d002      	beq.n	8014b5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2240      	movs	r2, #64	; 0x40
 8014b58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014b5a:	2300      	movs	r3, #0

}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3714      	adds	r7, #20
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	20000018 	.word	0x20000018
 8014b6c:	10624dd3 	.word	0x10624dd3

08014b70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b78:	4b11      	ldr	r3, [pc, #68]	; (8014bc0 <SDMMC_GetCmdError+0x50>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4a11      	ldr	r2, [pc, #68]	; (8014bc4 <SDMMC_GetCmdError+0x54>)
 8014b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8014b82:	0a5b      	lsrs	r3, r3, #9
 8014b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b88:	fb02 f303 	mul.w	r3, r2, r3
 8014b8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	1e5a      	subs	r2, r3, #1
 8014b92:	60fa      	str	r2, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b9c:	e009      	b.n	8014bb2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d0f1      	beq.n	8014b8e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	4a06      	ldr	r2, [pc, #24]	; (8014bc8 <SDMMC_GetCmdError+0x58>)
 8014bae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3714      	adds	r7, #20
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop
 8014bc0:	20000018 	.word	0x20000018
 8014bc4:	10624dd3 	.word	0x10624dd3
 8014bc8:	002000c5 	.word	0x002000c5

08014bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014bcc:	b084      	sub	sp, #16
 8014bce:	b580      	push	{r7, lr}
 8014bd0:	b084      	sub	sp, #16
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	6078      	str	r0, [r7, #4]
 8014bd6:	f107 001c 	add.w	r0, r7, #28
 8014bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d120      	bne.n	8014c26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	68da      	ldr	r2, [r3, #12]
 8014bf4:	4b2a      	ldr	r3, [pc, #168]	; (8014ca0 <USB_CoreInit+0xd4>)
 8014bf6:	4013      	ands	r3, r2
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	68db      	ldr	r3, [r3, #12]
 8014c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d105      	bne.n	8014c1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f000 f9ee 	bl	8014ffc <USB_CoreReset>
 8014c20:	4603      	mov	r3, r0
 8014c22:	73fb      	strb	r3, [r7, #15]
 8014c24:	e01a      	b.n	8014c5c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	68db      	ldr	r3, [r3, #12]
 8014c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 f9e2 	bl	8014ffc <USB_CoreReset>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d106      	bne.n	8014c50 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8014c4e:	e005      	b.n	8014c5c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d116      	bne.n	8014c90 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c66:	b29a      	uxth	r2, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014c70:	4b0c      	ldr	r3, [pc, #48]	; (8014ca4 <USB_CoreInit+0xd8>)
 8014c72:	4313      	orrs	r3, r2
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	f043 0206 	orr.w	r2, r3, #6
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	689b      	ldr	r3, [r3, #8]
 8014c88:	f043 0220 	orr.w	r2, r3, #32
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014c9c:	b004      	add	sp, #16
 8014c9e:	4770      	bx	lr
 8014ca0:	ffbdffbf 	.word	0xffbdffbf
 8014ca4:	03ee0000 	.word	0x03ee0000

08014ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	689b      	ldr	r3, [r3, #8]
 8014cb4:	f043 0201 	orr.w	r2, r3, #1
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014cbc:	2300      	movs	r3, #0
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	370c      	adds	r7, #12
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc8:	4770      	bx	lr

08014cca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cca:	b480      	push	{r7}
 8014ccc:	b083      	sub	sp, #12
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	689b      	ldr	r3, [r3, #8]
 8014cd6:	f023 0201 	bic.w	r2, r3, #1
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014cde:	2300      	movs	r3, #0
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014d08:	78fb      	ldrb	r3, [r7, #3]
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d115      	bne.n	8014d3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	f7f0 faac 	bl	8005278 <HAL_Delay>
      ms++;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	3301      	adds	r3, #1
 8014d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f000 f95a 	bl	8014fe0 <USB_GetMode>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b01      	cmp	r3, #1
 8014d30:	d01e      	beq.n	8014d70 <USB_SetCurrentMode+0x84>
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2b31      	cmp	r3, #49	; 0x31
 8014d36:	d9f0      	bls.n	8014d1a <USB_SetCurrentMode+0x2e>
 8014d38:	e01a      	b.n	8014d70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014d3a:	78fb      	ldrb	r3, [r7, #3]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d115      	bne.n	8014d6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014d4c:	2001      	movs	r0, #1
 8014d4e:	f7f0 fa93 	bl	8005278 <HAL_Delay>
      ms++;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	3301      	adds	r3, #1
 8014d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f000 f941 	bl	8014fe0 <USB_GetMode>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d005      	beq.n	8014d70 <USB_SetCurrentMode+0x84>
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b31      	cmp	r3, #49	; 0x31
 8014d68:	d9f0      	bls.n	8014d4c <USB_SetCurrentMode+0x60>
 8014d6a:	e001      	b.n	8014d70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e005      	b.n	8014d7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	2b32      	cmp	r3, #50	; 0x32
 8014d74:	d101      	bne.n	8014d7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014d76:	2301      	movs	r3, #1
 8014d78:	e000      	b.n	8014d7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014d7a:	2300      	movs	r3, #0
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014d84:	b480      	push	{r7}
 8014d86:	b085      	sub	sp, #20
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3301      	adds	r3, #1
 8014d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	4a13      	ldr	r2, [pc, #76]	; (8014de8 <USB_FlushTxFifo+0x64>)
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	d901      	bls.n	8014da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014da0:	2303      	movs	r3, #3
 8014da2:	e01b      	b.n	8014ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	691b      	ldr	r3, [r3, #16]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	daf2      	bge.n	8014d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014dac:	2300      	movs	r3, #0
 8014dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	019b      	lsls	r3, r3, #6
 8014db4:	f043 0220 	orr.w	r2, r3, #32
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	4a08      	ldr	r2, [pc, #32]	; (8014de8 <USB_FlushTxFifo+0x64>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d901      	bls.n	8014dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014dca:	2303      	movs	r3, #3
 8014dcc:	e006      	b.n	8014ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	f003 0320 	and.w	r3, r3, #32
 8014dd6:	2b20      	cmp	r3, #32
 8014dd8:	d0f0      	beq.n	8014dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3714      	adds	r7, #20
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr
 8014de8:	00030d40 	.word	0x00030d40

08014dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014df4:	2300      	movs	r3, #0
 8014df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	4a11      	ldr	r2, [pc, #68]	; (8014e48 <USB_FlushRxFifo+0x5c>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d901      	bls.n	8014e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014e06:	2303      	movs	r3, #3
 8014e08:	e018      	b.n	8014e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	691b      	ldr	r3, [r3, #16]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	daf2      	bge.n	8014df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014e12:	2300      	movs	r3, #0
 8014e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2210      	movs	r2, #16
 8014e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	4a08      	ldr	r2, [pc, #32]	; (8014e48 <USB_FlushRxFifo+0x5c>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d901      	bls.n	8014e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014e2a:	2303      	movs	r3, #3
 8014e2c:	e006      	b.n	8014e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	691b      	ldr	r3, [r3, #16]
 8014e32:	f003 0310 	and.w	r3, r3, #16
 8014e36:	2b10      	cmp	r3, #16
 8014e38:	d0f0      	beq.n	8014e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3714      	adds	r7, #20
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr
 8014e48:	00030d40 	.word	0x00030d40

08014e4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b089      	sub	sp, #36	; 0x24
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	4611      	mov	r1, r2
 8014e58:	461a      	mov	r2, r3
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	71fb      	strb	r3, [r7, #7]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d123      	bne.n	8014eba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e72:	88bb      	ldrh	r3, [r7, #4]
 8014e74:	3303      	adds	r3, #3
 8014e76:	089b      	lsrs	r3, r3, #2
 8014e78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	61bb      	str	r3, [r7, #24]
 8014e7e:	e018      	b.n	8014eb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e80:	79fb      	ldrb	r3, [r7, #7]
 8014e82:	031a      	lsls	r2, r3, #12
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	4413      	add	r3, r2
 8014e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014e94:	69fb      	ldr	r3, [r7, #28]
 8014e96:	3301      	adds	r3, #1
 8014e98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ea6:	69fb      	ldr	r3, [r7, #28]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014eac:	69bb      	ldr	r3, [r7, #24]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	61bb      	str	r3, [r7, #24]
 8014eb2:	69ba      	ldr	r2, [r7, #24]
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d3e2      	bcc.n	8014e80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014eba:	2300      	movs	r3, #0
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3724      	adds	r7, #36	; 0x24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec6:	4770      	bx	lr

08014ec8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b08b      	sub	sp, #44	; 0x2c
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	4613      	mov	r3, r2
 8014ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014eda:	68bb      	ldr	r3, [r7, #8]
 8014edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014ede:	88fb      	ldrh	r3, [r7, #6]
 8014ee0:	089b      	lsrs	r3, r3, #2
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014ee6:	88fb      	ldrh	r3, [r7, #6]
 8014ee8:	f003 0303 	and.w	r3, r3, #3
 8014eec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014eee:	2300      	movs	r3, #0
 8014ef0:	623b      	str	r3, [r7, #32]
 8014ef2:	e014      	b.n	8014f1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014ef4:	69bb      	ldr	r3, [r7, #24]
 8014ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efe:	601a      	str	r2, [r3, #0]
    pDest++;
 8014f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f02:	3301      	adds	r3, #1
 8014f04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f08:	3301      	adds	r3, #1
 8014f0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0e:	3301      	adds	r3, #1
 8014f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	3301      	adds	r3, #1
 8014f16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014f18:	6a3b      	ldr	r3, [r7, #32]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	623b      	str	r3, [r7, #32]
 8014f1e:	6a3a      	ldr	r2, [r7, #32]
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d3e6      	bcc.n	8014ef4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014f26:	8bfb      	ldrh	r3, [r7, #30]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d01e      	beq.n	8014f6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f36:	461a      	mov	r2, r3
 8014f38:	f107 0310 	add.w	r3, r7, #16
 8014f3c:	6812      	ldr	r2, [r2, #0]
 8014f3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014f40:	693a      	ldr	r2, [r7, #16]
 8014f42:	6a3b      	ldr	r3, [r7, #32]
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	00db      	lsls	r3, r3, #3
 8014f48:	fa22 f303 	lsr.w	r3, r2, r3
 8014f4c:	b2da      	uxtb	r2, r3
 8014f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f50:	701a      	strb	r2, [r3, #0]
      i++;
 8014f52:	6a3b      	ldr	r3, [r7, #32]
 8014f54:	3301      	adds	r3, #1
 8014f56:	623b      	str	r3, [r7, #32]
      pDest++;
 8014f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014f5e:	8bfb      	ldrh	r3, [r7, #30]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014f64:	8bfb      	ldrh	r3, [r7, #30]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d1ea      	bne.n	8014f40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	372c      	adds	r7, #44	; 0x2c
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr

08014f78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	695b      	ldr	r3, [r3, #20]
 8014f84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	699b      	ldr	r3, [r3, #24]
 8014f8a:	68fa      	ldr	r2, [r7, #12]
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014f90:	68fb      	ldr	r3, [r7, #12]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3714      	adds	r7, #20
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr

08014f9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014f9e:	b480      	push	{r7}
 8014fa0:	b085      	sub	sp, #20
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	6078      	str	r0, [r7, #4]
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014fae:	78fb      	ldrb	r3, [r7, #3]
 8014fb0:	015a      	lsls	r2, r3, #5
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fba:	689b      	ldr	r3, [r3, #8]
 8014fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014fbe:	78fb      	ldrb	r3, [r7, #3]
 8014fc0:	015a      	lsls	r2, r3, #5
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	68ba      	ldr	r2, [r7, #8]
 8014fce:	4013      	ands	r3, r2
 8014fd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014fd2:	68bb      	ldr	r3, [r7, #8]
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3714      	adds	r7, #20
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr

08014fe0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	695b      	ldr	r3, [r3, #20]
 8014fec:	f003 0301 	and.w	r3, r3, #1
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b085      	sub	sp, #20
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015004:	2300      	movs	r3, #0
 8015006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	3301      	adds	r3, #1
 801500c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	4a13      	ldr	r2, [pc, #76]	; (8015060 <USB_CoreReset+0x64>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d901      	bls.n	801501a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015016:	2303      	movs	r3, #3
 8015018:	e01b      	b.n	8015052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	691b      	ldr	r3, [r3, #16]
 801501e:	2b00      	cmp	r3, #0
 8015020:	daf2      	bge.n	8015008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015022:	2300      	movs	r3, #0
 8015024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	691b      	ldr	r3, [r3, #16]
 801502a:	f043 0201 	orr.w	r2, r3, #1
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	3301      	adds	r3, #1
 8015036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	4a09      	ldr	r2, [pc, #36]	; (8015060 <USB_CoreReset+0x64>)
 801503c:	4293      	cmp	r3, r2
 801503e:	d901      	bls.n	8015044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015040:	2303      	movs	r3, #3
 8015042:	e006      	b.n	8015052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	691b      	ldr	r3, [r3, #16]
 8015048:	f003 0301 	and.w	r3, r3, #1
 801504c:	2b01      	cmp	r3, #1
 801504e:	d0f0      	beq.n	8015032 <USB_CoreReset+0x36>

  return HAL_OK;
 8015050:	2300      	movs	r3, #0
}
 8015052:	4618      	mov	r0, r3
 8015054:	3714      	adds	r7, #20
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	00030d40 	.word	0x00030d40

08015064 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015064:	b084      	sub	sp, #16
 8015066:	b580      	push	{r7, lr}
 8015068:	b086      	sub	sp, #24
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015076:	2300      	movs	r3, #0
 8015078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015084:	461a      	mov	r2, r3
 8015086:	2300      	movs	r3, #0
 8015088:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801508e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801509a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d018      	beq.n	80150e0 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80150ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d10a      	bne.n	80150ca <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80150c2:	f043 0304 	orr.w	r3, r3, #4
 80150c6:	6013      	str	r3, [r2, #0]
 80150c8:	e014      	b.n	80150f4 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	68fa      	ldr	r2, [r7, #12]
 80150d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80150d8:	f023 0304 	bic.w	r3, r3, #4
 80150dc:	6013      	str	r3, [r2, #0]
 80150de:	e009      	b.n	80150f4 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80150ee:	f023 0304 	bic.w	r3, r3, #4
 80150f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80150f4:	2110      	movs	r1, #16
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f7ff fe44 	bl	8014d84 <USB_FlushTxFifo>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d001      	beq.n	8015106 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8015102:	2301      	movs	r3, #1
 8015104:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f7ff fe70 	bl	8014dec <USB_FlushRxFifo>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d001      	beq.n	8015116 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8015112:	2301      	movs	r3, #1
 8015114:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8015116:	2300      	movs	r3, #0
 8015118:	613b      	str	r3, [r7, #16]
 801511a:	e015      	b.n	8015148 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	015a      	lsls	r2, r3, #5
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	4413      	add	r3, r2
 8015124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015128:	461a      	mov	r2, r3
 801512a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801512e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	015a      	lsls	r2, r3, #5
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	4413      	add	r3, r2
 8015138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801513c:	461a      	mov	r2, r3
 801513e:	2300      	movs	r3, #0
 8015140:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	3301      	adds	r3, #1
 8015146:	613b      	str	r3, [r7, #16]
 8015148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514a:	693a      	ldr	r2, [r7, #16]
 801514c:	429a      	cmp	r2, r3
 801514e:	d3e5      	bcc.n	801511c <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2200      	movs	r2, #0
 8015154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801515c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015166:	2b00      	cmp	r3, #0
 8015168:	d00b      	beq.n	8015182 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015170:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	4a13      	ldr	r2, [pc, #76]	; (80151c4 <USB_HostInit+0x160>)
 8015176:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	4a13      	ldr	r2, [pc, #76]	; (80151c8 <USB_HostInit+0x164>)
 801517c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8015180:	e009      	b.n	8015196 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2280      	movs	r2, #128	; 0x80
 8015186:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	4a10      	ldr	r2, [pc, #64]	; (80151cc <USB_HostInit+0x168>)
 801518c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4a0f      	ldr	r2, [pc, #60]	; (80151d0 <USB_HostInit+0x16c>)
 8015192:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015198:	2b00      	cmp	r3, #0
 801519a:	d105      	bne.n	80151a8 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	699b      	ldr	r3, [r3, #24]
 80151a0:	f043 0210 	orr.w	r2, r3, #16
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	699a      	ldr	r2, [r3, #24]
 80151ac:	4b09      	ldr	r3, [pc, #36]	; (80151d4 <USB_HostInit+0x170>)
 80151ae:	4313      	orrs	r3, r2
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80151b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3718      	adds	r7, #24
 80151ba:	46bd      	mov	sp, r7
 80151bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80151c0:	b004      	add	sp, #16
 80151c2:	4770      	bx	lr
 80151c4:	01000200 	.word	0x01000200
 80151c8:	00e00300 	.word	0x00e00300
 80151cc:	00600080 	.word	0x00600080
 80151d0:	004000e0 	.word	0x004000e0
 80151d4:	a3200008 	.word	0xa3200008

080151d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80151d8:	b480      	push	{r7}
 80151da:	b085      	sub	sp, #20
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	460b      	mov	r3, r1
 80151e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80151f6:	f023 0303 	bic.w	r3, r3, #3
 80151fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	78fb      	ldrb	r3, [r7, #3]
 8015206:	f003 0303 	and.w	r3, r3, #3
 801520a:	68f9      	ldr	r1, [r7, #12]
 801520c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8015210:	4313      	orrs	r3, r2
 8015212:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8015214:	78fb      	ldrb	r3, [r7, #3]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d107      	bne.n	801522a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015220:	461a      	mov	r2, r3
 8015222:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8015226:	6053      	str	r3, [r2, #4]
 8015228:	e00c      	b.n	8015244 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801522a:	78fb      	ldrb	r3, [r7, #3]
 801522c:	2b02      	cmp	r3, #2
 801522e:	d107      	bne.n	8015240 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015236:	461a      	mov	r2, r3
 8015238:	f241 7370 	movw	r3, #6000	; 0x1770
 801523c:	6053      	str	r3, [r2, #4]
 801523e:	e001      	b.n	8015244 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8015240:	2301      	movs	r3, #1
 8015242:	e000      	b.n	8015246 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3714      	adds	r7, #20
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr

08015252 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8015252:	b580      	push	{r7, lr}
 8015254:	b084      	sub	sp, #16
 8015256:	af00      	add	r7, sp, #0
 8015258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801525e:	2300      	movs	r3, #0
 8015260:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015272:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	68fa      	ldr	r2, [r7, #12]
 8015278:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801527c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015280:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8015282:	2064      	movs	r0, #100	; 0x64
 8015284:	f7ef fff8 	bl	8005278 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	68fa      	ldr	r2, [r7, #12]
 801528c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015294:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8015296:	200a      	movs	r0, #10
 8015298:	f7ef ffee 	bl	8005278 <HAL_Delay>

  return HAL_OK;
 801529c:	2300      	movs	r3, #0
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3710      	adds	r7, #16
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80152a6:	b480      	push	{r7}
 80152a8:	b085      	sub	sp, #20
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	6078      	str	r0, [r7, #4]
 80152ae:	460b      	mov	r3, r1
 80152b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80152b6:	2300      	movs	r3, #0
 80152b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80152ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d109      	bne.n	80152ea <USB_DriveVbus+0x44>
 80152d6:	78fb      	ldrb	r3, [r7, #3]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d106      	bne.n	80152ea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	68fa      	ldr	r2, [r7, #12]
 80152e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80152e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80152e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80152f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152f4:	d109      	bne.n	801530a <USB_DriveVbus+0x64>
 80152f6:	78fb      	ldrb	r3, [r7, #3]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d106      	bne.n	801530a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015308:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801530a:	2300      	movs	r3, #0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3714      	adds	r7, #20
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015318:	b480      	push	{r7}
 801531a:	b085      	sub	sp, #20
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8015324:	2300      	movs	r3, #0
 8015326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	0c5b      	lsrs	r3, r3, #17
 8015336:	f003 0303 	and.w	r3, r3, #3
}
 801533a:	4618      	mov	r0, r3
 801533c:	3714      	adds	r7, #20
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8015346:	b480      	push	{r7}
 8015348:	b085      	sub	sp, #20
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	b29b      	uxth	r3, r3
}
 801535c:	4618      	mov	r0, r3
 801535e:	3714      	adds	r7, #20
 8015360:	46bd      	mov	sp, r7
 8015362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015366:	4770      	bx	lr

08015368 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b088      	sub	sp, #32
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	4608      	mov	r0, r1
 8015372:	4611      	mov	r1, r2
 8015374:	461a      	mov	r2, r3
 8015376:	4603      	mov	r3, r0
 8015378:	70fb      	strb	r3, [r7, #3]
 801537a:	460b      	mov	r3, r1
 801537c:	70bb      	strb	r3, [r7, #2]
 801537e:	4613      	mov	r3, r2
 8015380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8015382:	2300      	movs	r3, #0
 8015384:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801538a:	78fb      	ldrb	r3, [r7, #3]
 801538c:	015a      	lsls	r2, r3, #5
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	4413      	add	r3, r2
 8015392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015396:	461a      	mov	r2, r3
 8015398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801539c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801539e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80153a2:	2b03      	cmp	r3, #3
 80153a4:	d87e      	bhi.n	80154a4 <USB_HC_Init+0x13c>
 80153a6:	a201      	add	r2, pc, #4	; (adr r2, 80153ac <USB_HC_Init+0x44>)
 80153a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153ac:	080153bd 	.word	0x080153bd
 80153b0:	08015467 	.word	0x08015467
 80153b4:	080153bd 	.word	0x080153bd
 80153b8:	08015429 	.word	0x08015429
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80153bc:	78fb      	ldrb	r3, [r7, #3]
 80153be:	015a      	lsls	r2, r3, #5
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	4413      	add	r3, r2
 80153c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153c8:	461a      	mov	r2, r3
 80153ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80153ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80153d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	da10      	bge.n	80153fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80153d8:	78fb      	ldrb	r3, [r7, #3]
 80153da:	015a      	lsls	r2, r3, #5
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	4413      	add	r3, r2
 80153e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153e4:	68db      	ldr	r3, [r3, #12]
 80153e6:	78fa      	ldrb	r2, [r7, #3]
 80153e8:	0151      	lsls	r1, r2, #5
 80153ea:	693a      	ldr	r2, [r7, #16]
 80153ec:	440a      	add	r2, r1
 80153ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80153f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80153f6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80153f8:	e057      	b.n	80154aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015402:	2b00      	cmp	r3, #0
 8015404:	d051      	beq.n	80154aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8015406:	78fb      	ldrb	r3, [r7, #3]
 8015408:	015a      	lsls	r2, r3, #5
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	4413      	add	r3, r2
 801540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	78fa      	ldrb	r2, [r7, #3]
 8015416:	0151      	lsls	r1, r2, #5
 8015418:	693a      	ldr	r2, [r7, #16]
 801541a:	440a      	add	r2, r1
 801541c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8015424:	60d3      	str	r3, [r2, #12]
      break;
 8015426:	e040      	b.n	80154aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015428:	78fb      	ldrb	r3, [r7, #3]
 801542a:	015a      	lsls	r2, r3, #5
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	4413      	add	r3, r2
 8015430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015434:	461a      	mov	r2, r3
 8015436:	f240 639d 	movw	r3, #1693	; 0x69d
 801543a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801543c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015440:	2b00      	cmp	r3, #0
 8015442:	da34      	bge.n	80154ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015444:	78fb      	ldrb	r3, [r7, #3]
 8015446:	015a      	lsls	r2, r3, #5
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	4413      	add	r3, r2
 801544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	78fa      	ldrb	r2, [r7, #3]
 8015454:	0151      	lsls	r1, r2, #5
 8015456:	693a      	ldr	r2, [r7, #16]
 8015458:	440a      	add	r2, r1
 801545a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015462:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015464:	e023      	b.n	80154ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015466:	78fb      	ldrb	r3, [r7, #3]
 8015468:	015a      	lsls	r2, r3, #5
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	4413      	add	r3, r2
 801546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015472:	461a      	mov	r2, r3
 8015474:	f240 2325 	movw	r3, #549	; 0x225
 8015478:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801547a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801547e:	2b00      	cmp	r3, #0
 8015480:	da17      	bge.n	80154b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8015482:	78fb      	ldrb	r3, [r7, #3]
 8015484:	015a      	lsls	r2, r3, #5
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	4413      	add	r3, r2
 801548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	78fa      	ldrb	r2, [r7, #3]
 8015492:	0151      	lsls	r1, r2, #5
 8015494:	693a      	ldr	r2, [r7, #16]
 8015496:	440a      	add	r2, r1
 8015498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801549c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80154a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80154a2:	e006      	b.n	80154b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80154a4:	2301      	movs	r3, #1
 80154a6:	77fb      	strb	r3, [r7, #31]
      break;
 80154a8:	e004      	b.n	80154b4 <USB_HC_Init+0x14c>
      break;
 80154aa:	bf00      	nop
 80154ac:	e002      	b.n	80154b4 <USB_HC_Init+0x14c>
      break;
 80154ae:	bf00      	nop
 80154b0:	e000      	b.n	80154b4 <USB_HC_Init+0x14c>
      break;
 80154b2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80154b4:	78fb      	ldrb	r3, [r7, #3]
 80154b6:	015a      	lsls	r2, r3, #5
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	4413      	add	r3, r2
 80154bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154c0:	68db      	ldr	r3, [r3, #12]
 80154c2:	78fa      	ldrb	r2, [r7, #3]
 80154c4:	0151      	lsls	r1, r2, #5
 80154c6:	693a      	ldr	r2, [r7, #16]
 80154c8:	440a      	add	r2, r1
 80154ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154ce:	f043 0302 	orr.w	r3, r3, #2
 80154d2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80154da:	699a      	ldr	r2, [r3, #24]
 80154dc:	78fb      	ldrb	r3, [r7, #3]
 80154de:	f003 030f 	and.w	r3, r3, #15
 80154e2:	2101      	movs	r1, #1
 80154e4:	fa01 f303 	lsl.w	r3, r1, r3
 80154e8:	6939      	ldr	r1, [r7, #16]
 80154ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80154ee:	4313      	orrs	r3, r2
 80154f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	699b      	ldr	r3, [r3, #24]
 80154f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80154fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015502:	2b00      	cmp	r3, #0
 8015504:	da03      	bge.n	801550e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8015506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801550a:	61bb      	str	r3, [r7, #24]
 801550c:	e001      	b.n	8015512 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 801550e:	2300      	movs	r3, #0
 8015510:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7ff ff00 	bl	8015318 <USB_GetHostSpeed>
 8015518:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801551a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801551e:	2b02      	cmp	r3, #2
 8015520:	d106      	bne.n	8015530 <USB_HC_Init+0x1c8>
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	2b02      	cmp	r3, #2
 8015526:	d003      	beq.n	8015530 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8015528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801552c:	617b      	str	r3, [r7, #20]
 801552e:	e001      	b.n	8015534 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8015530:	2300      	movs	r3, #0
 8015532:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015534:	787b      	ldrb	r3, [r7, #1]
 8015536:	059b      	lsls	r3, r3, #22
 8015538:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801553c:	78bb      	ldrb	r3, [r7, #2]
 801553e:	02db      	lsls	r3, r3, #11
 8015540:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015544:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015546:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801554a:	049b      	lsls	r3, r3, #18
 801554c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015550:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8015552:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015554:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015558:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801555a:	69bb      	ldr	r3, [r7, #24]
 801555c:	431a      	orrs	r2, r3
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015562:	78fa      	ldrb	r2, [r7, #3]
 8015564:	0151      	lsls	r1, r2, #5
 8015566:	693a      	ldr	r2, [r7, #16]
 8015568:	440a      	add	r2, r1
 801556a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801556e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015572:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8015574:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015578:	2b03      	cmp	r3, #3
 801557a:	d003      	beq.n	8015584 <USB_HC_Init+0x21c>
 801557c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015580:	2b01      	cmp	r3, #1
 8015582:	d10f      	bne.n	80155a4 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015584:	78fb      	ldrb	r3, [r7, #3]
 8015586:	015a      	lsls	r2, r3, #5
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	4413      	add	r3, r2
 801558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	78fa      	ldrb	r2, [r7, #3]
 8015594:	0151      	lsls	r1, r2, #5
 8015596:	693a      	ldr	r2, [r7, #16]
 8015598:	440a      	add	r2, r1
 801559a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801559e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80155a2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80155a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3720      	adds	r7, #32
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	bf00      	nop

080155b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08c      	sub	sp, #48	; 0x30
 80155b4:	af02      	add	r7, sp, #8
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	4613      	mov	r3, r2
 80155bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	785b      	ldrb	r3, [r3, #1]
 80155c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80155c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d02d      	beq.n	8015636 <USB_HC_StartXfer+0x86>
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	791b      	ldrb	r3, [r3, #4]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d129      	bne.n	8015636 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80155e2:	79fb      	ldrb	r3, [r7, #7]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d117      	bne.n	8015618 <USB_HC_StartXfer+0x68>
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	79db      	ldrb	r3, [r3, #7]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d003      	beq.n	80155f8 <USB_HC_StartXfer+0x48>
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	79db      	ldrb	r3, [r3, #7]
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d10f      	bne.n	8015618 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	015a      	lsls	r2, r3, #5
 80155fc:	6a3b      	ldr	r3, [r7, #32]
 80155fe:	4413      	add	r3, r2
 8015600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	69fa      	ldr	r2, [r7, #28]
 8015608:	0151      	lsls	r1, r2, #5
 801560a:	6a3a      	ldr	r2, [r7, #32]
 801560c:	440a      	add	r2, r1
 801560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015616:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8015618:	79fb      	ldrb	r3, [r7, #7]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d10b      	bne.n	8015636 <USB_HC_StartXfer+0x86>
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	795b      	ldrb	r3, [r3, #5]
 8015622:	2b01      	cmp	r3, #1
 8015624:	d107      	bne.n	8015636 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	785b      	ldrb	r3, [r3, #1]
 801562a:	4619      	mov	r1, r3
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f000 fa0f 	bl	8015a50 <USB_DoPing>
      return HAL_OK;
 8015632:	2300      	movs	r3, #0
 8015634:	e0f8      	b.n	8015828 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	695b      	ldr	r3, [r3, #20]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d018      	beq.n	8015670 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	695b      	ldr	r3, [r3, #20]
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	8912      	ldrh	r2, [r2, #8]
 8015646:	4413      	add	r3, r2
 8015648:	3b01      	subs	r3, #1
 801564a:	68ba      	ldr	r2, [r7, #8]
 801564c:	8912      	ldrh	r2, [r2, #8]
 801564e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015652:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8015654:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015656:	8b7b      	ldrh	r3, [r7, #26]
 8015658:	429a      	cmp	r2, r3
 801565a:	d90b      	bls.n	8015674 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801565c:	8b7b      	ldrh	r3, [r7, #26]
 801565e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015660:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015662:	68ba      	ldr	r2, [r7, #8]
 8015664:	8912      	ldrh	r2, [r2, #8]
 8015666:	fb03 f202 	mul.w	r2, r3, r2
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	611a      	str	r2, [r3, #16]
 801566e:	e001      	b.n	8015674 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8015670:	2301      	movs	r3, #1
 8015672:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	78db      	ldrb	r3, [r3, #3]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d007      	beq.n	801568c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801567c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	8912      	ldrh	r2, [r2, #8]
 8015682:	fb03 f202 	mul.w	r2, r3, r2
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	611a      	str	r2, [r3, #16]
 801568a:	e003      	b.n	8015694 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	695a      	ldr	r2, [r3, #20]
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	691b      	ldr	r3, [r3, #16]
 8015698:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801569c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801569e:	04d9      	lsls	r1, r3, #19
 80156a0:	4b63      	ldr	r3, [pc, #396]	; (8015830 <USB_HC_StartXfer+0x280>)
 80156a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	7a9b      	ldrb	r3, [r3, #10]
 80156aa:	075b      	lsls	r3, r3, #29
 80156ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156b0:	69f9      	ldr	r1, [r7, #28]
 80156b2:	0148      	lsls	r0, r1, #5
 80156b4:	6a39      	ldr	r1, [r7, #32]
 80156b6:	4401      	add	r1, r0
 80156b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80156bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80156c0:	79fb      	ldrb	r3, [r7, #7]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d009      	beq.n	80156da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	68d9      	ldr	r1, [r3, #12]
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	015a      	lsls	r2, r3, #5
 80156ce:	6a3b      	ldr	r3, [r7, #32]
 80156d0:	4413      	add	r3, r2
 80156d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156d6:	460a      	mov	r2, r1
 80156d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80156da:	6a3b      	ldr	r3, [r7, #32]
 80156dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80156e0:	689b      	ldr	r3, [r3, #8]
 80156e2:	f003 0301 	and.w	r3, r3, #1
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	bf0c      	ite	eq
 80156ea:	2301      	moveq	r3, #1
 80156ec:	2300      	movne	r3, #0
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	015a      	lsls	r2, r3, #5
 80156f6:	6a3b      	ldr	r3, [r7, #32]
 80156f8:	4413      	add	r3, r2
 80156fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	69fa      	ldr	r2, [r7, #28]
 8015702:	0151      	lsls	r1, r2, #5
 8015704:	6a3a      	ldr	r2, [r7, #32]
 8015706:	440a      	add	r2, r1
 8015708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801570c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015710:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	015a      	lsls	r2, r3, #5
 8015716:	6a3b      	ldr	r3, [r7, #32]
 8015718:	4413      	add	r3, r2
 801571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	7e7b      	ldrb	r3, [r7, #25]
 8015722:	075b      	lsls	r3, r3, #29
 8015724:	69f9      	ldr	r1, [r7, #28]
 8015726:	0148      	lsls	r0, r1, #5
 8015728:	6a39      	ldr	r1, [r7, #32]
 801572a:	4401      	add	r1, r0
 801572c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8015730:	4313      	orrs	r3, r2
 8015732:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015734:	69fb      	ldr	r3, [r7, #28]
 8015736:	015a      	lsls	r2, r3, #5
 8015738:	6a3b      	ldr	r3, [r7, #32]
 801573a:	4413      	add	r3, r2
 801573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801574a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	78db      	ldrb	r3, [r3, #3]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d004      	beq.n	801575e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801575a:	613b      	str	r3, [r7, #16]
 801575c:	e003      	b.n	8015766 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015764:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801576c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	015a      	lsls	r2, r3, #5
 8015772:	6a3b      	ldr	r3, [r7, #32]
 8015774:	4413      	add	r3, r2
 8015776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801577a:	461a      	mov	r2, r3
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8015780:	79fb      	ldrb	r3, [r7, #7]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d001      	beq.n	801578a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015786:	2300      	movs	r3, #0
 8015788:	e04e      	b.n	8015828 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	78db      	ldrb	r3, [r3, #3]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d149      	bne.n	8015826 <USB_HC_StartXfer+0x276>
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	695b      	ldr	r3, [r3, #20]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d045      	beq.n	8015826 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	79db      	ldrb	r3, [r3, #7]
 801579e:	2b03      	cmp	r3, #3
 80157a0:	d830      	bhi.n	8015804 <USB_HC_StartXfer+0x254>
 80157a2:	a201      	add	r2, pc, #4	; (adr r2, 80157a8 <USB_HC_StartXfer+0x1f8>)
 80157a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a8:	080157b9 	.word	0x080157b9
 80157ac:	080157dd 	.word	0x080157dd
 80157b0:	080157b9 	.word	0x080157b9
 80157b4:	080157dd 	.word	0x080157dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	695b      	ldr	r3, [r3, #20]
 80157bc:	3303      	adds	r3, #3
 80157be:	089b      	lsrs	r3, r3, #2
 80157c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80157c2:	8afa      	ldrh	r2, [r7, #22]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d91c      	bls.n	8015808 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	699b      	ldr	r3, [r3, #24]
 80157d2:	f043 0220 	orr.w	r2, r3, #32
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80157da:	e015      	b.n	8015808 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	695b      	ldr	r3, [r3, #20]
 80157e0:	3303      	adds	r3, #3
 80157e2:	089b      	lsrs	r3, r3, #2
 80157e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80157e6:	8afa      	ldrh	r2, [r7, #22]
 80157e8:	6a3b      	ldr	r3, [r7, #32]
 80157ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80157ee:	691b      	ldr	r3, [r3, #16]
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d90a      	bls.n	801580c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	699b      	ldr	r3, [r3, #24]
 80157fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	619a      	str	r2, [r3, #24]
        }
        break;
 8015802:	e003      	b.n	801580c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015804:	bf00      	nop
 8015806:	e002      	b.n	801580e <USB_HC_StartXfer+0x25e>
        break;
 8015808:	bf00      	nop
 801580a:	e000      	b.n	801580e <USB_HC_StartXfer+0x25e>
        break;
 801580c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	68d9      	ldr	r1, [r3, #12]
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	785a      	ldrb	r2, [r3, #1]
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	695b      	ldr	r3, [r3, #20]
 801581a:	b29b      	uxth	r3, r3
 801581c:	2000      	movs	r0, #0
 801581e:	9000      	str	r0, [sp, #0]
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f7ff fb13 	bl	8014e4c <USB_WritePacket>
  }

  return HAL_OK;
 8015826:	2300      	movs	r3, #0
}
 8015828:	4618      	mov	r0, r3
 801582a:	3728      	adds	r7, #40	; 0x28
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	1ff80000 	.word	0x1ff80000

08015834 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015834:	b480      	push	{r7}
 8015836:	b085      	sub	sp, #20
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015846:	695b      	ldr	r3, [r3, #20]
 8015848:	b29b      	uxth	r3, r3
}
 801584a:	4618      	mov	r0, r3
 801584c:	3714      	adds	r7, #20
 801584e:	46bd      	mov	sp, r7
 8015850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015854:	4770      	bx	lr

08015856 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015856:	b480      	push	{r7}
 8015858:	b089      	sub	sp, #36	; 0x24
 801585a:	af00      	add	r7, sp, #0
 801585c:	6078      	str	r0, [r7, #4]
 801585e:	460b      	mov	r3, r1
 8015860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015866:	78fb      	ldrb	r3, [r7, #3]
 8015868:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801586a:	2300      	movs	r3, #0
 801586c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	015a      	lsls	r2, r3, #5
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	4413      	add	r3, r2
 8015876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	0c9b      	lsrs	r3, r3, #18
 801587e:	f003 0303 	and.w	r3, r3, #3
 8015882:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	015a      	lsls	r2, r3, #5
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	4413      	add	r3, r2
 801588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	0fdb      	lsrs	r3, r3, #31
 8015894:	f003 0301 	and.w	r3, r3, #1
 8015898:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	689b      	ldr	r3, [r3, #8]
 801589e:	f003 0320 	and.w	r3, r3, #32
 80158a2:	2b20      	cmp	r3, #32
 80158a4:	d104      	bne.n	80158b0 <USB_HC_Halt+0x5a>
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d101      	bne.n	80158b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	e0c8      	b.n	8015a42 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d002      	beq.n	80158bc <USB_HC_Halt+0x66>
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	2b02      	cmp	r3, #2
 80158ba:	d163      	bne.n	8015984 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80158bc:	69bb      	ldr	r3, [r7, #24]
 80158be:	015a      	lsls	r2, r3, #5
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	4413      	add	r3, r2
 80158c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	69ba      	ldr	r2, [r7, #24]
 80158cc:	0151      	lsls	r1, r2, #5
 80158ce:	69fa      	ldr	r2, [r7, #28]
 80158d0:	440a      	add	r2, r1
 80158d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80158d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80158da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	f003 0320 	and.w	r3, r3, #32
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	f040 80ab 	bne.w	8015a40 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d133      	bne.n	801595e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80158f6:	69bb      	ldr	r3, [r7, #24]
 80158f8:	015a      	lsls	r2, r3, #5
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	4413      	add	r3, r2
 80158fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	69ba      	ldr	r2, [r7, #24]
 8015906:	0151      	lsls	r1, r2, #5
 8015908:	69fa      	ldr	r2, [r7, #28]
 801590a:	440a      	add	r2, r1
 801590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015914:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	015a      	lsls	r2, r3, #5
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	4413      	add	r3, r2
 801591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	69ba      	ldr	r2, [r7, #24]
 8015926:	0151      	lsls	r1, r2, #5
 8015928:	69fa      	ldr	r2, [r7, #28]
 801592a:	440a      	add	r2, r1
 801592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015934:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	3301      	adds	r3, #1
 801593a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015942:	d81d      	bhi.n	8015980 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015944:	69bb      	ldr	r3, [r7, #24]
 8015946:	015a      	lsls	r2, r3, #5
 8015948:	69fb      	ldr	r3, [r7, #28]
 801594a:	4413      	add	r3, r2
 801594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801595a:	d0ec      	beq.n	8015936 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801595c:	e070      	b.n	8015a40 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	015a      	lsls	r2, r3, #5
 8015962:	69fb      	ldr	r3, [r7, #28]
 8015964:	4413      	add	r3, r2
 8015966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	69ba      	ldr	r2, [r7, #24]
 801596e:	0151      	lsls	r1, r2, #5
 8015970:	69fa      	ldr	r2, [r7, #28]
 8015972:	440a      	add	r2, r1
 8015974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801597c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801597e:	e05f      	b.n	8015a40 <USB_HC_Halt+0x1ea>
            break;
 8015980:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015982:	e05d      	b.n	8015a40 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	015a      	lsls	r2, r3, #5
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	4413      	add	r3, r2
 801598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	69ba      	ldr	r2, [r7, #24]
 8015994:	0151      	lsls	r1, r2, #5
 8015996:	69fa      	ldr	r2, [r7, #28]
 8015998:	440a      	add	r2, r1
 801599a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801599e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80159a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80159aa:	691b      	ldr	r3, [r3, #16]
 80159ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d133      	bne.n	8015a1c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	015a      	lsls	r2, r3, #5
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	4413      	add	r3, r2
 80159bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	69ba      	ldr	r2, [r7, #24]
 80159c4:	0151      	lsls	r1, r2, #5
 80159c6:	69fa      	ldr	r2, [r7, #28]
 80159c8:	440a      	add	r2, r1
 80159ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80159ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80159d4:	69bb      	ldr	r3, [r7, #24]
 80159d6:	015a      	lsls	r2, r3, #5
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	4413      	add	r3, r2
 80159dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	69ba      	ldr	r2, [r7, #24]
 80159e4:	0151      	lsls	r1, r2, #5
 80159e6:	69fa      	ldr	r2, [r7, #28]
 80159e8:	440a      	add	r2, r1
 80159ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80159ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80159f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	3301      	adds	r3, #1
 80159f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015a00:	d81d      	bhi.n	8015a3e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	015a      	lsls	r2, r3, #5
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	4413      	add	r3, r2
 8015a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a18:	d0ec      	beq.n	80159f4 <USB_HC_Halt+0x19e>
 8015a1a:	e011      	b.n	8015a40 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015a1c:	69bb      	ldr	r3, [r7, #24]
 8015a1e:	015a      	lsls	r2, r3, #5
 8015a20:	69fb      	ldr	r3, [r7, #28]
 8015a22:	4413      	add	r3, r2
 8015a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	69ba      	ldr	r2, [r7, #24]
 8015a2c:	0151      	lsls	r1, r2, #5
 8015a2e:	69fa      	ldr	r2, [r7, #28]
 8015a30:	440a      	add	r2, r1
 8015a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a3a:	6013      	str	r3, [r2, #0]
 8015a3c:	e000      	b.n	8015a40 <USB_HC_Halt+0x1ea>
          break;
 8015a3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8015a40:	2300      	movs	r3, #0
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3724      	adds	r7, #36	; 0x24
 8015a46:	46bd      	mov	sp, r7
 8015a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4c:	4770      	bx	lr
	...

08015a50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b087      	sub	sp, #28
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015a60:	78fb      	ldrb	r3, [r7, #3]
 8015a62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015a64:	2301      	movs	r3, #1
 8015a66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	04da      	lsls	r2, r3, #19
 8015a6c:	4b15      	ldr	r3, [pc, #84]	; (8015ac4 <USB_DoPing+0x74>)
 8015a6e:	4013      	ands	r3, r2
 8015a70:	693a      	ldr	r2, [r7, #16]
 8015a72:	0151      	lsls	r1, r2, #5
 8015a74:	697a      	ldr	r2, [r7, #20]
 8015a76:	440a      	add	r2, r1
 8015a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	015a      	lsls	r2, r3, #5
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	4413      	add	r3, r2
 8015a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015a98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015aa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	015a      	lsls	r2, r3, #5
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015aae:	461a      	mov	r2, r3
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015ab4:	2300      	movs	r3, #0
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	371c      	adds	r7, #28
 8015aba:	46bd      	mov	sp, r7
 8015abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac0:	4770      	bx	lr
 8015ac2:	bf00      	nop
 8015ac4:	1ff80000 	.word	0x1ff80000

08015ac8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b088      	sub	sp, #32
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7ff f8f4 	bl	8014cca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015ae2:	2110      	movs	r1, #16
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7ff f94d 	bl	8014d84 <USB_FlushTxFifo>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d001      	beq.n	8015af4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015af0:	2301      	movs	r3, #1
 8015af2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f7ff f979 	bl	8014dec <USB_FlushRxFifo>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d001      	beq.n	8015b04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015b00:	2301      	movs	r3, #1
 8015b02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015b04:	2300      	movs	r3, #0
 8015b06:	61bb      	str	r3, [r7, #24]
 8015b08:	e01f      	b.n	8015b4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	015a      	lsls	r2, r3, #5
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	4413      	add	r3, r2
 8015b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015b30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015b32:	69bb      	ldr	r3, [r7, #24]
 8015b34:	015a      	lsls	r2, r3, #5
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	4413      	add	r3, r2
 8015b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b3e:	461a      	mov	r2, r3
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	3301      	adds	r3, #1
 8015b48:	61bb      	str	r3, [r7, #24]
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	2b0f      	cmp	r3, #15
 8015b4e:	d9dc      	bls.n	8015b0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015b50:	2300      	movs	r3, #0
 8015b52:	61bb      	str	r3, [r7, #24]
 8015b54:	e034      	b.n	8015bc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	015a      	lsls	r2, r3, #5
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	4413      	add	r3, r2
 8015b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015b7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015b7e:	69bb      	ldr	r3, [r7, #24]
 8015b80:	015a      	lsls	r2, r3, #5
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	4413      	add	r3, r2
 8015b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	3301      	adds	r3, #1
 8015b94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015b9c:	d80c      	bhi.n	8015bb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	015a      	lsls	r2, r3, #5
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bb4:	d0ec      	beq.n	8015b90 <USB_StopHost+0xc8>
 8015bb6:	e000      	b.n	8015bba <USB_StopHost+0xf2>
        break;
 8015bb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015bba:	69bb      	ldr	r3, [r7, #24]
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	61bb      	str	r3, [r7, #24]
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	2b0f      	cmp	r3, #15
 8015bc4:	d9c7      	bls.n	8015b56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015bcc:	461a      	mov	r2, r3
 8015bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015bda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f7ff f863 	bl	8014ca8 <USB_EnableGlobalInt>

  return ret;
 8015be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3720      	adds	r7, #32
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d101      	bne.n	8015c04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015c00:	2302      	movs	r3, #2
 8015c02:	e029      	b.n	8015c58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	79fa      	ldrb	r2, [r7, #7]
 8015c08:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2200      	movs	r2, #0
 8015c18:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	f000 f81f 	bl	8015c60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2200      	movs	r2, #0
 8015c26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2200      	movs	r2, #0
 8015c36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d003      	beq.n	8015c50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	68ba      	ldr	r2, [r7, #8]
 8015c4c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015c50:	68f8      	ldr	r0, [r7, #12]
 8015c52:	f7ef f861 	bl	8004d18 <USBH_LL_Init>

  return USBH_OK;
 8015c56:	2300      	movs	r3, #0
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	60fb      	str	r3, [r7, #12]
 8015c70:	e00a      	b.n	8015c88 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	4413      	add	r3, r2
 8015c7e:	2200      	movs	r2, #0
 8015c80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	3301      	adds	r3, #1
 8015c86:	60fb      	str	r3, [r7, #12]
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	2b0f      	cmp	r3, #15
 8015c8c:	d9f1      	bls.n	8015c72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015c8e:	2300      	movs	r3, #0
 8015c90:	60fb      	str	r3, [r7, #12]
 8015c92:	e009      	b.n	8015ca8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	4413      	add	r3, r2
 8015c9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	60fb      	str	r3, [r7, #12]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cae:	d3f1      	bcc.n	8015c94 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2200      	movs	r2, #0
 8015cba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2201      	movs	r2, #1
 8015cc0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2201      	movs	r2, #1
 8015cce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2240      	movs	r2, #64	; 0x40
 8015cd4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2201      	movs	r2, #1
 8015ce8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	331c      	adds	r3, #28
 8015d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015d04:	2100      	movs	r1, #0
 8015d06:	4618      	mov	r0, r3
 8015d08:	f001 fd96 	bl	8017838 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d16:	2100      	movs	r1, #0
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f001 fd8d 	bl	8017838 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015d24:	2212      	movs	r2, #18
 8015d26:	2100      	movs	r1, #0
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f001 fd85 	bl	8017838 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015d34:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015d38:	2100      	movs	r1, #0
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f001 fd7c 	bl	8017838 <memset>

  return USBH_OK;
 8015d40:	2300      	movs	r3, #0
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015d4a:	b480      	push	{r7}
 8015d4c:	b085      	sub	sp, #20
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
 8015d52:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015d54:	2300      	movs	r3, #0
 8015d56:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d017      	beq.n	8015d8e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d10f      	bne.n	8015d88 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015d6e:	1c59      	adds	r1, r3, #1
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015d7c:	6839      	ldr	r1, [r7, #0]
 8015d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015d82:	2300      	movs	r3, #0
 8015d84:	73fb      	strb	r3, [r7, #15]
 8015d86:	e004      	b.n	8015d92 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015d88:	2302      	movs	r3, #2
 8015d8a:	73fb      	strb	r3, [r7, #15]
 8015d8c:	e001      	b.n	8015d92 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015d8e:	2302      	movs	r3, #2
 8015d90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3714      	adds	r7, #20
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9e:	4770      	bx	lr

08015da0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015da0:	b480      	push	{r7}
 8015da2:	b085      	sub	sp, #20
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	460b      	mov	r3, r1
 8015daa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015dac:	2300      	movs	r3, #0
 8015dae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015db6:	78fa      	ldrb	r2, [r7, #3]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d204      	bcs.n	8015dc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	78fa      	ldrb	r2, [r7, #3]
 8015dc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015dc4:	e001      	b.n	8015dca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3714      	adds	r7, #20
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd6:	4770      	bx	lr

08015dd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015dd8:	b480      	push	{r7}
 8015dda:	b087      	sub	sp, #28
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
 8015de0:	4608      	mov	r0, r1
 8015de2:	4611      	mov	r1, r2
 8015de4:	461a      	mov	r2, r3
 8015de6:	4603      	mov	r3, r0
 8015de8:	70fb      	strb	r3, [r7, #3]
 8015dea:	460b      	mov	r3, r1
 8015dec:	70bb      	strb	r3, [r7, #2]
 8015dee:	4613      	mov	r3, r2
 8015df0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015df2:	2300      	movs	r3, #0
 8015df4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015df6:	2300      	movs	r3, #0
 8015df8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015e00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015e02:	e025      	b.n	8015e50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	221a      	movs	r2, #26
 8015e08:	fb02 f303 	mul.w	r3, r2, r3
 8015e0c:	3308      	adds	r3, #8
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	4413      	add	r3, r2
 8015e12:	3302      	adds	r3, #2
 8015e14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	795b      	ldrb	r3, [r3, #5]
 8015e1a:	78fa      	ldrb	r2, [r7, #3]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d002      	beq.n	8015e26 <USBH_FindInterface+0x4e>
 8015e20:	78fb      	ldrb	r3, [r7, #3]
 8015e22:	2bff      	cmp	r3, #255	; 0xff
 8015e24:	d111      	bne.n	8015e4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015e2a:	78ba      	ldrb	r2, [r7, #2]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d002      	beq.n	8015e36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e30:	78bb      	ldrb	r3, [r7, #2]
 8015e32:	2bff      	cmp	r3, #255	; 0xff
 8015e34:	d109      	bne.n	8015e4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e3a:	787a      	ldrb	r2, [r7, #1]
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d002      	beq.n	8015e46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015e40:	787b      	ldrb	r3, [r7, #1]
 8015e42:	2bff      	cmp	r3, #255	; 0xff
 8015e44:	d101      	bne.n	8015e4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015e46:	7dfb      	ldrb	r3, [r7, #23]
 8015e48:	e006      	b.n	8015e58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015e4a:	7dfb      	ldrb	r3, [r7, #23]
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015e50:	7dfb      	ldrb	r3, [r7, #23]
 8015e52:	2b09      	cmp	r3, #9
 8015e54:	d9d6      	bls.n	8015e04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015e56:	23ff      	movs	r3, #255	; 0xff
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	371c      	adds	r7, #28
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f7ee ff8f 	bl	8004d90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015e72:	2101      	movs	r1, #1
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7ef f8a8 	bl	8004fca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f7ef f89b 	bl	8004fca <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7ee ff96 	bl	8004dc6 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	791b      	ldrb	r3, [r3, #4]
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f001 fb6c 	bl	801757e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	795b      	ldrb	r3, [r3, #5]
 8015eaa:	4619      	mov	r1, r3
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f001 fb66 	bl	801757e <USBH_FreePipe>

  return USBH_OK;
 8015eb2:	2300      	movs	r3, #0
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3708      	adds	r7, #8
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b088      	sub	sp, #32
 8015ec0:	af04      	add	r7, sp, #16
 8015ec2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015ec4:	2302      	movs	r3, #2
 8015ec6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d102      	bne.n	8015ede <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2203      	movs	r2, #3
 8015edc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	2b0b      	cmp	r3, #11
 8015ee6:	f200 81c0 	bhi.w	801626a <USBH_Process+0x3ae>
 8015eea:	a201      	add	r2, pc, #4	; (adr r2, 8015ef0 <USBH_Process+0x34>)
 8015eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ef0:	08015f21 	.word	0x08015f21
 8015ef4:	08015f53 	.word	0x08015f53
 8015ef8:	08015fbb 	.word	0x08015fbb
 8015efc:	08016205 	.word	0x08016205
 8015f00:	0801626b 	.word	0x0801626b
 8015f04:	0801605f 	.word	0x0801605f
 8015f08:	080161ab 	.word	0x080161ab
 8015f0c:	08016095 	.word	0x08016095
 8015f10:	080160b5 	.word	0x080160b5
 8015f14:	080160d5 	.word	0x080160d5
 8015f18:	08016119 	.word	0x08016119
 8015f1c:	080161ed 	.word	0x080161ed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	f000 81a0 	beq.w	801626e <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2201      	movs	r2, #1
 8015f32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015f34:	20c8      	movs	r0, #200	; 0xc8
 8015f36:	f7ef f88f 	bl	8005058 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f7ee ff85 	bl	8004e4a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015f50:	e18d      	b.n	801626e <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015f58:	2b01      	cmp	r3, #1
 8015f5a:	d107      	bne.n	8015f6c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2202      	movs	r2, #2
 8015f68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015f6a:	e18f      	b.n	801628c <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015f76:	d914      	bls.n	8015fa2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015f7e:	3301      	adds	r3, #1
 8015f80:	b2da      	uxtb	r2, r3
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015f8e:	2b03      	cmp	r3, #3
 8015f90:	d903      	bls.n	8015f9a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	220d      	movs	r2, #13
 8015f96:	701a      	strb	r2, [r3, #0]
      break;
 8015f98:	e178      	b.n	801628c <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	701a      	strb	r2, [r3, #0]
      break;
 8015fa0:	e174      	b.n	801628c <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015fa8:	f103 020a 	add.w	r2, r3, #10
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015fb2:	200a      	movs	r0, #10
 8015fb4:	f7ef f850 	bl	8005058 <USBH_Delay>
      break;
 8015fb8:	e168      	b.n	801628c <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d005      	beq.n	8015fd0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fca:	2104      	movs	r1, #4
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015fd0:	2064      	movs	r0, #100	; 0x64
 8015fd2:	f7ef f841 	bl	8005058 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f7ee ff10 	bl	8004dfc <USBH_LL_GetSpeed>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	461a      	mov	r2, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2205      	movs	r2, #5
 8015fea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8015fec:	2100      	movs	r1, #0
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f001 faa3 	bl	801753a <USBH_AllocPipe>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8015ffc:	2180      	movs	r1, #128	; 0x80
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f001 fa9b 	bl	801753a <USBH_AllocPipe>
 8016004:	4603      	mov	r3, r0
 8016006:	461a      	mov	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	7919      	ldrb	r1, [r3, #4]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016020:	b292      	uxth	r2, r2
 8016022:	9202      	str	r2, [sp, #8]
 8016024:	2200      	movs	r2, #0
 8016026:	9201      	str	r2, [sp, #4]
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	4603      	mov	r3, r0
 801602c:	2280      	movs	r2, #128	; 0x80
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f001 fa54 	bl	80174dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	7959      	ldrb	r1, [r3, #5]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016048:	b292      	uxth	r2, r2
 801604a:	9202      	str	r2, [sp, #8]
 801604c:	2200      	movs	r2, #0
 801604e:	9201      	str	r2, [sp, #4]
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	4603      	mov	r3, r0
 8016054:	2200      	movs	r2, #0
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f001 fa40 	bl	80174dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801605c:	e116      	b.n	801628c <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f000 f91a 	bl	8016298 <USBH_HandleEnum>
 8016064:	4603      	mov	r3, r0
 8016066:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8016068:	7bbb      	ldrb	r3, [r7, #14]
 801606a:	b2db      	uxtb	r3, r3
 801606c:	2b00      	cmp	r3, #0
 801606e:	f040 8100 	bne.w	8016272 <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2200      	movs	r2, #0
 8016076:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8016080:	2b01      	cmp	r3, #1
 8016082:	d103      	bne.n	801608c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2208      	movs	r2, #8
 8016088:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801608a:	e0f2      	b.n	8016272 <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2207      	movs	r2, #7
 8016090:	701a      	strb	r2, [r3, #0]
      break;
 8016092:	e0ee      	b.n	8016272 <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801609a:	2b00      	cmp	r3, #0
 801609c:	f000 80eb 	beq.w	8016276 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80160a6:	2101      	movs	r1, #1
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2208      	movs	r2, #8
 80160b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80160b2:	e0e0      	b.n	8016276 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	4619      	mov	r1, r3
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 fc41 	bl	8016946 <USBH_SetCfg>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	f040 80d7 	bne.w	801627a <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2209      	movs	r2, #9
 80160d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80160d2:	e0d2      	b.n	801627a <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80160da:	f003 0320 	and.w	r3, r3, #32
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d016      	beq.n	8016110 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80160e2:	2101      	movs	r1, #1
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f000 fc51 	bl	801698c <USBH_SetFeature>
 80160ea:	4603      	mov	r3, r0
 80160ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80160ee:	7bbb      	ldrb	r3, [r7, #14]
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d103      	bne.n	80160fe <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	220a      	movs	r2, #10
 80160fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80160fc:	e0bf      	b.n	801627e <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 80160fe:	7bbb      	ldrb	r3, [r7, #14]
 8016100:	b2db      	uxtb	r3, r3
 8016102:	2b03      	cmp	r3, #3
 8016104:	f040 80bb 	bne.w	801627e <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	220a      	movs	r2, #10
 801610c:	701a      	strb	r2, [r3, #0]
      break;
 801610e:	e0b6      	b.n	801627e <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	220a      	movs	r2, #10
 8016114:	701a      	strb	r2, [r3, #0]
      break;
 8016116:	e0b2      	b.n	801627e <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 80af 	beq.w	8016282 <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801612c:	2300      	movs	r3, #0
 801612e:	73fb      	strb	r3, [r7, #15]
 8016130:	e018      	b.n	8016164 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8016132:	7bfa      	ldrb	r2, [r7, #15]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f502 7289 	add.w	r2, r2, #274	; 0x112
 801613a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801613e:	791a      	ldrb	r2, [r3, #4]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8016146:	429a      	cmp	r2, r3
 8016148:	d109      	bne.n	801615e <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 801614a:	7bfa      	ldrb	r2, [r7, #15]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8016152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 801615c:	e005      	b.n	801616a <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801615e:	7bfb      	ldrb	r3, [r7, #15]
 8016160:	3301      	adds	r3, #1
 8016162:	73fb      	strb	r3, [r7, #15]
 8016164:	7bfb      	ldrb	r3, [r7, #15]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d0e3      	beq.n	8016132 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016170:	2b00      	cmp	r3, #0
 8016172:	d016      	beq.n	80161a2 <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801617a:	689b      	ldr	r3, [r3, #8]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	4798      	blx	r3
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d109      	bne.n	801619a <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2206      	movs	r2, #6
 801618a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016192:	2103      	movs	r1, #3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016198:	e073      	b.n	8016282 <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	220d      	movs	r2, #13
 801619e:	701a      	strb	r2, [r3, #0]
      break;
 80161a0:	e06f      	b.n	8016282 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	220d      	movs	r2, #13
 80161a6:	701a      	strb	r2, [r3, #0]
      break;
 80161a8:	e06b      	b.n	8016282 <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d017      	beq.n	80161e4 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161ba:	691b      	ldr	r3, [r3, #16]
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	4798      	blx	r3
 80161c0:	4603      	mov	r3, r0
 80161c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80161c4:	7bbb      	ldrb	r3, [r7, #14]
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d103      	bne.n	80161d4 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	220b      	movs	r2, #11
 80161d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80161d2:	e058      	b.n	8016286 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 80161d4:	7bbb      	ldrb	r3, [r7, #14]
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	2b02      	cmp	r3, #2
 80161da:	d154      	bne.n	8016286 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	220d      	movs	r2, #13
 80161e0:	701a      	strb	r2, [r3, #0]
      break;
 80161e2:	e050      	b.n	8016286 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	220d      	movs	r2, #13
 80161e8:	701a      	strb	r2, [r3, #0]
      break;
 80161ea:	e04c      	b.n	8016286 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d049      	beq.n	801628a <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161fc:	695b      	ldr	r3, [r3, #20]
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	4798      	blx	r3
      }
      break;
 8016202:	e042      	b.n	801628a <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2200      	movs	r2, #0
 8016208:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f7ff fd27 	bl	8015c60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016218:	2b00      	cmp	r3, #0
 801621a:	d009      	beq.n	8016230 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2200      	movs	r2, #0
 801622c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016236:	2b00      	cmp	r3, #0
 8016238:	d005      	beq.n	8016246 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016240:	2105      	movs	r1, #5
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b01      	cmp	r3, #1
 8016250:	d107      	bne.n	8016262 <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	2200      	movs	r2, #0
 8016256:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f7ff fe02 	bl	8015e64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016260:	e014      	b.n	801628c <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f7ee fd94 	bl	8004d90 <USBH_LL_Start>
      break;
 8016268:	e010      	b.n	801628c <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 801626a:	bf00      	nop
 801626c:	e00e      	b.n	801628c <USBH_Process+0x3d0>
      break;
 801626e:	bf00      	nop
 8016270:	e00c      	b.n	801628c <USBH_Process+0x3d0>
      break;
 8016272:	bf00      	nop
 8016274:	e00a      	b.n	801628c <USBH_Process+0x3d0>
    break;
 8016276:	bf00      	nop
 8016278:	e008      	b.n	801628c <USBH_Process+0x3d0>
      break;
 801627a:	bf00      	nop
 801627c:	e006      	b.n	801628c <USBH_Process+0x3d0>
      break;
 801627e:	bf00      	nop
 8016280:	e004      	b.n	801628c <USBH_Process+0x3d0>
      break;
 8016282:	bf00      	nop
 8016284:	e002      	b.n	801628c <USBH_Process+0x3d0>
      break;
 8016286:	bf00      	nop
 8016288:	e000      	b.n	801628c <USBH_Process+0x3d0>
      break;
 801628a:	bf00      	nop
  }
  return USBH_OK;
 801628c:	2300      	movs	r3, #0
}
 801628e:	4618      	mov	r0, r3
 8016290:	3710      	adds	r7, #16
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}
 8016296:	bf00      	nop

08016298 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af04      	add	r7, sp, #16
 801629e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80162a0:	2301      	movs	r3, #1
 80162a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80162a4:	2301      	movs	r3, #1
 80162a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	785b      	ldrb	r3, [r3, #1]
 80162ac:	2b07      	cmp	r3, #7
 80162ae:	f200 81c1 	bhi.w	8016634 <USBH_HandleEnum+0x39c>
 80162b2:	a201      	add	r2, pc, #4	; (adr r2, 80162b8 <USBH_HandleEnum+0x20>)
 80162b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162b8:	080162d9 	.word	0x080162d9
 80162bc:	08016397 	.word	0x08016397
 80162c0:	08016401 	.word	0x08016401
 80162c4:	0801648f 	.word	0x0801648f
 80162c8:	080164f9 	.word	0x080164f9
 80162cc:	08016569 	.word	0x08016569
 80162d0:	080165af 	.word	0x080165af
 80162d4:	080165f5 	.word	0x080165f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80162d8:	2108      	movs	r1, #8
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f000 fa50 	bl	8016780 <USBH_Get_DevDesc>
 80162e0:	4603      	mov	r3, r0
 80162e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80162e4:	7bbb      	ldrb	r3, [r7, #14]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d130      	bne.n	801634c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2201      	movs	r2, #1
 80162f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	7919      	ldrb	r1, [r3, #4]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801630e:	b292      	uxth	r2, r2
 8016310:	9202      	str	r2, [sp, #8]
 8016312:	2200      	movs	r2, #0
 8016314:	9201      	str	r2, [sp, #4]
 8016316:	9300      	str	r3, [sp, #0]
 8016318:	4603      	mov	r3, r0
 801631a:	2280      	movs	r2, #128	; 0x80
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f001 f8dd 	bl	80174dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	7959      	ldrb	r1, [r3, #5]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016336:	b292      	uxth	r2, r2
 8016338:	9202      	str	r2, [sp, #8]
 801633a:	2200      	movs	r2, #0
 801633c:	9201      	str	r2, [sp, #4]
 801633e:	9300      	str	r3, [sp, #0]
 8016340:	4603      	mov	r3, r0
 8016342:	2200      	movs	r2, #0
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f001 f8c9 	bl	80174dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801634a:	e175      	b.n	8016638 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801634c:	7bbb      	ldrb	r3, [r7, #14]
 801634e:	2b03      	cmp	r3, #3
 8016350:	f040 8172 	bne.w	8016638 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801635a:	3301      	adds	r3, #1
 801635c:	b2da      	uxtb	r2, r3
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801636a:	2b03      	cmp	r3, #3
 801636c:	d903      	bls.n	8016376 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	220d      	movs	r2, #13
 8016372:	701a      	strb	r2, [r3, #0]
      break;
 8016374:	e160      	b.n	8016638 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	795b      	ldrb	r3, [r3, #5]
 801637a:	4619      	mov	r1, r3
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f001 f8fe 	bl	801757e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	791b      	ldrb	r3, [r3, #4]
 8016386:	4619      	mov	r1, r3
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f001 f8f8 	bl	801757e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	701a      	strb	r2, [r3, #0]
      break;
 8016394:	e150      	b.n	8016638 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8016396:	2112      	movs	r1, #18
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 f9f1 	bl	8016780 <USBH_Get_DevDesc>
 801639e:	4603      	mov	r3, r0
 80163a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80163a2:	7bbb      	ldrb	r3, [r7, #14]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d103      	bne.n	80163b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2202      	movs	r2, #2
 80163ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80163ae:	e145      	b.n	801663c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80163b0:	7bbb      	ldrb	r3, [r7, #14]
 80163b2:	2b03      	cmp	r3, #3
 80163b4:	f040 8142 	bne.w	801663c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80163be:	3301      	adds	r3, #1
 80163c0:	b2da      	uxtb	r2, r3
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80163ce:	2b03      	cmp	r3, #3
 80163d0:	d903      	bls.n	80163da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	220d      	movs	r2, #13
 80163d6:	701a      	strb	r2, [r3, #0]
      break;
 80163d8:	e130      	b.n	801663c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	795b      	ldrb	r3, [r3, #5]
 80163de:	4619      	mov	r1, r3
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f001 f8cc 	bl	801757e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	791b      	ldrb	r3, [r3, #4]
 80163ea:	4619      	mov	r1, r3
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f001 f8c6 	bl	801757e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2200      	movs	r2, #0
 80163f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2200      	movs	r2, #0
 80163fc:	701a      	strb	r2, [r3, #0]
      break;
 80163fe:	e11d      	b.n	801663c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8016400:	2101      	movs	r1, #1
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 fa7b 	bl	80168fe <USBH_SetAddress>
 8016408:	4603      	mov	r3, r0
 801640a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801640c:	7bbb      	ldrb	r3, [r7, #14]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d132      	bne.n	8016478 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8016412:	2002      	movs	r0, #2
 8016414:	f7ee fe20 	bl	8005058 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	2201      	movs	r2, #1
 801641c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2203      	movs	r2, #3
 8016424:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	7919      	ldrb	r1, [r3, #4]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801643a:	b292      	uxth	r2, r2
 801643c:	9202      	str	r2, [sp, #8]
 801643e:	2200      	movs	r2, #0
 8016440:	9201      	str	r2, [sp, #4]
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	4603      	mov	r3, r0
 8016446:	2280      	movs	r2, #128	; 0x80
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f001 f847 	bl	80174dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	7959      	ldrb	r1, [r3, #5]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016462:	b292      	uxth	r2, r2
 8016464:	9202      	str	r2, [sp, #8]
 8016466:	2200      	movs	r2, #0
 8016468:	9201      	str	r2, [sp, #4]
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	4603      	mov	r3, r0
 801646e:	2200      	movs	r2, #0
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f001 f833 	bl	80174dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016476:	e0e3      	b.n	8016640 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016478:	7bbb      	ldrb	r3, [r7, #14]
 801647a:	2b03      	cmp	r3, #3
 801647c:	f040 80e0 	bne.w	8016640 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	220d      	movs	r2, #13
 8016484:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2200      	movs	r2, #0
 801648a:	705a      	strb	r2, [r3, #1]
      break;
 801648c:	e0d8      	b.n	8016640 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801648e:	2109      	movs	r1, #9
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 f9a1 	bl	80167d8 <USBH_Get_CfgDesc>
 8016496:	4603      	mov	r3, r0
 8016498:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801649a:	7bbb      	ldrb	r3, [r7, #14]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d103      	bne.n	80164a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2204      	movs	r2, #4
 80164a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80164a6:	e0cd      	b.n	8016644 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80164a8:	7bbb      	ldrb	r3, [r7, #14]
 80164aa:	2b03      	cmp	r3, #3
 80164ac:	f040 80ca 	bne.w	8016644 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80164b6:	3301      	adds	r3, #1
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80164c6:	2b03      	cmp	r3, #3
 80164c8:	d903      	bls.n	80164d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	220d      	movs	r2, #13
 80164ce:	701a      	strb	r2, [r3, #0]
      break;
 80164d0:	e0b8      	b.n	8016644 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	795b      	ldrb	r3, [r3, #5]
 80164d6:	4619      	mov	r1, r3
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f001 f850 	bl	801757e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	791b      	ldrb	r3, [r3, #4]
 80164e2:	4619      	mov	r1, r3
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f001 f84a 	bl	801757e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2200      	movs	r2, #0
 80164ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2200      	movs	r2, #0
 80164f4:	701a      	strb	r2, [r3, #0]
      break;
 80164f6:	e0a5      	b.n	8016644 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80164fe:	4619      	mov	r1, r3
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f000 f969 	bl	80167d8 <USBH_Get_CfgDesc>
 8016506:	4603      	mov	r3, r0
 8016508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801650a:	7bbb      	ldrb	r3, [r7, #14]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d103      	bne.n	8016518 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2205      	movs	r2, #5
 8016514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016516:	e097      	b.n	8016648 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016518:	7bbb      	ldrb	r3, [r7, #14]
 801651a:	2b03      	cmp	r3, #3
 801651c:	f040 8094 	bne.w	8016648 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016526:	3301      	adds	r3, #1
 8016528:	b2da      	uxtb	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016536:	2b03      	cmp	r3, #3
 8016538:	d903      	bls.n	8016542 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	220d      	movs	r2, #13
 801653e:	701a      	strb	r2, [r3, #0]
      break;
 8016540:	e082      	b.n	8016648 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	795b      	ldrb	r3, [r3, #5]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f001 f818 	bl	801757e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	791b      	ldrb	r3, [r3, #4]
 8016552:	4619      	mov	r1, r3
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f001 f812 	bl	801757e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2200      	movs	r2, #0
 801655e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	701a      	strb	r2, [r3, #0]
      break;
 8016566:	e06f      	b.n	8016648 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801656e:	2b00      	cmp	r3, #0
 8016570:	d019      	beq.n	80165a6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801657e:	23ff      	movs	r3, #255	; 0xff
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f000 f953 	bl	801682c <USBH_Get_StringDesc>
 8016586:	4603      	mov	r3, r0
 8016588:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801658a:	7bbb      	ldrb	r3, [r7, #14]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d103      	bne.n	8016598 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2206      	movs	r2, #6
 8016594:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016596:	e059      	b.n	801664c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016598:	7bbb      	ldrb	r3, [r7, #14]
 801659a:	2b03      	cmp	r3, #3
 801659c:	d156      	bne.n	801664c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2206      	movs	r2, #6
 80165a2:	705a      	strb	r2, [r3, #1]
      break;
 80165a4:	e052      	b.n	801664c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2206      	movs	r2, #6
 80165aa:	705a      	strb	r2, [r3, #1]
      break;
 80165ac:	e04e      	b.n	801664c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d019      	beq.n	80165ec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80165c4:	23ff      	movs	r3, #255	; 0xff
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f000 f930 	bl	801682c <USBH_Get_StringDesc>
 80165cc:	4603      	mov	r3, r0
 80165ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80165d0:	7bbb      	ldrb	r3, [r7, #14]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d103      	bne.n	80165de <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2207      	movs	r2, #7
 80165da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80165dc:	e038      	b.n	8016650 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80165de:	7bbb      	ldrb	r3, [r7, #14]
 80165e0:	2b03      	cmp	r3, #3
 80165e2:	d135      	bne.n	8016650 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2207      	movs	r2, #7
 80165e8:	705a      	strb	r2, [r3, #1]
      break;
 80165ea:	e031      	b.n	8016650 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2207      	movs	r2, #7
 80165f0:	705a      	strb	r2, [r3, #1]
      break;
 80165f2:	e02d      	b.n	8016650 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d017      	beq.n	801662e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801660a:	23ff      	movs	r3, #255	; 0xff
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f000 f90d 	bl	801682c <USBH_Get_StringDesc>
 8016612:	4603      	mov	r3, r0
 8016614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016616:	7bbb      	ldrb	r3, [r7, #14]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d102      	bne.n	8016622 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801661c:	2300      	movs	r3, #0
 801661e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8016620:	e018      	b.n	8016654 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016622:	7bbb      	ldrb	r3, [r7, #14]
 8016624:	2b03      	cmp	r3, #3
 8016626:	d115      	bne.n	8016654 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8016628:	2300      	movs	r3, #0
 801662a:	73fb      	strb	r3, [r7, #15]
      break;
 801662c:	e012      	b.n	8016654 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801662e:	2300      	movs	r3, #0
 8016630:	73fb      	strb	r3, [r7, #15]
      break;
 8016632:	e00f      	b.n	8016654 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8016634:	bf00      	nop
 8016636:	e00e      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016638:	bf00      	nop
 801663a:	e00c      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 801663c:	bf00      	nop
 801663e:	e00a      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016640:	bf00      	nop
 8016642:	e008      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016644:	bf00      	nop
 8016646:	e006      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016648:	bf00      	nop
 801664a:	e004      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 801664c:	bf00      	nop
 801664e:	e002      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016650:	bf00      	nop
 8016652:	e000      	b.n	8016656 <USBH_HandleEnum+0x3be>
      break;
 8016654:	bf00      	nop
  }
  return Status;
 8016656:	7bfb      	ldrb	r3, [r7, #15]
}
 8016658:	4618      	mov	r0, r3
 801665a:	3710      	adds	r7, #16
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}

08016660 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	683a      	ldr	r2, [r7, #0]
 801666e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8016672:	bf00      	nop
 8016674:	370c      	adds	r7, #12
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr

0801667e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b082      	sub	sp, #8
 8016682:	af00      	add	r7, sp, #0
 8016684:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801668c:	1c5a      	adds	r2, r3, #1
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 f804 	bl	80166a2 <USBH_HandleSof>
}
 801669a:	bf00      	nop
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b082      	sub	sp, #8
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	2b0b      	cmp	r3, #11
 80166b2:	d10a      	bne.n	80166ca <USBH_HandleSof+0x28>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d005      	beq.n	80166ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80166c4:	699b      	ldr	r3, [r3, #24]
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	4798      	blx	r3
  }
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80166d2:	b480      	push	{r7}
 80166d4:	b083      	sub	sp, #12
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2201      	movs	r2, #1
 80166de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80166e2:	bf00      	nop
}
 80166e4:	370c      	adds	r7, #12
 80166e6:	46bd      	mov	sp, r7
 80166e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ec:	4770      	bx	lr

080166ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80166ee:	b480      	push	{r7}
 80166f0:	b083      	sub	sp, #12
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2200      	movs	r2, #0
 80166fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80166fe:	bf00      	nop
}
 8016700:	370c      	adds	r7, #12
 8016702:	46bd      	mov	sp, r7
 8016704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016708:	4770      	bx	lr

0801670a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801670a:	b480      	push	{r7}
 801670c:	b083      	sub	sp, #12
 801670e:	af00      	add	r7, sp, #0
 8016710:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2201      	movs	r2, #1
 8016716:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2200      	movs	r2, #0
 801671e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2200      	movs	r2, #0
 8016726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801672a:	2300      	movs	r3, #0
}
 801672c:	4618      	mov	r0, r3
 801672e:	370c      	adds	r7, #12
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr

08016738 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2201      	movs	r2, #1
 8016744:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2200      	movs	r2, #0
 801674c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2200      	movs	r2, #0
 8016754:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7ee fb34 	bl	8004dc6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	791b      	ldrb	r3, [r3, #4]
 8016762:	4619      	mov	r1, r3
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f000 ff0a 	bl	801757e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	795b      	ldrb	r3, [r3, #5]
 801676e:	4619      	mov	r1, r3
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 ff04 	bl	801757e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b086      	sub	sp, #24
 8016784:	af02      	add	r7, sp, #8
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	460b      	mov	r3, r1
 801678a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801678c:	887b      	ldrh	r3, [r7, #2]
 801678e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016792:	d901      	bls.n	8016798 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016794:	2303      	movs	r3, #3
 8016796:	e01b      	b.n	80167d0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801679e:	887b      	ldrh	r3, [r7, #2]
 80167a0:	9300      	str	r3, [sp, #0]
 80167a2:	4613      	mov	r3, r2
 80167a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167a8:	2100      	movs	r1, #0
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 f872 	bl	8016894 <USBH_GetDescriptor>
 80167b0:	4603      	mov	r3, r0
 80167b2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80167b4:	7bfb      	ldrb	r3, [r7, #15]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d109      	bne.n	80167ce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80167c0:	887a      	ldrh	r2, [r7, #2]
 80167c2:	4619      	mov	r1, r3
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 f929 	bl	8016a1c <USBH_ParseDevDesc>
 80167ca:	4603      	mov	r3, r0
 80167cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80167ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3710      	adds	r7, #16
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b086      	sub	sp, #24
 80167dc:	af02      	add	r7, sp, #8
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	460b      	mov	r3, r1
 80167e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	331c      	adds	r3, #28
 80167e8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80167ea:	887b      	ldrh	r3, [r7, #2]
 80167ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167f0:	d901      	bls.n	80167f6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80167f2:	2303      	movs	r3, #3
 80167f4:	e016      	b.n	8016824 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80167f6:	887b      	ldrh	r3, [r7, #2]
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016800:	2100      	movs	r1, #0
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f000 f846 	bl	8016894 <USBH_GetDescriptor>
 8016808:	4603      	mov	r3, r0
 801680a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801680c:	7bfb      	ldrb	r3, [r7, #15]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d107      	bne.n	8016822 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016812:	887b      	ldrh	r3, [r7, #2]
 8016814:	461a      	mov	r2, r3
 8016816:	68b9      	ldr	r1, [r7, #8]
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f000 f9b3 	bl	8016b84 <USBH_ParseCfgDesc>
 801681e:	4603      	mov	r3, r0
 8016820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016822:	7bfb      	ldrb	r3, [r7, #15]
}
 8016824:	4618      	mov	r0, r3
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b088      	sub	sp, #32
 8016830:	af02      	add	r7, sp, #8
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	461a      	mov	r2, r3
 8016838:	460b      	mov	r3, r1
 801683a:	72fb      	strb	r3, [r7, #11]
 801683c:	4613      	mov	r3, r2
 801683e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016840:	893b      	ldrh	r3, [r7, #8]
 8016842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016846:	d802      	bhi.n	801684e <USBH_Get_StringDesc+0x22>
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d101      	bne.n	8016852 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801684e:	2303      	movs	r3, #3
 8016850:	e01c      	b.n	801688c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016852:	7afb      	ldrb	r3, [r7, #11]
 8016854:	b29b      	uxth	r3, r3
 8016856:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801685a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016862:	893b      	ldrh	r3, [r7, #8]
 8016864:	9300      	str	r3, [sp, #0]
 8016866:	460b      	mov	r3, r1
 8016868:	2100      	movs	r1, #0
 801686a:	68f8      	ldr	r0, [r7, #12]
 801686c:	f000 f812 	bl	8016894 <USBH_GetDescriptor>
 8016870:	4603      	mov	r3, r0
 8016872:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016874:	7dfb      	ldrb	r3, [r7, #23]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d107      	bne.n	801688a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016880:	893a      	ldrh	r2, [r7, #8]
 8016882:	6879      	ldr	r1, [r7, #4]
 8016884:	4618      	mov	r0, r3
 8016886:	f000 fb8a 	bl	8016f9e <USBH_ParseStringDesc>
  }

  return status;
 801688a:	7dfb      	ldrb	r3, [r7, #23]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	607b      	str	r3, [r7, #4]
 801689e:	460b      	mov	r3, r1
 80168a0:	72fb      	strb	r3, [r7, #11]
 80168a2:	4613      	mov	r3, r2
 80168a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	789b      	ldrb	r3, [r3, #2]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	d11c      	bne.n	80168e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80168ae:	7afb      	ldrb	r3, [r7, #11]
 80168b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80168b4:	b2da      	uxtb	r2, r3
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2206      	movs	r2, #6
 80168be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	893a      	ldrh	r2, [r7, #8]
 80168c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80168c6:	893b      	ldrh	r3, [r7, #8]
 80168c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80168cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80168d0:	d104      	bne.n	80168dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	f240 4209 	movw	r2, #1033	; 0x409
 80168d8:	829a      	strh	r2, [r3, #20]
 80168da:	e002      	b.n	80168e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	2200      	movs	r2, #0
 80168e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	8b3a      	ldrh	r2, [r7, #24]
 80168e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80168e8:	8b3b      	ldrh	r3, [r7, #24]
 80168ea:	461a      	mov	r2, r3
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f000 fba3 	bl	801703a <USBH_CtlReq>
 80168f4:	4603      	mov	r3, r0
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}

080168fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80168fe:	b580      	push	{r7, lr}
 8016900:	b082      	sub	sp, #8
 8016902:	af00      	add	r7, sp, #0
 8016904:	6078      	str	r0, [r7, #4]
 8016906:	460b      	mov	r3, r1
 8016908:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	789b      	ldrb	r3, [r3, #2]
 801690e:	2b01      	cmp	r3, #1
 8016910:	d10f      	bne.n	8016932 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2205      	movs	r2, #5
 801691c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801691e:	78fb      	ldrb	r3, [r7, #3]
 8016920:	b29a      	uxth	r2, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2200      	movs	r2, #0
 8016930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016932:	2200      	movs	r2, #0
 8016934:	2100      	movs	r1, #0
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 fb7f 	bl	801703a <USBH_CtlReq>
 801693c:	4603      	mov	r3, r0
}
 801693e:	4618      	mov	r0, r3
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b082      	sub	sp, #8
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
 801694e:	460b      	mov	r3, r1
 8016950:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	789b      	ldrb	r3, [r3, #2]
 8016956:	2b01      	cmp	r3, #1
 8016958:	d10e      	bne.n	8016978 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2200      	movs	r2, #0
 801695e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2209      	movs	r2, #9
 8016964:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	887a      	ldrh	r2, [r7, #2]
 801696a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2200      	movs	r2, #0
 8016970:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016978:	2200      	movs	r2, #0
 801697a:	2100      	movs	r1, #0
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 fb5c 	bl	801703a <USBH_CtlReq>
 8016982:	4603      	mov	r3, r0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	460b      	mov	r3, r1
 8016996:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	789b      	ldrb	r3, [r3, #2]
 801699c:	2b01      	cmp	r3, #1
 801699e:	d10f      	bne.n	80169c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2200      	movs	r2, #0
 80169a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2203      	movs	r2, #3
 80169aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80169ac:	78fb      	ldrb	r3, [r7, #3]
 80169ae:	b29a      	uxth	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2200      	movs	r2, #0
 80169b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2200      	movs	r2, #0
 80169be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80169c0:	2200      	movs	r2, #0
 80169c2:	2100      	movs	r1, #0
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fb38 	bl	801703a <USBH_CtlReq>
 80169ca:	4603      	mov	r3, r0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	460b      	mov	r3, r1
 80169de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	789b      	ldrb	r3, [r3, #2]
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	d10f      	bne.n	8016a08 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2202      	movs	r2, #2
 80169ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2201      	movs	r2, #1
 80169f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2200      	movs	r2, #0
 80169f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80169fa:	78fb      	ldrb	r3, [r7, #3]
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016a08:	2200      	movs	r2, #0
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f000 fb14 	bl	801703a <USBH_CtlReq>
 8016a12:	4603      	mov	r3, r0
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3708      	adds	r7, #8
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b087      	sub	sp, #28
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	60f8      	str	r0, [r7, #12]
 8016a24:	60b9      	str	r1, [r7, #8]
 8016a26:	4613      	mov	r3, r2
 8016a28:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8016a30:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016a32:	2300      	movs	r3, #0
 8016a34:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d101      	bne.n	8016a40 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8016a3c:	2302      	movs	r3, #2
 8016a3e:	e098      	b.n	8016b72 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	781a      	ldrb	r2, [r3, #0]
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	785a      	ldrb	r2, [r3, #1]
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	3302      	adds	r3, #2
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	3303      	adds	r3, #3
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	021b      	lsls	r3, r3, #8
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	4313      	orrs	r3, r2
 8016a66:	b29a      	uxth	r2, r3
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016a6c:	68bb      	ldr	r3, [r7, #8]
 8016a6e:	791a      	ldrb	r2, [r3, #4]
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	795a      	ldrb	r2, [r3, #5]
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	799a      	ldrb	r2, [r3, #6]
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	79da      	ldrb	r2, [r3, #7]
 8016a88:	693b      	ldr	r3, [r7, #16]
 8016a8a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d004      	beq.n	8016aa0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016a9c:	2b01      	cmp	r3, #1
 8016a9e:	d11b      	bne.n	8016ad8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	79db      	ldrb	r3, [r3, #7]
 8016aa4:	2b20      	cmp	r3, #32
 8016aa6:	dc0f      	bgt.n	8016ac8 <USBH_ParseDevDesc+0xac>
 8016aa8:	2b08      	cmp	r3, #8
 8016aaa:	db0f      	blt.n	8016acc <USBH_ParseDevDesc+0xb0>
 8016aac:	3b08      	subs	r3, #8
 8016aae:	4a34      	ldr	r2, [pc, #208]	; (8016b80 <USBH_ParseDevDesc+0x164>)
 8016ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8016ab4:	f003 0301 	and.w	r3, r3, #1
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	bf14      	ite	ne
 8016abc:	2301      	movne	r3, #1
 8016abe:	2300      	moveq	r3, #0
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <USBH_ParseDevDesc+0xb8>
 8016ac6:	e001      	b.n	8016acc <USBH_ParseDevDesc+0xb0>
 8016ac8:	2b40      	cmp	r3, #64	; 0x40
 8016aca:	d003      	beq.n	8016ad4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	2208      	movs	r2, #8
 8016ad0:	71da      	strb	r2, [r3, #7]
        break;
 8016ad2:	e000      	b.n	8016ad6 <USBH_ParseDevDesc+0xba>
        break;
 8016ad4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016ad6:	e00e      	b.n	8016af6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016ade:	2b02      	cmp	r3, #2
 8016ae0:	d107      	bne.n	8016af2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	79db      	ldrb	r3, [r3, #7]
 8016ae6:	2b08      	cmp	r3, #8
 8016ae8:	d005      	beq.n	8016af6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	2208      	movs	r2, #8
 8016aee:	71da      	strb	r2, [r3, #7]
 8016af0:	e001      	b.n	8016af6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016af2:	2303      	movs	r3, #3
 8016af4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016af6:	88fb      	ldrh	r3, [r7, #6]
 8016af8:	2b08      	cmp	r3, #8
 8016afa:	d939      	bls.n	8016b70 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	3308      	adds	r3, #8
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	3309      	adds	r3, #9
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	b29b      	uxth	r3, r3
 8016b0c:	021b      	lsls	r3, r3, #8
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	4313      	orrs	r3, r2
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	330a      	adds	r3, #10
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	330b      	adds	r3, #11
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	021b      	lsls	r3, r3, #8
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	4313      	orrs	r3, r2
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	330c      	adds	r3, #12
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	b29a      	uxth	r2, r3
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	330d      	adds	r3, #13
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	021b      	lsls	r3, r3, #8
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	4313      	orrs	r3, r2
 8016b4a:	b29a      	uxth	r2, r3
 8016b4c:	693b      	ldr	r3, [r7, #16]
 8016b4e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	7b9a      	ldrb	r2, [r3, #14]
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	7bda      	ldrb	r2, [r3, #15]
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	7c1a      	ldrb	r2, [r3, #16]
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	7c5a      	ldrb	r2, [r3, #17]
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	371c      	adds	r7, #28
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop
 8016b80:	01000101 	.word	0x01000101

08016b84 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b08c      	sub	sp, #48	; 0x30
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	4613      	mov	r3, r2
 8016b90:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016b98:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d101      	bne.n	8016bb6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016bb2:	2302      	movs	r3, #2
 8016bb4:	e0d7      	b.n	8016d66 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	781a      	ldrb	r2, [r3, #0]
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	785a      	ldrb	r2, [r3, #1]
 8016bc6:	6a3b      	ldr	r3, [r7, #32]
 8016bc8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	3302      	adds	r3, #2
 8016bce:	781b      	ldrb	r3, [r3, #0]
 8016bd0:	b29a      	uxth	r2, r3
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	3303      	adds	r3, #3
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	021b      	lsls	r3, r3, #8
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	4313      	orrs	r3, r2
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016be6:	bf28      	it	cs
 8016be8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	6a3b      	ldr	r3, [r7, #32]
 8016bf0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	791a      	ldrb	r2, [r3, #4]
 8016bf6:	6a3b      	ldr	r3, [r7, #32]
 8016bf8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	795a      	ldrb	r2, [r3, #5]
 8016bfe:	6a3b      	ldr	r3, [r7, #32]
 8016c00:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	799a      	ldrb	r2, [r3, #6]
 8016c06:	6a3b      	ldr	r3, [r7, #32]
 8016c08:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	79da      	ldrb	r2, [r3, #7]
 8016c0e:	6a3b      	ldr	r3, [r7, #32]
 8016c10:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	7a1a      	ldrb	r2, [r3, #8]
 8016c16:	6a3b      	ldr	r3, [r7, #32]
 8016c18:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8016c1a:	6a3b      	ldr	r3, [r7, #32]
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	2b09      	cmp	r3, #9
 8016c20:	d002      	beq.n	8016c28 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016c22:	6a3b      	ldr	r3, [r7, #32]
 8016c24:	2209      	movs	r2, #9
 8016c26:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016c28:	88fb      	ldrh	r3, [r7, #6]
 8016c2a:	2b09      	cmp	r3, #9
 8016c2c:	f240 8099 	bls.w	8016d62 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8016c30:	2309      	movs	r3, #9
 8016c32:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016c34:	2300      	movs	r3, #0
 8016c36:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016c38:	e07d      	b.n	8016d36 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016c3a:	f107 0316 	add.w	r3, r7, #22
 8016c3e:	4619      	mov	r1, r3
 8016c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c42:	f000 f9df 	bl	8017004 <USBH_GetNextDesc>
 8016c46:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c4a:	785b      	ldrb	r3, [r3, #1]
 8016c4c:	2b04      	cmp	r3, #4
 8016c4e:	d172      	bne.n	8016d36 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b09      	cmp	r3, #9
 8016c56:	d002      	beq.n	8016c5e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c5a:	2209      	movs	r2, #9
 8016c5c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8016c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c62:	221a      	movs	r2, #26
 8016c64:	fb02 f303 	mul.w	r3, r2, r3
 8016c68:	3308      	adds	r3, #8
 8016c6a:	6a3a      	ldr	r2, [r7, #32]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	3302      	adds	r3, #2
 8016c70:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c74:	69f8      	ldr	r0, [r7, #28]
 8016c76:	f000 f87a 	bl	8016d6e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016c80:	2300      	movs	r3, #0
 8016c82:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016c84:	e03f      	b.n	8016d06 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016c86:	f107 0316 	add.w	r3, r7, #22
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c8e:	f000 f9b9 	bl	8017004 <USBH_GetNextDesc>
 8016c92:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c96:	785b      	ldrb	r3, [r3, #1]
 8016c98:	2b05      	cmp	r3, #5
 8016c9a:	d134      	bne.n	8016d06 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	795b      	ldrb	r3, [r3, #5]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d10f      	bne.n	8016cc4 <USBH_ParseCfgDesc+0x140>
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	799b      	ldrb	r3, [r3, #6]
 8016ca8:	2b02      	cmp	r3, #2
 8016caa:	d10b      	bne.n	8016cc4 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016cac:	69fb      	ldr	r3, [r7, #28]
 8016cae:	79db      	ldrb	r3, [r3, #7]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d10b      	bne.n	8016ccc <USBH_ParseCfgDesc+0x148>
 8016cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b09      	cmp	r3, #9
 8016cba:	d007      	beq.n	8016ccc <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cbe:	2209      	movs	r2, #9
 8016cc0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016cc2:	e003      	b.n	8016ccc <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc6:	2207      	movs	r2, #7
 8016cc8:	701a      	strb	r2, [r3, #0]
 8016cca:	e000      	b.n	8016cce <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016ccc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016cd6:	3201      	adds	r2, #1
 8016cd8:	00d2      	lsls	r2, r2, #3
 8016cda:	211a      	movs	r1, #26
 8016cdc:	fb01 f303 	mul.w	r3, r1, r3
 8016ce0:	4413      	add	r3, r2
 8016ce2:	3308      	adds	r3, #8
 8016ce4:	6a3a      	ldr	r2, [r7, #32]
 8016ce6:	4413      	add	r3, r2
 8016ce8:	3304      	adds	r3, #4
 8016cea:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cee:	69b9      	ldr	r1, [r7, #24]
 8016cf0:	68f8      	ldr	r0, [r7, #12]
 8016cf2:	f000 f86b 	bl	8016dcc <USBH_ParseEPDesc>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d00:	3301      	adds	r3, #1
 8016d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016d06:	69fb      	ldr	r3, [r7, #28]
 8016d08:	791b      	ldrb	r3, [r3, #4]
 8016d0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d204      	bcs.n	8016d1c <USBH_ParseCfgDesc+0x198>
 8016d12:	6a3b      	ldr	r3, [r7, #32]
 8016d14:	885a      	ldrh	r2, [r3, #2]
 8016d16:	8afb      	ldrh	r3, [r7, #22]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d8b4      	bhi.n	8016c86 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016d1c:	69fb      	ldr	r3, [r7, #28]
 8016d1e:	791b      	ldrb	r3, [r3, #4]
 8016d20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d201      	bcs.n	8016d2c <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8016d28:	2303      	movs	r3, #3
 8016d2a:	e01c      	b.n	8016d66 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8016d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d30:	3301      	adds	r3, #1
 8016d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d3a:	2b09      	cmp	r3, #9
 8016d3c:	d805      	bhi.n	8016d4a <USBH_ParseCfgDesc+0x1c6>
 8016d3e:	6a3b      	ldr	r3, [r7, #32]
 8016d40:	885a      	ldrh	r2, [r3, #2]
 8016d42:	8afb      	ldrh	r3, [r7, #22]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	f63f af78 	bhi.w	8016c3a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	791b      	ldrb	r3, [r3, #4]
 8016d4e:	2b0a      	cmp	r3, #10
 8016d50:	bf28      	it	cs
 8016d52:	230a      	movcs	r3, #10
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d201      	bcs.n	8016d62 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016d5e:	2303      	movs	r3, #3
 8016d60:	e001      	b.n	8016d66 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3730      	adds	r7, #48	; 0x30
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016d6e:	b480      	push	{r7}
 8016d70:	b083      	sub	sp, #12
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	6078      	str	r0, [r7, #4]
 8016d76:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	781a      	ldrb	r2, [r3, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	785a      	ldrb	r2, [r3, #1]
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016d88:	683b      	ldr	r3, [r7, #0]
 8016d8a:	789a      	ldrb	r2, [r3, #2]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	78da      	ldrb	r2, [r3, #3]
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	791a      	ldrb	r2, [r3, #4]
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	795a      	ldrb	r2, [r3, #5]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	799a      	ldrb	r2, [r3, #6]
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	79da      	ldrb	r2, [r3, #7]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	7a1a      	ldrb	r2, [r3, #8]
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	721a      	strb	r2, [r3, #8]
}
 8016dc0:	bf00      	nop
 8016dc2:	370c      	adds	r7, #12
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b087      	sub	sp, #28
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	781a      	ldrb	r2, [r3, #0]
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	785a      	ldrb	r2, [r3, #1]
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	789a      	ldrb	r2, [r3, #2]
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	78da      	ldrb	r2, [r3, #3]
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	3304      	adds	r3, #4
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	b29a      	uxth	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	3305      	adds	r3, #5
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	b29b      	uxth	r3, r3
 8016e0c:	021b      	lsls	r3, r3, #8
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	4313      	orrs	r3, r2
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	799a      	ldrb	r2, [r3, #6]
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	889b      	ldrh	r3, [r3, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d009      	beq.n	8016e3c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e30:	d804      	bhi.n	8016e3c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e3a:	d901      	bls.n	8016e40 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8016e3c:	2303      	movs	r3, #3
 8016e3e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d136      	bne.n	8016eb8 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	78db      	ldrb	r3, [r3, #3]
 8016e4e:	f003 0303 	and.w	r3, r3, #3
 8016e52:	2b02      	cmp	r3, #2
 8016e54:	d108      	bne.n	8016e68 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	889b      	ldrh	r3, [r3, #4]
 8016e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e5e:	f240 8097 	bls.w	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016e62:	2303      	movs	r3, #3
 8016e64:	75fb      	strb	r3, [r7, #23]
 8016e66:	e093      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	78db      	ldrb	r3, [r3, #3]
 8016e6c:	f003 0303 	and.w	r3, r3, #3
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d107      	bne.n	8016e84 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	889b      	ldrh	r3, [r3, #4]
 8016e78:	2b40      	cmp	r3, #64	; 0x40
 8016e7a:	f240 8089 	bls.w	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016e7e:	2303      	movs	r3, #3
 8016e80:	75fb      	strb	r3, [r7, #23]
 8016e82:	e085      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	78db      	ldrb	r3, [r3, #3]
 8016e88:	f003 0303 	and.w	r3, r3, #3
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d005      	beq.n	8016e9c <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	78db      	ldrb	r3, [r3, #3]
 8016e94:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016e98:	2b03      	cmp	r3, #3
 8016e9a:	d10a      	bne.n	8016eb2 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	799b      	ldrb	r3, [r3, #6]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d003      	beq.n	8016eac <USBH_ParseEPDesc+0xe0>
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	799b      	ldrb	r3, [r3, #6]
 8016ea8:	2b10      	cmp	r3, #16
 8016eaa:	d970      	bls.n	8016f8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8016eac:	2303      	movs	r3, #3
 8016eae:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016eb0:	e06d      	b.n	8016f8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016eb2:	2303      	movs	r3, #3
 8016eb4:	75fb      	strb	r3, [r7, #23]
 8016eb6:	e06b      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016ebe:	2b01      	cmp	r3, #1
 8016ec0:	d13c      	bne.n	8016f3c <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	78db      	ldrb	r3, [r3, #3]
 8016ec6:	f003 0303 	and.w	r3, r3, #3
 8016eca:	2b02      	cmp	r3, #2
 8016ecc:	d005      	beq.n	8016eda <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	78db      	ldrb	r3, [r3, #3]
 8016ed2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d106      	bne.n	8016ee8 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	889b      	ldrh	r3, [r3, #4]
 8016ede:	2b40      	cmp	r3, #64	; 0x40
 8016ee0:	d956      	bls.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016ee2:	2303      	movs	r3, #3
 8016ee4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016ee6:	e053      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	78db      	ldrb	r3, [r3, #3]
 8016eec:	f003 0303 	and.w	r3, r3, #3
 8016ef0:	2b01      	cmp	r3, #1
 8016ef2:	d10e      	bne.n	8016f12 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	799b      	ldrb	r3, [r3, #6]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d007      	beq.n	8016f0c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8016f00:	2b10      	cmp	r3, #16
 8016f02:	d803      	bhi.n	8016f0c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8016f08:	2b40      	cmp	r3, #64	; 0x40
 8016f0a:	d941      	bls.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f0c:	2303      	movs	r3, #3
 8016f0e:	75fb      	strb	r3, [r7, #23]
 8016f10:	e03e      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	78db      	ldrb	r3, [r3, #3]
 8016f16:	f003 0303 	and.w	r3, r3, #3
 8016f1a:	2b03      	cmp	r3, #3
 8016f1c:	d10b      	bne.n	8016f36 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	799b      	ldrb	r3, [r3, #6]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d004      	beq.n	8016f30 <USBH_ParseEPDesc+0x164>
 8016f26:	68bb      	ldr	r3, [r7, #8]
 8016f28:	889b      	ldrh	r3, [r3, #4]
 8016f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f2e:	d32f      	bcc.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f30:	2303      	movs	r3, #3
 8016f32:	75fb      	strb	r3, [r7, #23]
 8016f34:	e02c      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016f36:	2303      	movs	r3, #3
 8016f38:	75fb      	strb	r3, [r7, #23]
 8016f3a:	e029      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016f42:	2b02      	cmp	r3, #2
 8016f44:	d120      	bne.n	8016f88 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	78db      	ldrb	r3, [r3, #3]
 8016f4a:	f003 0303 	and.w	r3, r3, #3
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d106      	bne.n	8016f60 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	889b      	ldrh	r3, [r3, #4]
 8016f56:	2b08      	cmp	r3, #8
 8016f58:	d01a      	beq.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f5a:	2303      	movs	r3, #3
 8016f5c:	75fb      	strb	r3, [r7, #23]
 8016f5e:	e017      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	78db      	ldrb	r3, [r3, #3]
 8016f64:	f003 0303 	and.w	r3, r3, #3
 8016f68:	2b03      	cmp	r3, #3
 8016f6a:	d10a      	bne.n	8016f82 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8016f6c:	68bb      	ldr	r3, [r7, #8]
 8016f6e:	799b      	ldrb	r3, [r3, #6]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d003      	beq.n	8016f7c <USBH_ParseEPDesc+0x1b0>
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	889b      	ldrh	r3, [r3, #4]
 8016f78:	2b08      	cmp	r3, #8
 8016f7a:	d909      	bls.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f7c:	2303      	movs	r3, #3
 8016f7e:	75fb      	strb	r3, [r7, #23]
 8016f80:	e006      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016f82:	2303      	movs	r3, #3
 8016f84:	75fb      	strb	r3, [r7, #23]
 8016f86:	e003      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016f88:	2303      	movs	r3, #3
 8016f8a:	75fb      	strb	r3, [r7, #23]
 8016f8c:	e000      	b.n	8016f90 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016f8e:	bf00      	nop
  }

  return status;
 8016f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	371c      	adds	r7, #28
 8016f96:	46bd      	mov	sp, r7
 8016f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9c:	4770      	bx	lr

08016f9e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016f9e:	b480      	push	{r7}
 8016fa0:	b087      	sub	sp, #28
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	60f8      	str	r0, [r7, #12]
 8016fa6:	60b9      	str	r1, [r7, #8]
 8016fa8:	4613      	mov	r3, r2
 8016faa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	2b03      	cmp	r3, #3
 8016fb4:	d120      	bne.n	8016ff8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	1e9a      	subs	r2, r3, #2
 8016fbc:	88fb      	ldrh	r3, [r7, #6]
 8016fbe:	4293      	cmp	r3, r2
 8016fc0:	bf28      	it	cs
 8016fc2:	4613      	movcs	r3, r2
 8016fc4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	3302      	adds	r3, #2
 8016fca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016fcc:	2300      	movs	r3, #0
 8016fce:	82fb      	strh	r3, [r7, #22]
 8016fd0:	e00b      	b.n	8016fea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016fd2:	8afb      	ldrh	r3, [r7, #22]
 8016fd4:	68fa      	ldr	r2, [r7, #12]
 8016fd6:	4413      	add	r3, r2
 8016fd8:	781a      	ldrb	r2, [r3, #0]
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016fe4:	8afb      	ldrh	r3, [r7, #22]
 8016fe6:	3302      	adds	r3, #2
 8016fe8:	82fb      	strh	r3, [r7, #22]
 8016fea:	8afa      	ldrh	r2, [r7, #22]
 8016fec:	8abb      	ldrh	r3, [r7, #20]
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d3ef      	bcc.n	8016fd2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	701a      	strb	r2, [r3, #0]
  }
}
 8016ff8:	bf00      	nop
 8016ffa:	371c      	adds	r7, #28
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017004:	b480      	push	{r7}
 8017006:	b085      	sub	sp, #20
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	881a      	ldrh	r2, [r3, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	b29b      	uxth	r3, r3
 8017018:	4413      	add	r3, r2
 801701a:	b29a      	uxth	r2, r3
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	4413      	add	r3, r2
 801702a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801702c:	68fb      	ldr	r3, [r7, #12]
}
 801702e:	4618      	mov	r0, r3
 8017030:	3714      	adds	r7, #20
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr

0801703a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801703a:	b580      	push	{r7, lr}
 801703c:	b086      	sub	sp, #24
 801703e:	af00      	add	r7, sp, #0
 8017040:	60f8      	str	r0, [r7, #12]
 8017042:	60b9      	str	r1, [r7, #8]
 8017044:	4613      	mov	r3, r2
 8017046:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8017048:	2301      	movs	r3, #1
 801704a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	789b      	ldrb	r3, [r3, #2]
 8017050:	2b01      	cmp	r3, #1
 8017052:	d002      	beq.n	801705a <USBH_CtlReq+0x20>
 8017054:	2b02      	cmp	r3, #2
 8017056:	d00f      	beq.n	8017078 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8017058:	e027      	b.n	80170aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	68ba      	ldr	r2, [r7, #8]
 801705e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	88fa      	ldrh	r2, [r7, #6]
 8017064:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2201      	movs	r2, #1
 801706a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2202      	movs	r2, #2
 8017070:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8017072:	2301      	movs	r3, #1
 8017074:	75fb      	strb	r3, [r7, #23]
      break;
 8017076:	e018      	b.n	80170aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f000 f81b 	bl	80170b4 <USBH_HandleControl>
 801707e:	4603      	mov	r3, r0
 8017080:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8017082:	7dfb      	ldrb	r3, [r7, #23]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d002      	beq.n	801708e <USBH_CtlReq+0x54>
 8017088:	7dfb      	ldrb	r3, [r7, #23]
 801708a:	2b03      	cmp	r3, #3
 801708c:	d106      	bne.n	801709c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	2201      	movs	r2, #1
 8017092:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	2200      	movs	r2, #0
 8017098:	761a      	strb	r2, [r3, #24]
      break;
 801709a:	e005      	b.n	80170a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801709c:	7dfb      	ldrb	r3, [r7, #23]
 801709e:	2b02      	cmp	r3, #2
 80170a0:	d102      	bne.n	80170a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	2201      	movs	r2, #1
 80170a6:	709a      	strb	r2, [r3, #2]
      break;
 80170a8:	bf00      	nop
  }
  return status;
 80170aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	3718      	adds	r7, #24
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}

080170b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b086      	sub	sp, #24
 80170b8:	af02      	add	r7, sp, #8
 80170ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80170bc:	2301      	movs	r3, #1
 80170be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80170c0:	2300      	movs	r3, #0
 80170c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	7e1b      	ldrb	r3, [r3, #24]
 80170c8:	3b01      	subs	r3, #1
 80170ca:	2b0a      	cmp	r3, #10
 80170cc:	f200 8156 	bhi.w	801737c <USBH_HandleControl+0x2c8>
 80170d0:	a201      	add	r2, pc, #4	; (adr r2, 80170d8 <USBH_HandleControl+0x24>)
 80170d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170d6:	bf00      	nop
 80170d8:	08017105 	.word	0x08017105
 80170dc:	0801711f 	.word	0x0801711f
 80170e0:	08017189 	.word	0x08017189
 80170e4:	080171af 	.word	0x080171af
 80170e8:	080171e7 	.word	0x080171e7
 80170ec:	08017211 	.word	0x08017211
 80170f0:	08017263 	.word	0x08017263
 80170f4:	08017285 	.word	0x08017285
 80170f8:	080172c1 	.word	0x080172c1
 80170fc:	080172e7 	.word	0x080172e7
 8017100:	08017325 	.word	0x08017325
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	f103 0110 	add.w	r1, r3, #16
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	795b      	ldrb	r3, [r3, #5]
 801710e:	461a      	mov	r2, r3
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 f943 	bl	801739c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2202      	movs	r2, #2
 801711a:	761a      	strb	r2, [r3, #24]
      break;
 801711c:	e139      	b.n	8017392 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	795b      	ldrb	r3, [r3, #5]
 8017122:	4619      	mov	r1, r3
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f7ed ff3d 	bl	8004fa4 <USBH_LL_GetURBState>
 801712a:	4603      	mov	r3, r0
 801712c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801712e:	7bbb      	ldrb	r3, [r7, #14]
 8017130:	2b01      	cmp	r3, #1
 8017132:	d11e      	bne.n	8017172 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	7c1b      	ldrb	r3, [r3, #16]
 8017138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801713c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	8adb      	ldrh	r3, [r3, #22]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d00a      	beq.n	801715c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8017146:	7b7b      	ldrb	r3, [r7, #13]
 8017148:	2b80      	cmp	r3, #128	; 0x80
 801714a:	d103      	bne.n	8017154 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2203      	movs	r2, #3
 8017150:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017152:	e115      	b.n	8017380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2205      	movs	r2, #5
 8017158:	761a      	strb	r2, [r3, #24]
      break;
 801715a:	e111      	b.n	8017380 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 801715c:	7b7b      	ldrb	r3, [r7, #13]
 801715e:	2b80      	cmp	r3, #128	; 0x80
 8017160:	d103      	bne.n	801716a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2209      	movs	r2, #9
 8017166:	761a      	strb	r2, [r3, #24]
      break;
 8017168:	e10a      	b.n	8017380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2207      	movs	r2, #7
 801716e:	761a      	strb	r2, [r3, #24]
      break;
 8017170:	e106      	b.n	8017380 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8017172:	7bbb      	ldrb	r3, [r7, #14]
 8017174:	2b04      	cmp	r3, #4
 8017176:	d003      	beq.n	8017180 <USBH_HandleControl+0xcc>
 8017178:	7bbb      	ldrb	r3, [r7, #14]
 801717a:	2b02      	cmp	r3, #2
 801717c:	f040 8100 	bne.w	8017380 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	220b      	movs	r2, #11
 8017184:	761a      	strb	r2, [r3, #24]
      break;
 8017186:	e0fb      	b.n	8017380 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801718e:	b29a      	uxth	r2, r3
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6899      	ldr	r1, [r3, #8]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	899a      	ldrh	r2, [r3, #12]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	791b      	ldrb	r3, [r3, #4]
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f000 f93a 	bl	801741a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2204      	movs	r2, #4
 80171aa:	761a      	strb	r2, [r3, #24]
      break;
 80171ac:	e0f1      	b.n	8017392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	791b      	ldrb	r3, [r3, #4]
 80171b2:	4619      	mov	r1, r3
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f7ed fef5 	bl	8004fa4 <USBH_LL_GetURBState>
 80171ba:	4603      	mov	r3, r0
 80171bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80171be:	7bbb      	ldrb	r3, [r7, #14]
 80171c0:	2b01      	cmp	r3, #1
 80171c2:	d102      	bne.n	80171ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2209      	movs	r2, #9
 80171c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80171ca:	7bbb      	ldrb	r3, [r7, #14]
 80171cc:	2b05      	cmp	r3, #5
 80171ce:	d102      	bne.n	80171d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80171d0:	2303      	movs	r3, #3
 80171d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80171d4:	e0d6      	b.n	8017384 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80171d6:	7bbb      	ldrb	r3, [r7, #14]
 80171d8:	2b04      	cmp	r3, #4
 80171da:	f040 80d3 	bne.w	8017384 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	220b      	movs	r2, #11
 80171e2:	761a      	strb	r2, [r3, #24]
      break;
 80171e4:	e0ce      	b.n	8017384 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6899      	ldr	r1, [r3, #8]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	899a      	ldrh	r2, [r3, #12]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	795b      	ldrb	r3, [r3, #5]
 80171f2:	2001      	movs	r0, #1
 80171f4:	9000      	str	r0, [sp, #0]
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 f8ea 	bl	80173d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017202:	b29a      	uxth	r2, r3
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2206      	movs	r2, #6
 801720c:	761a      	strb	r2, [r3, #24]
      break;
 801720e:	e0c0      	b.n	8017392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	795b      	ldrb	r3, [r3, #5]
 8017214:	4619      	mov	r1, r3
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7ed fec4 	bl	8004fa4 <USBH_LL_GetURBState>
 801721c:	4603      	mov	r3, r0
 801721e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8017220:	7bbb      	ldrb	r3, [r7, #14]
 8017222:	2b01      	cmp	r3, #1
 8017224:	d103      	bne.n	801722e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2207      	movs	r2, #7
 801722a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801722c:	e0ac      	b.n	8017388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801722e:	7bbb      	ldrb	r3, [r7, #14]
 8017230:	2b05      	cmp	r3, #5
 8017232:	d105      	bne.n	8017240 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	220c      	movs	r2, #12
 8017238:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801723a:	2303      	movs	r3, #3
 801723c:	73fb      	strb	r3, [r7, #15]
      break;
 801723e:	e0a3      	b.n	8017388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017240:	7bbb      	ldrb	r3, [r7, #14]
 8017242:	2b02      	cmp	r3, #2
 8017244:	d103      	bne.n	801724e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2205      	movs	r2, #5
 801724a:	761a      	strb	r2, [r3, #24]
      break;
 801724c:	e09c      	b.n	8017388 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801724e:	7bbb      	ldrb	r3, [r7, #14]
 8017250:	2b04      	cmp	r3, #4
 8017252:	f040 8099 	bne.w	8017388 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	220b      	movs	r2, #11
 801725a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801725c:	2302      	movs	r3, #2
 801725e:	73fb      	strb	r3, [r7, #15]
      break;
 8017260:	e092      	b.n	8017388 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	791b      	ldrb	r3, [r3, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	2100      	movs	r1, #0
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f000 f8d5 	bl	801741a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017276:	b29a      	uxth	r2, r3
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2208      	movs	r2, #8
 8017280:	761a      	strb	r2, [r3, #24]

      break;
 8017282:	e086      	b.n	8017392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	791b      	ldrb	r3, [r3, #4]
 8017288:	4619      	mov	r1, r3
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7ed fe8a 	bl	8004fa4 <USBH_LL_GetURBState>
 8017290:	4603      	mov	r3, r0
 8017292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8017294:	7bbb      	ldrb	r3, [r7, #14]
 8017296:	2b01      	cmp	r3, #1
 8017298:	d105      	bne.n	80172a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	220d      	movs	r2, #13
 801729e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80172a0:	2300      	movs	r3, #0
 80172a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80172a4:	e072      	b.n	801738c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80172a6:	7bbb      	ldrb	r3, [r7, #14]
 80172a8:	2b04      	cmp	r3, #4
 80172aa:	d103      	bne.n	80172b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	220b      	movs	r2, #11
 80172b0:	761a      	strb	r2, [r3, #24]
      break;
 80172b2:	e06b      	b.n	801738c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80172b4:	7bbb      	ldrb	r3, [r7, #14]
 80172b6:	2b05      	cmp	r3, #5
 80172b8:	d168      	bne.n	801738c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80172ba:	2303      	movs	r3, #3
 80172bc:	73fb      	strb	r3, [r7, #15]
      break;
 80172be:	e065      	b.n	801738c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	795b      	ldrb	r3, [r3, #5]
 80172c4:	2201      	movs	r2, #1
 80172c6:	9200      	str	r2, [sp, #0]
 80172c8:	2200      	movs	r2, #0
 80172ca:	2100      	movs	r1, #0
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 f87f 	bl	80173d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80172d8:	b29a      	uxth	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	220a      	movs	r2, #10
 80172e2:	761a      	strb	r2, [r3, #24]
      break;
 80172e4:	e055      	b.n	8017392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	795b      	ldrb	r3, [r3, #5]
 80172ea:	4619      	mov	r1, r3
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7ed fe59 	bl	8004fa4 <USBH_LL_GetURBState>
 80172f2:	4603      	mov	r3, r0
 80172f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80172f6:	7bbb      	ldrb	r3, [r7, #14]
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d105      	bne.n	8017308 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80172fc:	2300      	movs	r3, #0
 80172fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	220d      	movs	r2, #13
 8017304:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017306:	e043      	b.n	8017390 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017308:	7bbb      	ldrb	r3, [r7, #14]
 801730a:	2b02      	cmp	r3, #2
 801730c:	d103      	bne.n	8017316 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2209      	movs	r2, #9
 8017312:	761a      	strb	r2, [r3, #24]
      break;
 8017314:	e03c      	b.n	8017390 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8017316:	7bbb      	ldrb	r3, [r7, #14]
 8017318:	2b04      	cmp	r3, #4
 801731a:	d139      	bne.n	8017390 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	220b      	movs	r2, #11
 8017320:	761a      	strb	r2, [r3, #24]
      break;
 8017322:	e035      	b.n	8017390 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	7e5b      	ldrb	r3, [r3, #25]
 8017328:	3301      	adds	r3, #1
 801732a:	b2da      	uxtb	r2, r3
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	765a      	strb	r2, [r3, #25]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	7e5b      	ldrb	r3, [r3, #25]
 8017334:	2b02      	cmp	r3, #2
 8017336:	d806      	bhi.n	8017346 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2201      	movs	r2, #1
 801733c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2201      	movs	r2, #1
 8017342:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8017344:	e025      	b.n	8017392 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801734c:	2106      	movs	r1, #6
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2200      	movs	r2, #0
 8017356:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	795b      	ldrb	r3, [r3, #5]
 801735c:	4619      	mov	r1, r3
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 f90d 	bl	801757e <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	791b      	ldrb	r3, [r3, #4]
 8017368:	4619      	mov	r1, r3
 801736a:	6878      	ldr	r0, [r7, #4]
 801736c:	f000 f907 	bl	801757e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8017376:	2302      	movs	r3, #2
 8017378:	73fb      	strb	r3, [r7, #15]
      break;
 801737a:	e00a      	b.n	8017392 <USBH_HandleControl+0x2de>

    default:
      break;
 801737c:	bf00      	nop
 801737e:	e008      	b.n	8017392 <USBH_HandleControl+0x2de>
      break;
 8017380:	bf00      	nop
 8017382:	e006      	b.n	8017392 <USBH_HandleControl+0x2de>
      break;
 8017384:	bf00      	nop
 8017386:	e004      	b.n	8017392 <USBH_HandleControl+0x2de>
      break;
 8017388:	bf00      	nop
 801738a:	e002      	b.n	8017392 <USBH_HandleControl+0x2de>
      break;
 801738c:	bf00      	nop
 801738e:	e000      	b.n	8017392 <USBH_HandleControl+0x2de>
      break;
 8017390:	bf00      	nop
  }

  return status;
 8017392:	7bfb      	ldrb	r3, [r7, #15]
}
 8017394:	4618      	mov	r0, r3
 8017396:	3710      	adds	r7, #16
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b088      	sub	sp, #32
 80173a0:	af04      	add	r7, sp, #16
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	4613      	mov	r3, r2
 80173a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80173aa:	79f9      	ldrb	r1, [r7, #7]
 80173ac:	2300      	movs	r3, #0
 80173ae:	9303      	str	r3, [sp, #12]
 80173b0:	2308      	movs	r3, #8
 80173b2:	9302      	str	r3, [sp, #8]
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	9301      	str	r3, [sp, #4]
 80173b8:	2300      	movs	r3, #0
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	2300      	movs	r3, #0
 80173be:	2200      	movs	r2, #0
 80173c0:	68f8      	ldr	r0, [r7, #12]
 80173c2:	f7ed fdbe 	bl	8004f42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3710      	adds	r7, #16
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b088      	sub	sp, #32
 80173d4:	af04      	add	r7, sp, #16
 80173d6:	60f8      	str	r0, [r7, #12]
 80173d8:	60b9      	str	r1, [r7, #8]
 80173da:	4611      	mov	r1, r2
 80173dc:	461a      	mov	r2, r3
 80173de:	460b      	mov	r3, r1
 80173e0:	80fb      	strh	r3, [r7, #6]
 80173e2:	4613      	mov	r3, r2
 80173e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d001      	beq.n	80173f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80173f0:	2300      	movs	r3, #0
 80173f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80173f4:	7979      	ldrb	r1, [r7, #5]
 80173f6:	7e3b      	ldrb	r3, [r7, #24]
 80173f8:	9303      	str	r3, [sp, #12]
 80173fa:	88fb      	ldrh	r3, [r7, #6]
 80173fc:	9302      	str	r3, [sp, #8]
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	9301      	str	r3, [sp, #4]
 8017402:	2301      	movs	r3, #1
 8017404:	9300      	str	r3, [sp, #0]
 8017406:	2300      	movs	r3, #0
 8017408:	2200      	movs	r2, #0
 801740a:	68f8      	ldr	r0, [r7, #12]
 801740c:	f7ed fd99 	bl	8004f42 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8017410:	2300      	movs	r3, #0
}
 8017412:	4618      	mov	r0, r3
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}

0801741a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801741a:	b580      	push	{r7, lr}
 801741c:	b088      	sub	sp, #32
 801741e:	af04      	add	r7, sp, #16
 8017420:	60f8      	str	r0, [r7, #12]
 8017422:	60b9      	str	r1, [r7, #8]
 8017424:	4611      	mov	r1, r2
 8017426:	461a      	mov	r2, r3
 8017428:	460b      	mov	r3, r1
 801742a:	80fb      	strh	r3, [r7, #6]
 801742c:	4613      	mov	r3, r2
 801742e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017430:	7979      	ldrb	r1, [r7, #5]
 8017432:	2300      	movs	r3, #0
 8017434:	9303      	str	r3, [sp, #12]
 8017436:	88fb      	ldrh	r3, [r7, #6]
 8017438:	9302      	str	r3, [sp, #8]
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	9301      	str	r3, [sp, #4]
 801743e:	2301      	movs	r3, #1
 8017440:	9300      	str	r3, [sp, #0]
 8017442:	2300      	movs	r3, #0
 8017444:	2201      	movs	r2, #1
 8017446:	68f8      	ldr	r0, [r7, #12]
 8017448:	f7ed fd7b 	bl	8004f42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801744c:	2300      	movs	r3, #0

}
 801744e:	4618      	mov	r0, r3
 8017450:	3710      	adds	r7, #16
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}

08017456 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8017456:	b580      	push	{r7, lr}
 8017458:	b088      	sub	sp, #32
 801745a:	af04      	add	r7, sp, #16
 801745c:	60f8      	str	r0, [r7, #12]
 801745e:	60b9      	str	r1, [r7, #8]
 8017460:	4611      	mov	r1, r2
 8017462:	461a      	mov	r2, r3
 8017464:	460b      	mov	r3, r1
 8017466:	80fb      	strh	r3, [r7, #6]
 8017468:	4613      	mov	r3, r2
 801746a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017472:	2b00      	cmp	r3, #0
 8017474:	d001      	beq.n	801747a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8017476:	2300      	movs	r3, #0
 8017478:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801747a:	7979      	ldrb	r1, [r7, #5]
 801747c:	7e3b      	ldrb	r3, [r7, #24]
 801747e:	9303      	str	r3, [sp, #12]
 8017480:	88fb      	ldrh	r3, [r7, #6]
 8017482:	9302      	str	r3, [sp, #8]
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	9301      	str	r3, [sp, #4]
 8017488:	2301      	movs	r3, #1
 801748a:	9300      	str	r3, [sp, #0]
 801748c:	2302      	movs	r3, #2
 801748e:	2200      	movs	r2, #0
 8017490:	68f8      	ldr	r0, [r7, #12]
 8017492:	f7ed fd56 	bl	8004f42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8017496:	2300      	movs	r3, #0
}
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b088      	sub	sp, #32
 80174a4:	af04      	add	r7, sp, #16
 80174a6:	60f8      	str	r0, [r7, #12]
 80174a8:	60b9      	str	r1, [r7, #8]
 80174aa:	4611      	mov	r1, r2
 80174ac:	461a      	mov	r2, r3
 80174ae:	460b      	mov	r3, r1
 80174b0:	80fb      	strh	r3, [r7, #6]
 80174b2:	4613      	mov	r3, r2
 80174b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80174b6:	7979      	ldrb	r1, [r7, #5]
 80174b8:	2300      	movs	r3, #0
 80174ba:	9303      	str	r3, [sp, #12]
 80174bc:	88fb      	ldrh	r3, [r7, #6]
 80174be:	9302      	str	r3, [sp, #8]
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	9301      	str	r3, [sp, #4]
 80174c4:	2301      	movs	r3, #1
 80174c6:	9300      	str	r3, [sp, #0]
 80174c8:	2302      	movs	r3, #2
 80174ca:	2201      	movs	r2, #1
 80174cc:	68f8      	ldr	r0, [r7, #12]
 80174ce:	f7ed fd38 	bl	8004f42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80174d2:	2300      	movs	r3, #0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3710      	adds	r7, #16
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b086      	sub	sp, #24
 80174e0:	af04      	add	r7, sp, #16
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	4608      	mov	r0, r1
 80174e6:	4611      	mov	r1, r2
 80174e8:	461a      	mov	r2, r3
 80174ea:	4603      	mov	r3, r0
 80174ec:	70fb      	strb	r3, [r7, #3]
 80174ee:	460b      	mov	r3, r1
 80174f0:	70bb      	strb	r3, [r7, #2]
 80174f2:	4613      	mov	r3, r2
 80174f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80174f6:	7878      	ldrb	r0, [r7, #1]
 80174f8:	78ba      	ldrb	r2, [r7, #2]
 80174fa:	78f9      	ldrb	r1, [r7, #3]
 80174fc:	8b3b      	ldrh	r3, [r7, #24]
 80174fe:	9302      	str	r3, [sp, #8]
 8017500:	7d3b      	ldrb	r3, [r7, #20]
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	7c3b      	ldrb	r3, [r7, #16]
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	4603      	mov	r3, r0
 801750a:	6878      	ldr	r0, [r7, #4]
 801750c:	f7ed fccb 	bl	8004ea6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8017510:	2300      	movs	r3, #0
}
 8017512:	4618      	mov	r0, r3
 8017514:	3708      	adds	r7, #8
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}

0801751a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801751a:	b580      	push	{r7, lr}
 801751c:	b082      	sub	sp, #8
 801751e:	af00      	add	r7, sp, #0
 8017520:	6078      	str	r0, [r7, #4]
 8017522:	460b      	mov	r3, r1
 8017524:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8017526:	78fb      	ldrb	r3, [r7, #3]
 8017528:	4619      	mov	r1, r3
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7ed fcea 	bl	8004f04 <USBH_LL_ClosePipe>

  return USBH_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3708      	adds	r7, #8
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b084      	sub	sp, #16
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	460b      	mov	r3, r1
 8017544:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f000 f839 	bl	80175be <USBH_GetFreePipe>
 801754c:	4603      	mov	r3, r0
 801754e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8017550:	89fb      	ldrh	r3, [r7, #14]
 8017552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017556:	4293      	cmp	r3, r2
 8017558:	d00b      	beq.n	8017572 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801755a:	78fa      	ldrb	r2, [r7, #3]
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	f003 030f 	and.w	r3, r3, #15
 8017562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017566:	6879      	ldr	r1, [r7, #4]
 8017568:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801756c:	009b      	lsls	r3, r3, #2
 801756e:	440b      	add	r3, r1
 8017570:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8017572:	89fb      	ldrh	r3, [r7, #14]
 8017574:	b2db      	uxtb	r3, r3
}
 8017576:	4618      	mov	r0, r3
 8017578:	3710      	adds	r7, #16
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801757e:	b480      	push	{r7}
 8017580:	b083      	sub	sp, #12
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
 8017586:	460b      	mov	r3, r1
 8017588:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801758a:	78fb      	ldrb	r3, [r7, #3]
 801758c:	2b0f      	cmp	r3, #15
 801758e:	d80f      	bhi.n	80175b0 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8017590:	78fb      	ldrb	r3, [r7, #3]
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017598:	009b      	lsls	r3, r3, #2
 801759a:	4413      	add	r3, r2
 801759c:	685a      	ldr	r2, [r3, #4]
 801759e:	78fb      	ldrb	r3, [r7, #3]
 80175a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80175a4:	6879      	ldr	r1, [r7, #4]
 80175a6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	440b      	add	r3, r1
 80175ae:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80175b0:	2300      	movs	r3, #0
}
 80175b2:	4618      	mov	r0, r3
 80175b4:	370c      	adds	r7, #12
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr

080175be <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80175be:	b480      	push	{r7}
 80175c0:	b085      	sub	sp, #20
 80175c2:	af00      	add	r7, sp, #0
 80175c4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80175c6:	2300      	movs	r3, #0
 80175c8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80175ca:	2300      	movs	r3, #0
 80175cc:	73fb      	strb	r3, [r7, #15]
 80175ce:	e010      	b.n	80175f2 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80175d0:	7bfb      	ldrb	r3, [r7, #15]
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80175d8:	009b      	lsls	r3, r3, #2
 80175da:	4413      	add	r3, r2
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d102      	bne.n	80175ec <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80175e6:	7bfb      	ldrb	r3, [r7, #15]
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	e007      	b.n	80175fc <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	3301      	adds	r3, #1
 80175f0:	73fb      	strb	r3, [r7, #15]
 80175f2:	7bfb      	ldrb	r3, [r7, #15]
 80175f4:	2b0f      	cmp	r3, #15
 80175f6:	d9eb      	bls.n	80175d0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80175f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3714      	adds	r7, #20
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr

08017608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017608:	b480      	push	{r7}
 801760a:	b087      	sub	sp, #28
 801760c:	af00      	add	r7, sp, #0
 801760e:	60f8      	str	r0, [r7, #12]
 8017610:	60b9      	str	r1, [r7, #8]
 8017612:	4613      	mov	r3, r2
 8017614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017616:	2301      	movs	r3, #1
 8017618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801761a:	2300      	movs	r3, #0
 801761c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801761e:	4b1f      	ldr	r3, [pc, #124]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017620:	7a5b      	ldrb	r3, [r3, #9]
 8017622:	b2db      	uxtb	r3, r3
 8017624:	2b00      	cmp	r3, #0
 8017626:	d131      	bne.n	801768c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017628:	4b1c      	ldr	r3, [pc, #112]	; (801769c <FATFS_LinkDriverEx+0x94>)
 801762a:	7a5b      	ldrb	r3, [r3, #9]
 801762c:	b2db      	uxtb	r3, r3
 801762e:	461a      	mov	r2, r3
 8017630:	4b1a      	ldr	r3, [pc, #104]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017632:	2100      	movs	r1, #0
 8017634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017636:	4b19      	ldr	r3, [pc, #100]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017638:	7a5b      	ldrb	r3, [r3, #9]
 801763a:	b2db      	uxtb	r3, r3
 801763c:	4a17      	ldr	r2, [pc, #92]	; (801769c <FATFS_LinkDriverEx+0x94>)
 801763e:	009b      	lsls	r3, r3, #2
 8017640:	4413      	add	r3, r2
 8017642:	68fa      	ldr	r2, [r7, #12]
 8017644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017646:	4b15      	ldr	r3, [pc, #84]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017648:	7a5b      	ldrb	r3, [r3, #9]
 801764a:	b2db      	uxtb	r3, r3
 801764c:	461a      	mov	r2, r3
 801764e:	4b13      	ldr	r3, [pc, #76]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017650:	4413      	add	r3, r2
 8017652:	79fa      	ldrb	r2, [r7, #7]
 8017654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017656:	4b11      	ldr	r3, [pc, #68]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017658:	7a5b      	ldrb	r3, [r3, #9]
 801765a:	b2db      	uxtb	r3, r3
 801765c:	1c5a      	adds	r2, r3, #1
 801765e:	b2d1      	uxtb	r1, r2
 8017660:	4a0e      	ldr	r2, [pc, #56]	; (801769c <FATFS_LinkDriverEx+0x94>)
 8017662:	7251      	strb	r1, [r2, #9]
 8017664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017666:	7dbb      	ldrb	r3, [r7, #22]
 8017668:	3330      	adds	r3, #48	; 0x30
 801766a:	b2da      	uxtb	r2, r3
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	3301      	adds	r3, #1
 8017674:	223a      	movs	r2, #58	; 0x3a
 8017676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	3302      	adds	r3, #2
 801767c:	222f      	movs	r2, #47	; 0x2f
 801767e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	3303      	adds	r3, #3
 8017684:	2200      	movs	r2, #0
 8017686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017688:	2300      	movs	r3, #0
 801768a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801768c:	7dfb      	ldrb	r3, [r7, #23]
}
 801768e:	4618      	mov	r0, r3
 8017690:	371c      	adds	r7, #28
 8017692:	46bd      	mov	sp, r7
 8017694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017698:	4770      	bx	lr
 801769a:	bf00      	nop
 801769c:	20002048 	.word	0x20002048

080176a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80176aa:	2200      	movs	r2, #0
 80176ac:	6839      	ldr	r1, [r7, #0]
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f7ff ffaa 	bl	8017608 <FATFS_LinkDriverEx>
 80176b4:	4603      	mov	r3, r0
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3708      	adds	r7, #8
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
	...

080176c0 <malloc>:
 80176c0:	4b02      	ldr	r3, [pc, #8]	; (80176cc <malloc+0xc>)
 80176c2:	4601      	mov	r1, r0
 80176c4:	6818      	ldr	r0, [r3, #0]
 80176c6:	f000 b82b 	b.w	8017720 <_malloc_r>
 80176ca:	bf00      	nop
 80176cc:	20000094 	.word	0x20000094

080176d0 <free>:
 80176d0:	4b02      	ldr	r3, [pc, #8]	; (80176dc <free+0xc>)
 80176d2:	4601      	mov	r1, r0
 80176d4:	6818      	ldr	r0, [r3, #0]
 80176d6:	f000 b901 	b.w	80178dc <_free_r>
 80176da:	bf00      	nop
 80176dc:	20000094 	.word	0x20000094

080176e0 <sbrk_aligned>:
 80176e0:	b570      	push	{r4, r5, r6, lr}
 80176e2:	4e0e      	ldr	r6, [pc, #56]	; (801771c <sbrk_aligned+0x3c>)
 80176e4:	460c      	mov	r4, r1
 80176e6:	6831      	ldr	r1, [r6, #0]
 80176e8:	4605      	mov	r5, r0
 80176ea:	b911      	cbnz	r1, 80176f2 <sbrk_aligned+0x12>
 80176ec:	f000 f8ac 	bl	8017848 <_sbrk_r>
 80176f0:	6030      	str	r0, [r6, #0]
 80176f2:	4621      	mov	r1, r4
 80176f4:	4628      	mov	r0, r5
 80176f6:	f000 f8a7 	bl	8017848 <_sbrk_r>
 80176fa:	1c43      	adds	r3, r0, #1
 80176fc:	d00a      	beq.n	8017714 <sbrk_aligned+0x34>
 80176fe:	1cc4      	adds	r4, r0, #3
 8017700:	f024 0403 	bic.w	r4, r4, #3
 8017704:	42a0      	cmp	r0, r4
 8017706:	d007      	beq.n	8017718 <sbrk_aligned+0x38>
 8017708:	1a21      	subs	r1, r4, r0
 801770a:	4628      	mov	r0, r5
 801770c:	f000 f89c 	bl	8017848 <_sbrk_r>
 8017710:	3001      	adds	r0, #1
 8017712:	d101      	bne.n	8017718 <sbrk_aligned+0x38>
 8017714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017718:	4620      	mov	r0, r4
 801771a:	bd70      	pop	{r4, r5, r6, pc}
 801771c:	20002058 	.word	0x20002058

08017720 <_malloc_r>:
 8017720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017724:	1ccd      	adds	r5, r1, #3
 8017726:	f025 0503 	bic.w	r5, r5, #3
 801772a:	3508      	adds	r5, #8
 801772c:	2d0c      	cmp	r5, #12
 801772e:	bf38      	it	cc
 8017730:	250c      	movcc	r5, #12
 8017732:	2d00      	cmp	r5, #0
 8017734:	4607      	mov	r7, r0
 8017736:	db01      	blt.n	801773c <_malloc_r+0x1c>
 8017738:	42a9      	cmp	r1, r5
 801773a:	d905      	bls.n	8017748 <_malloc_r+0x28>
 801773c:	230c      	movs	r3, #12
 801773e:	603b      	str	r3, [r7, #0]
 8017740:	2600      	movs	r6, #0
 8017742:	4630      	mov	r0, r6
 8017744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017748:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801781c <_malloc_r+0xfc>
 801774c:	f000 f868 	bl	8017820 <__malloc_lock>
 8017750:	f8d8 3000 	ldr.w	r3, [r8]
 8017754:	461c      	mov	r4, r3
 8017756:	bb5c      	cbnz	r4, 80177b0 <_malloc_r+0x90>
 8017758:	4629      	mov	r1, r5
 801775a:	4638      	mov	r0, r7
 801775c:	f7ff ffc0 	bl	80176e0 <sbrk_aligned>
 8017760:	1c43      	adds	r3, r0, #1
 8017762:	4604      	mov	r4, r0
 8017764:	d155      	bne.n	8017812 <_malloc_r+0xf2>
 8017766:	f8d8 4000 	ldr.w	r4, [r8]
 801776a:	4626      	mov	r6, r4
 801776c:	2e00      	cmp	r6, #0
 801776e:	d145      	bne.n	80177fc <_malloc_r+0xdc>
 8017770:	2c00      	cmp	r4, #0
 8017772:	d048      	beq.n	8017806 <_malloc_r+0xe6>
 8017774:	6823      	ldr	r3, [r4, #0]
 8017776:	4631      	mov	r1, r6
 8017778:	4638      	mov	r0, r7
 801777a:	eb04 0903 	add.w	r9, r4, r3
 801777e:	f000 f863 	bl	8017848 <_sbrk_r>
 8017782:	4581      	cmp	r9, r0
 8017784:	d13f      	bne.n	8017806 <_malloc_r+0xe6>
 8017786:	6821      	ldr	r1, [r4, #0]
 8017788:	1a6d      	subs	r5, r5, r1
 801778a:	4629      	mov	r1, r5
 801778c:	4638      	mov	r0, r7
 801778e:	f7ff ffa7 	bl	80176e0 <sbrk_aligned>
 8017792:	3001      	adds	r0, #1
 8017794:	d037      	beq.n	8017806 <_malloc_r+0xe6>
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	442b      	add	r3, r5
 801779a:	6023      	str	r3, [r4, #0]
 801779c:	f8d8 3000 	ldr.w	r3, [r8]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d038      	beq.n	8017816 <_malloc_r+0xf6>
 80177a4:	685a      	ldr	r2, [r3, #4]
 80177a6:	42a2      	cmp	r2, r4
 80177a8:	d12b      	bne.n	8017802 <_malloc_r+0xe2>
 80177aa:	2200      	movs	r2, #0
 80177ac:	605a      	str	r2, [r3, #4]
 80177ae:	e00f      	b.n	80177d0 <_malloc_r+0xb0>
 80177b0:	6822      	ldr	r2, [r4, #0]
 80177b2:	1b52      	subs	r2, r2, r5
 80177b4:	d41f      	bmi.n	80177f6 <_malloc_r+0xd6>
 80177b6:	2a0b      	cmp	r2, #11
 80177b8:	d917      	bls.n	80177ea <_malloc_r+0xca>
 80177ba:	1961      	adds	r1, r4, r5
 80177bc:	42a3      	cmp	r3, r4
 80177be:	6025      	str	r5, [r4, #0]
 80177c0:	bf18      	it	ne
 80177c2:	6059      	strne	r1, [r3, #4]
 80177c4:	6863      	ldr	r3, [r4, #4]
 80177c6:	bf08      	it	eq
 80177c8:	f8c8 1000 	streq.w	r1, [r8]
 80177cc:	5162      	str	r2, [r4, r5]
 80177ce:	604b      	str	r3, [r1, #4]
 80177d0:	4638      	mov	r0, r7
 80177d2:	f104 060b 	add.w	r6, r4, #11
 80177d6:	f000 f829 	bl	801782c <__malloc_unlock>
 80177da:	f026 0607 	bic.w	r6, r6, #7
 80177de:	1d23      	adds	r3, r4, #4
 80177e0:	1af2      	subs	r2, r6, r3
 80177e2:	d0ae      	beq.n	8017742 <_malloc_r+0x22>
 80177e4:	1b9b      	subs	r3, r3, r6
 80177e6:	50a3      	str	r3, [r4, r2]
 80177e8:	e7ab      	b.n	8017742 <_malloc_r+0x22>
 80177ea:	42a3      	cmp	r3, r4
 80177ec:	6862      	ldr	r2, [r4, #4]
 80177ee:	d1dd      	bne.n	80177ac <_malloc_r+0x8c>
 80177f0:	f8c8 2000 	str.w	r2, [r8]
 80177f4:	e7ec      	b.n	80177d0 <_malloc_r+0xb0>
 80177f6:	4623      	mov	r3, r4
 80177f8:	6864      	ldr	r4, [r4, #4]
 80177fa:	e7ac      	b.n	8017756 <_malloc_r+0x36>
 80177fc:	4634      	mov	r4, r6
 80177fe:	6876      	ldr	r6, [r6, #4]
 8017800:	e7b4      	b.n	801776c <_malloc_r+0x4c>
 8017802:	4613      	mov	r3, r2
 8017804:	e7cc      	b.n	80177a0 <_malloc_r+0x80>
 8017806:	230c      	movs	r3, #12
 8017808:	603b      	str	r3, [r7, #0]
 801780a:	4638      	mov	r0, r7
 801780c:	f000 f80e 	bl	801782c <__malloc_unlock>
 8017810:	e797      	b.n	8017742 <_malloc_r+0x22>
 8017812:	6025      	str	r5, [r4, #0]
 8017814:	e7dc      	b.n	80177d0 <_malloc_r+0xb0>
 8017816:	605b      	str	r3, [r3, #4]
 8017818:	deff      	udf	#255	; 0xff
 801781a:	bf00      	nop
 801781c:	20002054 	.word	0x20002054

08017820 <__malloc_lock>:
 8017820:	4801      	ldr	r0, [pc, #4]	; (8017828 <__malloc_lock+0x8>)
 8017822:	f000 b84b 	b.w	80178bc <__retarget_lock_acquire_recursive>
 8017826:	bf00      	nop
 8017828:	20002194 	.word	0x20002194

0801782c <__malloc_unlock>:
 801782c:	4801      	ldr	r0, [pc, #4]	; (8017834 <__malloc_unlock+0x8>)
 801782e:	f000 b846 	b.w	80178be <__retarget_lock_release_recursive>
 8017832:	bf00      	nop
 8017834:	20002194 	.word	0x20002194

08017838 <memset>:
 8017838:	4402      	add	r2, r0
 801783a:	4603      	mov	r3, r0
 801783c:	4293      	cmp	r3, r2
 801783e:	d100      	bne.n	8017842 <memset+0xa>
 8017840:	4770      	bx	lr
 8017842:	f803 1b01 	strb.w	r1, [r3], #1
 8017846:	e7f9      	b.n	801783c <memset+0x4>

08017848 <_sbrk_r>:
 8017848:	b538      	push	{r3, r4, r5, lr}
 801784a:	4d06      	ldr	r5, [pc, #24]	; (8017864 <_sbrk_r+0x1c>)
 801784c:	2300      	movs	r3, #0
 801784e:	4604      	mov	r4, r0
 8017850:	4608      	mov	r0, r1
 8017852:	602b      	str	r3, [r5, #0]
 8017854:	f7ec fa1c 	bl	8003c90 <_sbrk>
 8017858:	1c43      	adds	r3, r0, #1
 801785a:	d102      	bne.n	8017862 <_sbrk_r+0x1a>
 801785c:	682b      	ldr	r3, [r5, #0]
 801785e:	b103      	cbz	r3, 8017862 <_sbrk_r+0x1a>
 8017860:	6023      	str	r3, [r4, #0]
 8017862:	bd38      	pop	{r3, r4, r5, pc}
 8017864:	20002198 	.word	0x20002198

08017868 <__errno>:
 8017868:	4b01      	ldr	r3, [pc, #4]	; (8017870 <__errno+0x8>)
 801786a:	6818      	ldr	r0, [r3, #0]
 801786c:	4770      	bx	lr
 801786e:	bf00      	nop
 8017870:	20000094 	.word	0x20000094

08017874 <__libc_init_array>:
 8017874:	b570      	push	{r4, r5, r6, lr}
 8017876:	4d0d      	ldr	r5, [pc, #52]	; (80178ac <__libc_init_array+0x38>)
 8017878:	4c0d      	ldr	r4, [pc, #52]	; (80178b0 <__libc_init_array+0x3c>)
 801787a:	1b64      	subs	r4, r4, r5
 801787c:	10a4      	asrs	r4, r4, #2
 801787e:	2600      	movs	r6, #0
 8017880:	42a6      	cmp	r6, r4
 8017882:	d109      	bne.n	8017898 <__libc_init_array+0x24>
 8017884:	4d0b      	ldr	r5, [pc, #44]	; (80178b4 <__libc_init_array+0x40>)
 8017886:	4c0c      	ldr	r4, [pc, #48]	; (80178b8 <__libc_init_array+0x44>)
 8017888:	f000 fb6a 	bl	8017f60 <_init>
 801788c:	1b64      	subs	r4, r4, r5
 801788e:	10a4      	asrs	r4, r4, #2
 8017890:	2600      	movs	r6, #0
 8017892:	42a6      	cmp	r6, r4
 8017894:	d105      	bne.n	80178a2 <__libc_init_array+0x2e>
 8017896:	bd70      	pop	{r4, r5, r6, pc}
 8017898:	f855 3b04 	ldr.w	r3, [r5], #4
 801789c:	4798      	blx	r3
 801789e:	3601      	adds	r6, #1
 80178a0:	e7ee      	b.n	8017880 <__libc_init_array+0xc>
 80178a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80178a6:	4798      	blx	r3
 80178a8:	3601      	adds	r6, #1
 80178aa:	e7f2      	b.n	8017892 <__libc_init_array+0x1e>
 80178ac:	08019898 	.word	0x08019898
 80178b0:	08019898 	.word	0x08019898
 80178b4:	08019898 	.word	0x08019898
 80178b8:	0801989c 	.word	0x0801989c

080178bc <__retarget_lock_acquire_recursive>:
 80178bc:	4770      	bx	lr

080178be <__retarget_lock_release_recursive>:
 80178be:	4770      	bx	lr

080178c0 <memcpy>:
 80178c0:	440a      	add	r2, r1
 80178c2:	4291      	cmp	r1, r2
 80178c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80178c8:	d100      	bne.n	80178cc <memcpy+0xc>
 80178ca:	4770      	bx	lr
 80178cc:	b510      	push	{r4, lr}
 80178ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178d6:	4291      	cmp	r1, r2
 80178d8:	d1f9      	bne.n	80178ce <memcpy+0xe>
 80178da:	bd10      	pop	{r4, pc}

080178dc <_free_r>:
 80178dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178de:	2900      	cmp	r1, #0
 80178e0:	d044      	beq.n	801796c <_free_r+0x90>
 80178e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178e6:	9001      	str	r0, [sp, #4]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	f1a1 0404 	sub.w	r4, r1, #4
 80178ee:	bfb8      	it	lt
 80178f0:	18e4      	addlt	r4, r4, r3
 80178f2:	f7ff ff95 	bl	8017820 <__malloc_lock>
 80178f6:	4a1e      	ldr	r2, [pc, #120]	; (8017970 <_free_r+0x94>)
 80178f8:	9801      	ldr	r0, [sp, #4]
 80178fa:	6813      	ldr	r3, [r2, #0]
 80178fc:	b933      	cbnz	r3, 801790c <_free_r+0x30>
 80178fe:	6063      	str	r3, [r4, #4]
 8017900:	6014      	str	r4, [r2, #0]
 8017902:	b003      	add	sp, #12
 8017904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017908:	f7ff bf90 	b.w	801782c <__malloc_unlock>
 801790c:	42a3      	cmp	r3, r4
 801790e:	d908      	bls.n	8017922 <_free_r+0x46>
 8017910:	6825      	ldr	r5, [r4, #0]
 8017912:	1961      	adds	r1, r4, r5
 8017914:	428b      	cmp	r3, r1
 8017916:	bf01      	itttt	eq
 8017918:	6819      	ldreq	r1, [r3, #0]
 801791a:	685b      	ldreq	r3, [r3, #4]
 801791c:	1949      	addeq	r1, r1, r5
 801791e:	6021      	streq	r1, [r4, #0]
 8017920:	e7ed      	b.n	80178fe <_free_r+0x22>
 8017922:	461a      	mov	r2, r3
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	b10b      	cbz	r3, 801792c <_free_r+0x50>
 8017928:	42a3      	cmp	r3, r4
 801792a:	d9fa      	bls.n	8017922 <_free_r+0x46>
 801792c:	6811      	ldr	r1, [r2, #0]
 801792e:	1855      	adds	r5, r2, r1
 8017930:	42a5      	cmp	r5, r4
 8017932:	d10b      	bne.n	801794c <_free_r+0x70>
 8017934:	6824      	ldr	r4, [r4, #0]
 8017936:	4421      	add	r1, r4
 8017938:	1854      	adds	r4, r2, r1
 801793a:	42a3      	cmp	r3, r4
 801793c:	6011      	str	r1, [r2, #0]
 801793e:	d1e0      	bne.n	8017902 <_free_r+0x26>
 8017940:	681c      	ldr	r4, [r3, #0]
 8017942:	685b      	ldr	r3, [r3, #4]
 8017944:	6053      	str	r3, [r2, #4]
 8017946:	440c      	add	r4, r1
 8017948:	6014      	str	r4, [r2, #0]
 801794a:	e7da      	b.n	8017902 <_free_r+0x26>
 801794c:	d902      	bls.n	8017954 <_free_r+0x78>
 801794e:	230c      	movs	r3, #12
 8017950:	6003      	str	r3, [r0, #0]
 8017952:	e7d6      	b.n	8017902 <_free_r+0x26>
 8017954:	6825      	ldr	r5, [r4, #0]
 8017956:	1961      	adds	r1, r4, r5
 8017958:	428b      	cmp	r3, r1
 801795a:	bf04      	itt	eq
 801795c:	6819      	ldreq	r1, [r3, #0]
 801795e:	685b      	ldreq	r3, [r3, #4]
 8017960:	6063      	str	r3, [r4, #4]
 8017962:	bf04      	itt	eq
 8017964:	1949      	addeq	r1, r1, r5
 8017966:	6021      	streq	r1, [r4, #0]
 8017968:	6054      	str	r4, [r2, #4]
 801796a:	e7ca      	b.n	8017902 <_free_r+0x26>
 801796c:	b003      	add	sp, #12
 801796e:	bd30      	pop	{r4, r5, pc}
 8017970:	20002054 	.word	0x20002054

08017974 <with_errno>:
 8017974:	b513      	push	{r0, r1, r4, lr}
 8017976:	4604      	mov	r4, r0
 8017978:	ed8d 0b00 	vstr	d0, [sp]
 801797c:	f7ff ff74 	bl	8017868 <__errno>
 8017980:	ed9d 0b00 	vldr	d0, [sp]
 8017984:	6004      	str	r4, [r0, #0]
 8017986:	b002      	add	sp, #8
 8017988:	bd10      	pop	{r4, pc}

0801798a <xflow>:
 801798a:	b082      	sub	sp, #8
 801798c:	b158      	cbz	r0, 80179a6 <xflow+0x1c>
 801798e:	eeb1 7b40 	vneg.f64	d7, d0
 8017992:	ed8d 7b00 	vstr	d7, [sp]
 8017996:	ed9d 7b00 	vldr	d7, [sp]
 801799a:	2022      	movs	r0, #34	; 0x22
 801799c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80179a0:	b002      	add	sp, #8
 80179a2:	f7ff bfe7 	b.w	8017974 <with_errno>
 80179a6:	eeb0 7b40 	vmov.f64	d7, d0
 80179aa:	e7f2      	b.n	8017992 <xflow+0x8>
 80179ac:	0000      	movs	r0, r0
	...

080179b0 <__math_uflow>:
 80179b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80179b8 <__math_uflow+0x8>
 80179b4:	f7ff bfe9 	b.w	801798a <xflow>
 80179b8:	00000000 	.word	0x00000000
 80179bc:	10000000 	.word	0x10000000

080179c0 <__math_oflow>:
 80179c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80179c8 <__math_oflow+0x8>
 80179c4:	f7ff bfe1 	b.w	801798a <xflow>
 80179c8:	00000000 	.word	0x00000000
 80179cc:	70000000 	.word	0x70000000

080179d0 <__math_divzero>:
 80179d0:	b082      	sub	sp, #8
 80179d2:	2800      	cmp	r0, #0
 80179d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80179d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80179dc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80179e0:	ed8d 7b00 	vstr	d7, [sp]
 80179e4:	ed9d 0b00 	vldr	d0, [sp]
 80179e8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80179f8 <__math_divzero+0x28>
 80179ec:	2022      	movs	r0, #34	; 0x22
 80179ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80179f2:	b002      	add	sp, #8
 80179f4:	f7ff bfbe 	b.w	8017974 <with_errno>
	...

08017a00 <__math_invalid>:
 8017a00:	eeb0 7b40 	vmov.f64	d7, d0
 8017a04:	eeb4 7b47 	vcmp.f64	d7, d7
 8017a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017a10:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017a14:	d602      	bvs.n	8017a1c <__math_invalid+0x1c>
 8017a16:	2021      	movs	r0, #33	; 0x21
 8017a18:	f7ff bfac 	b.w	8017974 <with_errno>
 8017a1c:	4770      	bx	lr

08017a1e <__math_check_uflow>:
 8017a1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a26:	d102      	bne.n	8017a2e <__math_check_uflow+0x10>
 8017a28:	2022      	movs	r0, #34	; 0x22
 8017a2a:	f7ff bfa3 	b.w	8017974 <with_errno>
 8017a2e:	4770      	bx	lr

08017a30 <__math_check_oflow>:
 8017a30:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017a50 <__math_check_oflow+0x20>
 8017a34:	eeb0 7bc0 	vabs.f64	d7, d0
 8017a38:	eeb4 7b46 	vcmp.f64	d7, d6
 8017a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a40:	dd02      	ble.n	8017a48 <__math_check_oflow+0x18>
 8017a42:	2022      	movs	r0, #34	; 0x22
 8017a44:	f7ff bf96 	b.w	8017974 <with_errno>
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	f3af 8000 	nop.w
 8017a50:	ffffffff 	.word	0xffffffff
 8017a54:	7fefffff 	.word	0x7fefffff

08017a58 <checkint>:
 8017a58:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017a5c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8017a60:	429a      	cmp	r2, r3
 8017a62:	b570      	push	{r4, r5, r6, lr}
 8017a64:	dd2a      	ble.n	8017abc <checkint+0x64>
 8017a66:	f240 4333 	movw	r3, #1075	; 0x433
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	dc24      	bgt.n	8017ab8 <checkint+0x60>
 8017a6e:	1a9b      	subs	r3, r3, r2
 8017a70:	f1a3 0620 	sub.w	r6, r3, #32
 8017a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a78:	fa02 f403 	lsl.w	r4, r2, r3
 8017a7c:	fa02 f606 	lsl.w	r6, r2, r6
 8017a80:	f1c3 0520 	rsb	r5, r3, #32
 8017a84:	fa22 f505 	lsr.w	r5, r2, r5
 8017a88:	4334      	orrs	r4, r6
 8017a8a:	432c      	orrs	r4, r5
 8017a8c:	409a      	lsls	r2, r3
 8017a8e:	ea20 0202 	bic.w	r2, r0, r2
 8017a92:	ea21 0404 	bic.w	r4, r1, r4
 8017a96:	4322      	orrs	r2, r4
 8017a98:	f1a3 0420 	sub.w	r4, r3, #32
 8017a9c:	f1c3 0220 	rsb	r2, r3, #32
 8017aa0:	d10c      	bne.n	8017abc <checkint+0x64>
 8017aa2:	40d8      	lsrs	r0, r3
 8017aa4:	fa01 f302 	lsl.w	r3, r1, r2
 8017aa8:	4318      	orrs	r0, r3
 8017aaa:	40e1      	lsrs	r1, r4
 8017aac:	4308      	orrs	r0, r1
 8017aae:	f000 0001 	and.w	r0, r0, #1
 8017ab2:	f1d0 0002 	rsbs	r0, r0, #2
 8017ab6:	bd70      	pop	{r4, r5, r6, pc}
 8017ab8:	2002      	movs	r0, #2
 8017aba:	e7fc      	b.n	8017ab6 <checkint+0x5e>
 8017abc:	2000      	movs	r0, #0
 8017abe:	e7fa      	b.n	8017ab6 <checkint+0x5e>

08017ac0 <pow>:
 8017ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac4:	ee10 4a90 	vmov	r4, s1
 8017ac8:	ed2d 8b0a 	vpush	{d8-d12}
 8017acc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017ad0:	ee11 aa90 	vmov	sl, s3
 8017ad4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017ad8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8017adc:	429a      	cmp	r2, r3
 8017ade:	ee10 5a10 	vmov	r5, s0
 8017ae2:	ee11 0a10 	vmov	r0, s2
 8017ae6:	b087      	sub	sp, #28
 8017ae8:	46c4      	mov	ip, r8
 8017aea:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8017aee:	d806      	bhi.n	8017afe <pow+0x3e>
 8017af0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017af4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8017af8:	2b7f      	cmp	r3, #127	; 0x7f
 8017afa:	f240 8156 	bls.w	8017daa <pow+0x2ea>
 8017afe:	1802      	adds	r2, r0, r0
 8017b00:	eb4a 010a 	adc.w	r1, sl, sl
 8017b04:	f06f 0b01 	mvn.w	fp, #1
 8017b08:	1e57      	subs	r7, r2, #1
 8017b0a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8017b0e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8017b12:	45bb      	cmp	fp, r7
 8017b14:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017b18:	d242      	bcs.n	8017ba0 <pow+0xe0>
 8017b1a:	ea52 0301 	orrs.w	r3, r2, r1
 8017b1e:	f04f 0300 	mov.w	r3, #0
 8017b22:	d10c      	bne.n	8017b3e <pow+0x7e>
 8017b24:	196d      	adds	r5, r5, r5
 8017b26:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8017b2a:	4164      	adcs	r4, r4
 8017b2c:	42ab      	cmp	r3, r5
 8017b2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017b32:	41a3      	sbcs	r3, r4
 8017b34:	f0c0 808f 	bcc.w	8017c56 <pow+0x196>
 8017b38:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b3c:	e02b      	b.n	8017b96 <pow+0xd6>
 8017b3e:	4ed4      	ldr	r6, [pc, #848]	; (8017e90 <pow+0x3d0>)
 8017b40:	42b4      	cmp	r4, r6
 8017b42:	bf08      	it	eq
 8017b44:	429d      	cmpeq	r5, r3
 8017b46:	d109      	bne.n	8017b5c <pow+0x9c>
 8017b48:	1800      	adds	r0, r0, r0
 8017b4a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8017b4e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8017b52:	4283      	cmp	r3, r0
 8017b54:	4bcf      	ldr	r3, [pc, #828]	; (8017e94 <pow+0x3d4>)
 8017b56:	eb73 030a 	sbcs.w	r3, r3, sl
 8017b5a:	e7eb      	b.n	8017b34 <pow+0x74>
 8017b5c:	196d      	adds	r5, r5, r5
 8017b5e:	48ce      	ldr	r0, [pc, #824]	; (8017e98 <pow+0x3d8>)
 8017b60:	4164      	adcs	r4, r4
 8017b62:	42ab      	cmp	r3, r5
 8017b64:	eb70 0604 	sbcs.w	r6, r0, r4
 8017b68:	d375      	bcc.n	8017c56 <pow+0x196>
 8017b6a:	4281      	cmp	r1, r0
 8017b6c:	bf08      	it	eq
 8017b6e:	429a      	cmpeq	r2, r3
 8017b70:	d171      	bne.n	8017c56 <pow+0x196>
 8017b72:	4aca      	ldr	r2, [pc, #808]	; (8017e9c <pow+0x3dc>)
 8017b74:	4294      	cmp	r4, r2
 8017b76:	bf08      	it	eq
 8017b78:	429d      	cmpeq	r5, r3
 8017b7a:	d0dd      	beq.n	8017b38 <pow+0x78>
 8017b7c:	4294      	cmp	r4, r2
 8017b7e:	ea6f 0a0a 	mvn.w	sl, sl
 8017b82:	bf34      	ite	cc
 8017b84:	2400      	movcc	r4, #0
 8017b86:	2401      	movcs	r4, #1
 8017b88:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8017b8c:	4554      	cmp	r4, sl
 8017b8e:	f040 81dc 	bne.w	8017f4a <pow+0x48a>
 8017b92:	ee21 0b01 	vmul.f64	d0, d1, d1
 8017b96:	b007      	add	sp, #28
 8017b98:	ecbd 8b0a 	vpop	{d8-d12}
 8017b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba0:	196f      	adds	r7, r5, r5
 8017ba2:	eb44 0904 	adc.w	r9, r4, r4
 8017ba6:	1e7a      	subs	r2, r7, #1
 8017ba8:	f169 0300 	sbc.w	r3, r9, #0
 8017bac:	4593      	cmp	fp, r2
 8017bae:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017bb2:	d225      	bcs.n	8017c00 <pow+0x140>
 8017bb4:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017bb8:	2c00      	cmp	r4, #0
 8017bba:	da13      	bge.n	8017be4 <pow+0x124>
 8017bbc:	4651      	mov	r1, sl
 8017bbe:	f7ff ff4b 	bl	8017a58 <checkint>
 8017bc2:	2801      	cmp	r0, #1
 8017bc4:	d10e      	bne.n	8017be4 <pow+0x124>
 8017bc6:	eeb1 0b40 	vneg.f64	d0, d0
 8017bca:	ea57 0909 	orrs.w	r9, r7, r9
 8017bce:	d10b      	bne.n	8017be8 <pow+0x128>
 8017bd0:	f1ba 0f00 	cmp.w	sl, #0
 8017bd4:	dadf      	bge.n	8017b96 <pow+0xd6>
 8017bd6:	b007      	add	sp, #28
 8017bd8:	ecbd 8b0a 	vpop	{d8-d12}
 8017bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be0:	f7ff bef6 	b.w	80179d0 <__math_divzero>
 8017be4:	2000      	movs	r0, #0
 8017be6:	e7f0      	b.n	8017bca <pow+0x10a>
 8017be8:	f1ba 0f00 	cmp.w	sl, #0
 8017bec:	dad3      	bge.n	8017b96 <pow+0xd6>
 8017bee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017bf2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017bf6:	ed8d 7b00 	vstr	d7, [sp]
 8017bfa:	ed9d 0b00 	vldr	d0, [sp]
 8017bfe:	e7ca      	b.n	8017b96 <pow+0xd6>
 8017c00:	2c00      	cmp	r4, #0
 8017c02:	da2b      	bge.n	8017c5c <pow+0x19c>
 8017c04:	4651      	mov	r1, sl
 8017c06:	f7ff ff27 	bl	8017a58 <checkint>
 8017c0a:	b930      	cbnz	r0, 8017c1a <pow+0x15a>
 8017c0c:	b007      	add	sp, #28
 8017c0e:	ecbd 8b0a 	vpop	{d8-d12}
 8017c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c16:	f7ff bef3 	b.w	8017a00 <__math_invalid>
 8017c1a:	1e41      	subs	r1, r0, #1
 8017c1c:	4248      	negs	r0, r1
 8017c1e:	4148      	adcs	r0, r1
 8017c20:	0480      	lsls	r0, r0, #18
 8017c22:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017c26:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8017c2a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8017c2e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8017c32:	2b7f      	cmp	r3, #127	; 0x7f
 8017c34:	d92d      	bls.n	8017c92 <pow+0x1d2>
 8017c36:	4b96      	ldr	r3, [pc, #600]	; (8017e90 <pow+0x3d0>)
 8017c38:	2000      	movs	r0, #0
 8017c3a:	429c      	cmp	r4, r3
 8017c3c:	bf08      	it	eq
 8017c3e:	4285      	cmpeq	r5, r0
 8017c40:	f43f af7a 	beq.w	8017b38 <pow+0x78>
 8017c44:	f240 31bd 	movw	r1, #957	; 0x3bd
 8017c48:	428a      	cmp	r2, r1
 8017c4a:	d80c      	bhi.n	8017c66 <pow+0x1a6>
 8017c4c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017c50:	42a8      	cmp	r0, r5
 8017c52:	41a3      	sbcs	r3, r4
 8017c54:	d204      	bcs.n	8017c60 <pow+0x1a0>
 8017c56:	ee31 0b00 	vadd.f64	d0, d1, d0
 8017c5a:	e79c      	b.n	8017b96 <pow+0xd6>
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	e7e4      	b.n	8017c2a <pow+0x16a>
 8017c60:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017c64:	e797      	b.n	8017b96 <pow+0xd6>
 8017c66:	2d01      	cmp	r5, #1
 8017c68:	eb74 0303 	sbcs.w	r3, r4, r3
 8017c6c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017c70:	bf34      	ite	cc
 8017c72:	2301      	movcc	r3, #1
 8017c74:	2300      	movcs	r3, #0
 8017c76:	4296      	cmp	r6, r2
 8017c78:	bf8c      	ite	hi
 8017c7a:	2600      	movhi	r6, #0
 8017c7c:	2601      	movls	r6, #1
 8017c7e:	42b3      	cmp	r3, r6
 8017c80:	f000 809b 	beq.w	8017dba <pow+0x2fa>
 8017c84:	b007      	add	sp, #28
 8017c86:	ecbd 8b0a 	vpop	{d8-d12}
 8017c8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c8e:	f7ff be97 	b.w	80179c0 <__math_oflow>
 8017c92:	f1bc 0f00 	cmp.w	ip, #0
 8017c96:	d10b      	bne.n	8017cb0 <pow+0x1f0>
 8017c98:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8017e80 <pow+0x3c0>
 8017c9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017ca0:	ec53 2b17 	vmov	r2, r3, d7
 8017ca4:	ee17 5a10 	vmov	r5, s14
 8017ca8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017cac:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017cb0:	4b7b      	ldr	r3, [pc, #492]	; (8017ea0 <pow+0x3e0>)
 8017cb2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017cb6:	4423      	add	r3, r4
 8017cb8:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017cbc:	1519      	asrs	r1, r3, #20
 8017cbe:	0d1b      	lsrs	r3, r3, #20
 8017cc0:	051b      	lsls	r3, r3, #20
 8017cc2:	1ae7      	subs	r7, r4, r3
 8017cc4:	4b77      	ldr	r3, [pc, #476]	; (8017ea4 <pow+0x3e4>)
 8017cc6:	ee03 1a10 	vmov	s6, r1
 8017cca:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017cce:	1e2e      	subs	r6, r5, #0
 8017cd0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8017cd4:	ec47 6b15 	vmov	d5, r6, r7
 8017cd8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017cdc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017ce0:	ed93 7b00 	vldr	d7, [r3]
 8017ce4:	ed93 5b02 	vldr	d5, [r3, #8]
 8017ce8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017cec:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017cf0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8017cf4:	ee36 4b02 	vadd.f64	d4, d6, d2
 8017cf8:	ee32 2b44 	vsub.f64	d2, d2, d4
 8017cfc:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017d00:	ed93 5b04 	vldr	d5, [r3, #16]
 8017d04:	ee32 2b06 	vadd.f64	d2, d2, d6
 8017d08:	ee37 7b02 	vadd.f64	d7, d7, d2
 8017d0c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017d10:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017d14:	ee34 8b00 	vadd.f64	d8, d4, d0
 8017d18:	eeb0 9b40 	vmov.f64	d9, d0
 8017d1c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017d20:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8017d24:	ee34 ab00 	vadd.f64	d10, d4, d0
 8017d28:	ed93 5b06 	vldr	d5, [r3, #24]
 8017d2c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017d30:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017d34:	ed93 4b08 	vldr	d4, [r3, #32]
 8017d38:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8017d3c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017d40:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017d44:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8017d48:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8017d4c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017d50:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017d54:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017d58:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017d5c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017d60:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017d64:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017d68:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017d6c:	ee16 3a90 	vmov	r3, s13
 8017d70:	eeb0 5b46 	vmov.f64	d5, d6
 8017d74:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017d78:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017d7c:	18b2      	adds	r2, r6, r2
 8017d7e:	2a3e      	cmp	r2, #62	; 0x3e
 8017d80:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017d84:	ee38 8b44 	vsub.f64	d8, d8, d4
 8017d88:	ee38 8b07 	vadd.f64	d8, d8, d7
 8017d8c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8017d90:	d91b      	bls.n	8017dca <pow+0x30a>
 8017d92:	2a00      	cmp	r2, #0
 8017d94:	da0b      	bge.n	8017dae <pow+0x2ee>
 8017d96:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d9a:	ee36 0b00 	vadd.f64	d0, d6, d0
 8017d9e:	2800      	cmp	r0, #0
 8017da0:	f43f aef9 	beq.w	8017b96 <pow+0xd6>
 8017da4:	eeb1 0b40 	vneg.f64	d0, d0
 8017da8:	e6f5      	b.n	8017b96 <pow+0xd6>
 8017daa:	2000      	movs	r0, #0
 8017dac:	e780      	b.n	8017cb0 <pow+0x1f0>
 8017dae:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017db2:	d909      	bls.n	8017dc8 <pow+0x308>
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f6bf af65 	bge.w	8017c84 <pow+0x1c4>
 8017dba:	b007      	add	sp, #28
 8017dbc:	ecbd 8b0a 	vpop	{d8-d12}
 8017dc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc4:	f7ff bdf4 	b.w	80179b0 <__math_uflow>
 8017dc8:	2600      	movs	r6, #0
 8017dca:	4937      	ldr	r1, [pc, #220]	; (8017ea8 <pow+0x3e8>)
 8017dcc:	ed91 4b02 	vldr	d4, [r1, #8]
 8017dd0:	ed91 3b00 	vldr	d3, [r1]
 8017dd4:	eeb0 7b44 	vmov.f64	d7, d4
 8017dd8:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017ddc:	ee17 5a10 	vmov	r5, s14
 8017de0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017de4:	ed91 4b04 	vldr	d4, [r1, #16]
 8017de8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017dec:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017df0:	ed91 4b06 	vldr	d4, [r1, #24]
 8017df4:	18dc      	adds	r4, r3, r3
 8017df6:	f104 030f 	add.w	r3, r4, #15
 8017dfa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8017dfe:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017e02:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8017e06:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017e0a:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017e0e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8017e12:	ed91 4b08 	vldr	d4, [r1, #32]
 8017e16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8017e1a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017e1e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017e22:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8017e26:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017e2a:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017e2e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8017e32:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8017e36:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8017e3a:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017e3e:	1940      	adds	r0, r0, r5
 8017e40:	2700      	movs	r7, #0
 8017e42:	eb17 020c 	adds.w	r2, r7, ip
 8017e46:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8017e4a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017e4e:	2e00      	cmp	r6, #0
 8017e50:	d176      	bne.n	8017f40 <pow+0x480>
 8017e52:	42bd      	cmp	r5, r7
 8017e54:	db2a      	blt.n	8017eac <pow+0x3ec>
 8017e56:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8017e5a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8017e5e:	4610      	mov	r0, r2
 8017e60:	ec41 0b10 	vmov	d0, r0, r1
 8017e64:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017e68:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8017e88 <pow+0x3c8>
 8017e6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e70:	b007      	add	sp, #28
 8017e72:	ecbd 8b0a 	vpop	{d8-d12}
 8017e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e7a:	f7ff bdd9 	b.w	8017a30 <__math_check_oflow>
 8017e7e:	bf00      	nop
 8017e80:	00000000 	.word	0x00000000
 8017e84:	43300000 	.word	0x43300000
 8017e88:	00000000 	.word	0x00000000
 8017e8c:	7f000000 	.word	0x7f000000
 8017e90:	3ff00000 	.word	0x3ff00000
 8017e94:	fff00000 	.word	0xfff00000
 8017e98:	ffe00000 	.word	0xffe00000
 8017e9c:	7fe00000 	.word	0x7fe00000
 8017ea0:	c0196aab 	.word	0xc0196aab
 8017ea4:	08018848 	.word	0x08018848
 8017ea8:	08017fd8 	.word	0x08017fd8
 8017eac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017eb0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8017eb4:	4610      	mov	r0, r2
 8017eb6:	ec41 0b15 	vmov	d5, r0, r1
 8017eba:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8017ebe:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017ec2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8017ec6:	eeb0 4bc7 	vabs.f64	d4, d7
 8017eca:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8017ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8017f50 <pow+0x490>
 8017ed6:	d52a      	bpl.n	8017f2e <pow+0x46e>
 8017ed8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017edc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017ee8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8017eec:	bf58      	it	pl
 8017eee:	eeb0 4b43 	vmovpl.f64	d4, d3
 8017ef2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017ef6:	ee34 6b43 	vsub.f64	d6, d4, d3
 8017efa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017efe:	ee36 6b05 	vadd.f64	d6, d6, d5
 8017f02:	ee36 6b03 	vadd.f64	d6, d6, d3
 8017f06:	ee36 7b44 	vsub.f64	d7, d6, d4
 8017f0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f12:	d104      	bne.n	8017f1e <pow+0x45e>
 8017f14:	4632      	mov	r2, r6
 8017f16:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017f1a:	ec43 2b17 	vmov	d7, r2, r3
 8017f1e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017f22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017f26:	ee26 6b00 	vmul.f64	d6, d6, d0
 8017f2a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017f2e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017f32:	b007      	add	sp, #28
 8017f34:	ecbd 8b0a 	vpop	{d8-d12}
 8017f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f3c:	f7ff bd6f 	b.w	8017a1e <__math_check_uflow>
 8017f40:	ec43 2b10 	vmov	d0, r2, r3
 8017f44:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017f48:	e625      	b.n	8017b96 <pow+0xd6>
 8017f4a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8017f58 <pow+0x498>
 8017f4e:	e622      	b.n	8017b96 <pow+0xd6>
 8017f50:	00000000 	.word	0x00000000
 8017f54:	00100000 	.word	0x00100000
	...

08017f60 <_init>:
 8017f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f62:	bf00      	nop
 8017f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f66:	bc08      	pop	{r3}
 8017f68:	469e      	mov	lr, r3
 8017f6a:	4770      	bx	lr

08017f6c <_fini>:
 8017f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f6e:	bf00      	nop
 8017f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f72:	bc08      	pop	{r3}
 8017f74:	469e      	mov	lr, r3
 8017f76:	4770      	bx	lr
