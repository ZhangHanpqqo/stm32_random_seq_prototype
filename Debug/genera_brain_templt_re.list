
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f58  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  080181f0  080181f0  000281f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019b08  08019b08  00029b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019b10  08019b10  00029b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019b14  08019b14  00029b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08019b18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002168  20000098  08019bb0  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002200  08019bb0  00032200  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY
 14 .debug_info   00049dd7  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000941f  00000000  00000000  00079ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000039d0  00000000  00000000  00083300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d0f  00000000  00000000  00086cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00046608  00000000  00000000  000899df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000504dd  00000000  00000000  000cffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195f5f  00000000  00000000  001204c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ff00  00000000  00000000  002b6424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c6324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080181d8 	.word	0x080181d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	080181d8 	.word	0x080181d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tTapeDelayExt_initToPool>:
    * you know you will write some comments one day, right
    */


void tTapeDelayExt_initToPool (tTapeDelayExt* const dlext, uint32_t* delays, uint32_t maxDelay, uint32_t numPoint, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
//	_tMempool* m = *mp;
    _tTapeDelayExt* d = *dlext = (_tTapeDelayExt*) malloc(sizeof(_tTapeDelayExt));
 80005e2:	2010      	movs	r0, #16
 80005e4:	f017 f9aa 	bl	801793c <malloc>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]

    tTapeDelay_initToPool(&(d->tdelay), delays[0], maxDelay, mp);
 80005f6:	6938      	ldr	r0, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000604:	6a3a      	ldr	r2, [r7, #32]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	eeb0 0a67 	vmov.f32	s0, s15
 800060c:	f000 f981 	bl	8000912 <tTapeDelay_initToPool>
    d->numPoint = numPoint;
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	605a      	str	r2, [r3, #4]
    d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f017 f98e 	bl	801793c <malloc>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	609a      	str	r2, [r3, #8]
    d->lastOuts = (Lfloat *) malloc(sizeof(Lfloat) * numPoint);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f017 f985 	bl	801793c <malloc>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < numPoint; i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e015      	b.n	800066c <tTapeDelayExt_initToPool+0x98>
    	d->delays[i] = delays[i];
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	441a      	add	r2, r3
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	601a      	str	r2, [r3, #0]
    	d->lastOuts[i] = 0.0f;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < numPoint; i++){
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8e5      	bhi.n	8000640 <tTapeDelayExt_initToPool+0x6c>
    }

}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <tTapeDelayExt_tick>:
	_tTapeDelayExt* d = *dlext;
//	_tTapeDelay* dt = &(d->tdelay);
	for (unsigned i = 0; i < (d->tdelay)->maxDelay; i++) (d->tdelay)->buff[i] = 0;
}

void tTapeDelayExt_tick(tTapeDelayExt* const dlext, Lfloat input){
 800067e:	b590      	push	{r4, r7, lr}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	ed87 0a00 	vstr	s0, [r7]
	_tTapeDelayExt* d = *dlext;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = (d->tdelay);
	tTapeDelay_tick(&(d->tdelay), input);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	ed97 0a00 	vldr	s0, [r7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f97f 	bl	800099a <tTapeDelay_tick>
	d->lastOuts[0] = (d->tdelay)->lastOut;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	68d2      	ldr	r2, [r2, #12]
 80006a6:	601a      	str	r2, [r3, #0]

	for(int i = 1; i < d->numPoint; i++){
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e01b      	b.n	80006e6 <tTapeDelayExt_tick+0x68>
		d->lastOuts[i] = tTapeDelay_tapOut(&(d->tdelay), d->delays[i]);
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	18d4      	adds	r4, r2, r3
 80006ce:	eeb0 0a67 	vmov.f32	s0, s15
 80006d2:	4608      	mov	r0, r1
 80006d4:	f000 fa75 	bl	8000bc2 <tTapeDelay_tapOut>
 80006d8:	eef0 7a40 	vmov.f32	s15, s0
 80006dc:	edc4 7a00 	vstr	s15, [r4]
	for(int i = 1; i < d->numPoint; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8de      	bhi.n	80006ae <tTapeDelayExt_tick+0x30>
	}

}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}

080006fa <tTapeDelayExt_setDelay>:

void tTapeDelayExt_setDelay(tTapeDelayExt* const dlext, uint32_t* delays){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60bb      	str	r3, [r7, #8]
//	_tTapeDelay* dt = &(d->tdelay);
	tTapeDelay_setDelay(&(d->tdelay), delays[0]);
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000718:	eeb0 0a67 	vmov.f32	s0, s15
 800071c:	4610      	mov	r0, r2
 800071e:	f000 fa30 	bl	8000b82 <tTapeDelay_setDelay>
	for (int i = 0; i < d->numPoint; i++){
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e00d      	b.n	8000744 <tTapeDelayExt_setDelay+0x4a>
	    	d->delays[i] = delays[i];
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	441a      	add	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	6899      	ldr	r1, [r3, #8]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < d->numPoint; i++){
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8ec      	bhi.n	8000728 <tTapeDelayExt_setDelay+0x2e>
	    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <tTapeDelayExt_setNumPoint>:

void tTapeDelayExt_setNumPoint(tTapeDelayExt* const dlext, int numPoint){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	_tTapeDelayExt* d = *dlext;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	free(d->delays);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f017 f8ed 	bl	801794c <free>
	d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f017 f8e0 	bl	801793c <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	609a      	str	r2, [r3, #8]


	uint32_t* t = (float *)malloc(sizeof(float) * d->numPoint);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f017 f8d6 	bl	801793c <malloc>
 8000790:	4603      	mov	r3, r0
 8000792:	60bb      	str	r3, [r7, #8]
	memcpy(t, d->lastOuts, sizeof(float) * d->numPoint);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	68d9      	ldr	r1, [r3, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f017 f9cb 	bl	8017b3c <memcpy>
	free(d->lastOuts);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f017 f8ce 	bl	801794c <free>
	d->lastOuts = (float *)malloc(sizeof(float) * numPoint);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f017 f8c1 	bl	801793c <malloc>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	60da      	str	r2, [r3, #12]
	memcpy((d->lastOuts), t, (numPoint < d->numPoint ? numPoint : d->numPoint) * sizeof(uint32_t));
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	bf28      	it	cs
 80007d0:	4613      	movcs	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	461a      	mov	r2, r3
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	f017 f9b0 	bl	8017b3c <memcpy>
	free(t);
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f017 f8b5 	bl	801794c <free>

	d->numPoint = numPoint;
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	605a      	str	r2, [r3, #4]
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_LEAF_clip>:

#endif

// cannot find things in delay_math.h
Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80007fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80007fe:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 8000802:	ed97 7a02 	vldr	s14, [r7, #8]
 8000806:	edd7 7a03 	vldr	s15, [r7, #12]
 800080a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d501      	bpl.n	8000818 <_LEAF_clip+0x28>
    {
        return min;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	e00b      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else if (val > max)
 8000818:	ed97 7a02 	vldr	s14, [r7, #8]
 800081c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	dd01      	ble.n	800082e <_LEAF_clip+0x3e>
    {
        return max;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	e000      	b.n	8000830 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 800082e:	68bb      	ldr	r3, [r7, #8]
    }
}
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb0 0a67 	vmov.f32	s0, s15
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_LEAF_interpolate_hermite_x>:

Lfloat _LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
 8000842:	b480      	push	{r7}
 8000844:	b08d      	sub	sp, #52	; 0x34
 8000846:	af00      	add	r7, sp, #0
 8000848:	ed87 0a05 	vstr	s0, [r7, #20]
 800084c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000850:	ed87 1a03 	vstr	s2, [r7, #12]
 8000854:	edc7 1a02 	vstr	s3, [r7, #8]
 8000858:	ed87 2a01 	vstr	s4, [r7, #4]
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8000860:	ed97 7a03 	vldr	s14, [r7, #12]
 8000864:	edd7 7a05 	vldr	s15, [r7, #20]
 8000868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Lfloat y0my1 = yy0 - yy1;
 8000878:	ed97 7a05 	vldr	s14, [r7, #20]
 800087c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000884:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8000888:	ed97 7a04 	vldr	s14, [r7, #16]
 800088c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000894:	edd7 6a02 	vldr	s13, [r7, #8]
 8000898:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800089c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80008ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	edc7 7a08 	vstr	s15, [r7, #32]
    Lfloat c2 = y0my1 + c1 - c3;
 80008b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80008bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80008c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]

    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80008d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80008d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80008e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000900:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	3734      	adds	r7, #52	; 0x34
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	ed87 0a02 	vstr	s0, [r7, #8]
 800091e:	6079      	str	r1, [r7, #4]
 8000920:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	617b      	str	r3, [r7, #20]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 8000928:	6979      	ldr	r1, [r7, #20]
 800092a:	202c      	movs	r0, #44	; 0x2c
 800092c:	f000 fb19 	bl	8000f62 <mpool_alloc>
 8000930:	4602      	mov	r2, r0
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	619a      	str	r2, [r3, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	6979      	ldr	r1, [r7, #20]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb07 	bl	8000f62 <mpool_alloc>
 8000954:	4602      	mov	r2, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	609a      	str	r2, [r3, #8]

    d->gain = 1.0f;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000960:	605a      	str	r2, [r3, #4]

    d->lastIn = 0.0f;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	60da      	str	r2, [r3, #12]

    d->idx = 0.0f;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
    d->inc = 1.0f;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000980:	621a      	str	r2, [r3, #32]
    d->inPoint = 0;
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]

    tTapeDelay_setDelay(dl, delay);
 8000988:	ed97 0a02 	vldr	s0, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f8f8 	bl	8000b82 <tTapeDelay_setDelay>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]

    d->buff[d->inPoint] = input * d->gain;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c6:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <tTapeDelay_tick+0x4c>
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]

    int idx =  (int) d->idx;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f0:	ee17 3a90 	vmov	r3, s15
 80009f4:	60fb      	str	r3, [r7, #12]
    Lfloat alpha = d->idx - idx;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0a:	edc7 7a02 	vstr	s15, [r7, #8]

    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6899      	ldr	r1, [r3, #8]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	6992      	ldr	r2, [r2, #24]
 8000a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8000a24:	fb00 f202 	mul.w	r2, r0, r2
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a3c:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a52:	fb00 f303 	mul.w	r3, r0, r3
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a5c:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	6899      	ldr	r1, [r3, #8]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3302      	adds	r3, #2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a72:	fb00 f303 	mul.w	r3, r0, r3
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000a7c:	ed93 6a00 	vldr	s12, [r3]
 8000a80:	ed97 2a02 	vldr	s4, [r7, #8]
 8000a84:	eef0 1a46 	vmov.f32	s3, s12
 8000a88:	eeb0 1a66 	vmov.f32	s2, s13
 8000a8c:	eef0 0a47 	vmov.f32	s1, s14
 8000a90:	eeb0 0a67 	vmov.f32	s0, s15
 8000a94:	f7ff fed5 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000a98:	eef0 7a40 	vmov.f32	s15, s0
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	edc3 7a03 	vstr	s15, [r3, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab8:	edc7 7a05 	vstr	s15, [r7, #20]
    while (diff < 0.f) diff += d->maxDelay;
 8000abc:	e00b      	b.n	8000ad6 <tTapeDelay_tick+0x13c>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad2:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d4ec      	bmi.n	8000abe <tTapeDelay_tick+0x124>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000aea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	ed93 7a07 	vldr	s14, [r3, #28]
 8000af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	edc3 7a08 	vstr	s15, [r3, #32]

    d->idx += d->inc;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8000b20:	e00d      	b.n	8000b3e <tTapeDelay_tick+0x1a4>
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	dae3      	bge.n	8000b22 <tTapeDelay_tick+0x188>

    if (d->lastOut)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	d002      	beq.n	8000b70 <tTapeDelay_tick+0x1d6>
        return d->lastOut;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	e001      	b.n	8000b74 <tTapeDelay_tick+0x1da>
    return 0.0f;
 8000b70:	f04f 0300 	mov.w	r3, #0
}
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60fb      	str	r3, [r7, #12]
    d->delay = _LEAF_clip(1.f, delay,  d->maxDelay);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba0:	eeb0 1a67 	vmov.f32	s2, s15
 8000ba4:	edd7 0a00 	vldr	s1, [r7]
 8000ba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bac:	f7ff fe20 	bl	80007f0 <_LEAF_clip>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <tTapeDelay_tapOut>:

Lfloat tTapeDelay_tapOut (tTapeDelay* const dl, Lfloat tapDelay)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b088      	sub	sp, #32
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	61bb      	str	r3, [r7, #24]

    Lfloat tap = (Lfloat) d->inPoint - tapDelay - 1.f;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000be0:	edd7 7a00 	vldr	s15, [r7]
 8000be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf0:	edc7 7a07 	vstr	s15, [r7, #28]

    // Check for wraparound.
    while ( tap < 0.f )   tap += (Lfloat)d->maxDelay;
 8000bf4:	e00b      	b.n	8000c0e <tTapeDelay_tapOut+0x4c>
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0a:	edc7 7a07 	vstr	s15, [r7, #28]
 8000c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d4ec      	bmi.n	8000bf6 <tTapeDelay_tapOut+0x34>

    int idx =  (int) tap;
 8000c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c24:	ee17 3a90 	vmov	r3, s15
 8000c28:	617b      	str	r3, [r7, #20]

    Lfloat alpha = tap - idx;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3c:	edc7 7a04 	vstr	s15, [r7, #16]

    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	6899      	ldr	r1, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	6992      	ldr	r2, [r2, #24]
 8000c52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c56:	fb00 f202 	mul.w	r2, r0, r2
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	6899      	ldr	r1, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c84:	fb00 f303 	mul.w	r3, r0, r3
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000c8e:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	6899      	ldr	r1, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000ca4:	fb00 f303 	mul.w	r3, r0, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
    Lfloat samp =   _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000cae:	ed93 6a00 	vldr	s12, [r3]
 8000cb2:	ed97 2a04 	vldr	s4, [r7, #16]
 8000cb6:	eef0 1a46 	vmov.f32	s3, s12
 8000cba:	eeb0 1a66 	vmov.f32	s2, s13
 8000cbe:	eef0 0a47 	vmov.f32	s1, s14
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f7ff fdbc 	bl	8000842 <_LEAF_interpolate_hermite_x>
 8000cca:	ed87 0a03 	vstr	s0, [r7, #12]
                                              alpha);

    return samp;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	ee07 3a90 	vmov	s15, r3

}
 8000cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cec:	6079      	str	r1, [r7, #4]
 8000cee:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8000cf6:	69f9      	ldr	r1, [r7, #28]
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f000 f932 	bl	8000f62 <mpool_alloc>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d26:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000de8 <tRamp_initToPool+0x108>
 8000d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d504      	bpl.n	8000d84 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	61da      	str	r2, [r3, #28]
 8000d82:	e002      	b.n	8000d8a <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	3a83126f 	.word	0x3a83126f

08000dec <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	db07      	blt.n	8000e7a <tRamp_tick+0x4a>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	dc12      	bgt.n	8000ea0 <tRamp_tick+0x70>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	d80f      	bhi.n	8000eb0 <tRamp_tick+0x80>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d507      	bpl.n	8000eb0 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	ee07 3a90 	vmov	s15, r3
}
 8000eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000ec6:	b590      	push	{r4, r7, lr}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af02      	add	r7, sp, #8
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685c      	ldr	r4, [r3, #4]
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f000 f902 	bl	80010e0 <mpool_align>
 8000edc:	4603      	mov	r3, r0
 8000ede:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d203      	bcs.n	8000f00 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6898      	ldr	r0, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	f000 f8ea 	bl	80010fc <create_node>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	615a      	str	r2, [r3, #20]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}

08000f36 <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	331c      	adds	r3, #28
 8000f46:	461a      	mov	r2, r3
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f7ff ffbb 	bl	8000ec6 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f103 021c 	add.w	r2, r3, #28
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b08d      	sub	sp, #52	; 0x34
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f72:	3201      	adds	r2, #1
 8000f74:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d116      	bne.n	8000fac <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d206      	bcs.n	8000f9c <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2101      	movs	r1, #1
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f9f9 	bl	800138c <LEAF_internalErrorCallback>
 8000f9a:	e005      	b.n	8000fa8 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f9f2 	bl	800138c <LEAF_internalErrorCallback>
        }
        return NULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e095      	b.n	80010d8 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f897 	bl	80010e0 <mpool_align>
 8000fb2:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000fba:	e01c      	b.n	8000ff6 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d116      	bne.n	8000ff6 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d206      	bcs.n	8000fe6 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f9d4 	bl	800138c <LEAF_internalErrorCallback>
 8000fe4:	e005      	b.n	8000ff2 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9cd 	bl	800138c <LEAF_internalErrorCallback>
            }
            return NULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e070      	b.n	80010d8 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8dd      	bhi.n	8000fbc <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	d924      	bls.n	8001066 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	441a      	add	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4413      	add	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	4622      	mov	r2, r4
 800105e:	f000 f84d 	bl	80010fc <create_node>
 8001062:	6238      	str	r0, [r7, #32]
 8001064:	e008      	b.n	8001078 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	441a      	add	r2, r3
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	429a      	cmp	r2, r3
 8001080:	d102      	bne.n	8001088 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6a3a      	ldr	r2, [r7, #32]
 8001086:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8001088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800108a:	f000 f855 	bl	8001138 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	440b      	add	r3, r1
 800109e:	441a      	add	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dd12      	ble.n	80010d4 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	e007      	b.n	80010ca <mpool_alloc+0x168>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f2      	bhi.n	80010ba <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	681b      	ldr	r3, [r3, #0]
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	372c      	adds	r7, #44	; 0x2c
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3307      	adds	r3, #7
 80010ec:	f023 0307 	bic.w	r3, r3, #7
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	441a      	add	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	601a      	str	r2, [r3, #0]
    node->next = next;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
    node->size = size;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	60da      	str	r2, [r3, #12]
    return node;
 800112a:	697b      	ldr	r3, [r7, #20]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6892      	ldr	r2, [r2, #8]
 8001150:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3318      	adds	r3, #24
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f804 	bl	80011a0 <tMempool_initToPool>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	2018      	movs	r0, #24
 80011b8:	f7ff fed3 	bl	8000f62 <mpool_alloc>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff fe76 	bl	8000ec6 <mpool_create>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	2018      	movs	r0, #24
 80011f8:	f7ff feb3 	bl	8000f62 <mpool_alloc>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	edd3 7a01 	vldr	s15, [r3, #4]
 8001228:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001248 <tCycle_initToPool+0x64>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800123c:	615a      	str	r2, [r3, #20]
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	4f800000 	.word	0x4f800000

0800124c <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 7a04 	vldr	s14, [r3, #16]
 800126a:	edd7 7a00 	vldr	s15, [r7]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 2a90 	vmov	r2, s15
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	460b      	mov	r3, r1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800129e:	69f9      	ldr	r1, [r7, #28]
 80012a0:	2018      	movs	r0, #24
 80012a2:	f7ff fe5e 	bl	8000f62 <mpool_alloc>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	7afa      	ldrb	r2, [r7, #11]
 80012c4:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	615a      	str	r2, [r3, #20]
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6178      	str	r0, [r7, #20]
 80012e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80012e4:	60f9      	str	r1, [r7, #12]
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff fe1e 	bl	8000f36 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8001300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001304:	ed97 7a04 	vldr	s14, [r7, #16]
 8001308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800136c <LEAF_init+0x94>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LEAF_init+0x98>)
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	e009      	b.n	8001352 <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	330e      	adds	r3, #14
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3301      	adds	r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b02      	cmp	r3, #2
 8001356:	ddf2      	ble.n	800133e <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2200      	movs	r2, #0
 800135c:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2200      	movs	r2, #0
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40c90fdb 	.word	0x40c90fdb
 8001370:	08001375 	.word	0x08001375

08001374 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	330e      	adds	r3, #14
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	4611      	mov	r1, r2
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MIDI_Application+0x54>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d111      	bne.n	80013ec <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MIDI_Application+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10d      	bne.n	80013ec <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	4911      	ldr	r1, [pc, #68]	; (8001418 <MIDI_Application+0x5c>)
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <MIDI_Application+0x60>)
 80013d6:	f003 fc20 	bl	8004c1a <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MIDI_Application+0x58>)
 80013dc:	2203      	movs	r2, #3
 80013de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MIDI_Application+0x64>)
 80013e8:	f008 fa76 	bl	80098d8 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MIDI_Application+0x54>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10b      	bne.n	800140c <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MIDI_Application+0x58>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <MIDI_Application+0x60>)
 80013fc:	f003 fba7 	bl	8004b4e <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MIDI_Application+0x64>)
 8001408:	f008 fa66 	bl	80098d8 <HAL_GPIO_WritePin>
	}
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20001d9c 	.word	0x20001d9c
 8001414:	20000000 	.word	0x20000000
 8001418:	30000000 	.word	0x30000000
 800141c:	30000460 	.word	0x30000460
 8001420:	58020400 	.word	0x58020400

08001424 <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 800142c:	4bab      	ldr	r3, [pc, #684]	; (80016dc <ProcessReceivedMidiDatas+0x2b8>)
 800142e:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 814a 	beq.w	80016d2 <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 800143e:	e142      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4ba6      	ldr	r3, [pc, #664]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4ba3      	ldr	r3, [pc, #652]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001454:	705a      	strb	r2, [r3, #1]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b9f      	ldr	r3, [pc, #636]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001462:	709a      	strb	r2, [r3, #2]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	4b9c      	ldr	r3, [pc, #624]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001470:	70da      	strb	r2, [r3, #3]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8001478:	4b99      	ldr	r3, [pc, #612]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2bf0      	cmp	r3, #240	; 0xf0
 8001480:	f000 8120 	beq.w	80016c4 <ProcessReceivedMidiDatas+0x2a0>
 8001484:	2bf0      	cmp	r3, #240	; 0xf0
 8001486:	f300 811e 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 800148a:	2be0      	cmp	r3, #224	; 0xe0
 800148c:	f000 811b 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001490:	2be0      	cmp	r3, #224	; 0xe0
 8001492:	f300 8118 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001496:	2bd0      	cmp	r3, #208	; 0xd0
 8001498:	f000 8115 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 800149c:	2bd0      	cmp	r3, #208	; 0xd0
 800149e:	f300 8112 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014a2:	2bc0      	cmp	r3, #192	; 0xc0
 80014a4:	f000 810f 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014a8:	2bc0      	cmp	r3, #192	; 0xc0
 80014aa:	f300 810c 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014ae:	2bb0      	cmp	r3, #176	; 0xb0
 80014b0:	d02f      	beq.n	8001512 <ProcessReceivedMidiDatas+0xee>
 80014b2:	2bb0      	cmp	r3, #176	; 0xb0
 80014b4:	f300 8107 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014b8:	2ba0      	cmp	r3, #160	; 0xa0
 80014ba:	f000 8104 	beq.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014be:	2ba0      	cmp	r3, #160	; 0xa0
 80014c0:	f300 8101 	bgt.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d002      	beq.n	80014ce <ProcessReceivedMidiDatas+0xaa>
 80014c8:	2b90      	cmp	r3, #144	; 0x90
 80014ca:	d011      	beq.n	80014f0 <ProcessReceivedMidiDatas+0xcc>
 80014cc:	e0fb      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 80014ce:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <ProcessReceivedMidiDatas+0x2c0>)
 80014d6:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80014d8:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <ProcessReceivedMidiDatas+0x2c4>)
 80014e0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	4880      	ldr	r0, [pc, #512]	; (80016ec <ProcessReceivedMidiDatas+0x2c8>)
 80014ea:	f008 f9f5 	bl	80098d8 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 80014ee:	e0ea      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 80014f0:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <ProcessReceivedMidiDatas+0x2c0>)
 80014f8:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <ProcessReceivedMidiDatas+0x2c4>)
 8001502:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4878      	ldr	r0, [pc, #480]	; (80016ec <ProcessReceivedMidiDatas+0x2c8>)
 800150c:	f008 f9e4 	bl	80098d8 <HAL_GPIO_WritePin>

					break;
 8001510:	e0d9      	b.n	80016c6 <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 8001512:	4b73      	ldr	r3, [pc, #460]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 800151a:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 800151c:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <ProcessReceivedMidiDatas+0x2bc>)
 800151e:	78db      	ldrb	r3, [r3, #3]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <ProcessReceivedMidiDatas+0x2d0>)
 8001524:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <ProcessReceivedMidiDatas+0x2d0>)
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <ProcessReceivedMidiDatas+0x2d4>)
 8001532:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <ProcessReceivedMidiDatas+0x2cc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	2b5e      	cmp	r3, #94	; 0x5e
 800153c:	f200 80c3 	bhi.w	80016c6 <ProcessReceivedMidiDatas+0x2a2>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <ProcessReceivedMidiDatas+0x124>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	080016c7 	.word	0x080016c7
 800154c:	080016c7 	.word	0x080016c7
 8001550:	080016c7 	.word	0x080016c7
 8001554:	080016c7 	.word	0x080016c7
 8001558:	080016c7 	.word	0x080016c7
 800155c:	080016c7 	.word	0x080016c7
 8001560:	080016c7 	.word	0x080016c7
 8001564:	080016c7 	.word	0x080016c7
 8001568:	080016c7 	.word	0x080016c7
 800156c:	080016c7 	.word	0x080016c7
 8001570:	080016c7 	.word	0x080016c7
 8001574:	080016c7 	.word	0x080016c7
 8001578:	080016c7 	.word	0x080016c7
 800157c:	080016c7 	.word	0x080016c7
 8001580:	080016c7 	.word	0x080016c7
 8001584:	080016c7 	.word	0x080016c7
 8001588:	080016c7 	.word	0x080016c7
 800158c:	080016c7 	.word	0x080016c7
 8001590:	080016c7 	.word	0x080016c7
 8001594:	080016c7 	.word	0x080016c7
 8001598:	080016c7 	.word	0x080016c7
 800159c:	080016c7 	.word	0x080016c7
 80015a0:	080016c7 	.word	0x080016c7
 80015a4:	080016c7 	.word	0x080016c7
 80015a8:	080016c7 	.word	0x080016c7
 80015ac:	080016c7 	.word	0x080016c7
 80015b0:	080016c7 	.word	0x080016c7
 80015b4:	080016c7 	.word	0x080016c7
 80015b8:	080016c7 	.word	0x080016c7
 80015bc:	080016c7 	.word	0x080016c7
 80015c0:	080016c7 	.word	0x080016c7
 80015c4:	080016c7 	.word	0x080016c7
 80015c8:	080016c7 	.word	0x080016c7
 80015cc:	080016c7 	.word	0x080016c7
 80015d0:	080016c7 	.word	0x080016c7
 80015d4:	080016c7 	.word	0x080016c7
 80015d8:	080016c7 	.word	0x080016c7
 80015dc:	080016c7 	.word	0x080016c7
 80015e0:	080016c7 	.word	0x080016c7
 80015e4:	080016c7 	.word	0x080016c7
 80015e8:	080016c7 	.word	0x080016c7
 80015ec:	080016c7 	.word	0x080016c7
 80015f0:	080016c7 	.word	0x080016c7
 80015f4:	080016c7 	.word	0x080016c7
 80015f8:	080016c7 	.word	0x080016c7
 80015fc:	080016c7 	.word	0x080016c7
 8001600:	080016c7 	.word	0x080016c7
 8001604:	080016c7 	.word	0x080016c7
 8001608:	080016c7 	.word	0x080016c7
 800160c:	080016c7 	.word	0x080016c7
 8001610:	080016c7 	.word	0x080016c7
 8001614:	080016c7 	.word	0x080016c7
 8001618:	080016c7 	.word	0x080016c7
 800161c:	080016c7 	.word	0x080016c7
 8001620:	080016c7 	.word	0x080016c7
 8001624:	080016c7 	.word	0x080016c7
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016c7 	.word	0x080016c7
 800165c:	080016c7 	.word	0x080016c7
 8001660:	080016c7 	.word	0x080016c7
 8001664:	080016c7 	.word	0x080016c7
 8001668:	080016c7 	.word	0x080016c7
 800166c:	080016c7 	.word	0x080016c7
 8001670:	080016c7 	.word	0x080016c7
 8001674:	080016c7 	.word	0x080016c7
 8001678:	080016c7 	.word	0x080016c7
 800167c:	080016c7 	.word	0x080016c7
 8001680:	080016c7 	.word	0x080016c7
 8001684:	080016c7 	.word	0x080016c7
 8001688:	080016c7 	.word	0x080016c7
 800168c:	080016c7 	.word	0x080016c7
 8001690:	080016c7 	.word	0x080016c7
 8001694:	080016c7 	.word	0x080016c7
 8001698:	080016c7 	.word	0x080016c7
 800169c:	080016c7 	.word	0x080016c7
 80016a0:	080016c7 	.word	0x080016c7
 80016a4:	080016c7 	.word	0x080016c7
 80016a8:	080016c7 	.word	0x080016c7
 80016ac:	080016c7 	.word	0x080016c7
 80016b0:	080016c7 	.word	0x080016c7
 80016b4:	080016c7 	.word	0x080016c7
 80016b8:	080016c7 	.word	0x080016c7
 80016bc:	080016c7 	.word	0x080016c7
 80016c0:	080016c7 	.word	0x080016c7
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 80016c4:	bf00      	nop
		while(numberOfPackets--)
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	81fa      	strh	r2, [r7, #14]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f aeb7 	bne.w	8001440 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	30000000 	.word	0x30000000
 80016e0:	20000138 	.word	0x20000138
 80016e4:	200000b4 	.word	0x200000b4
 80016e8:	200000b5 	.word	0x200000b5
 80016ec:	58020000 	.word	0x58020000
 80016f0:	200000b6 	.word	0x200000b6
 80016f4:	200000b7 	.word	0x200000b7
 80016f8:	200000b8 	.word	0x200000b8

080016fc <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7ff fe8c 	bl	8001424 <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	4904      	ldr	r1, [pc, #16]	; (8001720 <USBH_MIDI_ReceiveCallback+0x24>)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <USBH_MIDI_ReceiveCallback+0x28>)
 8001712:	f003 fa82 	bl	8004c1a <USBH_MIDI_Receive>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	30000000 	.word	0x30000000
 8001724:	30000460 	.word	0x30000460

08001728 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174c:	4b7b      	ldr	r3, [pc, #492]	; (800193c <MX_ADC1_Init+0x214>)
 800174e:	4a7c      	ldr	r2, [pc, #496]	; (8001940 <MX_ADC1_Init+0x218>)
 8001750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <MX_ADC1_Init+0x214>)
 8001754:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <MX_ADC1_Init+0x214>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <MX_ADC1_Init+0x214>)
 8001762:	2201      	movs	r2, #1
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001766:	4b75      	ldr	r3, [pc, #468]	; (800193c <MX_ADC1_Init+0x214>)
 8001768:	2208      	movs	r2, #8
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800176c:	4b73      	ldr	r3, [pc, #460]	; (800193c <MX_ADC1_Init+0x214>)
 800176e:	2200      	movs	r2, #0
 8001770:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <MX_ADC1_Init+0x214>)
 8001774:	2201      	movs	r2, #1
 8001776:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 8001778:	4b70      	ldr	r3, [pc, #448]	; (800193c <MX_ADC1_Init+0x214>)
 800177a:	220a      	movs	r2, #10
 800177c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <MX_ADC1_Init+0x214>)
 8001780:	2200      	movs	r2, #0
 8001782:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001784:	4b6d      	ldr	r3, [pc, #436]	; (800193c <MX_ADC1_Init+0x214>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <MX_ADC1_Init+0x214>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <MX_ADC1_Init+0x214>)
 8001792:	2203      	movs	r2, #3
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <MX_ADC1_Init+0x214>)
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <MX_ADC1_Init+0x214>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <MX_ADC1_Init+0x214>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017aa:	4864      	ldr	r0, [pc, #400]	; (800193c <MX_ADC1_Init+0x214>)
 80017ac:	f004 f8ee 	bl	800598c <HAL_ADC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80017b6:	f001 fefd 	bl	80035b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	485d      	ldr	r0, [pc, #372]	; (800193c <MX_ADC1_Init+0x214>)
 80017c6:	f005 fb71 	bl	8006eac <HAL_ADCEx_MultiModeConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017d0:	f001 fef0 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017d4:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <MX_ADC1_Init+0x21c>)
 80017d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d8:	2306      	movs	r3, #6
 80017da:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e6:	2304      	movs	r3, #4
 80017e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	4851      	ldr	r0, [pc, #324]	; (800193c <MX_ADC1_Init+0x214>)
 80017f8:	f004 fd86 	bl	8006308 <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001802:	f001 fed7 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <MX_ADC1_Init+0x220>)
 8001808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800180a:	230c      	movs	r3, #12
 800180c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4849      	ldr	r0, [pc, #292]	; (800193c <MX_ADC1_Init+0x214>)
 8001818:	f004 fd76 	bl	8006308 <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001822:	f001 fec7 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <MX_ADC1_Init+0x224>)
 8001828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800182a:	2312      	movs	r3, #18
 800182c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4841      	ldr	r0, [pc, #260]	; (800193c <MX_ADC1_Init+0x214>)
 8001838:	f004 fd66 	bl	8006308 <HAL_ADC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001842:	f001 feb7 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <MX_ADC1_Init+0x228>)
 8001848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800184a:	2318      	movs	r3, #24
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4839      	ldr	r0, [pc, #228]	; (800193c <MX_ADC1_Init+0x214>)
 8001858:	f004 fd56 	bl	8006308 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8001862:	f001 fea7 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <MX_ADC1_Init+0x22c>)
 8001868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4830      	ldr	r0, [pc, #192]	; (800193c <MX_ADC1_Init+0x214>)
 800187a:	f004 fd45 	bl	8006308 <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001884:	f001 fe96 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <MX_ADC1_Init+0x230>)
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800188c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_ADC1_Init+0x214>)
 800189c:	f004 fd34 	bl	8006308 <HAL_ADC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80018a6:	f001 fe85 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_ADC1_Init+0x234>)
 80018ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018ae:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	481f      	ldr	r0, [pc, #124]	; (800193c <MX_ADC1_Init+0x214>)
 80018be:	f004 fd23 	bl	8006308 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 80018c8:	f001 fe74 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <MX_ADC1_Init+0x238>)
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80018d0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80018d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <MX_ADC1_Init+0x214>)
 80018e0:	f004 fd12 	bl	8006308 <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80018ea:	f001 fe63 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_ADC1_Init+0x23c>)
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80018f2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80018f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fc:	463b      	mov	r3, r7
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <MX_ADC1_Init+0x214>)
 8001902:	f004 fd01 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800190c:	f001 fe52 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_ADC1_Init+0x240>)
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_ADC1_Init+0x214>)
 8001924:	f004 fcf0 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 800192e:	f001 fe41 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000013c 	.word	0x2000013c
 8001940:	40022000 	.word	0x40022000
 8001944:	1d500080 	.word	0x1d500080
 8001948:	4fb80000 	.word	0x4fb80000
 800194c:	3ef08000 	.word	0x3ef08000
 8001950:	0c900008 	.word	0x0c900008
 8001954:	4b840000 	.word	0x4b840000
 8001958:	3ac04000 	.word	0x3ac04000
 800195c:	10c00010 	.word	0x10c00010
 8001960:	21800100 	.word	0x21800100
 8001964:	25b00200 	.word	0x25b00200
 8001968:	14f00020 	.word	0x14f00020

0800196c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001986:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <MX_ADC3_Init+0x128>)
 8001988:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <MX_ADC3_Init+0x124>)
 800198c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001990:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <MX_ADC3_Init+0x124>)
 800199a:	2201      	movs	r2, #1
 800199c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019a0:	2204      	movs	r2, #4
 80019a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019b2:	2205      	movs	r2, #5
 80019b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019e2:	482b      	ldr	r0, [pc, #172]	; (8001a90 <MX_ADC3_Init+0x124>)
 80019e4:	f003 ffd2 	bl	800598c <HAL_ADC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80019ee:	f001 fde1 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_ADC3_Init+0x12c>)
 80019f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f6:	2306      	movs	r3, #6
 80019f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a04:	2304      	movs	r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	481e      	ldr	r0, [pc, #120]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a16:	f004 fc77 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001a20:	f001 fdc8 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a24:	230c      	movs	r3, #12
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a2e:	f004 fc6b 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001a38:	f001 fdbc 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a46:	f004 fc5f 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001a50:	f001 fdb0 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a54:	2318      	movs	r3, #24
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a5e:	f004 fc53 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001a68:	f001 fda4 	bl	80035b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_ADC3_Init+0x124>)
 8001a78:	f004 fc46 	bl	8006308 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8001a82:	f001 fd97 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001a0 	.word	0x200001a0
 8001a94:	58026000 	.word	0x58026000
 8001a98:	08600004 	.word	0x08600004

08001a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6d      	ldr	r2, [pc, #436]	; (8001c70 <HAL_ADC_MspInit+0x1d4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 80a3 	bne.w	8001c06 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac6:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ac8:	f043 0320 	orr.w	r3, r3, #32
 8001acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b38:	2332      	movs	r3, #50	; 0x32
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	484b      	ldr	r0, [pc, #300]	; (8001c78 <HAL_ADC_MspInit+0x1dc>)
 8001b4c:	f007 fcfc 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b50:	23ff      	movs	r3, #255	; 0xff
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4846      	ldr	r0, [pc, #280]	; (8001c7c <HAL_ADC_MspInit+0x1e0>)
 8001b64:	f007 fcf0 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4841      	ldr	r0, [pc, #260]	; (8001c80 <HAL_ADC_MspInit+0x1e4>)
 8001b7c:	f007 fce4 	bl	8009548 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_ADC_MspInit+0x1ec>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b88:	2209      	movs	r2, #9
 8001b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd8:	482a      	ldr	r0, [pc, #168]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bda:	f005 fbd1 	bl	8007380 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001be4:	f001 fce6 	bl	80035b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_ADC_MspInit+0x1e8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f005 fb10 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bfe:	2012      	movs	r0, #18
 8001c00:	f005 fb27 	bl	8007252 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001c04:	e02f      	b.n	8001c66 <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_ADC_MspInit+0x1f0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12a      	bne.n	8001c66 <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_ADC_MspInit+0x1d8>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c4c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <HAL_ADC_MspInit+0x1f4>)
 8001c62:	f007 fc71 	bl	8009548 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020000 	.word	0x58020000
 8001c80:	58020400 	.word	0x58020400
 8001c84:	20000204 	.word	0x20000204
 8001c88:	40020010 	.word	0x40020010
 8001c8c:	58026000 	.word	0x58026000
 8001c90:	58021400 	.word	0x58021400

08001c94 <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001ca0:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <audioInit+0x18c>)
 8001ca2:	4a60      	ldr	r2, [pc, #384]	; (8001e24 <audioInit+0x190>)
 8001ca4:	4960      	ldr	r1, [pc, #384]	; (8001e28 <audioInit+0x194>)
 8001ca6:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001e2c <audioInit+0x198>
 8001caa:	4861      	ldr	r0, [pc, #388]	; (8001e30 <audioInit+0x19c>)
 8001cac:	f7ff fb14 	bl	80012d8 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <audioInit+0x19c>)
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	495f      	ldr	r1, [pc, #380]	; (8001e34 <audioInit+0x1a0>)
 8001cb8:	485f      	ldr	r0, [pc, #380]	; (8001e38 <audioInit+0x1a4>)
 8001cba:	f7ff fa5f 	bl	800117c <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <audioInit+0x19c>)
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <audioInit+0x1a8>)
 8001cc6:	485e      	ldr	r0, [pc, #376]	; (8001e40 <audioInit+0x1ac>)
 8001cc8:	f7ff fa58 	bl	800117c <tMempool_init>


	for (int i = 0; i < 6; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	e00d      	b.n	8001cee <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <audioInit+0x1b0>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <audioInit+0x1a4>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fffc 	bl	8000ce0 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	ddee      	ble.n	8001cd2 <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	e009      	b.n	8001d0e <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 8001cfa:	4a4f      	ldr	r2, [pc, #316]	; (8001e38 <audioInit+0x1a4>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001d02:	4851      	ldr	r0, [pc, #324]	; (8001e48 <audioInit+0x1b4>)
 8001d04:	f7fe ffec 	bl	8000ce0 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	ddf2      	ble.n	8001cfa <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <audioInit+0x1a4>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	484c      	ldr	r0, [pc, #304]	; (8001e4c <audioInit+0x1b8>)
 8001d1a:	f7ff fab6 	bl	800128a <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e013      	b.n	8001d4c <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <audioInit+0x1bc>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4942      	ldr	r1, [pc, #264]	; (8001e38 <audioInit+0x1a4>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fa58 	bl	80011e4 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <audioInit+0x1bc>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001e54 <audioInit+0x1c0>
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa83 	bl	800124c <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	dde8      	ble.n	8001d24 <audioInit+0x90>

//	for(int i = 0; i < 2; i++)
//	{
//		tTapeDelay_initToPool(&delT[i], SAMPLE_RATE, MAX_DELAY, &largePool);
//	}
	uint32_t* temp = (uint32_t *) malloc(sizeof(uint32_t) );
 8001d52:	2004      	movs	r0, #4
 8001d54:	f015 fdf2 	bl	801793c <malloc>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]
	*temp = SAMPLE_RATE;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d62:	601a      	str	r2, [r3, #0]
//	tDelayExt_initToPool(&delE, temp, MAX_DELAY, 1, &largePool);
	tTapeDelayExt_initToPool(&delTE, temp, MAX_DELAY, 1, &largePool);
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <audioInit+0x1ac>)
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <audioInit+0x1c4>)
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	483b      	ldr	r0, [pc, #236]	; (8001e5c <audioInit+0x1c8>)
 8001d70:	f7fe fc30 	bl	80005d4 <tTapeDelayExt_initToPool>
	free(temp);
 8001d74:	6938      	ldr	r0, [r7, #16]
 8001d76:	f015 fde9 	bl	801794c <free>


	HAL_Delay(10);
 8001d7a:	200a      	movs	r0, #10
 8001d7c:	f003 fbba 	bl	80054f4 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e007      	b.n	8001d96 <audioInit+0x102>
	{
		audioOutBuffer[i] = 0;
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <audioInit+0x1cc>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	ddf4      	ble.n	8001d86 <audioInit+0xf2>
	}



	HAL_Delay(1);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f003 fba9 	bl	80054f4 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	492e      	ldr	r1, [pc, #184]	; (8001e60 <audioInit+0x1cc>)
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f00d ffb2 	bl	800fd10 <HAL_SAI_Transmit_DMA>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <audioInit+0x1d0>)
 8001db2:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	492c      	ldr	r1, [pc, #176]	; (8001e68 <audioInit+0x1d4>)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f00e f85f 	bl	800fe7c <HAL_SAI_Receive_DMA>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <audioInit+0x1d8>)
 8001dc4:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fd44 	bl	8002854 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e01e      	b.n	8001e10 <audioInit+0x17c>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <audioInit+0x1dc>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <audioInit+0x1e0>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <audioInit+0x1e4>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <audioInit+0x1e8>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	dddd      	ble.n	8001dd2 <audioInit+0x13e>
	}

}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	080034f1 	.word	0x080034f1
 8001e24:	0007a120 	.word	0x0007a120
 8001e28:	24000000 	.word	0x24000000
 8001e2c:	473b8000 	.word	0x473b8000
 8001e30:	200016c0 	.word	0x200016c0
 8001e34:	20000338 	.word	0x20000338
 8001e38:	20001710 	.word	0x20001710
 8001e3c:	60000000 	.word	0x60000000
 8001e40:	20001714 	.word	0x20001714
 8001e44:	200002c0 	.word	0x200002c0
 8001e48:	200002f8 	.word	0x200002f8
 8001e4c:	200002d8 	.word	0x200002d8
 8001e50:	200002dc 	.word	0x200002dc
 8001e54:	43dc0000 	.word	0x43dc0000
 8001e58:	0003a980 	.word	0x0003a980
 8001e5c:	200002f4 	.word	0x200002f4
 8001e60:	30000040 	.word	0x30000040
 8001e64:	2000027c 	.word	0x2000027c
 8001e68:	30000240 	.word	0x30000240
 8001e6c:	2000027d 	.word	0x2000027d
 8001e70:	20001718 	.word	0x20001718
 8001e74:	20001738 	.word	0x20001738
 8001e78:	20001758 	.word	0x20001758
 8001e7c:	20001778 	.word	0x20001778

08001e80 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]

	frameCounter++;
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <audioFrame+0x128>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <audioFrame+0x128>)
 8001e98:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <audioFrame+0x128>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d904      	bls.n	8001eac <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <audioFrame+0x128>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 8001ea8:	f000 fabc 	bl	8002424 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e017      	b.n	8001ee2 <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <audioFrame+0x12c>)
 8001eb8:	441a      	add	r2, r3
 8001eba:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <audioFrame+0x130>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001fb4 <audioFrame+0x134>
 8001ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7fe ff88 	bl	8000dec <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	dde4      	ble.n	8001eb2 <audioFrame+0x32>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <audioFrame+0x138>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d057      	beq.n	8001fa0 <audioFrame+0x120>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e051      	b.n	8001f9a <audioFrame+0x11a>
		{

			if ((i & 1) == 0)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11e      	bne.n	8001f3e <audioFrame+0xbe>
			{
				current_sample = (int32_t)(audioTickR(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <audioFrame+0x13c>)
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001fc0 <audioFrame+0x140>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f000 fa69 	bl	80023f8 <audioTickR>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001fc4 <audioFrame+0x144>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f36:	ee17 3a90 	vmov	r3, s15
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	e01d      	b.n	8001f7a <audioFrame+0xfa>
			}
			else
			{
				current_sample = (int32_t)(audioTickL(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <audioFrame+0x13c>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001fc0 <audioFrame+0x140>
 8001f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	f000 f836 	bl	8001fd0 <audioTickL>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001fc4 <audioFrame+0x144>
 8001f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	60bb      	str	r3, [r7, #8]
			}

			if (LED_States[2] == 1){		//mute
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <audioFrame+0x148>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <audioFrame+0x106>
				current_sample *= 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <audioFrame+0x14c>)
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f9e:	ddaa      	ble.n	8001ef6 <audioFrame+0x76>

		}
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002bc 	.word	0x200002bc
 8001fac:	200002c0 	.word	0x200002c0
 8001fb0:	30000440 	.word	0x30000440
 8001fb4:	377ffff6 	.word	0x377ffff6
 8001fb8:	2000027e 	.word	0x2000027e
 8001fbc:	30000240 	.word	0x30000240
 8001fc0:	2ffffff6 	.word	0x2ffffff6
 8001fc4:	4b000000 	.word	0x4b000000
 8001fc8:	200002b8 	.word	0x200002b8
 8001fcc:	30000040 	.word	0x30000040

08001fd0 <audioTickL>:
uint16_t del_len_old = 0;
uint32_t delaysX[8];
float delaysXdis[8], delaysXamp[8];

float audioTickL(float audioIn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	ed87 0a01 	vstr	s0, [r7, #4]
//	tDelayExt_tick(&delE, audioIn);
//	sampleL = 0.0f;
//	for(int i = 0; i < num_delX; i++) sampleL += delE->lastOuts[i] / num_delX;

	/* multi tape delay */
	int flag = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
	num_delX = (int) (ADC_values[0] * INV_TWO_TO_16 * 8) + 1;
 8001fde:	4bba      	ldr	r3, [pc, #744]	; (80022c8 <audioTickL+0x2f8>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80022cc <audioTickL+0x2fc>
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ffe:	ee17 3a90 	vmov	r3, s15
 8002002:	3301      	adds	r3, #1
 8002004:	4ab2      	ldr	r2, [pc, #712]	; (80022d0 <audioTickL+0x300>)
 8002006:	6013      	str	r3, [r2, #0]
	if (num_delX != delTE->numPoint)
 8002008:	4bb2      	ldr	r3, [pc, #712]	; (80022d4 <audioTickL+0x304>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4ab0      	ldr	r2, [pc, #704]	; (80022d0 <audioTickL+0x300>)
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <audioTickL+0x56>
	{
		tTapeDelayExt_setNumPoint(&delTE, num_delX);
 8002016:	4bae      	ldr	r3, [pc, #696]	; (80022d0 <audioTickL+0x300>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	48ad      	ldr	r0, [pc, #692]	; (80022d4 <audioTickL+0x304>)
 800201e:	f7fe fb9b 	bl	8000758 <tTapeDelayExt_setNumPoint>
		flag = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	// decide the delay pattern

	del_lenX = (int)(pow(8, (9 * tRamp_tick(&adc[1]) - 1)) * 4 + num_delX); // the whole length of the delay line
 8002026:	48ac      	ldr	r0, [pc, #688]	; (80022d8 <audioTickL+0x308>)
 8002028:	f7fe ff02 	bl	8000e30 <tRamp_tick>
 800202c:	eef0 7a40 	vmov.f32	s15, s0
 8002030:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800203c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002044:	eeb0 1b47 	vmov.f64	d1, d7
 8002048:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 800204c:	f015 fe74 	bl	8017d38 <pow>
 8002050:	eeb0 7b40 	vmov.f64	d7, d0
 8002054:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002058:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205c:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <audioTickL+0x300>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800206c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002070:	ee17 2a90 	vmov	r2, s15
 8002074:	4b99      	ldr	r3, [pc, #612]	; (80022dc <audioTickL+0x30c>)
 8002076:	601a      	str	r2, [r3, #0]

	if (flag == 1 || abs(ADC_values[3] - wc) > 200 || abs(ADC_values[4] - hc) > 200){
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	2b01      	cmp	r3, #1
 800207c:	d016      	beq.n	80020ac <audioTickL+0xdc>
 800207e:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <audioTickL+0x2f8>)
 8002080:	88db      	ldrh	r3, [r3, #6]
 8002082:	461a      	mov	r2, r3
 8002084:	4b96      	ldr	r3, [pc, #600]	; (80022e0 <audioTickL+0x310>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	425b      	neglt	r3, r3
 8002090:	2bc8      	cmp	r3, #200	; 0xc8
 8002092:	dc0b      	bgt.n	80020ac <audioTickL+0xdc>
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <audioTickL+0x2f8>)
 8002096:	891b      	ldrh	r3, [r3, #8]
 8002098:	461a      	mov	r2, r3
 800209a:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <audioTickL+0x314>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bfb8      	it	lt
 80020a4:	425b      	neglt	r3, r3
 80020a6:	2bc8      	cmp	r3, #200	; 0xc8
 80020a8:	f340 8103 	ble.w	80022b2 <audioTickL+0x2e2>
		wc = ADC_values[3];
 80020ac:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <audioTickL+0x2f8>)
 80020ae:	88da      	ldrh	r2, [r3, #6]
 80020b0:	4b8b      	ldr	r3, [pc, #556]	; (80022e0 <audioTickL+0x310>)
 80020b2:	801a      	strh	r2, [r3, #0]
		hc = ADC_values[4];
 80020b4:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <audioTickL+0x2f8>)
 80020b6:	891a      	ldrh	r2, [r3, #8]
 80020b8:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <audioTickL+0x314>)
 80020ba:	801a      	strh	r2, [r3, #0]
		float wcf = wc * INV_TWO_TO_16 * 2;
 80020bc:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <audioTickL+0x310>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80022cc <audioTickL+0x2fc>
 80020cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020d4:	edc7 7a08 	vstr	s15, [r7, #32]
		float hcf = hc * INV_TWO_TO_16 * 2;
 80020d8:	4b82      	ldr	r3, [pc, #520]	; (80022e4 <audioTickL+0x314>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80022cc <audioTickL+0x2fc>
 80020e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020f0:	edc7 7a07 	vstr	s15, [r7, #28]
		float area = hcf > 1.0f ? hcf + wcf / 2.0f : 1 + hcf;
 80020f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80020f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002104:	dd0a      	ble.n	800211c <audioTickL+0x14c>
 8002106:	edd7 7a08 	vldr	s15, [r7, #32]
 800210a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800210e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002112:	edd7 7a07 	vldr	s15, [r7, #28]
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	e005      	b.n	8002128 <audioTickL+0x158>
 800211c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002124:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002128:	edc7 7a06 	vstr	s15, [r7, #24]
		area /= num_delX + 1;
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <audioTickL+0x300>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213a:	edd7 6a06 	vldr	s13, [r7, #24]
 800213e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002142:	edc7 7a06 	vstr	s15, [r7, #24]
		float inc1 = (hcf - 1) / wcf * 0.0004; // increment for the first segment, 100 division
 8002146:	edd7 7a07 	vldr	s15, [r7, #28]
 800214a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800214e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002152:	ed97 7a08 	vldr	s14, [r7, #32]
 8002156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800215e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80022b8 <audioTickL+0x2e8>
 8002162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002166:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800216a:	edc7 7a05 	vstr	s15, [r7, #20]
		float inc2 = hcf > 1.0f ? hcf / (wcf - 2) * 0.0004 : (1 - hcf) / (2 - wcf) * 0.0004;
 800216e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd10      	ble.n	80021a2 <audioTickL+0x1d2>
 8002180:	edd7 7a08 	vldr	s15, [r7, #32]
 8002184:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002188:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800218c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002198:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022b8 <audioTickL+0x2e8>
 800219c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021a0:	e013      	b.n	80021ca <audioTickL+0x1fa>
 80021a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80021b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80021b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c2:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80022b8 <audioTickL+0x2e8>
 80021c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021ce:	edc7 7a04 	vstr	s15, [r7, #16]

		float area_accum = 0.0f, area_cur_frame = 0.02f-inc1/2.0f, cur_frame = 0.0f;
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80022e8 <audioTickL+0x318>
 80021e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
		for (int i = 0; i < num_delX; i++){
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fa:	e055      	b.n	80022a8 <audioTickL+0x2d8>
			while(area_accum < area && cur_frame < 1.99f){
				area_cur_frame += cur_frame <= wcf ? inc1 : inc2;
 80021fc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002200:	edd7 7a08 	vldr	s15, [r7, #32]
 8002204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d802      	bhi.n	8002214 <audioTickL+0x244>
 800220e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002212:	e001      	b.n	8002218 <audioTickL+0x248>
 8002214:	edd7 7a04 	vldr	s15, [r7, #16]
 8002218:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				area_accum += area_cur_frame;
 8002224:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002228:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002230:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				cur_frame += 0.02;
 8002234:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80022c0 <audioTickL+0x2f0>
 8002240:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002248:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			while(area_accum < area && cur_frame < 1.99f){
 800224c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002250:	edd7 7a06 	vldr	s15, [r7, #24]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d508      	bpl.n	8002270 <audioTickL+0x2a0>
 800225e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002262:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80022ec <audioTickL+0x31c>
 8002266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d4c5      	bmi.n	80021fc <audioTickL+0x22c>
			}

			delaysXdis[i] = cur_frame;
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <audioTickL+0x320>)
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227a:	601a      	str	r2, [r3, #0]
			delaysXamp[i] = area_cur_frame / 0.02;
 800227c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002280:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002284:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80022c0 <audioTickL+0x2f0>
 8002288:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800228c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <audioTickL+0x324>)
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	edc3 7a00 	vstr	s15, [r3]
			area_accum = 0.0f;
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i < num_delX; i++){
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	3301      	adds	r3, #1
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <audioTickL+0x300>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbcc      	blt.n	800224c <audioTickL+0x27c>
		}
	}

//
	for(int i = 0; i < num_delX; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b6:	e04a      	b.n	800234e <audioTickL+0x37e>
 80022b8:	eb1c432d 	.word	0xeb1c432d
 80022bc:	3f3a36e2 	.word	0x3f3a36e2
 80022c0:	47ae147b 	.word	0x47ae147b
 80022c4:	3f947ae1 	.word	0x3f947ae1
 80022c8:	30000440 	.word	0x30000440
 80022cc:	377ffff6 	.word	0x377ffff6
 80022d0:	20000008 	.word	0x20000008
 80022d4:	200002f4 	.word	0x200002f4
 80022d8:	200002c4 	.word	0x200002c4
 80022dc:	20000004 	.word	0x20000004
 80022e0:	200017a0 	.word	0x200017a0
 80022e4:	200017a2 	.word	0x200017a2
 80022e8:	3ca3d70a 	.word	0x3ca3d70a
 80022ec:	3ffeb852 	.word	0x3ffeb852
 80022f0:	200017c4 	.word	0x200017c4
 80022f4:	200017e4 	.word	0x200017e4
	{
//		delaysX[i] = (uint32_t)(i+1) * del_lenX;
		int j = (int)(delaysXdis[i] / 2.0f * (float)del_lenX) + 1;
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <audioTickL+0x40c>)
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002308:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800230c:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <audioTickL+0x410>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002320:	ee17 3a90 	vmov	r3, s15
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
		if (abs(delaysX[i] - j) > 80) delaysX[i] = j;
 8002328:	4a2e      	ldr	r2, [pc, #184]	; (80023e4 <audioTickL+0x414>)
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bfb8      	it	lt
 8002338:	425b      	neglt	r3, r3
 800233a:	2b50      	cmp	r3, #80	; 0x50
 800233c:	dd04      	ble.n	8002348 <audioTickL+0x378>
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4928      	ldr	r1, [pc, #160]	; (80023e4 <audioTickL+0x414>)
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < num_delX; i++)
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	3301      	adds	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <audioTickL+0x418>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	429a      	cmp	r2, r3
 8002356:	dbcf      	blt.n	80022f8 <audioTickL+0x328>
	}

	tTapeDelayExt_setDelay(&delTE, &delaysX[0]);
 8002358:	4922      	ldr	r1, [pc, #136]	; (80023e4 <audioTickL+0x414>)
 800235a:	4824      	ldr	r0, [pc, #144]	; (80023ec <audioTickL+0x41c>)
 800235c:	f7fe f9cd 	bl	80006fa <tTapeDelayExt_setDelay>
	tTapeDelayExt_tick(&delTE, audioIn);
 8002360:	ed97 0a01 	vldr	s0, [r7, #4]
 8002364:	4821      	ldr	r0, [pc, #132]	; (80023ec <audioTickL+0x41c>)
 8002366:	f7fe f98a 	bl	800067e <tTapeDelayExt_tick>
	sampleL = 0.0f;
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <audioTickL+0x420>)
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < num_delX; i++) sampleL += delTE->lastOuts[i] / num_delX * delaysXamp[i];
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e022      	b.n	80023be <audioTickL+0x3ee>
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <audioTickL+0x41c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	edd3 6a00 	vldr	s13, [r3]
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <audioTickL+0x418>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <audioTickL+0x424>)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <audioTickL+0x420>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <audioTickL+0x420>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <audioTickL+0x418>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbd7      	blt.n	8002378 <audioTickL+0x3a8>
	/*>-<*/

	return sampleL;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <audioTickL+0x420>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
}
 80023d0:	eeb0 0a67 	vmov.f32	s0, s15
 80023d4:	3740      	adds	r7, #64	; 0x40
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200017c4 	.word	0x200017c4
 80023e0:	20000004 	.word	0x20000004
 80023e4:	200017a4 	.word	0x200017a4
 80023e8:	20000008 	.word	0x20000008
 80023ec:	200002f4 	.word	0x200002f4
 80023f0:	20001798 	.word	0x20001798
 80023f4:	200017e4 	.word	0x200017e4

080023f8 <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <audioTickR+0x28>)
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
	return sampleR;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <audioTickR+0x28>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	ee07 3a90 	vmov	s15, r3
}
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	2000179c 	.word	0x2000179c

08002424 <buttonCheck>:
}
/*>-<*/


void buttonCheck(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	489b      	ldr	r0, [pc, #620]	; (800269c <buttonCheck+0x278>)
 800242e:	f007 fa3b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4b97      	ldr	r3, [pc, #604]	; (80026a0 <buttonCheck+0x27c>)
 8002442:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	4895      	ldr	r0, [pc, #596]	; (800269c <buttonCheck+0x278>)
 8002448:	f007 fa2e 	bl	80098a8 <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <buttonCheck+0x27c>)
 800245c:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800245e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002462:	4890      	ldr	r0, [pc, #576]	; (80026a4 <buttonCheck+0x280>)
 8002464:	f007 fa20 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4b8a      	ldr	r3, [pc, #552]	; (80026a0 <buttonCheck+0x27c>)
 8002478:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e09e      	b.n	80025be <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8002480:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <buttonCheck+0x27c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4987      	ldr	r1, [pc, #540]	; (80026a8 <buttonCheck+0x284>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	440b      	add	r3, r1
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d00e      	beq.n	80024b2 <buttonCheck+0x8e>
 8002494:	4a85      	ldr	r2, [pc, #532]	; (80026ac <buttonCheck+0x288>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	2b09      	cmp	r3, #9
 800249e:	d808      	bhi.n	80024b2 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 80024a0:	4a82      	ldr	r2, [pc, #520]	; (80026ac <buttonCheck+0x288>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	4980      	ldr	r1, [pc, #512]	; (80026ac <buttonCheck+0x288>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 80024b2:	4a7b      	ldr	r2, [pc, #492]	; (80026a0 <buttonCheck+0x27c>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	497b      	ldr	r1, [pc, #492]	; (80026a8 <buttonCheck+0x284>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	440b      	add	r3, r1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d01e      	beq.n	8002504 <buttonCheck+0xe0>
 80024c6:	4a79      	ldr	r2, [pc, #484]	; (80026ac <buttonCheck+0x288>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d918      	bls.n	8002504 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 80024d2:	4a73      	ldr	r2, [pc, #460]	; (80026a0 <buttonCheck+0x27c>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 80024de:	4a74      	ldr	r2, [pc, #464]	; (80026b0 <buttonCheck+0x28c>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2101      	movs	r1, #1
 80024e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 80024e8:	4a6d      	ldr	r2, [pc, #436]	; (80026a0 <buttonCheck+0x27c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	7819      	ldrb	r1, [r3, #0]
 80024f0:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <buttonCheck+0x284>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	460a      	mov	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <buttonCheck+0x288>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2100      	movs	r1, #0
 8002500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8002504:	4a6b      	ldr	r2, [pc, #428]	; (80026b4 <buttonCheck+0x290>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12d      	bne.n	800256c <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <buttonCheck+0x27c>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00f      	beq.n	800253c <buttonCheck+0x118>
 800251c:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <buttonCheck+0x294>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002528:	d208      	bcs.n	800253c <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <buttonCheck+0x294>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	4960      	ldr	r1, [pc, #384]	; (80026b8 <buttonCheck+0x294>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <buttonCheck+0x27c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d037      	beq.n	80025b8 <buttonCheck+0x194>
 8002548:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <buttonCheck+0x294>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002554:	d330      	bcc.n	80025b8 <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <buttonCheck+0x290>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2101      	movs	r1, #1
 800255c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 8002560:	4a55      	ldr	r2, [pc, #340]	; (80026b8 <buttonCheck+0x294>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2100      	movs	r1, #0
 8002566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800256a:	e025      	b.n	80025b8 <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 800256c:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <buttonCheck+0x27c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10f      	bne.n	8002598 <buttonCheck+0x174>
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <buttonCheck+0x294>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	2b31      	cmp	r3, #49	; 0x31
 8002582:	d809      	bhi.n	8002598 <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8002584:	4a4c      	ldr	r2, [pc, #304]	; (80026b8 <buttonCheck+0x294>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	494a      	ldr	r1, [pc, #296]	; (80026b8 <buttonCheck+0x294>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002596:	e00f      	b.n	80025b8 <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 8002598:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <buttonCheck+0x27c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <buttonCheck+0x290>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2100      	movs	r1, #0
 80025aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <buttonCheck+0x294>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2100      	movs	r1, #0
 80025b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f77f af5d 	ble.w	8002480 <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 80025c6:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <buttonCheck+0x28c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d119      	bne.n	8002602 <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <buttonCheck+0x298>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	4838      	ldr	r0, [pc, #224]	; (80026c0 <buttonCheck+0x29c>)
 80025de:	f007 f97b 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <buttonCheck+0x298>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e008      	b.n	80025fc <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f0:	4833      	ldr	r0, [pc, #204]	; (80026c0 <buttonCheck+0x29c>)
 80025f2:	f007 f971 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <buttonCheck+0x298>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <buttonCheck+0x28c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <buttonCheck+0x28c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d116      	bne.n	8002638 <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <buttonCheck+0x298>)
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002618:	4829      	ldr	r0, [pc, #164]	; (80026c0 <buttonCheck+0x29c>)
 800261a:	f007 f95d 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <buttonCheck+0x298>)
 8002620:	2201      	movs	r2, #1
 8002622:	705a      	strb	r2, [r3, #1]
 8002624:	e008      	b.n	8002638 <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800262c:	4824      	ldr	r0, [pc, #144]	; (80026c0 <buttonCheck+0x29c>)
 800262e:	f007 f953 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <buttonCheck+0x298>)
 8002634:	2200      	movs	r2, #0
 8002636:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <buttonCheck+0x28c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d119      	bne.n	8002674 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <buttonCheck+0x298>)
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264e:	4815      	ldr	r0, [pc, #84]	; (80026a4 <buttonCheck+0x280>)
 8002650:	f007 f942 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <buttonCheck+0x298>)
 8002656:	2201      	movs	r2, #1
 8002658:	709a      	strb	r2, [r3, #2]
 800265a:	e008      	b.n	800266e <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002662:	4810      	ldr	r0, [pc, #64]	; (80026a4 <buttonCheck+0x280>)
 8002664:	f007 f938 	bl	80098d8 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <buttonCheck+0x298>)
 800266a:	2200      	movs	r2, #0
 800266c:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <buttonCheck+0x28c>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <buttonCheck+0x290>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800267c:	2201      	movs	r2, #1
 800267e:	2140      	movs	r1, #64	; 0x40
 8002680:	4810      	ldr	r0, [pc, #64]	; (80026c4 <buttonCheck+0x2a0>)
 8002682:	f007 f929 	bl	80098d8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 8002686:	e004      	b.n	8002692 <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <buttonCheck+0x2a0>)
 800268e:	f007 f923 	bl	80098d8 <HAL_GPIO_WritePin>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	58021800 	.word	0x58021800
 80026a0:	20000280 	.word	0x20000280
 80026a4:	58020c00 	.word	0x58020c00
 80026a8:	20000284 	.word	0x20000284
 80026ac:	20000288 	.word	0x20000288
 80026b0:	20000294 	.word	0x20000294
 80026b4:	200002ac 	.word	0x200002ac
 80026b8:	200002a0 	.word	0x200002a0
 80026bc:	200002b8 	.word	0x200002b8
 80026c0:	58020000 	.word	0x58020000
 80026c4:	58020800 	.word	0x58020800

080026c8 <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	;
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	;
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  ;
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 800270c:	2040      	movs	r0, #64	; 0x40
 800270e:	f7ff fbb7 	bl	8001e80 <audioFrame>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 8002722:	2000      	movs	r0, #0
 8002724:	f7ff fbac 	bl	8001e80 <audioFrame>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800273a:	f000 f879 	bl	8002830 <BSP_SD_IsDetected>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002744:	2302      	movs	r3, #2
 8002746:	e012      	b.n	800276e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8002748:	480b      	ldr	r0, [pc, #44]	; (8002778 <BSP_SD_Init+0x48>)
 800274a:	f00d fe7c 	bl	8010446 <HAL_SD_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275c:	4806      	ldr	r0, [pc, #24]	; (8002778 <BSP_SD_Init+0x48>)
 800275e:	f00e fd37 	bl	80111d0 <HAL_SD_ConfigWideBusOperation>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800276c:	79fb      	ldrb	r3, [r7, #7]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20001ad0 	.word	0x20001ad0

0800277c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <BSP_SD_ReadBlocks+0x38>)
 800279a:	f00d ff73 	bl	8010684 <HAL_SD_ReadBlocks>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001ad0 	.word	0x20001ad0

080027b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	68f9      	ldr	r1, [r7, #12]
 80027d4:	4806      	ldr	r0, [pc, #24]	; (80027f0 <BSP_SD_WriteBlocks+0x38>)
 80027d6:	f00e f8df 	bl	8010998 <HAL_SD_WriteBlocks>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20001ad0 	.word	0x20001ad0

080027f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <BSP_SD_GetCardState+0x1c>)
 80027fa:	f00e fdfb 	bl	80113f4 <HAL_SD_GetCardState>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b04      	cmp	r3, #4
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20001ad0 	.word	0x20001ad0

08002814 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <BSP_SD_GetCardInfo+0x18>)
 8002820:	f00e fcaa 	bl	8011178 <HAL_SD_GetCardInfo>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20001ad0 	.word	0x20001ad0

08002830 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800283a:	f000 f911 	bl	8002a60 <BSP_PlatformIsDetected>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8002844:	2300      	movs	r3, #0
 8002846:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	b2db      	uxtb	r3, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002862:	4858      	ldr	r0, [pc, #352]	; (80029c4 <AudioCodec_init+0x170>)
 8002864:	f007 f838 	bl	80098d8 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8002868:	2002      	movs	r0, #2
 800286a:	f002 fe43 	bl	80054f4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <AudioCodec_init+0x174>)
 8002870:	2207      	movs	r2, #7
 8002872:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8002874:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <AudioCodec_init+0x174>)
 8002876:	2203      	movs	r2, #3
 8002878:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800287a:	4b54      	ldr	r3, [pc, #336]	; (80029cc <AudioCodec_init+0x178>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <AudioCodec_init+0x17c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <AudioCodec_init+0x174>)
 8002888:	2120      	movs	r1, #32
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f008 fde2 	bl	800b454 <HAL_I2C_Master_Transmit>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <AudioCodec_init+0x180>)
 8002896:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <AudioCodec_init+0x174>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 800289e:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <AudioCodec_init+0x174>)
 80028a0:	2241      	movs	r2, #65	; 0x41
 80028a2:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80028a4:	4b49      	ldr	r3, [pc, #292]	; (80029cc <AudioCodec_init+0x178>)
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <AudioCodec_init+0x17c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <AudioCodec_init+0x174>)
 80028b2:	2120      	movs	r1, #32
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f008 fdcd 	bl	800b454 <HAL_I2C_Master_Transmit>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <AudioCodec_init+0x180>)
 80028c0:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <AudioCodec_init+0x174>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 80028c8:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <AudioCodec_init+0x174>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <AudioCodec_init+0x178>)
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <AudioCodec_init+0x17c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <AudioCodec_init+0x174>)
 80028dc:	2120      	movs	r1, #32
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f008 fdb8 	bl	800b454 <HAL_I2C_Master_Transmit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <AudioCodec_init+0x180>)
 80028ea:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <AudioCodec_init+0x174>)
 80028ee:	2203      	movs	r2, #3
 80028f0:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 80028f2:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <AudioCodec_init+0x174>)
 80028f4:	2279      	movs	r2, #121	; 0x79
 80028f6:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <AudioCodec_init+0x178>)
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <AudioCodec_init+0x17c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <AudioCodec_init+0x174>)
 8002906:	2120      	movs	r1, #32
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f008 fda3 	bl	800b454 <HAL_I2C_Master_Transmit>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <AudioCodec_init+0x180>)
 8002914:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <AudioCodec_init+0x174>)
 8002918:	2204      	movs	r2, #4
 800291a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <AudioCodec_init+0x174>)
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <AudioCodec_init+0x178>)
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <AudioCodec_init+0x17c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <AudioCodec_init+0x174>)
 8002930:	2120      	movs	r1, #32
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f008 fd8e 	bl	800b454 <HAL_I2C_Master_Transmit>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <AudioCodec_init+0x180>)
 800293e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <AudioCodec_init+0x174>)
 8002942:	2205      	movs	r2, #5
 8002944:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <AudioCodec_init+0x174>)
 8002948:	2201      	movs	r2, #1
 800294a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <AudioCodec_init+0x178>)
 800294e:	881a      	ldrh	r2, [r3, #0]
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <AudioCodec_init+0x17c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <AudioCodec_init+0x174>)
 800295a:	2120      	movs	r1, #32
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f008 fd79 	bl	800b454 <HAL_I2C_Master_Transmit>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <AudioCodec_init+0x180>)
 8002968:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <AudioCodec_init+0x174>)
 800296c:	2206      	movs	r2, #6
 800296e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <AudioCodec_init+0x174>)
 8002972:	2210      	movs	r2, #16
 8002974:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <AudioCodec_init+0x178>)
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <AudioCodec_init+0x17c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <AudioCodec_init+0x174>)
 8002984:	2120      	movs	r1, #32
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f008 fd64 	bl	800b454 <HAL_I2C_Master_Transmit>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <AudioCodec_init+0x180>)
 8002992:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <AudioCodec_init+0x174>)
 8002996:	2207      	movs	r2, #7
 8002998:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <AudioCodec_init+0x174>)
 800299c:	2202      	movs	r2, #2
 800299e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <AudioCodec_init+0x178>)
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <AudioCodec_init+0x17c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <AudioCodec_init+0x174>)
 80029ae:	2120      	movs	r1, #32
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f008 fd4f 	bl	800b454 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <AudioCodec_init+0x184>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]

}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	58020800 	.word	0x58020800
 80029c8:	20001804 	.word	0x20001804
 80029cc:	2000000c 	.word	0x2000000c
 80029d0:	20000010 	.word	0x20000010
 80029d4:	20001806 	.word	0x20001806
 80029d8:	2000027e 	.word	0x2000027e

080029dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <MX_DMA_Init+0x5c>)
 80029e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <MX_DMA_Init+0x5c>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_DMA_Init+0x5c>)
 80029f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	200b      	movs	r0, #11
 8002a06:	f004 fc0a 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a0a:	200b      	movs	r0, #11
 8002a0c:	f004 fc21 	bl	8007252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	200c      	movs	r0, #12
 8002a16:	f004 fc02 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a1a:	200c      	movs	r0, #12
 8002a1c:	f004 fc19 	bl	8007252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	200d      	movs	r0, #13
 8002a26:	f004 fbfa 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a2a:	200d      	movs	r0, #13
 8002a2c:	f004 fc11 	bl	8007252 <HAL_NVIC_EnableIRQ>

}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58024400 	.word	0x58024400

08002a3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002a40:	4904      	ldr	r1, [pc, #16]	; (8002a54 <MX_FATFS_Init+0x18>)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_FATFS_Init+0x1c>)
 8002a44:	f014 ff6a 	bl	801791c <FATFS_LinkDriver>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <MX_FATFS_Init+0x20>)
 8002a4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20001808 	.word	0x20001808
 8002a58:	080181f8 	.word	0x080181f8
 8002a5c:	20001807 	.word	0x20001807

08002a60 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8002a66:	2301      	movs	r3, #1
 8002a68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <BSP_PlatformIsDetected+0x28>)
 8002a70:	f006 ff1a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
}  
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	58020800 	.word	0x58020800

08002a8c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
 8002aa0:	615a      	str	r2, [r3, #20]
 8002aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002aa6:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <MX_FMC_Init+0xa4>)
 8002aa8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ab8:	2208      	movs	r2, #8
 8002aba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002abe:	2210      	movs	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ace:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ad8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002adc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002aec:	2302      	movs	r3, #2
 8002aee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002af0:	2306      	movs	r3, #6
 8002af2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002af4:	2304      	movs	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8002af8:	2306      	movs	r3, #6
 8002afa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <MX_FMC_Init+0xa0>)
 8002b0e:	f00f f84b 	bl	8011ba8 <HAL_SDRAM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002b18:	f000 fd4c 	bl	80035b4 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8002b1c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002b20:	f002 fd18 	bl	8005554 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002b24:	bf00      	nop
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	2000180c 	.word	0x2000180c
 8002b30:	52004140 	.word	0x52004140

08002b34 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0b8      	sub	sp, #224	; 0xe0
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_FMC_MspInit+0x15c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 8099 	bne.w	8002c86 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002b54:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_FMC_MspInit+0x15c>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	22c0      	movs	r2, #192	; 0xc0
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f014 ffa6 	bl	8017ab4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00a f835 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002b88:	f000 fd14 	bl	80035b4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_FMC_MspInit+0x160>)
 8002b8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <HAL_FMC_MspInit+0x160>)
 8002b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b98:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_FMC_MspInit+0x160>)
 8002b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002baa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002bae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4831      	ldr	r0, [pc, #196]	; (8002c98 <HAL_FMC_MspInit+0x164>)
 8002bd2:	f006 fcb9 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002bd6:	230d      	movs	r3, #13
 8002bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bee:	230c      	movs	r3, #12
 8002bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4828      	ldr	r0, [pc, #160]	; (8002c9c <HAL_FMC_MspInit+0x168>)
 8002bfc:	f006 fca4 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002c00:	f248 1337 	movw	r3, #33079	; 0x8137
 8002c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c24:	4619      	mov	r1, r3
 8002c26:	481e      	ldr	r0, [pc, #120]	; (8002ca0 <HAL_FMC_MspInit+0x16c>)
 8002c28:	f006 fc8e 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002c2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c46:	230c      	movs	r3, #12
 8002c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c50:	4619      	mov	r1, r3
 8002c52:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <HAL_FMC_MspInit+0x170>)
 8002c54:	f006 fc78 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002c58:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c72:	230c      	movs	r3, #12
 8002c74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480a      	ldr	r0, [pc, #40]	; (8002ca8 <HAL_FMC_MspInit+0x174>)
 8002c80:	f006 fc62 	bl	8009548 <HAL_GPIO_Init>
 8002c84:	e000      	b.n	8002c88 <HAL_FMC_MspInit+0x154>
    return;
 8002c86:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c88:	37e0      	adds	r7, #224	; 0xe0
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20001840 	.word	0x20001840
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58021400 	.word	0x58021400
 8002c9c:	58020800 	.word	0x58020800
 8002ca0:	58021800 	.word	0x58021800
 8002ca4:	58021000 	.word	0x58021000
 8002ca8:	58020c00 	.word	0x58020c00

08002cac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cb4:	f7ff ff3e 	bl	8002b34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd6:	4b9b      	ldr	r3, [pc, #620]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cdc:	4a99      	ldr	r2, [pc, #612]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002cde:	f043 0310 	orr.w	r3, r3, #16
 8002ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce6:	4b97      	ldr	r3, [pc, #604]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf4:	4b93      	ldr	r3, [pc, #588]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	4a92      	ldr	r2, [pc, #584]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d04:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d12:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d18:	4a8a      	ldr	r2, [pc, #552]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d1a:	f043 0320 	orr.w	r3, r3, #32
 8002d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d30:	4b84      	ldr	r3, [pc, #528]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d36:	4a83      	ldr	r2, [pc, #524]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d40:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d54:	4a7b      	ldr	r2, [pc, #492]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5e:	4b79      	ldr	r3, [pc, #484]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d72:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7c:	4b71      	ldr	r3, [pc, #452]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d90:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da8:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dae:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db8:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <MX_GPIO_Init+0x284>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f244 0140 	movw	r1, #16448	; 0x4040
 8002dcc:	485e      	ldr	r0, [pc, #376]	; (8002f48 <MX_GPIO_Init+0x288>)
 8002dce:	f006 fd83 	bl	80098d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002dd8:	485c      	ldr	r0, [pc, #368]	; (8002f4c <MX_GPIO_Init+0x28c>)
 8002dda:	f006 fd7d 	bl	80098d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de4:	485a      	ldr	r0, [pc, #360]	; (8002f50 <MX_GPIO_Init+0x290>)
 8002de6:	f006 fd77 	bl	80098d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002df0:	4858      	ldr	r0, [pc, #352]	; (8002f54 <MX_GPIO_Init+0x294>)
 8002df2:	f006 fd71 	bl	80098d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	484f      	ldr	r0, [pc, #316]	; (8002f48 <MX_GPIO_Init+0x288>)
 8002e0c:	f006 fb9c 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002e10:	f244 0340 	movw	r3, #16448	; 0x4040
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	4619      	mov	r1, r3
 8002e28:	4847      	ldr	r0, [pc, #284]	; (8002f48 <MX_GPIO_Init+0x288>)
 8002e2a:	f006 fb8d 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	4840      	ldr	r0, [pc, #256]	; (8002f48 <MX_GPIO_Init+0x288>)
 8002e46:	f006 fb7f 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	483b      	ldr	r0, [pc, #236]	; (8002f4c <MX_GPIO_Init+0x28c>)
 8002e5e:	f006 fb73 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002e62:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4834      	ldr	r0, [pc, #208]	; (8002f4c <MX_GPIO_Init+0x28c>)
 8002e7c:	f006 fb64 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e92:	4619      	mov	r1, r3
 8002e94:	482e      	ldr	r0, [pc, #184]	; (8002f50 <MX_GPIO_Init+0x290>)
 8002e96:	f006 fb57 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4827      	ldr	r0, [pc, #156]	; (8002f50 <MX_GPIO_Init+0x290>)
 8002eb4:	f006 fb48 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002eb8:	f242 0378 	movw	r3, #8312	; 0x2078
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4820      	ldr	r0, [pc, #128]	; (8002f50 <MX_GPIO_Init+0x290>)
 8002ece:	f006 fb3b 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 8002ed2:	f243 0308 	movw	r3, #12296	; 0x3008
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481c      	ldr	r0, [pc, #112]	; (8002f58 <MX_GPIO_Init+0x298>)
 8002ee8:	f006 fb2e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	4816      	ldr	r0, [pc, #88]	; (8002f58 <MX_GPIO_Init+0x298>)
 8002f00:	f006 fb22 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480d      	ldr	r0, [pc, #52]	; (8002f54 <MX_GPIO_Init+0x294>)
 8002f1e:	f006 fb13 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	4619      	mov	r1, r3
 8002f36:	4807      	ldr	r0, [pc, #28]	; (8002f54 <MX_GPIO_Init+0x294>)
 8002f38:	f006 fb06 	bl	8009548 <HAL_GPIO_Init>

}
 8002f3c:	bf00      	nop
 8002f3e:	3738      	adds	r7, #56	; 0x38
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020800 	.word	0x58020800
 8002f4c:	58020400 	.word	0x58020400
 8002f50:	58020c00 	.word	0x58020c00
 8002f54:	58020000 	.word	0x58020000
 8002f58:	58021800 	.word	0x58021800

08002f5c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f62:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <MX_I2C2_Init+0x78>)
 8002f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <MX_I2C2_Init+0x7c>)
 8002f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f96:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002f98:	f008 f9cc 	bl	800b334 <HAL_I2C_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002fa2:	f000 fb07 	bl	80035b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002faa:	f008 fd57 	bl	800ba5c <HAL_I2CEx_ConfigAnalogFilter>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002fb4:	f000 fafe 	bl	80035b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_I2C2_Init+0x74>)
 8002fbc:	f008 fd99 	bl	800baf2 <HAL_I2CEx_ConfigDigitalFilter>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002fc6:	f000 faf5 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20001844 	.word	0x20001844
 8002fd4:	40005800 	.word	0x40005800
 8002fd8:	505097f4 	.word	0x505097f4

08002fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0ba      	sub	sp, #232	; 0xe8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	22c0      	movs	r2, #192	; 0xc0
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f014 fd59 	bl	8017ab4 <memset>
  if(i2cHandle->Instance==I2C2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d146      	bne.n	800309a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800300c:	f04f 0208 	mov.w	r2, #8
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	4618      	mov	r0, r3
 8003024:	f009 fde2 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800302e:	f000 fac1 	bl	80035b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003050:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003058:	2312      	movs	r3, #18
 800305a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305e:	2301      	movs	r3, #1
 8003060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800306a:	2304      	movs	r3, #4
 800306c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003074:	4619      	mov	r1, r3
 8003076:	480d      	ldr	r0, [pc, #52]	; (80030ac <HAL_I2C_MspInit+0xd0>)
 8003078:	f006 fa66 	bl	8009548 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 800307e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 8003084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 800308e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800309a:	bf00      	nop
 800309c:	37e8      	adds	r7, #232	; 0xe8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40005800 	.word	0x40005800
 80030a8:	58024400 	.word	0x58024400
 80030ac:	58020400 	.word	0x58020400

080030b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 80030b6:	f000 fa3b 	bl	8003530 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <main+0x17c>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11b      	bne.n	80030fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030c6:	f3bf 8f4f 	dsb	sy
}
 80030ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030cc:	f3bf 8f6f 	isb	sy
}
 80030d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <main+0x17c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80030da:	f3bf 8f4f 	dsb	sy
}
 80030de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030e0:	f3bf 8f6f 	isb	sy
}
 80030e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80030e6:	4b51      	ldr	r3, [pc, #324]	; (800322c <main+0x17c>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4a50      	ldr	r2, [pc, #320]	; (800322c <main+0x17c>)
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80030f2:	f3bf 8f4f 	dsb	sy
}
 80030f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030f8:	f3bf 8f6f 	isb	sy
}
 80030fc:	e000      	b.n	8003100 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80030fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <main+0x17c>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d138      	bne.n	800317e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <main+0x17c>)
 800310e:	2200      	movs	r2, #0
 8003110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003114:	f3bf 8f4f 	dsb	sy
}
 8003118:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <main+0x17c>)
 800311c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003120:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0b5b      	lsrs	r3, r3, #13
 8003126:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800312a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003134:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800313e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003144:	4939      	ldr	r1, [pc, #228]	; (800322c <main+0x17c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ef      	bne.n	8003136 <main+0x86>
    } while(sets-- != 0U);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e5      	bne.n	800312c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8003160:	f3bf 8f4f 	dsb	sy
}
 8003164:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003166:	4b31      	ldr	r3, [pc, #196]	; (800322c <main+0x17c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a30      	ldr	r2, [pc, #192]	; (800322c <main+0x17c>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003172:	f3bf 8f4f 	dsb	sy
}
 8003176:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003178:	f3bf 8f6f 	isb	sy
}
 800317c:	e000      	b.n	8003180 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800317e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003180:	f002 f926 	bl	80053d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003184:	f000 f860 	bl	8003248 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003188:	f000 f90e 	bl	80033a8 <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800318c:	f7ff fd98 	bl	8002cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003190:	f7ff fc24 	bl	80029dc <MX_DMA_Init>
  MX_FMC_Init();
 8003194:	f7ff fc7a 	bl	8002a8c <MX_FMC_Init>
  MX_ADC1_Init();
 8003198:	f7fe fac6 	bl	8001728 <MX_ADC1_Init>
  MX_ADC3_Init();
 800319c:	f7fe fbe6 	bl	800196c <MX_ADC3_Init>
  MX_I2C2_Init();
 80031a0:	f7ff fedc 	bl	8002f5c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80031a4:	f000 fca6 	bl	8003af4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80031a8:	f000 fd3e 	bl	8003c28 <MX_SPI1_Init>
  MX_FATFS_Init();
 80031ac:	f7ff fc46 	bl	8002a3c <MX_FATFS_Init>
  MX_SAI1_Init();
 80031b0:	f000 fa54 	bl	800365c <MX_SAI1_Init>
  MX_TIM3_Init();
 80031b4:	f000 ffc8 	bl	8004148 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031b8:	f001 f83e 	bl	8004238 <MX_TIM4_Init>
  MX_TIM7_Init();
 80031bc:	f001 f8ca 	bl	8004354 <MX_TIM7_Init>
  MX_TIM1_Init();
 80031c0:	f000 ff32 	bl	8004028 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80031c4:	f001 f9fa 	bl	80045bc <MX_USART6_UART_Init>
  MX_RNG_Init();
 80031c8:	f000 f9f8 	bl	80035bc <MX_RNG_Init>
  MX_USB_HOST_Init();
 80031cc:	f001 fad2 	bl	8004774 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80031d0:	2200      	movs	r2, #0
 80031d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031d6:	4816      	ldr	r0, [pc, #88]	; (8003230 <main+0x180>)
 80031d8:	f006 fb7e 	bl	80098d8 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 80031dc:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 80031e0:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	eee1 3a10 	vmsr	fpscr, r3
}
 80031f4:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 80031f6:	220a      	movs	r2, #10
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <main+0x184>)
 80031fa:	480f      	ldr	r0, [pc, #60]	; (8003238 <main+0x188>)
 80031fc:	f002 fd68 	bl	8005cd0 <HAL_ADC_Start_DMA>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <main+0x15a>
	{
	  Error_Handler();
 8003206:	f000 f9d5 	bl	80035b4 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 800320a:	200a      	movs	r0, #10
 800320c:	f002 f972 	bl	80054f4 <HAL_Delay>

  SDRAM_Initialization_sequence();
 8003210:	f000 f90a 	bl	8003428 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	f002 f96d 	bl	80054f4 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <main+0x18c>)
 800321c:	4908      	ldr	r1, [pc, #32]	; (8003240 <main+0x190>)
 800321e:	4809      	ldr	r0, [pc, #36]	; (8003244 <main+0x194>)
 8003220:	f7fe fd38 	bl	8001c94 <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8003224:	f001 face 	bl	80047c4 <MX_USB_HOST_Process>
 8003228:	e7fc      	b.n	8003224 <main+0x174>
 800322a:	bf00      	nop
 800322c:	e000ed00 	.word	0xe000ed00
 8003230:	58020800 	.word	0x58020800
 8003234:	30000440 	.word	0x30000440
 8003238:	2000013c 	.word	0x2000013c
 800323c:	20001944 	.word	0x20001944
 8003240:	200018ac 	.word	0x200018ac
 8003244:	20001844 	.word	0x20001844

08003248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b09e      	sub	sp, #120	; 0x78
 800324c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800324e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003252:	224c      	movs	r2, #76	; 0x4c
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f014 fc2c 	bl	8017ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	2220      	movs	r2, #32
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f014 fc25 	bl	8017ab4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800326a:	2002      	movs	r0, #2
 800326c:	f008 fc8e 	bl	800bb8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <SystemClock_Config+0x154>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4a48      	ldr	r2, [pc, #288]	; (800339c <SystemClock_Config+0x154>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003280:	4b46      	ldr	r3, [pc, #280]	; (800339c <SystemClock_Config+0x154>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <SystemClock_Config+0x158>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <SystemClock_Config+0x158>)
 8003290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003294:	6193      	str	r3, [r2, #24]
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <SystemClock_Config+0x158>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80032a2:	bf00      	nop
 80032a4:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <SystemClock_Config+0x158>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d1f8      	bne.n	80032a4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <SystemClock_Config+0x15c>)
 80032b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032b8:	4a3a      	ldr	r2, [pc, #232]	; (80033a4 <SystemClock_Config+0x15c>)
 80032ba:	f043 0302 	orr.w	r3, r3, #2
 80032be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032c2:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <SystemClock_Config+0x15c>)
 80032c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80032d0:	2300      	movs	r3, #0
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <SystemClock_Config+0x158>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <SystemClock_Config+0x158>)
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <SystemClock_Config+0x158>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4b2c      	ldr	r3, [pc, #176]	; (800339c <SystemClock_Config+0x154>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	4a2b      	ldr	r2, [pc, #172]	; (800339c <SystemClock_Config+0x154>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <SystemClock_Config+0x154>)
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003302:	bf00      	nop
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <SystemClock_Config+0x158>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d1f8      	bne.n	8003304 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003312:	2321      	movs	r3, #33	; 0x21
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800331c:	2301      	movs	r3, #1
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003320:	2302      	movs	r3, #2
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003324:	2302      	movs	r3, #2
 8003326:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003328:	2305      	movs	r3, #5
 800332a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003330:	2302      	movs	r3, #2
 8003332:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003334:	2302      	movs	r3, #2
 8003336:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003338:	2302      	movs	r3, #2
 800333a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800333c:	2308      	movs	r3, #8
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003340:	2300      	movs	r3, #0
 8003342:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4618      	mov	r0, r3
 800334e:	f008 fc67 	bl	800bc20 <HAL_RCC_OscConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8003358:	f000 f92c 	bl	80035b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800335c:	233f      	movs	r3, #63	; 0x3f
 800335e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003360:	2303      	movs	r3, #3
 8003362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003368:	2308      	movs	r3, #8
 800336a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800336c:	2340      	movs	r3, #64	; 0x40
 800336e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003370:	2340      	movs	r3, #64	; 0x40
 8003372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	2104      	movs	r1, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f009 f8a5 	bl	800c4d4 <HAL_RCC_ClockConfig>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8003390:	f000 f910 	bl	80035b4 <Error_Handler>
  }
}
 8003394:	bf00      	nop
 8003396:	3778      	adds	r7, #120	; 0x78
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58000400 	.word	0x58000400
 80033a0:	58024800 	.word	0x58024800
 80033a4:	58024400 	.word	0x58024400

080033a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b0b0      	sub	sp, #192	; 0xc0
 80033ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ae:	463b      	mov	r3, r7
 80033b0:	22c0      	movs	r2, #192	; 0xc0
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f014 fb7d 	bl	8017ab4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <PeriphCommonClock_Config+0x68>)
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80033c4:	2319      	movs	r3, #25
 80033c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 80033c8:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80033cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 80033ce:	2307      	movs	r3, #7
 80033d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033d2:	2302      	movs	r3, #2
 80033d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80033d6:	2302      	movs	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80033e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ea:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80033ec:	2301      	movs	r3, #1
 80033ee:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f6:	463b      	mov	r3, r7
 80033f8:	4618      	mov	r0, r3
 80033fa:	f009 fbf7 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003404:	f000 f8d6 	bl	80035b4 <Error_Handler>
  }
}
 8003408:	bf00      	nop
 800340a:	37c0      	adds	r7, #192	; 0xc0
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	00090100 	.word	0x00090100

08003414 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	;
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8003432:	2301      	movs	r3, #1
 8003434:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003436:	2310      	movs	r3, #16
 8003438:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800343a:	2301      	movs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003448:	4619      	mov	r1, r3
 800344a:	4828      	ldr	r0, [pc, #160]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 800344c:	f00e fbe8 	bl	8011c20 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8003450:	2001      	movs	r0, #1
 8003452:	f002 f84f 	bl	80054f4 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8003456:	2302      	movs	r3, #2
 8003458:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800345a:	2310      	movs	r3, #16
 800345c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346c:	4619      	mov	r1, r3
 800346e:	481f      	ldr	r0, [pc, #124]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 8003470:	f00e fbd6 	bl	8011c20 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8003474:	f240 2322 	movw	r3, #546	; 0x222
 8003478:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800347a:	2304      	movs	r3, #4
 800347c:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800347e:	2310      	movs	r3, #16
 8003480:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8003482:	2301      	movs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003490:	4619      	mov	r1, r3
 8003492:	4816      	ldr	r0, [pc, #88]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 8003494:	f00e fbc4 	bl	8011c20 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003498:	2303      	movs	r3, #3
 800349a:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800349c:	2310      	movs	r3, #16
 800349e:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 80034a0:	2308      	movs	r3, #8
 80034a2:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ae:	4619      	mov	r1, r3
 80034b0:	480e      	ldr	r0, [pc, #56]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 80034b2:	f00e fbb5 	bl	8011c20 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80034b6:	2001      	movs	r0, #1
 80034b8:	f002 f81c 	bl	80054f4 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80034bc:	2303      	movs	r3, #3
 80034be:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80034c0:	2310      	movs	r3, #16
 80034c2:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 80034c4:	2308      	movs	r3, #8
 80034c6:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	4619      	mov	r1, r3
 80034d4:	4805      	ldr	r0, [pc, #20]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 80034d6:	f00e fba3 	bl	8011c20 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 80034da:	f240 5169 	movw	r1, #1385	; 0x569
 80034de:	4803      	ldr	r0, [pc, #12]	; (80034ec <SDRAM_Initialization_sequence+0xc4>)
 80034e0:	f00e fbd3 	bl	8011c8a <HAL_SDRAM_ProgramRefreshRate>
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000180c 	.word	0x2000180c

080034f0 <randomNumber>:


float randomNumber(void) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80034f6:	463b      	mov	r3, r7
 80034f8:	4619      	mov	r1, r3
 80034fa:	480b      	ldr	r0, [pc, #44]	; (8003528 <randomNumber+0x38>)
 80034fc:	f00c f8d6 	bl	800f6ac <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800352c <randomNumber+0x3c>
 800350e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003512:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	ee07 3a90 	vmov	s15, r3
}
 800351c:	eeb0 0a67 	vmov.f32	s0, s15
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20001898 	.word	0x20001898
 800352c:	2f80000d 	.word	0x2f80000d

08003530 <MPU_Conf>:


void MPU_Conf(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8003536:	f003 fea7 	bl	8007288 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800353a:	2301      	movs	r3, #1
 800353c:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800353e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003542:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8003544:	2311      	movs	r3, #17
 8003546:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003548:	2303      	movs	r3, #3
 800354a:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800354c:	2301      	movs	r3, #1
 800354e:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003558:	2300      	movs	r3, #0
 800355a:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800355c:	2300      	movs	r3, #0
 800355e:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8003560:	2300      	movs	r3, #0
 8003562:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003564:	2301      	movs	r3, #1
 8003566:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003568:	463b      	mov	r3, r7
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fec4 	bl	80072f8 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003570:	2301      	movs	r3, #1
 8003572:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8003574:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8003578:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800357a:	230f      	movs	r3, #15
 800357c:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800357e:	2303      	movs	r3, #3
 8003580:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003582:	2301      	movs	r3, #1
 8003584:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003586:	2301      	movs	r3, #1
 8003588:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800358e:	2301      	movs	r3, #1
 8003590:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003592:	2301      	movs	r3, #1
 8003594:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8003596:	2300      	movs	r3, #0
 8003598:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800359e:	463b      	mov	r3, r7
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 fea9 	bl	80072f8 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80035a6:	2004      	movs	r0, #4
 80035a8:	f003 fe86 	bl	80072b8 <HAL_MPU_Enable>
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 80035b8:	e7fe      	b.n	80035b8 <Error_Handler+0x4>
	...

080035bc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <MX_RNG_Init+0x24>)
 80035c2:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <MX_RNG_Init+0x28>)
 80035c4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <MX_RNG_Init+0x24>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80035cc:	4804      	ldr	r0, [pc, #16]	; (80035e0 <MX_RNG_Init+0x24>)
 80035ce:	f00c f80b 	bl	800f5e8 <HAL_RNG_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80035d8:	f7ff ffec 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20001898 	.word	0x20001898
 80035e4:	48021800 	.word	0x48021800

080035e8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0b4      	sub	sp, #208	; 0xd0
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	22c0      	movs	r2, #192	; 0xc0
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f014 fa5b 	bl	8017ab4 <memset>
  if(rngHandle->Instance==RNG)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a14      	ldr	r2, [pc, #80]	; (8003654 <HAL_RNG_MspInit+0x6c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d121      	bne.n	800364c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800361a:	f107 0310 	add.w	r3, r7, #16
 800361e:	4618      	mov	r0, r3
 8003620:	f009 fae4 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800362a:	f7ff ffc3 	bl	80035b4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_RNG_MspInit+0x70>)
 8003630:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <HAL_RNG_MspInit+0x70>)
 8003636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RNG_MspInit+0x70>)
 8003640:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800364c:	bf00      	nop
 800364e:	37d0      	adds	r7, #208	; 0xd0
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	48021800 	.word	0x48021800
 8003658:	58024400 	.word	0x58024400

0800365c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <MX_SAI1_Init+0xb0>)
 8003662:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <MX_SAI1_Init+0xb4>)
 8003664:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <MX_SAI1_Init+0xb0>)
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <MX_SAI1_Init+0xb0>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <MX_SAI1_Init+0xb0>)
 8003674:	2200      	movs	r2, #0
 8003676:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <MX_SAI1_Init+0xb0>)
 800367a:	2200      	movs	r2, #0
 800367c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <MX_SAI1_Init+0xb0>)
 8003680:	2201      	movs	r2, #1
 8003682:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <MX_SAI1_Init+0xb0>)
 8003686:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800368a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800368c:	4b1f      	ldr	r3, [pc, #124]	; (800370c <MX_SAI1_Init+0xb0>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <MX_SAI1_Init+0xb0>)
 8003694:	2200      	movs	r2, #0
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <MX_SAI1_Init+0xb0>)
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <MX_SAI1_Init+0xb0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80036a4:	2302      	movs	r3, #2
 80036a6:	2202      	movs	r2, #2
 80036a8:	2100      	movs	r1, #0
 80036aa:	4818      	ldr	r0, [pc, #96]	; (800370c <MX_SAI1_Init+0xb0>)
 80036ac:	f00c f854 	bl	800f758 <HAL_SAI_InitProtocol>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80036b6:	f7ff ff7d 	bl	80035b4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <MX_SAI1_Init+0xbc>)
 80036be:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036c2:	2203      	movs	r2, #3
 80036c4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80036f0:	2302      	movs	r3, #2
 80036f2:	2202      	movs	r2, #2
 80036f4:	2100      	movs	r1, #0
 80036f6:	4807      	ldr	r0, [pc, #28]	; (8003714 <MX_SAI1_Init+0xb8>)
 80036f8:	f00c f82e 	bl	800f758 <HAL_SAI_InitProtocol>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8003702:	f7ff ff57 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200018ac 	.word	0x200018ac
 8003710:	40015804 	.word	0x40015804
 8003714:	20001944 	.word	0x20001944
 8003718:	40015824 	.word	0x40015824

0800371c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_SAI_MspInit+0x1ec>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d179      	bne.n	8003822 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10e      	bne.n	8003754 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003736:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 8003738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800373c:	4a74      	ldr	r2, [pc, #464]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 800373e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003742:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003746:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 8003748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003754:	4b6d      	ldr	r3, [pc, #436]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a6c      	ldr	r2, [pc, #432]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 800375c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800375e:	2324      	movs	r3, #36	; 0x24
 8003760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376a:	2303      	movs	r3, #3
 800376c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800376e:	2306      	movs	r3, #6
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4619      	mov	r1, r3
 8003778:	4866      	ldr	r0, [pc, #408]	; (8003914 <HAL_SAI_MspInit+0x1f8>)
 800377a:	f005 fee5 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800377e:	2350      	movs	r3, #80	; 0x50
 8003780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378a:	2302      	movs	r3, #2
 800378c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800378e:	2306      	movs	r3, #6
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	4619      	mov	r1, r3
 8003798:	485e      	ldr	r0, [pc, #376]	; (8003914 <HAL_SAI_MspInit+0x1f8>)
 800379a:	f005 fed5 	bl	8009548 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 800379e:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037a0:	4a5e      	ldr	r2, [pc, #376]	; (800391c <HAL_SAI_MspInit+0x200>)
 80037a2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80037a4:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037a6:	2257      	movs	r2, #87	; 0x57
 80037a8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80037b6:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037bc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037c4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037cc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80037ce:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037dc:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037de:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037e0:	2204      	movs	r2, #4
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80037ea:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80037f0:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80037f6:	4848      	ldr	r0, [pc, #288]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 80037f8:	f003 fdc2 	bl	8007380 <HAL_DMA_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8003802:	f7ff fed7 	bl	80035b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 800380a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800380e:	4a42      	ldr	r2, [pc, #264]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 8003818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800381c:	4a3e      	ldr	r2, [pc, #248]	; (8003918 <HAL_SAI_MspInit+0x1fc>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_SAI_MspInit+0x204>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d169      	bne.n	8003900 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10e      	bne.n	8003852 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 8003836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800383a:	4a35      	ldr	r2, [pc, #212]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 800383c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003840:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003844:	4b32      	ldr	r3, [pc, #200]	; (8003910 <HAL_SAI_MspInit+0x1f4>)
 8003846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <HAL_SAI_MspInit+0x1f0>)
 800385a:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800385c:	2308      	movs	r3, #8
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003868:	2302      	movs	r3, #2
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800386c:	2306      	movs	r3, #6
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	4827      	ldr	r0, [pc, #156]	; (8003914 <HAL_SAI_MspInit+0x1f8>)
 8003878:	f005 fe66 	bl	8009548 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_SAI_MspInit+0x208>)
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <HAL_SAI_MspInit+0x20c>)
 8003880:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_SAI_MspInit+0x208>)
 8003884:	2258      	movs	r2, #88	; 0x58
 8003886:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <HAL_SAI_MspInit+0x208>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_SAI_MspInit+0x208>)
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_SAI_MspInit+0x208>)
 8003896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_SAI_MspInit+0x208>)
 800389e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a2:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038aa:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b2:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038ba:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038be:	2204      	movs	r2, #4
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80038d4:	4813      	ldr	r0, [pc, #76]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038d6:	f003 fd53 	bl	8007380 <HAL_DMA_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 80038e0:	f7ff fe68 	bl	80035b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_SAI_MspInit+0x208>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003900:	bf00      	nop
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40015804 	.word	0x40015804
 800390c:	20001acc 	.word	0x20001acc
 8003910:	58024400 	.word	0x58024400
 8003914:	58021000 	.word	0x58021000
 8003918:	200019dc 	.word	0x200019dc
 800391c:	40020028 	.word	0x40020028
 8003920:	40015824 	.word	0x40015824
 8003924:	20001a54 	.word	0x20001a54
 8003928:	40020040 	.word	0x40020040

0800392c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <SD_CheckStatus+0x38>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800393c:	f7fe ff5a 	bl	80027f4 <BSP_SD_GetCardState>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <SD_CheckStatus+0x38>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <SD_CheckStatus+0x38>)
 8003954:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003956:	4b03      	ldr	r3, [pc, #12]	; (8003964 <SD_CheckStatus+0x38>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000014 	.word	0x20000014

08003968 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <SD_initialize+0x38>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003978:	f7fe feda 	bl	8002730 <BSP_SD_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ffd1 	bl	800392c <SD_CheckStatus>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SD_initialize+0x38>)
 8003990:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <SD_initialize+0x38>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000014 	.word	0x20000014

080039a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ffbb 	bl	800392c <SD_CheckStatus>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68b8      	ldr	r0, [r7, #8]
 80039de:	f7fe fecd 	bl	800277c <BSP_SD_ReadBlocks>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80039e8:	bf00      	nop
 80039ea:	f7fe ff03 	bl	80027f4 <BSP_SD_GetCardState>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1fa      	bne.n	80039ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	68b8      	ldr	r0, [r7, #8]
 8003a20:	f7fe feca 	bl	80027b8 <BSP_SD_WriteBlocks>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003a2a:	bf00      	nop
 8003a2c:	f7fe fee2 	bl	80027f4 <BSP_SD_GetCardState>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1fa      	bne.n	8003a2c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	603a      	str	r2, [r7, #0]
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	460b      	mov	r3, r1
 8003a52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a5a:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <SD_ioctl+0xac>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <SD_ioctl+0x28>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e03c      	b.n	8003ae6 <SD_ioctl+0xa2>

  switch (cmd)
 8003a6c:	79bb      	ldrb	r3, [r7, #6]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d834      	bhi.n	8003adc <SD_ioctl+0x98>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <SD_ioctl+0x34>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ac3 	.word	0x08003ac3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003a8e:	e028      	b.n	8003ae2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe febd 	bl	8002814 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003aa6:	e01c      	b.n	8003ae2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe feb1 	bl	8002814 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003ac0:	e00f      	b.n	8003ae2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fea4 	bl	8002814 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	0a5a      	lsrs	r2, r3, #9
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003ada:	e002      	b.n	8003ae2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3730      	adds	r7, #48	; 0x30
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000014 	.word	0x20000014

08003af4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <MX_SDMMC1_SD_Init+0x38>)
 8003afc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b10:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <MX_SDMMC1_SD_Init+0x34>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20001ad0 	.word	0x20001ad0
 8003b2c:	52007000 	.word	0x52007000

08003b30 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_SD_MspInit+0xe8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d15e      	bne.n	8003c10 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003b58:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b76:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b80:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003b96:	f043 0308 	orr.w	r3, r3, #8
 8003b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <HAL_SD_MspInit+0xec>)
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003bac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4815      	ldr	r0, [pc, #84]	; (8003c20 <HAL_SD_MspInit+0xf0>)
 8003bca:	f005 fcbd 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003be0:	230c      	movs	r3, #12
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	480d      	ldr	r0, [pc, #52]	; (8003c20 <HAL_SD_MspInit+0xf0>)
 8003bec:	f005 fcac 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003c00:	230c      	movs	r3, #12
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4806      	ldr	r0, [pc, #24]	; (8003c24 <HAL_SD_MspInit+0xf4>)
 8003c0c:	f005 fc9c 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003c10:	bf00      	nop
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	52007000 	.word	0x52007000
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	58020800 	.word	0x58020800
 8003c24:	58020c00 	.word	0x58020c00

08003c28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c2e:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <MX_SPI1_Init+0xa8>)
 8003c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c42:	2207      	movs	r2, #7
 8003c44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003c88:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cb8:	4804      	ldr	r0, [pc, #16]	; (8003ccc <MX_SPI1_Init+0xa4>)
 8003cba:	f00e f80f 	bl	8011cdc <HAL_SPI_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003cc4:	f7ff fc76 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20001b4c 	.word	0x20001b4c
 8003cd0:	40013000 	.word	0x40013000

08003cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b0bc      	sub	sp, #240	; 0xf0
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cec:	f107 0318 	add.w	r3, r7, #24
 8003cf0:	22c0      	movs	r2, #192	; 0xc0
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f013 fedd 	bl	8017ab4 <memset>
  if(spiHandle->Instance==SPI1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <HAL_SPI_MspInit+0x10c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d169      	bne.n	8003dd8 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d14:	f107 0318 	add.w	r3, r7, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f008 ff67 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003d24:	f7ff fc46 	bl	80035b4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d28:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d38:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d46:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_SPI_MspInit+0x110>)
 8003d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d9a:	2305      	movs	r3, #5
 8003d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003da4:	4619      	mov	r1, r3
 8003da6:	4810      	ldr	r0, [pc, #64]	; (8003de8 <HAL_SPI_MspInit+0x114>)
 8003da8:	f005 fbce 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003dac:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4806      	ldr	r0, [pc, #24]	; (8003dec <HAL_SPI_MspInit+0x118>)
 8003dd4:	f005 fbb8 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003dd8:	bf00      	nop
 8003dda:	37f0      	adds	r7, #240	; 0xf0
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40013000 	.word	0x40013000
 8003de4:	58024400 	.word	0x58024400
 8003de8:	58020c00 	.word	0x58020c00
 8003dec:	58021800 	.word	0x58021800

08003df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <HAL_MspInit+0x30>)
 8003df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dfc:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_MspInit+0x30>)
 8003dfe:	f043 0302 	orr.w	r3, r3, #2
 8003e02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_MspInit+0x30>)
 8003e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	58024400 	.word	0x58024400

08003e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	/* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <MemManage_Handler+0x4>

08003e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <BusFault_Handler+0x4>

08003e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler+0x4>

08003e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e78:	f001 fb1c 	bl	80054b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <DMA1_Stream0_IRQHandler+0x10>)
 8003e86:	f004 f841 	bl	8007f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000204 	.word	0x20000204

08003e94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <DMA1_Stream1_IRQHandler+0x10>)
 8003e9a:	f004 f837 	bl	8007f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200019dc 	.word	0x200019dc

08003ea8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <DMA1_Stream2_IRQHandler+0x10>)
 8003eae:	f004 f82d 	bl	8007f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20001a54 	.word	0x20001a54

08003ebc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <ADC_IRQHandler+0x10>)
 8003ec2:	f001 ffc9 	bl	8005e58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000013c 	.word	0x2000013c

08003ed0 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003ed6:	f005 ff83 	bl	8009de0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20001da4 	.word	0x20001da4

08003ee4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8003eea:	f005 ff79 	bl	8009de0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20001da4 	.word	0x20001da4

08003ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <OTG_FS_IRQHandler+0x10>)
 8003efe:	f005 ff6f 	bl	8009de0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20001da4 	.word	0x20001da4

08003f0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <_sbrk+0x50>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <_sbrk+0x16>
		heap_end = &end;
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <_sbrk+0x50>)
 8003f1e:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <_sbrk+0x54>)
 8003f20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <_sbrk+0x50>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <_sbrk+0x50>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	466a      	mov	r2, sp
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d907      	bls.n	8003f46 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003f36:	f013 fdd5 	bl	8017ae4 <__errno>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	220c      	movs	r2, #12
 8003f3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f44:	e006      	b.n	8003f54 <_sbrk+0x48>
	}

	heap_end += incr;
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <_sbrk+0x50>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	4a03      	ldr	r2, [pc, #12]	; (8003f5c <_sbrk+0x50>)
 8003f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20001bd4 	.word	0x20001bd4
 8003f60:	20002200 	.word	0x20002200

08003f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <SystemInit+0xac>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <SystemInit+0xac>)
 8003f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f78:	4b26      	ldr	r3, [pc, #152]	; (8004014 <SystemInit+0xb0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a25      	ldr	r2, [pc, #148]	; (8004014 <SystemInit+0xb0>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <SystemInit+0xb0>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <SystemInit+0xb0>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4921      	ldr	r1, [pc, #132]	; (8004014 <SystemInit+0xb0>)
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <SystemInit+0xb4>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <SystemInit+0xb0>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <SystemInit+0xb0>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <SystemInit+0xb0>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <SystemInit+0xb0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <SystemInit+0xb0>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <SystemInit+0xb0>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <SystemInit+0xb0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <SystemInit+0xb0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <SystemInit+0xb0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <SystemInit+0xb0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <SystemInit+0xb0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <SystemInit+0xb0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <SystemInit+0xb0>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <SystemInit+0xb0>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <SystemInit+0xb8>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <SystemInit+0xbc>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d202      	bcs.n	8003ffe <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <SystemInit+0xc0>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <SystemInit+0xac>)
 8004000:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004004:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	58024400 	.word	0x58024400
 8004018:	eaf6ed7f 	.word	0xeaf6ed7f
 800401c:	5c001000 	.word	0x5c001000
 8004020:	ffff0000 	.word	0xffff0000
 8004024:	51008108 	.word	0x51008108

08004028 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b096      	sub	sp, #88	; 0x58
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800402e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800403a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	611a      	str	r2, [r3, #16]
 800404a:	615a      	str	r2, [r3, #20]
 800404c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	222c      	movs	r2, #44	; 0x2c
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f013 fd2d 	bl	8017ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <MX_TIM1_Init+0x118>)
 800405c:	4a39      	ldr	r2, [pc, #228]	; (8004144 <MX_TIM1_Init+0x11c>)
 800405e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <MX_TIM1_Init+0x118>)
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <MX_TIM1_Init+0x118>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <MX_TIM1_Init+0x118>)
 800406e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004074:	4b32      	ldr	r3, [pc, #200]	; (8004140 <MX_TIM1_Init+0x118>)
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <MX_TIM1_Init+0x118>)
 800407c:	2200      	movs	r2, #0
 800407e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <MX_TIM1_Init+0x118>)
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004086:	482e      	ldr	r0, [pc, #184]	; (8004140 <MX_TIM1_Init+0x118>)
 8004088:	f00d ffbe 	bl	8012008 <HAL_TIM_PWM_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004092:	f7ff fa8f 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040a6:	4619      	mov	r1, r3
 80040a8:	4825      	ldr	r0, [pc, #148]	; (8004140 <MX_TIM1_Init+0x118>)
 80040aa:	f00e fe1f 	bl	8012cec <HAL_TIMEx_MasterConfigSynchronization>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80040b4:	f7ff fa7e 	bl	80035b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b8:	2360      	movs	r3, #96	; 0x60
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c0:	2300      	movs	r3, #0
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040cc:	2300      	movs	r3, #0
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040d8:	2208      	movs	r2, #8
 80040da:	4619      	mov	r1, r3
 80040dc:	4818      	ldr	r0, [pc, #96]	; (8004140 <MX_TIM1_Init+0x118>)
 80040de:	f00d ffeb 	bl	80120b8 <HAL_TIM_PWM_ConfigChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80040e8:	f7ff fa64 	bl	80035b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004104:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800410e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4807      	ldr	r0, [pc, #28]	; (8004140 <MX_TIM1_Init+0x118>)
 8004122:	f00e fe71 	bl	8012e08 <HAL_TIMEx_ConfigBreakDeadTime>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800412c:	f7ff fa42 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004130:	4803      	ldr	r0, [pc, #12]	; (8004140 <MX_TIM1_Init+0x118>)
 8004132:	f000 f9b7 	bl	80044a4 <HAL_TIM_MspPostInit>

}
 8004136:	bf00      	nop
 8004138:	3758      	adds	r7, #88	; 0x58
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20001bd8 	.word	0x20001bd8
 8004144:	40010000 	.word	0x40010000

08004148 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08e      	sub	sp, #56	; 0x38
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800414e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415c:	f107 031c 	add.w	r3, r7, #28
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004168:	463b      	mov	r3, r7
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	615a      	str	r2, [r3, #20]
 8004178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800417a:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <MX_TIM3_Init+0xe8>)
 800417c:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <MX_TIM3_Init+0xec>)
 800417e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <MX_TIM3_Init+0xe8>)
 8004182:	2200      	movs	r2, #0
 8004184:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004186:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <MX_TIM3_Init+0xe8>)
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <MX_TIM3_Init+0xe8>)
 800418e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <MX_TIM3_Init+0xe8>)
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419a:	4b25      	ldr	r3, [pc, #148]	; (8004230 <MX_TIM3_Init+0xe8>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041a0:	4823      	ldr	r0, [pc, #140]	; (8004230 <MX_TIM3_Init+0xe8>)
 80041a2:	f00d feda 	bl	8011f5a <HAL_TIM_Base_Init>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80041ac:	f7ff fa02 	bl	80035b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ba:	4619      	mov	r1, r3
 80041bc:	481c      	ldr	r0, [pc, #112]	; (8004230 <MX_TIM3_Init+0xe8>)
 80041be:	f00e f88f 	bl	80122e0 <HAL_TIM_ConfigClockSource>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80041c8:	f7ff f9f4 	bl	80035b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80041cc:	4818      	ldr	r0, [pc, #96]	; (8004230 <MX_TIM3_Init+0xe8>)
 80041ce:	f00d ff1b 	bl	8012008 <HAL_TIM_PWM_Init>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80041d8:	f7ff f9ec 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	4619      	mov	r1, r3
 80041ea:	4811      	ldr	r0, [pc, #68]	; (8004230 <MX_TIM3_Init+0xe8>)
 80041ec:	f00e fd7e 	bl	8012cec <HAL_TIMEx_MasterConfigSynchronization>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80041f6:	f7ff f9dd 	bl	80035b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041fa:	2360      	movs	r3, #96	; 0x60
 80041fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800420a:	463b      	mov	r3, r7
 800420c:	2204      	movs	r2, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4807      	ldr	r0, [pc, #28]	; (8004230 <MX_TIM3_Init+0xe8>)
 8004212:	f00d ff51 	bl	80120b8 <HAL_TIM_PWM_ConfigChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800421c:	f7ff f9ca 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004220:	4803      	ldr	r0, [pc, #12]	; (8004230 <MX_TIM3_Init+0xe8>)
 8004222:	f000 f93f 	bl	80044a4 <HAL_TIM_MspPostInit>

}
 8004226:	bf00      	nop
 8004228:	3738      	adds	r7, #56	; 0x38
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20001c24 	.word	0x20001c24
 8004234:	40000400 	.word	0x40000400

08004238 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424c:	f107 031c 	add.w	r3, r7, #28
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004258:	463b      	mov	r3, r7
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	611a      	str	r2, [r3, #16]
 8004266:	615a      	str	r2, [r3, #20]
 8004268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800426a:	4b38      	ldr	r3, [pc, #224]	; (800434c <MX_TIM4_Init+0x114>)
 800426c:	4a38      	ldr	r2, [pc, #224]	; (8004350 <MX_TIM4_Init+0x118>)
 800426e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <MX_TIM4_Init+0x114>)
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004276:	4b35      	ldr	r3, [pc, #212]	; (800434c <MX_TIM4_Init+0x114>)
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <MX_TIM4_Init+0x114>)
 800427e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004282:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <MX_TIM4_Init+0x114>)
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <MX_TIM4_Init+0x114>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004290:	482e      	ldr	r0, [pc, #184]	; (800434c <MX_TIM4_Init+0x114>)
 8004292:	f00d fe62 	bl	8011f5a <HAL_TIM_Base_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800429c:	f7ff f98a 	bl	80035b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80042a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042aa:	4619      	mov	r1, r3
 80042ac:	4827      	ldr	r0, [pc, #156]	; (800434c <MX_TIM4_Init+0x114>)
 80042ae:	f00e f817 	bl	80122e0 <HAL_TIM_ConfigClockSource>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80042b8:	f7ff f97c 	bl	80035b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80042bc:	4823      	ldr	r0, [pc, #140]	; (800434c <MX_TIM4_Init+0x114>)
 80042be:	f00d fea3 	bl	8012008 <HAL_TIM_PWM_Init>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80042c8:	f7ff f974 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	4619      	mov	r1, r3
 80042da:	481c      	ldr	r0, [pc, #112]	; (800434c <MX_TIM4_Init+0x114>)
 80042dc:	f00e fd06 	bl	8012cec <HAL_TIMEx_MasterConfigSynchronization>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80042e6:	f7ff f965 	bl	80035b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042ea:	2360      	movs	r3, #96	; 0x60
 80042ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042fa:	463b      	mov	r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	4619      	mov	r1, r3
 8004300:	4812      	ldr	r0, [pc, #72]	; (800434c <MX_TIM4_Init+0x114>)
 8004302:	f00d fed9 	bl	80120b8 <HAL_TIM_PWM_ConfigChannel>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800430c:	f7ff f952 	bl	80035b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004310:	463b      	mov	r3, r7
 8004312:	2204      	movs	r2, #4
 8004314:	4619      	mov	r1, r3
 8004316:	480d      	ldr	r0, [pc, #52]	; (800434c <MX_TIM4_Init+0x114>)
 8004318:	f00d fece 	bl	80120b8 <HAL_TIM_PWM_ConfigChannel>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8004322:	f7ff f947 	bl	80035b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004326:	463b      	mov	r3, r7
 8004328:	220c      	movs	r2, #12
 800432a:	4619      	mov	r1, r3
 800432c:	4807      	ldr	r0, [pc, #28]	; (800434c <MX_TIM4_Init+0x114>)
 800432e:	f00d fec3 	bl	80120b8 <HAL_TIM_PWM_ConfigChannel>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8004338:	f7ff f93c 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800433c:	4803      	ldr	r0, [pc, #12]	; (800434c <MX_TIM4_Init+0x114>)
 800433e:	f000 f8b1 	bl	80044a4 <HAL_TIM_MspPostInit>

}
 8004342:	bf00      	nop
 8004344:	3738      	adds	r7, #56	; 0x38
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20001c70 	.word	0x20001c70
 8004350:	40000800 	.word	0x40000800

08004354 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_TIM7_Init+0x64>)
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <MX_TIM7_Init+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <MX_TIM7_Init+0x64>)
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <MX_TIM7_Init+0x64>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <MX_TIM7_Init+0x64>)
 8004378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <MX_TIM7_Init+0x64>)
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004384:	480c      	ldr	r0, [pc, #48]	; (80043b8 <MX_TIM7_Init+0x64>)
 8004386:	f00d fde8 	bl	8011f5a <HAL_TIM_Base_Init>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004390:	f7ff f910 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004394:	2300      	movs	r3, #0
 8004396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4805      	ldr	r0, [pc, #20]	; (80043b8 <MX_TIM7_Init+0x64>)
 80043a2:	f00e fca3 	bl	8012cec <HAL_TIMEx_MasterConfigSynchronization>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80043ac:	f7ff f902 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20001cbc 	.word	0x20001cbc
 80043bc:	40001400 	.word	0x40001400

080043c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <HAL_TIM_PWM_MspInit+0x3c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_TIM_PWM_MspInit+0x40>)
 80043d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <HAL_TIM_PWM_MspInit+0x40>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <HAL_TIM_PWM_MspInit+0x40>)
 80043e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40010000 	.word	0x40010000
 8004400:	58024400 	.word	0x58024400

08004404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a20      	ldr	r2, [pc, #128]	; (8004494 <HAL_TIM_Base_MspInit+0x90>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10f      	bne.n	8004436 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 800441e:	f043 0302 	orr.w	r3, r3, #2
 8004422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004434:	e028      	b.n	8004488 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_TIM_Base_MspInit+0x98>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10f      	bne.n	8004460 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
}
 800445e:	e013      	b.n	8004488 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 800446c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004470:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 8004472:	f043 0320 	orr.w	r3, r3, #32
 8004476:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <HAL_TIM_Base_MspInit+0x94>)
 800447c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40000400 	.word	0x40000400
 8004498:	58024400 	.word	0x58024400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40001400 	.word	0x40001400

080044a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <HAL_TIM_MspPostInit+0x100>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d120      	bne.n	8004508 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 80044c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044cc:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044d6:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 80044d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	482a      	ldr	r0, [pc, #168]	; (80045ac <HAL_TIM_MspPostInit+0x108>)
 8004502:	f005 f821 	bl	8009548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004506:	e049      	b.n	800459c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <HAL_TIM_MspPostInit+0x10c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d11f      	bne.n	8004552 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004512:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 8004514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 8004524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004530:	2320      	movs	r3, #32
 8004532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004534:	2302      	movs	r3, #2
 8004536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004540:	2302      	movs	r3, #2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	4619      	mov	r1, r3
 800454a:	481a      	ldr	r0, [pc, #104]	; (80045b4 <HAL_TIM_MspPostInit+0x110>)
 800454c:	f004 fffc 	bl	8009548 <HAL_GPIO_Init>
}
 8004550:	e024      	b.n	800459c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_TIM_MspPostInit+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d11f      	bne.n	800459c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 800455e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004562:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <HAL_TIM_MspPostInit+0x104>)
 800456e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800457a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800458c:	2302      	movs	r3, #2
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	4807      	ldr	r0, [pc, #28]	; (80045b4 <HAL_TIM_MspPostInit+0x110>)
 8004598:	f004 ffd6 	bl	8009548 <HAL_GPIO_Init>
}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40010000 	.word	0x40010000
 80045a8:	58024400 	.word	0x58024400
 80045ac:	58020000 	.word	0x58020000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	58020400 	.word	0x58020400
 80045b8:	40000800 	.word	0x40000800

080045bc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <MX_USART6_UART_Init+0x94>)
 80045c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045e2:	2204      	movs	r2, #4
 80045e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <MX_USART6_UART_Init+0x90>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <MX_USART6_UART_Init+0x90>)
 8004600:	2200      	movs	r2, #0
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004604:	4811      	ldr	r0, [pc, #68]	; (800464c <MX_USART6_UART_Init+0x90>)
 8004606:	f00e fc7d 	bl	8012f04 <HAL_UART_Init>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004610:	f7fe ffd0 	bl	80035b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004614:	2100      	movs	r1, #0
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <MX_USART6_UART_Init+0x90>)
 8004618:	f00f fc7f 	bl	8013f1a <HAL_UARTEx_SetTxFifoThreshold>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004622:	f7fe ffc7 	bl	80035b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004626:	2100      	movs	r1, #0
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <MX_USART6_UART_Init+0x90>)
 800462a:	f00f fcb4 	bl	8013f96 <HAL_UARTEx_SetRxFifoThreshold>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004634:	f7fe ffbe 	bl	80035b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004638:	4804      	ldr	r0, [pc, #16]	; (800464c <MX_USART6_UART_Init+0x90>)
 800463a:	f00f fc35 	bl	8013ea8 <HAL_UARTEx_DisableFifoMode>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004644:	f7fe ffb6 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20001d08 	.word	0x20001d08
 8004650:	40011400 	.word	0x40011400

08004654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0bc      	sub	sp, #240	; 0xf0
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	22c0      	movs	r2, #192	; 0xc0
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f013 fa1d 	bl	8017ab4 <memset>
  if(uartHandle->Instance==USART6)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a39      	ldr	r2, [pc, #228]	; (8004764 <HAL_UART_MspInit+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d16a      	bne.n	800475a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004684:	f04f 0201 	mov.w	r2, #1
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004696:	f107 0318 	add.w	r3, r7, #24
 800469a:	4618      	mov	r0, r3
 800469c:	f008 faa6 	bl	800cbec <HAL_RCCEx_PeriphCLKConfig>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80046a6:	f7fe ff85 	bl	80035b4 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b0:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046b2:	f043 0320 	orr.w	r3, r3, #32
 80046b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046d0:	f043 0304 	orr.w	r3, r3, #4
 80046d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_UART_MspInit+0x114>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800471c:	2307      	movs	r3, #7
 800471e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004722:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004726:	4619      	mov	r1, r3
 8004728:	4810      	ldr	r0, [pc, #64]	; (800476c <HAL_UART_MspInit+0x118>)
 800472a:	f004 ff0d 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800472e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004748:	2307      	movs	r3, #7
 800474a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800474e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004752:	4619      	mov	r1, r3
 8004754:	4806      	ldr	r0, [pc, #24]	; (8004770 <HAL_UART_MspInit+0x11c>)
 8004756:	f004 fef7 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800475a:	bf00      	nop
 800475c:	37f0      	adds	r7, #240	; 0xf0
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40011400 	.word	0x40011400
 8004768:	58024400 	.word	0x58024400
 800476c:	58020800 	.word	0x58020800
 8004770:	58021800 	.word	0x58021800

08004774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004778:	2201      	movs	r2, #1
 800477a:	490f      	ldr	r1, [pc, #60]	; (80047b8 <MX_USB_HOST_Init+0x44>)
 800477c:	480f      	ldr	r0, [pc, #60]	; (80047bc <MX_USB_HOST_Init+0x48>)
 800477e:	f011 fb73 	bl	8015e68 <USBH_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8004788:	f7fe ff14 	bl	80035b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 800478c:	490c      	ldr	r1, [pc, #48]	; (80047c0 <MX_USB_HOST_Init+0x4c>)
 800478e:	480b      	ldr	r0, [pc, #44]	; (80047bc <MX_USB_HOST_Init+0x48>)
 8004790:	f011 fc19 	bl	8015fc6 <USBH_RegisterClass>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800479a:	f7fe ff0b 	bl	80035b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800479e:	4807      	ldr	r0, [pc, #28]	; (80047bc <MX_USB_HOST_Init+0x48>)
 80047a0:	f011 fc9e 	bl	80160e0 <USBH_Start>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80047aa:	f7fe ff03 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80047ae:	f007 fa27 	bl	800bc00 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	30000460 	.word	0x30000460
 80047c0:	20000020 	.word	0x20000020

080047c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80047c8:	4803      	ldr	r0, [pc, #12]	; (80047d8 <MX_USB_HOST_Process+0x14>)
 80047ca:	f011 fcb5 	bl	8016138 <USBH_Process>
  MIDI_Application();
 80047ce:	f7fc fdf5 	bl	80013bc <MIDI_Application>
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	30000460 	.word	0x30000460

080047dc <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d839      	bhi.n	8004864 <USBH_UserProcess+0x88>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <USBH_UserProcess+0x1c>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004865 	.word	0x08004865
 80047fc:	0800484f 	.word	0x0800484f
 8004800:	08004865 	.word	0x08004865
 8004804:	0800485d 	.word	0x0800485d
 8004808:	0800480d 	.word	0x0800480d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <USBH_UserProcess+0x94>)
 800480e:	2203      	movs	r2, #3
 8004810:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 8004812:	4818      	ldr	r0, [pc, #96]	; (8004874 <USBH_UserProcess+0x98>)
 8004814:	f011 fc74 	bl	8016100 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e007      	b.n	800482e <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <USBH_UserProcess+0x9c>)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b3f      	cmp	r3, #63	; 0x3f
 8004832:	ddf4      	ble.n	800481e <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8004834:	2201      	movs	r2, #1
 8004836:	4911      	ldr	r1, [pc, #68]	; (800487c <USBH_UserProcess+0xa0>)
 8004838:	480e      	ldr	r0, [pc, #56]	; (8004874 <USBH_UserProcess+0x98>)
 800483a:	f011 fb15 	bl	8015e68 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 800483e:	4910      	ldr	r1, [pc, #64]	; (8004880 <USBH_UserProcess+0xa4>)
 8004840:	480c      	ldr	r0, [pc, #48]	; (8004874 <USBH_UserProcess+0x98>)
 8004842:	f011 fbc0 	bl	8015fc6 <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 8004846:	480b      	ldr	r0, [pc, #44]	; (8004874 <USBH_UserProcess+0x98>)
 8004848:	f011 fc4a 	bl	80160e0 <USBH_Start>
	break;
 800484c:	e00b      	b.n	8004866 <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <USBH_UserProcess+0x94>)
 8004850:	2202      	movs	r2, #2
 8004852:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <USBH_UserProcess+0xa8>)
 8004856:	2202      	movs	r2, #2
 8004858:	701a      	strb	r2, [r3, #0]
  break;
 800485a:	e004      	b.n	8004866 <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <USBH_UserProcess+0x94>)
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
  break;
 8004862:	e000      	b.n	8004866 <USBH_UserProcess+0x8a>

  default:
  break;
 8004864:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20001d9c 	.word	0x20001d9c
 8004874:	30000460 	.word	0x30000460
 8004878:	30000000 	.word	0x30000000
 800487c:	080047dd 	.word	0x080047dd
 8004880:	20000020 	.word	0x20000020
 8004884:	20000000 	.word	0x20000000

08004888 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004890:	2302      	movs	r3, #2
 8004892:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8004898:	23ff      	movs	r3, #255	; 0xff
 800489a:	2203      	movs	r2, #3
 800489c:	2101      	movs	r1, #1
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f011 fbd8 	bl	8016054 <USBH_FindInterface>
 80048a4:	4603      	mov	r3, r0
 80048a6:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	2bff      	cmp	r3, #255	; 0xff
 80048ac:	d102      	bne.n	80048b4 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 80048ae:	2302      	movs	r3, #2
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e0f2      	b.n	8004a9a <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f011 fbaf 	bl	801601c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80048c4:	201c      	movs	r0, #28
 80048c6:	f013 f839 	bl	801793c <malloc>
 80048ca:	4603      	mov	r3, r0
 80048cc:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048de:	4619      	mov	r1, r3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	231a      	movs	r3, #26
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da1c      	bge.n	8004930 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80048fc:	4619      	mov	r1, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	231a      	movs	r3, #26
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004918:	4619      	mov	r1, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	231a      	movs	r3, #26
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	811a      	strh	r2, [r3, #8]
 800492e:	e01b      	b.n	8004968 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004936:	4619      	mov	r1, r3
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	231a      	movs	r3, #26
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004952:	4619      	mov	r1, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	231a      	movs	r3, #26
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800496e:	4619      	mov	r1, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	231a      	movs	r3, #26
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b25b      	sxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	da1c      	bge.n	80049c0 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800498c:	4619      	mov	r1, r3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	231a      	movs	r3, #26
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	f203 3356 	addw	r3, r3, #854	; 0x356
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80049a8:	4619      	mov	r1, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	231a      	movs	r3, #26
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80049b8:	881a      	ldrh	r2, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	811a      	strh	r2, [r3, #8]
 80049be:	e01b      	b.n	80049f8 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80049c6:	4619      	mov	r1, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	231a      	movs	r3, #26
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80049e2:	4619      	mov	r1, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	231a      	movs	r3, #26
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f012 fed9 	bl	80177b6 <USBH_AllocPipe>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f012 fecf 	bl	80177b6 <USBH_AllocPipe>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	7899      	ldrb	r1, [r3, #2]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	78d8      	ldrb	r0, [r3, #3]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	88d2      	ldrh	r2, [r2, #6]
 8004a38:	9202      	str	r2, [sp, #8]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	9201      	str	r2, [sp, #4]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4623      	mov	r3, r4
 8004a42:	4602      	mov	r2, r0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f012 fe87 	bl	8017758 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	7859      	ldrb	r1, [r3, #1]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	7918      	ldrb	r0, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	8912      	ldrh	r2, [r2, #8]
 8004a62:	9202      	str	r2, [sp, #8]
 8004a64:	2202      	movs	r2, #2
 8004a66:	9201      	str	r2, [sp, #4]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f012 fe72 	bl	8017758 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fbf6 	bl	8005274 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	789b      	ldrb	r3, [r3, #2]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fbef 	bl	8005274 <USBH_LL_SetToggle>
		status = USBH_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd90      	pop	{r4, r7, pc}

08004aa4 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	789b      	ldrb	r3, [r3, #2]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f012 fe66 	bl	8017796 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	789b      	ldrb	r3, [r3, #2]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f012 fe92 	bl	80177fa <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f012 fe53 	bl	8017796 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f012 fe7f 	bl	80177fa <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f012 ff18 	bl	801794c <free>
		phost->pActiveClass->pData = 0;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004b22:	2200      	movs	r2, #0
 8004b24:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8004b3e:	2102      	movs	r1, #2
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3

	return USBH_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b0b      	cmp	r3, #11
 8004b68:	d10e      	bne.n	8004b88 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f012 fe0d 	bl	8017796 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	789b      	ldrb	r3, [r3, #2]
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f012 fe07 	bl	8017796 <USBH_ClosePipe>
  }
  return USBH_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d012      	beq.n	8004bda <USBH_MIDI_Process+0x48>
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	dc1d      	bgt.n	8004bf4 <USBH_MIDI_Process+0x62>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <USBH_MIDI_Process+0x30>
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d003      	beq.n	8004bc8 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8004bc0:	e018      	b.n	8004bf4 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
		break;
 8004bc6:	e018      	b.n	8004bfa <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f851 	bl	8004c70 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8c0 	bl	8004d54 <MIDI_ProcessReception>
		status = USBH_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
		break;
 8004bd8:	e00f      	b.n	8004bfa <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f012 f837 	bl	8016c50 <USBH_ClrFeature>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
		break;
 8004bf2:	e001      	b.n	8004bf8 <USBH_MIDI_Process+0x66>
		break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <USBH_MIDI_Process+0x68>
		break;
 8004bf8:	bf00      	nop

	}

	return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <USBH_MIDI_Receive+0x2c>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10d      	bne.n	8004c62 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	7e1b      	ldrb	r3, [r3, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d002      	beq.n	8004c94 <MIDI_ProcessTransmission+0x24>
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d021      	beq.n	8004cd6 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8004c92:	e05a      	b.n	8004d4a <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8a9a      	ldrh	r2, [r3, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88db      	ldrh	r3, [r3, #6]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d90b      	bls.n	8004cb8 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68d9      	ldr	r1, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88da      	ldrh	r2, [r3, #6]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	789b      	ldrb	r3, [r3, #2]
 8004cac:	2001      	movs	r0, #1
 8004cae:	9000      	str	r0, [sp, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f012 fd0e 	bl	80176d2 <USBH_BulkSendData>
 8004cb6:	e00a      	b.n	8004cce <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8a9a      	ldrh	r2, [r3, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	789b      	ldrb	r3, [r3, #2]
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	9000      	str	r0, [sp, #0]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f012 fd02 	bl	80176d2 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	761a      	strb	r2, [r3, #24]
		break;
 8004cd4:	e039      	b.n	8004d4a <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	789b      	ldrb	r3, [r3, #2]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa9f 	bl	8005220 <USBH_LL_GetURBState>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d127      	bne.n	8004d3c <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8a9a      	ldrh	r2, [r3, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88db      	ldrh	r3, [r3, #6]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d90f      	bls.n	8004d18 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8a9a      	ldrh	r2, [r3, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88db      	ldrh	r3, [r3, #6]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	88d2      	ldrh	r2, [r2, #6]
 8004d10:	441a      	add	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e002      	b.n	8004d1e <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8a9b      	ldrh	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	761a      	strb	r2, [r3, #24]
		break;
 8004d2c:	e00c      	b.n	8004d48 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f86d 	bl	8004e14 <USBH_MIDI_TransmitCallback>
		break;
 8004d3a:	e005      	b.n	8004d48 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d102      	bne.n	8004d48 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	761a      	strb	r2, [r3, #24]
		break;
 8004d48:	bf00      	nop
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	7e5b      	ldrb	r3, [r3, #25]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d002      	beq.n	8004d78 <MIDI_ProcessReception+0x24>
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00d      	beq.n	8004d92 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8004d76:	e047      	b.n	8004e08 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6919      	ldr	r1, [r3, #16]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	891a      	ldrh	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f012 fcc6 	bl	801771c <USBH_BulkReceiveData>
		break;
 8004d90:	e03a      	b.n	8004e08 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa41 	bl	8005220 <USBH_LL_GetURBState>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d12e      	bne.n	8004e06 <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <MIDI_ProcessReception+0xbc>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f9a1 	bl	80050fc <USBH_LL_GetLastXferSize>
 8004dba:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	8adb      	ldrh	r3, [r3, #22]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d017      	beq.n	8004df8 <MIDI_ProcessReception+0xa4>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	891b      	ldrh	r3, [r3, #8]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d911      	bls.n	8004df8 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	8ada      	ldrh	r2, [r3, #22]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	441a      	add	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2203      	movs	r2, #3
 8004df4:	765a      	strb	r2, [r3, #25]
		break;
 8004df6:	e006      	b.n	8004e06 <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fc fc7b 	bl	80016fc <USBH_MIDI_ReceiveCallback>
		break;
 8004e06:	bf00      	nop
	}
}
 8004e08:	bf00      	nop
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20001da0 	.word	0x20001da0

08004e14 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_HCD_MspInit+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d146      	bne.n	8004ed8 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e76:	2303      	movs	r3, #3
 8004e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004e7a:	230a      	movs	r3, #10
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4619      	mov	r1, r3
 8004e84:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <HAL_HCD_MspInit+0xc0>)
 8004e86:	f004 fb5f 	bl	8009548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_HCD_MspInit+0xbc>)
 8004e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2106      	movs	r1, #6
 8004eac:	2062      	movs	r0, #98	; 0x62
 8004eae:	f002 f9b6 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004eb2:	2062      	movs	r0, #98	; 0x62
 8004eb4:	f002 f9cd 	bl	8007252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2106      	movs	r1, #6
 8004ebc:	2063      	movs	r0, #99	; 0x63
 8004ebe:	f002 f9ae 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8004ec2:	2063      	movs	r0, #99	; 0x63
 8004ec4:	f002 f9c5 	bl	8007252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	2065      	movs	r0, #101	; 0x65
 8004ece:	f002 f9a6 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004ed2:	2065      	movs	r0, #101	; 0x65
 8004ed4:	f002 f9bd 	bl	8007252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3728      	adds	r7, #40	; 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40080000 	.word	0x40080000
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	58020000 	.word	0x58020000

08004eec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004efa:	4618      	mov	r0, r3
 8004efc:	f011 fcfd 	bl	80168fa <USBH_LL_IncTimer>
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004f16:	4618      	mov	r0, r3
 8004f18:	f011 fd35 	bl	8016986 <USBH_LL_Connect>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004f32:	4618      	mov	r0, r3
 8004f34:	f011 fd3e 	bl	80169b4 <USBH_LL_Disconnect>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f011 fcef 	bl	801694e <USBH_LL_PortEnabled>
} 
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004f86:	4618      	mov	r0, r3
 8004f88:	f011 fcef 	bl	801696a <USBH_LL_PortDisabled>
} 
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d129      	bne.n	8004ffa <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <USBH_LL_Init+0x70>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a14      	ldr	r2, [pc, #80]	; (8005004 <USBH_LL_Init+0x70>)
 8004fb2:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <USBH_LL_Init+0x70>)
 8004fb8:	4a13      	ldr	r2, [pc, #76]	; (8005008 <USBH_LL_Init+0x74>)
 8004fba:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <USBH_LL_Init+0x70>)
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <USBH_LL_Init+0x70>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <USBH_LL_Init+0x70>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <USBH_LL_Init+0x70>)
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <USBH_LL_Init+0x70>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004fda:	480a      	ldr	r0, [pc, #40]	; (8005004 <USBH_LL_Init+0x70>)
 8004fdc:	f004 fc95 	bl	800990a <HAL_HCD_Init>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004fe6:	f7fe fae5 	bl	80035b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004fea:	4806      	ldr	r0, [pc, #24]	; (8005004 <USBH_LL_Init+0x70>)
 8004fec:	f005 f87d 	bl	800a0ea <HAL_HCD_GetCurrentFrame>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f011 fc71 	bl	80168dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20001da4 	.word	0x20001da4
 8005008:	40080000 	.word	0x40080000

0800500c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8005022:	4618      	mov	r0, r3
 8005024:	f004 ffeb 	bl	8009ffe <HAL_HCD_Start>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f95c 	bl	80052ec <USBH_Get_USB_Status>
 8005034:	4603      	mov	r3, r0
 8005036:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005038:	7bbb      	ldrb	r3, [r7, #14]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8005058:	4618      	mov	r0, r3
 800505a:	f004 fff3 	bl	800a044 <HAL_HCD_Stop>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f941 	bl	80052ec <USBH_Get_USB_Status>
 800506a:	4603      	mov	r3, r0
 800506c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800506e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800508a:	4618      	mov	r0, r3
 800508c:	f005 f83b 	bl	800a106 <HAL_HCD_GetCurrentSpeed>
 8005090:	4603      	mov	r3, r0
 8005092:	2b02      	cmp	r3, #2
 8005094:	d00c      	beq.n	80050b0 <USBH_LL_GetSpeed+0x38>
 8005096:	2b02      	cmp	r3, #2
 8005098:	d80d      	bhi.n	80050b6 <USBH_LL_GetSpeed+0x3e>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <USBH_LL_GetSpeed+0x2c>
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d003      	beq.n	80050aa <USBH_LL_GetSpeed+0x32>
 80050a2:	e008      	b.n	80050b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
    break;
 80050a8:	e008      	b.n	80050bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
    break;
 80050ae:	e005      	b.n	80050bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80050b0:	2302      	movs	r3, #2
 80050b2:	73fb      	strb	r3, [r7, #15]
    break;
 80050b4:	e002      	b.n	80050bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
    break;
 80050ba:	bf00      	nop
  }
  return  speed;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80050dc:	4618      	mov	r0, r3
 80050de:	f004 ffce 	bl	800a07e <HAL_HCD_ResetPort>
 80050e2:	4603      	mov	r3, r0
 80050e4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f8ff 	bl	80052ec <USBH_Get_USB_Status>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f004 ffd5 	bl	800a0c2 <HAL_HCD_HC_GetXferCount>
 8005118:	4603      	mov	r3, r0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005122:	b590      	push	{r4, r7, lr}
 8005124:	b089      	sub	sp, #36	; 0x24
 8005126:	af04      	add	r7, sp, #16
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	461a      	mov	r2, r3
 8005130:	4603      	mov	r3, r0
 8005132:	70fb      	strb	r3, [r7, #3]
 8005134:	460b      	mov	r3, r1
 8005136:	70bb      	strb	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800514a:	787c      	ldrb	r4, [r7, #1]
 800514c:	78ba      	ldrb	r2, [r7, #2]
 800514e:	78f9      	ldrb	r1, [r7, #3]
 8005150:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4623      	mov	r3, r4
 8005162:	f004 fc34 	bl	80099ce <HAL_HCD_HC_Init>
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f8bd 	bl	80052ec <USBH_Get_USB_Status>
 8005172:	4603      	mov	r3, r0
 8005174:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005176:	7bbb      	ldrb	r3, [r7, #14]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bd90      	pop	{r4, r7, pc}

08005180 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f004 fca4 	bl	8009aec <HAL_HCD_HC_Halt>
 80051a4:	4603      	mov	r3, r0
 80051a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f89e 	bl	80052ec <USBH_Get_USB_Status>
 80051b0:	4603      	mov	r3, r0
 80051b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80051be:	b590      	push	{r4, r7, lr}
 80051c0:	b089      	sub	sp, #36	; 0x24
 80051c2:	af04      	add	r7, sp, #16
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	4608      	mov	r0, r1
 80051c8:	4611      	mov	r1, r2
 80051ca:	461a      	mov	r2, r3
 80051cc:	4603      	mov	r3, r0
 80051ce:	70fb      	strb	r3, [r7, #3]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70bb      	strb	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 80051e6:	787c      	ldrb	r4, [r7, #1]
 80051e8:	78ba      	ldrb	r2, [r7, #2]
 80051ea:	78f9      	ldrb	r1, [r7, #3]
 80051ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051f0:	9303      	str	r3, [sp, #12]
 80051f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4623      	mov	r3, r4
 8005202:	f004 fc97 	bl	8009b34 <HAL_HCD_HC_SubmitRequest>
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f86d 	bl	80052ec <USBH_Get_USB_Status>
 8005212:	4603      	mov	r3, r0
 8005214:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005216:	7bbb      	ldrb	r3, [r7, #14]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bd90      	pop	{r4, r7, pc}

08005220 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f004 ff2f 	bl	800a09a <HAL_HCD_HC_GetURBState>
 800523c:	4603      	mov	r3, r0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	460b      	mov	r3, r1
 8005250:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d103      	bne.n	8005264 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f870 	bl	8005344 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005264:	20c8      	movs	r0, #200	; 0xc8
 8005266:	f000 f945 	bl	80054f4 <HAL_Delay>
  return USBH_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
 8005280:	4613      	mov	r3, r2
 8005282:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800528a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	333b      	adds	r3, #59	; 0x3b
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3354      	adds	r3, #84	; 0x54
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e008      	b.n	80052c6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	212c      	movs	r1, #44	; 0x2c
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	3355      	adds	r3, #85	; 0x55
 80052c2:	78ba      	ldrb	r2, [r7, #2]
 80052c4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f909 	bl	80054f4 <HAL_Delay>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d817      	bhi.n	8005330 <USBH_Get_USB_Status+0x44>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <USBH_Get_USB_Status+0x1c>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	0800531f 	.word	0x0800531f
 8005310:	08005325 	.word	0x08005325
 8005314:	0800532b 	.word	0x0800532b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
    break;
 800531c:	e00b      	b.n	8005336 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800531e:	2302      	movs	r3, #2
 8005320:	73fb      	strb	r3, [r7, #15]
    break;
 8005322:	e008      	b.n	8005336 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
    break;
 8005328:	e005      	b.n	8005336 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800532a:	2302      	movs	r3, #2
 800532c:	73fb      	strb	r3, [r7, #15]
    break;
 800532e:	e002      	b.n	8005336 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005330:	2302      	movs	r3, #2
 8005332:	73fb      	strb	r3, [r7, #15]
    break;
 8005334:	bf00      	nop
  }
  return usb_status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
 800535c:	e001      	b.n	8005362 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	461a      	mov	r2, r3
 8005366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800536a:	4803      	ldr	r0, [pc, #12]	; (8005378 <MX_DriverVbusFS+0x34>)
 800536c:	f004 fab4 	bl	80098d8 <HAL_GPIO_WritePin>
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	58020400 	.word	0x58020400

0800537c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800537c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005382:	e003      	b.n	800538c <LoopCopyDataInit>

08005384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800538a:	3104      	adds	r1, #4

0800538c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800538c:	480b      	ldr	r0, [pc, #44]	; (80053bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005394:	d3f6      	bcc.n	8005384 <CopyDataInit>
  ldr  r2, =_sbss
 8005396:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005398:	e002      	b.n	80053a0 <LoopFillZerobss>

0800539a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800539a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800539c:	f842 3b04 	str.w	r3, [r2], #4

080053a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053a4:	d3f9      	bcc.n	800539a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053a6:	f7fe fddd 	bl	8003f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053aa:	f012 fba1 	bl	8017af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053ae:	f7fd fe7f 	bl	80030b0 <main>
  bx  lr    
 80053b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80053b8:	08019b18 	.word	0x08019b18
  ldr  r0, =_sdata
 80053bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053c0:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80053c4:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80053c8:	20002200 	.word	0x20002200

080053cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053cc:	e7fe      	b.n	80053cc <ADC3_IRQHandler>
	...

080053d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053d6:	2003      	movs	r0, #3
 80053d8:	f001 ff16 	bl	8007208 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053dc:	f007 fa30 	bl	800c840 <HAL_RCC_GetSysClockFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <HAL_Init+0x68>)
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	4913      	ldr	r1, [pc, #76]	; (800543c <HAL_Init+0x6c>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
 80053f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_Init+0x68>)
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	4a0e      	ldr	r2, [pc, #56]	; (800543c <HAL_Init+0x6c>)
 8005404:	5cd3      	ldrb	r3, [r2, r3]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <HAL_Init+0x70>)
 8005412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005414:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <HAL_Init+0x74>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800541a:	2000      	movs	r0, #0
 800541c:	f000 f814 	bl	8005448 <HAL_InitTick>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e002      	b.n	8005430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800542a:	f7fe fce1 	bl	8003df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	58024400 	.word	0x58024400
 800543c:	0801820c 	.word	0x0801820c
 8005440:	2000001c 	.word	0x2000001c
 8005444:	20000018 	.word	0x20000018

08005448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005450:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <HAL_InitTick+0x60>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e021      	b.n	80054a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800545c:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_InitTick+0x64>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_InitTick+0x60>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800546a:	fbb3 f3f1 	udiv	r3, r3, r1
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	4618      	mov	r0, r3
 8005474:	f001 fefb 	bl	800726e <HAL_SYSTICK_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e00e      	b.n	80054a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b0f      	cmp	r3, #15
 8005486:	d80a      	bhi.n	800549e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005488:	2200      	movs	r2, #0
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005490:	f001 fec5 	bl	800721e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005494:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <HAL_InitTick+0x68>)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000044 	.word	0x20000044
 80054ac:	20000018 	.word	0x20000018
 80054b0:	20000040 	.word	0x20000040

080054b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_IncTick+0x20>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_IncTick+0x24>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4413      	add	r3, r2
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_IncTick+0x24>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000044 	.word	0x20000044
 80054d8:	200020a8 	.word	0x200020a8

080054dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return uwTick;
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <HAL_GetTick+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	200020a8 	.word	0x200020a8

080054f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054fc:	f7ff ffee 	bl	80054dc <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550c:	d005      	beq.n	800551a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_Delay+0x44>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800551a:	bf00      	nop
 800551c:	f7ff ffde 	bl	80054dc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	429a      	cmp	r2, r3
 800552a:	d8f7      	bhi.n	800551c <HAL_Delay+0x28>
  {
  }
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000044 	.word	0x20000044

0800553c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005540:	4b03      	ldr	r3, [pc, #12]	; (8005550 <HAL_GetREVID+0x14>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0c1b      	lsrs	r3, r3, #16
}
 8005546:	4618      	mov	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	5c001000 	.word	0x5c001000

08005554 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_SetFMCMemorySwappingConfig+0x24>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005564:	4904      	ldr	r1, [pc, #16]	; (8005578 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	52004000 	.word	0x52004000

0800557c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3360      	adds	r3, #96	; 0x60
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	430b      	orrs	r3, r1
 8005612:	431a      	orrs	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	611a      	str	r2, [r3, #16]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3360      	adds	r3, #96	; 0x60
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	431a      	orrs	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	601a      	str	r2, [r3, #0]
  }
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3330      	adds	r3, #48	; 0x30
 80056c2:	461a      	mov	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	4413      	add	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	211f      	movs	r1, #31
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	401a      	ands	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	f003 011f 	and.w	r1, r3, #31
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f023 0203 	bic.w	r2, r3, #3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3314      	adds	r3, #20
 8005766:	461a      	mov	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	0e5b      	lsrs	r3, r3, #25
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	4413      	add	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0d1b      	lsrs	r3, r3, #20
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2107      	movs	r1, #7
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	0d1b      	lsrs	r3, r3, #20
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	431a      	orrs	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f003 0318 	and.w	r3, r3, #24
 80057ce:	4908      	ldr	r1, [pc, #32]	; (80057f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80057d0:	40d9      	lsrs	r1, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	400b      	ands	r3, r1
 80057d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057da:	431a      	orrs	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	000fffff 	.word	0x000fffff

080057f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 031f 	and.w	r3, r3, #31
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <LL_ADC_DisableDeepPowerDown+0x20>)
 800583a:	4013      	ands	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6093      	str	r3, [r2, #8]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	5fffffc0 	.word	0x5fffffc0

08005850 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005864:	d101      	bne.n	800586a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <LL_ADC_EnableInternalRegulator+0x24>)
 8005886:	4013      	ands	r3, r2
 8005888:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	6fffffc0 	.word	0x6fffffc0

080058a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b4:	d101      	bne.n	80058ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <LL_ADC_Enable+0x24>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	f043 0201 	orr.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	7fffffc0 	.word	0x7fffffc0

080058f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <LL_ADC_IsEnabled+0x18>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <LL_ADC_IsEnabled+0x1a>
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <LL_ADC_REG_StartConversion+0x24>)
 8005926:	4013      	ands	r3, r2
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	7fffffc0 	.word	0x7fffffc0

08005940 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b04      	cmp	r3, #4
 8005952:	d101      	bne.n	8005958 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b08      	cmp	r3, #8
 8005978:	d101      	bne.n	800597e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b089      	sub	sp, #36	; 0x24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e18f      	b.n	8005cc6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fc f871 	bl	8001a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff3f 	bl	8005850 <LL_ADC_IsDeepPowerDownEnabled>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff25 	bl	800582c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff ff5a 	bl	80058a0 <LL_ADC_IsInternalRegulatorEnabled>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d114      	bne.n	8005a1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ff3e 	bl	8005878 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059fc:	4b87      	ldr	r3, [pc, #540]	; (8005c1c <HAL_ADC_Init+0x290>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	4a87      	ldr	r2, [pc, #540]	; (8005c20 <HAL_ADC_Init+0x294>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a0e:	e002      	b.n	8005a16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f9      	bne.n	8005a10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff3d 	bl	80058a0 <LL_ADC_IsInternalRegulatorEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	f043 0210 	orr.w	r2, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff77 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 8005a52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8129 	bne.w	8005cb4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 8125 	bne.w	8005cb4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a72:	f043 0202 	orr.w	r2, r3, #2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ff36 	bl	80058f0 <LL_ADC_IsEnabled>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d136      	bne.n	8005af8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <HAL_ADC_Init+0x298>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_ADC_Init+0x112>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a63      	ldr	r2, [pc, #396]	; (8005c28 <HAL_ADC_Init+0x29c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10e      	bne.n	8005abc <HAL_ADC_Init+0x130>
 8005a9e:	4861      	ldr	r0, [pc, #388]	; (8005c24 <HAL_ADC_Init+0x298>)
 8005aa0:	f7ff ff26 	bl	80058f0 <LL_ADC_IsEnabled>
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4860      	ldr	r0, [pc, #384]	; (8005c28 <HAL_ADC_Init+0x29c>)
 8005aa8:	f7ff ff22 	bl	80058f0 <LL_ADC_IsEnabled>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4323      	orrs	r3, r4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e008      	b.n	8005ace <HAL_ADC_Init+0x142>
 8005abc:	485b      	ldr	r0, [pc, #364]	; (8005c2c <HAL_ADC_Init+0x2a0>)
 8005abe:	f7ff ff17 	bl	80058f0 <LL_ADC_IsEnabled>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a53      	ldr	r2, [pc, #332]	; (8005c24 <HAL_ADC_Init+0x298>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_ADC_Init+0x15a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a51      	ldr	r2, [pc, #324]	; (8005c28 <HAL_ADC_Init+0x29c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <HAL_ADC_Init+0x15e>
 8005ae6:	4a52      	ldr	r2, [pc, #328]	; (8005c30 <HAL_ADC_Init+0x2a4>)
 8005ae8:	e000      	b.n	8005aec <HAL_ADC_Init+0x160>
 8005aea:	4a52      	ldr	r2, [pc, #328]	; (8005c34 <HAL_ADC_Init+0x2a8>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f7ff fd42 	bl	800557c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005af8:	f7ff fd20 	bl	800553c <HAL_GetREVID>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d914      	bls.n	8005b30 <HAL_ADC_Init+0x1a4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d110      	bne.n	8005b30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7d5b      	ldrb	r3, [r3, #21]
 8005b12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005b1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7f1b      	ldrb	r3, [r3, #28]
 8005b24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005b26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b28:	f043 030c 	orr.w	r3, r3, #12
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e00d      	b.n	8005b4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7d5b      	ldrb	r3, [r3, #21]
 8005b34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005b40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7f1b      	ldrb	r3, [r3, #28]
 8005b46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7f1b      	ldrb	r3, [r3, #28]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	045b      	lsls	r3, r3, #17
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <HAL_ADC_Init+0x2ac>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	69b9      	ldr	r1, [r7, #24]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fed2 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 8005b9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fedf 	bl	8005966 <LL_ADC_INJ_IsConversionOngoing>
 8005ba8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15f      	bne.n	8005c70 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d15c      	bne.n	8005c70 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7d1b      	ldrb	r3, [r3, #20]
 8005bba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <HAL_ADC_Init+0x2b0>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d130      	bne.n	8005c44 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_ADC_Init+0x2b4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	0411      	lsls	r1, r2, #16
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c04:	4311      	orrs	r1, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	611a      	str	r2, [r3, #16]
 8005c18:	e01c      	b.n	8005c54 <HAL_ADC_Init+0x2c8>
 8005c1a:	bf00      	nop
 8005c1c:	20000018 	.word	0x20000018
 8005c20:	053e2d63 	.word	0x053e2d63
 8005c24:	40022000 	.word	0x40022000
 8005c28:	40022100 	.word	0x40022100
 8005c2c:	58026000 	.word	0x58026000
 8005c30:	40022300 	.word	0x40022300
 8005c34:	58026300 	.word	0x58026300
 8005c38:	fff0c003 	.word	0xfff0c003
 8005c3c:	ffffbffc 	.word	0xffffbffc
 8005c40:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 ffba 	bl	8006be4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10c      	bne.n	8005c92 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f023 010f 	bic.w	r1, r3, #15
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c90:	e007      	b.n	8005ca2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 020f 	bic.w	r2, r2, #15
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	f043 0201 	orr.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
 8005cb2:	e007      	b.n	8005cc4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	f043 0210 	orr.w	r2, r3, #16
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3724      	adds	r7, #36	; 0x24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}
 8005cce:	bf00      	nop

08005cd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a55      	ldr	r2, [pc, #340]	; (8005e38 <HAL_ADC_Start_DMA+0x168>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_ADC_Start_DMA+0x20>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a54      	ldr	r2, [pc, #336]	; (8005e3c <HAL_ADC_Start_DMA+0x16c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_ADC_Start_DMA+0x24>
 8005cf0:	4b53      	ldr	r3, [pc, #332]	; (8005e40 <HAL_ADC_Start_DMA+0x170>)
 8005cf2:	e000      	b.n	8005cf6 <HAL_ADC_Start_DMA+0x26>
 8005cf4:	4b53      	ldr	r3, [pc, #332]	; (8005e44 <HAL_ADC_Start_DMA+0x174>)
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fd7c 	bl	80057f4 <LL_ADC_GetMultimode>
 8005cfc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fe1c 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 808c 	bne.w	8005e28 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_ADC_Start_DMA+0x4e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e087      	b.n	8005e2e <HAL_ADC_Start_DMA+0x15e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d002      	beq.n	8005d38 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b09      	cmp	r3, #9
 8005d36:	d170      	bne.n	8005e1a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fe35 	bl	80069a8 <ADC_Enable>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d163      	bne.n	8005e10 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_ADC_Start_DMA+0x178>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a37      	ldr	r2, [pc, #220]	; (8005e3c <HAL_ADC_Start_DMA+0x16c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d002      	beq.n	8005d68 <HAL_ADC_Start_DMA+0x98>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	e000      	b.n	8005d6a <HAL_ADC_Start_DMA+0x9a>
 8005d68:	4b33      	ldr	r3, [pc, #204]	; (8005e38 <HAL_ADC_Start_DMA+0x168>)
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d002      	beq.n	8005d78 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	f023 0206 	bic.w	r2, r3, #6
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d9c:	e002      	b.n	8005da4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <HAL_ADC_Start_DMA+0x17c>)
 8005daa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db0:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <HAL_ADC_Start_DMA+0x180>)
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <HAL_ADC_Start_DMA+0x184>)
 8005dba:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	221c      	movs	r2, #28
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0210 	orr.w	r2, r2, #16
 8005dda:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7ff fc8f 	bl	800570a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3340      	adds	r3, #64	; 0x40
 8005df6:	4619      	mov	r1, r3
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f001 fe1c 	bl	8007a38 <HAL_DMA_Start_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fd85 	bl	8005918 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005e0e:	e00d      	b.n	8005e2c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005e18:	e008      	b.n	8005e2c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005e26:	e001      	b.n	8005e2c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40022000 	.word	0x40022000
 8005e3c:	40022100 	.word	0x40022100
 8005e40:	40022300 	.word	0x40022300
 8005e44:	58026300 	.word	0x58026300
 8005e48:	fffff0fe 	.word	0xfffff0fe
 8005e4c:	08006abd 	.word	0x08006abd
 8005e50:	08006b95 	.word	0x08006b95
 8005e54:	08006bb1 	.word	0x08006bb1

08005e58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a87      	ldr	r2, [pc, #540]	; (8006098 <HAL_ADC_IRQHandler+0x240>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_ADC_IRQHandler+0x30>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a86      	ldr	r2, [pc, #536]	; (800609c <HAL_ADC_IRQHandler+0x244>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d101      	bne.n	8005e8c <HAL_ADC_IRQHandler+0x34>
 8005e88:	4b85      	ldr	r3, [pc, #532]	; (80060a0 <HAL_ADC_IRQHandler+0x248>)
 8005e8a:	e000      	b.n	8005e8e <HAL_ADC_IRQHandler+0x36>
 8005e8c:	4b85      	ldr	r3, [pc, #532]	; (80060a4 <HAL_ADC_IRQHandler+0x24c>)
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fcb0 	bl	80057f4 <LL_ADC_GetMultimode>
 8005e94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x78>
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d012      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 ffe8 	bl	8006e98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_ADC_IRQHandler+0x8c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8083 	beq.w	8005ff6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d07d      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fbb8 	bl	800568c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d062      	beq.n	8005fe8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5d      	ldr	r2, [pc, #372]	; (800609c <HAL_ADC_IRQHandler+0x244>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d002      	beq.n	8005f32 <HAL_ADC_IRQHandler+0xda>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	e000      	b.n	8005f34 <HAL_ADC_IRQHandler+0xdc>
 8005f32:	4b59      	ldr	r3, [pc, #356]	; (8006098 <HAL_ADC_IRQHandler+0x240>)
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d008      	beq.n	8005f4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b05      	cmp	r3, #5
 8005f46:	d002      	beq.n	8005f4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d104      	bne.n	8005f58 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	e00c      	b.n	8005f72 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4f      	ldr	r2, [pc, #316]	; (800609c <HAL_ADC_IRQHandler+0x244>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d002      	beq.n	8005f68 <HAL_ADC_IRQHandler+0x110>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	e000      	b.n	8005f6a <HAL_ADC_IRQHandler+0x112>
 8005f68:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <HAL_ADC_IRQHandler+0x240>)
 8005f6a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d135      	bne.n	8005fe8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d12e      	bne.n	8005fe8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fcd6 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11a      	bne.n	8005fd0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 020c 	bic.w	r2, r2, #12
 8005fa8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	f043 0201 	orr.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8005fce:	e00b      	b.n	8005fe8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f043 0210 	orr.w	r2, r3, #16
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe0:	f043 0201 	orr.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fd fa13 	bl	8003414 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	220c      	movs	r2, #12
 8005ff4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_ADC_IRQHandler+0x1b2>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a0 	beq.w	8006156 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 809a 	beq.w	8006156 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fb76 	bl	8005730 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006044:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fb1e 	bl	800568c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006050:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <HAL_ADC_IRQHandler+0x244>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d002      	beq.n	8006062 <HAL_ADC_IRQHandler+0x20a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	e000      	b.n	8006064 <HAL_ADC_IRQHandler+0x20c>
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <HAL_ADC_IRQHandler+0x240>)
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4293      	cmp	r3, r2
 800606a:	d008      	beq.n	800607e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d002      	beq.n	800607e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b07      	cmp	r3, #7
 800607c:	d104      	bne.n	8006088 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	e014      	b.n	80060b2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a03      	ldr	r2, [pc, #12]	; (800609c <HAL_ADC_IRQHandler+0x244>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00a      	beq.n	80060a8 <HAL_ADC_IRQHandler+0x250>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	e008      	b.n	80060aa <HAL_ADC_IRQHandler+0x252>
 8006098:	40022000 	.word	0x40022000
 800609c:	40022100 	.word	0x40022100
 80060a0:	40022300 	.word	0x40022300
 80060a4:	58026300 	.word	0x58026300
 80060a8:	4b84      	ldr	r3, [pc, #528]	; (80062bc <HAL_ADC_IRQHandler+0x464>)
 80060aa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d047      	beq.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_ADC_IRQHandler+0x27a>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03f      	beq.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d13a      	bne.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d133      	bne.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d12e      	bne.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fc39 	bl	8005966 <LL_ADC_INJ_IsConversionOngoing>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11a      	bne.n	8006130 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006108:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d112      	bne.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	f043 0201 	orr.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
 800612e:	e00b      	b.n	8006148 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	f043 0210 	orr.w	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fe7d 	bl	8006e48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2260      	movs	r2, #96	; 0x60
 8006154:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615c:	2b00      	cmp	r3, #0
 800615e:	d011      	beq.n	8006184 <HAL_ADC_IRQHandler+0x32c>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8b2 	bl	80062e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2280      	movs	r2, #128	; 0x80
 8006182:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d012      	beq.n	80061b4 <HAL_ADC_IRQHandler+0x35c>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fe63 	bl	8006e70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d012      	beq.n	80061e4 <HAL_ADC_IRQHandler+0x38c>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fe55 	bl	8006e84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d043      	beq.n	8006276 <HAL_ADC_IRQHandler+0x41e>
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d03e      	beq.n	8006276 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8006200:	2301      	movs	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
 8006204:	e021      	b.n	800624a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d015      	beq.n	8006238 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2a      	ldr	r2, [pc, #168]	; (80062bc <HAL_ADC_IRQHandler+0x464>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_ADC_IRQHandler+0x3c8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a29      	ldr	r2, [pc, #164]	; (80062c0 <HAL_ADC_IRQHandler+0x468>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <HAL_ADC_IRQHandler+0x3cc>
 8006220:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <HAL_ADC_IRQHandler+0x46c>)
 8006222:	e000      	b.n	8006226 <HAL_ADC_IRQHandler+0x3ce>
 8006224:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <HAL_ADC_IRQHandler+0x470>)
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff faf2 	bl	8005810 <LL_ADC_GetMultiDMATransfer>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8006232:	2301      	movs	r3, #1
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
 8006236:	e008      	b.n	800624a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8006246:	2301      	movs	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10e      	bne.n	800626e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006260:	f043 0202 	orr.w	r2, r3, #2
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f843 	bl	80062f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2210      	movs	r2, #16
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627c:	2b00      	cmp	r3, #0
 800627e:	d018      	beq.n	80062b2 <HAL_ADC_IRQHandler+0x45a>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006286:	2b00      	cmp	r3, #0
 8006288:	d013      	beq.n	80062b2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f043 0208 	orr.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fdd5 	bl	8006e5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80062b2:	bf00      	nop
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40022000 	.word	0x40022000
 80062c0:	40022100 	.word	0x40022100
 80062c4:	40022300 	.word	0x40022300
 80062c8:	58026300 	.word	0x58026300

080062cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b0a1      	sub	sp, #132	; 0x84
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a9d      	ldr	r2, [pc, #628]	; (8006598 <HAL_ADC_ConfigChannel+0x290>)
 8006322:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x2a>
 800632e:	2302      	movs	r3, #2
 8006330:	e321      	b.n	8006976 <HAL_ADC_ConfigChannel+0x66e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fafe 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	f040 8306 	bne.w	8006958 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <HAL_ADC_ConfigChannel+0x62>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0e9b      	lsrs	r3, r3, #26
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2201      	movs	r2, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	e016      	b.n	8006398 <HAL_ADC_ConfigChannel+0x90>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006372:	fa93 f3a3 	rbit	r3, r3
 8006376:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800637a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800637c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8006382:	2320      	movs	r3, #32
 8006384:	e003      	b.n	800638e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8006386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006388:	fab3 f383 	clz	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2201      	movs	r2, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	69d1      	ldr	r1, [r2, #28]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	430b      	orrs	r3, r1
 80063a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7ff f97d 	bl	80056b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fabf 	bl	8005940 <LL_ADC_REG_IsConversionOngoing>
 80063c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff facc 	bl	8005966 <LL_ADC_INJ_IsConversionOngoing>
 80063ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80063d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 80b3 	bne.w	800653e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80063d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 80af 	bne.w	800653e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	461a      	mov	r2, r3
 80063ee:	f7ff f9b2 	bl	8005756 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063f2:	4b6a      	ldr	r3, [pc, #424]	; (800659c <HAL_ADC_ConfigChannel+0x294>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d10b      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x110>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	e01d      	b.n	8006454 <HAL_ADC_ConfigChannel+0x14c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_ADC_ConfigChannel+0x136>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	e00a      	b.n	8006454 <HAL_ADC_ConfigChannel+0x14c>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b04      	cmp	r3, #4
 800645c:	d027      	beq.n	80064ae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6919      	ldr	r1, [r3, #16]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800646c:	f7ff f8ba 	bl	80055e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6919      	ldr	r1, [r3, #16]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	7e5b      	ldrb	r3, [r3, #25]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d102      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x17e>
 8006480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006484:	e000      	b.n	8006488 <HAL_ADC_ConfigChannel+0x180>
 8006486:	2300      	movs	r3, #0
 8006488:	461a      	mov	r2, r3
 800648a:	f7ff f8e4 	bl	8005656 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	7e1b      	ldrb	r3, [r3, #24]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x19c>
 800649e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064a2:	e000      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x19e>
 80064a4:	2300      	movs	r3, #0
 80064a6:	461a      	mov	r2, r3
 80064a8:	f7ff f8bc 	bl	8005624 <LL_ADC_SetDataRightShift>
 80064ac:	e047      	b.n	800653e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	069b      	lsls	r3, r3, #26
 80064be:	429a      	cmp	r2, r3
 80064c0:	d107      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	069b      	lsls	r3, r3, #26
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d107      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	069b      	lsls	r3, r3, #26
 8006506:	429a      	cmp	r2, r3
 8006508:	d107      	bne.n	800651a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006518:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006520:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	069b      	lsls	r3, r3, #26
 800652a:	429a      	cmp	r2, r3
 800652c:	d107      	bne.n	800653e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800653c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff f9d4 	bl	80058f0 <LL_ADC_IsEnabled>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 820d 	bne.w	800696a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	461a      	mov	r2, r3
 800655e:	f7ff f925 	bl	80057ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <HAL_ADC_ConfigChannel+0x290>)
 8006568:	4293      	cmp	r3, r2
 800656a:	f040 8133 	bne.w	80067d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800657a:	2b00      	cmp	r3, #0
 800657c:	d110      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x298>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	0e9b      	lsrs	r3, r3, #26
 8006584:	3301      	adds	r3, #1
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	2b09      	cmp	r3, #9
 800658c:	bf94      	ite	ls
 800658e:	2301      	movls	r3, #1
 8006590:	2300      	movhi	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e01e      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x2cc>
 8006596:	bf00      	nop
 8006598:	47ff0000 	.word	0x47ff0000
 800659c:	5c001000 	.word	0x5c001000
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80065ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80065b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80065b8:	2320      	movs	r3, #32
 80065ba:	e003      	b.n	80065c4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80065bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065be:	fab3 f383 	clz	r3, r3
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	3301      	adds	r3, #1
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2b09      	cmp	r3, #9
 80065cc:	bf94      	ite	ls
 80065ce:	2301      	movls	r3, #1
 80065d0:	2300      	movhi	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d079      	beq.n	80066cc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d107      	bne.n	80065f4 <HAL_ADC_ConfigChannel+0x2ec>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0e9b      	lsrs	r3, r3, #26
 80065ea:	3301      	adds	r3, #1
 80065ec:	069b      	lsls	r3, r3, #26
 80065ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065f2:	e015      	b.n	8006620 <HAL_ADC_ConfigChannel+0x318>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	fa93 f3a3 	rbit	r3, r3
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006604:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800660c:	2320      	movs	r3, #32
 800660e:	e003      	b.n	8006618 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006612:	fab3 f383 	clz	r3, r3
 8006616:	b2db      	uxtb	r3, r3
 8006618:	3301      	adds	r3, #1
 800661a:	069b      	lsls	r3, r3, #26
 800661c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x338>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	0e9b      	lsrs	r3, r3, #26
 8006632:	3301      	adds	r3, #1
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	e017      	b.n	8006670 <HAL_ADC_ConfigChannel+0x368>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006648:	fa93 f3a3 	rbit	r3, r3
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006658:	2320      	movs	r3, #32
 800665a:	e003      	b.n	8006664 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	fab3 f383 	clz	r3, r3
 8006662:	b2db      	uxtb	r3, r3
 8006664:	3301      	adds	r3, #1
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	ea42 0103 	orr.w	r1, r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <HAL_ADC_ConfigChannel+0x38e>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	0e9b      	lsrs	r3, r3, #26
 8006686:	3301      	adds	r3, #1
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	4613      	mov	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4413      	add	r3, r2
 8006692:	051b      	lsls	r3, r3, #20
 8006694:	e018      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x3c0>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	fa93 f3a3 	rbit	r3, r3
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80066ae:	2320      	movs	r3, #32
 80066b0:	e003      	b.n	80066ba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	fab3 f383 	clz	r3, r3
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	3301      	adds	r3, #1
 80066bc:	f003 021f 	and.w	r2, r3, #31
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066c8:	430b      	orrs	r3, r1
 80066ca:	e07e      	b.n	80067ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d107      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x3e0>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	0e9b      	lsrs	r3, r3, #26
 80066de:	3301      	adds	r3, #1
 80066e0:	069b      	lsls	r3, r3, #26
 80066e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066e6:	e015      	b.n	8006714 <HAL_ADC_ConfigChannel+0x40c>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	fa93 f3a3 	rbit	r3, r3
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006700:	2320      	movs	r3, #32
 8006702:	e003      	b.n	800670c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	3301      	adds	r3, #1
 800670e:	069b      	lsls	r3, r3, #26
 8006710:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_ADC_ConfigChannel+0x42c>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	0e9b      	lsrs	r3, r3, #26
 8006726:	3301      	adds	r3, #1
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	e017      	b.n	8006764 <HAL_ADC_ConfigChannel+0x45c>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	fa93 f3a3 	rbit	r3, r3
 8006740:	61bb      	str	r3, [r7, #24]
  return result;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800674c:	2320      	movs	r3, #32
 800674e:	e003      	b.n	8006758 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	fab3 f383 	clz	r3, r3
 8006756:	b2db      	uxtb	r3, r3
 8006758:	3301      	adds	r3, #1
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2101      	movs	r1, #1
 8006760:	fa01 f303 	lsl.w	r3, r1, r3
 8006764:	ea42 0103 	orr.w	r1, r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10d      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x488>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	0e9b      	lsrs	r3, r3, #26
 800677a:	3301      	adds	r3, #1
 800677c:	f003 021f 	and.w	r2, r3, #31
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	3b1e      	subs	r3, #30
 8006788:	051b      	lsls	r3, r3, #20
 800678a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800678e:	e01b      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x4c0>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	60fb      	str	r3, [r7, #12]
  return result;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80067a8:	2320      	movs	r3, #32
 80067aa:	e003      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f003 021f 	and.w	r2, r3, #31
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	3b1e      	subs	r3, #30
 80067c2:	051b      	lsls	r3, r3, #20
 80067c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067c8:	430b      	orrs	r3, r1
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	4619      	mov	r1, r3
 80067d0:	f7fe ffc1 	bl	8005756 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f280 80c6 	bge.w	800696a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a67      	ldr	r2, [pc, #412]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_ADC_ConfigChannel+0x4ea>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a65      	ldr	r2, [pc, #404]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_ADC_ConfigChannel+0x4ee>
 80067f2:	4b65      	ldr	r3, [pc, #404]	; (8006988 <HAL_ADC_ConfigChannel+0x680>)
 80067f4:	e000      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x4f0>
 80067f6:	4b65      	ldr	r3, [pc, #404]	; (800698c <HAL_ADC_ConfigChannel+0x684>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fee5 	bl	80055c8 <LL_ADC_GetCommonPathInternalCh>
 80067fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5e      	ldr	r2, [pc, #376]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_ADC_ConfigChannel+0x50c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5d      	ldr	r2, [pc, #372]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d10e      	bne.n	8006832 <HAL_ADC_ConfigChannel+0x52a>
 8006814:	485a      	ldr	r0, [pc, #360]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 8006816:	f7ff f86b 	bl	80058f0 <LL_ADC_IsEnabled>
 800681a:	4604      	mov	r4, r0
 800681c:	4859      	ldr	r0, [pc, #356]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 800681e:	f7ff f867 	bl	80058f0 <LL_ADC_IsEnabled>
 8006822:	4603      	mov	r3, r0
 8006824:	4323      	orrs	r3, r4
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	e008      	b.n	8006844 <HAL_ADC_ConfigChannel+0x53c>
 8006832:	4857      	ldr	r0, [pc, #348]	; (8006990 <HAL_ADC_ConfigChannel+0x688>)
 8006834:	f7ff f85c 	bl	80058f0 <LL_ADC_IsEnabled>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d07d      	beq.n	8006944 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a51      	ldr	r2, [pc, #324]	; (8006994 <HAL_ADC_ConfigChannel+0x68c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d130      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x5ac>
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d12b      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4b      	ldr	r2, [pc, #300]	; (8006990 <HAL_ADC_ConfigChannel+0x688>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 8081 	bne.w	800696a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a44      	ldr	r2, [pc, #272]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_ADC_ConfigChannel+0x574>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a43      	ldr	r2, [pc, #268]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x578>
 800687c:	4a42      	ldr	r2, [pc, #264]	; (8006988 <HAL_ADC_ConfigChannel+0x680>)
 800687e:	e000      	b.n	8006882 <HAL_ADC_ConfigChannel+0x57a>
 8006880:	4a42      	ldr	r2, [pc, #264]	; (800698c <HAL_ADC_ConfigChannel+0x684>)
 8006882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe fe89 	bl	80055a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006890:	4b41      	ldr	r3, [pc, #260]	; (8006998 <HAL_ADC_ConfigChannel+0x690>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	4a41      	ldr	r2, [pc, #260]	; (800699c <HAL_ADC_ConfigChannel+0x694>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	099b      	lsrs	r3, r3, #6
 800689e:	3301      	adds	r3, #1
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80068a4:	e002      	b.n	80068ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f9      	bne.n	80068a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068b2:	e05a      	b.n	800696a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a39      	ldr	r2, [pc, #228]	; (80069a0 <HAL_ADC_ConfigChannel+0x698>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d11e      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x5f4>
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d119      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a30      	ldr	r2, [pc, #192]	; (8006990 <HAL_ADC_ConfigChannel+0x688>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d14b      	bne.n	800696a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_ADC_ConfigChannel+0x5de>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a28      	ldr	r2, [pc, #160]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x5e2>
 80068e6:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_ADC_ConfigChannel+0x680>)
 80068e8:	e000      	b.n	80068ec <HAL_ADC_ConfigChannel+0x5e4>
 80068ea:	4a28      	ldr	r2, [pc, #160]	; (800698c <HAL_ADC_ConfigChannel+0x684>)
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7fe fe54 	bl	80055a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068fa:	e036      	b.n	800696a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a28      	ldr	r2, [pc, #160]	; (80069a4 <HAL_ADC_ConfigChannel+0x69c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d131      	bne.n	800696a <HAL_ADC_ConfigChannel+0x662>
 8006906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d12c      	bne.n	800696a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_ADC_ConfigChannel+0x688>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d127      	bne.n	800696a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_ADC_ConfigChannel+0x678>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_ADC_ConfigChannel+0x626>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a16      	ldr	r2, [pc, #88]	; (8006984 <HAL_ADC_ConfigChannel+0x67c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d101      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x62a>
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <HAL_ADC_ConfigChannel+0x680>)
 8006930:	e000      	b.n	8006934 <HAL_ADC_ConfigChannel+0x62c>
 8006932:	4a16      	ldr	r2, [pc, #88]	; (800698c <HAL_ADC_ConfigChannel+0x684>)
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe fe30 	bl	80055a2 <LL_ADC_SetCommonPathInternalCh>
 8006942:	e012      	b.n	800696a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006956:	e008      	b.n	800696a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006972:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006976:	4618      	mov	r0, r3
 8006978:	3784      	adds	r7, #132	; 0x84
 800697a:	46bd      	mov	sp, r7
 800697c:	bd90      	pop	{r4, r7, pc}
 800697e:	bf00      	nop
 8006980:	40022000 	.word	0x40022000
 8006984:	40022100 	.word	0x40022100
 8006988:	40022300 	.word	0x40022300
 800698c:	58026300 	.word	0x58026300
 8006990:	58026000 	.word	0x58026000
 8006994:	cb840000 	.word	0xcb840000
 8006998:	20000018 	.word	0x20000018
 800699c:	053e2d63 	.word	0x053e2d63
 80069a0:	c7520000 	.word	0xc7520000
 80069a4:	cfb80000 	.word	0xcfb80000

080069a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe ff9b 	bl	80058f0 <LL_ADC_IsEnabled>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d16e      	bne.n	8006a9e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	4b38      	ldr	r3, [pc, #224]	; (8006aa8 <ADC_Enable+0x100>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f043 0210 	orr.w	r2, r3, #16
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e05a      	b.n	8006aa0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe ff6a 	bl	80058c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069f4:	f7fe fd72 	bl	80054dc <HAL_GetTick>
 80069f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2b      	ldr	r2, [pc, #172]	; (8006aac <ADC_Enable+0x104>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <ADC_Enable+0x66>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a29      	ldr	r2, [pc, #164]	; (8006ab0 <ADC_Enable+0x108>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <ADC_Enable+0x6a>
 8006a0e:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <ADC_Enable+0x10c>)
 8006a10:	e000      	b.n	8006a14 <ADC_Enable+0x6c>
 8006a12:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <ADC_Enable+0x110>)
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe feed 	bl	80057f4 <LL_ADC_GetMultimode>
 8006a1a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <ADC_Enable+0x108>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d002      	beq.n	8006a2c <ADC_Enable+0x84>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	e000      	b.n	8006a2e <ADC_Enable+0x86>
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <ADC_Enable+0x104>)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d02c      	beq.n	8006a90 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d130      	bne.n	8006a9e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a3c:	e028      	b.n	8006a90 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe ff54 	bl	80058f0 <LL_ADC_IsEnabled>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe ff38 	bl	80058c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a58:	f7fe fd40 	bl	80054dc <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d914      	bls.n	8006a90 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d00d      	beq.n	8006a90 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0210 	orr.w	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e007      	b.n	8006aa0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d1cf      	bne.n	8006a3e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	8000003f 	.word	0x8000003f
 8006aac:	40022000 	.word	0x40022000
 8006ab0:	40022100 	.word	0x40022100
 8006ab4:	40022300 	.word	0x40022300
 8006ab8:	58026300 	.word	0x58026300

08006abc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d14b      	bne.n	8006b6e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d021      	beq.n	8006b34 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fdc9 	bl	800568c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d032      	beq.n	8006b66 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d12b      	bne.n	8006b66 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d11f      	bne.n	8006b66 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54
 8006b32:	e018      	b.n	8006b66 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d111      	bne.n	8006b66 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	f043 0201 	orr.w	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7fc fc54 	bl	8003414 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b6c:	e00e      	b.n	8006b8c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff fbba 	bl	80062f4 <HAL_ADC_ErrorCallback>
}
 8006b80:	e004      	b.n	8006b8c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff fb92 	bl	80062cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	f043 0204 	orr.w	r2, r3, #4
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff fb8c 	bl	80062f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a7a      	ldr	r2, [pc, #488]	; (8006ddc <ADC_ConfigureBoostMode+0x1f8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <ADC_ConfigureBoostMode+0x1c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a79      	ldr	r2, [pc, #484]	; (8006de0 <ADC_ConfigureBoostMode+0x1fc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d109      	bne.n	8006c14 <ADC_ConfigureBoostMode+0x30>
 8006c00:	4b78      	ldr	r3, [pc, #480]	; (8006de4 <ADC_ConfigureBoostMode+0x200>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e008      	b.n	8006c26 <ADC_ConfigureBoostMode+0x42>
 8006c14:	4b74      	ldr	r3, [pc, #464]	; (8006de8 <ADC_ConfigureBoostMode+0x204>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01c      	beq.n	8006c64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006c2a:	f005 ff83 	bl	800cb34 <HAL_RCC_GetHCLKFreq>
 8006c2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c38:	d010      	beq.n	8006c5c <ADC_ConfigureBoostMode+0x78>
 8006c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c3e:	d873      	bhi.n	8006d28 <ADC_ConfigureBoostMode+0x144>
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d002      	beq.n	8006c4c <ADC_ConfigureBoostMode+0x68>
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4a:	d16d      	bne.n	8006d28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	60fb      	str	r3, [r7, #12]
        break;
 8006c5a:	e068      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	60fb      	str	r3, [r7, #12]
        break;
 8006c62:	e064      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	f007 f9c8 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c7a:	d051      	beq.n	8006d20 <ADC_ConfigureBoostMode+0x13c>
 8006c7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c80:	d854      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006c82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006c86:	d047      	beq.n	8006d18 <ADC_ConfigureBoostMode+0x134>
 8006c88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006c8c:	d84e      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006c8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006c92:	d03d      	beq.n	8006d10 <ADC_ConfigureBoostMode+0x12c>
 8006c94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006c98:	d848      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c9e:	d033      	beq.n	8006d08 <ADC_ConfigureBoostMode+0x124>
 8006ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca4:	d842      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006ca6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006caa:	d029      	beq.n	8006d00 <ADC_ConfigureBoostMode+0x11c>
 8006cac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006cb0:	d83c      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006cb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006cb6:	d01a      	beq.n	8006cee <ADC_ConfigureBoostMode+0x10a>
 8006cb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006cbc:	d836      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006cbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006cc2:	d014      	beq.n	8006cee <ADC_ConfigureBoostMode+0x10a>
 8006cc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006cc8:	d830      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cce:	d00e      	beq.n	8006cee <ADC_ConfigureBoostMode+0x10a>
 8006cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd4:	d82a      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006cd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cda:	d008      	beq.n	8006cee <ADC_ConfigureBoostMode+0x10a>
 8006cdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce0:	d824      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x148>
 8006ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce6:	d002      	beq.n	8006cee <ADC_ConfigureBoostMode+0x10a>
 8006ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cec:	d11e      	bne.n	8006d2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	0c9b      	lsrs	r3, r3, #18
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	60fb      	str	r3, [r7, #12]
        break;
 8006cfe:	e016      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	60fb      	str	r3, [r7, #12]
        break;
 8006d06:	e012      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	60fb      	str	r3, [r7, #12]
        break;
 8006d0e:	e00e      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	60fb      	str	r3, [r7, #12]
        break;
 8006d16:	e00a      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
        break;
 8006d1e:	e006      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	60fb      	str	r3, [r7, #12]
        break;
 8006d26:	e002      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006d2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006d2e:	f7fe fc05 	bl	800553c <HAL_GetREVID>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d815      	bhi.n	8006d68 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <ADC_ConfigureBoostMode+0x208>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d908      	bls.n	8006d56 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d54:	e03e      	b.n	8006dd4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d64:	609a      	str	r2, [r3, #8]
}
 8006d66:	e035      	b.n	8006dd4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <ADC_ConfigureBoostMode+0x20c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d808      	bhi.n	8006d88 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d84:	609a      	str	r2, [r3, #8]
}
 8006d86:	e025      	b.n	8006dd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <ADC_ConfigureBoostMode+0x210>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d80a      	bhi.n	8006da6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	e016      	b.n	8006dd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a13      	ldr	r2, [pc, #76]	; (8006df8 <ADC_ConfigureBoostMode+0x214>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d80a      	bhi.n	8006dc4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	e007      	b.n	8006dd4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40022000 	.word	0x40022000
 8006de0:	40022100 	.word	0x40022100
 8006de4:	40022300 	.word	0x40022300
 8006de8:	58026300 	.word	0x58026300
 8006dec:	01312d00 	.word	0x01312d00
 8006df0:	005f5e10 	.word	0x005f5e10
 8006df4:	00bebc20 	.word	0x00bebc20
 8006df8:	017d7840 	.word	0x017d7840

08006dfc <LL_ADC_IsEnabled>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <LL_ADC_IsEnabled+0x18>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <LL_ADC_IsEnabled+0x1a>
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <LL_ADC_REG_IsConversionOngoing>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d101      	bne.n	8006e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b09f      	sub	sp, #124	; 0x7c
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e0be      	b.n	8007048 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a5c      	ldr	r2, [pc, #368]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d102      	bne.n	8006eea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006ee4:	4b5b      	ldr	r3, [pc, #364]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	e001      	b.n	8006eee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e09d      	b.n	8007048 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff ff87 	bl	8006e22 <LL_ADC_REG_IsConversionOngoing>
 8006f14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff81 	bl	8006e22 <LL_ADC_REG_IsConversionOngoing>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d17f      	bne.n	8007026 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d17c      	bne.n	8007026 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a47      	ldr	r2, [pc, #284]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a46      	ldr	r2, [pc, #280]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006f40:	4b45      	ldr	r3, [pc, #276]	; (8007058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f42:	e000      	b.n	8006f46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006f44:	4b45      	ldr	r3, [pc, #276]	; (800705c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d039      	beq.n	8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3a      	ldr	r2, [pc, #232]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a38      	ldr	r2, [pc, #224]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d10e      	bne.n	8006f94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006f76:	4836      	ldr	r0, [pc, #216]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f78:	f7ff ff40 	bl	8006dfc <LL_ADC_IsEnabled>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4835      	ldr	r0, [pc, #212]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f80:	f7ff ff3c 	bl	8006dfc <LL_ADC_IsEnabled>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4323      	orrs	r3, r4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	e008      	b.n	8006fa6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006f94:	4832      	ldr	r0, [pc, #200]	; (8007060 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f96:	f7ff ff31 	bl	8006dfc <LL_ADC_IsEnabled>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d047      	beq.n	800703a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	4b2d      	ldr	r3, [pc, #180]	; (8007064 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	6892      	ldr	r2, [r2, #8]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fc2:	e03a      	b.n	800703a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1e      	ldr	r2, [pc, #120]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d10e      	bne.n	8007002 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006fe4:	481a      	ldr	r0, [pc, #104]	; (8007050 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006fe6:	f7ff ff09 	bl	8006dfc <LL_ADC_IsEnabled>
 8006fea:	4604      	mov	r4, r0
 8006fec:	4819      	ldr	r0, [pc, #100]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006fee:	f7ff ff05 	bl	8006dfc <LL_ADC_IsEnabled>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4323      	orrs	r3, r4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf0c      	ite	eq
 8006ffa:	2301      	moveq	r3, #1
 8006ffc:	2300      	movne	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e008      	b.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007002:	4817      	ldr	r0, [pc, #92]	; (8007060 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007004:	f7ff fefa 	bl	8006dfc <LL_ADC_IsEnabled>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	bf0c      	ite	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	2300      	movne	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d010      	beq.n	800703a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800701e:	4013      	ands	r3, r2
 8007020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007022:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007024:	e009      	b.n	800703a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007038:	e000      	b.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800703a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007044:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007048:	4618      	mov	r0, r3
 800704a:	377c      	adds	r7, #124	; 0x7c
 800704c:	46bd      	mov	sp, r7
 800704e:	bd90      	pop	{r4, r7, pc}
 8007050:	40022000 	.word	0x40022000
 8007054:	40022100 	.word	0x40022100
 8007058:	40022300 	.word	0x40022300
 800705c:	58026300 	.word	0x58026300
 8007060:	58026000 	.word	0x58026000
 8007064:	fffff0e0 	.word	0xfffff0e0

08007068 <__NVIC_SetPriorityGrouping>:
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <__NVIC_SetPriorityGrouping+0x40>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007084:	4013      	ands	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <__NVIC_SetPriorityGrouping+0x44>)
 8007092:	4313      	orrs	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007096:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <__NVIC_SetPriorityGrouping+0x40>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	60d3      	str	r3, [r2, #12]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	05fa0000 	.word	0x05fa0000

080070b0 <__NVIC_GetPriorityGrouping>:
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070b4:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <__NVIC_GetPriorityGrouping+0x18>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	0a1b      	lsrs	r3, r3, #8
 80070ba:	f003 0307 	and.w	r3, r3, #7
}
 80070be:	4618      	mov	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	e000ed00 	.word	0xe000ed00

080070cc <__NVIC_EnableIRQ>:
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	db0b      	blt.n	80070f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	f003 021f 	and.w	r2, r3, #31
 80070e4:	4907      	ldr	r1, [pc, #28]	; (8007104 <__NVIC_EnableIRQ+0x38>)
 80070e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	2001      	movs	r0, #1
 80070ee:	fa00 f202 	lsl.w	r2, r0, r2
 80070f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e100 	.word	0xe000e100

08007108 <__NVIC_SetPriority>:
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	db0a      	blt.n	8007132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	490c      	ldr	r1, [pc, #48]	; (8007154 <__NVIC_SetPriority+0x4c>)
 8007122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007126:	0112      	lsls	r2, r2, #4
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	440b      	add	r3, r1
 800712c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007130:	e00a      	b.n	8007148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4908      	ldr	r1, [pc, #32]	; (8007158 <__NVIC_SetPriority+0x50>)
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	3b04      	subs	r3, #4
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	440b      	add	r3, r1
 8007146:	761a      	strb	r2, [r3, #24]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000e100 	.word	0xe000e100
 8007158:	e000ed00 	.word	0xe000ed00

0800715c <NVIC_EncodePriority>:
{
 800715c:	b480      	push	{r7}
 800715e:	b089      	sub	sp, #36	; 0x24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f1c3 0307 	rsb	r3, r3, #7
 8007176:	2b04      	cmp	r3, #4
 8007178:	bf28      	it	cs
 800717a:	2304      	movcs	r3, #4
 800717c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3304      	adds	r3, #4
 8007182:	2b06      	cmp	r3, #6
 8007184:	d902      	bls.n	800718c <NVIC_EncodePriority+0x30>
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3b03      	subs	r3, #3
 800718a:	e000      	b.n	800718e <NVIC_EncodePriority+0x32>
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	401a      	ands	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	43d9      	mvns	r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b4:	4313      	orrs	r3, r2
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3724      	adds	r7, #36	; 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071d4:	d301      	bcc.n	80071da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071d6:	2301      	movs	r3, #1
 80071d8:	e00f      	b.n	80071fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <SysTick_Config+0x40>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3b01      	subs	r3, #1
 80071e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071e2:	210f      	movs	r1, #15
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e8:	f7ff ff8e 	bl	8007108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <SysTick_Config+0x40>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071f2:	4b04      	ldr	r3, [pc, #16]	; (8007204 <SysTick_Config+0x40>)
 80071f4:	2207      	movs	r2, #7
 80071f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	e000e010 	.word	0xe000e010

08007208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff29 	bl	8007068 <__NVIC_SetPriorityGrouping>
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	4603      	mov	r3, r0
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800722c:	f7ff ff40 	bl	80070b0 <__NVIC_GetPriorityGrouping>
 8007230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	6978      	ldr	r0, [r7, #20]
 8007238:	f7ff ff90 	bl	800715c <NVIC_EncodePriority>
 800723c:	4602      	mov	r2, r0
 800723e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff ff5f 	bl	8007108 <__NVIC_SetPriority>
}
 800724a:	bf00      	nop
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	4603      	mov	r3, r0
 800725a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800725c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff ff33 	bl	80070cc <__NVIC_EnableIRQ>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff ffa4 	bl	80071c4 <SysTick_Config>
 800727c:	4603      	mov	r3, r0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800728c:	f3bf 8f5f 	dmb	sy
}
 8007290:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <HAL_MPU_Disable+0x28>)
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	4a06      	ldr	r2, [pc, #24]	; (80072b0 <HAL_MPU_Disable+0x28>)
 8007298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_MPU_Disable+0x2c>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000ed00 	.word	0xe000ed00
 80072b4:	e000ed90 	.word	0xe000ed90

080072b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80072c0:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <HAL_MPU_Enable+0x38>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <HAL_MPU_Enable+0x3c>)
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <HAL_MPU_Enable+0x3c>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80072d6:	f3bf 8f4f 	dsb	sy
}
 80072da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80072dc:	f3bf 8f6f 	isb	sy
}
 80072e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000ed90 	.word	0xe000ed90
 80072f4:	e000ed00 	.word	0xe000ed00

080072f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	785a      	ldrb	r2, [r3, #1]
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <HAL_MPU_ConfigRegion+0x84>)
 8007306:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d029      	beq.n	8007364 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8007310:	4a1a      	ldr	r2, [pc, #104]	; (800737c <HAL_MPU_ConfigRegion+0x84>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7b1b      	ldrb	r3, [r3, #12]
 800731c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	7adb      	ldrb	r3, [r3, #11]
 8007322:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007324:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7a9b      	ldrb	r3, [r3, #10]
 800732a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800732c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7b5b      	ldrb	r3, [r3, #13]
 8007332:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7b9b      	ldrb	r3, [r3, #14]
 800733a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800733c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	7bdb      	ldrb	r3, [r3, #15]
 8007342:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007344:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7a5b      	ldrb	r3, [r3, #9]
 800734a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800734c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	7a1b      	ldrb	r3, [r3, #8]
 8007352:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007354:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800735c:	4a07      	ldr	r2, [pc, #28]	; (800737c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800735e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007360:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007362:	e005      	b.n	8007370 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <HAL_MPU_ConfigRegion+0x84>)
 8007366:	2200      	movs	r2, #0
 8007368:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800736a:	4b04      	ldr	r3, [pc, #16]	; (800737c <HAL_MPU_ConfigRegion+0x84>)
 800736c:	2200      	movs	r2, #0
 800736e:	611a      	str	r2, [r3, #16]
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	e000ed90 	.word	0xe000ed90

08007380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007388:	f7fe f8a8 	bl	80054dc <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e316      	b.n	80079c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a66      	ldr	r2, [pc, #408]	; (8007538 <HAL_DMA_Init+0x1b8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d04a      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a65      	ldr	r2, [pc, #404]	; (800753c <HAL_DMA_Init+0x1bc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d045      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a63      	ldr	r2, [pc, #396]	; (8007540 <HAL_DMA_Init+0x1c0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d040      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a62      	ldr	r2, [pc, #392]	; (8007544 <HAL_DMA_Init+0x1c4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d03b      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a60      	ldr	r2, [pc, #384]	; (8007548 <HAL_DMA_Init+0x1c8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d036      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a5f      	ldr	r2, [pc, #380]	; (800754c <HAL_DMA_Init+0x1cc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d031      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5d      	ldr	r2, [pc, #372]	; (8007550 <HAL_DMA_Init+0x1d0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d02c      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a5c      	ldr	r2, [pc, #368]	; (8007554 <HAL_DMA_Init+0x1d4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d027      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5a      	ldr	r2, [pc, #360]	; (8007558 <HAL_DMA_Init+0x1d8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d022      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a59      	ldr	r2, [pc, #356]	; (800755c <HAL_DMA_Init+0x1dc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d01d      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a57      	ldr	r2, [pc, #348]	; (8007560 <HAL_DMA_Init+0x1e0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d018      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a56      	ldr	r2, [pc, #344]	; (8007564 <HAL_DMA_Init+0x1e4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a54      	ldr	r2, [pc, #336]	; (8007568 <HAL_DMA_Init+0x1e8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00e      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a53      	ldr	r2, [pc, #332]	; (800756c <HAL_DMA_Init+0x1ec>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a51      	ldr	r2, [pc, #324]	; (8007570 <HAL_DMA_Init+0x1f0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_DMA_Init+0xb8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a50      	ldr	r2, [pc, #320]	; (8007574 <HAL_DMA_Init+0x1f4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d101      	bne.n	800743c <HAL_DMA_Init+0xbc>
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <HAL_DMA_Init+0xbe>
 800743c:	2300      	movs	r3, #0
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 813b 	beq.w	80076ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a37      	ldr	r2, [pc, #220]	; (8007538 <HAL_DMA_Init+0x1b8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d04a      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a36      	ldr	r2, [pc, #216]	; (800753c <HAL_DMA_Init+0x1bc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d045      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a34      	ldr	r2, [pc, #208]	; (8007540 <HAL_DMA_Init+0x1c0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d040      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a33      	ldr	r2, [pc, #204]	; (8007544 <HAL_DMA_Init+0x1c4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d03b      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a31      	ldr	r2, [pc, #196]	; (8007548 <HAL_DMA_Init+0x1c8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d036      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a30      	ldr	r2, [pc, #192]	; (800754c <HAL_DMA_Init+0x1cc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d031      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2e      	ldr	r2, [pc, #184]	; (8007550 <HAL_DMA_Init+0x1d0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d02c      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <HAL_DMA_Init+0x1d4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d027      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a2b      	ldr	r2, [pc, #172]	; (8007558 <HAL_DMA_Init+0x1d8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a2a      	ldr	r2, [pc, #168]	; (800755c <HAL_DMA_Init+0x1dc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01d      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a28      	ldr	r2, [pc, #160]	; (8007560 <HAL_DMA_Init+0x1e0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d018      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a27      	ldr	r2, [pc, #156]	; (8007564 <HAL_DMA_Init+0x1e4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d013      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a25      	ldr	r2, [pc, #148]	; (8007568 <HAL_DMA_Init+0x1e8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00e      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <HAL_DMA_Init+0x1ec>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d009      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a22      	ldr	r2, [pc, #136]	; (8007570 <HAL_DMA_Init+0x1f0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_DMA_Init+0x174>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a21      	ldr	r2, [pc, #132]	; (8007574 <HAL_DMA_Init+0x1f4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d108      	bne.n	8007506 <HAL_DMA_Init+0x186>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	e007      	b.n	8007516 <HAL_DMA_Init+0x196>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007516:	e02f      	b.n	8007578 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007518:	f7fd ffe0 	bl	80054dc <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b05      	cmp	r3, #5
 8007524:	d928      	bls.n	8007578 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2203      	movs	r2, #3
 8007530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e246      	b.n	80079c6 <HAL_DMA_Init+0x646>
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1c8      	bne.n	8007518 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4b83      	ldr	r3, [pc, #524]	; (80077a0 <HAL_DMA_Init+0x420>)
 8007592:	4013      	ands	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800759e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d107      	bne.n	80075dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	4313      	orrs	r3, r2
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80075dc:	4b71      	ldr	r3, [pc, #452]	; (80077a4 <HAL_DMA_Init+0x424>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b71      	ldr	r3, [pc, #452]	; (80077a8 <HAL_DMA_Init+0x428>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e8:	d328      	bcc.n	800763c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b28      	cmp	r3, #40	; 0x28
 80075f0:	d903      	bls.n	80075fa <HAL_DMA_Init+0x27a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b2e      	cmp	r3, #46	; 0x2e
 80075f8:	d917      	bls.n	800762a <HAL_DMA_Init+0x2aa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007600:	d903      	bls.n	800760a <HAL_DMA_Init+0x28a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b42      	cmp	r3, #66	; 0x42
 8007608:	d90f      	bls.n	800762a <HAL_DMA_Init+0x2aa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b46      	cmp	r3, #70	; 0x46
 8007610:	d903      	bls.n	800761a <HAL_DMA_Init+0x29a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b48      	cmp	r3, #72	; 0x48
 8007618:	d907      	bls.n	800762a <HAL_DMA_Init+0x2aa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b4e      	cmp	r3, #78	; 0x4e
 8007620:	d905      	bls.n	800762e <HAL_DMA_Init+0x2ae>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b52      	cmp	r3, #82	; 0x52
 8007628:	d801      	bhi.n	800762e <HAL_DMA_Init+0x2ae>
 800762a:	2301      	movs	r3, #1
 800762c:	e000      	b.n	8007630 <HAL_DMA_Init+0x2b0>
 800762e:	2300      	movs	r3, #0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b04      	cmp	r3, #4
 8007664:	d117      	bne.n	8007696 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 fddb 	bl	8009234 <DMA_CheckFifoParam>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2240      	movs	r2, #64	; 0x40
 8007688:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e197      	b.n	80079c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fd16 	bl	80090d0 <DMA_CalcBaseAndBitshift>
 80076a4:	4603      	mov	r3, r0
 80076a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	223f      	movs	r2, #63	; 0x3f
 80076b2:	409a      	lsls	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	e0cd      	b.n	8007856 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a3b      	ldr	r2, [pc, #236]	; (80077ac <HAL_DMA_Init+0x42c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d022      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a39      	ldr	r2, [pc, #228]	; (80077b0 <HAL_DMA_Init+0x430>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01d      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a38      	ldr	r2, [pc, #224]	; (80077b4 <HAL_DMA_Init+0x434>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d018      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a36      	ldr	r2, [pc, #216]	; (80077b8 <HAL_DMA_Init+0x438>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a35      	ldr	r2, [pc, #212]	; (80077bc <HAL_DMA_Init+0x43c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <HAL_DMA_Init+0x440>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <HAL_DMA_Init+0x38a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a32      	ldr	r2, [pc, #200]	; (80077c4 <HAL_DMA_Init+0x444>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_DMA_Init+0x38a>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a30      	ldr	r2, [pc, #192]	; (80077c8 <HAL_DMA_Init+0x448>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <HAL_DMA_Init+0x38e>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <HAL_DMA_Init+0x390>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8097 	beq.w	8007844 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a24      	ldr	r2, [pc, #144]	; (80077ac <HAL_DMA_Init+0x42c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d021      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <HAL_DMA_Init+0x430>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01c      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_DMA_Init+0x434>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d017      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <HAL_DMA_Init+0x438>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d012      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_DMA_Init+0x43c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00d      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <HAL_DMA_Init+0x440>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d008      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <HAL_DMA_Init+0x444>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <HAL_DMA_Init+0x3e4>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <HAL_DMA_Init+0x448>)
 8007762:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_DMA_Init+0x44c>)
 8007780:	4013      	ands	r3, r2
 8007782:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d021      	beq.n	80077d0 <HAL_DMA_Init+0x450>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d102      	bne.n	800779a <HAL_DMA_Init+0x41a>
 8007794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007798:	e01b      	b.n	80077d2 <HAL_DMA_Init+0x452>
 800779a:	2300      	movs	r3, #0
 800779c:	e019      	b.n	80077d2 <HAL_DMA_Init+0x452>
 800779e:	bf00      	nop
 80077a0:	fe10803f 	.word	0xfe10803f
 80077a4:	5c001000 	.word	0x5c001000
 80077a8:	ffff0000 	.word	0xffff0000
 80077ac:	58025408 	.word	0x58025408
 80077b0:	5802541c 	.word	0x5802541c
 80077b4:	58025430 	.word	0x58025430
 80077b8:	58025444 	.word	0x58025444
 80077bc:	58025458 	.word	0x58025458
 80077c0:	5802546c 	.word	0x5802546c
 80077c4:	58025480 	.word	0x58025480
 80077c8:	58025494 	.word	0x58025494
 80077cc:	fffe000f 	.word	0xfffe000f
 80077d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68d2      	ldr	r2, [r2, #12]
 80077d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80077f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007800:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	4b6e      	ldr	r3, [pc, #440]	; (80079d0 <HAL_DMA_Init+0x650>)
 8007818:	4413      	add	r3, r2
 800781a:	4a6e      	ldr	r2, [pc, #440]	; (80079d4 <HAL_DMA_Init+0x654>)
 800781c:	fba2 2303 	umull	r2, r3, r2, r3
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	009a      	lsls	r2, r3, #2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fc51 	bl	80090d0 <DMA_CalcBaseAndBitshift>
 800782e:	4603      	mov	r3, r0
 8007830:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2201      	movs	r2, #1
 800783c:	409a      	lsls	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	e008      	b.n	8007856 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	; 0x40
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2203      	movs	r2, #3
 800784e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e0b7      	b.n	80079c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a5f      	ldr	r2, [pc, #380]	; (80079d8 <HAL_DMA_Init+0x658>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d072      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5d      	ldr	r2, [pc, #372]	; (80079dc <HAL_DMA_Init+0x65c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d06d      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a5c      	ldr	r2, [pc, #368]	; (80079e0 <HAL_DMA_Init+0x660>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d068      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <HAL_DMA_Init+0x664>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d063      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a59      	ldr	r2, [pc, #356]	; (80079e8 <HAL_DMA_Init+0x668>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d05e      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a57      	ldr	r2, [pc, #348]	; (80079ec <HAL_DMA_Init+0x66c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d059      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a56      	ldr	r2, [pc, #344]	; (80079f0 <HAL_DMA_Init+0x670>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d054      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a54      	ldr	r2, [pc, #336]	; (80079f4 <HAL_DMA_Init+0x674>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04f      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a53      	ldr	r2, [pc, #332]	; (80079f8 <HAL_DMA_Init+0x678>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d04a      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a51      	ldr	r2, [pc, #324]	; (80079fc <HAL_DMA_Init+0x67c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d045      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a50      	ldr	r2, [pc, #320]	; (8007a00 <HAL_DMA_Init+0x680>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d040      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4e      	ldr	r2, [pc, #312]	; (8007a04 <HAL_DMA_Init+0x684>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d03b      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a4d      	ldr	r2, [pc, #308]	; (8007a08 <HAL_DMA_Init+0x688>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d036      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a4b      	ldr	r2, [pc, #300]	; (8007a0c <HAL_DMA_Init+0x68c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d031      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a4a      	ldr	r2, [pc, #296]	; (8007a10 <HAL_DMA_Init+0x690>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d02c      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a48      	ldr	r2, [pc, #288]	; (8007a14 <HAL_DMA_Init+0x694>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d027      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a47      	ldr	r2, [pc, #284]	; (8007a18 <HAL_DMA_Init+0x698>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d022      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a45      	ldr	r2, [pc, #276]	; (8007a1c <HAL_DMA_Init+0x69c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01d      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a44      	ldr	r2, [pc, #272]	; (8007a20 <HAL_DMA_Init+0x6a0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a42      	ldr	r2, [pc, #264]	; (8007a24 <HAL_DMA_Init+0x6a4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a41      	ldr	r2, [pc, #260]	; (8007a28 <HAL_DMA_Init+0x6a8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <HAL_DMA_Init+0x6ac>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a3e      	ldr	r2, [pc, #248]	; (8007a30 <HAL_DMA_Init+0x6b0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <HAL_DMA_Init+0x5c6>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a3c      	ldr	r2, [pc, #240]	; (8007a34 <HAL_DMA_Init+0x6b4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d101      	bne.n	800794a <HAL_DMA_Init+0x5ca>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <HAL_DMA_Init+0x5cc>
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d032      	beq.n	80079b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 fceb 	bl	800932c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d102      	bne.n	8007964 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007978:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <HAL_DMA_Init+0x624>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b08      	cmp	r3, #8
 8007988:	d80c      	bhi.n	80079a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fd68 	bl	8009460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	e008      	b.n	80079b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	a7fdabf8 	.word	0xa7fdabf8
 80079d4:	cccccccd 	.word	0xcccccccd
 80079d8:	40020010 	.word	0x40020010
 80079dc:	40020028 	.word	0x40020028
 80079e0:	40020040 	.word	0x40020040
 80079e4:	40020058 	.word	0x40020058
 80079e8:	40020070 	.word	0x40020070
 80079ec:	40020088 	.word	0x40020088
 80079f0:	400200a0 	.word	0x400200a0
 80079f4:	400200b8 	.word	0x400200b8
 80079f8:	40020410 	.word	0x40020410
 80079fc:	40020428 	.word	0x40020428
 8007a00:	40020440 	.word	0x40020440
 8007a04:	40020458 	.word	0x40020458
 8007a08:	40020470 	.word	0x40020470
 8007a0c:	40020488 	.word	0x40020488
 8007a10:	400204a0 	.word	0x400204a0
 8007a14:	400204b8 	.word	0x400204b8
 8007a18:	58025408 	.word	0x58025408
 8007a1c:	5802541c 	.word	0x5802541c
 8007a20:	58025430 	.word	0x58025430
 8007a24:	58025444 	.word	0x58025444
 8007a28:	58025458 	.word	0x58025458
 8007a2c:	5802546c 	.word	0x5802546c
 8007a30:	58025480 	.word	0x58025480
 8007a34:	58025494 	.word	0x58025494

08007a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e226      	b.n	8007ea2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_DMA_Start_IT+0x2a>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e21f      	b.n	8007ea2 <HAL_DMA_Start_IT+0x46a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	f040 820a 	bne.w	8007e8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a68      	ldr	r2, [pc, #416]	; (8007c2c <HAL_DMA_Start_IT+0x1f4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d04a      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a66      	ldr	r2, [pc, #408]	; (8007c30 <HAL_DMA_Start_IT+0x1f8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d045      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a65      	ldr	r2, [pc, #404]	; (8007c34 <HAL_DMA_Start_IT+0x1fc>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d040      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a63      	ldr	r2, [pc, #396]	; (8007c38 <HAL_DMA_Start_IT+0x200>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d03b      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a62      	ldr	r2, [pc, #392]	; (8007c3c <HAL_DMA_Start_IT+0x204>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d036      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a60      	ldr	r2, [pc, #384]	; (8007c40 <HAL_DMA_Start_IT+0x208>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d031      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5f      	ldr	r2, [pc, #380]	; (8007c44 <HAL_DMA_Start_IT+0x20c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d02c      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a5d      	ldr	r2, [pc, #372]	; (8007c48 <HAL_DMA_Start_IT+0x210>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d027      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a5c      	ldr	r2, [pc, #368]	; (8007c4c <HAL_DMA_Start_IT+0x214>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d022      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5a      	ldr	r2, [pc, #360]	; (8007c50 <HAL_DMA_Start_IT+0x218>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d01d      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a59      	ldr	r2, [pc, #356]	; (8007c54 <HAL_DMA_Start_IT+0x21c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d018      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a57      	ldr	r2, [pc, #348]	; (8007c58 <HAL_DMA_Start_IT+0x220>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a56      	ldr	r2, [pc, #344]	; (8007c5c <HAL_DMA_Start_IT+0x224>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a54      	ldr	r2, [pc, #336]	; (8007c60 <HAL_DMA_Start_IT+0x228>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a53      	ldr	r2, [pc, #332]	; (8007c64 <HAL_DMA_Start_IT+0x22c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_DMA_Start_IT+0xee>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a51      	ldr	r2, [pc, #324]	; (8007c68 <HAL_DMA_Start_IT+0x230>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d108      	bne.n	8007b38 <HAL_DMA_Start_IT+0x100>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e007      	b.n	8007b48 <HAL_DMA_Start_IT+0x110>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f001 f912 	bl	8008d78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a34      	ldr	r2, [pc, #208]	; (8007c2c <HAL_DMA_Start_IT+0x1f4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d04a      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a33      	ldr	r2, [pc, #204]	; (8007c30 <HAL_DMA_Start_IT+0x1f8>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d045      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a31      	ldr	r2, [pc, #196]	; (8007c34 <HAL_DMA_Start_IT+0x1fc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d040      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a30      	ldr	r2, [pc, #192]	; (8007c38 <HAL_DMA_Start_IT+0x200>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d03b      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	; (8007c3c <HAL_DMA_Start_IT+0x204>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d036      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <HAL_DMA_Start_IT+0x208>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d031      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <HAL_DMA_Start_IT+0x20c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d02c      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <HAL_DMA_Start_IT+0x210>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d027      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <HAL_DMA_Start_IT+0x214>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d022      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <HAL_DMA_Start_IT+0x218>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d01d      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a25      	ldr	r2, [pc, #148]	; (8007c54 <HAL_DMA_Start_IT+0x21c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d018      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a24      	ldr	r2, [pc, #144]	; (8007c58 <HAL_DMA_Start_IT+0x220>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_DMA_Start_IT+0x224>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a21      	ldr	r2, [pc, #132]	; (8007c60 <HAL_DMA_Start_IT+0x228>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d009      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1f      	ldr	r2, [pc, #124]	; (8007c64 <HAL_DMA_Start_IT+0x22c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x1bc>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1e      	ldr	r2, [pc, #120]	; (8007c68 <HAL_DMA_Start_IT+0x230>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d101      	bne.n	8007bf8 <HAL_DMA_Start_IT+0x1c0>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <HAL_DMA_Start_IT+0x1c2>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d036      	beq.n	8007c6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f023 021e 	bic.w	r2, r3, #30
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0216 	orr.w	r2, r2, #22
 8007c10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d03e      	beq.n	8007c98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0208 	orr.w	r2, r2, #8
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e035      	b.n	8007c98 <HAL_DMA_Start_IT+0x260>
 8007c2c:	40020010 	.word	0x40020010
 8007c30:	40020028 	.word	0x40020028
 8007c34:	40020040 	.word	0x40020040
 8007c38:	40020058 	.word	0x40020058
 8007c3c:	40020070 	.word	0x40020070
 8007c40:	40020088 	.word	0x40020088
 8007c44:	400200a0 	.word	0x400200a0
 8007c48:	400200b8 	.word	0x400200b8
 8007c4c:	40020410 	.word	0x40020410
 8007c50:	40020428 	.word	0x40020428
 8007c54:	40020440 	.word	0x40020440
 8007c58:	40020458 	.word	0x40020458
 8007c5c:	40020470 	.word	0x40020470
 8007c60:	40020488 	.word	0x40020488
 8007c64:	400204a0 	.word	0x400204a0
 8007c68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 020e 	bic.w	r2, r3, #14
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 020a 	orr.w	r2, r2, #10
 8007c7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0204 	orr.w	r2, r2, #4
 8007c96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a83      	ldr	r2, [pc, #524]	; (8007eac <HAL_DMA_Start_IT+0x474>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d072      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a82      	ldr	r2, [pc, #520]	; (8007eb0 <HAL_DMA_Start_IT+0x478>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d06d      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a80      	ldr	r2, [pc, #512]	; (8007eb4 <HAL_DMA_Start_IT+0x47c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d068      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a7f      	ldr	r2, [pc, #508]	; (8007eb8 <HAL_DMA_Start_IT+0x480>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d063      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7d      	ldr	r2, [pc, #500]	; (8007ebc <HAL_DMA_Start_IT+0x484>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d05e      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a7c      	ldr	r2, [pc, #496]	; (8007ec0 <HAL_DMA_Start_IT+0x488>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d059      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a7a      	ldr	r2, [pc, #488]	; (8007ec4 <HAL_DMA_Start_IT+0x48c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d054      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a79      	ldr	r2, [pc, #484]	; (8007ec8 <HAL_DMA_Start_IT+0x490>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d04f      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a77      	ldr	r2, [pc, #476]	; (8007ecc <HAL_DMA_Start_IT+0x494>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d04a      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a76      	ldr	r2, [pc, #472]	; (8007ed0 <HAL_DMA_Start_IT+0x498>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d045      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a74      	ldr	r2, [pc, #464]	; (8007ed4 <HAL_DMA_Start_IT+0x49c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d040      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a73      	ldr	r2, [pc, #460]	; (8007ed8 <HAL_DMA_Start_IT+0x4a0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d03b      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a71      	ldr	r2, [pc, #452]	; (8007edc <HAL_DMA_Start_IT+0x4a4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d036      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a70      	ldr	r2, [pc, #448]	; (8007ee0 <HAL_DMA_Start_IT+0x4a8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d031      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a6e      	ldr	r2, [pc, #440]	; (8007ee4 <HAL_DMA_Start_IT+0x4ac>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02c      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a6d      	ldr	r2, [pc, #436]	; (8007ee8 <HAL_DMA_Start_IT+0x4b0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d027      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a6b      	ldr	r2, [pc, #428]	; (8007eec <HAL_DMA_Start_IT+0x4b4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d022      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a6a      	ldr	r2, [pc, #424]	; (8007ef0 <HAL_DMA_Start_IT+0x4b8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01d      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a68      	ldr	r2, [pc, #416]	; (8007ef4 <HAL_DMA_Start_IT+0x4bc>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d018      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a67      	ldr	r2, [pc, #412]	; (8007ef8 <HAL_DMA_Start_IT+0x4c0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a65      	ldr	r2, [pc, #404]	; (8007efc <HAL_DMA_Start_IT+0x4c4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a64      	ldr	r2, [pc, #400]	; (8007f00 <HAL_DMA_Start_IT+0x4c8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d009      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a62      	ldr	r2, [pc, #392]	; (8007f04 <HAL_DMA_Start_IT+0x4cc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_DMA_Start_IT+0x350>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a61      	ldr	r2, [pc, #388]	; (8007f08 <HAL_DMA_Start_IT+0x4d0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d101      	bne.n	8007d8c <HAL_DMA_Start_IT+0x354>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <HAL_DMA_Start_IT+0x356>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01a      	beq.n	8007dc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d007      	beq.n	8007db0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a37      	ldr	r2, [pc, #220]	; (8007eac <HAL_DMA_Start_IT+0x474>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d04a      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a36      	ldr	r2, [pc, #216]	; (8007eb0 <HAL_DMA_Start_IT+0x478>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d045      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a34      	ldr	r2, [pc, #208]	; (8007eb4 <HAL_DMA_Start_IT+0x47c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d040      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a33      	ldr	r2, [pc, #204]	; (8007eb8 <HAL_DMA_Start_IT+0x480>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d03b      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a31      	ldr	r2, [pc, #196]	; (8007ebc <HAL_DMA_Start_IT+0x484>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d036      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a30      	ldr	r2, [pc, #192]	; (8007ec0 <HAL_DMA_Start_IT+0x488>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d031      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2e      	ldr	r2, [pc, #184]	; (8007ec4 <HAL_DMA_Start_IT+0x48c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02c      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a2d      	ldr	r2, [pc, #180]	; (8007ec8 <HAL_DMA_Start_IT+0x490>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d027      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a2b      	ldr	r2, [pc, #172]	; (8007ecc <HAL_DMA_Start_IT+0x494>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d022      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a2a      	ldr	r2, [pc, #168]	; (8007ed0 <HAL_DMA_Start_IT+0x498>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d01d      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a28      	ldr	r2, [pc, #160]	; (8007ed4 <HAL_DMA_Start_IT+0x49c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d018      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a27      	ldr	r2, [pc, #156]	; (8007ed8 <HAL_DMA_Start_IT+0x4a0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a25      	ldr	r2, [pc, #148]	; (8007edc <HAL_DMA_Start_IT+0x4a4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00e      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a24      	ldr	r2, [pc, #144]	; (8007ee0 <HAL_DMA_Start_IT+0x4a8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a22      	ldr	r2, [pc, #136]	; (8007ee4 <HAL_DMA_Start_IT+0x4ac>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_DMA_Start_IT+0x430>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a21      	ldr	r2, [pc, #132]	; (8007ee8 <HAL_DMA_Start_IT+0x4b0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d108      	bne.n	8007e7a <HAL_DMA_Start_IT+0x442>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e012      	b.n	8007ea0 <HAL_DMA_Start_IT+0x468>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e009      	b.n	8007ea0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020028 	.word	0x40020028
 8007eb4:	40020040 	.word	0x40020040
 8007eb8:	40020058 	.word	0x40020058
 8007ebc:	40020070 	.word	0x40020070
 8007ec0:	40020088 	.word	0x40020088
 8007ec4:	400200a0 	.word	0x400200a0
 8007ec8:	400200b8 	.word	0x400200b8
 8007ecc:	40020410 	.word	0x40020410
 8007ed0:	40020428 	.word	0x40020428
 8007ed4:	40020440 	.word	0x40020440
 8007ed8:	40020458 	.word	0x40020458
 8007edc:	40020470 	.word	0x40020470
 8007ee0:	40020488 	.word	0x40020488
 8007ee4:	400204a0 	.word	0x400204a0
 8007ee8:	400204b8 	.word	0x400204b8
 8007eec:	58025408 	.word	0x58025408
 8007ef0:	5802541c 	.word	0x5802541c
 8007ef4:	58025430 	.word	0x58025430
 8007ef8:	58025444 	.word	0x58025444
 8007efc:	58025458 	.word	0x58025458
 8007f00:	5802546c 	.word	0x5802546c
 8007f04:	58025480 	.word	0x58025480
 8007f08:	58025494 	.word	0x58025494

08007f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	; 0x28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f18:	4b67      	ldr	r3, [pc, #412]	; (80080b8 <HAL_DMA_IRQHandler+0x1ac>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a67      	ldr	r2, [pc, #412]	; (80080bc <HAL_DMA_IRQHandler+0x1b0>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	0a9b      	lsrs	r3, r3, #10
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5f      	ldr	r2, [pc, #380]	; (80080c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d04a      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5d      	ldr	r2, [pc, #372]	; (80080c4 <HAL_DMA_IRQHandler+0x1b8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d045      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a5c      	ldr	r2, [pc, #368]	; (80080c8 <HAL_DMA_IRQHandler+0x1bc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d040      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5a      	ldr	r2, [pc, #360]	; (80080cc <HAL_DMA_IRQHandler+0x1c0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d03b      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a59      	ldr	r2, [pc, #356]	; (80080d0 <HAL_DMA_IRQHandler+0x1c4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d036      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a57      	ldr	r2, [pc, #348]	; (80080d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d031      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a56      	ldr	r2, [pc, #344]	; (80080d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d02c      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a54      	ldr	r2, [pc, #336]	; (80080dc <HAL_DMA_IRQHandler+0x1d0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d027      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a53      	ldr	r2, [pc, #332]	; (80080e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d022      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a51      	ldr	r2, [pc, #324]	; (80080e4 <HAL_DMA_IRQHandler+0x1d8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d01d      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a50      	ldr	r2, [pc, #320]	; (80080e8 <HAL_DMA_IRQHandler+0x1dc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a4e      	ldr	r2, [pc, #312]	; (80080ec <HAL_DMA_IRQHandler+0x1e0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a4d      	ldr	r2, [pc, #308]	; (80080f0 <HAL_DMA_IRQHandler+0x1e4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a4b      	ldr	r2, [pc, #300]	; (80080f4 <HAL_DMA_IRQHandler+0x1e8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a4a      	ldr	r2, [pc, #296]	; (80080f8 <HAL_DMA_IRQHandler+0x1ec>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_DMA_IRQHandler+0xd2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a48      	ldr	r2, [pc, #288]	; (80080fc <HAL_DMA_IRQHandler+0x1f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d101      	bne.n	8007fe2 <HAL_DMA_IRQHandler+0xd6>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <HAL_DMA_IRQHandler+0xd8>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 842b 	beq.w	8008840 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80a2 	beq.w	8008144 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2e      	ldr	r2, [pc, #184]	; (80080c0 <HAL_DMA_IRQHandler+0x1b4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d04a      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <HAL_DMA_IRQHandler+0x1b8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d045      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2b      	ldr	r2, [pc, #172]	; (80080c8 <HAL_DMA_IRQHandler+0x1bc>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d040      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2a      	ldr	r2, [pc, #168]	; (80080cc <HAL_DMA_IRQHandler+0x1c0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d03b      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a28      	ldr	r2, [pc, #160]	; (80080d0 <HAL_DMA_IRQHandler+0x1c4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d036      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a27      	ldr	r2, [pc, #156]	; (80080d4 <HAL_DMA_IRQHandler+0x1c8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d031      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a25      	ldr	r2, [pc, #148]	; (80080d8 <HAL_DMA_IRQHandler+0x1cc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d02c      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a24      	ldr	r2, [pc, #144]	; (80080dc <HAL_DMA_IRQHandler+0x1d0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d027      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a22      	ldr	r2, [pc, #136]	; (80080e0 <HAL_DMA_IRQHandler+0x1d4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d022      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a21      	ldr	r2, [pc, #132]	; (80080e4 <HAL_DMA_IRQHandler+0x1d8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d01d      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1f      	ldr	r2, [pc, #124]	; (80080e8 <HAL_DMA_IRQHandler+0x1dc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d018      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1e      	ldr	r2, [pc, #120]	; (80080ec <HAL_DMA_IRQHandler+0x1e0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d013      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1c      	ldr	r2, [pc, #112]	; (80080f0 <HAL_DMA_IRQHandler+0x1e4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00e      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1b      	ldr	r2, [pc, #108]	; (80080f4 <HAL_DMA_IRQHandler+0x1e8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d009      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <HAL_DMA_IRQHandler+0x1ec>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x194>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a18      	ldr	r2, [pc, #96]	; (80080fc <HAL_DMA_IRQHandler+0x1f0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d12f      	bne.n	8008100 <HAL_DMA_IRQHandler+0x1f4>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bf14      	ite	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	2300      	moveq	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	e02e      	b.n	8008114 <HAL_DMA_IRQHandler+0x208>
 80080b6:	bf00      	nop
 80080b8:	20000018 	.word	0x20000018
 80080bc:	1b4e81b5 	.word	0x1b4e81b5
 80080c0:	40020010 	.word	0x40020010
 80080c4:	40020028 	.word	0x40020028
 80080c8:	40020040 	.word	0x40020040
 80080cc:	40020058 	.word	0x40020058
 80080d0:	40020070 	.word	0x40020070
 80080d4:	40020088 	.word	0x40020088
 80080d8:	400200a0 	.word	0x400200a0
 80080dc:	400200b8 	.word	0x400200b8
 80080e0:	40020410 	.word	0x40020410
 80080e4:	40020428 	.word	0x40020428
 80080e8:	40020440 	.word	0x40020440
 80080ec:	40020458 	.word	0x40020458
 80080f0:	40020470 	.word	0x40020470
 80080f4:	40020488 	.word	0x40020488
 80080f8:	400204a0 	.word	0x400204a0
 80080fc:	400204b8 	.word	0x400204b8
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	bf14      	ite	ne
 800810e:	2301      	movne	r3, #1
 8008110:	2300      	moveq	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d015      	beq.n	8008144 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0204 	bic.w	r2, r2, #4
 8008126:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2208      	movs	r2, #8
 8008132:	409a      	lsls	r2, r3
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	f043 0201 	orr.w	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d06e      	beq.n	8008238 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a69      	ldr	r2, [pc, #420]	; (8008304 <HAL_DMA_IRQHandler+0x3f8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d04a      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a67      	ldr	r2, [pc, #412]	; (8008308 <HAL_DMA_IRQHandler+0x3fc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d045      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a66      	ldr	r2, [pc, #408]	; (800830c <HAL_DMA_IRQHandler+0x400>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d040      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a64      	ldr	r2, [pc, #400]	; (8008310 <HAL_DMA_IRQHandler+0x404>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d03b      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a63      	ldr	r2, [pc, #396]	; (8008314 <HAL_DMA_IRQHandler+0x408>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d036      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a61      	ldr	r2, [pc, #388]	; (8008318 <HAL_DMA_IRQHandler+0x40c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d031      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a60      	ldr	r2, [pc, #384]	; (800831c <HAL_DMA_IRQHandler+0x410>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d02c      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a5e      	ldr	r2, [pc, #376]	; (8008320 <HAL_DMA_IRQHandler+0x414>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d027      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a5d      	ldr	r2, [pc, #372]	; (8008324 <HAL_DMA_IRQHandler+0x418>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d022      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a5b      	ldr	r2, [pc, #364]	; (8008328 <HAL_DMA_IRQHandler+0x41c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d01d      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a5a      	ldr	r2, [pc, #360]	; (800832c <HAL_DMA_IRQHandler+0x420>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d018      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a58      	ldr	r2, [pc, #352]	; (8008330 <HAL_DMA_IRQHandler+0x424>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a57      	ldr	r2, [pc, #348]	; (8008334 <HAL_DMA_IRQHandler+0x428>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00e      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a55      	ldr	r2, [pc, #340]	; (8008338 <HAL_DMA_IRQHandler+0x42c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d009      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a54      	ldr	r2, [pc, #336]	; (800833c <HAL_DMA_IRQHandler+0x430>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d004      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2ee>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a52      	ldr	r2, [pc, #328]	; (8008340 <HAL_DMA_IRQHandler+0x434>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10a      	bne.n	8008210 <HAL_DMA_IRQHandler+0x304>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	e003      	b.n	8008218 <HAL_DMA_IRQHandler+0x30c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	2201      	movs	r2, #1
 8008226:	409a      	lsls	r2, r3
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008230:	f043 0202 	orr.w	r2, r3, #2
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	2204      	movs	r2, #4
 8008242:	409a      	lsls	r2, r3
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	4013      	ands	r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 808f 	beq.w	800836c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a2c      	ldr	r2, [pc, #176]	; (8008304 <HAL_DMA_IRQHandler+0x3f8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d04a      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a2a      	ldr	r2, [pc, #168]	; (8008308 <HAL_DMA_IRQHandler+0x3fc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d045      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a29      	ldr	r2, [pc, #164]	; (800830c <HAL_DMA_IRQHandler+0x400>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d040      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a27      	ldr	r2, [pc, #156]	; (8008310 <HAL_DMA_IRQHandler+0x404>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d03b      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a26      	ldr	r2, [pc, #152]	; (8008314 <HAL_DMA_IRQHandler+0x408>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d036      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a24      	ldr	r2, [pc, #144]	; (8008318 <HAL_DMA_IRQHandler+0x40c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d031      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a23      	ldr	r2, [pc, #140]	; (800831c <HAL_DMA_IRQHandler+0x410>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d02c      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a21      	ldr	r2, [pc, #132]	; (8008320 <HAL_DMA_IRQHandler+0x414>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d027      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a20      	ldr	r2, [pc, #128]	; (8008324 <HAL_DMA_IRQHandler+0x418>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d022      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1e      	ldr	r2, [pc, #120]	; (8008328 <HAL_DMA_IRQHandler+0x41c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01d      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1d      	ldr	r2, [pc, #116]	; (800832c <HAL_DMA_IRQHandler+0x420>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d018      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <HAL_DMA_IRQHandler+0x424>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <HAL_DMA_IRQHandler+0x428>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00e      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_DMA_IRQHandler+0x42c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a17      	ldr	r2, [pc, #92]	; (800833c <HAL_DMA_IRQHandler+0x430>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d004      	beq.n	80082ee <HAL_DMA_IRQHandler+0x3e2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_DMA_IRQHandler+0x434>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d12a      	bne.n	8008344 <HAL_DMA_IRQHandler+0x438>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bf14      	ite	ne
 80082fc:	2301      	movne	r3, #1
 80082fe:	2300      	moveq	r3, #0
 8008300:	b2db      	uxtb	r3, r3
 8008302:	e023      	b.n	800834c <HAL_DMA_IRQHandler+0x440>
 8008304:	40020010 	.word	0x40020010
 8008308:	40020028 	.word	0x40020028
 800830c:	40020040 	.word	0x40020040
 8008310:	40020058 	.word	0x40020058
 8008314:	40020070 	.word	0x40020070
 8008318:	40020088 	.word	0x40020088
 800831c:	400200a0 	.word	0x400200a0
 8008320:	400200b8 	.word	0x400200b8
 8008324:	40020410 	.word	0x40020410
 8008328:	40020428 	.word	0x40020428
 800832c:	40020440 	.word	0x40020440
 8008330:	40020458 	.word	0x40020458
 8008334:	40020470 	.word	0x40020470
 8008338:	40020488 	.word	0x40020488
 800833c:	400204a0 	.word	0x400204a0
 8008340:	400204b8 	.word	0x400204b8
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00d      	beq.n	800836c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2204      	movs	r2, #4
 800835a:	409a      	lsls	r2, r3
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	f043 0204 	orr.w	r2, r3, #4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008370:	f003 031f 	and.w	r3, r3, #31
 8008374:	2210      	movs	r2, #16
 8008376:	409a      	lsls	r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80a6 	beq.w	80084ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a85      	ldr	r2, [pc, #532]	; (800859c <HAL_DMA_IRQHandler+0x690>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04a      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a83      	ldr	r2, [pc, #524]	; (80085a0 <HAL_DMA_IRQHandler+0x694>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a82      	ldr	r2, [pc, #520]	; (80085a4 <HAL_DMA_IRQHandler+0x698>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d040      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a80      	ldr	r2, [pc, #512]	; (80085a8 <HAL_DMA_IRQHandler+0x69c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7f      	ldr	r2, [pc, #508]	; (80085ac <HAL_DMA_IRQHandler+0x6a0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d036      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7d      	ldr	r2, [pc, #500]	; (80085b0 <HAL_DMA_IRQHandler+0x6a4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d031      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7c      	ldr	r2, [pc, #496]	; (80085b4 <HAL_DMA_IRQHandler+0x6a8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02c      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7a      	ldr	r2, [pc, #488]	; (80085b8 <HAL_DMA_IRQHandler+0x6ac>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d027      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a79      	ldr	r2, [pc, #484]	; (80085bc <HAL_DMA_IRQHandler+0x6b0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a77      	ldr	r2, [pc, #476]	; (80085c0 <HAL_DMA_IRQHandler+0x6b4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a76      	ldr	r2, [pc, #472]	; (80085c4 <HAL_DMA_IRQHandler+0x6b8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a74      	ldr	r2, [pc, #464]	; (80085c8 <HAL_DMA_IRQHandler+0x6bc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a73      	ldr	r2, [pc, #460]	; (80085cc <HAL_DMA_IRQHandler+0x6c0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a71      	ldr	r2, [pc, #452]	; (80085d0 <HAL_DMA_IRQHandler+0x6c4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a70      	ldr	r2, [pc, #448]	; (80085d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_DMA_IRQHandler+0x516>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6e      	ldr	r2, [pc, #440]	; (80085d8 <HAL_DMA_IRQHandler+0x6cc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10a      	bne.n	8008438 <HAL_DMA_IRQHandler+0x52c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b00      	cmp	r3, #0
 800842e:	bf14      	ite	ne
 8008430:	2301      	movne	r3, #1
 8008432:	2300      	moveq	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	e009      	b.n	800844c <HAL_DMA_IRQHandler+0x540>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf14      	ite	ne
 8008446:	2301      	movne	r3, #1
 8008448:	2300      	moveq	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d03e      	beq.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2210      	movs	r2, #16
 800845a:	409a      	lsls	r2, r3
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d018      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d108      	bne.n	800848e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d024      	beq.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
 800848c:	e01f      	b.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01b      	beq.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
 800849e:	e016      	b.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d107      	bne.n	80084be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0208 	bic.w	r2, r2, #8
 80084bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d2:	f003 031f 	and.w	r3, r3, #31
 80084d6:	2220      	movs	r2, #32
 80084d8:	409a      	lsls	r2, r3
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8110 	beq.w	8008704 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2c      	ldr	r2, [pc, #176]	; (800859c <HAL_DMA_IRQHandler+0x690>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d04a      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <HAL_DMA_IRQHandler+0x694>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d045      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a29      	ldr	r2, [pc, #164]	; (80085a4 <HAL_DMA_IRQHandler+0x698>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d040      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <HAL_DMA_IRQHandler+0x69c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d03b      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a26      	ldr	r2, [pc, #152]	; (80085ac <HAL_DMA_IRQHandler+0x6a0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d036      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <HAL_DMA_IRQHandler+0x6a4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d031      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a23      	ldr	r2, [pc, #140]	; (80085b4 <HAL_DMA_IRQHandler+0x6a8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d02c      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <HAL_DMA_IRQHandler+0x6ac>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d027      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a20      	ldr	r2, [pc, #128]	; (80085bc <HAL_DMA_IRQHandler+0x6b0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d022      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1f      	ldr	r2, [pc, #124]	; (80085c0 <HAL_DMA_IRQHandler+0x6b4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d01d      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <HAL_DMA_IRQHandler+0x6b8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d018      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_DMA_IRQHandler+0x6bc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <HAL_DMA_IRQHandler+0x6c0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <HAL_DMA_IRQHandler+0x6c4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_DMA_IRQHandler+0x678>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <HAL_DMA_IRQHandler+0x6cc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d12b      	bne.n	80085dc <HAL_DMA_IRQHandler+0x6d0>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf14      	ite	ne
 8008592:	2301      	movne	r3, #1
 8008594:	2300      	moveq	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	e02a      	b.n	80085f0 <HAL_DMA_IRQHandler+0x6e4>
 800859a:	bf00      	nop
 800859c:	40020010 	.word	0x40020010
 80085a0:	40020028 	.word	0x40020028
 80085a4:	40020040 	.word	0x40020040
 80085a8:	40020058 	.word	0x40020058
 80085ac:	40020070 	.word	0x40020070
 80085b0:	40020088 	.word	0x40020088
 80085b4:	400200a0 	.word	0x400200a0
 80085b8:	400200b8 	.word	0x400200b8
 80085bc:	40020410 	.word	0x40020410
 80085c0:	40020428 	.word	0x40020428
 80085c4:	40020440 	.word	0x40020440
 80085c8:	40020458 	.word	0x40020458
 80085cc:	40020470 	.word	0x40020470
 80085d0:	40020488 	.word	0x40020488
 80085d4:	400204a0 	.word	0x400204a0
 80085d8:	400204b8 	.word	0x400204b8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bf14      	ite	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	2300      	moveq	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8087 	beq.w	8008704 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2220      	movs	r2, #32
 8008600:	409a      	lsls	r2, r3
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b04      	cmp	r3, #4
 8008610:	d139      	bne.n	8008686 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0216 	bic.w	r2, r2, #22
 8008620:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008630:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <HAL_DMA_IRQHandler+0x736>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0208 	bic.w	r2, r2, #8
 8008650:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008656:	f003 031f 	and.w	r3, r3, #31
 800865a:	223f      	movs	r2, #63	; 0x3f
 800865c:	409a      	lsls	r2, r3
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 834a 	beq.w	8008d10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
          }
          return;
 8008684:	e344      	b.n	8008d10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d018      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d108      	bne.n	80086b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02c      	beq.n	8008704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
 80086b2:	e027      	b.n	8008704 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d023      	beq.n	8008704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
 80086c4:	e01e      	b.n	8008704 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10f      	bne.n	80086f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0210 	bic.w	r2, r2, #16
 80086e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8306 	beq.w	8008d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8088 	beq.w	800882c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2204      	movs	r2, #4
 8008720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a7a      	ldr	r2, [pc, #488]	; (8008914 <HAL_DMA_IRQHandler+0xa08>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d04a      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a79      	ldr	r2, [pc, #484]	; (8008918 <HAL_DMA_IRQHandler+0xa0c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d045      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a77      	ldr	r2, [pc, #476]	; (800891c <HAL_DMA_IRQHandler+0xa10>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d040      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a76      	ldr	r2, [pc, #472]	; (8008920 <HAL_DMA_IRQHandler+0xa14>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d03b      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a74      	ldr	r2, [pc, #464]	; (8008924 <HAL_DMA_IRQHandler+0xa18>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d036      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a73      	ldr	r2, [pc, #460]	; (8008928 <HAL_DMA_IRQHandler+0xa1c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d031      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a71      	ldr	r2, [pc, #452]	; (800892c <HAL_DMA_IRQHandler+0xa20>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d02c      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a70      	ldr	r2, [pc, #448]	; (8008930 <HAL_DMA_IRQHandler+0xa24>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d027      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a6e      	ldr	r2, [pc, #440]	; (8008934 <HAL_DMA_IRQHandler+0xa28>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d022      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a6d      	ldr	r2, [pc, #436]	; (8008938 <HAL_DMA_IRQHandler+0xa2c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d01d      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a6b      	ldr	r2, [pc, #428]	; (800893c <HAL_DMA_IRQHandler+0xa30>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d018      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a6a      	ldr	r2, [pc, #424]	; (8008940 <HAL_DMA_IRQHandler+0xa34>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a68      	ldr	r2, [pc, #416]	; (8008944 <HAL_DMA_IRQHandler+0xa38>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00e      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a67      	ldr	r2, [pc, #412]	; (8008948 <HAL_DMA_IRQHandler+0xa3c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d009      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a65      	ldr	r2, [pc, #404]	; (800894c <HAL_DMA_IRQHandler+0xa40>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_DMA_IRQHandler+0x8b8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a64      	ldr	r2, [pc, #400]	; (8008950 <HAL_DMA_IRQHandler+0xa44>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <HAL_DMA_IRQHandler+0x8ca>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0201 	bic.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e007      	b.n	80087e6 <HAL_DMA_IRQHandler+0x8da>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d307      	bcc.n	8008802 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f2      	bne.n	80087e6 <HAL_DMA_IRQHandler+0x8da>
 8008800:	e000      	b.n	8008804 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008802:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2203      	movs	r2, #3
 8008816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800881a:	e003      	b.n	8008824 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8272 	beq.w	8008d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
 800883e:	e26c      	b.n	8008d1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a43      	ldr	r2, [pc, #268]	; (8008954 <HAL_DMA_IRQHandler+0xa48>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d022      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a42      	ldr	r2, [pc, #264]	; (8008958 <HAL_DMA_IRQHandler+0xa4c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d01d      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a40      	ldr	r2, [pc, #256]	; (800895c <HAL_DMA_IRQHandler+0xa50>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d018      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3f      	ldr	r2, [pc, #252]	; (8008960 <HAL_DMA_IRQHandler+0xa54>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d013      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3d      	ldr	r2, [pc, #244]	; (8008964 <HAL_DMA_IRQHandler+0xa58>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00e      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a3c      	ldr	r2, [pc, #240]	; (8008968 <HAL_DMA_IRQHandler+0xa5c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d009      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3a      	ldr	r2, [pc, #232]	; (800896c <HAL_DMA_IRQHandler+0xa60>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d004      	beq.n	8008890 <HAL_DMA_IRQHandler+0x984>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a39      	ldr	r2, [pc, #228]	; (8008970 <HAL_DMA_IRQHandler+0xa64>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d101      	bne.n	8008894 <HAL_DMA_IRQHandler+0x988>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <HAL_DMA_IRQHandler+0x98a>
 8008894:	2300      	movs	r3, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 823f 	beq.w	8008d1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2204      	movs	r2, #4
 80088ae:	409a      	lsls	r2, r3
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	4013      	ands	r3, r2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80cd 	beq.w	8008a54 <HAL_DMA_IRQHandler+0xb48>
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80c7 	beq.w	8008a54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	f003 031f 	and.w	r3, r3, #31
 80088ce:	2204      	movs	r2, #4
 80088d0:	409a      	lsls	r2, r3
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d049      	beq.n	8008974 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8210 	beq.w	8008d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088fc:	e20a      	b.n	8008d14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8206 	beq.w	8008d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008910:	e200      	b.n	8008d14 <HAL_DMA_IRQHandler+0xe08>
 8008912:	bf00      	nop
 8008914:	40020010 	.word	0x40020010
 8008918:	40020028 	.word	0x40020028
 800891c:	40020040 	.word	0x40020040
 8008920:	40020058 	.word	0x40020058
 8008924:	40020070 	.word	0x40020070
 8008928:	40020088 	.word	0x40020088
 800892c:	400200a0 	.word	0x400200a0
 8008930:	400200b8 	.word	0x400200b8
 8008934:	40020410 	.word	0x40020410
 8008938:	40020428 	.word	0x40020428
 800893c:	40020440 	.word	0x40020440
 8008940:	40020458 	.word	0x40020458
 8008944:	40020470 	.word	0x40020470
 8008948:	40020488 	.word	0x40020488
 800894c:	400204a0 	.word	0x400204a0
 8008950:	400204b8 	.word	0x400204b8
 8008954:	58025408 	.word	0x58025408
 8008958:	5802541c 	.word	0x5802541c
 800895c:	58025430 	.word	0x58025430
 8008960:	58025444 	.word	0x58025444
 8008964:	58025458 	.word	0x58025458
 8008968:	5802546c 	.word	0x5802546c
 800896c:	58025480 	.word	0x58025480
 8008970:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d160      	bne.n	8008a40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a7f      	ldr	r2, [pc, #508]	; (8008b80 <HAL_DMA_IRQHandler+0xc74>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d04a      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a7d      	ldr	r2, [pc, #500]	; (8008b84 <HAL_DMA_IRQHandler+0xc78>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d045      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a7c      	ldr	r2, [pc, #496]	; (8008b88 <HAL_DMA_IRQHandler+0xc7c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d040      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a7a      	ldr	r2, [pc, #488]	; (8008b8c <HAL_DMA_IRQHandler+0xc80>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d03b      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a79      	ldr	r2, [pc, #484]	; (8008b90 <HAL_DMA_IRQHandler+0xc84>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d036      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a77      	ldr	r2, [pc, #476]	; (8008b94 <HAL_DMA_IRQHandler+0xc88>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d031      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a76      	ldr	r2, [pc, #472]	; (8008b98 <HAL_DMA_IRQHandler+0xc8c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d02c      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a74      	ldr	r2, [pc, #464]	; (8008b9c <HAL_DMA_IRQHandler+0xc90>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d027      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a73      	ldr	r2, [pc, #460]	; (8008ba0 <HAL_DMA_IRQHandler+0xc94>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d022      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a71      	ldr	r2, [pc, #452]	; (8008ba4 <HAL_DMA_IRQHandler+0xc98>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01d      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a70      	ldr	r2, [pc, #448]	; (8008ba8 <HAL_DMA_IRQHandler+0xc9c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d018      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a6e      	ldr	r2, [pc, #440]	; (8008bac <HAL_DMA_IRQHandler+0xca0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a6d      	ldr	r2, [pc, #436]	; (8008bb0 <HAL_DMA_IRQHandler+0xca4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a6b      	ldr	r2, [pc, #428]	; (8008bb4 <HAL_DMA_IRQHandler+0xca8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d009      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a6a      	ldr	r2, [pc, #424]	; (8008bb8 <HAL_DMA_IRQHandler+0xcac>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <HAL_DMA_IRQHandler+0xb12>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a68      	ldr	r2, [pc, #416]	; (8008bbc <HAL_DMA_IRQHandler+0xcb0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d108      	bne.n	8008a30 <HAL_DMA_IRQHandler+0xb24>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0208 	bic.w	r2, r2, #8
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e007      	b.n	8008a40 <HAL_DMA_IRQHandler+0xb34>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8165 	beq.w	8008d14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a52:	e15f      	b.n	8008d14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	409a      	lsls	r2, r3
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80c5 	beq.w	8008bf4 <HAL_DMA_IRQHandler+0xce8>
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80bf 	beq.w	8008bf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	2202      	movs	r2, #2
 8008a80:	409a      	lsls	r2, r3
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d018      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 813a 	beq.w	8008d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aac:	e134      	b.n	8008d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 8130 	beq.w	8008d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ac0:	e12a      	b.n	8008d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 8089 	bne.w	8008be0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a2b      	ldr	r2, [pc, #172]	; (8008b80 <HAL_DMA_IRQHandler+0xc74>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d04a      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a29      	ldr	r2, [pc, #164]	; (8008b84 <HAL_DMA_IRQHandler+0xc78>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d045      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a28      	ldr	r2, [pc, #160]	; (8008b88 <HAL_DMA_IRQHandler+0xc7c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d040      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <HAL_DMA_IRQHandler+0xc80>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d03b      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a25      	ldr	r2, [pc, #148]	; (8008b90 <HAL_DMA_IRQHandler+0xc84>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d036      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a23      	ldr	r2, [pc, #140]	; (8008b94 <HAL_DMA_IRQHandler+0xc88>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d031      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a22      	ldr	r2, [pc, #136]	; (8008b98 <HAL_DMA_IRQHandler+0xc8c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d02c      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a20      	ldr	r2, [pc, #128]	; (8008b9c <HAL_DMA_IRQHandler+0xc90>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d027      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a1f      	ldr	r2, [pc, #124]	; (8008ba0 <HAL_DMA_IRQHandler+0xc94>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d022      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <HAL_DMA_IRQHandler+0xc98>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d01d      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_DMA_IRQHandler+0xc9c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d018      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a1a      	ldr	r2, [pc, #104]	; (8008bac <HAL_DMA_IRQHandler+0xca0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d013      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <HAL_DMA_IRQHandler+0xca4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00e      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <HAL_DMA_IRQHandler+0xca8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d009      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a16      	ldr	r2, [pc, #88]	; (8008bb8 <HAL_DMA_IRQHandler+0xcac>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d004      	beq.n	8008b6e <HAL_DMA_IRQHandler+0xc62>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <HAL_DMA_IRQHandler+0xcb0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d128      	bne.n	8008bc0 <HAL_DMA_IRQHandler+0xcb4>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0214 	bic.w	r2, r2, #20
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e027      	b.n	8008bd0 <HAL_DMA_IRQHandler+0xcc4>
 8008b80:	40020010 	.word	0x40020010
 8008b84:	40020028 	.word	0x40020028
 8008b88:	40020040 	.word	0x40020040
 8008b8c:	40020058 	.word	0x40020058
 8008b90:	40020070 	.word	0x40020070
 8008b94:	40020088 	.word	0x40020088
 8008b98:	400200a0 	.word	0x400200a0
 8008b9c:	400200b8 	.word	0x400200b8
 8008ba0:	40020410 	.word	0x40020410
 8008ba4:	40020428 	.word	0x40020428
 8008ba8:	40020440 	.word	0x40020440
 8008bac:	40020458 	.word	0x40020458
 8008bb0:	40020470 	.word	0x40020470
 8008bb4:	40020488 	.word	0x40020488
 8008bb8:	400204a0 	.word	0x400204a0
 8008bbc:	400204b8 	.word	0x400204b8
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 020a 	bic.w	r2, r2, #10
 8008bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8097 	beq.w	8008d18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bf2:	e091      	b.n	8008d18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf8:	f003 031f 	and.w	r3, r3, #31
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	409a      	lsls	r2, r3
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8088 	beq.w	8008d1a <HAL_DMA_IRQHandler+0xe0e>
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f003 0308 	and.w	r3, r3, #8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8082 	beq.w	8008d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a41      	ldr	r2, [pc, #260]	; (8008d20 <HAL_DMA_IRQHandler+0xe14>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d04a      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3f      	ldr	r2, [pc, #252]	; (8008d24 <HAL_DMA_IRQHandler+0xe18>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d045      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3e      	ldr	r2, [pc, #248]	; (8008d28 <HAL_DMA_IRQHandler+0xe1c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d040      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a3c      	ldr	r2, [pc, #240]	; (8008d2c <HAL_DMA_IRQHandler+0xe20>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d03b      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a3b      	ldr	r2, [pc, #236]	; (8008d30 <HAL_DMA_IRQHandler+0xe24>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d036      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a39      	ldr	r2, [pc, #228]	; (8008d34 <HAL_DMA_IRQHandler+0xe28>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d031      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a38      	ldr	r2, [pc, #224]	; (8008d38 <HAL_DMA_IRQHandler+0xe2c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d02c      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a36      	ldr	r2, [pc, #216]	; (8008d3c <HAL_DMA_IRQHandler+0xe30>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d027      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a35      	ldr	r2, [pc, #212]	; (8008d40 <HAL_DMA_IRQHandler+0xe34>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d022      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <HAL_DMA_IRQHandler+0xe38>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d01d      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <HAL_DMA_IRQHandler+0xe3c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d018      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <HAL_DMA_IRQHandler+0xe40>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d013      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <HAL_DMA_IRQHandler+0xe44>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00e      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <HAL_DMA_IRQHandler+0xe48>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d009      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a2c      	ldr	r2, [pc, #176]	; (8008d58 <HAL_DMA_IRQHandler+0xe4c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d004      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xdaa>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <HAL_DMA_IRQHandler+0xe50>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d108      	bne.n	8008cc8 <HAL_DMA_IRQHandler+0xdbc>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 021c 	bic.w	r2, r2, #28
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e007      	b.n	8008cd8 <HAL_DMA_IRQHandler+0xdcc>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 020e 	bic.w	r2, r2, #14
 8008cd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	409a      	lsls	r2, r3
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
 8008d0e:	e004      	b.n	8008d1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d1a:	3728      	adds	r7, #40	; 0x28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40020010 	.word	0x40020010
 8008d24:	40020028 	.word	0x40020028
 8008d28:	40020040 	.word	0x40020040
 8008d2c:	40020058 	.word	0x40020058
 8008d30:	40020070 	.word	0x40020070
 8008d34:	40020088 	.word	0x40020088
 8008d38:	400200a0 	.word	0x400200a0
 8008d3c:	400200b8 	.word	0x400200b8
 8008d40:	40020410 	.word	0x40020410
 8008d44:	40020428 	.word	0x40020428
 8008d48:	40020440 	.word	0x40020440
 8008d4c:	40020458 	.word	0x40020458
 8008d50:	40020470 	.word	0x40020470
 8008d54:	40020488 	.word	0x40020488
 8008d58:	400204a0 	.word	0x400204a0
 8008d5c:	400204b8 	.word	0x400204b8

08008d60 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a7f      	ldr	r2, [pc, #508]	; (8008f94 <DMA_SetConfig+0x21c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d072      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a7d      	ldr	r2, [pc, #500]	; (8008f98 <DMA_SetConfig+0x220>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d06d      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a7c      	ldr	r2, [pc, #496]	; (8008f9c <DMA_SetConfig+0x224>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d068      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a7a      	ldr	r2, [pc, #488]	; (8008fa0 <DMA_SetConfig+0x228>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d063      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a79      	ldr	r2, [pc, #484]	; (8008fa4 <DMA_SetConfig+0x22c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d05e      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a77      	ldr	r2, [pc, #476]	; (8008fa8 <DMA_SetConfig+0x230>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d059      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a76      	ldr	r2, [pc, #472]	; (8008fac <DMA_SetConfig+0x234>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d054      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a74      	ldr	r2, [pc, #464]	; (8008fb0 <DMA_SetConfig+0x238>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d04f      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a73      	ldr	r2, [pc, #460]	; (8008fb4 <DMA_SetConfig+0x23c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d04a      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a71      	ldr	r2, [pc, #452]	; (8008fb8 <DMA_SetConfig+0x240>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d045      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a70      	ldr	r2, [pc, #448]	; (8008fbc <DMA_SetConfig+0x244>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d040      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6e      	ldr	r2, [pc, #440]	; (8008fc0 <DMA_SetConfig+0x248>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d03b      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6d      	ldr	r2, [pc, #436]	; (8008fc4 <DMA_SetConfig+0x24c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d036      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a6b      	ldr	r2, [pc, #428]	; (8008fc8 <DMA_SetConfig+0x250>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d031      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a6a      	ldr	r2, [pc, #424]	; (8008fcc <DMA_SetConfig+0x254>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d02c      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a68      	ldr	r2, [pc, #416]	; (8008fd0 <DMA_SetConfig+0x258>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d027      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a67      	ldr	r2, [pc, #412]	; (8008fd4 <DMA_SetConfig+0x25c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d022      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a65      	ldr	r2, [pc, #404]	; (8008fd8 <DMA_SetConfig+0x260>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d01d      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a64      	ldr	r2, [pc, #400]	; (8008fdc <DMA_SetConfig+0x264>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d018      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a62      	ldr	r2, [pc, #392]	; (8008fe0 <DMA_SetConfig+0x268>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d013      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a61      	ldr	r2, [pc, #388]	; (8008fe4 <DMA_SetConfig+0x26c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00e      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a5f      	ldr	r2, [pc, #380]	; (8008fe8 <DMA_SetConfig+0x270>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d009      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a5e      	ldr	r2, [pc, #376]	; (8008fec <DMA_SetConfig+0x274>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d004      	beq.n	8008e82 <DMA_SetConfig+0x10a>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a5c      	ldr	r2, [pc, #368]	; (8008ff0 <DMA_SetConfig+0x278>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d101      	bne.n	8008e86 <DMA_SetConfig+0x10e>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <DMA_SetConfig+0x110>
 8008e86:	2300      	movs	r3, #0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00d      	beq.n	8008ea8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ea6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a39      	ldr	r2, [pc, #228]	; (8008f94 <DMA_SetConfig+0x21c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d04a      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <DMA_SetConfig+0x220>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d045      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a36      	ldr	r2, [pc, #216]	; (8008f9c <DMA_SetConfig+0x224>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d040      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a35      	ldr	r2, [pc, #212]	; (8008fa0 <DMA_SetConfig+0x228>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d03b      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <DMA_SetConfig+0x22c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d036      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a32      	ldr	r2, [pc, #200]	; (8008fa8 <DMA_SetConfig+0x230>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d031      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a30      	ldr	r2, [pc, #192]	; (8008fac <DMA_SetConfig+0x234>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d02c      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a2f      	ldr	r2, [pc, #188]	; (8008fb0 <DMA_SetConfig+0x238>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d027      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a2d      	ldr	r2, [pc, #180]	; (8008fb4 <DMA_SetConfig+0x23c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a2c      	ldr	r2, [pc, #176]	; (8008fb8 <DMA_SetConfig+0x240>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d01d      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a2a      	ldr	r2, [pc, #168]	; (8008fbc <DMA_SetConfig+0x244>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a29      	ldr	r2, [pc, #164]	; (8008fc0 <DMA_SetConfig+0x248>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <DMA_SetConfig+0x24c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <DMA_SetConfig+0x250>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a24      	ldr	r2, [pc, #144]	; (8008fcc <DMA_SetConfig+0x254>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <DMA_SetConfig+0x1d0>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a23      	ldr	r2, [pc, #140]	; (8008fd0 <DMA_SetConfig+0x258>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d101      	bne.n	8008f4c <DMA_SetConfig+0x1d4>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <DMA_SetConfig+0x1d6>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d059      	beq.n	8009006 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f56:	f003 031f 	and.w	r3, r3, #31
 8008f5a:	223f      	movs	r2, #63	; 0x3f
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	d138      	bne.n	8008ff4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f92:	e086      	b.n	80090a2 <DMA_SetConfig+0x32a>
 8008f94:	40020010 	.word	0x40020010
 8008f98:	40020028 	.word	0x40020028
 8008f9c:	40020040 	.word	0x40020040
 8008fa0:	40020058 	.word	0x40020058
 8008fa4:	40020070 	.word	0x40020070
 8008fa8:	40020088 	.word	0x40020088
 8008fac:	400200a0 	.word	0x400200a0
 8008fb0:	400200b8 	.word	0x400200b8
 8008fb4:	40020410 	.word	0x40020410
 8008fb8:	40020428 	.word	0x40020428
 8008fbc:	40020440 	.word	0x40020440
 8008fc0:	40020458 	.word	0x40020458
 8008fc4:	40020470 	.word	0x40020470
 8008fc8:	40020488 	.word	0x40020488
 8008fcc:	400204a0 	.word	0x400204a0
 8008fd0:	400204b8 	.word	0x400204b8
 8008fd4:	58025408 	.word	0x58025408
 8008fd8:	5802541c 	.word	0x5802541c
 8008fdc:	58025430 	.word	0x58025430
 8008fe0:	58025444 	.word	0x58025444
 8008fe4:	58025458 	.word	0x58025458
 8008fe8:	5802546c 	.word	0x5802546c
 8008fec:	58025480 	.word	0x58025480
 8008ff0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	60da      	str	r2, [r3, #12]
}
 8009004:	e04d      	b.n	80090a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a29      	ldr	r2, [pc, #164]	; (80090b0 <DMA_SetConfig+0x338>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d022      	beq.n	8009056 <DMA_SetConfig+0x2de>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a27      	ldr	r2, [pc, #156]	; (80090b4 <DMA_SetConfig+0x33c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01d      	beq.n	8009056 <DMA_SetConfig+0x2de>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a26      	ldr	r2, [pc, #152]	; (80090b8 <DMA_SetConfig+0x340>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d018      	beq.n	8009056 <DMA_SetConfig+0x2de>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a24      	ldr	r2, [pc, #144]	; (80090bc <DMA_SetConfig+0x344>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d013      	beq.n	8009056 <DMA_SetConfig+0x2de>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a23      	ldr	r2, [pc, #140]	; (80090c0 <DMA_SetConfig+0x348>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00e      	beq.n	8009056 <DMA_SetConfig+0x2de>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a21      	ldr	r2, [pc, #132]	; (80090c4 <DMA_SetConfig+0x34c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d009      	beq.n	8009056 <DMA_SetConfig+0x2de>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a20      	ldr	r2, [pc, #128]	; (80090c8 <DMA_SetConfig+0x350>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d004      	beq.n	8009056 <DMA_SetConfig+0x2de>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a1e      	ldr	r2, [pc, #120]	; (80090cc <DMA_SetConfig+0x354>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d101      	bne.n	800905a <DMA_SetConfig+0x2e2>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <DMA_SetConfig+0x2e4>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d020      	beq.n	80090a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	2201      	movs	r2, #1
 800906a:	409a      	lsls	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	d108      	bne.n	8009092 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	60da      	str	r2, [r3, #12]
}
 8009090:	e007      	b.n	80090a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	60da      	str	r2, [r3, #12]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	58025408 	.word	0x58025408
 80090b4:	5802541c 	.word	0x5802541c
 80090b8:	58025430 	.word	0x58025430
 80090bc:	58025444 	.word	0x58025444
 80090c0:	58025458 	.word	0x58025458
 80090c4:	5802546c 	.word	0x5802546c
 80090c8:	58025480 	.word	0x58025480
 80090cc:	58025494 	.word	0x58025494

080090d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a42      	ldr	r2, [pc, #264]	; (80091e8 <DMA_CalcBaseAndBitshift+0x118>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d04a      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a41      	ldr	r2, [pc, #260]	; (80091ec <DMA_CalcBaseAndBitshift+0x11c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d045      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a3f      	ldr	r2, [pc, #252]	; (80091f0 <DMA_CalcBaseAndBitshift+0x120>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d040      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a3e      	ldr	r2, [pc, #248]	; (80091f4 <DMA_CalcBaseAndBitshift+0x124>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d03b      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a3c      	ldr	r2, [pc, #240]	; (80091f8 <DMA_CalcBaseAndBitshift+0x128>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d036      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a3b      	ldr	r2, [pc, #236]	; (80091fc <DMA_CalcBaseAndBitshift+0x12c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d031      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a39      	ldr	r2, [pc, #228]	; (8009200 <DMA_CalcBaseAndBitshift+0x130>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d02c      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a38      	ldr	r2, [pc, #224]	; (8009204 <DMA_CalcBaseAndBitshift+0x134>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d027      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a36      	ldr	r2, [pc, #216]	; (8009208 <DMA_CalcBaseAndBitshift+0x138>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d022      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a35      	ldr	r2, [pc, #212]	; (800920c <DMA_CalcBaseAndBitshift+0x13c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d01d      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a33      	ldr	r2, [pc, #204]	; (8009210 <DMA_CalcBaseAndBitshift+0x140>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d018      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a32      	ldr	r2, [pc, #200]	; (8009214 <DMA_CalcBaseAndBitshift+0x144>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a30      	ldr	r2, [pc, #192]	; (8009218 <DMA_CalcBaseAndBitshift+0x148>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00e      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a2f      	ldr	r2, [pc, #188]	; (800921c <DMA_CalcBaseAndBitshift+0x14c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d009      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a2d      	ldr	r2, [pc, #180]	; (8009220 <DMA_CalcBaseAndBitshift+0x150>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <DMA_CalcBaseAndBitshift+0xa8>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a2c      	ldr	r2, [pc, #176]	; (8009224 <DMA_CalcBaseAndBitshift+0x154>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d101      	bne.n	800917c <DMA_CalcBaseAndBitshift+0xac>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <DMA_CalcBaseAndBitshift+0xae>
 800917c:	2300      	movs	r3, #0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d024      	beq.n	80091cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	3b10      	subs	r3, #16
 800918a:	4a27      	ldr	r2, [pc, #156]	; (8009228 <DMA_CalcBaseAndBitshift+0x158>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	091b      	lsrs	r3, r3, #4
 8009192:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	4a24      	ldr	r2, [pc, #144]	; (800922c <DMA_CalcBaseAndBitshift+0x15c>)
 800919c:	5cd3      	ldrb	r3, [r2, r3]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d908      	bls.n	80091bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <DMA_CalcBaseAndBitshift+0x160>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	659a      	str	r2, [r3, #88]	; 0x58
 80091ba:	e00d      	b.n	80091d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <DMA_CalcBaseAndBitshift+0x160>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6593      	str	r3, [r2, #88]	; 0x58
 80091ca:	e005      	b.n	80091d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	40020010 	.word	0x40020010
 80091ec:	40020028 	.word	0x40020028
 80091f0:	40020040 	.word	0x40020040
 80091f4:	40020058 	.word	0x40020058
 80091f8:	40020070 	.word	0x40020070
 80091fc:	40020088 	.word	0x40020088
 8009200:	400200a0 	.word	0x400200a0
 8009204:	400200b8 	.word	0x400200b8
 8009208:	40020410 	.word	0x40020410
 800920c:	40020428 	.word	0x40020428
 8009210:	40020440 	.word	0x40020440
 8009214:	40020458 	.word	0x40020458
 8009218:	40020470 	.word	0x40020470
 800921c:	40020488 	.word	0x40020488
 8009220:	400204a0 	.word	0x400204a0
 8009224:	400204b8 	.word	0x400204b8
 8009228:	aaaaaaab 	.word	0xaaaaaaab
 800922c:	0801821c 	.word	0x0801821c
 8009230:	fffffc00 	.word	0xfffffc00

08009234 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d120      	bne.n	800928a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924c:	2b03      	cmp	r3, #3
 800924e:	d858      	bhi.n	8009302 <DMA_CheckFifoParam+0xce>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <DMA_CheckFifoParam+0x24>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009269 	.word	0x08009269
 800925c:	0800927b 	.word	0x0800927b
 8009260:	08009269 	.word	0x08009269
 8009264:	08009303 	.word	0x08009303
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d048      	beq.n	8009306 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009278:	e045      	b.n	8009306 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009282:	d142      	bne.n	800930a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009288:	e03f      	b.n	800930a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009292:	d123      	bne.n	80092dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	2b03      	cmp	r3, #3
 800929a:	d838      	bhi.n	800930e <DMA_CheckFifoParam+0xda>
 800929c:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <DMA_CheckFifoParam+0x70>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	080092bb 	.word	0x080092bb
 80092ac:	080092b5 	.word	0x080092b5
 80092b0:	080092cd 	.word	0x080092cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
        break;
 80092b8:	e030      	b.n	800931c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d025      	beq.n	8009312 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092ca:	e022      	b.n	8009312 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092d4:	d11f      	bne.n	8009316 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092da:	e01c      	b.n	8009316 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d902      	bls.n	80092ea <DMA_CheckFifoParam+0xb6>
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d003      	beq.n	80092f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80092e8:	e018      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	73fb      	strb	r3, [r7, #15]
        break;
 80092ee:	e015      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00e      	beq.n	800931a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009300:	e00b      	b.n	800931a <DMA_CheckFifoParam+0xe6>
        break;
 8009302:	bf00      	nop
 8009304:	e00a      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        break;
 8009306:	bf00      	nop
 8009308:	e008      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        break;
 800930a:	bf00      	nop
 800930c:	e006      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        break;
 800930e:	bf00      	nop
 8009310:	e004      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        break;
 8009312:	bf00      	nop
 8009314:	e002      	b.n	800931c <DMA_CheckFifoParam+0xe8>
        break;
 8009316:	bf00      	nop
 8009318:	e000      	b.n	800931c <DMA_CheckFifoParam+0xe8>
    break;
 800931a:	bf00      	nop
    }
  }

  return status;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop

0800932c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a38      	ldr	r2, [pc, #224]	; (8009420 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d022      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a36      	ldr	r2, [pc, #216]	; (8009424 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01d      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a35      	ldr	r2, [pc, #212]	; (8009428 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a33      	ldr	r2, [pc, #204]	; (800942c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a32      	ldr	r2, [pc, #200]	; (8009430 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a30      	ldr	r2, [pc, #192]	; (8009434 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2f      	ldr	r2, [pc, #188]	; (8009438 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a2d      	ldr	r2, [pc, #180]	; (800943c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d101      	bne.n	800938e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01a      	beq.n	80093ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	3b08      	subs	r3, #8
 800939c:	4a28      	ldr	r2, [pc, #160]	; (8009440 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	091b      	lsrs	r3, r3, #4
 80093a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4b26      	ldr	r3, [pc, #152]	; (8009444 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	461a      	mov	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a24      	ldr	r2, [pc, #144]	; (8009448 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80093b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f003 031f 	and.w	r3, r3, #31
 80093c0:	2201      	movs	r2, #1
 80093c2:	409a      	lsls	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80093c8:	e024      	b.n	8009414 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	3b10      	subs	r3, #16
 80093d2:	4a1e      	ldr	r2, [pc, #120]	; (800944c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80093d4:	fba2 2303 	umull	r2, r3, r2, r3
 80093d8:	091b      	lsrs	r3, r3, #4
 80093da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4a1c      	ldr	r2, [pc, #112]	; (8009450 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d806      	bhi.n	80093f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4a1b      	ldr	r2, [pc, #108]	; (8009454 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d902      	bls.n	80093f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3308      	adds	r3, #8
 80093f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4b18      	ldr	r3, [pc, #96]	; (8009458 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	461a      	mov	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a16      	ldr	r2, [pc, #88]	; (800945c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009404:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f003 031f 	and.w	r3, r3, #31
 800940c:	2201      	movs	r2, #1
 800940e:	409a      	lsls	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009414:	bf00      	nop
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	58025408 	.word	0x58025408
 8009424:	5802541c 	.word	0x5802541c
 8009428:	58025430 	.word	0x58025430
 800942c:	58025444 	.word	0x58025444
 8009430:	58025458 	.word	0x58025458
 8009434:	5802546c 	.word	0x5802546c
 8009438:	58025480 	.word	0x58025480
 800943c:	58025494 	.word	0x58025494
 8009440:	cccccccd 	.word	0xcccccccd
 8009444:	16009600 	.word	0x16009600
 8009448:	58025880 	.word	0x58025880
 800944c:	aaaaaaab 	.word	0xaaaaaaab
 8009450:	400204b8 	.word	0x400204b8
 8009454:	4002040f 	.word	0x4002040f
 8009458:	10008200 	.word	0x10008200
 800945c:	40020880 	.word	0x40020880

08009460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d04a      	beq.n	800950c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b08      	cmp	r3, #8
 800947a:	d847      	bhi.n	800950c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a25      	ldr	r2, [pc, #148]	; (8009518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d022      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a24      	ldr	r2, [pc, #144]	; (800951c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d01d      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a22      	ldr	r2, [pc, #136]	; (8009520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d018      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a21      	ldr	r2, [pc, #132]	; (8009524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1f      	ldr	r2, [pc, #124]	; (8009528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00e      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d009      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d101      	bne.n	80094d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80094d0:	2300      	movs	r3, #0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	461a      	mov	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a15      	ldr	r2, [pc, #84]	; (800953c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80094e8:	671a      	str	r2, [r3, #112]	; 0x70
 80094ea:	e009      	b.n	8009500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4b14      	ldr	r3, [pc, #80]	; (8009540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	461a      	mov	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a11      	ldr	r2, [pc, #68]	; (8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80094fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3b01      	subs	r3, #1
 8009504:	2201      	movs	r2, #1
 8009506:	409a      	lsls	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	58025408 	.word	0x58025408
 800951c:	5802541c 	.word	0x5802541c
 8009520:	58025430 	.word	0x58025430
 8009524:	58025444 	.word	0x58025444
 8009528:	58025458 	.word	0x58025458
 800952c:	5802546c 	.word	0x5802546c
 8009530:	58025480 	.word	0x58025480
 8009534:	58025494 	.word	0x58025494
 8009538:	1600963f 	.word	0x1600963f
 800953c:	58025940 	.word	0x58025940
 8009540:	1000823f 	.word	0x1000823f
 8009544:	40020940 	.word	0x40020940

08009548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009556:	4b89      	ldr	r3, [pc, #548]	; (800977c <HAL_GPIO_Init+0x234>)
 8009558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800955a:	e194      	b.n	8009886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	2101      	movs	r1, #1
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	fa01 f303 	lsl.w	r3, r1, r3
 8009568:	4013      	ands	r3, r2
 800956a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 8186 	beq.w	8009880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b01      	cmp	r3, #1
 800957e:	d005      	beq.n	800958c <HAL_GPIO_Init+0x44>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d130      	bne.n	80095ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	2203      	movs	r2, #3
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	4013      	ands	r3, r2
 80095a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095c2:	2201      	movs	r2, #1
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	43db      	mvns	r3, r3
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	4013      	ands	r3, r2
 80095d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	091b      	lsrs	r3, r3, #4
 80095d8:	f003 0201 	and.w	r2, r3, #1
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d017      	beq.n	800962a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	2203      	movs	r2, #3
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	43db      	mvns	r3, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4013      	ands	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	4313      	orrs	r3, r2
 8009622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	2b02      	cmp	r3, #2
 8009634:	d123      	bne.n	800967e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	08da      	lsrs	r2, r3, #3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3208      	adds	r2, #8
 800963e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	220f      	movs	r2, #15
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43db      	mvns	r3, r3
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	4013      	ands	r3, r2
 8009658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691a      	ldr	r2, [r3, #16]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	4313      	orrs	r3, r2
 800966e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	08da      	lsrs	r2, r3, #3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3208      	adds	r2, #8
 8009678:	69b9      	ldr	r1, [r7, #24]
 800967a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	2203      	movs	r2, #3
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	43db      	mvns	r3, r3
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	4013      	ands	r3, r2
 8009694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f003 0203 	and.w	r2, r3, #3
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	fa02 f303 	lsl.w	r3, r2, r3
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80e0 	beq.w	8009880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096c0:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <HAL_GPIO_Init+0x238>)
 80096c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096c6:	4a2e      	ldr	r2, [pc, #184]	; (8009780 <HAL_GPIO_Init+0x238>)
 80096c8:	f043 0302 	orr.w	r3, r3, #2
 80096cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80096d0:	4b2b      	ldr	r3, [pc, #172]	; (8009780 <HAL_GPIO_Init+0x238>)
 80096d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096de:	4a29      	ldr	r2, [pc, #164]	; (8009784 <HAL_GPIO_Init+0x23c>)
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	089b      	lsrs	r3, r3, #2
 80096e4:	3302      	adds	r3, #2
 80096e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	220f      	movs	r2, #15
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	43db      	mvns	r3, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	4013      	ands	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a20      	ldr	r2, [pc, #128]	; (8009788 <HAL_GPIO_Init+0x240>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d052      	beq.n	80097b0 <HAL_GPIO_Init+0x268>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a1f      	ldr	r2, [pc, #124]	; (800978c <HAL_GPIO_Init+0x244>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d031      	beq.n	8009776 <HAL_GPIO_Init+0x22e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <HAL_GPIO_Init+0x248>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d02b      	beq.n	8009772 <HAL_GPIO_Init+0x22a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <HAL_GPIO_Init+0x24c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d025      	beq.n	800976e <HAL_GPIO_Init+0x226>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a1c      	ldr	r2, [pc, #112]	; (8009798 <HAL_GPIO_Init+0x250>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01f      	beq.n	800976a <HAL_GPIO_Init+0x222>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a1b      	ldr	r2, [pc, #108]	; (800979c <HAL_GPIO_Init+0x254>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d019      	beq.n	8009766 <HAL_GPIO_Init+0x21e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a1a      	ldr	r2, [pc, #104]	; (80097a0 <HAL_GPIO_Init+0x258>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d013      	beq.n	8009762 <HAL_GPIO_Init+0x21a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a19      	ldr	r2, [pc, #100]	; (80097a4 <HAL_GPIO_Init+0x25c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00d      	beq.n	800975e <HAL_GPIO_Init+0x216>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a18      	ldr	r2, [pc, #96]	; (80097a8 <HAL_GPIO_Init+0x260>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d007      	beq.n	800975a <HAL_GPIO_Init+0x212>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a17      	ldr	r2, [pc, #92]	; (80097ac <HAL_GPIO_Init+0x264>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d101      	bne.n	8009756 <HAL_GPIO_Init+0x20e>
 8009752:	2309      	movs	r3, #9
 8009754:	e02d      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 8009756:	230a      	movs	r3, #10
 8009758:	e02b      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 800975a:	2308      	movs	r3, #8
 800975c:	e029      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 800975e:	2307      	movs	r3, #7
 8009760:	e027      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 8009762:	2306      	movs	r3, #6
 8009764:	e025      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 8009766:	2305      	movs	r3, #5
 8009768:	e023      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 800976a:	2304      	movs	r3, #4
 800976c:	e021      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 800976e:	2303      	movs	r3, #3
 8009770:	e01f      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 8009772:	2302      	movs	r3, #2
 8009774:	e01d      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 8009776:	2301      	movs	r3, #1
 8009778:	e01b      	b.n	80097b2 <HAL_GPIO_Init+0x26a>
 800977a:	bf00      	nop
 800977c:	58000080 	.word	0x58000080
 8009780:	58024400 	.word	0x58024400
 8009784:	58000400 	.word	0x58000400
 8009788:	58020000 	.word	0x58020000
 800978c:	58020400 	.word	0x58020400
 8009790:	58020800 	.word	0x58020800
 8009794:	58020c00 	.word	0x58020c00
 8009798:	58021000 	.word	0x58021000
 800979c:	58021400 	.word	0x58021400
 80097a0:	58021800 	.word	0x58021800
 80097a4:	58021c00 	.word	0x58021c00
 80097a8:	58022000 	.word	0x58022000
 80097ac:	58022400 	.word	0x58022400
 80097b0:	2300      	movs	r3, #0
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	f002 0203 	and.w	r2, r2, #3
 80097b8:	0092      	lsls	r2, r2, #2
 80097ba:	4093      	lsls	r3, r2
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	4313      	orrs	r3, r2
 80097c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80097c2:	4938      	ldr	r1, [pc, #224]	; (80098a4 <HAL_GPIO_Init+0x35c>)
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	089b      	lsrs	r3, r3, #2
 80097c8:	3302      	adds	r3, #2
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80097d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	43db      	mvns	r3, r3
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4013      	ands	r3, r2
 80097e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80097f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80097fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	43db      	mvns	r3, r3
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	4013      	ands	r3, r2
 800980e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	43db      	mvns	r3, r3
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	4013      	ands	r3, r2
 800983a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	4313      	orrs	r3, r2
 800984e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	43db      	mvns	r3, r3
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	4013      	ands	r3, r2
 8009864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4313      	orrs	r3, r2
 8009878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	3301      	adds	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	fa22 f303 	lsr.w	r3, r2, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	f47f ae63 	bne.w	800955c <HAL_GPIO_Init+0x14>
  }
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	3724      	adds	r7, #36	; 0x24
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	58000400 	.word	0x58000400

080098a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	887b      	ldrh	r3, [r7, #2]
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
 80098c4:	e001      	b.n	80098ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
 80098e4:	4613      	mov	r3, r2
 80098e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098e8:	787b      	ldrb	r3, [r7, #1]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098ee:	887a      	ldrh	r2, [r7, #2]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80098f4:	e003      	b.n	80098fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80098f6:	887b      	ldrh	r3, [r7, #2]
 80098f8:	041a      	lsls	r2, r3, #16
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	619a      	str	r2, [r3, #24]
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800990a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990c:	b08f      	sub	sp, #60	; 0x3c
 800990e:	af0a      	add	r7, sp, #40	; 0x28
 8009910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e054      	b.n	80099c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d106      	bne.n	800993c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7fb fa76 	bl	8004e28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2203      	movs	r2, #3
 8009940:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f00b faf3 	bl	8014f46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	687e      	ldr	r6, [r7, #4]
 8009968:	466d      	mov	r5, sp
 800996a:	f106 0410 	add.w	r4, r6, #16
 800996e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800997a:	e885 0003 	stmia.w	r5, {r0, r1}
 800997e:	1d33      	adds	r3, r6, #4
 8009980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009982:	6838      	ldr	r0, [r7, #0]
 8009984:	f00b fa60 	bl	8014e48 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2101      	movs	r1, #1
 800998e:	4618      	mov	r0, r3
 8009990:	f00b faea 	bl	8014f68 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	687e      	ldr	r6, [r7, #4]
 800999c:	466d      	mov	r5, sp
 800999e:	f106 0410 	add.w	r4, r6, #16
 80099a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80099ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80099b2:	1d33      	adds	r3, r6, #4
 80099b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099b6:	6838      	ldr	r0, [r7, #0]
 80099b8:	f00b fc92 	bl	80152e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099ce <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099ce:	b590      	push	{r4, r7, lr}
 80099d0:	b089      	sub	sp, #36	; 0x24
 80099d2:	af04      	add	r7, sp, #16
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	4603      	mov	r3, r0
 80099de:	70fb      	strb	r3, [r7, #3]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70bb      	strb	r3, [r7, #2]
 80099e4:	4613      	mov	r3, r2
 80099e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_HCD_HC_Init+0x28>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e076      	b.n	8009ae4 <HAL_HCD_HC_Init+0x116>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	212c      	movs	r1, #44	; 0x2c
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	333d      	adds	r3, #61	; 0x3d
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	212c      	movs	r1, #44	; 0x2c
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3338      	adds	r3, #56	; 0x38
 8009a1e:	787a      	ldrb	r2, [r7, #1]
 8009a20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	212c      	movs	r1, #44	; 0x2c
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3340      	adds	r3, #64	; 0x40
 8009a30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009a32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	212c      	movs	r1, #44	; 0x2c
 8009a3a:	fb01 f303 	mul.w	r3, r1, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	3339      	adds	r3, #57	; 0x39
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	212c      	movs	r1, #44	; 0x2c
 8009a4c:	fb01 f303 	mul.w	r3, r1, r3
 8009a50:	4413      	add	r3, r2
 8009a52:	333f      	adds	r3, #63	; 0x3f
 8009a54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009a58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	78ba      	ldrb	r2, [r7, #2]
 8009a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a62:	b2d0      	uxtb	r0, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	212c      	movs	r1, #44	; 0x2c
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	333a      	adds	r3, #58	; 0x3a
 8009a70:	4602      	mov	r2, r0
 8009a72:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da09      	bge.n	8009a90 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	212c      	movs	r1, #44	; 0x2c
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	333b      	adds	r3, #59	; 0x3b
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	e008      	b.n	8009aa2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	212c      	movs	r1, #44	; 0x2c
 8009a96:	fb01 f303 	mul.w	r3, r1, r3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	333b      	adds	r3, #59	; 0x3b
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	212c      	movs	r1, #44	; 0x2c
 8009aa8:	fb01 f303 	mul.w	r3, r1, r3
 8009aac:	4413      	add	r3, r2
 8009aae:	333c      	adds	r3, #60	; 0x3c
 8009ab0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009ab4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	787c      	ldrb	r4, [r7, #1]
 8009abc:	78ba      	ldrb	r2, [r7, #2]
 8009abe:	78f9      	ldrb	r1, [r7, #3]
 8009ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ac2:	9302      	str	r3, [sp, #8]
 8009ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	f00b fd87 	bl	80155e4 <USB_HC_Init>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}

08009aec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d101      	bne.n	8009b0a <HAL_HCD_HC_Halt+0x1e>
 8009b06:	2302      	movs	r3, #2
 8009b08:	e00f      	b.n	8009b2a <HAL_HCD_HC_Halt+0x3e>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	4611      	mov	r1, r2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f00b ffd9 	bl	8015ad2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	70fb      	strb	r3, [r7, #3]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70bb      	strb	r3, [r7, #2]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	212c      	movs	r1, #44	; 0x2c
 8009b54:	fb01 f303 	mul.w	r3, r1, r3
 8009b58:	4413      	add	r3, r2
 8009b5a:	333b      	adds	r3, #59	; 0x3b
 8009b5c:	78ba      	ldrb	r2, [r7, #2]
 8009b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	212c      	movs	r1, #44	; 0x2c
 8009b66:	fb01 f303 	mul.w	r3, r1, r3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	333f      	adds	r3, #63	; 0x3f
 8009b6e:	787a      	ldrb	r2, [r7, #1]
 8009b70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009b72:	7c3b      	ldrb	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d112      	bne.n	8009b9e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	212c      	movs	r1, #44	; 0x2c
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	3342      	adds	r3, #66	; 0x42
 8009b86:	2203      	movs	r2, #3
 8009b88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	212c      	movs	r1, #44	; 0x2c
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	333d      	adds	r3, #61	; 0x3d
 8009b98:	7f3a      	ldrb	r2, [r7, #28]
 8009b9a:	701a      	strb	r2, [r3, #0]
 8009b9c:	e008      	b.n	8009bb0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	212c      	movs	r1, #44	; 0x2c
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	3342      	adds	r3, #66	; 0x42
 8009bac:	2202      	movs	r2, #2
 8009bae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009bb0:	787b      	ldrb	r3, [r7, #1]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	f200 80c6 	bhi.w	8009d44 <HAL_HCD_HC_SubmitRequest+0x210>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bd1 	.word	0x08009bd1
 8009bc4:	08009d31 	.word	0x08009d31
 8009bc8:	08009c35 	.word	0x08009c35
 8009bcc:	08009cb3 	.word	0x08009cb3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009bd0:	7c3b      	ldrb	r3, [r7, #16]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	f040 80b8 	bne.w	8009d48 <HAL_HCD_HC_SubmitRequest+0x214>
 8009bd8:	78bb      	ldrb	r3, [r7, #2]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f040 80b4 	bne.w	8009d48 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009be0:	8b3b      	ldrh	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d108      	bne.n	8009bf8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	212c      	movs	r1, #44	; 0x2c
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3355      	adds	r3, #85	; 0x55
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	212c      	movs	r1, #44	; 0x2c
 8009bfe:	fb01 f303 	mul.w	r3, r1, r3
 8009c02:	4413      	add	r3, r2
 8009c04:	3355      	adds	r3, #85	; 0x55
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	212c      	movs	r1, #44	; 0x2c
 8009c12:	fb01 f303 	mul.w	r3, r1, r3
 8009c16:	4413      	add	r3, r2
 8009c18:	3342      	adds	r3, #66	; 0x42
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009c1e:	e093      	b.n	8009d48 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	212c      	movs	r1, #44	; 0x2c
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	3342      	adds	r3, #66	; 0x42
 8009c2e:	2202      	movs	r2, #2
 8009c30:	701a      	strb	r2, [r3, #0]
      break;
 8009c32:	e089      	b.n	8009d48 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009c34:	78bb      	ldrb	r3, [r7, #2]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11d      	bne.n	8009c76 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	212c      	movs	r1, #44	; 0x2c
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	3355      	adds	r3, #85	; 0x55
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	212c      	movs	r1, #44	; 0x2c
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	3342      	adds	r3, #66	; 0x42
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009c60:	e073      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	212c      	movs	r1, #44	; 0x2c
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3342      	adds	r3, #66	; 0x42
 8009c70:	2202      	movs	r2, #2
 8009c72:	701a      	strb	r2, [r3, #0]
      break;
 8009c74:	e069      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	212c      	movs	r1, #44	; 0x2c
 8009c7c:	fb01 f303 	mul.w	r3, r1, r3
 8009c80:	4413      	add	r3, r2
 8009c82:	3354      	adds	r3, #84	; 0x54
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	212c      	movs	r1, #44	; 0x2c
 8009c90:	fb01 f303 	mul.w	r3, r1, r3
 8009c94:	4413      	add	r3, r2
 8009c96:	3342      	adds	r3, #66	; 0x42
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
      break;
 8009c9c:	e055      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	212c      	movs	r1, #44	; 0x2c
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	4413      	add	r3, r2
 8009caa:	3342      	adds	r3, #66	; 0x42
 8009cac:	2202      	movs	r2, #2
 8009cae:	701a      	strb	r2, [r3, #0]
      break;
 8009cb0:	e04b      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009cb2:	78bb      	ldrb	r3, [r7, #2]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11d      	bne.n	8009cf4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	212c      	movs	r1, #44	; 0x2c
 8009cbe:	fb01 f303 	mul.w	r3, r1, r3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	3355      	adds	r3, #85	; 0x55
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	212c      	movs	r1, #44	; 0x2c
 8009cd2:	fb01 f303 	mul.w	r3, r1, r3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3342      	adds	r3, #66	; 0x42
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009cde:	e034      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	212c      	movs	r1, #44	; 0x2c
 8009ce6:	fb01 f303 	mul.w	r3, r1, r3
 8009cea:	4413      	add	r3, r2
 8009cec:	3342      	adds	r3, #66	; 0x42
 8009cee:	2202      	movs	r2, #2
 8009cf0:	701a      	strb	r2, [r3, #0]
      break;
 8009cf2:	e02a      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	212c      	movs	r1, #44	; 0x2c
 8009cfa:	fb01 f303 	mul.w	r3, r1, r3
 8009cfe:	4413      	add	r3, r2
 8009d00:	3354      	adds	r3, #84	; 0x54
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	212c      	movs	r1, #44	; 0x2c
 8009d0e:	fb01 f303 	mul.w	r3, r1, r3
 8009d12:	4413      	add	r3, r2
 8009d14:	3342      	adds	r3, #66	; 0x42
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
      break;
 8009d1a:	e016      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	212c      	movs	r1, #44	; 0x2c
 8009d22:	fb01 f303 	mul.w	r3, r1, r3
 8009d26:	4413      	add	r3, r2
 8009d28:	3342      	adds	r3, #66	; 0x42
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	701a      	strb	r2, [r3, #0]
      break;
 8009d2e:	e00c      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	212c      	movs	r1, #44	; 0x2c
 8009d36:	fb01 f303 	mul.w	r3, r1, r3
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3342      	adds	r3, #66	; 0x42
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
      break;
 8009d42:	e002      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009d44:	bf00      	nop
 8009d46:	e000      	b.n	8009d4a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009d48:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	212c      	movs	r1, #44	; 0x2c
 8009d50:	fb01 f303 	mul.w	r3, r1, r3
 8009d54:	4413      	add	r3, r2
 8009d56:	3344      	adds	r3, #68	; 0x44
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	8b3a      	ldrh	r2, [r7, #24]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	202c      	movs	r0, #44	; 0x2c
 8009d64:	fb00 f303 	mul.w	r3, r0, r3
 8009d68:	440b      	add	r3, r1
 8009d6a:	334c      	adds	r3, #76	; 0x4c
 8009d6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	212c      	movs	r1, #44	; 0x2c
 8009d74:	fb01 f303 	mul.w	r3, r1, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	3360      	adds	r3, #96	; 0x60
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	212c      	movs	r1, #44	; 0x2c
 8009d86:	fb01 f303 	mul.w	r3, r1, r3
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3350      	adds	r3, #80	; 0x50
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	212c      	movs	r1, #44	; 0x2c
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3339      	adds	r3, #57	; 0x39
 8009da0:	78fa      	ldrb	r2, [r7, #3]
 8009da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	212c      	movs	r1, #44	; 0x2c
 8009daa:	fb01 f303 	mul.w	r3, r1, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	3361      	adds	r3, #97	; 0x61
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	222c      	movs	r2, #44	; 0x2c
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	3338      	adds	r3, #56	; 0x38
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	18d1      	adds	r1, r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f00b fd2c 	bl	801582c <USB_HC_StartXfer>
 8009dd4:	4603      	mov	r3, r0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop

08009de0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f00b fa30 	bl	801525c <USB_GetMode>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	f040 80fa 	bne.w	8009ff8 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f00b f9f3 	bl	80151f4 <USB_ReadInterrupts>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80f0 	beq.w	8009ff6 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f00b f9ea 	bl	80151f4 <USB_ReadInterrupts>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e2a:	d104      	bne.n	8009e36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f00b f9da 	bl	80151f4 <USB_ReadInterrupts>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e4a:	d104      	bne.n	8009e56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f00b f9ca 	bl	80151f4 <USB_ReadInterrupts>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e6a:	d104      	bne.n	8009e76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009e74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f00b f9ba 	bl	80151f4 <USB_ReadInterrupts>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d103      	bne.n	8009e92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f00b f9ac 	bl	80151f4 <USB_ReadInterrupts>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea6:	d120      	bne.n	8009eea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009eb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d113      	bne.n	8009eea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009ec2:	2110      	movs	r1, #16
 8009ec4:	6938      	ldr	r0, [r7, #16]
 8009ec6:	f00b f89b 	bl	8015000 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009eca:	6938      	ldr	r0, [r7, #16]
 8009ecc:	f00b f8cc 	bl	8015068 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d105      	bne.n	8009ee4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2101      	movs	r1, #1
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f00b fab8 	bl	8015454 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7fb f81d 	bl	8004f24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f00b f980 	bl	80151f4 <USB_ReadInterrupts>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009efe:	d102      	bne.n	8009f06 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f9a3 	bl	800b24c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f00b f972 	bl	80151f4 <USB_ReadInterrupts>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d106      	bne.n	8009f28 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7fa ffe6 	bl	8004eec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2208      	movs	r2, #8
 8009f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f00b f961 	bl	80151f4 <USB_ReadInterrupts>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	d101      	bne.n	8009f40 <HAL_HCD_IRQHandler+0x160>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e000      	b.n	8009f42 <HAL_HCD_IRQHandler+0x162>
 8009f40:	2300      	movs	r3, #0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d012      	beq.n	8009f6c <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0210 	bic.w	r2, r2, #16
 8009f54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 f8a6 	bl	800b0a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0210 	orr.w	r2, r2, #16
 8009f6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f00b f93f 	bl	80151f4 <USB_ReadInterrupts>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f80:	d13a      	bne.n	8009ff8 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f00b fd92 	bl	8015ab0 <USB_HC_ReadInterrupt>
 8009f8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e025      	b.n	8009fe0 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d018      	beq.n	8009fda <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fbe:	d106      	bne.n	8009fce <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f8ab 	bl	800a122 <HCD_HC_IN_IRQHandler>
 8009fcc:	e005      	b.n	8009fda <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fcb5 	bl	800a944 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d3d4      	bcc.n	8009f94 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ff2:	615a      	str	r2, [r3, #20]
 8009ff4:	e000      	b.n	8009ff8 <HAL_HCD_IRQHandler+0x218>
      return;
 8009ff6:	bf00      	nop
    }
  }
}
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_HCD_Start+0x16>
 800a010:	2302      	movs	r3, #2
 800a012:	e013      	b.n	800a03c <HAL_HCD_Start+0x3e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2101      	movs	r1, #1
 800a022:	4618      	mov	r0, r3
 800a024:	f00b fa7d 	bl	8015522 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f00a ff79 	bl	8014f24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_HCD_Stop+0x16>
 800a056:	2302      	movs	r3, #2
 800a058:	e00d      	b.n	800a076 <HAL_HCD_Stop+0x32>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4618      	mov	r0, r3
 800a068:	f00b fe6c 	bl	8015d44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f00b fa1f 	bl	80154ce <USB_ResetPort>
 800a090:	4603      	mov	r3, r0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	212c      	movs	r1, #44	; 0x2c
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	3360      	adds	r3, #96	; 0x60
 800a0b4:	781b      	ldrb	r3, [r3, #0]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	212c      	movs	r1, #44	; 0x2c
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	3350      	adds	r3, #80	; 0x50
 800a0dc:	681b      	ldr	r3, [r3, #0]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f00b fa63 	bl	80155c2 <USB_GetCurrentFrame>
 800a0fc:	4603      	mov	r3, r0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f00b fa3e 	bl	8015594 <USB_GetHostSpeed>
 800a118:	4603      	mov	r3, r0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f00b f86a 	bl	801521a <USB_ReadChInterrupts>
 800a146:	4603      	mov	r3, r0
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d119      	bne.n	800a184 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4413      	add	r3, r2
 800a158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a15c:	461a      	mov	r2, r3
 800a15e:	2304      	movs	r3, #4
 800a160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	212c      	movs	r1, #44	; 0x2c
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	3361      	adds	r3, #97	; 0x61
 800a170:	2207      	movs	r2, #7
 800a172:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	78fa      	ldrb	r2, [r7, #3]
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f00b fca8 	bl	8015ad2 <USB_HC_Halt>
 800a182:	e09a      	b.n	800a2ba <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f00b f844 	bl	801521a <USB_ReadChInterrupts>
 800a192:	4603      	mov	r3, r0
 800a194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19c:	d11a      	bne.n	800a1d4 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	212c      	movs	r1, #44	; 0x2c
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	3361      	adds	r3, #97	; 0x61
 800a1c0:	2208      	movs	r2, #8
 800a1c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f00b fc80 	bl	8015ad2 <USB_HC_Halt>
 800a1d2:	e072      	b.n	800a2ba <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f00b f81c 	bl	801521a <USB_ReadChInterrupts>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f003 0308 	and.w	r3, r3, #8
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d119      	bne.n	800a220 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2308      	movs	r3, #8
 800a1fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	212c      	movs	r1, #44	; 0x2c
 800a204:	fb01 f303 	mul.w	r3, r1, r3
 800a208:	4413      	add	r3, r2
 800a20a:	3361      	adds	r3, #97	; 0x61
 800a20c:	2206      	movs	r2, #6
 800a20e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	78fa      	ldrb	r2, [r7, #3]
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f00b fc5a 	bl	8015ad2 <USB_HC_Halt>
 800a21e:	e04c      	b.n	800a2ba <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f00a fff6 	bl	801521a <USB_ReadChInterrupts>
 800a22e:	4603      	mov	r3, r0
 800a230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a238:	d11a      	bne.n	800a270 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a246:	461a      	mov	r2, r3
 800a248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	212c      	movs	r1, #44	; 0x2c
 800a254:	fb01 f303 	mul.w	r3, r1, r3
 800a258:	4413      	add	r3, r2
 800a25a:	3361      	adds	r3, #97	; 0x61
 800a25c:	2209      	movs	r2, #9
 800a25e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	78fa      	ldrb	r2, [r7, #3]
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f00b fc32 	bl	8015ad2 <USB_HC_Halt>
 800a26e:	e024      	b.n	800a2ba <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f00a ffce 	bl	801521a <USB_ReadChInterrupts>
 800a27e:	4603      	mov	r3, r0
 800a280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a284:	2b80      	cmp	r3, #128	; 0x80
 800a286:	d118      	bne.n	800a2ba <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	461a      	mov	r2, r3
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	212c      	movs	r1, #44	; 0x2c
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3361      	adds	r3, #97	; 0x61
 800a2a8:	2207      	movs	r2, #7
 800a2aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	78fa      	ldrb	r2, [r7, #3]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f00b fc0c 	bl	8015ad2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f00a ffa9 	bl	801521a <USB_ReadChInterrupts>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d2:	d111      	bne.n	800a2f8 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f00b fbf8 	bl	8015ad2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2f4:	6093      	str	r3, [r2, #8]
 800a2f6:	e322      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	78fa      	ldrb	r2, [r7, #3]
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f00a ff8a 	bl	801521a <USB_ReadChInterrupts>
 800a306:	4603      	mov	r3, r0
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	f040 80f0 	bne.w	800a4f2 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31e:	461a      	mov	r2, r3
 800a320:	2320      	movs	r3, #32
 800a322:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d019      	beq.n	800a360 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	212c      	movs	r1, #44	; 0x2c
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	4413      	add	r3, r2
 800a338:	3348      	adds	r3, #72	; 0x48
 800a33a:	6819      	ldr	r1, [r3, #0]
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4413      	add	r3, r2
 800a344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	1a8a      	subs	r2, r1, r2
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	202c      	movs	r0, #44	; 0x2c
 800a356:	fb00 f303 	mul.w	r3, r0, r3
 800a35a:	440b      	add	r3, r1
 800a35c:	3350      	adds	r3, #80	; 0x50
 800a35e:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	212c      	movs	r1, #44	; 0x2c
 800a366:	fb01 f303 	mul.w	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	3361      	adds	r3, #97	; 0x61
 800a36e:	2201      	movs	r2, #1
 800a370:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a372:	78fb      	ldrb	r3, [r7, #3]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	212c      	movs	r1, #44	; 0x2c
 800a378:	fb01 f303 	mul.w	r3, r1, r3
 800a37c:	4413      	add	r3, r2
 800a37e:	335c      	adds	r3, #92	; 0x5c
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a390:	461a      	mov	r2, r3
 800a392:	2301      	movs	r3, #1
 800a394:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a396:	78fb      	ldrb	r3, [r7, #3]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	212c      	movs	r1, #44	; 0x2c
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	333f      	adds	r3, #63	; 0x3f
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a3aa:	78fb      	ldrb	r3, [r7, #3]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	212c      	movs	r1, #44	; 0x2c
 800a3b0:	fb01 f303 	mul.w	r3, r1, r3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	333f      	adds	r3, #63	; 0x3f
 800a3b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d110      	bne.n	800a3e0 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	78fa      	ldrb	r2, [r7, #3]
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f00b fb83 	bl	8015ad2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d8:	461a      	mov	r2, r3
 800a3da:	2310      	movs	r3, #16
 800a3dc:	6093      	str	r3, [r2, #8]
 800a3de:	e039      	b.n	800a454 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	212c      	movs	r1, #44	; 0x2c
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	333f      	adds	r3, #63	; 0x3f
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d009      	beq.n	800a408 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	212c      	movs	r1, #44	; 0x2c
 800a3fa:	fb01 f303 	mul.w	r3, r1, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	333f      	adds	r3, #63	; 0x3f
 800a402:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a404:	2b01      	cmp	r3, #1
 800a406:	d125      	bne.n	800a454 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a426:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	212c      	movs	r1, #44	; 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3360      	adds	r3, #96	; 0x60
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	212c      	movs	r1, #44	; 0x2c
 800a440:	fb01 f303 	mul.w	r3, r1, r3
 800a444:	4413      	add	r3, r2
 800a446:	3360      	adds	r3, #96	; 0x60
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fa fd76 	bl	8004f40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d135      	bne.n	800a4c8 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	212c      	movs	r1, #44	; 0x2c
 800a462:	fb01 f303 	mul.w	r3, r1, r3
 800a466:	4413      	add	r3, r2
 800a468:	3350      	adds	r3, #80	; 0x50
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	202c      	movs	r0, #44	; 0x2c
 800a472:	fb00 f202 	mul.w	r2, r0, r2
 800a476:	440a      	add	r2, r1
 800a478:	3240      	adds	r2, #64	; 0x40
 800a47a:	8812      	ldrh	r2, [r2, #0]
 800a47c:	4413      	add	r3, r2
 800a47e:	3b01      	subs	r3, #1
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	202c      	movs	r0, #44	; 0x2c
 800a486:	fb00 f202 	mul.w	r2, r0, r2
 800a48a:	440a      	add	r2, r1
 800a48c:	3240      	adds	r2, #64	; 0x40
 800a48e:	8812      	ldrh	r2, [r2, #0]
 800a490:	fbb3 f3f2 	udiv	r3, r3, r2
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 8250 	beq.w	800a93e <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	212c      	movs	r1, #44	; 0x2c
 800a4a4:	fb01 f303 	mul.w	r3, r1, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3354      	adds	r3, #84	; 0x54
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	f082 0201 	eor.w	r2, r2, #1
 800a4b4:	b2d0      	uxtb	r0, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	212c      	movs	r1, #44	; 0x2c
 800a4ba:	fb01 f303 	mul.w	r3, r1, r3
 800a4be:	4413      	add	r3, r2
 800a4c0:	3354      	adds	r3, #84	; 0x54
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e23a      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	212c      	movs	r1, #44	; 0x2c
 800a4ce:	fb01 f303 	mul.w	r3, r1, r3
 800a4d2:	4413      	add	r3, r2
 800a4d4:	3354      	adds	r3, #84	; 0x54
 800a4d6:	781a      	ldrb	r2, [r3, #0]
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	f082 0201 	eor.w	r2, r2, #1
 800a4de:	b2d0      	uxtb	r0, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	212c      	movs	r1, #44	; 0x2c
 800a4e4:	fb01 f303 	mul.w	r3, r1, r3
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3354      	adds	r3, #84	; 0x54
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	701a      	strb	r2, [r3, #0]
 800a4f0:	e225      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f00a fe8d 	bl	801521a <USB_ReadChInterrupts>
 800a500:	4603      	mov	r3, r0
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b20      	cmp	r3, #32
 800a508:	d109      	bne.n	800a51e <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a516:	461a      	mov	r2, r3
 800a518:	2320      	movs	r3, #32
 800a51a:	6093      	str	r3, [r2, #8]
 800a51c:	e20f      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f00a fe77 	bl	801521a <USB_ReadChInterrupts>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b02      	cmp	r3, #2
 800a534:	f040 8168 	bne.w	800a808 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a544:	461a      	mov	r2, r3
 800a546:	2302      	movs	r3, #2
 800a548:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	212c      	movs	r1, #44	; 0x2c
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	4413      	add	r3, r2
 800a556:	3361      	adds	r3, #97	; 0x61
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d112      	bne.n	800a584 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	212c      	movs	r1, #44	; 0x2c
 800a564:	fb01 f303 	mul.w	r3, r1, r3
 800a568:	4413      	add	r3, r2
 800a56a:	3361      	adds	r3, #97	; 0x61
 800a56c:	2202      	movs	r2, #2
 800a56e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	3360      	adds	r3, #96	; 0x60
 800a57e:	2201      	movs	r2, #1
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	e133      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	212c      	movs	r1, #44	; 0x2c
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
 800a58e:	4413      	add	r3, r2
 800a590:	3361      	adds	r3, #97	; 0x61
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b06      	cmp	r3, #6
 800a596:	d112      	bne.n	800a5be <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	212c      	movs	r1, #44	; 0x2c
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3361      	adds	r3, #97	; 0x61
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	212c      	movs	r1, #44	; 0x2c
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	3360      	adds	r3, #96	; 0x60
 800a5b8:	2205      	movs	r2, #5
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e116      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a5be:	78fb      	ldrb	r3, [r7, #3]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	212c      	movs	r1, #44	; 0x2c
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3361      	adds	r3, #97	; 0x61
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b07      	cmp	r3, #7
 800a5d0:	d009      	beq.n	800a5e6 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	212c      	movs	r1, #44	; 0x2c
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	3361      	adds	r3, #97	; 0x61
 800a5e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a5e2:	2b09      	cmp	r3, #9
 800a5e4:	d158      	bne.n	800a698 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	212c      	movs	r1, #44	; 0x2c
 800a5ec:	fb01 f303 	mul.w	r3, r1, r3
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3361      	adds	r3, #97	; 0x61
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	222c      	movs	r2, #44	; 0x2c
 800a5fe:	fb03 f202 	mul.w	r2, r3, r2
 800a602:	440a      	add	r2, r1
 800a604:	325c      	adds	r2, #92	; 0x5c
 800a606:	6812      	ldr	r2, [r2, #0]
 800a608:	3201      	adds	r2, #1
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	202c      	movs	r0, #44	; 0x2c
 800a60e:	fb00 f303 	mul.w	r3, r0, r3
 800a612:	440b      	add	r3, r1
 800a614:	335c      	adds	r3, #92	; 0x5c
 800a616:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	212c      	movs	r1, #44	; 0x2c
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	335c      	adds	r3, #92	; 0x5c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d912      	bls.n	800a652 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	212c      	movs	r1, #44	; 0x2c
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	4413      	add	r3, r2
 800a638:	335c      	adds	r3, #92	; 0x5c
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	212c      	movs	r1, #44	; 0x2c
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	4413      	add	r3, r2
 800a64a:	3360      	adds	r3, #96	; 0x60
 800a64c:	2204      	movs	r2, #4
 800a64e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a650:	e0cc      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	212c      	movs	r1, #44	; 0x2c
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	4413      	add	r3, r2
 800a65e:	3360      	adds	r3, #96	; 0x60
 800a660:	2202      	movs	r2, #2
 800a662:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a67a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a682:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a690:	461a      	mov	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a696:	e0a9      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	212c      	movs	r1, #44	; 0x2c
 800a69e:	fb01 f303 	mul.w	r3, r1, r3
 800a6a2:	4413      	add	r3, r2
 800a6a4:	3361      	adds	r3, #97	; 0x61
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b05      	cmp	r3, #5
 800a6aa:	d109      	bne.n	800a6c0 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	212c      	movs	r1, #44	; 0x2c
 800a6b2:	fb01 f303 	mul.w	r3, r1, r3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	3361      	adds	r3, #97	; 0x61
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	e095      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	212c      	movs	r1, #44	; 0x2c
 800a6c6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ca:	4413      	add	r3, r2
 800a6cc:	3361      	adds	r3, #97	; 0x61
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d109      	bne.n	800a6e8 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	212c      	movs	r1, #44	; 0x2c
 800a6da:	fb01 f303 	mul.w	r3, r1, r3
 800a6de:	4413      	add	r3, r2
 800a6e0:	3361      	adds	r3, #97	; 0x61
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	701a      	strb	r2, [r3, #0]
 800a6e6:	e081      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	212c      	movs	r1, #44	; 0x2c
 800a6ee:	fb01 f303 	mul.w	r3, r1, r3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	3361      	adds	r3, #97	; 0x61
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d13f      	bne.n	800a77c <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	212c      	movs	r1, #44	; 0x2c
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	4413      	add	r3, r2
 800a708:	3361      	adds	r3, #97	; 0x61
 800a70a:	2202      	movs	r2, #2
 800a70c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	212c      	movs	r1, #44	; 0x2c
 800a714:	fb01 f303 	mul.w	r3, r1, r3
 800a718:	4413      	add	r3, r2
 800a71a:	3360      	adds	r3, #96	; 0x60
 800a71c:	2202      	movs	r2, #2
 800a71e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	212c      	movs	r1, #44	; 0x2c
 800a726:	fb01 f303 	mul.w	r3, r1, r3
 800a72a:	4413      	add	r3, r2
 800a72c:	333f      	adds	r3, #63	; 0x3f
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d009      	beq.n	800a748 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	212c      	movs	r1, #44	; 0x2c
 800a73a:	fb01 f303 	mul.w	r3, r1, r3
 800a73e:	4413      	add	r3, r2
 800a740:	333f      	adds	r3, #63	; 0x3f
 800a742:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a744:	2b02      	cmp	r3, #2
 800a746:	d151      	bne.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a75e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a766:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a774:	461a      	mov	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	e037      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	212c      	movs	r1, #44	; 0x2c
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	4413      	add	r3, r2
 800a788:	3361      	adds	r3, #97	; 0x61
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d122      	bne.n	800a7d6 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	212c      	movs	r1, #44	; 0x2c
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3361      	adds	r3, #97	; 0x61
 800a79e:	2202      	movs	r2, #2
 800a7a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	222c      	movs	r2, #44	; 0x2c
 800a7a8:	fb03 f202 	mul.w	r2, r3, r2
 800a7ac:	440a      	add	r2, r1
 800a7ae:	325c      	adds	r2, #92	; 0x5c
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	3201      	adds	r2, #1
 800a7b4:	6879      	ldr	r1, [r7, #4]
 800a7b6:	202c      	movs	r0, #44	; 0x2c
 800a7b8:	fb00 f303 	mul.w	r3, r0, r3
 800a7bc:	440b      	add	r3, r1
 800a7be:	335c      	adds	r3, #92	; 0x5c
 800a7c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	212c      	movs	r1, #44	; 0x2c
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3360      	adds	r3, #96	; 0x60
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	701a      	strb	r2, [r3, #0]
 800a7d4:	e00a      	b.n	800a7ec <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a7d6:	78fb      	ldrb	r3, [r7, #3]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	212c      	movs	r1, #44	; 0x2c
 800a7dc:	fb01 f303 	mul.w	r3, r1, r3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	3361      	adds	r3, #97	; 0x61
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	f000 80a8 	beq.w	800a93c <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	212c      	movs	r1, #44	; 0x2c
 800a7f2:	fb01 f303 	mul.w	r3, r1, r3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3360      	adds	r3, #96	; 0x60
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fa fb9d 	bl	8004f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a806:	e09a      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f00a fd02 	bl	801521a <USB_ReadChInterrupts>
 800a816:	4603      	mov	r3, r0
 800a818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81c:	2b40      	cmp	r3, #64	; 0x40
 800a81e:	d122      	bne.n	800a866 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82c:	461a      	mov	r2, r3
 800a82e:	2340      	movs	r3, #64	; 0x40
 800a830:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	212c      	movs	r1, #44	; 0x2c
 800a838:	fb01 f303 	mul.w	r3, r1, r3
 800a83c:	4413      	add	r3, r2
 800a83e:	3361      	adds	r3, #97	; 0x61
 800a840:	2205      	movs	r2, #5
 800a842:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	212c      	movs	r1, #44	; 0x2c
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	4413      	add	r3, r2
 800a850:	335c      	adds	r3, #92	; 0x5c
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	78fa      	ldrb	r2, [r7, #3]
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f00b f937 	bl	8015ad2 <USB_HC_Halt>
 800a864:	e06b      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	78fa      	ldrb	r2, [r7, #3]
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f00a fcd3 	bl	801521a <USB_ReadChInterrupts>
 800a874:	4603      	mov	r3, r0
 800a876:	f003 0310 	and.w	r3, r3, #16
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d15f      	bne.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	212c      	movs	r1, #44	; 0x2c
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	333f      	adds	r3, #63	; 0x3f
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d119      	bne.n	800a8c6 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	212c      	movs	r1, #44	; 0x2c
 800a898:	fb01 f303 	mul.w	r3, r1, r3
 800a89c:	4413      	add	r3, r2
 800a89e:	335c      	adds	r3, #92	; 0x5c
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	212c      	movs	r1, #44	; 0x2c
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3361      	adds	r3, #97	; 0x61
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	78fa      	ldrb	r2, [r7, #3]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f00b f907 	bl	8015ad2 <USB_HC_Halt>
 800a8c4:	e030      	b.n	800a928 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	212c      	movs	r1, #44	; 0x2c
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	4413      	add	r3, r2
 800a8d2:	333f      	adds	r3, #63	; 0x3f
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d009      	beq.n	800a8ee <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	212c      	movs	r1, #44	; 0x2c
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	333f      	adds	r3, #63	; 0x3f
 800a8e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d11c      	bne.n	800a928 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a8ee:	78fb      	ldrb	r3, [r7, #3]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	212c      	movs	r1, #44	; 0x2c
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	335c      	adds	r3, #92	; 0x5c
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10f      	bne.n	800a928 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	212c      	movs	r1, #44	; 0x2c
 800a90e:	fb01 f303 	mul.w	r3, r1, r3
 800a912:	4413      	add	r3, r2
 800a914:	3361      	adds	r3, #97	; 0x61
 800a916:	2204      	movs	r2, #4
 800a918:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	78fa      	ldrb	r2, [r7, #3]
 800a920:	4611      	mov	r1, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f00b f8d5 	bl	8015ad2 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a934:	461a      	mov	r2, r3
 800a936:	2310      	movs	r3, #16
 800a938:	6093      	str	r3, [r2, #8]
 800a93a:	e000      	b.n	800a93e <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a93c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	78fa      	ldrb	r2, [r7, #3]
 800a960:	4611      	mov	r1, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f00a fc59 	bl	801521a <USB_ReadChInterrupts>
 800a968:	4603      	mov	r3, r0
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d119      	bne.n	800a9a6 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a972:	78fb      	ldrb	r3, [r7, #3]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97e:	461a      	mov	r2, r3
 800a980:	2304      	movs	r3, #4
 800a982:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	212c      	movs	r1, #44	; 0x2c
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	4413      	add	r3, r2
 800a990:	3361      	adds	r3, #97	; 0x61
 800a992:	2207      	movs	r2, #7
 800a994:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f00b f897 	bl	8015ad2 <USB_HC_Halt>
 800a9a4:	e37d      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	78fa      	ldrb	r2, [r7, #3]
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f00a fc33 	bl	801521a <USB_ReadChInterrupts>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b20      	cmp	r3, #32
 800a9bc:	d136      	bne.n	800aa2c <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	2320      	movs	r3, #32
 800a9ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	212c      	movs	r1, #44	; 0x2c
 800a9d6:	fb01 f303 	mul.w	r3, r1, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	333d      	adds	r3, #61	; 0x3d
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	f040 835e 	bne.w	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a9e6:	78fb      	ldrb	r3, [r7, #3]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	212c      	movs	r1, #44	; 0x2c
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	333d      	adds	r3, #61	; 0x3d
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	212c      	movs	r1, #44	; 0x2c
 800a9fe:	fb01 f303 	mul.w	r3, r1, r3
 800aa02:	4413      	add	r3, r2
 800aa04:	3360      	adds	r3, #96	; 0x60
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	212c      	movs	r1, #44	; 0x2c
 800aa10:	fb01 f303 	mul.w	r3, r1, r3
 800aa14:	4413      	add	r3, r2
 800aa16:	3361      	adds	r3, #97	; 0x61
 800aa18:	2203      	movs	r2, #3
 800aa1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	78fa      	ldrb	r2, [r7, #3]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f00b f854 	bl	8015ad2 <USB_HC_Halt>
 800aa2a:	e33a      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f00a fbf0 	bl	801521a <USB_ReadChInterrupts>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa44:	d111      	bne.n	800aa6a <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa52:	461a      	mov	r2, r3
 800aa54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	4611      	mov	r1, r2
 800aa62:	4618      	mov	r0, r3
 800aa64:	f00b f835 	bl	8015ad2 <USB_HC_Halt>
 800aa68:	e31b      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f00a fbd1 	bl	801521a <USB_ReadChInterrupts>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d140      	bne.n	800ab04 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	212c      	movs	r1, #44	; 0x2c
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	4413      	add	r3, r2
 800aa8e:	335c      	adds	r3, #92	; 0x5c
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f00a fbbc 	bl	801521a <USB_ReadChInterrupts>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa8:	2b40      	cmp	r3, #64	; 0x40
 800aaaa:	d111      	bne.n	800aad0 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	212c      	movs	r1, #44	; 0x2c
 800aab2:	fb01 f303 	mul.w	r3, r1, r3
 800aab6:	4413      	add	r3, r2
 800aab8:	333d      	adds	r3, #61	; 0x3d
 800aaba:	2201      	movs	r2, #1
 800aabc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaca:	461a      	mov	r2, r3
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aadc:	461a      	mov	r2, r3
 800aade:	2301      	movs	r3, #1
 800aae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	212c      	movs	r1, #44	; 0x2c
 800aae8:	fb01 f303 	mul.w	r3, r1, r3
 800aaec:	4413      	add	r3, r2
 800aaee:	3361      	adds	r3, #97	; 0x61
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f00a ffe8 	bl	8015ad2 <USB_HC_Halt>
 800ab02:	e2ce      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f00a fb84 	bl	801521a <USB_ReadChInterrupts>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab18:	2b40      	cmp	r3, #64	; 0x40
 800ab1a:	d12b      	bne.n	800ab74 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	212c      	movs	r1, #44	; 0x2c
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	4413      	add	r3, r2
 800ab28:	3361      	adds	r3, #97	; 0x61
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800ab2e:	78fb      	ldrb	r3, [r7, #3]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	212c      	movs	r1, #44	; 0x2c
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	4413      	add	r3, r2
 800ab3a:	333d      	adds	r3, #61	; 0x3d
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	212c      	movs	r1, #44	; 0x2c
 800ab46:	fb01 f303 	mul.w	r3, r1, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	335c      	adds	r3, #92	; 0x5c
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f00a ffb9 	bl	8015ad2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	2340      	movs	r3, #64	; 0x40
 800ab70:	6093      	str	r3, [r2, #8]
 800ab72:	e296      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	78fa      	ldrb	r2, [r7, #3]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f00a fb4c 	bl	801521a <USB_ReadChInterrupts>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d119      	bne.n	800abc0 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab98:	461a      	mov	r2, r3
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	212c      	movs	r1, #44	; 0x2c
 800aba4:	fb01 f303 	mul.w	r3, r1, r3
 800aba8:	4413      	add	r3, r2
 800abaa:	3361      	adds	r3, #97	; 0x61
 800abac:	2206      	movs	r2, #6
 800abae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	78fa      	ldrb	r2, [r7, #3]
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f00a ff8a 	bl	8015ad2 <USB_HC_Halt>
 800abbe:	e270      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	78fa      	ldrb	r2, [r7, #3]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f00a fb26 	bl	801521a <USB_ReadChInterrupts>
 800abce:	4603      	mov	r3, r0
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b10      	cmp	r3, #16
 800abd6:	d13f      	bne.n	800ac58 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	212c      	movs	r1, #44	; 0x2c
 800abde:	fb01 f303 	mul.w	r3, r1, r3
 800abe2:	4413      	add	r3, r2
 800abe4:	335c      	adds	r3, #92	; 0x5c
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	212c      	movs	r1, #44	; 0x2c
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	4413      	add	r3, r2
 800abf6:	3361      	adds	r3, #97	; 0x61
 800abf8:	2204      	movs	r2, #4
 800abfa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	212c      	movs	r1, #44	; 0x2c
 800ac02:	fb01 f303 	mul.w	r3, r1, r3
 800ac06:	4413      	add	r3, r2
 800ac08:	333d      	adds	r3, #61	; 0x3d
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d112      	bne.n	800ac36 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	212c      	movs	r1, #44	; 0x2c
 800ac16:	fb01 f303 	mul.w	r3, r1, r3
 800ac1a:	4413      	add	r3, r2
 800ac1c:	333c      	adds	r3, #60	; 0x3c
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d108      	bne.n	800ac36 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	212c      	movs	r1, #44	; 0x2c
 800ac2a:	fb01 f303 	mul.w	r3, r1, r3
 800ac2e:	4413      	add	r3, r2
 800ac30:	333d      	adds	r3, #61	; 0x3d
 800ac32:	2201      	movs	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f00a ff47 	bl	8015ad2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac50:	461a      	mov	r2, r3
 800ac52:	2310      	movs	r3, #16
 800ac54:	6093      	str	r3, [r2, #8]
 800ac56:	e224      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	4618      	mov	r0, r3
 800ac62:	f00a fada 	bl	801521a <USB_ReadChInterrupts>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6c:	2b80      	cmp	r3, #128	; 0x80
 800ac6e:	d161      	bne.n	800ad34 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d110      	bne.n	800ac9a <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	212c      	movs	r1, #44	; 0x2c
 800ac7e:	fb01 f303 	mul.w	r3, r1, r3
 800ac82:	4413      	add	r3, r2
 800ac84:	3361      	adds	r3, #97	; 0x61
 800ac86:	2207      	movs	r2, #7
 800ac88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f00a ff1d 	bl	8015ad2 <USB_HC_Halt>
 800ac98:	e042      	b.n	800ad20 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	222c      	movs	r2, #44	; 0x2c
 800aca0:	fb03 f202 	mul.w	r2, r3, r2
 800aca4:	440a      	add	r2, r1
 800aca6:	325c      	adds	r2, #92	; 0x5c
 800aca8:	6812      	ldr	r2, [r2, #0]
 800acaa:	3201      	adds	r2, #1
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	202c      	movs	r0, #44	; 0x2c
 800acb0:	fb00 f303 	mul.w	r3, r0, r3
 800acb4:	440b      	add	r3, r1
 800acb6:	335c      	adds	r3, #92	; 0x5c
 800acb8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	212c      	movs	r1, #44	; 0x2c
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	335c      	adds	r3, #92	; 0x5c
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d91f      	bls.n	800ad0e <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	212c      	movs	r1, #44	; 0x2c
 800acd4:	fb01 f303 	mul.w	r3, r1, r3
 800acd8:	4413      	add	r3, r2
 800acda:	335c      	adds	r3, #92	; 0x5c
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	212c      	movs	r1, #44	; 0x2c
 800ace6:	fb01 f303 	mul.w	r3, r1, r3
 800acea:	4413      	add	r3, r2
 800acec:	3360      	adds	r3, #96	; 0x60
 800acee:	2204      	movs	r2, #4
 800acf0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	212c      	movs	r1, #44	; 0x2c
 800acf8:	fb01 f303 	mul.w	r3, r1, r3
 800acfc:	4413      	add	r3, r2
 800acfe:	3360      	adds	r3, #96	; 0x60
 800ad00:	781a      	ldrb	r2, [r3, #0]
 800ad02:	78fb      	ldrb	r3, [r7, #3]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7fa f91a 	bl	8004f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ad0c:	e008      	b.n	800ad20 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	212c      	movs	r1, #44	; 0x2c
 800ad14:	fb01 f303 	mul.w	r3, r1, r3
 800ad18:	4413      	add	r3, r2
 800ad1a:	3360      	adds	r3, #96	; 0x60
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2380      	movs	r3, #128	; 0x80
 800ad30:	6093      	str	r3, [r2, #8]
 800ad32:	e1b6      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	78fa      	ldrb	r2, [r7, #3]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f00a fa6c 	bl	801521a <USB_ReadChInterrupts>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4c:	d11a      	bne.n	800ad84 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	212c      	movs	r1, #44	; 0x2c
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	4413      	add	r3, r2
 800ad5a:	3361      	adds	r3, #97	; 0x61
 800ad5c:	2209      	movs	r2, #9
 800ad5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	4611      	mov	r1, r2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f00a feb2 	bl	8015ad2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad80:	6093      	str	r3, [r2, #8]
 800ad82:	e18e      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	78fa      	ldrb	r2, [r7, #3]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f00a fa44 	bl	801521a <USB_ReadChInterrupts>
 800ad92:	4603      	mov	r3, r0
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	f040 8182 	bne.w	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adaa:	461a      	mov	r2, r3
 800adac:	2302      	movs	r3, #2
 800adae:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	212c      	movs	r1, #44	; 0x2c
 800adb6:	fb01 f303 	mul.w	r3, r1, r3
 800adba:	4413      	add	r3, r2
 800adbc:	3361      	adds	r3, #97	; 0x61
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	f040 8087 	bne.w	800aed4 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	212c      	movs	r1, #44	; 0x2c
 800adcc:	fb01 f303 	mul.w	r3, r1, r3
 800add0:	4413      	add	r3, r2
 800add2:	3361      	adds	r3, #97	; 0x61
 800add4:	2202      	movs	r2, #2
 800add6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	212c      	movs	r1, #44	; 0x2c
 800adde:	fb01 f303 	mul.w	r3, r1, r3
 800ade2:	4413      	add	r3, r2
 800ade4:	3360      	adds	r3, #96	; 0x60
 800ade6:	2201      	movs	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	212c      	movs	r1, #44	; 0x2c
 800adf0:	fb01 f303 	mul.w	r3, r1, r3
 800adf4:	4413      	add	r3, r2
 800adf6:	333f      	adds	r3, #63	; 0x3f
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d00a      	beq.n	800ae14 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800adfe:	78fb      	ldrb	r3, [r7, #3]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	212c      	movs	r1, #44	; 0x2c
 800ae04:	fb01 f303 	mul.w	r3, r1, r3
 800ae08:	4413      	add	r3, r2
 800ae0a:	333f      	adds	r3, #63	; 0x3f
 800ae0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	f040 8138 	bne.w	800b084 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d113      	bne.n	800ae44 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	212c      	movs	r1, #44	; 0x2c
 800ae22:	fb01 f303 	mul.w	r3, r1, r3
 800ae26:	4413      	add	r3, r2
 800ae28:	3355      	adds	r3, #85	; 0x55
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	f082 0201 	eor.w	r2, r2, #1
 800ae32:	b2d0      	uxtb	r0, r2
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	212c      	movs	r1, #44	; 0x2c
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	3355      	adds	r3, #85	; 0x55
 800ae40:	4602      	mov	r2, r0
 800ae42:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	f040 811b 	bne.w	800b084 <HCD_HC_OUT_IRQHandler+0x740>
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	212c      	movs	r1, #44	; 0x2c
 800ae54:	fb01 f303 	mul.w	r3, r1, r3
 800ae58:	4413      	add	r3, r2
 800ae5a:	334c      	adds	r3, #76	; 0x4c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 8110 	beq.w	800b084 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	212c      	movs	r1, #44	; 0x2c
 800ae6a:	fb01 f303 	mul.w	r3, r1, r3
 800ae6e:	4413      	add	r3, r2
 800ae70:	334c      	adds	r3, #76	; 0x4c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	78fa      	ldrb	r2, [r7, #3]
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	202c      	movs	r0, #44	; 0x2c
 800ae7a:	fb00 f202 	mul.w	r2, r0, r2
 800ae7e:	440a      	add	r2, r1
 800ae80:	3240      	adds	r2, #64	; 0x40
 800ae82:	8812      	ldrh	r2, [r2, #0]
 800ae84:	4413      	add	r3, r2
 800ae86:	3b01      	subs	r3, #1
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	202c      	movs	r0, #44	; 0x2c
 800ae8e:	fb00 f202 	mul.w	r2, r0, r2
 800ae92:	440a      	add	r2, r1
 800ae94:	3240      	adds	r2, #64	; 0x40
 800ae96:	8812      	ldrh	r2, [r2, #0]
 800ae98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80ed 	beq.w	800b084 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	212c      	movs	r1, #44	; 0x2c
 800aeb0:	fb01 f303 	mul.w	r3, r1, r3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3355      	adds	r3, #85	; 0x55
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	f082 0201 	eor.w	r2, r2, #1
 800aec0:	b2d0      	uxtb	r0, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	212c      	movs	r1, #44	; 0x2c
 800aec6:	fb01 f303 	mul.w	r3, r1, r3
 800aeca:	4413      	add	r3, r2
 800aecc:	3355      	adds	r3, #85	; 0x55
 800aece:	4602      	mov	r2, r0
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	e0d7      	b.n	800b084 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	212c      	movs	r1, #44	; 0x2c
 800aeda:	fb01 f303 	mul.w	r3, r1, r3
 800aede:	4413      	add	r3, r2
 800aee0:	3361      	adds	r3, #97	; 0x61
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d109      	bne.n	800aefc <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	212c      	movs	r1, #44	; 0x2c
 800aeee:	fb01 f303 	mul.w	r3, r1, r3
 800aef2:	4413      	add	r3, r2
 800aef4:	3361      	adds	r3, #97	; 0x61
 800aef6:	2202      	movs	r2, #2
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	e0c3      	b.n	800b084 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	212c      	movs	r1, #44	; 0x2c
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	4413      	add	r3, r2
 800af08:	3361      	adds	r3, #97	; 0x61
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d112      	bne.n	800af36 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	212c      	movs	r1, #44	; 0x2c
 800af16:	fb01 f303 	mul.w	r3, r1, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	3361      	adds	r3, #97	; 0x61
 800af1e:	2202      	movs	r2, #2
 800af20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	212c      	movs	r1, #44	; 0x2c
 800af28:	fb01 f303 	mul.w	r3, r1, r3
 800af2c:	4413      	add	r3, r2
 800af2e:	3360      	adds	r3, #96	; 0x60
 800af30:	2202      	movs	r2, #2
 800af32:	701a      	strb	r2, [r3, #0]
 800af34:	e0a6      	b.n	800b084 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	212c      	movs	r1, #44	; 0x2c
 800af3c:	fb01 f303 	mul.w	r3, r1, r3
 800af40:	4413      	add	r3, r2
 800af42:	3361      	adds	r3, #97	; 0x61
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b05      	cmp	r3, #5
 800af48:	d112      	bne.n	800af70 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	212c      	movs	r1, #44	; 0x2c
 800af50:	fb01 f303 	mul.w	r3, r1, r3
 800af54:	4413      	add	r3, r2
 800af56:	3361      	adds	r3, #97	; 0x61
 800af58:	2202      	movs	r2, #2
 800af5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	212c      	movs	r1, #44	; 0x2c
 800af62:	fb01 f303 	mul.w	r3, r1, r3
 800af66:	4413      	add	r3, r2
 800af68:	3360      	adds	r3, #96	; 0x60
 800af6a:	2202      	movs	r2, #2
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	e089      	b.n	800b084 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800af70:	78fb      	ldrb	r3, [r7, #3]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	212c      	movs	r1, #44	; 0x2c
 800af76:	fb01 f303 	mul.w	r3, r1, r3
 800af7a:	4413      	add	r3, r2
 800af7c:	3361      	adds	r3, #97	; 0x61
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b06      	cmp	r3, #6
 800af82:	d112      	bne.n	800afaa <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	212c      	movs	r1, #44	; 0x2c
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	3361      	adds	r3, #97	; 0x61
 800af92:	2202      	movs	r2, #2
 800af94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	212c      	movs	r1, #44	; 0x2c
 800af9c:	fb01 f303 	mul.w	r3, r1, r3
 800afa0:	4413      	add	r3, r2
 800afa2:	3360      	adds	r3, #96	; 0x60
 800afa4:	2205      	movs	r2, #5
 800afa6:	701a      	strb	r2, [r3, #0]
 800afa8:	e06c      	b.n	800b084 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	212c      	movs	r1, #44	; 0x2c
 800afb0:	fb01 f303 	mul.w	r3, r1, r3
 800afb4:	4413      	add	r3, r2
 800afb6:	3361      	adds	r3, #97	; 0x61
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b07      	cmp	r3, #7
 800afbc:	d009      	beq.n	800afd2 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	212c      	movs	r1, #44	; 0x2c
 800afc4:	fb01 f303 	mul.w	r3, r1, r3
 800afc8:	4413      	add	r3, r2
 800afca:	3361      	adds	r3, #97	; 0x61
 800afcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d166      	bne.n	800b0a0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	212c      	movs	r1, #44	; 0x2c
 800afd8:	fb01 f303 	mul.w	r3, r1, r3
 800afdc:	4413      	add	r3, r2
 800afde:	3361      	adds	r3, #97	; 0x61
 800afe0:	2202      	movs	r2, #2
 800afe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	222c      	movs	r2, #44	; 0x2c
 800afea:	fb03 f202 	mul.w	r2, r3, r2
 800afee:	440a      	add	r2, r1
 800aff0:	325c      	adds	r2, #92	; 0x5c
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	3201      	adds	r2, #1
 800aff6:	6879      	ldr	r1, [r7, #4]
 800aff8:	202c      	movs	r0, #44	; 0x2c
 800affa:	fb00 f303 	mul.w	r3, r0, r3
 800affe:	440b      	add	r3, r1
 800b000:	335c      	adds	r3, #92	; 0x5c
 800b002:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	212c      	movs	r1, #44	; 0x2c
 800b00a:	fb01 f303 	mul.w	r3, r1, r3
 800b00e:	4413      	add	r3, r2
 800b010:	335c      	adds	r3, #92	; 0x5c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d912      	bls.n	800b03e <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	212c      	movs	r1, #44	; 0x2c
 800b01e:	fb01 f303 	mul.w	r3, r1, r3
 800b022:	4413      	add	r3, r2
 800b024:	335c      	adds	r3, #92	; 0x5c
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	212c      	movs	r1, #44	; 0x2c
 800b030:	fb01 f303 	mul.w	r3, r1, r3
 800b034:	4413      	add	r3, r2
 800b036:	3360      	adds	r3, #96	; 0x60
 800b038:	2204      	movs	r2, #4
 800b03a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b03c:	e021      	b.n	800b082 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	212c      	movs	r1, #44	; 0x2c
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	4413      	add	r3, r2
 800b04a:	3360      	adds	r3, #96	; 0x60
 800b04c:	2202      	movs	r2, #2
 800b04e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	4413      	add	r3, r2
 800b058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b066:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b06e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	4413      	add	r3, r2
 800b078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b07c:	461a      	mov	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b082:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	212c      	movs	r1, #44	; 0x2c
 800b08a:	fb01 f303 	mul.w	r3, r1, r3
 800b08e:	4413      	add	r3, r2
 800b090:	3360      	adds	r3, #96	; 0x60
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7f9 ff51 	bl	8004f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 800b09e:	e000      	b.n	800b0a2 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800b0a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	f003 030f 	and.w	r3, r3, #15
 800b0c8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	0c5b      	lsrs	r3, r3, #17
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	091b      	lsrs	r3, r3, #4
 800b0d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d004      	beq.n	800b0ee <HCD_RXQLVL_IRQHandler+0x46>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	f000 80a9 	beq.w	800b23e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b0ec:	e0aa      	b.n	800b244 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80a6 	beq.w	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	212c      	movs	r1, #44	; 0x2c
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	3344      	adds	r3, #68	; 0x44
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 809b 	beq.w	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	212c      	movs	r1, #44	; 0x2c
 800b112:	fb01 f303 	mul.w	r3, r1, r3
 800b116:	4413      	add	r3, r2
 800b118:	3350      	adds	r3, #80	; 0x50
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	441a      	add	r2, r3
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	202c      	movs	r0, #44	; 0x2c
 800b126:	fb00 f303 	mul.w	r3, r0, r3
 800b12a:	440b      	add	r3, r1
 800b12c:	334c      	adds	r3, #76	; 0x4c
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d87a      	bhi.n	800b22a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	212c      	movs	r1, #44	; 0x2c
 800b13e:	fb01 f303 	mul.w	r3, r1, r3
 800b142:	4413      	add	r3, r2
 800b144:	3344      	adds	r3, #68	; 0x44
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	b292      	uxth	r2, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	f009 fff9 	bl	8015144 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	212c      	movs	r1, #44	; 0x2c
 800b158:	fb01 f303 	mul.w	r3, r1, r3
 800b15c:	4413      	add	r3, r2
 800b15e:	3344      	adds	r3, #68	; 0x44
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	441a      	add	r2, r3
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	202c      	movs	r0, #44	; 0x2c
 800b16c:	fb00 f303 	mul.w	r3, r0, r3
 800b170:	440b      	add	r3, r1
 800b172:	3344      	adds	r3, #68	; 0x44
 800b174:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	212c      	movs	r1, #44	; 0x2c
 800b17c:	fb01 f303 	mul.w	r3, r1, r3
 800b180:	4413      	add	r3, r2
 800b182:	3350      	adds	r3, #80	; 0x50
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	441a      	add	r2, r3
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	202c      	movs	r0, #44	; 0x2c
 800b190:	fb00 f303 	mul.w	r3, r0, r3
 800b194:	440b      	add	r3, r1
 800b196:	3350      	adds	r3, #80	; 0x50
 800b198:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	0cdb      	lsrs	r3, r3, #19
 800b1aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	212c      	movs	r1, #44	; 0x2c
 800b1b6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3340      	adds	r3, #64	; 0x40
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d13c      	bne.n	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d039      	beq.n	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1e4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1ec:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	212c      	movs	r1, #44	; 0x2c
 800b206:	fb01 f303 	mul.w	r3, r1, r3
 800b20a:	4413      	add	r3, r2
 800b20c:	3354      	adds	r3, #84	; 0x54
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f083 0301 	eor.w	r3, r3, #1
 800b214:	b2d8      	uxtb	r0, r3
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	212c      	movs	r1, #44	; 0x2c
 800b21c:	fb01 f303 	mul.w	r3, r1, r3
 800b220:	4413      	add	r3, r2
 800b222:	3354      	adds	r3, #84	; 0x54
 800b224:	4602      	mov	r2, r0
 800b226:	701a      	strb	r2, [r3, #0]
      break;
 800b228:	e00b      	b.n	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	212c      	movs	r1, #44	; 0x2c
 800b230:	fb01 f303 	mul.w	r3, r1, r3
 800b234:	4413      	add	r3, r2
 800b236:	3360      	adds	r3, #96	; 0x60
 800b238:	2204      	movs	r2, #4
 800b23a:	701a      	strb	r2, [r3, #0]
      break;
 800b23c:	e001      	b.n	800b242 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b23e:	bf00      	nop
 800b240:	e000      	b.n	800b244 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b242:	bf00      	nop
  }
}
 800b244:	bf00      	nop
 800b246:	3728      	adds	r7, #40	; 0x28
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b278:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f003 0302 	and.w	r3, r3, #2
 800b280:	2b02      	cmp	r3, #2
 800b282:	d10b      	bne.n	800b29c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d102      	bne.n	800b294 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f9 fe3a 	bl	8004f08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f043 0302 	orr.w	r3, r3, #2
 800b29a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b08      	cmp	r3, #8
 800b2a4:	d132      	bne.n	800b30c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f043 0308 	orr.w	r3, r3, #8
 800b2ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d126      	bne.n	800b306 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d113      	bne.n	800b2e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b2c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2ca:	d106      	bne.n	800b2da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2102      	movs	r1, #2
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f00a f8be 	bl	8015454 <USB_InitFSLSPClkSel>
 800b2d8:	e011      	b.n	800b2fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2101      	movs	r1, #1
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f00a f8b7 	bl	8015454 <USB_InitFSLSPClkSel>
 800b2e6:	e00a      	b.n	800b2fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d106      	bne.n	800b2fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b2fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7f9 fe2c 	bl	8004f5c <HAL_HCD_PortEnabled_Callback>
 800b304:	e002      	b.n	800b30c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7f9 fe36 	bl	8004f78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b20      	cmp	r3, #32
 800b314:	d103      	bne.n	800b31e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f043 0320 	orr.w	r3, r3, #32
 800b31c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b324:	461a      	mov	r2, r3
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6013      	str	r3, [r2, #0]
}
 800b32a:	bf00      	nop
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e07f      	b.n	800b446 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7f7 fe3e 	bl	8002fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2224      	movs	r2, #36	; 0x24
 800b364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f022 0201 	bic.w	r2, r2, #1
 800b376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d107      	bne.n	800b3ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3aa:	609a      	str	r2, [r3, #8]
 800b3ac:	e006      	b.n	800b3bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	689a      	ldr	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b3ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d104      	bne.n	800b3ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6859      	ldr	r1, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <HAL_I2C_Init+0x11c>)
 800b3da:	430b      	orrs	r3, r1
 800b3dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69d9      	ldr	r1, [r3, #28]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a1a      	ldr	r2, [r3, #32]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0201 	orr.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	02008000 	.word	0x02008000

0800b454 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	607a      	str	r2, [r7, #4]
 800b45e:	461a      	mov	r2, r3
 800b460:	460b      	mov	r3, r1
 800b462:	817b      	strh	r3, [r7, #10]
 800b464:	4613      	mov	r3, r2
 800b466:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b20      	cmp	r3, #32
 800b472:	f040 80da 	bne.w	800b62a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_I2C_Master_Transmit+0x30>
 800b480:	2302      	movs	r3, #2
 800b482:	e0d3      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b48c:	f7fa f826 	bl	80054dc <HAL_GetTick>
 800b490:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2319      	movs	r3, #25
 800b498:	2201      	movs	r2, #1
 800b49a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 f8f0 	bl	800b684 <I2C_WaitOnFlagUntilTimeout>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e0be      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2221      	movs	r2, #33	; 0x21
 800b4b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2210      	movs	r2, #16
 800b4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	893a      	ldrh	r2, [r7, #8]
 800b4ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	2bff      	cmp	r3, #255	; 0xff
 800b4de:	d90e      	bls.n	800b4fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	22ff      	movs	r2, #255	; 0xff
 800b4e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	8979      	ldrh	r1, [r7, #10]
 800b4ee:	4b51      	ldr	r3, [pc, #324]	; (800b634 <HAL_I2C_Master_Transmit+0x1e0>)
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fa7e 	bl	800b9f8 <I2C_TransferConfig>
 800b4fc:	e06c      	b.n	800b5d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b502:	b29a      	uxth	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	8979      	ldrh	r1, [r7, #10]
 800b510:	4b48      	ldr	r3, [pc, #288]	; (800b634 <HAL_I2C_Master_Transmit+0x1e0>)
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fa6d 	bl	800b9f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b51e:	e05b      	b.n	800b5d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	6a39      	ldr	r1, [r7, #32]
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 f8fc 	bl	800b722 <I2C_WaitOnTXISFlagUntilTimeout>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e07b      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b01      	subs	r3, #1
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b55c:	3b01      	subs	r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b568:	b29b      	uxth	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d034      	beq.n	800b5d8 <HAL_I2C_Master_Transmit+0x184>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d130      	bne.n	800b5d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	2200      	movs	r2, #0
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f87f 	bl	800b684 <I2C_WaitOnFlagUntilTimeout>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e04d      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b594:	b29b      	uxth	r3, r3
 800b596:	2bff      	cmp	r3, #255	; 0xff
 800b598:	d90e      	bls.n	800b5b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	22ff      	movs	r2, #255	; 0xff
 800b59e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	8979      	ldrh	r1, [r7, #10]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 fa21 	bl	800b9f8 <I2C_TransferConfig>
 800b5b6:	e00f      	b.n	800b5d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	8979      	ldrh	r1, [r7, #10]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 fa10 	bl	800b9f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d19e      	bne.n	800b520 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	6a39      	ldr	r1, [r7, #32]
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 f8e2 	bl	800b7b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e01a      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6859      	ldr	r1, [r3, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	4b0b      	ldr	r3, [pc, #44]	; (800b638 <HAL_I2C_Master_Transmit+0x1e4>)
 800b60a:	400b      	ands	r3, r1
 800b60c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2220      	movs	r2, #32
 800b612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e000      	b.n	800b62c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b62a:	2302      	movs	r3, #2
  }
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	80002000 	.word	0x80002000
 800b638:	fe00e800 	.word	0xfe00e800

0800b63c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d103      	bne.n	800b65a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2200      	movs	r2, #0
 800b658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b01      	cmp	r3, #1
 800b666:	d007      	beq.n	800b678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	699a      	ldr	r2, [r3, #24]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f042 0201 	orr.w	r2, r2, #1
 800b676:	619a      	str	r2, [r3, #24]
  }
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	4613      	mov	r3, r2
 800b692:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b694:	e031      	b.n	800b6fa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b69c:	d02d      	beq.n	800b6fa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b69e:	f7f9 ff1d 	bl	80054dc <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d302      	bcc.n	800b6b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d122      	bne.n	800b6fa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	699a      	ldr	r2, [r3, #24]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	bf0c      	ite	eq
 800b6c4:	2301      	moveq	r3, #1
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d113      	bne.n	800b6fa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d6:	f043 0220 	orr.w	r2, r3, #32
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e00f      	b.n	800b71a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	4013      	ands	r3, r2
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	429a      	cmp	r2, r3
 800b708:	bf0c      	ite	eq
 800b70a:	2301      	moveq	r3, #1
 800b70c:	2300      	movne	r3, #0
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	461a      	mov	r2, r3
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	429a      	cmp	r2, r3
 800b716:	d0be      	beq.n	800b696 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b72e:	e033      	b.n	800b798 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	68b9      	ldr	r1, [r7, #8]
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 f87f 	bl	800b838 <I2C_IsErrorOccurred>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	e031      	b.n	800b7a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b74a:	d025      	beq.n	800b798 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b74c:	f7f9 fec6 	bl	80054dc <HAL_GetTick>
 800b750:	4602      	mov	r2, r0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d302      	bcc.n	800b762 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d11a      	bne.n	800b798 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d013      	beq.n	800b798 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b774:	f043 0220 	orr.w	r2, r3, #32
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2220      	movs	r2, #32
 800b780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e007      	b.n	800b7a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d1c4      	bne.n	800b730 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7bc:	e02f      	b.n	800b81e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	68b9      	ldr	r1, [r7, #8]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 f838 	bl	800b838 <I2C_IsErrorOccurred>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e02d      	b.n	800b82e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7d2:	f7f9 fe83 	bl	80054dc <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d302      	bcc.n	800b7e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11a      	bne.n	800b81e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b20      	cmp	r3, #32
 800b7f4:	d013      	beq.n	800b81e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fa:	f043 0220 	orr.w	r2, r3, #32
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2220      	movs	r2, #32
 800b806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e007      	b.n	800b82e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	f003 0320 	and.w	r3, r3, #32
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d1c8      	bne.n	800b7be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08a      	sub	sp, #40	; 0x28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	f003 0310 	and.w	r3, r3, #16
 800b860:	2b00      	cmp	r3, #0
 800b862:	d068      	beq.n	800b936 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2210      	movs	r2, #16
 800b86a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b86c:	e049      	b.n	800b902 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b874:	d045      	beq.n	800b902 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b876:	f7f9 fe31 	bl	80054dc <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	d302      	bcc.n	800b88c <I2C_IsErrorOccurred+0x54>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d13a      	bne.n	800b902 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b896:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b89e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ae:	d121      	bne.n	800b8f4 <I2C_IsErrorOccurred+0xbc>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8b6:	d01d      	beq.n	800b8f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b8b8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ba:	2b20      	cmp	r3, #32
 800b8bc:	d01a      	beq.n	800b8f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b8ce:	f7f9 fe05 	bl	80054dc <HAL_GetTick>
 800b8d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8d4:	e00e      	b.n	800b8f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b8d6:	f7f9 fe01 	bl	80054dc <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b19      	cmp	r3, #25
 800b8e2:	d907      	bls.n	800b8f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	f043 0320 	orr.w	r3, r3, #32
 800b8ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b8f2:	e006      	b.n	800b902 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	f003 0320 	and.w	r3, r3, #32
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d1e9      	bne.n	800b8d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	f003 0320 	and.w	r3, r3, #32
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d003      	beq.n	800b918 <I2C_IsErrorOccurred+0xe0>
 800b910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0aa      	beq.n	800b86e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2220      	movs	r2, #32
 800b926:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	f043 0304 	orr.w	r3, r3, #4
 800b92e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00b      	beq.n	800b960 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	f043 0308 	orr.w	r3, r3, #8
 800b970:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b97a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00b      	beq.n	800b9a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	f043 0302 	orr.w	r3, r3, #2
 800b992:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b99c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d01c      	beq.n	800b9e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7ff fe45 	bl	800b63c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6859      	ldr	r1, [r3, #4]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <I2C_IsErrorOccurred+0x1bc>)
 800b9be:	400b      	ands	r3, r1
 800b9c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3728      	adds	r7, #40	; 0x28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	fe00e800 	.word	0xfe00e800

0800b9f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	817b      	strh	r3, [r7, #10]
 800ba06:	4613      	mov	r3, r2
 800ba08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba0a:	897b      	ldrh	r3, [r7, #10]
 800ba0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ba10:	7a7b      	ldrb	r3, [r7, #9]
 800ba12:	041b      	lsls	r3, r3, #16
 800ba14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	0d5b      	lsrs	r3, r3, #21
 800ba32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <I2C_TransferConfig+0x60>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	43db      	mvns	r3, r3
 800ba3c:	ea02 0103 	and.w	r1, r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ba4a:	bf00      	nop
 800ba4c:	371c      	adds	r7, #28
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	03ff63ff 	.word	0x03ff63ff

0800ba5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b20      	cmp	r3, #32
 800ba70:	d138      	bne.n	800bae4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e032      	b.n	800bae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2224      	movs	r2, #36	; 0x24
 800ba8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 0201 	bic.w	r2, r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800baae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6819      	ldr	r1, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	430a      	orrs	r2, r1
 800babe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f042 0201 	orr.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	e000      	b.n	800bae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bae4:	2302      	movs	r3, #2
  }
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b085      	sub	sp, #20
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d139      	bne.n	800bb7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e033      	b.n	800bb7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2224      	movs	r2, #36	; 0x24
 800bb22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 0201 	bic.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bb44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	021b      	lsls	r3, r3, #8
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0201 	orr.w	r2, r2, #1
 800bb66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e000      	b.n	800bb7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bb7c:	2302      	movs	r3, #2
  }
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
	...

0800bb8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bb94:	4b19      	ldr	r3, [pc, #100]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0304 	and.w	r3, r3, #4
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d00a      	beq.n	800bbb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0307 	and.w	r3, r3, #7
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d001      	beq.n	800bbb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e01f      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e01d      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bbb6:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	f023 0207 	bic.w	r2, r3, #7
 800bbbe:	490f      	ldr	r1, [pc, #60]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bbc6:	f7f9 fc89 	bl	80054dc <HAL_GetTick>
 800bbca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbcc:	e009      	b.n	800bbe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bbce:	f7f9 fc85 	bl	80054dc <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbdc:	d901      	bls.n	800bbe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e007      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbe2:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbee:	d1ee      	bne.n	800bbce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	58024800 	.word	0x58024800

0800bc00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bc00:	b480      	push	{r7}
 800bc02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bc04:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	4a04      	ldr	r2, [pc, #16]	; (800bc1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc0e:	60d3      	str	r3, [r2, #12]
}
 800bc10:	bf00      	nop
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	58024800 	.word	0x58024800

0800bc20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08c      	sub	sp, #48	; 0x30
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f000 bc48 	b.w	800c4c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8088 	beq.w	800bd52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc42:	4b99      	ldr	r3, [pc, #612]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc4c:	4b96      	ldr	r3, [pc, #600]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	2b10      	cmp	r3, #16
 800bc56:	d007      	beq.n	800bc68 <HAL_RCC_OscConfig+0x48>
 800bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5a:	2b18      	cmp	r3, #24
 800bc5c:	d111      	bne.n	800bc82 <HAL_RCC_OscConfig+0x62>
 800bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc60:	f003 0303 	and.w	r3, r3, #3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d10c      	bne.n	800bc82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc68:	4b8f      	ldr	r3, [pc, #572]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d06d      	beq.n	800bd50 <HAL_RCC_OscConfig+0x130>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d169      	bne.n	800bd50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	f000 bc21 	b.w	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc8a:	d106      	bne.n	800bc9a <HAL_RCC_OscConfig+0x7a>
 800bc8c:	4b86      	ldr	r3, [pc, #536]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a85      	ldr	r2, [pc, #532]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bc92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	e02e      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd8>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10c      	bne.n	800bcbc <HAL_RCC_OscConfig+0x9c>
 800bca2:	4b81      	ldr	r3, [pc, #516]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a80      	ldr	r2, [pc, #512]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	4b7e      	ldr	r3, [pc, #504]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a7d      	ldr	r2, [pc, #500]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	e01d      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd8>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcc4:	d10c      	bne.n	800bce0 <HAL_RCC_OscConfig+0xc0>
 800bcc6:	4b78      	ldr	r3, [pc, #480]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a77      	ldr	r2, [pc, #476]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	4b75      	ldr	r3, [pc, #468]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a74      	ldr	r2, [pc, #464]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	e00b      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd8>
 800bce0:	4b71      	ldr	r3, [pc, #452]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a70      	ldr	r2, [pc, #448]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4b6e      	ldr	r3, [pc, #440]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a6d      	ldr	r2, [pc, #436]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bcf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d013      	beq.n	800bd28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd00:	f7f9 fbec 	bl	80054dc <HAL_GetTick>
 800bd04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd06:	e008      	b.n	800bd1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd08:	f7f9 fbe8 	bl	80054dc <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	2b64      	cmp	r3, #100	; 0x64
 800bd14:	d901      	bls.n	800bd1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e3d4      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd1a:	4b63      	ldr	r3, [pc, #396]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0f0      	beq.n	800bd08 <HAL_RCC_OscConfig+0xe8>
 800bd26:	e014      	b.n	800bd52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd28:	f7f9 fbd8 	bl	80054dc <HAL_GetTick>
 800bd2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd2e:	e008      	b.n	800bd42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd30:	f7f9 fbd4 	bl	80054dc <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	2b64      	cmp	r3, #100	; 0x64
 800bd3c:	d901      	bls.n	800bd42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e3c0      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd42:	4b59      	ldr	r3, [pc, #356]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1f0      	bne.n	800bd30 <HAL_RCC_OscConfig+0x110>
 800bd4e:	e000      	b.n	800bd52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f000 80ca 	beq.w	800bef4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd60:	4b51      	ldr	r3, [pc, #324]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd6a:	4b4f      	ldr	r3, [pc, #316]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d007      	beq.n	800bd86 <HAL_RCC_OscConfig+0x166>
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	2b18      	cmp	r3, #24
 800bd7a:	d156      	bne.n	800be2a <HAL_RCC_OscConfig+0x20a>
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d151      	bne.n	800be2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd86:	4b48      	ldr	r3, [pc, #288]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d005      	beq.n	800bd9e <HAL_RCC_OscConfig+0x17e>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e392      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd9e:	4b42      	ldr	r3, [pc, #264]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f023 0219 	bic.w	r2, r3, #25
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	493f      	ldr	r1, [pc, #252]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bdac:	4313      	orrs	r3, r2
 800bdae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb0:	f7f9 fb94 	bl	80054dc <HAL_GetTick>
 800bdb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdb6:	e008      	b.n	800bdca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdb8:	f7f9 fb90 	bl	80054dc <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d901      	bls.n	800bdca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e37c      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdca:	4b37      	ldr	r3, [pc, #220]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0304 	and.w	r3, r3, #4
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0f0      	beq.n	800bdb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdd6:	f7f9 fbb1 	bl	800553c <HAL_GetREVID>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f241 0203 	movw	r2, #4099	; 0x1003
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d817      	bhi.n	800be14 <HAL_RCC_OscConfig+0x1f4>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	2b40      	cmp	r3, #64	; 0x40
 800bdea:	d108      	bne.n	800bdfe <HAL_RCC_OscConfig+0x1de>
 800bdec:	4b2e      	ldr	r3, [pc, #184]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bdf4:	4a2c      	ldr	r2, [pc, #176]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bdf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdfa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdfc:	e07a      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdfe:	4b2a      	ldr	r3, [pc, #168]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	031b      	lsls	r3, r3, #12
 800be0c:	4926      	ldr	r1, [pc, #152]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be12:	e06f      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	061b      	lsls	r3, r3, #24
 800be22:	4921      	ldr	r1, [pc, #132]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be24:	4313      	orrs	r3, r2
 800be26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be28:	e064      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d047      	beq.n	800bec2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be32:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f023 0219 	bic.w	r2, r3, #25
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	491a      	ldr	r1, [pc, #104]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be40:	4313      	orrs	r3, r2
 800be42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be44:	f7f9 fb4a 	bl	80054dc <HAL_GetTick>
 800be48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be4a:	e008      	b.n	800be5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be4c:	f7f9 fb46 	bl	80054dc <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b02      	cmp	r3, #2
 800be58:	d901      	bls.n	800be5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e332      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 0304 	and.w	r3, r3, #4
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0f0      	beq.n	800be4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be6a:	f7f9 fb67 	bl	800553c <HAL_GetREVID>
 800be6e:	4603      	mov	r3, r0
 800be70:	f241 0203 	movw	r2, #4099	; 0x1003
 800be74:	4293      	cmp	r3, r2
 800be76:	d819      	bhi.n	800beac <HAL_RCC_OscConfig+0x28c>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	2b40      	cmp	r3, #64	; 0x40
 800be7e:	d108      	bne.n	800be92 <HAL_RCC_OscConfig+0x272>
 800be80:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800be88:	4a07      	ldr	r2, [pc, #28]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be8e:	6053      	str	r3, [r2, #4]
 800be90:	e030      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
 800be92:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	031b      	lsls	r3, r3, #12
 800bea0:	4901      	ldr	r1, [pc, #4]	; (800bea8 <HAL_RCC_OscConfig+0x288>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	604b      	str	r3, [r1, #4]
 800bea6:	e025      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
 800bea8:	58024400 	.word	0x58024400
 800beac:	4b9a      	ldr	r3, [pc, #616]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	061b      	lsls	r3, r3, #24
 800beba:	4997      	ldr	r1, [pc, #604]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	604b      	str	r3, [r1, #4]
 800bec0:	e018      	b.n	800bef4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bec2:	4b95      	ldr	r3, [pc, #596]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a94      	ldr	r2, [pc, #592]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bec8:	f023 0301 	bic.w	r3, r3, #1
 800becc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bece:	f7f9 fb05 	bl	80054dc <HAL_GetTick>
 800bed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bed4:	e008      	b.n	800bee8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bed6:	f7f9 fb01 	bl	80054dc <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e2ed      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bee8:	4b8b      	ldr	r3, [pc, #556]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1f0      	bne.n	800bed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 80a9 	beq.w	800c054 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf02:	4b85      	ldr	r3, [pc, #532]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bf0c:	4b82      	ldr	r3, [pc, #520]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d007      	beq.n	800bf28 <HAL_RCC_OscConfig+0x308>
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b18      	cmp	r3, #24
 800bf1c:	d13a      	bne.n	800bf94 <HAL_RCC_OscConfig+0x374>
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	f003 0303 	and.w	r3, r3, #3
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d135      	bne.n	800bf94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf28:	4b7b      	ldr	r3, [pc, #492]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <HAL_RCC_OscConfig+0x320>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	2b80      	cmp	r3, #128	; 0x80
 800bf3a:	d001      	beq.n	800bf40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e2c1      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf40:	f7f9 fafc 	bl	800553c <HAL_GetREVID>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f241 0203 	movw	r2, #4099	; 0x1003
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d817      	bhi.n	800bf7e <HAL_RCC_OscConfig+0x35e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	d108      	bne.n	800bf68 <HAL_RCC_OscConfig+0x348>
 800bf56:	4b70      	ldr	r3, [pc, #448]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bf5e:	4a6e      	ldr	r2, [pc, #440]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf66:	e075      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf68:	4b6b      	ldr	r3, [pc, #428]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	069b      	lsls	r3, r3, #26
 800bf76:	4968      	ldr	r1, [pc, #416]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf7c:	e06a      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf7e:	4b66      	ldr	r3, [pc, #408]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	061b      	lsls	r3, r3, #24
 800bf8c:	4962      	ldr	r1, [pc, #392]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf92:	e05f      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d042      	beq.n	800c022 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bf9c:	4b5e      	ldr	r3, [pc, #376]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a5d      	ldr	r2, [pc, #372]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bfa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa8:	f7f9 fa98 	bl	80054dc <HAL_GetTick>
 800bfac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfae:	e008      	b.n	800bfc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfb0:	f7f9 fa94 	bl	80054dc <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d901      	bls.n	800bfc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e280      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfc2:	4b55      	ldr	r3, [pc, #340]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0f0      	beq.n	800bfb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfce:	f7f9 fab5 	bl	800553c <HAL_GetREVID>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	f241 0203 	movw	r2, #4099	; 0x1003
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d817      	bhi.n	800c00c <HAL_RCC_OscConfig+0x3ec>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d108      	bne.n	800bff6 <HAL_RCC_OscConfig+0x3d6>
 800bfe4:	4b4c      	ldr	r3, [pc, #304]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bfec:	4a4a      	ldr	r2, [pc, #296]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bfee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bff2:	6053      	str	r3, [r2, #4]
 800bff4:	e02e      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
 800bff6:	4b48      	ldr	r3, [pc, #288]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	069b      	lsls	r3, r3, #26
 800c004:	4944      	ldr	r1, [pc, #272]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c006:	4313      	orrs	r3, r2
 800c008:	604b      	str	r3, [r1, #4]
 800c00a:	e023      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
 800c00c:	4b42      	ldr	r3, [pc, #264]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	061b      	lsls	r3, r3, #24
 800c01a:	493f      	ldr	r1, [pc, #252]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60cb      	str	r3, [r1, #12]
 800c020:	e018      	b.n	800c054 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c022:	4b3d      	ldr	r3, [pc, #244]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a3c      	ldr	r2, [pc, #240]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c02c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c02e:	f7f9 fa55 	bl	80054dc <HAL_GetTick>
 800c032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c034:	e008      	b.n	800c048 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c036:	f7f9 fa51 	bl	80054dc <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b02      	cmp	r3, #2
 800c042:	d901      	bls.n	800c048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e23d      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c048:	4b33      	ldr	r3, [pc, #204]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f0      	bne.n	800c036 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0308 	and.w	r3, r3, #8
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d036      	beq.n	800c0ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d019      	beq.n	800c09c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c068:	4b2b      	ldr	r3, [pc, #172]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06c:	4a2a      	ldr	r2, [pc, #168]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c074:	f7f9 fa32 	bl	80054dc <HAL_GetTick>
 800c078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c07a:	e008      	b.n	800c08e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c07c:	f7f9 fa2e 	bl	80054dc <HAL_GetTick>
 800c080:	4602      	mov	r2, r0
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	2b02      	cmp	r3, #2
 800c088:	d901      	bls.n	800c08e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e21a      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c08e:	4b22      	ldr	r3, [pc, #136]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c092:	f003 0302 	and.w	r3, r3, #2
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0f0      	beq.n	800c07c <HAL_RCC_OscConfig+0x45c>
 800c09a:	e018      	b.n	800c0ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c09c:	4b1e      	ldr	r3, [pc, #120]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a0:	4a1d      	ldr	r2, [pc, #116]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c0a2:	f023 0301 	bic.w	r3, r3, #1
 800c0a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a8:	f7f9 fa18 	bl	80054dc <HAL_GetTick>
 800c0ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0ae:	e008      	b.n	800c0c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0b0:	f7f9 fa14 	bl	80054dc <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d901      	bls.n	800c0c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e200      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0c2:	4b15      	ldr	r3, [pc, #84]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1f0      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d039      	beq.n	800c14e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d01c      	beq.n	800c11c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0c      	ldr	r2, [pc, #48]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c0e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c0ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c0ee:	f7f9 f9f5 	bl	80054dc <HAL_GetTick>
 800c0f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c0f4:	e008      	b.n	800c108 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0f6:	f7f9 f9f1 	bl	80054dc <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d901      	bls.n	800c108 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e1dd      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c108:	4b03      	ldr	r3, [pc, #12]	; (800c118 <HAL_RCC_OscConfig+0x4f8>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0f0      	beq.n	800c0f6 <HAL_RCC_OscConfig+0x4d6>
 800c114:	e01b      	b.n	800c14e <HAL_RCC_OscConfig+0x52e>
 800c116:	bf00      	nop
 800c118:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c11c:	4b9b      	ldr	r3, [pc, #620]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a9a      	ldr	r2, [pc, #616]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c126:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c128:	f7f9 f9d8 	bl	80054dc <HAL_GetTick>
 800c12c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c12e:	e008      	b.n	800c142 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c130:	f7f9 f9d4 	bl	80054dc <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d901      	bls.n	800c142 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	e1c0      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c142:	4b92      	ldr	r3, [pc, #584]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1f0      	bne.n	800c130 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 8081 	beq.w	800c25e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c15c:	4b8c      	ldr	r3, [pc, #560]	; (800c390 <HAL_RCC_OscConfig+0x770>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a8b      	ldr	r2, [pc, #556]	; (800c390 <HAL_RCC_OscConfig+0x770>)
 800c162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c168:	f7f9 f9b8 	bl	80054dc <HAL_GetTick>
 800c16c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c16e:	e008      	b.n	800c182 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c170:	f7f9 f9b4 	bl	80054dc <HAL_GetTick>
 800c174:	4602      	mov	r2, r0
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	2b64      	cmp	r3, #100	; 0x64
 800c17c:	d901      	bls.n	800c182 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e1a0      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c182:	4b83      	ldr	r3, [pc, #524]	; (800c390 <HAL_RCC_OscConfig+0x770>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0f0      	beq.n	800c170 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d106      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x584>
 800c196:	4b7d      	ldr	r3, [pc, #500]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19a:	4a7c      	ldr	r2, [pc, #496]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c19c:	f043 0301 	orr.w	r3, r3, #1
 800c1a0:	6713      	str	r3, [r2, #112]	; 0x70
 800c1a2:	e02d      	b.n	800c200 <HAL_RCC_OscConfig+0x5e0>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10c      	bne.n	800c1c6 <HAL_RCC_OscConfig+0x5a6>
 800c1ac:	4b77      	ldr	r3, [pc, #476]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b0:	4a76      	ldr	r2, [pc, #472]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1b2:	f023 0301 	bic.w	r3, r3, #1
 800c1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800c1b8:	4b74      	ldr	r3, [pc, #464]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1bc:	4a73      	ldr	r2, [pc, #460]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1be:	f023 0304 	bic.w	r3, r3, #4
 800c1c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c1c4:	e01c      	b.n	800c200 <HAL_RCC_OscConfig+0x5e0>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d10c      	bne.n	800c1e8 <HAL_RCC_OscConfig+0x5c8>
 800c1ce:	4b6f      	ldr	r3, [pc, #444]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d2:	4a6e      	ldr	r2, [pc, #440]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1d4:	f043 0304 	orr.w	r3, r3, #4
 800c1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800c1da:	4b6c      	ldr	r3, [pc, #432]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1de:	4a6b      	ldr	r2, [pc, #428]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1e0:	f043 0301 	orr.w	r3, r3, #1
 800c1e4:	6713      	str	r3, [r2, #112]	; 0x70
 800c1e6:	e00b      	b.n	800c200 <HAL_RCC_OscConfig+0x5e0>
 800c1e8:	4b68      	ldr	r3, [pc, #416]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ec:	4a67      	ldr	r2, [pc, #412]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	6713      	str	r3, [r2, #112]	; 0x70
 800c1f4:	4b65      	ldr	r3, [pc, #404]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f8:	4a64      	ldr	r2, [pc, #400]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c1fa:	f023 0304 	bic.w	r3, r3, #4
 800c1fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d015      	beq.n	800c234 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c208:	f7f9 f968 	bl	80054dc <HAL_GetTick>
 800c20c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c20e:	e00a      	b.n	800c226 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c210:	f7f9 f964 	bl	80054dc <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c21e:	4293      	cmp	r3, r2
 800c220:	d901      	bls.n	800c226 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e14e      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c226:	4b59      	ldr	r3, [pc, #356]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0ee      	beq.n	800c210 <HAL_RCC_OscConfig+0x5f0>
 800c232:	e014      	b.n	800c25e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c234:	f7f9 f952 	bl	80054dc <HAL_GetTick>
 800c238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c23a:	e00a      	b.n	800c252 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c23c:	f7f9 f94e 	bl	80054dc <HAL_GetTick>
 800c240:	4602      	mov	r2, r0
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	f241 3288 	movw	r2, #5000	; 0x1388
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e138      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c252:	4b4e      	ldr	r3, [pc, #312]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1ee      	bne.n	800c23c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 812d 	beq.w	800c4c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c268:	4b48      	ldr	r3, [pc, #288]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c270:	2b18      	cmp	r3, #24
 800c272:	f000 80bd 	beq.w	800c3f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	f040 809e 	bne.w	800c3bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c280:	4b42      	ldr	r3, [pc, #264]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a41      	ldr	r2, [pc, #260]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c28c:	f7f9 f926 	bl	80054dc <HAL_GetTick>
 800c290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c292:	e008      	b.n	800c2a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c294:	f7f9 f922 	bl	80054dc <HAL_GetTick>
 800c298:	4602      	mov	r2, r0
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d901      	bls.n	800c2a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e10e      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2a6:	4b39      	ldr	r3, [pc, #228]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f0      	bne.n	800c294 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2b2:	4b36      	ldr	r3, [pc, #216]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2b6:	4b37      	ldr	r3, [pc, #220]	; (800c394 <HAL_RCC_OscConfig+0x774>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c2c2:	0112      	lsls	r2, r2, #4
 800c2c4:	430a      	orrs	r2, r1
 800c2c6:	4931      	ldr	r1, [pc, #196]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	628b      	str	r3, [r1, #40]	; 0x28
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	025b      	lsls	r3, r3, #9
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	041b      	lsls	r3, r3, #16
 800c2ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	061b      	lsls	r3, r3, #24
 800c2f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2fc:	4923      	ldr	r1, [pc, #140]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	4a21      	ldr	r2, [pc, #132]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c308:	f023 0301 	bic.w	r3, r3, #1
 800c30c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c30e:	4b1f      	ldr	r3, [pc, #124]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c312:	4b21      	ldr	r3, [pc, #132]	; (800c398 <HAL_RCC_OscConfig+0x778>)
 800c314:	4013      	ands	r3, r2
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c31a:	00d2      	lsls	r2, r2, #3
 800c31c:	491b      	ldr	r1, [pc, #108]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c322:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	f023 020c 	bic.w	r2, r3, #12
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32e:	4917      	ldr	r1, [pc, #92]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c330:	4313      	orrs	r3, r2
 800c332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c334:	4b15      	ldr	r3, [pc, #84]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c338:	f023 0202 	bic.w	r2, r3, #2
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c340:	4912      	ldr	r1, [pc, #72]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c342:	4313      	orrs	r3, r2
 800c344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34a:	4a10      	ldr	r2, [pc, #64]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c34c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c352:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c356:	4a0d      	ldr	r2, [pc, #52]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c35c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c35e:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	4a0a      	ldr	r2, [pc, #40]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c36a:	4b08      	ldr	r3, [pc, #32]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36e:	4a07      	ldr	r2, [pc, #28]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c370:	f043 0301 	orr.w	r3, r3, #1
 800c374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a04      	ldr	r2, [pc, #16]	; (800c38c <HAL_RCC_OscConfig+0x76c>)
 800c37c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c382:	f7f9 f8ab 	bl	80054dc <HAL_GetTick>
 800c386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c388:	e011      	b.n	800c3ae <HAL_RCC_OscConfig+0x78e>
 800c38a:	bf00      	nop
 800c38c:	58024400 	.word	0x58024400
 800c390:	58024800 	.word	0x58024800
 800c394:	fffffc0c 	.word	0xfffffc0c
 800c398:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c39c:	f7f9 f89e 	bl	80054dc <HAL_GetTick>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d901      	bls.n	800c3ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e08a      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3ae:	4b47      	ldr	r3, [pc, #284]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0f0      	beq.n	800c39c <HAL_RCC_OscConfig+0x77c>
 800c3ba:	e082      	b.n	800c4c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3bc:	4b43      	ldr	r3, [pc, #268]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a42      	ldr	r2, [pc, #264]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c8:	f7f9 f888 	bl	80054dc <HAL_GetTick>
 800c3cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c3ce:	e008      	b.n	800c3e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3d0:	f7f9 f884 	bl	80054dc <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d901      	bls.n	800c3e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e070      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c3e2:	4b3a      	ldr	r3, [pc, #232]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1f0      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x7b0>
 800c3ee:	e068      	b.n	800c4c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c3f0:	4b36      	ldr	r3, [pc, #216]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c3f6:	4b35      	ldr	r3, [pc, #212]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b01      	cmp	r3, #1
 800c402:	d031      	beq.n	800c468 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f003 0203 	and.w	r2, r3, #3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c40e:	429a      	cmp	r2, r3
 800c410:	d12a      	bne.n	800c468 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	091b      	lsrs	r3, r3, #4
 800c416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c41e:	429a      	cmp	r2, r3
 800c420:	d122      	bne.n	800c468 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c42e:	429a      	cmp	r2, r3
 800c430:	d11a      	bne.n	800c468 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	0a5b      	lsrs	r3, r3, #9
 800c436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c440:	429a      	cmp	r2, r3
 800c442:	d111      	bne.n	800c468 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c452:	429a      	cmp	r2, r3
 800c454:	d108      	bne.n	800c468 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	0e1b      	lsrs	r3, r3, #24
 800c45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c462:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c464:	429a      	cmp	r2, r3
 800c466:	d001      	beq.n	800c46c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e02b      	b.n	800c4c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c46c:	4b17      	ldr	r3, [pc, #92]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c470:	08db      	lsrs	r3, r3, #3
 800c472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c476:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d01f      	beq.n	800c4c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c482:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	4a11      	ldr	r2, [pc, #68]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c488:	f023 0301 	bic.w	r3, r3, #1
 800c48c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c48e:	f7f9 f825 	bl	80054dc <HAL_GetTick>
 800c492:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c494:	bf00      	nop
 800c496:	f7f9 f821 	bl	80054dc <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d0f9      	beq.n	800c496 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4a6:	4b0a      	ldr	r3, [pc, #40]	; (800c4d0 <HAL_RCC_OscConfig+0x8b0>)
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c4ae:	00d2      	lsls	r2, r2, #3
 800c4b0:	4906      	ldr	r1, [pc, #24]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c4b6:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	4a04      	ldr	r2, [pc, #16]	; (800c4cc <HAL_RCC_OscConfig+0x8ac>)
 800c4bc:	f043 0301 	orr.w	r3, r3, #1
 800c4c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3730      	adds	r7, #48	; 0x30
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	58024400 	.word	0x58024400
 800c4d0:	ffff0007 	.word	0xffff0007

0800c4d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e19c      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c4e8:	4b8a      	ldr	r3, [pc, #552]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d910      	bls.n	800c518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4f6:	4b87      	ldr	r3, [pc, #540]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f023 020f 	bic.w	r2, r3, #15
 800c4fe:	4985      	ldr	r1, [pc, #532]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	4313      	orrs	r3, r2
 800c504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c506:	4b83      	ldr	r3, [pc, #524]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d001      	beq.n	800c518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e184      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d010      	beq.n	800c546 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	691a      	ldr	r2, [r3, #16]
 800c528:	4b7b      	ldr	r3, [pc, #492]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c530:	429a      	cmp	r2, r3
 800c532:	d908      	bls.n	800c546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c534:	4b78      	ldr	r3, [pc, #480]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	4975      	ldr	r1, [pc, #468]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c542:	4313      	orrs	r3, r2
 800c544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0308 	and.w	r3, r3, #8
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d010      	beq.n	800c574 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	695a      	ldr	r2, [r3, #20]
 800c556:	4b70      	ldr	r3, [pc, #448]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c55e:	429a      	cmp	r2, r3
 800c560:	d908      	bls.n	800c574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c562:	4b6d      	ldr	r3, [pc, #436]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	496a      	ldr	r1, [pc, #424]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c570:	4313      	orrs	r3, r2
 800c572:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d010      	beq.n	800c5a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	4b64      	ldr	r3, [pc, #400]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d908      	bls.n	800c5a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c590:	4b61      	ldr	r3, [pc, #388]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	495e      	ldr	r1, [pc, #376]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0320 	and.w	r3, r3, #32
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d010      	beq.n	800c5d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	69da      	ldr	r2, [r3, #28]
 800c5b2:	4b59      	ldr	r3, [pc, #356]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d908      	bls.n	800c5d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c5be:	4b56      	ldr	r3, [pc, #344]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	4953      	ldr	r1, [pc, #332]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0302 	and.w	r3, r3, #2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d010      	beq.n	800c5fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	68da      	ldr	r2, [r3, #12]
 800c5e0:	4b4d      	ldr	r3, [pc, #308]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	f003 030f 	and.w	r3, r3, #15
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d908      	bls.n	800c5fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5ec:	4b4a      	ldr	r3, [pc, #296]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	f023 020f 	bic.w	r2, r3, #15
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	4947      	ldr	r1, [pc, #284]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d055      	beq.n	800c6b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c60a:	4b43      	ldr	r3, [pc, #268]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	4940      	ldr	r1, [pc, #256]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	2b02      	cmp	r3, #2
 800c622:	d107      	bne.n	800c634 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c624:	4b3c      	ldr	r3, [pc, #240]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d121      	bne.n	800c674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	e0f6      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d107      	bne.n	800c64c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c63c:	4b36      	ldr	r3, [pc, #216]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c644:	2b00      	cmp	r3, #0
 800c646:	d115      	bne.n	800c674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e0ea      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d107      	bne.n	800c664 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c654:	4b30      	ldr	r3, [pc, #192]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d109      	bne.n	800c674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	e0de      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c664:	4b2c      	ldr	r3, [pc, #176]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e0d6      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c674:	4b28      	ldr	r3, [pc, #160]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	f023 0207 	bic.w	r2, r3, #7
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4925      	ldr	r1, [pc, #148]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c682:	4313      	orrs	r3, r2
 800c684:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c686:	f7f8 ff29 	bl	80054dc <HAL_GetTick>
 800c68a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c68c:	e00a      	b.n	800c6a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c68e:	f7f8 ff25 	bl	80054dc <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e0be      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6a4:	4b1c      	ldr	r3, [pc, #112]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d1eb      	bne.n	800c68e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 0302 	and.w	r3, r3, #2
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d010      	beq.n	800c6e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	4b14      	ldr	r3, [pc, #80]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c6c8:	699b      	ldr	r3, [r3, #24]
 800c6ca:	f003 030f 	and.w	r3, r3, #15
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d208      	bcs.n	800c6e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c6d2:	4b11      	ldr	r3, [pc, #68]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	f023 020f 	bic.w	r2, r3, #15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	490e      	ldr	r1, [pc, #56]	; (800c718 <HAL_RCC_ClockConfig+0x244>)
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 030f 	and.w	r3, r3, #15
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d214      	bcs.n	800c71c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6f2:	4b08      	ldr	r3, [pc, #32]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f023 020f 	bic.w	r2, r3, #15
 800c6fa:	4906      	ldr	r1, [pc, #24]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c702:	4b04      	ldr	r3, [pc, #16]	; (800c714 <HAL_RCC_ClockConfig+0x240>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f003 030f 	and.w	r3, r3, #15
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d005      	beq.n	800c71c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e086      	b.n	800c822 <HAL_RCC_ClockConfig+0x34e>
 800c714:	52002000 	.word	0x52002000
 800c718:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d010      	beq.n	800c74a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	4b3f      	ldr	r3, [pc, #252]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c734:	429a      	cmp	r2, r3
 800c736:	d208      	bcs.n	800c74a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c738:	4b3c      	ldr	r3, [pc, #240]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	4939      	ldr	r1, [pc, #228]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c746:	4313      	orrs	r3, r2
 800c748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0308 	and.w	r3, r3, #8
 800c752:	2b00      	cmp	r3, #0
 800c754:	d010      	beq.n	800c778 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	695a      	ldr	r2, [r3, #20]
 800c75a:	4b34      	ldr	r3, [pc, #208]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c762:	429a      	cmp	r2, r3
 800c764:	d208      	bcs.n	800c778 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c766:	4b31      	ldr	r3, [pc, #196]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	492e      	ldr	r1, [pc, #184]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c774:	4313      	orrs	r3, r2
 800c776:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0310 	and.w	r3, r3, #16
 800c780:	2b00      	cmp	r3, #0
 800c782:	d010      	beq.n	800c7a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	699a      	ldr	r2, [r3, #24]
 800c788:	4b28      	ldr	r3, [pc, #160]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c78a:	69db      	ldr	r3, [r3, #28]
 800c78c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c790:	429a      	cmp	r2, r3
 800c792:	d208      	bcs.n	800c7a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c794:	4b25      	ldr	r3, [pc, #148]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c796:	69db      	ldr	r3, [r3, #28]
 800c798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	4922      	ldr	r1, [pc, #136]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d010      	beq.n	800c7d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	69da      	ldr	r2, [r3, #28]
 800c7b6:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d208      	bcs.n	800c7d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7c2:	4b1a      	ldr	r3, [pc, #104]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	4917      	ldr	r1, [pc, #92]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c7d4:	f000 f834 	bl	800c840 <HAL_RCC_GetSysClockFreq>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	4b14      	ldr	r3, [pc, #80]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	0a1b      	lsrs	r3, r3, #8
 800c7e0:	f003 030f 	and.w	r3, r3, #15
 800c7e4:	4912      	ldr	r1, [pc, #72]	; (800c830 <HAL_RCC_ClockConfig+0x35c>)
 800c7e6:	5ccb      	ldrb	r3, [r1, r3]
 800c7e8:	f003 031f 	and.w	r3, r3, #31
 800c7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c7f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c7f2:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <HAL_RCC_ClockConfig+0x358>)
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	4a0d      	ldr	r2, [pc, #52]	; (800c830 <HAL_RCC_ClockConfig+0x35c>)
 800c7fc:	5cd3      	ldrb	r3, [r2, r3]
 800c7fe:	f003 031f 	and.w	r3, r3, #31
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	fa22 f303 	lsr.w	r3, r2, r3
 800c808:	4a0a      	ldr	r2, [pc, #40]	; (800c834 <HAL_RCC_ClockConfig+0x360>)
 800c80a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c80c:	4a0a      	ldr	r2, [pc, #40]	; (800c838 <HAL_RCC_ClockConfig+0x364>)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c812:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <HAL_RCC_ClockConfig+0x368>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4618      	mov	r0, r3
 800c818:	f7f8 fe16 	bl	8005448 <HAL_InitTick>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c820:	7bfb      	ldrb	r3, [r7, #15]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	58024400 	.word	0x58024400
 800c830:	0801820c 	.word	0x0801820c
 800c834:	2000001c 	.word	0x2000001c
 800c838:	20000018 	.word	0x20000018
 800c83c:	20000040 	.word	0x20000040

0800c840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c840:	b480      	push	{r7}
 800c842:	b089      	sub	sp, #36	; 0x24
 800c844:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c846:	4bb3      	ldr	r3, [pc, #716]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c84e:	2b18      	cmp	r3, #24
 800c850:	f200 8155 	bhi.w	800cafe <HAL_RCC_GetSysClockFreq+0x2be>
 800c854:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85a:	bf00      	nop
 800c85c:	0800c8c1 	.word	0x0800c8c1
 800c860:	0800caff 	.word	0x0800caff
 800c864:	0800caff 	.word	0x0800caff
 800c868:	0800caff 	.word	0x0800caff
 800c86c:	0800caff 	.word	0x0800caff
 800c870:	0800caff 	.word	0x0800caff
 800c874:	0800caff 	.word	0x0800caff
 800c878:	0800caff 	.word	0x0800caff
 800c87c:	0800c8e7 	.word	0x0800c8e7
 800c880:	0800caff 	.word	0x0800caff
 800c884:	0800caff 	.word	0x0800caff
 800c888:	0800caff 	.word	0x0800caff
 800c88c:	0800caff 	.word	0x0800caff
 800c890:	0800caff 	.word	0x0800caff
 800c894:	0800caff 	.word	0x0800caff
 800c898:	0800caff 	.word	0x0800caff
 800c89c:	0800c8ed 	.word	0x0800c8ed
 800c8a0:	0800caff 	.word	0x0800caff
 800c8a4:	0800caff 	.word	0x0800caff
 800c8a8:	0800caff 	.word	0x0800caff
 800c8ac:	0800caff 	.word	0x0800caff
 800c8b0:	0800caff 	.word	0x0800caff
 800c8b4:	0800caff 	.word	0x0800caff
 800c8b8:	0800caff 	.word	0x0800caff
 800c8bc:	0800c8f3 	.word	0x0800c8f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8c0:	4b94      	ldr	r3, [pc, #592]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0320 	and.w	r3, r3, #32
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8cc:	4b91      	ldr	r3, [pc, #580]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	08db      	lsrs	r3, r3, #3
 800c8d2:	f003 0303 	and.w	r3, r3, #3
 800c8d6:	4a90      	ldr	r2, [pc, #576]	; (800cb18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c8de:	e111      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c8e0:	4b8d      	ldr	r3, [pc, #564]	; (800cb18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8e2:	61bb      	str	r3, [r7, #24]
      break;
 800c8e4:	e10e      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c8e6:	4b8d      	ldr	r3, [pc, #564]	; (800cb1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c8e8:	61bb      	str	r3, [r7, #24]
      break;
 800c8ea:	e10b      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c8ec:	4b8c      	ldr	r3, [pc, #560]	; (800cb20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c8ee:	61bb      	str	r3, [r7, #24]
      break;
 800c8f0:	e108      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8f2:	4b88      	ldr	r3, [pc, #544]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c8fc:	4b85      	ldr	r3, [pc, #532]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c900:	091b      	lsrs	r3, r3, #4
 800c902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c906:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c908:	4b82      	ldr	r3, [pc, #520]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c912:	4b80      	ldr	r3, [pc, #512]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c916:	08db      	lsrs	r3, r3, #3
 800c918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	fb02 f303 	mul.w	r3, r2, r3
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 80e1 	beq.w	800caf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	f000 8083 	beq.w	800ca44 <HAL_RCC_GetSysClockFreq+0x204>
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b02      	cmp	r3, #2
 800c942:	f200 80a1 	bhi.w	800ca88 <HAL_RCC_GetSysClockFreq+0x248>
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <HAL_RCC_GetSysClockFreq+0x114>
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d056      	beq.n	800ca00 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c952:	e099      	b.n	800ca88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c954:	4b6f      	ldr	r3, [pc, #444]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d02d      	beq.n	800c9bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c960:	4b6c      	ldr	r3, [pc, #432]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	08db      	lsrs	r3, r3, #3
 800c966:	f003 0303 	and.w	r3, r3, #3
 800c96a:	4a6b      	ldr	r2, [pc, #428]	; (800cb18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c96c:	fa22 f303 	lsr.w	r3, r2, r3
 800c970:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	ee07 3a90 	vmov	s15, r3
 800c978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b62      	ldr	r3, [pc, #392]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c99e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cb24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c9ba:	e087      	b.n	800cacc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cb28 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b51      	ldr	r3, [pc, #324]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cb24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c9fe:	e065      	b.n	800cacc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cb2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca12:	4b40      	ldr	r3, [pc, #256]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cb24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca42:	e043      	b.n	800cacc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cb30 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ca52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca56:	4b2f      	ldr	r3, [pc, #188]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cb24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca86:	e021      	b.n	800cacc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cb2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9a:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800caae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cb24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800caca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cacc:	4b11      	ldr	r3, [pc, #68]	; (800cb14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad0:	0a5b      	lsrs	r3, r3, #9
 800cad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad6:	3301      	adds	r3, #1
 800cad8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	ee07 3a90 	vmov	s15, r3
 800cae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cae4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf0:	ee17 3a90 	vmov	r3, s15
 800caf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800caf6:	e005      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800caf8:	2300      	movs	r3, #0
 800cafa:	61bb      	str	r3, [r7, #24]
      break;
 800cafc:	e002      	b.n	800cb04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cafe:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb00:	61bb      	str	r3, [r7, #24]
      break;
 800cb02:	bf00      	nop
  }

  return sysclockfreq;
 800cb04:	69bb      	ldr	r3, [r7, #24]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3724      	adds	r7, #36	; 0x24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	58024400 	.word	0x58024400
 800cb18:	03d09000 	.word	0x03d09000
 800cb1c:	003d0900 	.word	0x003d0900
 800cb20:	017d7840 	.word	0x017d7840
 800cb24:	46000000 	.word	0x46000000
 800cb28:	4c742400 	.word	0x4c742400
 800cb2c:	4a742400 	.word	0x4a742400
 800cb30:	4bbebc20 	.word	0x4bbebc20

0800cb34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb3a:	f7ff fe81 	bl	800c840 <HAL_RCC_GetSysClockFreq>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	0a1b      	lsrs	r3, r3, #8
 800cb46:	f003 030f 	and.w	r3, r3, #15
 800cb4a:	490f      	ldr	r1, [pc, #60]	; (800cb88 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb4c:	5ccb      	ldrb	r3, [r1, r3]
 800cb4e:	f003 031f 	and.w	r3, r3, #31
 800cb52:	fa22 f303 	lsr.w	r3, r2, r3
 800cb56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb58:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	f003 030f 	and.w	r3, r3, #15
 800cb60:	4a09      	ldr	r2, [pc, #36]	; (800cb88 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb62:	5cd3      	ldrb	r3, [r2, r3]
 800cb64:	f003 031f 	and.w	r3, r3, #31
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6e:	4a07      	ldr	r2, [pc, #28]	; (800cb8c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb72:	4a07      	ldr	r2, [pc, #28]	; (800cb90 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cb78:	4b04      	ldr	r3, [pc, #16]	; (800cb8c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	58024400 	.word	0x58024400
 800cb88:	0801820c 	.word	0x0801820c
 800cb8c:	2000001c 	.word	0x2000001c
 800cb90:	20000018 	.word	0x20000018

0800cb94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cb98:	f7ff ffcc 	bl	800cb34 <HAL_RCC_GetHCLKFreq>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	091b      	lsrs	r3, r3, #4
 800cba4:	f003 0307 	and.w	r3, r3, #7
 800cba8:	4904      	ldr	r1, [pc, #16]	; (800cbbc <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbaa:	5ccb      	ldrb	r3, [r1, r3]
 800cbac:	f003 031f 	and.w	r3, r3, #31
 800cbb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	0801820c 	.word	0x0801820c

0800cbc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cbc4:	f7ff ffb6 	bl	800cb34 <HAL_RCC_GetHCLKFreq>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	0a1b      	lsrs	r3, r3, #8
 800cbd0:	f003 0307 	and.w	r3, r3, #7
 800cbd4:	4904      	ldr	r1, [pc, #16]	; (800cbe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cbd6:	5ccb      	ldrb	r3, [r1, r3]
 800cbd8:	f003 031f 	and.w	r3, r3, #31
 800cbdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	58024400 	.word	0x58024400
 800cbe8:	0801820c 	.word	0x0801820c

0800cbec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cbec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbf0:	b0ca      	sub	sp, #296	; 0x128
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800cc10:	2500      	movs	r5, #0
 800cc12:	ea54 0305 	orrs.w	r3, r4, r5
 800cc16:	d049      	beq.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc22:	d02f      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc28:	d828      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc2e:	d01a      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc34:	d822      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc3e:	d007      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc40:	e01c      	b.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc42:	4bb8      	ldr	r3, [pc, #736]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc46:	4ab7      	ldr	r2, [pc, #732]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc4e:	e01a      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc54:	3308      	adds	r3, #8
 800cc56:	2102      	movs	r1, #2
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f002 fb61 	bl	800f320 <RCCEx_PLL2_Config>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc64:	e00f      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc6a:	3328      	adds	r3, #40	; 0x28
 800cc6c:	2102      	movs	r1, #2
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f002 fc08 	bl	800f484 <RCCEx_PLL3_Config>
 800cc74:	4603      	mov	r3, r0
 800cc76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc7a:	e004      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc82:	e000      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cc84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10a      	bne.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cc8e:	4ba5      	ldr	r3, [pc, #660]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc9c:	4aa1      	ldr	r2, [pc, #644]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc9e:	430b      	orrs	r3, r1
 800cca0:	6513      	str	r3, [r2, #80]	; 0x50
 800cca2:	e003      	b.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ccac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ccb8:	f04f 0900 	mov.w	r9, #0
 800ccbc:	ea58 0309 	orrs.w	r3, r8, r9
 800ccc0:	d047      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ccc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d82a      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cccc:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ccce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd2:	bf00      	nop
 800ccd4:	0800cce9 	.word	0x0800cce9
 800ccd8:	0800ccf7 	.word	0x0800ccf7
 800ccdc:	0800cd0d 	.word	0x0800cd0d
 800cce0:	0800cd2b 	.word	0x0800cd2b
 800cce4:	0800cd2b 	.word	0x0800cd2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cce8:	4b8e      	ldr	r3, [pc, #568]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccec:	4a8d      	ldr	r2, [pc, #564]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccf4:	e01a      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f002 fb0e 	bl	800f320 <RCCEx_PLL2_Config>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd0a:	e00f      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd10:	3328      	adds	r3, #40	; 0x28
 800cd12:	2100      	movs	r1, #0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f002 fbb5 	bl	800f484 <RCCEx_PLL3_Config>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd20:	e004      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd28:	e000      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10a      	bne.n	800cd4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd34:	4b7b      	ldr	r3, [pc, #492]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd38:	f023 0107 	bic.w	r1, r3, #7
 800cd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd42:	4a78      	ldr	r2, [pc, #480]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd44:	430b      	orrs	r3, r1
 800cd46:	6513      	str	r3, [r2, #80]	; 0x50
 800cd48:	e003      	b.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800cd5e:	f04f 0b00 	mov.w	fp, #0
 800cd62:	ea5a 030b 	orrs.w	r3, sl, fp
 800cd66:	d04c      	beq.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd72:	d030      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cd74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd78:	d829      	bhi.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd7a:	2bc0      	cmp	r3, #192	; 0xc0
 800cd7c:	d02d      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cd7e:	2bc0      	cmp	r3, #192	; 0xc0
 800cd80:	d825      	bhi.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd82:	2b80      	cmp	r3, #128	; 0x80
 800cd84:	d018      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cd86:	2b80      	cmp	r3, #128	; 0x80
 800cd88:	d821      	bhi.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cd8e:	2b40      	cmp	r3, #64	; 0x40
 800cd90:	d007      	beq.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cd92:	e01c      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd94:	4b63      	ldr	r3, [pc, #396]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	4a62      	ldr	r2, [pc, #392]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cda0:	e01c      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda6:	3308      	adds	r3, #8
 800cda8:	2100      	movs	r1, #0
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f002 fab8 	bl	800f320 <RCCEx_PLL2_Config>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdb6:	e011      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdbc:	3328      	adds	r3, #40	; 0x28
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f002 fb5f 	bl	800f484 <RCCEx_PLL3_Config>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdcc:	e006      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cdd4:	e002      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdd6:	bf00      	nop
 800cdd8:	e000      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10a      	bne.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cde4:	4b4f      	ldr	r3, [pc, #316]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800cdec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdf2:	4a4c      	ldr	r2, [pc, #304]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdf4:	430b      	orrs	r3, r1
 800cdf6:	6513      	str	r3, [r2, #80]	; 0x50
 800cdf8:	e003      	b.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ce0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ce12:	2300      	movs	r3, #0
 800ce14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ce18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	d053      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce2e:	d035      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce34:	d82e      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce3a:	d031      	beq.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ce3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce40:	d828      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce46:	d01a      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ce48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce4c:	d822      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ce52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce56:	d007      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ce58:	e01c      	b.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce5a:	4b32      	ldr	r3, [pc, #200]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	4a31      	ldr	r2, [pc, #196]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce66:	e01c      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce6c:	3308      	adds	r3, #8
 800ce6e:	2100      	movs	r1, #0
 800ce70:	4618      	mov	r0, r3
 800ce72:	f002 fa55 	bl	800f320 <RCCEx_PLL2_Config>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce7c:	e011      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce82:	3328      	adds	r3, #40	; 0x28
 800ce84:	2100      	movs	r1, #0
 800ce86:	4618      	mov	r0, r3
 800ce88:	f002 fafc 	bl	800f484 <RCCEx_PLL3_Config>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce92:	e006      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce9a:	e002      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ce9c:	bf00      	nop
 800ce9e:	e000      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10b      	bne.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ceaa:	4b1e      	ldr	r3, [pc, #120]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ceac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ceb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ceba:	4a1a      	ldr	r2, [pc, #104]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cebc:	430b      	orrs	r3, r1
 800cebe:	6593      	str	r3, [r2, #88]	; 0x58
 800cec0:	e003      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ceca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ced6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cee0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cee4:	460b      	mov	r3, r1
 800cee6:	4313      	orrs	r3, r2
 800cee8:	d056      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ceea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cef6:	d038      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cefc:	d831      	bhi.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cefe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf02:	d034      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cf04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf08:	d82b      	bhi.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf0e:	d01d      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cf10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf14:	d825      	bhi.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d006      	beq.n	800cf28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cf1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf1e:	d00a      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf20:	e01f      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf22:	bf00      	nop
 800cf24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf28:	4ba2      	ldr	r3, [pc, #648]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	4aa1      	ldr	r2, [pc, #644]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf34:	e01c      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f002 f9ee 	bl	800f320 <RCCEx_PLL2_Config>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cf4a:	e011      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf50:	3328      	adds	r3, #40	; 0x28
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f002 fa95 	bl	800f484 <RCCEx_PLL3_Config>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf60:	e006      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf68:	e002      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf78:	4b8e      	ldr	r3, [pc, #568]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cf80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf88:	4a8a      	ldr	r2, [pc, #552]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf8a:	430b      	orrs	r3, r1
 800cf8c:	6593      	str	r3, [r2, #88]	; 0x58
 800cf8e:	e003      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cfa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	d03a      	beq.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfbe:	2b30      	cmp	r3, #48	; 0x30
 800cfc0:	d01f      	beq.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cfc2:	2b30      	cmp	r3, #48	; 0x30
 800cfc4:	d819      	bhi.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfc6:	2b20      	cmp	r3, #32
 800cfc8:	d00c      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cfca:	2b20      	cmp	r3, #32
 800cfcc:	d815      	bhi.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d019      	beq.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cfd2:	2b10      	cmp	r3, #16
 800cfd4:	d111      	bne.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfd6:	4b77      	ldr	r3, [pc, #476]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	4a76      	ldr	r2, [pc, #472]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cfe2:	e011      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe8:	3308      	adds	r3, #8
 800cfea:	2102      	movs	r1, #2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f002 f997 	bl	800f320 <RCCEx_PLL2_Config>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cff8:	e006      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d000:	e002      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d002:	bf00      	nop
 800d004:	e000      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d010:	4b68      	ldr	r3, [pc, #416]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d014:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d01e:	4a65      	ldr	r2, [pc, #404]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d020:	430b      	orrs	r3, r1
 800d022:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d024:	e003      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d02a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d036:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d03a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d03e:	2300      	movs	r3, #0
 800d040:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d044:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d048:	460b      	mov	r3, r1
 800d04a:	4313      	orrs	r3, r2
 800d04c:	d051      	beq.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d058:	d035      	beq.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d05e:	d82e      	bhi.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d060:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d064:	d031      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d06a:	d828      	bhi.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d06c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d070:	d01a      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d076:	d822      	bhi.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d003      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d080:	d007      	beq.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d082:	e01c      	b.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d084:	4b4b      	ldr	r3, [pc, #300]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4a4a      	ldr	r2, [pc, #296]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d08a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d08e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d090:	e01c      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d096:	3308      	adds	r3, #8
 800d098:	2100      	movs	r1, #0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f002 f940 	bl	800f320 <RCCEx_PLL2_Config>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0a6:	e011      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0ac:	3328      	adds	r3, #40	; 0x28
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f002 f9e7 	bl	800f484 <RCCEx_PLL3_Config>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0bc:	e006      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d0c4:	e002      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0c6:	bf00      	nop
 800d0c8:	e000      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10a      	bne.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d0d4:	4b37      	ldr	r3, [pc, #220]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0e2:	4a34      	ldr	r2, [pc, #208]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	6513      	str	r3, [r2, #80]	; 0x50
 800d0e8:	e003      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d0fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d102:	2300      	movs	r3, #0
 800d104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d108:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d10c:	460b      	mov	r3, r1
 800d10e:	4313      	orrs	r3, r2
 800d110:	d056      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d11c:	d033      	beq.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d11e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d122:	d82c      	bhi.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d128:	d02f      	beq.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d12a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d12e:	d826      	bhi.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d130:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d134:	d02b      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d13a:	d820      	bhi.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d13c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d140:	d012      	beq.n	800d168 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d146:	d81a      	bhi.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d022      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d150:	d115      	bne.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d156:	3308      	adds	r3, #8
 800d158:	2101      	movs	r1, #1
 800d15a:	4618      	mov	r0, r3
 800d15c:	f002 f8e0 	bl	800f320 <RCCEx_PLL2_Config>
 800d160:	4603      	mov	r3, r0
 800d162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d166:	e015      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d16c:	3328      	adds	r3, #40	; 0x28
 800d16e:	2101      	movs	r1, #1
 800d170:	4618      	mov	r0, r3
 800d172:	f002 f987 	bl	800f484 <RCCEx_PLL3_Config>
 800d176:	4603      	mov	r3, r0
 800d178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d17c:	e00a      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d184:	e006      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d186:	bf00      	nop
 800d188:	e004      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d18a:	bf00      	nop
 800d18c:	e002      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d18e:	bf00      	nop
 800d190:	e000      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d192:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10d      	bne.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d19c:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1aa:	4a02      	ldr	r2, [pc, #8]	; (800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1ac:	430b      	orrs	r3, r1
 800d1ae:	6513      	str	r3, [r2, #80]	; 0x50
 800d1b0:	e006      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d1b2:	bf00      	nop
 800d1b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d1cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	d055      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d1e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1ec:	d033      	beq.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d1ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1f2:	d82c      	bhi.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f8:	d02f      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1fe:	d826      	bhi.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d204:	d02b      	beq.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d206:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d20a:	d820      	bhi.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d20c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d210:	d012      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d216:	d81a      	bhi.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d022      	beq.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d21c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d220:	d115      	bne.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d226:	3308      	adds	r3, #8
 800d228:	2101      	movs	r1, #1
 800d22a:	4618      	mov	r0, r3
 800d22c:	f002 f878 	bl	800f320 <RCCEx_PLL2_Config>
 800d230:	4603      	mov	r3, r0
 800d232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d236:	e015      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d23c:	3328      	adds	r3, #40	; 0x28
 800d23e:	2101      	movs	r1, #1
 800d240:	4618      	mov	r0, r3
 800d242:	f002 f91f 	bl	800f484 <RCCEx_PLL3_Config>
 800d246:	4603      	mov	r3, r0
 800d248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d24c:	e00a      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d254:	e006      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d256:	bf00      	nop
 800d258:	e004      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d25a:	bf00      	nop
 800d25c:	e002      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d25e:	bf00      	nop
 800d260:	e000      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d262:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10b      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d26c:	4ba3      	ldr	r3, [pc, #652]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d270:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d27c:	4a9f      	ldr	r2, [pc, #636]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d27e:	430b      	orrs	r3, r1
 800d280:	6593      	str	r3, [r2, #88]	; 0x58
 800d282:	e003      	b.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d288:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d29c:	2300      	movs	r3, #0
 800d29e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	d037      	beq.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2b6:	d00e      	beq.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2bc:	d816      	bhi.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d018      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d2c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2c6:	d111      	bne.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2c8:	4b8c      	ldr	r3, [pc, #560]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	4a8b      	ldr	r2, [pc, #556]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2d4:	e00f      	b.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2da:	3308      	adds	r3, #8
 800d2dc:	2101      	movs	r1, #1
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f002 f81e 	bl	800f320 <RCCEx_PLL2_Config>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2ea:	e004      	b.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d2f2:	e000      	b.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d2f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10a      	bne.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d2fe:	4b7f      	ldr	r3, [pc, #508]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d302:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30c:	4a7b      	ldr	r2, [pc, #492]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d30e:	430b      	orrs	r3, r1
 800d310:	6513      	str	r3, [r2, #80]	; 0x50
 800d312:	e003      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d32c:	2300      	movs	r3, #0
 800d32e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d332:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d336:	460b      	mov	r3, r1
 800d338:	4313      	orrs	r3, r2
 800d33a:	d039      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d342:	2b03      	cmp	r3, #3
 800d344:	d81c      	bhi.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d346:	a201      	add	r2, pc, #4	; (adr r2, 800d34c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34c:	0800d389 	.word	0x0800d389
 800d350:	0800d35d 	.word	0x0800d35d
 800d354:	0800d36b 	.word	0x0800d36b
 800d358:	0800d389 	.word	0x0800d389
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d35c:	4b67      	ldr	r3, [pc, #412]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d360:	4a66      	ldr	r2, [pc, #408]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d368:	e00f      	b.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d36e:	3308      	adds	r3, #8
 800d370:	2102      	movs	r1, #2
 800d372:	4618      	mov	r0, r3
 800d374:	f001 ffd4 	bl	800f320 <RCCEx_PLL2_Config>
 800d378:	4603      	mov	r3, r0
 800d37a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d37e:	e004      	b.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d386:	e000      	b.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d392:	4b5a      	ldr	r3, [pc, #360]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d396:	f023 0103 	bic.w	r1, r3, #3
 800d39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a0:	4a56      	ldr	r2, [pc, #344]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3a2:	430b      	orrs	r3, r1
 800d3a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3a6:	e003      	b.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d3bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d3c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	f000 809f 	beq.w	800d510 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d3d2:	4b4b      	ldr	r3, [pc, #300]	; (800d500 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a4a      	ldr	r2, [pc, #296]	; (800d500 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3de:	f7f8 f87d 	bl	80054dc <HAL_GetTick>
 800d3e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3e6:	e00b      	b.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3e8:	f7f8 f878 	bl	80054dc <HAL_GetTick>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	2b64      	cmp	r3, #100	; 0x64
 800d3f6:	d903      	bls.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3fe:	e005      	b.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d400:	4b3f      	ldr	r3, [pc, #252]	; (800d500 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0ed      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d40c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d410:	2b00      	cmp	r3, #0
 800d412:	d179      	bne.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d414:	4b39      	ldr	r3, [pc, #228]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d41c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d420:	4053      	eors	r3, r2
 800d422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d426:	2b00      	cmp	r3, #0
 800d428:	d015      	beq.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d42a:	4b34      	ldr	r3, [pc, #208]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d432:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d436:	4b31      	ldr	r3, [pc, #196]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43a:	4a30      	ldr	r2, [pc, #192]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d43c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d440:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d442:	4b2e      	ldr	r3, [pc, #184]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d446:	4a2d      	ldr	r2, [pc, #180]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d44c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d44e:	4a2b      	ldr	r2, [pc, #172]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d454:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d45a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d45e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d462:	d118      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d464:	f7f8 f83a 	bl	80054dc <HAL_GetTick>
 800d468:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d46c:	e00d      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d46e:	f7f8 f835 	bl	80054dc <HAL_GetTick>
 800d472:	4602      	mov	r2, r0
 800d474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d47e:	429a      	cmp	r2, r3
 800d480:	d903      	bls.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d488:	e005      	b.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d48a:	4b1c      	ldr	r3, [pc, #112]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48e:	f003 0302 	and.w	r3, r3, #2
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0eb      	beq.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d129      	bne.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4ae:	d10e      	bne.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d4b0:	4b12      	ldr	r3, [pc, #72]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4c0:	091a      	lsrs	r2, r3, #4
 800d4c2:	4b10      	ldr	r3, [pc, #64]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	4a0d      	ldr	r2, [pc, #52]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	6113      	str	r3, [r2, #16]
 800d4cc:	e005      	b.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	4a0a      	ldr	r2, [pc, #40]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d4d8:	6113      	str	r3, [r2, #16]
 800d4da:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4ea:	4a04      	ldr	r2, [pc, #16]	; (800d4fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4ec:	430b      	orrs	r3, r1
 800d4ee:	6713      	str	r3, [r2, #112]	; 0x70
 800d4f0:	e00e      	b.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d4fa:	e009      	b.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d4fc:	58024400 	.word	0x58024400
 800d500:	58024800 	.word	0x58024800
 800d504:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d50c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	f002 0301 	and.w	r3, r2, #1
 800d51c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d520:	2300      	movs	r3, #0
 800d522:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d526:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d52a:	460b      	mov	r3, r1
 800d52c:	4313      	orrs	r3, r2
 800d52e:	f000 8089 	beq.w	800d644 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d538:	2b28      	cmp	r3, #40	; 0x28
 800d53a:	d86b      	bhi.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d53c:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d542:	bf00      	nop
 800d544:	0800d61d 	.word	0x0800d61d
 800d548:	0800d615 	.word	0x0800d615
 800d54c:	0800d615 	.word	0x0800d615
 800d550:	0800d615 	.word	0x0800d615
 800d554:	0800d615 	.word	0x0800d615
 800d558:	0800d615 	.word	0x0800d615
 800d55c:	0800d615 	.word	0x0800d615
 800d560:	0800d615 	.word	0x0800d615
 800d564:	0800d5e9 	.word	0x0800d5e9
 800d568:	0800d615 	.word	0x0800d615
 800d56c:	0800d615 	.word	0x0800d615
 800d570:	0800d615 	.word	0x0800d615
 800d574:	0800d615 	.word	0x0800d615
 800d578:	0800d615 	.word	0x0800d615
 800d57c:	0800d615 	.word	0x0800d615
 800d580:	0800d615 	.word	0x0800d615
 800d584:	0800d5ff 	.word	0x0800d5ff
 800d588:	0800d615 	.word	0x0800d615
 800d58c:	0800d615 	.word	0x0800d615
 800d590:	0800d615 	.word	0x0800d615
 800d594:	0800d615 	.word	0x0800d615
 800d598:	0800d615 	.word	0x0800d615
 800d59c:	0800d615 	.word	0x0800d615
 800d5a0:	0800d615 	.word	0x0800d615
 800d5a4:	0800d61d 	.word	0x0800d61d
 800d5a8:	0800d615 	.word	0x0800d615
 800d5ac:	0800d615 	.word	0x0800d615
 800d5b0:	0800d615 	.word	0x0800d615
 800d5b4:	0800d615 	.word	0x0800d615
 800d5b8:	0800d615 	.word	0x0800d615
 800d5bc:	0800d615 	.word	0x0800d615
 800d5c0:	0800d615 	.word	0x0800d615
 800d5c4:	0800d61d 	.word	0x0800d61d
 800d5c8:	0800d615 	.word	0x0800d615
 800d5cc:	0800d615 	.word	0x0800d615
 800d5d0:	0800d615 	.word	0x0800d615
 800d5d4:	0800d615 	.word	0x0800d615
 800d5d8:	0800d615 	.word	0x0800d615
 800d5dc:	0800d615 	.word	0x0800d615
 800d5e0:	0800d615 	.word	0x0800d615
 800d5e4:	0800d61d 	.word	0x0800d61d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f001 fe95 	bl	800f320 <RCCEx_PLL2_Config>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5fc:	e00f      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d602:	3328      	adds	r3, #40	; 0x28
 800d604:	2101      	movs	r1, #1
 800d606:	4618      	mov	r0, r3
 800d608:	f001 ff3c 	bl	800f484 <RCCEx_PLL3_Config>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d612:	e004      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d61a:	e000      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d61e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d626:	4bbf      	ldr	r3, [pc, #764]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d62a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d634:	4abb      	ldr	r2, [pc, #748]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d636:	430b      	orrs	r3, r1
 800d638:	6553      	str	r3, [r2, #84]	; 0x54
 800d63a:	e003      	b.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d63c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64c:	f002 0302 	and.w	r3, r2, #2
 800d650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d654:	2300      	movs	r3, #0
 800d656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d65a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d65e:	460b      	mov	r3, r1
 800d660:	4313      	orrs	r3, r2
 800d662:	d041      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d66a:	2b05      	cmp	r3, #5
 800d66c:	d824      	bhi.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d66e:	a201      	add	r2, pc, #4	; (adr r2, 800d674 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d674:	0800d6c1 	.word	0x0800d6c1
 800d678:	0800d68d 	.word	0x0800d68d
 800d67c:	0800d6a3 	.word	0x0800d6a3
 800d680:	0800d6c1 	.word	0x0800d6c1
 800d684:	0800d6c1 	.word	0x0800d6c1
 800d688:	0800d6c1 	.word	0x0800d6c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d690:	3308      	adds	r3, #8
 800d692:	2101      	movs	r1, #1
 800d694:	4618      	mov	r0, r3
 800d696:	f001 fe43 	bl	800f320 <RCCEx_PLL2_Config>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6a0:	e00f      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6a6:	3328      	adds	r3, #40	; 0x28
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f001 feea 	bl	800f484 <RCCEx_PLL3_Config>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6b6:	e004      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6be:	e000      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d6c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10a      	bne.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d6ca:	4b96      	ldr	r3, [pc, #600]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6ce:	f023 0107 	bic.w	r1, r3, #7
 800d6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6d8:	4a92      	ldr	r2, [pc, #584]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6da:	430b      	orrs	r3, r1
 800d6dc:	6553      	str	r3, [r2, #84]	; 0x54
 800d6de:	e003      	b.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f002 0304 	and.w	r3, r2, #4
 800d6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d702:	460b      	mov	r3, r1
 800d704:	4313      	orrs	r3, r2
 800d706:	d044      	beq.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d70c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d710:	2b05      	cmp	r3, #5
 800d712:	d825      	bhi.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d714:	a201      	add	r2, pc, #4	; (adr r2, 800d71c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71a:	bf00      	nop
 800d71c:	0800d769 	.word	0x0800d769
 800d720:	0800d735 	.word	0x0800d735
 800d724:	0800d74b 	.word	0x0800d74b
 800d728:	0800d769 	.word	0x0800d769
 800d72c:	0800d769 	.word	0x0800d769
 800d730:	0800d769 	.word	0x0800d769
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d738:	3308      	adds	r3, #8
 800d73a:	2101      	movs	r1, #1
 800d73c:	4618      	mov	r0, r3
 800d73e:	f001 fdef 	bl	800f320 <RCCEx_PLL2_Config>
 800d742:	4603      	mov	r3, r0
 800d744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d748:	e00f      	b.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d74e:	3328      	adds	r3, #40	; 0x28
 800d750:	2101      	movs	r1, #1
 800d752:	4618      	mov	r0, r3
 800d754:	f001 fe96 	bl	800f484 <RCCEx_PLL3_Config>
 800d758:	4603      	mov	r3, r0
 800d75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d75e:	e004      	b.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d766:	e000      	b.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d76a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10b      	bne.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d772:	4b6c      	ldr	r3, [pc, #432]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d776:	f023 0107 	bic.w	r1, r3, #7
 800d77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d77e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d782:	4a68      	ldr	r2, [pc, #416]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d784:	430b      	orrs	r3, r1
 800d786:	6593      	str	r3, [r2, #88]	; 0x58
 800d788:	e003      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d78a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d78e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	f002 0320 	and.w	r3, r2, #32
 800d79e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	d055      	beq.n	800d85e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7be:	d033      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7c4:	d82c      	bhi.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ca:	d02f      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7d0:	d826      	bhi.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d7d6:	d02b      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d7d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d7dc:	d820      	bhi.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e2:	d012      	beq.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e8:	d81a      	bhi.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d022      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d7ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7f2:	d115      	bne.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7f8:	3308      	adds	r3, #8
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f001 fd8f 	bl	800f320 <RCCEx_PLL2_Config>
 800d802:	4603      	mov	r3, r0
 800d804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d808:	e015      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d80e:	3328      	adds	r3, #40	; 0x28
 800d810:	2102      	movs	r1, #2
 800d812:	4618      	mov	r0, r3
 800d814:	f001 fe36 	bl	800f484 <RCCEx_PLL3_Config>
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d81e:	e00a      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d826:	e006      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d828:	bf00      	nop
 800d82a:	e004      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d82c:	bf00      	nop
 800d82e:	e002      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d830:	bf00      	nop
 800d832:	e000      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10b      	bne.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d83e:	4b39      	ldr	r3, [pc, #228]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d842:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84e:	4a35      	ldr	r2, [pc, #212]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d850:	430b      	orrs	r3, r1
 800d852:	6553      	str	r3, [r2, #84]	; 0x54
 800d854:	e003      	b.n	800d85e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d85a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d86a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d86e:	2300      	movs	r3, #0
 800d870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d874:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d878:	460b      	mov	r3, r1
 800d87a:	4313      	orrs	r3, r2
 800d87c:	d058      	beq.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d886:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d88a:	d033      	beq.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d88c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d890:	d82c      	bhi.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d896:	d02f      	beq.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d89c:	d826      	bhi.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d89e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8a2:	d02b      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d8a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8a8:	d820      	bhi.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8ae:	d012      	beq.n	800d8d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d8b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8b4:	d81a      	bhi.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d022      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8be:	d115      	bne.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 fd29 	bl	800f320 <RCCEx_PLL2_Config>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8d4:	e015      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8da:	3328      	adds	r3, #40	; 0x28
 800d8dc:	2102      	movs	r1, #2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f001 fdd0 	bl	800f484 <RCCEx_PLL3_Config>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8ea:	e00a      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d8f2:	e006      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8f4:	bf00      	nop
 800d8f6:	e004      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8f8:	bf00      	nop
 800d8fa:	e002      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8fc:	bf00      	nop
 800d8fe:	e000      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d900:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10e      	bne.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d90a:	4b06      	ldr	r3, [pc, #24]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d90e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d91a:	4a02      	ldr	r2, [pc, #8]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d91c:	430b      	orrs	r3, r1
 800d91e:	6593      	str	r3, [r2, #88]	; 0x58
 800d920:	e006      	b.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d922:	bf00      	nop
 800d924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d93c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d940:	2300      	movs	r3, #0
 800d942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d946:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d94a:	460b      	mov	r3, r1
 800d94c:	4313      	orrs	r3, r2
 800d94e:	d055      	beq.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d958:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d95c:	d033      	beq.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d95e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d962:	d82c      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d968:	d02f      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d96a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d96e:	d826      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d970:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d974:	d02b      	beq.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d97a:	d820      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d97c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d980:	d012      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d986:	d81a      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d022      	beq.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d98c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d990:	d115      	bne.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d996:	3308      	adds	r3, #8
 800d998:	2100      	movs	r1, #0
 800d99a:	4618      	mov	r0, r3
 800d99c:	f001 fcc0 	bl	800f320 <RCCEx_PLL2_Config>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9a6:	e015      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9ac:	3328      	adds	r3, #40	; 0x28
 800d9ae:	2102      	movs	r1, #2
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f001 fd67 	bl	800f484 <RCCEx_PLL3_Config>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9bc:	e00a      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9c4:	e006      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9c6:	bf00      	nop
 800d9c8:	e004      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9ca:	bf00      	nop
 800d9cc:	e002      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9ce:	bf00      	nop
 800d9d0:	e000      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10b      	bne.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d9dc:	4ba1      	ldr	r3, [pc, #644]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d9ec:	4a9d      	ldr	r2, [pc, #628]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9ee:	430b      	orrs	r3, r1
 800d9f0:	6593      	str	r3, [r2, #88]	; 0x58
 800d9f2:	e003      	b.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da04:	f002 0308 	and.w	r3, r2, #8
 800da08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da0c:	2300      	movs	r3, #0
 800da0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800da16:	460b      	mov	r3, r1
 800da18:	4313      	orrs	r3, r2
 800da1a:	d01e      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800da1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da28:	d10c      	bne.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da2e:	3328      	adds	r3, #40	; 0x28
 800da30:	2102      	movs	r1, #2
 800da32:	4618      	mov	r0, r3
 800da34:	f001 fd26 	bl	800f484 <RCCEx_PLL3_Config>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800da44:	4b87      	ldr	r3, [pc, #540]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da54:	4a83      	ldr	r2, [pc, #524]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da56:	430b      	orrs	r3, r1
 800da58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f002 0310 	and.w	r3, r2, #16
 800da66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da6a:	2300      	movs	r3, #0
 800da6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800da74:	460b      	mov	r3, r1
 800da76:	4313      	orrs	r3, r2
 800da78:	d01e      	beq.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800da7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da86:	d10c      	bne.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da8c:	3328      	adds	r3, #40	; 0x28
 800da8e:	2102      	movs	r1, #2
 800da90:	4618      	mov	r0, r3
 800da92:	f001 fcf7 	bl	800f484 <RCCEx_PLL3_Config>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800daa2:	4b70      	ldr	r3, [pc, #448]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800daa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800daaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dab2:	4a6c      	ldr	r2, [pc, #432]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dab4:	430b      	orrs	r3, r1
 800dab6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800dac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dac8:	2300      	movs	r3, #0
 800daca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dace:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800dad2:	460b      	mov	r3, r1
 800dad4:	4313      	orrs	r3, r2
 800dad6:	d03e      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800dad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dadc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dae4:	d022      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800dae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800daea:	d81b      	bhi.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800daec:	2b00      	cmp	r3, #0
 800daee:	d003      	beq.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800daf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daf4:	d00b      	beq.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800daf6:	e015      	b.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800daf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dafc:	3308      	adds	r3, #8
 800dafe:	2100      	movs	r1, #0
 800db00:	4618      	mov	r0, r3
 800db02:	f001 fc0d 	bl	800f320 <RCCEx_PLL2_Config>
 800db06:	4603      	mov	r3, r0
 800db08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db0c:	e00f      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db12:	3328      	adds	r3, #40	; 0x28
 800db14:	2102      	movs	r1, #2
 800db16:	4618      	mov	r0, r3
 800db18:	f001 fcb4 	bl	800f484 <RCCEx_PLL3_Config>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db22:	e004      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db2a:	e000      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800db2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10b      	bne.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db36:	4b4b      	ldr	r3, [pc, #300]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db46:	4a47      	ldr	r2, [pc, #284]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db48:	430b      	orrs	r3, r1
 800db4a:	6593      	str	r3, [r2, #88]	; 0x58
 800db4c:	e003      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800db62:	67bb      	str	r3, [r7, #120]	; 0x78
 800db64:	2300      	movs	r3, #0
 800db66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800db6c:	460b      	mov	r3, r1
 800db6e:	4313      	orrs	r3, r2
 800db70:	d03b      	beq.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800db72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db7e:	d01f      	beq.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800db80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db84:	d818      	bhi.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800db86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db8a:	d003      	beq.n	800db94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800db8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db90:	d007      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800db92:	e011      	b.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db94:	4b33      	ldr	r3, [pc, #204]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	4a32      	ldr	r2, [pc, #200]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dba0:	e00f      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba6:	3328      	adds	r3, #40	; 0x28
 800dba8:	2101      	movs	r1, #1
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f001 fc6a 	bl	800f484 <RCCEx_PLL3_Config>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800dbb6:	e004      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbbe:	e000      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dbc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10b      	bne.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dbca:	4b26      	ldr	r3, [pc, #152]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbda:	4a22      	ldr	r2, [pc, #136]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbdc:	430b      	orrs	r3, r1
 800dbde:	6553      	str	r3, [r2, #84]	; 0x54
 800dbe0:	e003      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dbf6:	673b      	str	r3, [r7, #112]	; 0x70
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	677b      	str	r3, [r7, #116]	; 0x74
 800dbfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dc00:	460b      	mov	r3, r1
 800dc02:	4313      	orrs	r3, r2
 800dc04:	d034      	beq.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc14:	d007      	beq.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dc16:	e011      	b.n	800dc3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc18:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1c:	4a11      	ldr	r2, [pc, #68]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc24:	e00e      	b.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	2102      	movs	r1, #2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f001 fb76 	bl	800f320 <RCCEx_PLL2_Config>
 800dc34:	4603      	mov	r3, r0
 800dc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc3a:	e003      	b.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10d      	bne.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc5a:	4a02      	ldr	r2, [pc, #8]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc5c:	430b      	orrs	r3, r1
 800dc5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc60:	e006      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dc62:	bf00      	nop
 800dc64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800dc7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc7e:	2300      	movs	r3, #0
 800dc80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dc86:	460b      	mov	r3, r1
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	d00c      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc90:	3328      	adds	r3, #40	; 0x28
 800dc92:	2102      	movs	r1, #2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 fbf5 	bl	800f484 <RCCEx_PLL3_Config>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dcb2:	663b      	str	r3, [r7, #96]	; 0x60
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	667b      	str	r3, [r7, #100]	; 0x64
 800dcb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	d038      	beq.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dcce:	d018      	beq.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dcd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dcd4:	d811      	bhi.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dcd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcda:	d014      	beq.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dcdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dce0:	d80b      	bhi.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d011      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcea:	d106      	bne.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcec:	4bc3      	ldr	r3, [pc, #780]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	4ac2      	ldr	r2, [pc, #776]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dcf8:	e008      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd00:	e004      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd02:	bf00      	nop
 800dd04:	e002      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd06:	bf00      	nop
 800dd08:	e000      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10b      	bne.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd14:	4bb9      	ldr	r3, [pc, #740]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd24:	4ab5      	ldr	r2, [pc, #724]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd26:	430b      	orrs	r3, r1
 800dd28:	6553      	str	r3, [r2, #84]	; 0x54
 800dd2a:	e003      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dd40:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd42:	2300      	movs	r3, #0
 800dd44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	d009      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dd50:	4baa      	ldr	r3, [pc, #680]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5e:	4aa7      	ldr	r2, [pc, #668]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd60:	430b      	orrs	r3, r1
 800dd62:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dd70:	653b      	str	r3, [r7, #80]	; 0x50
 800dd72:	2300      	movs	r3, #0
 800dd74:	657b      	str	r3, [r7, #84]	; 0x54
 800dd76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	d00a      	beq.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dd80:	4b9e      	ldr	r3, [pc, #632]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800dd88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dd90:	4a9a      	ldr	r2, [pc, #616]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd92:	430b      	orrs	r3, r1
 800dd94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800dda2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dda4:	2300      	movs	r3, #0
 800dda6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dda8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ddac:	460b      	mov	r3, r1
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	d009      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ddb2:	4b92      	ldr	r3, [pc, #584]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ddba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc0:	4a8e      	ldr	r2, [pc, #568]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddc2:	430b      	orrs	r3, r1
 800ddc4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ddc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ddd2:	643b      	str	r3, [r7, #64]	; 0x40
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	647b      	str	r3, [r7, #68]	; 0x44
 800ddd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800dddc:	460b      	mov	r3, r1
 800ddde:	4313      	orrs	r3, r2
 800dde0:	d00e      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dde2:	4b86      	ldr	r3, [pc, #536]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	4a85      	ldr	r2, [pc, #532]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dde8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ddec:	6113      	str	r3, [r2, #16]
 800ddee:	4b83      	ldr	r3, [pc, #524]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddf0:	6919      	ldr	r1, [r3, #16]
 800ddf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ddfa:	4a80      	ldr	r2, [pc, #512]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddfc:	430b      	orrs	r3, r1
 800ddfe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800de00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800de0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800de0e:	2300      	movs	r3, #0
 800de10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800de16:	460b      	mov	r3, r1
 800de18:	4313      	orrs	r3, r2
 800de1a:	d009      	beq.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800de1c:	4b77      	ldr	r3, [pc, #476]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de20:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2a:	4a74      	ldr	r2, [pc, #464]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de2c:	430b      	orrs	r3, r1
 800de2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800de3c:	633b      	str	r3, [r7, #48]	; 0x30
 800de3e:	2300      	movs	r3, #0
 800de40:	637b      	str	r3, [r7, #52]	; 0x34
 800de42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800de46:	460b      	mov	r3, r1
 800de48:	4313      	orrs	r3, r2
 800de4a:	d00a      	beq.n	800de62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de4c:	4b6b      	ldr	r3, [pc, #428]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de50:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800de54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de5c:	4a67      	ldr	r2, [pc, #412]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de5e:	430b      	orrs	r3, r1
 800de60:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800de62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	2100      	movs	r1, #0
 800de6c:	62b9      	str	r1, [r7, #40]	; 0x28
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800de78:	460b      	mov	r3, r1
 800de7a:	4313      	orrs	r3, r2
 800de7c:	d011      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de82:	3308      	adds	r3, #8
 800de84:	2100      	movs	r1, #0
 800de86:	4618      	mov	r0, r3
 800de88:	f001 fa4a 	bl	800f320 <RCCEx_PLL2_Config>
 800de8c:	4603      	mov	r3, r0
 800de8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800de92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	2100      	movs	r1, #0
 800deac:	6239      	str	r1, [r7, #32]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	627b      	str	r3, [r7, #36]	; 0x24
 800deb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800deb8:	460b      	mov	r3, r1
 800deba:	4313      	orrs	r3, r2
 800debc:	d011      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800debe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dec2:	3308      	adds	r3, #8
 800dec4:	2101      	movs	r1, #1
 800dec6:	4618      	mov	r0, r3
 800dec8:	f001 fa2a 	bl	800f320 <RCCEx_PLL2_Config>
 800decc:	4603      	mov	r3, r0
 800dece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ded2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	2100      	movs	r1, #0
 800deec:	61b9      	str	r1, [r7, #24]
 800deee:	f003 0304 	and.w	r3, r3, #4
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800def8:	460b      	mov	r3, r1
 800defa:	4313      	orrs	r3, r2
 800defc:	d011      	beq.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800defe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df02:	3308      	adds	r3, #8
 800df04:	2102      	movs	r1, #2
 800df06:	4618      	mov	r0, r3
 800df08:	f001 fa0a 	bl	800f320 <RCCEx_PLL2_Config>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800df22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2a:	2100      	movs	r1, #0
 800df2c:	6139      	str	r1, [r7, #16]
 800df2e:	f003 0308 	and.w	r3, r3, #8
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df38:	460b      	mov	r3, r1
 800df3a:	4313      	orrs	r3, r2
 800df3c:	d011      	beq.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df42:	3328      	adds	r3, #40	; 0x28
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f001 fa9c 	bl	800f484 <RCCEx_PLL3_Config>
 800df4c:	4603      	mov	r3, r0
 800df4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800df52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800df62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	2100      	movs	r1, #0
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	f003 0310 	and.w	r3, r3, #16
 800df72:	60fb      	str	r3, [r7, #12]
 800df74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df78:	460b      	mov	r3, r1
 800df7a:	4313      	orrs	r3, r2
 800df7c:	d011      	beq.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df82:	3328      	adds	r3, #40	; 0x28
 800df84:	2101      	movs	r1, #1
 800df86:	4618      	mov	r0, r3
 800df88:	f001 fa7c 	bl	800f484 <RCCEx_PLL3_Config>
 800df8c:	4603      	mov	r3, r0
 800df8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	2100      	movs	r1, #0
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	f003 0320 	and.w	r3, r3, #32
 800dfb2:	607b      	str	r3, [r7, #4]
 800dfb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	d011      	beq.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfc2:	3328      	adds	r3, #40	; 0x28
 800dfc4:	2102      	movs	r1, #2
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f001 fa5c 	bl	800f484 <RCCEx_PLL3_Config>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d003      	beq.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800dfe2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	e000      	b.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800dff6:	46bd      	mov	sp, r7
 800dff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dffc:	58024400 	.word	0x58024400

0800e000 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b090      	sub	sp, #64	; 0x40
 800e004:	af00      	add	r7, sp, #0
 800e006:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e00e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e012:	430b      	orrs	r3, r1
 800e014:	f040 8094 	bne.w	800e140 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e018:	4b9e      	ldr	r3, [pc, #632]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01c:	f003 0307 	and.w	r3, r3, #7
 800e020:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	2b04      	cmp	r3, #4
 800e026:	f200 8087 	bhi.w	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e02a:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e045 	.word	0x0800e045
 800e034:	0800e06d 	.word	0x0800e06d
 800e038:	0800e095 	.word	0x0800e095
 800e03c:	0800e131 	.word	0x0800e131
 800e040:	0800e0bd 	.word	0x0800e0bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e044:	4b93      	ldr	r3, [pc, #588]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e04c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e050:	d108      	bne.n	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e056:	4618      	mov	r0, r3
 800e058:	f001 f810 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e060:	f000 bd45 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e068:	f000 bd41 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e06c:	4b89      	ldr	r3, [pc, #548]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e078:	d108      	bne.n	800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e07a:	f107 0318 	add.w	r3, r7, #24
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 fd54 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e088:	f000 bd31 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e090:	f000 bd2d 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e094:	4b7f      	ldr	r3, [pc, #508]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e09c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0a0:	d108      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0a2:	f107 030c 	add.w	r3, r7, #12
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 fe94 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0b0:	f000 bd1d 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0b8:	f000 bd19 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0bc:	4b75      	ldr	r3, [pc, #468]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e0c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0c6:	4b73      	ldr	r3, [pc, #460]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 0304 	and.w	r3, r3, #4
 800e0ce:	2b04      	cmp	r3, #4
 800e0d0:	d10c      	bne.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d109      	bne.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0d8:	4b6e      	ldr	r3, [pc, #440]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	08db      	lsrs	r3, r3, #3
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	4a6d      	ldr	r2, [pc, #436]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0ea:	e01f      	b.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e0ec:	4b69      	ldr	r3, [pc, #420]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0f8:	d106      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e100:	d102      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e102:	4b66      	ldr	r3, [pc, #408]	; (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e104:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e106:	e011      	b.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e108:	4b62      	ldr	r3, [pc, #392]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e114:	d106      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e11c:	d102      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e11e:	4b60      	ldr	r3, [pc, #384]	; (800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e120:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e122:	e003      	b.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e124:	2300      	movs	r3, #0
 800e126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e128:	f000 bce1 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e12c:	f000 bcdf 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e130:	4b5c      	ldr	r3, [pc, #368]	; (800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e134:	f000 bcdb 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13c:	f000 bcd7 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e144:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e148:	430b      	orrs	r3, r1
 800e14a:	f040 80ad 	bne.w	800e2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e14e:	4b51      	ldr	r3, [pc, #324]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e152:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e156:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e15e:	d056      	beq.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e166:	f200 8090 	bhi.w	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	2bc0      	cmp	r3, #192	; 0xc0
 800e16e:	f000 8088 	beq.w	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e174:	2bc0      	cmp	r3, #192	; 0xc0
 800e176:	f200 8088 	bhi.w	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	2b80      	cmp	r3, #128	; 0x80
 800e17e:	d032      	beq.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	2b80      	cmp	r3, #128	; 0x80
 800e184:	f200 8081 	bhi.w	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	2b40      	cmp	r3, #64	; 0x40
 800e192:	d014      	beq.n	800e1be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e194:	e079      	b.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e196:	4b3f      	ldr	r3, [pc, #252]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e19e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1a2:	d108      	bne.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f000 ff67 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1b2:	f000 bc9c 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ba:	f000 bc98 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1be:	4b35      	ldr	r3, [pc, #212]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1ca:	d108      	bne.n	800e1de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1cc:	f107 0318 	add.w	r3, r7, #24
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 fcab 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1da:	f000 bc88 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e2:	f000 bc84 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e1e6:	4b2b      	ldr	r3, [pc, #172]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1f2:	d108      	bne.n	800e206 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1f4:	f107 030c 	add.w	r3, r7, #12
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 fdeb 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e202:	f000 bc74 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20a:	f000 bc70 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e20e:	4b21      	ldr	r3, [pc, #132]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e216:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e218:	4b1e      	ldr	r3, [pc, #120]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	2b04      	cmp	r3, #4
 800e222:	d10c      	bne.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e226:	2b00      	cmp	r3, #0
 800e228:	d109      	bne.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e22a:	4b1a      	ldr	r3, [pc, #104]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	08db      	lsrs	r3, r3, #3
 800e230:	f003 0303 	and.w	r3, r3, #3
 800e234:	4a18      	ldr	r2, [pc, #96]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e236:	fa22 f303 	lsr.w	r3, r2, r3
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e23c:	e01f      	b.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e23e:	4b15      	ldr	r3, [pc, #84]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e24a:	d106      	bne.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e252:	d102      	bne.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e254:	4b11      	ldr	r3, [pc, #68]	; (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e258:	e011      	b.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e25a:	4b0e      	ldr	r3, [pc, #56]	; (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e266:	d106      	bne.n	800e276 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e26e:	d102      	bne.n	800e276 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e270:	4b0b      	ldr	r3, [pc, #44]	; (800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e274:	e003      	b.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e27a:	f000 bc38 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e27e:	f000 bc36 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e282:	4b08      	ldr	r3, [pc, #32]	; (800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e286:	f000 bc32 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e28e:	f000 bc2e 	b.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e292:	bf00      	nop
 800e294:	58024400 	.word	0x58024400
 800e298:	03d09000 	.word	0x03d09000
 800e29c:	003d0900 	.word	0x003d0900
 800e2a0:	017d7840 	.word	0x017d7840
 800e2a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e2b0:	430b      	orrs	r3, r1
 800e2b2:	f040 809c 	bne.w	800e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e2b6:	4b9e      	ldr	r3, [pc, #632]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e2be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2c6:	d054      	beq.n	800e372 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2ce:	f200 808b 	bhi.w	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e2d8:	f000 8083 	beq.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e2e2:	f200 8081 	bhi.w	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2ec:	d02f      	beq.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2f4:	d878      	bhi.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d004      	beq.n	800e306 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e302:	d012      	beq.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e304:	e070      	b.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e306:	4b8a      	ldr	r3, [pc, #552]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e30e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e312:	d107      	bne.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 feaf 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e322:	e3e4      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e328:	e3e1      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e32a:	4b81      	ldr	r3, [pc, #516]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e336:	d107      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e338:	f107 0318 	add.w	r3, r7, #24
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 fbf5 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e346:	e3d2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e34c:	e3cf      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e34e:	4b78      	ldr	r3, [pc, #480]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e35a:	d107      	bne.n	800e36c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e35c:	f107 030c 	add.w	r3, r7, #12
 800e360:	4618      	mov	r0, r3
 800e362:	f000 fd37 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e36a:	e3c0      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e370:	e3bd      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e372:	4b6f      	ldr	r3, [pc, #444]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e37a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e37c:	4b6c      	ldr	r3, [pc, #432]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b04      	cmp	r3, #4
 800e386:	d10c      	bne.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d109      	bne.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e38e:	4b68      	ldr	r3, [pc, #416]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	08db      	lsrs	r3, r3, #3
 800e394:	f003 0303 	and.w	r3, r3, #3
 800e398:	4a66      	ldr	r2, [pc, #408]	; (800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e39a:	fa22 f303 	lsr.w	r3, r2, r3
 800e39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3a0:	e01e      	b.n	800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e3a2:	4b63      	ldr	r3, [pc, #396]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ae:	d106      	bne.n	800e3be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3b6:	d102      	bne.n	800e3be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3b8:	4b5f      	ldr	r3, [pc, #380]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3bc:	e010      	b.n	800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3be:	4b5c      	ldr	r3, [pc, #368]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3ca:	d106      	bne.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3d2:	d102      	bne.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e3d4:	4b59      	ldr	r3, [pc, #356]	; (800e53c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3d8:	e002      	b.n	800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e3de:	e386      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e3e0:	e385      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e3e2:	4b57      	ldr	r3, [pc, #348]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e6:	e382      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ec:	e37f      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e3ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3f2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e3f6:	430b      	orrs	r3, r1
 800e3f8:	f040 80a7 	bne.w	800e54a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e3fc:	4b4c      	ldr	r3, [pc, #304]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e400:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e404:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e40c:	d055      	beq.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e414:	f200 8096 	bhi.w	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e41e:	f000 8084 	beq.w	800e52a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e428:	f200 808c 	bhi.w	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e432:	d030      	beq.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e43a:	f200 8083 	bhi.w	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e44a:	d012      	beq.n	800e472 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e44c:	e07a      	b.n	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e44e:	4b38      	ldr	r3, [pc, #224]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e45a:	d107      	bne.n	800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e45c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e460:	4618      	mov	r0, r3
 800e462:	f000 fe0b 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e46a:	e340      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e46c:	2300      	movs	r3, #0
 800e46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e470:	e33d      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e472:	4b2f      	ldr	r3, [pc, #188]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e47a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e47e:	d107      	bne.n	800e490 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e480:	f107 0318 	add.w	r3, r7, #24
 800e484:	4618      	mov	r0, r3
 800e486:	f000 fb51 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e48e:	e32e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e494:	e32b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e496:	4b26      	ldr	r3, [pc, #152]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e49e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4a2:	d107      	bne.n	800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4a4:	f107 030c 	add.w	r3, r7, #12
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f000 fc93 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4b2:	e31c      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4b8:	e319      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4ba:	4b1d      	ldr	r3, [pc, #116]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e4c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4c4:	4b1a      	ldr	r3, [pc, #104]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f003 0304 	and.w	r3, r3, #4
 800e4cc:	2b04      	cmp	r3, #4
 800e4ce:	d10c      	bne.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d109      	bne.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4d6:	4b16      	ldr	r3, [pc, #88]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	08db      	lsrs	r3, r3, #3
 800e4dc:	f003 0303 	and.w	r3, r3, #3
 800e4e0:	4a14      	ldr	r2, [pc, #80]	; (800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4e8:	e01e      	b.n	800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e4ea:	4b11      	ldr	r3, [pc, #68]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4f6:	d106      	bne.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4fe:	d102      	bne.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e500:	4b0d      	ldr	r3, [pc, #52]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e504:	e010      	b.n	800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e506:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e50e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e512:	d106      	bne.n	800e522 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e51a:	d102      	bne.n	800e522 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e51c:	4b07      	ldr	r3, [pc, #28]	; (800e53c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e520:	e002      	b.n	800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e526:	e2e2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e528:	e2e1      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e52e:	e2de      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e530:	58024400 	.word	0x58024400
 800e534:	03d09000 	.word	0x03d09000
 800e538:	003d0900 	.word	0x003d0900
 800e53c:	017d7840 	.word	0x017d7840
 800e540:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e544:	2300      	movs	r3, #0
 800e546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e548:	e2d1      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e54e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e552:	430b      	orrs	r3, r1
 800e554:	f040 809c 	bne.w	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e558:	4b93      	ldr	r3, [pc, #588]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e55c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e560:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e568:	d054      	beq.n	800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e570:	f200 808b 	bhi.w	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e57a:	f000 8083 	beq.w	800e684 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e584:	f200 8081 	bhi.w	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e58e:	d02f      	beq.n	800e5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e596:	d878      	bhi.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d004      	beq.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5a4:	d012      	beq.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e5a6:	e070      	b.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e5a8:	4b7f      	ldr	r3, [pc, #508]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5b4:	d107      	bne.n	800e5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fd5e 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5c4:	e293      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ca:	e290      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5cc:	4b76      	ldr	r3, [pc, #472]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5d8:	d107      	bne.n	800e5ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5da:	f107 0318 	add.w	r3, r7, #24
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 faa4 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5e8:	e281      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ee:	e27e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e5f0:	4b6d      	ldr	r3, [pc, #436]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5fc:	d107      	bne.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5fe:	f107 030c 	add.w	r3, r7, #12
 800e602:	4618      	mov	r0, r3
 800e604:	f000 fbe6 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e60c:	e26f      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e612:	e26c      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e614:	4b64      	ldr	r3, [pc, #400]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e61c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e61e:	4b62      	ldr	r3, [pc, #392]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0304 	and.w	r3, r3, #4
 800e626:	2b04      	cmp	r3, #4
 800e628:	d10c      	bne.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d109      	bne.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e630:	4b5d      	ldr	r3, [pc, #372]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	08db      	lsrs	r3, r3, #3
 800e636:	f003 0303 	and.w	r3, r3, #3
 800e63a:	4a5c      	ldr	r2, [pc, #368]	; (800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e63c:	fa22 f303 	lsr.w	r3, r2, r3
 800e640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e642:	e01e      	b.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e644:	4b58      	ldr	r3, [pc, #352]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e650:	d106      	bne.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e658:	d102      	bne.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e65a:	4b55      	ldr	r3, [pc, #340]	; (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e65e:	e010      	b.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e660:	4b51      	ldr	r3, [pc, #324]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e66c:	d106      	bne.n	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e674:	d102      	bne.n	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e676:	4b4f      	ldr	r3, [pc, #316]	; (800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e67a:	e002      	b.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e680:	e235      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e682:	e234      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e684:	4b4c      	ldr	r3, [pc, #304]	; (800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e688:	e231      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e68e:	e22e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e694:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e698:	430b      	orrs	r3, r1
 800e69a:	f040 808f 	bne.w	800e7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e69e:	4b42      	ldr	r3, [pc, #264]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e6a6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6ae:	d06b      	beq.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6b6:	d874      	bhi.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6be:	d056      	beq.n	800e76e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6c6:	d86c      	bhi.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e6ce:	d03b      	beq.n	800e748 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e6d6:	d864      	bhi.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e6de:	d021      	beq.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e6e6:	d85c      	bhi.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d004      	beq.n	800e6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6f4:	d004      	beq.n	800e700 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e6f6:	e054      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e6f8:	f7fe fa4c 	bl	800cb94 <HAL_RCC_GetPCLK1Freq>
 800e6fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6fe:	e1f6      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e700:	4b29      	ldr	r3, [pc, #164]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e70c:	d107      	bne.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e70e:	f107 0318 	add.w	r3, r7, #24
 800e712:	4618      	mov	r0, r3
 800e714:	f000 fa0a 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e71c:	e1e7      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e722:	e1e4      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e724:	4b20      	ldr	r3, [pc, #128]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e730:	d107      	bne.n	800e742 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e732:	f107 030c 	add.w	r3, r7, #12
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fb4c 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e740:	e1d5      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e746:	e1d2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e748:	4b17      	ldr	r3, [pc, #92]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b04      	cmp	r3, #4
 800e752:	d109      	bne.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e754:	4b14      	ldr	r3, [pc, #80]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	08db      	lsrs	r3, r3, #3
 800e75a:	f003 0303 	and.w	r3, r3, #3
 800e75e:	4a13      	ldr	r2, [pc, #76]	; (800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e760:	fa22 f303 	lsr.w	r3, r2, r3
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e766:	e1c2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e768:	2300      	movs	r3, #0
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e76c:	e1bf      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e77a:	d102      	bne.n	800e782 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e77c:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e780:	e1b5      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e786:	e1b2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e788:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e794:	d102      	bne.n	800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e796:	4b07      	ldr	r3, [pc, #28]	; (800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e79a:	e1a8      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a0:	e1a5      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a6:	e1a2      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7a8:	58024400 	.word	0x58024400
 800e7ac:	03d09000 	.word	0x03d09000
 800e7b0:	003d0900 	.word	0x003d0900
 800e7b4:	017d7840 	.word	0x017d7840
 800e7b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e7c4:	430b      	orrs	r3, r1
 800e7c6:	d173      	bne.n	800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e7c8:	4b9c      	ldr	r3, [pc, #624]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e7d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7d8:	d02f      	beq.n	800e83a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7e0:	d863      	bhi.n	800e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d004      	beq.n	800e7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7ee:	d012      	beq.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e7f0:	e05b      	b.n	800e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e7f2:	4b92      	ldr	r3, [pc, #584]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7fe:	d107      	bne.n	800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e800:	f107 0318 	add.w	r3, r7, #24
 800e804:	4618      	mov	r0, r3
 800e806:	f000 f991 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e80e:	e16e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e810:	2300      	movs	r3, #0
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e814:	e16b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e816:	4b89      	ldr	r3, [pc, #548]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e81e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e822:	d107      	bne.n	800e834 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e824:	f107 030c 	add.w	r3, r7, #12
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 fad3 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e832:	e15c      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e838:	e159      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e83a:	4b80      	ldr	r3, [pc, #512]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e83e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e842:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e844:	4b7d      	ldr	r3, [pc, #500]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d10c      	bne.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e852:	2b00      	cmp	r3, #0
 800e854:	d109      	bne.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e856:	4b79      	ldr	r3, [pc, #484]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	08db      	lsrs	r3, r3, #3
 800e85c:	f003 0303 	and.w	r3, r3, #3
 800e860:	4a77      	ldr	r2, [pc, #476]	; (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e862:	fa22 f303 	lsr.w	r3, r2, r3
 800e866:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e868:	e01e      	b.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e86a:	4b74      	ldr	r3, [pc, #464]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e876:	d106      	bne.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e87a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e87e:	d102      	bne.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e880:	4b70      	ldr	r3, [pc, #448]	; (800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e882:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e884:	e010      	b.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e886:	4b6d      	ldr	r3, [pc, #436]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e88e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e892:	d106      	bne.n	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e89a:	d102      	bne.n	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e89c:	4b6a      	ldr	r3, [pc, #424]	; (800ea48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8a0:	e002      	b.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e8a6:	e122      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e8a8:	e121      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ae:	e11e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e8b8:	430b      	orrs	r3, r1
 800e8ba:	d133      	bne.n	800e924 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e8bc:	4b5f      	ldr	r3, [pc, #380]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d004      	beq.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8d2:	d012      	beq.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e8d4:	e023      	b.n	800e91e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8d6:	4b59      	ldr	r3, [pc, #356]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8e2:	d107      	bne.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f000 fbc7 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8f2:	e0fc      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f8:	e0f9      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8fa:	4b50      	ldr	r3, [pc, #320]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e906:	d107      	bne.n	800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e908:	f107 0318 	add.w	r3, r7, #24
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 f90d 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e916:	e0ea      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e91c:	e0e7      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e91e:	2300      	movs	r3, #0
 800e920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e922:	e0e4      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e928:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e92c:	430b      	orrs	r3, r1
 800e92e:	f040 808d 	bne.w	800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e932:	4b42      	ldr	r3, [pc, #264]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e936:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e93a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e942:	d06b      	beq.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e94a:	d874      	bhi.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e952:	d056      	beq.n	800ea02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e95a:	d86c      	bhi.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e962:	d03b      	beq.n	800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e96a:	d864      	bhi.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e972:	d021      	beq.n	800e9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e97a:	d85c      	bhi.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d004      	beq.n	800e98c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e988:	d004      	beq.n	800e994 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e98a:	e054      	b.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e98c:	f000 f8b8 	bl	800eb00 <HAL_RCCEx_GetD3PCLK1Freq>
 800e990:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e992:	e0ac      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e994:	4b29      	ldr	r3, [pc, #164]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e99c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9a0:	d107      	bne.n	800e9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9a2:	f107 0318 	add.w	r3, r7, #24
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f000 f8c0 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9b0:	e09d      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9b6:	e09a      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e9b8:	4b20      	ldr	r3, [pc, #128]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9c4:	d107      	bne.n	800e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9c6:	f107 030c 	add.w	r3, r7, #12
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f000 fa02 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9d4:	e08b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9da:	e088      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e9dc:	4b17      	ldr	r3, [pc, #92]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f003 0304 	and.w	r3, r3, #4
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	d109      	bne.n	800e9fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9e8:	4b14      	ldr	r3, [pc, #80]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	08db      	lsrs	r3, r3, #3
 800e9ee:	f003 0303 	and.w	r3, r3, #3
 800e9f2:	4a13      	ldr	r2, [pc, #76]	; (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9fa:	e078      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea00:	e075      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ea02:	4b0e      	ldr	r3, [pc, #56]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea0e:	d102      	bne.n	800ea16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ea10:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea14:	e06b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea1a:	e068      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea1c:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea28:	d102      	bne.n	800ea30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ea2a:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ea2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea2e:	e05e      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea34:	e05b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea3a:	e058      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ea3c:	58024400 	.word	0x58024400
 800ea40:	03d09000 	.word	0x03d09000
 800ea44:	003d0900 	.word	0x003d0900
 800ea48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ea4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea50:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ea54:	430b      	orrs	r3, r1
 800ea56:	d148      	bne.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ea58:	4b27      	ldr	r3, [pc, #156]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ea60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ea62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea68:	d02a      	beq.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ea6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea70:	d838      	bhi.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea7e:	d00d      	beq.n	800ea9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ea80:	e030      	b.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea82:	4b1d      	ldr	r3, [pc, #116]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea8e:	d102      	bne.n	800ea96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ea90:	4b1a      	ldr	r3, [pc, #104]	; (800eafc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ea92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea94:	e02b      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea9a:	e028      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea9c:	4b16      	ldr	r3, [pc, #88]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaa8:	d107      	bne.n	800eaba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eaaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 fae4 	bl	800f07c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eab8:	e019      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eabe:	e016      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eac0:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eacc:	d107      	bne.n	800eade <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eace:	f107 0318 	add.w	r3, r7, #24
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 f82a 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eadc:	e007      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae2:	e004      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eae4:	2300      	movs	r3, #0
 800eae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae8:	e001      	b.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800eaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3740      	adds	r7, #64	; 0x40
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	58024400 	.word	0x58024400
 800eafc:	017d7840 	.word	0x017d7840

0800eb00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eb04:	f7fe f816 	bl	800cb34 <HAL_RCC_GetHCLKFreq>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	4b06      	ldr	r3, [pc, #24]	; (800eb24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	091b      	lsrs	r3, r3, #4
 800eb10:	f003 0307 	and.w	r3, r3, #7
 800eb14:	4904      	ldr	r1, [pc, #16]	; (800eb28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eb16:	5ccb      	ldrb	r3, [r1, r3]
 800eb18:	f003 031f 	and.w	r3, r3, #31
 800eb1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	58024400 	.word	0x58024400
 800eb28:	0801820c 	.word	0x0801820c

0800eb2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b089      	sub	sp, #36	; 0x24
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb34:	4ba1      	ldr	r3, [pc, #644]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb38:	f003 0303 	and.w	r3, r3, #3
 800eb3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eb3e:	4b9f      	ldr	r3, [pc, #636]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb42:	0b1b      	lsrs	r3, r3, #12
 800eb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eb4a:	4b9c      	ldr	r3, [pc, #624]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4e:	091b      	lsrs	r3, r3, #4
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800eb56:	4b99      	ldr	r3, [pc, #612]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb5a:	08db      	lsrs	r3, r3, #3
 800eb5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	fb02 f303 	mul.w	r3, r2, r3
 800eb66:	ee07 3a90 	vmov	s15, r3
 800eb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 8111 	beq.w	800ed9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	f000 8083 	beq.w	800ec88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	f200 80a1 	bhi.w	800eccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d003      	beq.n	800eb98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d056      	beq.n	800ec44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800eb96:	e099      	b.n	800eccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb98:	4b88      	ldr	r3, [pc, #544]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 0320 	and.w	r3, r3, #32
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d02d      	beq.n	800ec00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eba4:	4b85      	ldr	r3, [pc, #532]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	08db      	lsrs	r3, r3, #3
 800ebaa:	f003 0303 	and.w	r3, r3, #3
 800ebae:	4a84      	ldr	r2, [pc, #528]	; (800edc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ebb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	ee07 3a90 	vmov	s15, r3
 800ebbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	ee07 3a90 	vmov	s15, r3
 800ebc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebce:	4b7b      	ldr	r3, [pc, #492]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebd6:	ee07 3a90 	vmov	s15, r3
 800ebda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800edc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ebe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ebfe:	e087      	b.n	800ed10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	ee07 3a90 	vmov	s15, r3
 800ec06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800edc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ec0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec12:	4b6a      	ldr	r3, [pc, #424]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec1a:	ee07 3a90 	vmov	s15, r3
 800ec1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec26:	eddf 5a67 	vldr	s11, [pc, #412]	; 800edc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec42:	e065      	b.n	800ed10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	ee07 3a90 	vmov	s15, r3
 800ec4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800edcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ec52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec56:	4b59      	ldr	r3, [pc, #356]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec5e:	ee07 3a90 	vmov	s15, r3
 800ec62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800edc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec86:	e043      	b.n	800ed10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	ee07 3a90 	vmov	s15, r3
 800ec8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800edd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ec96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec9a:	4b48      	ldr	r3, [pc, #288]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca2:	ee07 3a90 	vmov	s15, r3
 800eca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800edc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecca:	e021      	b.n	800ed10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	ee07 3a90 	vmov	s15, r3
 800ecd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800edcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ecda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecde:	4b37      	ldr	r3, [pc, #220]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ece0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecee:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800edc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ed10:	4b2a      	ldr	r3, [pc, #168]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	0a5b      	lsrs	r3, r3, #9
 800ed16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed1a:	ee07 3a90 	vmov	s15, r3
 800ed1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed36:	ee17 2a90 	vmov	r2, s15
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ed3e:	4b1f      	ldr	r3, [pc, #124]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed48:	ee07 3a90 	vmov	s15, r3
 800ed4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed64:	ee17 2a90 	vmov	r2, s15
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ed6c:	4b13      	ldr	r3, [pc, #76]	; (800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed70:	0e1b      	lsrs	r3, r3, #24
 800ed72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed76:	ee07 3a90 	vmov	s15, r3
 800ed7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed92:	ee17 2a90 	vmov	r2, s15
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ed9a:	e008      	b.n	800edae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	609a      	str	r2, [r3, #8]
}
 800edae:	bf00      	nop
 800edb0:	3724      	adds	r7, #36	; 0x24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	58024400 	.word	0x58024400
 800edc0:	03d09000 	.word	0x03d09000
 800edc4:	46000000 	.word	0x46000000
 800edc8:	4c742400 	.word	0x4c742400
 800edcc:	4a742400 	.word	0x4a742400
 800edd0:	4bbebc20 	.word	0x4bbebc20

0800edd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b089      	sub	sp, #36	; 0x24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eddc:	4ba1      	ldr	r3, [pc, #644]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede0:	f003 0303 	and.w	r3, r3, #3
 800ede4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ede6:	4b9f      	ldr	r3, [pc, #636]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edea:	0d1b      	lsrs	r3, r3, #20
 800edec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800edf2:	4b9c      	ldr	r3, [pc, #624]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf6:	0a1b      	lsrs	r3, r3, #8
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800edfe:	4b99      	ldr	r3, [pc, #612]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee02:	08db      	lsrs	r3, r3, #3
 800ee04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	fb02 f303 	mul.w	r3, r2, r3
 800ee0e:	ee07 3a90 	vmov	s15, r3
 800ee12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f000 8111 	beq.w	800f044 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	f000 8083 	beq.w	800ef30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	f200 80a1 	bhi.w	800ef74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d003      	beq.n	800ee40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d056      	beq.n	800eeec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ee3e:	e099      	b.n	800ef74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee40:	4b88      	ldr	r3, [pc, #544]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f003 0320 	and.w	r3, r3, #32
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d02d      	beq.n	800eea8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee4c:	4b85      	ldr	r3, [pc, #532]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	08db      	lsrs	r3, r3, #3
 800ee52:	f003 0303 	and.w	r3, r3, #3
 800ee56:	4a84      	ldr	r2, [pc, #528]	; (800f068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ee58:	fa22 f303 	lsr.w	r3, r2, r3
 800ee5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	ee07 3a90 	vmov	s15, r3
 800ee64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	ee07 3a90 	vmov	s15, r3
 800ee6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee76:	4b7b      	ldr	r3, [pc, #492]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee7e:	ee07 3a90 	vmov	s15, r3
 800ee82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ee8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eea6:	e087      	b.n	800efb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	ee07 3a90 	vmov	s15, r3
 800eeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f070 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800eeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeba:	4b6a      	ldr	r3, [pc, #424]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec2:	ee07 3a90 	vmov	s15, r3
 800eec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeca:	ed97 6a03 	vldr	s12, [r7, #12]
 800eece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eeea:	e065      	b.n	800efb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	ee07 3a90 	vmov	s15, r3
 800eef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800eefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eefe:	4b59      	ldr	r3, [pc, #356]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef06:	ee07 3a90 	vmov	s15, r3
 800ef0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef2e:	e043      	b.n	800efb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	ee07 3a90 	vmov	s15, r3
 800ef36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ef3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef42:	4b48      	ldr	r3, [pc, #288]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef4a:	ee07 3a90 	vmov	s15, r3
 800ef4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef72:	e021      	b.n	800efb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	ee07 3a90 	vmov	s15, r3
 800ef7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef86:	4b37      	ldr	r3, [pc, #220]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef8e:	ee07 3a90 	vmov	s15, r3
 800ef92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800efb8:	4b2a      	ldr	r3, [pc, #168]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efbc:	0a5b      	lsrs	r3, r3, #9
 800efbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efc2:	ee07 3a90 	vmov	s15, r3
 800efc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800efce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800efd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efde:	ee17 2a90 	vmov	r2, s15
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800efe6:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efea:	0c1b      	lsrs	r3, r3, #16
 800efec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eff0:	ee07 3a90 	vmov	s15, r3
 800eff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800effc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f000:	edd7 6a07 	vldr	s13, [r7, #28]
 800f004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f00c:	ee17 2a90 	vmov	r2, s15
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f014:	4b13      	ldr	r3, [pc, #76]	; (800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f018:	0e1b      	lsrs	r3, r3, #24
 800f01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01e:	ee07 3a90 	vmov	s15, r3
 800f022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f02a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f02e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f03a:	ee17 2a90 	vmov	r2, s15
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f042:	e008      	b.n	800f056 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	609a      	str	r2, [r3, #8]
}
 800f056:	bf00      	nop
 800f058:	3724      	adds	r7, #36	; 0x24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	58024400 	.word	0x58024400
 800f068:	03d09000 	.word	0x03d09000
 800f06c:	46000000 	.word	0x46000000
 800f070:	4c742400 	.word	0x4c742400
 800f074:	4a742400 	.word	0x4a742400
 800f078:	4bbebc20 	.word	0x4bbebc20

0800f07c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b089      	sub	sp, #36	; 0x24
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f084:	4ba0      	ldr	r3, [pc, #640]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f088:	f003 0303 	and.w	r3, r3, #3
 800f08c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f08e:	4b9e      	ldr	r3, [pc, #632]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f092:	091b      	lsrs	r3, r3, #4
 800f094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f098:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f09a:	4b9b      	ldr	r3, [pc, #620]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f0a4:	4b98      	ldr	r3, [pc, #608]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0a8:	08db      	lsrs	r3, r3, #3
 800f0aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	fb02 f303 	mul.w	r3, r2, r3
 800f0b4:	ee07 3a90 	vmov	s15, r3
 800f0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 8111 	beq.w	800f2ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	f000 8083 	beq.w	800f1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	f200 80a1 	bhi.w	800f21a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d003      	beq.n	800f0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d056      	beq.n	800f192 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f0e4:	e099      	b.n	800f21a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0e6:	4b88      	ldr	r3, [pc, #544]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 0320 	and.w	r3, r3, #32
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d02d      	beq.n	800f14e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0f2:	4b85      	ldr	r3, [pc, #532]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	08db      	lsrs	r3, r3, #3
 800f0f8:	f003 0303 	and.w	r3, r3, #3
 800f0fc:	4a83      	ldr	r2, [pc, #524]	; (800f30c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f102:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	ee07 3a90 	vmov	s15, r3
 800f10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	ee07 3a90 	vmov	s15, r3
 800f114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f11c:	4b7a      	ldr	r3, [pc, #488]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f124:	ee07 3a90 	vmov	s15, r3
 800f128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f130:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f13c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f148:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f14c:	e087      	b.n	800f25e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	ee07 3a90 	vmov	s15, r3
 800f154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f158:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f314 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f160:	4b69      	ldr	r3, [pc, #420]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f168:	ee07 3a90 	vmov	s15, r3
 800f16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f170:	ed97 6a03 	vldr	s12, [r7, #12]
 800f174:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f18c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f190:	e065      	b.n	800f25e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	ee07 3a90 	vmov	s15, r3
 800f198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f19c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f318 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1a4:	4b58      	ldr	r3, [pc, #352]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1d4:	e043      	b.n	800f25e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	ee07 3a90 	vmov	s15, r3
 800f1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f31c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1e8:	4b47      	ldr	r3, [pc, #284]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f0:	ee07 3a90 	vmov	s15, r3
 800f1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f218:	e021      	b.n	800f25e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	ee07 3a90 	vmov	s15, r3
 800f220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f224:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f314 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f22c:	4b36      	ldr	r3, [pc, #216]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f234:	ee07 3a90 	vmov	s15, r3
 800f238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f23c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f240:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f24c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f25c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f25e:	4b2a      	ldr	r3, [pc, #168]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f262:	0a5b      	lsrs	r3, r3, #9
 800f264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f268:	ee07 3a90 	vmov	s15, r3
 800f26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f274:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f278:	edd7 6a07 	vldr	s13, [r7, #28]
 800f27c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f284:	ee17 2a90 	vmov	r2, s15
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f28c:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f290:	0c1b      	lsrs	r3, r3, #16
 800f292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f296:	ee07 3a90 	vmov	s15, r3
 800f29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f29e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2b2:	ee17 2a90 	vmov	r2, s15
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f2ba:	4b13      	ldr	r3, [pc, #76]	; (800f308 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2be:	0e1b      	lsrs	r3, r3, #24
 800f2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2c4:	ee07 3a90 	vmov	s15, r3
 800f2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2e0:	ee17 2a90 	vmov	r2, s15
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f2e8:	e008      	b.n	800f2fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	609a      	str	r2, [r3, #8]
}
 800f2fc:	bf00      	nop
 800f2fe:	3724      	adds	r7, #36	; 0x24
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	58024400 	.word	0x58024400
 800f30c:	03d09000 	.word	0x03d09000
 800f310:	46000000 	.word	0x46000000
 800f314:	4c742400 	.word	0x4c742400
 800f318:	4a742400 	.word	0x4a742400
 800f31c:	4bbebc20 	.word	0x4bbebc20

0800f320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f32a:	2300      	movs	r3, #0
 800f32c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f32e:	4b53      	ldr	r3, [pc, #332]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f332:	f003 0303 	and.w	r3, r3, #3
 800f336:	2b03      	cmp	r3, #3
 800f338:	d101      	bne.n	800f33e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e099      	b.n	800f472 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f33e:	4b4f      	ldr	r3, [pc, #316]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a4e      	ldr	r2, [pc, #312]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f34a:	f7f6 f8c7 	bl	80054dc <HAL_GetTick>
 800f34e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f350:	e008      	b.n	800f364 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f352:	f7f6 f8c3 	bl	80054dc <HAL_GetTick>
 800f356:	4602      	mov	r2, r0
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d901      	bls.n	800f364 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f360:	2303      	movs	r3, #3
 800f362:	e086      	b.n	800f472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f364:	4b45      	ldr	r3, [pc, #276]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1f0      	bne.n	800f352 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f370:	4b42      	ldr	r3, [pc, #264]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	031b      	lsls	r3, r3, #12
 800f37e:	493f      	ldr	r1, [pc, #252]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f380:	4313      	orrs	r3, r2
 800f382:	628b      	str	r3, [r1, #40]	; 0x28
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	3b01      	subs	r3, #1
 800f38a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	3b01      	subs	r3, #1
 800f394:	025b      	lsls	r3, r3, #9
 800f396:	b29b      	uxth	r3, r3
 800f398:	431a      	orrs	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	041b      	lsls	r3, r3, #16
 800f3a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f3a6:	431a      	orrs	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	061b      	lsls	r3, r3, #24
 800f3b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f3b4:	4931      	ldr	r1, [pc, #196]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f3ba:	4b30      	ldr	r3, [pc, #192]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	695b      	ldr	r3, [r3, #20]
 800f3c6:	492d      	ldr	r1, [pc, #180]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f3cc:	4b2b      	ldr	r3, [pc, #172]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d0:	f023 0220 	bic.w	r2, r3, #32
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	4928      	ldr	r1, [pc, #160]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f3de:	4b27      	ldr	r3, [pc, #156]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e2:	4a26      	ldr	r2, [pc, #152]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3e4:	f023 0310 	bic.w	r3, r3, #16
 800f3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f3ea:	4b24      	ldr	r3, [pc, #144]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3ee:	4b24      	ldr	r3, [pc, #144]	; (800f480 <RCCEx_PLL2_Config+0x160>)
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	69d2      	ldr	r2, [r2, #28]
 800f3f6:	00d2      	lsls	r2, r2, #3
 800f3f8:	4920      	ldr	r1, [pc, #128]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f3fe:	4b1f      	ldr	r3, [pc, #124]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f402:	4a1e      	ldr	r2, [pc, #120]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f404:	f043 0310 	orr.w	r3, r3, #16
 800f408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d106      	bne.n	800f41e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f410:	4b1a      	ldr	r3, [pc, #104]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f414:	4a19      	ldr	r2, [pc, #100]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f41a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f41c:	e00f      	b.n	800f43e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	2b01      	cmp	r3, #1
 800f422:	d106      	bne.n	800f432 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f424:	4b15      	ldr	r3, [pc, #84]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f428:	4a14      	ldr	r2, [pc, #80]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f42a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f42e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f430:	e005      	b.n	800f43e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f432:	4b12      	ldr	r3, [pc, #72]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f436:	4a11      	ldr	r2, [pc, #68]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f43c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f43e:	4b0f      	ldr	r3, [pc, #60]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4a0e      	ldr	r2, [pc, #56]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f44a:	f7f6 f847 	bl	80054dc <HAL_GetTick>
 800f44e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f450:	e008      	b.n	800f464 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f452:	f7f6 f843 	bl	80054dc <HAL_GetTick>
 800f456:	4602      	mov	r2, r0
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d901      	bls.n	800f464 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f460:	2303      	movs	r3, #3
 800f462:	e006      	b.n	800f472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f464:	4b05      	ldr	r3, [pc, #20]	; (800f47c <RCCEx_PLL2_Config+0x15c>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d0f0      	beq.n	800f452 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f470:	7bfb      	ldrb	r3, [r7, #15]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	58024400 	.word	0x58024400
 800f480:	ffff0007 	.word	0xffff0007

0800f484 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f48e:	2300      	movs	r3, #0
 800f490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f492:	4b53      	ldr	r3, [pc, #332]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f496:	f003 0303 	and.w	r3, r3, #3
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d101      	bne.n	800f4a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e099      	b.n	800f5d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f4a2:	4b4f      	ldr	r3, [pc, #316]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a4e      	ldr	r2, [pc, #312]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f4a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4ae:	f7f6 f815 	bl	80054dc <HAL_GetTick>
 800f4b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4b4:	e008      	b.n	800f4c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f4b6:	f7f6 f811 	bl	80054dc <HAL_GetTick>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d901      	bls.n	800f4c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e086      	b.n	800f5d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4c8:	4b45      	ldr	r3, [pc, #276]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1f0      	bne.n	800f4b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f4d4:	4b42      	ldr	r3, [pc, #264]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	051b      	lsls	r3, r3, #20
 800f4e2:	493f      	ldr	r1, [pc, #252]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	628b      	str	r3, [r1, #40]	; 0x28
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	025b      	lsls	r3, r3, #9
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	3b01      	subs	r3, #1
 800f504:	041b      	lsls	r3, r3, #16
 800f506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f50a:	431a      	orrs	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	3b01      	subs	r3, #1
 800f512:	061b      	lsls	r3, r3, #24
 800f514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f518:	4931      	ldr	r1, [pc, #196]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f51a:	4313      	orrs	r3, r2
 800f51c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f51e:	4b30      	ldr	r3, [pc, #192]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	492d      	ldr	r1, [pc, #180]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f52c:	4313      	orrs	r3, r2
 800f52e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f530:	4b2b      	ldr	r3, [pc, #172]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	4928      	ldr	r1, [pc, #160]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f53e:	4313      	orrs	r3, r2
 800f540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f542:	4b27      	ldr	r3, [pc, #156]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f546:	4a26      	ldr	r2, [pc, #152]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f54c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f54e:	4b24      	ldr	r3, [pc, #144]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f552:	4b24      	ldr	r3, [pc, #144]	; (800f5e4 <RCCEx_PLL3_Config+0x160>)
 800f554:	4013      	ands	r3, r2
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	69d2      	ldr	r2, [r2, #28]
 800f55a:	00d2      	lsls	r2, r2, #3
 800f55c:	4920      	ldr	r1, [pc, #128]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f55e:	4313      	orrs	r3, r2
 800f560:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f562:	4b1f      	ldr	r3, [pc, #124]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f566:	4a1e      	ldr	r2, [pc, #120]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f56c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d106      	bne.n	800f582 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f574:	4b1a      	ldr	r3, [pc, #104]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	4a19      	ldr	r2, [pc, #100]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f57a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f57e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f580:	e00f      	b.n	800f5a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d106      	bne.n	800f596 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f588:	4b15      	ldr	r3, [pc, #84]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	4a14      	ldr	r2, [pc, #80]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f58e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f592:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f594:	e005      	b.n	800f5a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f596:	4b12      	ldr	r3, [pc, #72]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59a:	4a11      	ldr	r2, [pc, #68]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f59c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a0e      	ldr	r2, [pc, #56]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f5a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5ae:	f7f5 ff95 	bl	80054dc <HAL_GetTick>
 800f5b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5b4:	e008      	b.n	800f5c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f5b6:	f7f5 ff91 	bl	80054dc <HAL_GetTick>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	1ad3      	subs	r3, r2, r3
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	d901      	bls.n	800f5c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	e006      	b.n	800f5d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5c8:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <RCCEx_PLL3_Config+0x15c>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d0f0      	beq.n	800f5b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	58024400 	.word	0x58024400
 800f5e4:	ffff0007 	.word	0xffff0007

0800f5e8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e054      	b.n	800f6a4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	7a5b      	ldrb	r3, [r3, #9]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d105      	bne.n	800f610 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7f3 ffec 	bl	80035e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2202      	movs	r2, #2
 800f614:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f023 0120 	bic.w	r1, r3, #32
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685a      	ldr	r2, [r3, #4]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	430a      	orrs	r2, r1
 800f62a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f042 0204 	orr.w	r2, r2, #4
 800f63a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f646:	2b40      	cmp	r3, #64	; 0x40
 800f648:	d104      	bne.n	800f654 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2204      	movs	r2, #4
 800f64e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	e027      	b.n	800f6a4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f654:	f7f5 ff42 	bl	80054dc <HAL_GetTick>
 800f658:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f65a:	e015      	b.n	800f688 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f65c:	f7f5 ff3e 	bl	80054dc <HAL_GetTick>
 800f660:	4602      	mov	r2, r0
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	2b02      	cmp	r3, #2
 800f668:	d90e      	bls.n	800f688 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	f003 0304 	and.w	r3, r3, #4
 800f674:	2b04      	cmp	r3, #4
 800f676:	d107      	bne.n	800f688 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2204      	movs	r2, #4
 800f67c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2202      	movs	r2, #2
 800f682:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f684:	2301      	movs	r3, #1
 800f686:	e00d      	b.n	800f6a4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	f003 0304 	and.w	r3, r3, #4
 800f692:	2b04      	cmp	r3, #4
 800f694:	d0e2      	beq.n	800f65c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	7a1b      	ldrb	r3, [r3, #8]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d101      	bne.n	800f6c6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	e044      	b.n	800f750 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7a5b      	ldrb	r3, [r3, #9]
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d133      	bne.n	800f73e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2202      	movs	r2, #2
 800f6da:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f6dc:	f7f5 fefe 	bl	80054dc <HAL_GetTick>
 800f6e0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f6e2:	e018      	b.n	800f716 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f6e4:	f7f5 fefa 	bl	80054dc <HAL_GetTick>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	2b02      	cmp	r3, #2
 800f6f0:	d911      	bls.n	800f716 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d00a      	beq.n	800f716 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e01c      	b.n	800f750 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	2b01      	cmp	r3, #1
 800f722:	d1df      	bne.n	800f6e4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689a      	ldr	r2, [r3, #8]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691a      	ldr	r2, [r3, #16]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2201      	movs	r2, #1
 800f73a:	725a      	strb	r2, [r3, #9]
 800f73c:	e004      	b.n	800f748 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2204      	movs	r2, #4
 800f742:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f744:	2301      	movs	r3, #1
 800f746:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	721a      	strb	r2, [r3, #8]

  return status;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b02      	cmp	r3, #2
 800f76a:	d904      	bls.n	800f776 <HAL_SAI_InitProtocol+0x1e>
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	3b03      	subs	r3, #3
 800f770:	2b01      	cmp	r3, #1
 800f772:	d812      	bhi.n	800f79a <HAL_SAI_InitProtocol+0x42>
 800f774:	e008      	b.n	800f788 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f000 fc11 	bl	800ffa4 <SAI_InitI2S>
 800f782:	4603      	mov	r3, r0
 800f784:	75fb      	strb	r3, [r7, #23]
      break;
 800f786:	e00b      	b.n	800f7a0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	68b9      	ldr	r1, [r7, #8]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 fcba 	bl	8010108 <SAI_InitPCM>
 800f794:	4603      	mov	r3, r0
 800f796:	75fb      	strb	r3, [r7, #23]
      break;
 800f798:	e002      	b.n	800f7a0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f79a:	2301      	movs	r3, #1
 800f79c:	75fb      	strb	r3, [r7, #23]
      break;
 800f79e:	bf00      	nop
  }

  if (status == HAL_OK)
 800f7a0:	7dfb      	ldrb	r3, [r7, #23]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d104      	bne.n	800f7b0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 f808 	bl	800f7bc <HAL_SAI_Init>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3718      	adds	r7, #24
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
	...

0800f7bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b08a      	sub	sp, #40	; 0x28
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d101      	bne.n	800f7ce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e28e      	b.n	800fcec <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f7ce:	f7f5 feb5 	bl	800553c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d113      	bne.n	800f804 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a96      	ldr	r2, [pc, #600]	; (800fa3c <HAL_SAI_Init+0x280>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d004      	beq.n	800f7f0 <HAL_SAI_Init+0x34>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a95      	ldr	r2, [pc, #596]	; (800fa40 <HAL_SAI_Init+0x284>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d107      	bne.n	800f800 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d103      	bne.n	800f800 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	e273      	b.n	800fcec <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a8c      	ldr	r2, [pc, #560]	; (800fa3c <HAL_SAI_Init+0x280>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d004      	beq.n	800f818 <HAL_SAI_Init+0x5c>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a8c      	ldr	r2, [pc, #560]	; (800fa44 <HAL_SAI_Init+0x288>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d102      	bne.n	800f81e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f818:	4b8b      	ldr	r3, [pc, #556]	; (800fa48 <HAL_SAI_Init+0x28c>)
 800f81a:	61bb      	str	r3, [r7, #24]
 800f81c:	e028      	b.n	800f870 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a8a      	ldr	r2, [pc, #552]	; (800fa4c <HAL_SAI_Init+0x290>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d004      	beq.n	800f832 <HAL_SAI_Init+0x76>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a88      	ldr	r2, [pc, #544]	; (800fa50 <HAL_SAI_Init+0x294>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d102      	bne.n	800f838 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f832:	4b88      	ldr	r3, [pc, #544]	; (800fa54 <HAL_SAI_Init+0x298>)
 800f834:	61bb      	str	r3, [r7, #24]
 800f836:	e01b      	b.n	800f870 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a86      	ldr	r2, [pc, #536]	; (800fa58 <HAL_SAI_Init+0x29c>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d004      	beq.n	800f84c <HAL_SAI_Init+0x90>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a85      	ldr	r2, [pc, #532]	; (800fa5c <HAL_SAI_Init+0x2a0>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d102      	bne.n	800f852 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f84c:	4b84      	ldr	r3, [pc, #528]	; (800fa60 <HAL_SAI_Init+0x2a4>)
 800f84e:	61bb      	str	r3, [r7, #24]
 800f850:	e00e      	b.n	800f870 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a7a      	ldr	r2, [pc, #488]	; (800fa40 <HAL_SAI_Init+0x284>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d004      	beq.n	800f866 <HAL_SAI_Init+0xaa>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a80      	ldr	r2, [pc, #512]	; (800fa64 <HAL_SAI_Init+0x2a8>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d102      	bne.n	800f86c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f866:	4b80      	ldr	r3, [pc, #512]	; (800fa68 <HAL_SAI_Init+0x2ac>)
 800f868:	61bb      	str	r3, [r7, #24]
 800f86a:	e001      	b.n	800f870 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	e23d      	b.n	800fcec <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d106      	bne.n	800f88a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7f3 ff49 	bl	800371c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fcf6 	bl	801027c <SAI_Disable>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	e228      	b.n	800fcec <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2202      	movs	r2, #2
 800f89e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d00c      	beq.n	800f8c4 <HAL_SAI_Init+0x108>
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d80d      	bhi.n	800f8ca <HAL_SAI_Init+0x10e>
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d002      	beq.n	800f8b8 <HAL_SAI_Init+0xfc>
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d003      	beq.n	800f8be <HAL_SAI_Init+0x102>
 800f8b6:	e008      	b.n	800f8ca <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8bc:	e008      	b.n	800f8d0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f8be:	2310      	movs	r3, #16
 800f8c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8c2:	e005      	b.n	800f8d0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f8c4:	2320      	movs	r3, #32
 800f8c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8c8:	e002      	b.n	800f8d0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8ce:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	2b05      	cmp	r3, #5
 800f8d6:	d832      	bhi.n	800f93e <HAL_SAI_Init+0x182>
 800f8d8:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <HAL_SAI_Init+0x124>)
 800f8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8de:	bf00      	nop
 800f8e0:	0800f8f9 	.word	0x0800f8f9
 800f8e4:	0800f8ff 	.word	0x0800f8ff
 800f8e8:	0800f907 	.word	0x0800f907
 800f8ec:	0800f90f 	.word	0x0800f90f
 800f8f0:	0800f91f 	.word	0x0800f91f
 800f8f4:	0800f92f 	.word	0x0800f92f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	61fb      	str	r3, [r7, #28]
      break;
 800f8fc:	e022      	b.n	800f944 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f902:	61fb      	str	r3, [r7, #28]
      break;
 800f904:	e01e      	b.n	800f944 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f90a:	61fb      	str	r3, [r7, #28]
      break;
 800f90c:	e01a      	b.n	800f944 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f90e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f912:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f916:	f043 0301 	orr.w	r3, r3, #1
 800f91a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f91c:	e012      	b.n	800f944 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f91e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f922:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	f043 0302 	orr.w	r3, r3, #2
 800f92a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f92c:	e00a      	b.n	800f944 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f92e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f932:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	f043 0303 	orr.w	r3, r3, #3
 800f93a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f93c:	e002      	b.n	800f944 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	61fb      	str	r3, [r7, #28]
      break;
 800f942:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f948:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6a1b      	ldr	r3, [r3, #32]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80c5 	beq.w	800fade <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a37      	ldr	r2, [pc, #220]	; (800fa3c <HAL_SAI_Init+0x280>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d004      	beq.n	800f96c <HAL_SAI_Init+0x1b0>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a37      	ldr	r2, [pc, #220]	; (800fa44 <HAL_SAI_Init+0x288>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d106      	bne.n	800f97a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f96c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f970:	f04f 0100 	mov.w	r1, #0
 800f974:	f7fe fb44 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 800f978:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a33      	ldr	r2, [pc, #204]	; (800fa4c <HAL_SAI_Init+0x290>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d004      	beq.n	800f98e <HAL_SAI_Init+0x1d2>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a31      	ldr	r2, [pc, #196]	; (800fa50 <HAL_SAI_Init+0x294>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d106      	bne.n	800f99c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f98e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f992:	f04f 0100 	mov.w	r1, #0
 800f996:	f7fe fb33 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 800f99a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a2d      	ldr	r2, [pc, #180]	; (800fa58 <HAL_SAI_Init+0x29c>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d004      	beq.n	800f9b0 <HAL_SAI_Init+0x1f4>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a2c      	ldr	r2, [pc, #176]	; (800fa5c <HAL_SAI_Init+0x2a0>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d106      	bne.n	800f9be <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f9b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f9b4:	f04f 0100 	mov.w	r1, #0
 800f9b8:	f7fe fb22 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 800f9bc:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a1f      	ldr	r2, [pc, #124]	; (800fa40 <HAL_SAI_Init+0x284>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d106      	bne.n	800f9d6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f9c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f9cc:	f04f 0100 	mov.w	r1, #0
 800f9d0:	f7fe fb16 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 800f9d4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a22      	ldr	r2, [pc, #136]	; (800fa64 <HAL_SAI_Init+0x2a8>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d106      	bne.n	800f9ee <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f9e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f9e4:	f04f 0100 	mov.w	r1, #0
 800f9e8:	f7fe fb0a 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 800f9ec:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f9f6:	d139      	bne.n	800fa6c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9fc:	2b04      	cmp	r3, #4
 800f9fe:	d102      	bne.n	800fa06 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800fa00:	2340      	movs	r3, #64	; 0x40
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e00a      	b.n	800fa1c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa0a:	2b08      	cmp	r3, #8
 800fa0c:	d103      	bne.n	800fa16 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800fa0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	e002      	b.n	800fa1c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa1a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	005b      	lsls	r3, r3, #1
 800fa26:	4619      	mov	r1, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a1b      	ldr	r3, [r3, #32]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	fb02 f303 	mul.w	r3, r2, r3
 800fa32:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	e030      	b.n	800fa9c <HAL_SAI_Init+0x2e0>
 800fa3a:	bf00      	nop
 800fa3c:	40015804 	.word	0x40015804
 800fa40:	58005404 	.word	0x58005404
 800fa44:	40015824 	.word	0x40015824
 800fa48:	40015800 	.word	0x40015800
 800fa4c:	40015c04 	.word	0x40015c04
 800fa50:	40015c24 	.word	0x40015c24
 800fa54:	40015c00 	.word	0x40015c00
 800fa58:	40016004 	.word	0x40016004
 800fa5c:	40016024 	.word	0x40016024
 800fa60:	40016000 	.word	0x40016000
 800fa64:	58005424 	.word	0x58005424
 800fa68:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa74:	d101      	bne.n	800fa7a <HAL_SAI_Init+0x2be>
 800fa76:	2302      	movs	r3, #2
 800fa78:	e000      	b.n	800fa7c <HAL_SAI_Init+0x2c0>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	4613      	mov	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	005b      	lsls	r3, r3, #1
 800fa88:	4619      	mov	r1, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	fb02 f303 	mul.w	r3, r2, r3
 800fa94:	021b      	lsls	r3, r3, #8
 800fa96:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa9a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	4a95      	ldr	r2, [pc, #596]	; (800fcf4 <HAL_SAI_Init+0x538>)
 800faa0:	fba2 2303 	umull	r2, r3, r2, r3
 800faa4:	08da      	lsrs	r2, r3, #3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800faaa:	6939      	ldr	r1, [r7, #16]
 800faac:	4b91      	ldr	r3, [pc, #580]	; (800fcf4 <HAL_SAI_Init+0x538>)
 800faae:	fba3 2301 	umull	r2, r3, r3, r1
 800fab2:	08da      	lsrs	r2, r3, #3
 800fab4:	4613      	mov	r3, r2
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4413      	add	r3, r2
 800faba:	005b      	lsls	r3, r3, #1
 800fabc:	1aca      	subs	r2, r1, r3
 800fabe:	2a08      	cmp	r2, #8
 800fac0:	d904      	bls.n	800facc <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad0:	2b04      	cmp	r3, #4
 800fad2:	d104      	bne.n	800fade <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad8:	085a      	lsrs	r2, r3, #1
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d003      	beq.n	800faee <HAL_SAI_Init+0x332>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	2b02      	cmp	r3, #2
 800faec:	d109      	bne.n	800fb02 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d101      	bne.n	800fafa <HAL_SAI_Init+0x33e>
 800faf6:	2300      	movs	r3, #0
 800faf8:	e001      	b.n	800fafe <HAL_SAI_Init+0x342>
 800fafa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fafe:	623b      	str	r3, [r7, #32]
 800fb00:	e008      	b.n	800fb14 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d102      	bne.n	800fb10 <HAL_SAI_Init+0x354>
 800fb0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb0e:	e000      	b.n	800fb12 <HAL_SAI_Init+0x356>
 800fb10:	2300      	movs	r3, #0
 800fb12:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800fb14:	f7f5 fd12 	bl	800553c <HAL_GetREVID>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb1e:	d331      	bcc.n	800fb84 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6819      	ldr	r1, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	4b73      	ldr	r3, [pc, #460]	; (800fcf8 <HAL_SAI_Init+0x53c>)
 800fb2c:	400b      	ands	r3, r1
 800fb2e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6819      	ldr	r1, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	685a      	ldr	r2, [r3, #4]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb3e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb44:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fb58:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	695b      	ldr	r3, [r3, #20]
 800fb5e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fb64:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6a:	051b      	lsls	r3, r3, #20
 800fb6c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fb72:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	430a      	orrs	r2, r1
 800fb80:	601a      	str	r2, [r3, #0]
 800fb82:	e02d      	b.n	800fbe0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6819      	ldr	r1, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	4b5b      	ldr	r3, [pc, #364]	; (800fcfc <HAL_SAI_Init+0x540>)
 800fb90:	400b      	ands	r3, r1
 800fb92:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6819      	ldr	r1, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685a      	ldr	r2, [r3, #4]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fba2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fba8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbae:	431a      	orrs	r2, r3
 800fbb0:	6a3b      	ldr	r3, [r7, #32]
 800fbb2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fbbc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	695b      	ldr	r3, [r3, #20]
 800fbc2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fbc8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbce:	051b      	lsls	r3, r3, #20
 800fbd0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fbd6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	430a      	orrs	r2, r1
 800fbde:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6859      	ldr	r1, [r3, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	4b45      	ldr	r3, [pc, #276]	; (800fd00 <HAL_SAI_Init+0x544>)
 800fbec:	400b      	ands	r3, r1
 800fbee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6859      	ldr	r1, [r3, #4]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	69da      	ldr	r2, [r3, #28]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc04:	431a      	orrs	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	430a      	orrs	r2, r1
 800fc0c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	6899      	ldr	r1, [r3, #8]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	4b3a      	ldr	r3, [pc, #232]	; (800fd04 <HAL_SAI_Init+0x548>)
 800fc1a:	400b      	ands	r3, r1
 800fc1c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6899      	ldr	r1, [r3, #8]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc28:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fc2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800fc34:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800fc3a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc40:	3b01      	subs	r3, #1
 800fc42:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800fc44:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	430a      	orrs	r2, r1
 800fc4c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68d9      	ldr	r1, [r3, #12]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	f24f 0320 	movw	r3, #61472	; 0xf020
 800fc5c:	400b      	ands	r3, r1
 800fc5e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68d9      	ldr	r1, [r3, #12]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc74:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fc76:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	021b      	lsls	r3, r3, #8
 800fc80:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	430a      	orrs	r2, r1
 800fc88:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a1e      	ldr	r2, [pc, #120]	; (800fd08 <HAL_SAI_Init+0x54c>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d004      	beq.n	800fc9e <HAL_SAI_Init+0x4e2>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a1c      	ldr	r2, [pc, #112]	; (800fd0c <HAL_SAI_Init+0x550>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d119      	bne.n	800fcd2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fca2:	f023 0201 	bic.w	r2, r3, #1
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d10e      	bne.n	800fcd2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcca:	f043 0201 	orr.w	r2, r3, #1
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2201      	movs	r2, #1
 800fcde:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3728      	adds	r7, #40	; 0x28
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	cccccccd 	.word	0xcccccccd
 800fcf8:	f005c010 	.word	0xf005c010
 800fcfc:	f805c010 	.word	0xf805c010
 800fd00:	ffff1ff0 	.word	0xffff1ff0
 800fd04:	fff88000 	.word	0xfff88000
 800fd08:	40015804 	.word	0x40015804
 800fd0c:	58005404 	.word	0x58005404

0800fd10 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fd1e:	f7f5 fbdd 	bl	80054dc <HAL_GetTick>
 800fd22:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <HAL_SAI_Transmit_DMA+0x20>
 800fd2a:	88fb      	ldrh	r3, [r7, #6]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	e098      	b.n	800fe66 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	f040 8091 	bne.w	800fe64 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d101      	bne.n	800fd50 <HAL_SAI_Transmit_DMA+0x40>
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	e08a      	b.n	800fe66 <HAL_SAI_Transmit_DMA+0x156>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	88fa      	ldrh	r2, [r7, #6]
 800fd62:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	88fa      	ldrh	r2, [r7, #6]
 800fd6a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2212      	movs	r2, #18
 800fd7a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd84:	4a3a      	ldr	r2, [pc, #232]	; (800fe70 <HAL_SAI_Transmit_DMA+0x160>)
 800fd86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd8e:	4a39      	ldr	r2, [pc, #228]	; (800fe74 <HAL_SAI_Transmit_DMA+0x164>)
 800fd90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd98:	4a37      	ldr	r2, [pc, #220]	; (800fe78 <HAL_SAI_Transmit_DMA+0x168>)
 800fd9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fda2:	2200      	movs	r2, #0
 800fda4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	331c      	adds	r3, #28
 800fdb8:	461a      	mov	r2, r3
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fdc0:	f7f7 fe3a 	bl	8007a38 <HAL_DMA_Start_IT>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d005      	beq.n	800fdd6 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e047      	b.n	800fe66 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 fa17 	bl	801020c <SAI_InterruptFlag>
 800fdde:	4601      	mov	r1, r0
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	691a      	ldr	r2, [r3, #16]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	430a      	orrs	r2, r1
 800fdec:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fdfc:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fdfe:	e015      	b.n	800fe2c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fe00:	f7f5 fb6c 	bl	80054dc <HAL_GetTick>
 800fe04:	4602      	mov	r2, r0
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe0e:	d90d      	bls.n	800fe2c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2200      	movs	r2, #0
 800fe24:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fe28:	2303      	movs	r3, #3
 800fe2a:	e01c      	b.n	800fe66 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d0e2      	beq.n	800fe00 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d107      	bne.n	800fe58 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fe56:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e000      	b.n	800fe66 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fe64:	2302      	movs	r3, #2
  }
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3718      	adds	r7, #24
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	08010351 	.word	0x08010351
 800fe74:	080102f1 	.word	0x080102f1
 800fe78:	080103e9 	.word	0x080103e9

0800fe7c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	4613      	mov	r3, r2
 800fe88:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <HAL_SAI_Receive_DMA+0x1a>
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fe96:	2301      	movs	r3, #1
 800fe98:	e079      	b.n	800ff8e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d172      	bne.n	800ff8c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800feac:	2b01      	cmp	r3, #1
 800feae:	d101      	bne.n	800feb4 <HAL_SAI_Receive_DMA+0x38>
 800feb0:	2302      	movs	r3, #2
 800feb2:	e06c      	b.n	800ff8e <HAL_SAI_Receive_DMA+0x112>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	88fa      	ldrh	r2, [r7, #6]
 800fec6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	88fa      	ldrh	r2, [r7, #6]
 800fece:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2222      	movs	r2, #34	; 0x22
 800fede:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fee8:	4a2b      	ldr	r2, [pc, #172]	; (800ff98 <HAL_SAI_Receive_DMA+0x11c>)
 800feea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef2:	4a2a      	ldr	r2, [pc, #168]	; (800ff9c <HAL_SAI_Receive_DMA+0x120>)
 800fef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fefc:	4a28      	ldr	r2, [pc, #160]	; (800ffa0 <HAL_SAI_Receive_DMA+0x124>)
 800fefe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff06:	2200      	movs	r2, #0
 800ff08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	331c      	adds	r3, #28
 800ff16:	4619      	mov	r1, r3
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800ff24:	f7f7 fd88 	bl	8007a38 <HAL_DMA_Start_IT>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d005      	beq.n	800ff3a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800ff36:	2301      	movs	r3, #1
 800ff38:	e029      	b.n	800ff8e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f000 f965 	bl	801020c <SAI_InterruptFlag>
 800ff42:	4601      	mov	r1, r0
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ff60:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d107      	bne.n	800ff80 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ff7e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	e000      	b.n	800ff8e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800ff8c:	2302      	movs	r3, #2
  }
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	080103cd 	.word	0x080103cd
 800ff9c:	0801036d 	.word	0x0801036d
 800ffa0:	080103e9 	.word	0x080103e9

0800ffa4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b087      	sub	sp, #28
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d003      	beq.n	800ffd2 <SAI_InitI2S+0x2e>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d103      	bne.n	800ffda <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	651a      	str	r2, [r3, #80]	; 0x50
 800ffd8:	e002      	b.n	800ffe0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ffe6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffee:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	683a      	ldr	r2, [r7, #0]
 800fffa:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d001      	beq.n	801000a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8010006:	2301      	movs	r3, #1
 8010008:	e077      	b.n	80100fa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d107      	bne.n	8010020 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2200      	movs	r2, #0
 8010014:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801001c:	665a      	str	r2, [r3, #100]	; 0x64
 801001e:	e006      	b.n	801002e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010026:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2200      	movs	r2, #0
 801002c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b03      	cmp	r3, #3
 8010032:	d84f      	bhi.n	80100d4 <SAI_InitI2S+0x130>
 8010034:	a201      	add	r2, pc, #4	; (adr r2, 801003c <SAI_InitI2S+0x98>)
 8010036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003a:	bf00      	nop
 801003c:	0801004d 	.word	0x0801004d
 8010040:	0801006f 	.word	0x0801006f
 8010044:	08010091 	.word	0x08010091
 8010048:	080100b3 	.word	0x080100b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2280      	movs	r2, #128	; 0x80
 8010050:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	085b      	lsrs	r3, r3, #1
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	085b      	lsrs	r3, r3, #1
 8010060:	011a      	lsls	r2, r3, #4
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2240      	movs	r2, #64	; 0x40
 801006a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801006c:	e035      	b.n	80100da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2280      	movs	r2, #128	; 0x80
 8010072:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	085b      	lsrs	r3, r3, #1
 8010078:	019a      	lsls	r2, r3, #6
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	085b      	lsrs	r3, r3, #1
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2280      	movs	r2, #128	; 0x80
 801008c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801008e:	e024      	b.n	80100da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	22c0      	movs	r2, #192	; 0xc0
 8010094:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	085b      	lsrs	r3, r3, #1
 801009a:	019a      	lsls	r2, r3, #6
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	085b      	lsrs	r3, r3, #1
 80100a4:	015a      	lsls	r2, r3, #5
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2280      	movs	r2, #128	; 0x80
 80100ae:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80100b0:	e013      	b.n	80100da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	22e0      	movs	r2, #224	; 0xe0
 80100b6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	085b      	lsrs	r3, r3, #1
 80100bc:	019a      	lsls	r2, r3, #6
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	085b      	lsrs	r3, r3, #1
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2280      	movs	r2, #128	; 0x80
 80100d0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80100d2:	e002      	b.n	80100da <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	75fb      	strb	r3, [r7, #23]
      break;
 80100d8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d10b      	bne.n	80100f8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d102      	bne.n	80100ec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2210      	movs	r2, #16
 80100ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d102      	bne.n	80100f8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2208      	movs	r2, #8
 80100f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80100f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	371c      	adds	r7, #28
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop

08010108 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2200      	movs	r2, #0
 801011e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2200      	movs	r2, #0
 8010124:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d003      	beq.n	8010136 <SAI_InitPCM+0x2e>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	2b02      	cmp	r3, #2
 8010134:	d103      	bne.n	801013e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2201      	movs	r2, #1
 801013a:	651a      	str	r2, [r3, #80]	; 0x50
 801013c:	e002      	b.n	8010144 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2200      	movs	r2, #0
 8010148:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010150:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010158:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801016c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	2b04      	cmp	r3, #4
 8010172:	d103      	bne.n	801017c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2201      	movs	r2, #1
 8010178:	659a      	str	r2, [r3, #88]	; 0x58
 801017a:	e002      	b.n	8010182 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	220d      	movs	r2, #13
 8010180:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b03      	cmp	r3, #3
 8010186:	d837      	bhi.n	80101f8 <SAI_InitPCM+0xf0>
 8010188:	a201      	add	r2, pc, #4	; (adr r2, 8010190 <SAI_InitPCM+0x88>)
 801018a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018e:	bf00      	nop
 8010190:	080101a1 	.word	0x080101a1
 8010194:	080101b7 	.word	0x080101b7
 8010198:	080101cd 	.word	0x080101cd
 801019c:	080101e3 	.word	0x080101e3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2280      	movs	r2, #128	; 0x80
 80101a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	011a      	lsls	r2, r3, #4
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2240      	movs	r2, #64	; 0x40
 80101b2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101b4:	e023      	b.n	80101fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2280      	movs	r2, #128	; 0x80
 80101ba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	015a      	lsls	r2, r3, #5
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2280      	movs	r2, #128	; 0x80
 80101c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101ca:	e018      	b.n	80101fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	22c0      	movs	r2, #192	; 0xc0
 80101d0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	015a      	lsls	r2, r3, #5
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2280      	movs	r2, #128	; 0x80
 80101de:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101e0:	e00d      	b.n	80101fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	22e0      	movs	r2, #224	; 0xe0
 80101e6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2280      	movs	r2, #128	; 0x80
 80101f4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101f6:	e002      	b.n	80101fe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80101f8:	2301      	movs	r3, #1
 80101fa:	75fb      	strb	r3, [r7, #23]
      break;
 80101fc:	bf00      	nop
  }

  return status;
 80101fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010200:	4618      	mov	r0, r3
 8010202:	371c      	adds	r7, #28
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	460b      	mov	r3, r1
 8010216:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8010218:	2301      	movs	r3, #1
 801021a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801021c:	78fb      	ldrb	r3, [r7, #3]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d103      	bne.n	801022a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f043 0308 	orr.w	r3, r3, #8
 8010228:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022e:	2b08      	cmp	r3, #8
 8010230:	d10b      	bne.n	801024a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8010236:	2b03      	cmp	r3, #3
 8010238:	d003      	beq.n	8010242 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	2b01      	cmp	r3, #1
 8010240:	d103      	bne.n	801024a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f043 0310 	orr.w	r3, r3, #16
 8010248:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	2b03      	cmp	r3, #3
 8010250:	d003      	beq.n	801025a <SAI_InterruptFlag+0x4e>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	2b02      	cmp	r3, #2
 8010258:	d104      	bne.n	8010264 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010260:	60fb      	str	r3, [r7, #12]
 8010262:	e003      	b.n	801026c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f043 0304 	orr.w	r3, r3, #4
 801026a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 801026c:	68fb      	ldr	r3, [r7, #12]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
	...

0801027c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010284:	4b18      	ldr	r3, [pc, #96]	; (80102e8 <SAI_Disable+0x6c>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a18      	ldr	r2, [pc, #96]	; (80102ec <SAI_Disable+0x70>)
 801028a:	fba2 2303 	umull	r2, r3, r2, r3
 801028e:	0b1b      	lsrs	r3, r3, #12
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80102a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10a      	bne.n	80102c4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80102be:	2303      	movs	r3, #3
 80102c0:	72fb      	strb	r3, [r7, #11]
      break;
 80102c2:	e009      	b.n	80102d8 <SAI_Disable+0x5c>
    }
    count--;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	3b01      	subs	r3, #1
 80102c8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d1e7      	bne.n	80102a8 <SAI_Disable+0x2c>

  return status;
 80102d8:	7afb      	ldrb	r3, [r7, #11]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3714      	adds	r7, #20
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	20000018 	.word	0x20000018
 80102ec:	95cbec1b 	.word	0x95cbec1b

080102f0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102fc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	69db      	ldr	r3, [r3, #28]
 8010302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010306:	d01c      	beq.n	8010342 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801031e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010320:	2100      	movs	r1, #0
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff ff72 	bl	801020c <SAI_InterruptFlag>
 8010328:	4603      	mov	r3, r0
 801032a:	43d9      	mvns	r1, r3
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	691a      	ldr	r2, [r3, #16]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	400a      	ands	r2, r1
 8010338:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2201      	movs	r2, #1
 801033e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7f2 f9ca 	bl	80026dc <HAL_SAI_TxCpltCallback>
#endif
}
 8010348:	bf00      	nop
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f7f2 f9c6 	bl	80026f0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8010364:	bf00      	nop
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010378:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	69db      	ldr	r3, [r3, #28]
 801037e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010382:	d01c      	beq.n	80103be <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010392:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2200      	movs	r2, #0
 8010398:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801039c:	2100      	movs	r1, #0
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7ff ff34 	bl	801020c <SAI_InterruptFlag>
 80103a4:	4603      	mov	r3, r0
 80103a6:	43d9      	mvns	r1, r3
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	691a      	ldr	r2, [r3, #16]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	400a      	ands	r2, r1
 80103b4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f7f2 f9a0 	bl	8002704 <HAL_SAI_RxCpltCallback>
#endif
}
 80103c4:	bf00      	nop
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f7f2 f99d 	bl	800271a <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80103e0:	bf00      	nop
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7f8 fcb2 	bl	8008d60 <HAL_DMA_GetError>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d01d      	beq.n	801043e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010408:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010420:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7ff ff2a 	bl	801027c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2201      	movs	r2, #1
 801042c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f7f2 f945 	bl	80026c8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801043e:	bf00      	nop
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b08a      	sub	sp, #40	; 0x28
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d101      	bne.n	8010458 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8010454:	2301      	movs	r3, #1
 8010456:	e075      	b.n	8010544 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801045e:	b2db      	uxtb	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d105      	bne.n	8010470 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7f3 fb60 	bl	8003b30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2204      	movs	r2, #4
 8010474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f867 	bl	801054c <HAL_SD_InitCard>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8010484:	2301      	movs	r3, #1
 8010486:	e05d      	b.n	8010544 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8010488:	f107 0308 	add.w	r3, r7, #8
 801048c:	4619      	mov	r1, r3
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 fdb4 	bl	8010ffc <HAL_SD_GetCardStatus>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801049a:	2301      	movs	r3, #1
 801049c:	e052      	b.n	8010544 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801049e:	7e3b      	ldrb	r3, [r7, #24]
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80104a4:	7e7b      	ldrb	r3, [r7, #25]
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d10a      	bne.n	80104c8 <HAL_SD_Init+0x82>
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d102      	bne.n	80104be <HAL_SD_Init+0x78>
 80104b8:	6a3b      	ldr	r3, [r7, #32]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d004      	beq.n	80104c8 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104c4:	659a      	str	r2, [r3, #88]	; 0x58
 80104c6:	e00b      	b.n	80104e0 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d104      	bne.n	80104da <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104d6:	659a      	str	r2, [r3, #88]	; 0x58
 80104d8:	e002      	b.n	80104e0 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2200      	movs	r2, #0
 80104de:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	4619      	mov	r1, r3
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 fe72 	bl	80111d0 <HAL_SD_ConfigWideBusOperation>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	e026      	b.n	8010544 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80104f6:	f7f4 fff1 	bl	80054dc <HAL_GetTick>
 80104fa:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80104fc:	e011      	b.n	8010522 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80104fe:	f7f4 ffed 	bl	80054dc <HAL_GetTick>
 8010502:	4602      	mov	r2, r0
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801050c:	d109      	bne.n	8010522 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010514:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 801051e:	2303      	movs	r3, #3
 8010520:	e010      	b.n	8010544 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 ff66 	bl	80113f4 <HAL_SD_GetCardState>
 8010528:	4603      	mov	r3, r0
 801052a:	2b04      	cmp	r3, #4
 801052c:	d1e7      	bne.n	80104fe <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2201      	movs	r2, #1
 801053e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8010542:	2300      	movs	r3, #0
}
 8010544:	4618      	mov	r0, r3
 8010546:	3728      	adds	r7, #40	; 0x28
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801054c:	b590      	push	{r4, r7, lr}
 801054e:	b08d      	sub	sp, #52	; 0x34
 8010550:	af02      	add	r7, sp, #8
 8010552:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8010554:	2300      	movs	r3, #0
 8010556:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8010558:	2300      	movs	r3, #0
 801055a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801055c:	2300      	movs	r3, #0
 801055e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8010560:	2300      	movs	r3, #0
 8010562:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010564:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010568:	f04f 0100 	mov.w	r1, #0
 801056c:	f7fd fd48 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 8010570:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8010572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d109      	bne.n	801058c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010586:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	e070      	b.n	801066e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	0a1b      	lsrs	r3, r3, #8
 8010590:	4a39      	ldr	r2, [pc, #228]	; (8010678 <HAL_SD_InitCard+0x12c>)
 8010592:	fba2 2303 	umull	r2, r3, r2, r3
 8010596:	091b      	lsrs	r3, r3, #4
 8010598:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681c      	ldr	r4, [r3, #0]
 801059e:	466a      	mov	r2, sp
 80105a0:	f107 0318 	add.w	r3, r7, #24
 80105a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80105ac:	f107 030c 	add.w	r3, r7, #12
 80105b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105b2:	4620      	mov	r0, r4
 80105b4:	f003 fe7e 	bl	80142b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4618      	mov	r0, r3
 80105be:	f003 fec1 	bl	8014344 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d005      	beq.n	80105d4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80105d2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d007      	beq.n	80105ea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80105da:	4a28      	ldr	r2, [pc, #160]	; (801067c <HAL_SD_InitCard+0x130>)
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	fbb2 f3f3 	udiv	r3, r2, r3
 80105e2:	3301      	adds	r3, #1
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f4 ff85 	bl	80054f4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 fff0 	bl	80115d0 <SD_PowerON>
 80105f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00b      	beq.n	8010610 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010604:	6a3b      	ldr	r3, [r7, #32]
 8010606:	431a      	orrs	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801060c:	2301      	movs	r3, #1
 801060e:	e02e      	b.n	801066e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 ff0f 	bl	8011434 <SD_InitCard>
 8010616:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00b      	beq.n	8010636 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2201      	movs	r2, #1
 8010622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801062a:	6a3b      	ldr	r3, [r7, #32]
 801062c:	431a      	orrs	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010632:	2301      	movs	r3, #1
 8010634:	e01b      	b.n	801066e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801063e:	4618      	mov	r0, r3
 8010640:	f003 ff16 	bl	8014470 <SDMMC_CmdBlockLength>
 8010644:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00f      	beq.n	801066c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a0b      	ldr	r2, [pc, #44]	; (8010680 <HAL_SD_InitCard+0x134>)
 8010652:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	431a      	orrs	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010668:	2301      	movs	r3, #1
 801066a:	e000      	b.n	801066e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	372c      	adds	r7, #44	; 0x2c
 8010672:	46bd      	mov	sp, r7
 8010674:	bd90      	pop	{r4, r7, pc}
 8010676:	bf00      	nop
 8010678:	014f8b59 	.word	0x014f8b59
 801067c:	00012110 	.word	0x00012110
 8010680:	1fe00fff 	.word	0x1fe00fff

08010684 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b092      	sub	sp, #72	; 0x48
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010692:	f7f4 ff23 	bl	80054dc <HAL_GetTick>
 8010696:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d107      	bne.n	80106b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e167      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b01      	cmp	r3, #1
 80106c0:	f040 815a 	bne.w	8010978 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2200      	movs	r2, #0
 80106c8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80106ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	441a      	add	r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d907      	bls.n	80106e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e14e      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2203      	movs	r2, #3
 80106ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2200      	movs	r2, #0
 80106f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d002      	beq.n	8010706 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	025b      	lsls	r3, r3, #9
 8010704:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801070a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	025b      	lsls	r3, r3, #9
 8010710:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010712:	2390      	movs	r3, #144	; 0x90
 8010714:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010716:	2302      	movs	r3, #2
 8010718:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801071a:	2300      	movs	r3, #0
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801071e:	2300      	movs	r3, #0
 8010720:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f107 0214 	add.w	r2, r7, #20
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f003 fe73 	bl	8014418 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	68da      	ldr	r2, [r3, #12]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010740:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	2b01      	cmp	r3, #1
 8010746:	d90a      	bls.n	801075e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2202      	movs	r2, #2
 801074c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010754:	4618      	mov	r0, r3
 8010756:	f003 fed1 	bl	80144fc <SDMMC_CmdReadMultiBlock>
 801075a:	6478      	str	r0, [r7, #68]	; 0x44
 801075c:	e009      	b.n	8010772 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2201      	movs	r2, #1
 8010762:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801076a:	4618      	mov	r0, r3
 801076c:	f003 fea3 	bl	80144b6 <SDMMC_CmdReadSingleBlock>
 8010770:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010774:	2b00      	cmp	r3, #0
 8010776:	d012      	beq.n	801079e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a84      	ldr	r2, [pc, #528]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 801077e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010786:	431a      	orrs	r2, r3
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	e0f3      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 801079e:	69bb      	ldr	r3, [r7, #24]
 80107a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80107a2:	e058      	b.n	8010856 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d033      	beq.n	801081a <HAL_SD_ReadBlocks+0x196>
 80107b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b4:	2b1f      	cmp	r3, #31
 80107b6:	d930      	bls.n	801081a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80107b8:	2300      	movs	r3, #0
 80107ba:	643b      	str	r3, [r7, #64]	; 0x40
 80107bc:	e027      	b.n	801080e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f003 fda0 	bl	8014308 <SDMMC_ReadFIFO>
 80107c8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80107ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80107d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d4:	3301      	adds	r3, #1
 80107d6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107da:	0a1b      	lsrs	r3, r3, #8
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	3301      	adds	r3, #1
 80107e6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80107e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ea:	0c1b      	lsrs	r3, r3, #16
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80107f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f4:	3301      	adds	r3, #1
 80107f6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	0e1b      	lsrs	r3, r3, #24
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010800:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010804:	3301      	adds	r3, #1
 8010806:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8010808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080a:	3301      	adds	r3, #1
 801080c:	643b      	str	r3, [r7, #64]	; 0x40
 801080e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010810:	2b07      	cmp	r3, #7
 8010812:	d9d4      	bls.n	80107be <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010816:	3b20      	subs	r3, #32
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801081a:	f7f4 fe5f 	bl	80054dc <HAL_GetTick>
 801081e:	4602      	mov	r2, r0
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010826:	429a      	cmp	r2, r3
 8010828:	d902      	bls.n	8010830 <HAL_SD_ReadBlocks+0x1ac>
 801082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082c:	2b00      	cmp	r3, #0
 801082e:	d112      	bne.n	8010856 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4a56      	ldr	r2, [pc, #344]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 8010836:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2201      	movs	r2, #1
 8010848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2200      	movs	r2, #0
 8010850:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010852:	2303      	movs	r3, #3
 8010854:	e097      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010860:	2b00      	cmp	r3, #0
 8010862:	d09f      	beq.n	80107a4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	68da      	ldr	r2, [r3, #12]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010872:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801087a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801087e:	2b00      	cmp	r3, #0
 8010880:	d022      	beq.n	80108c8 <HAL_SD_ReadBlocks+0x244>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d91f      	bls.n	80108c8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088c:	2b03      	cmp	r3, #3
 801088e:	d01b      	beq.n	80108c8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4618      	mov	r0, r3
 8010896:	f003 fe9b 	bl	80145d0 <SDMMC_CmdStopTransfer>
 801089a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801089c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d012      	beq.n	80108c8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a3a      	ldr	r2, [pc, #232]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 80108a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108b0:	431a      	orrs	r2, r3
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2201      	movs	r2, #1
 80108ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80108c4:	2301      	movs	r3, #1
 80108c6:	e05e      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108ce:	f003 0308 	and.w	r3, r3, #8
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d012      	beq.n	80108fc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a2d      	ldr	r2, [pc, #180]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 80108dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e2:	f043 0208 	orr.w	r2, r3, #8
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2201      	movs	r2, #1
 80108ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80108f8:	2301      	movs	r3, #1
 80108fa:	e044      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010902:	f003 0302 	and.w	r3, r3, #2
 8010906:	2b00      	cmp	r3, #0
 8010908:	d012      	beq.n	8010930 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4a20      	ldr	r2, [pc, #128]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 8010910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010916:	f043 0202 	orr.w	r2, r3, #2
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2201      	movs	r2, #1
 8010922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2200      	movs	r2, #0
 801092a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801092c:	2301      	movs	r3, #1
 801092e:	e02a      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010936:	f003 0320 	and.w	r3, r3, #32
 801093a:	2b00      	cmp	r3, #0
 801093c:	d012      	beq.n	8010964 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4a13      	ldr	r2, [pc, #76]	; (8010990 <HAL_SD_ReadBlocks+0x30c>)
 8010944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801094a:	f043 0220 	orr.w	r2, r3, #32
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2201      	movs	r2, #1
 8010956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010960:	2301      	movs	r3, #1
 8010962:	e010      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4a0a      	ldr	r2, [pc, #40]	; (8010994 <HAL_SD_ReadBlocks+0x310>)
 801096a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2201      	movs	r2, #1
 8010970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010974:	2300      	movs	r3, #0
 8010976:	e006      	b.n	8010986 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801097c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010984:	2301      	movs	r3, #1
  }
}
 8010986:	4618      	mov	r0, r3
 8010988:	3748      	adds	r7, #72	; 0x48
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	1fe00fff 	.word	0x1fe00fff
 8010994:	18000f3a 	.word	0x18000f3a

08010998 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b092      	sub	sp, #72	; 0x48
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80109a6:	f7f4 fd99 	bl	80054dc <HAL_GetTick>
 80109aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d107      	bne.n	80109ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80109c6:	2301      	movs	r3, #1
 80109c8:	e16b      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	f040 815e 	bne.w	8010c94 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2200      	movs	r2, #0
 80109dc:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80109de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	441a      	add	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d907      	bls.n	80109fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	e152      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2203      	movs	r2, #3
 8010a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d002      	beq.n	8010a1a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	025b      	lsls	r3, r3, #9
 8010a18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a1e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	025b      	lsls	r3, r3, #9
 8010a24:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010a26:	2390      	movs	r3, #144	; 0x90
 8010a28:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010a32:	2300      	movs	r3, #0
 8010a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f107 0218 	add.w	r2, r7, #24
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f003 fce9 	bl	8014418 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a54:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d90a      	bls.n	8010a72 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2220      	movs	r2, #32
 8010a60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f003 fd8d 	bl	8014588 <SDMMC_CmdWriteMultiBlock>
 8010a6e:	6478      	str	r0, [r7, #68]	; 0x44
 8010a70:	e009      	b.n	8010a86 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2210      	movs	r2, #16
 8010a76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f003 fd5f 	bl	8014542 <SDMMC_CmdWriteSingleBlock>
 8010a84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d012      	beq.n	8010ab2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4a86      	ldr	r2, [pc, #536]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010a92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9a:	431a      	orrs	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e0f7      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8010ab6:	e05c      	b.n	8010b72 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d037      	beq.n	8010b36 <HAL_SD_WriteBlocks+0x19e>
 8010ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac8:	2b1f      	cmp	r3, #31
 8010aca:	d934      	bls.n	8010b36 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8010acc:	2300      	movs	r3, #0
 8010ace:	643b      	str	r3, [r7, #64]	; 0x40
 8010ad0:	e02b      	b.n	8010b2a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ada:	3301      	adds	r3, #1
 8010adc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8010ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	021a      	lsls	r2, r3, #8
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	3301      	adds	r3, #1
 8010aee:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	041a      	lsls	r2, r3, #16
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	4313      	orrs	r3, r2
 8010afa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afe:	3301      	adds	r3, #1
 8010b00:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	061a      	lsls	r2, r3, #24
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b10:	3301      	adds	r3, #1
 8010b12:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f107 0214 	add.w	r2, r7, #20
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f003 fbff 	bl	8014322 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8010b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b26:	3301      	adds	r3, #1
 8010b28:	643b      	str	r3, [r7, #64]	; 0x40
 8010b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2c:	2b07      	cmp	r3, #7
 8010b2e:	d9d0      	bls.n	8010ad2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b32:	3b20      	subs	r3, #32
 8010b34:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8010b36:	f7f4 fcd1 	bl	80054dc <HAL_GetTick>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d902      	bls.n	8010b4c <HAL_SD_WriteBlocks+0x1b4>
 8010b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d112      	bne.n	8010b72 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a56      	ldr	r2, [pc, #344]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010b52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b5a:	431a      	orrs	r2, r3
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2201      	movs	r2, #1
 8010b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	e097      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b78:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d09b      	beq.n	8010ab8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	68da      	ldr	r2, [r3, #12]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b8e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d022      	beq.n	8010be4 <HAL_SD_WriteBlocks+0x24c>
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d91f      	bls.n	8010be4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba8:	2b03      	cmp	r3, #3
 8010baa:	d01b      	beq.n	8010be4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f003 fd0d 	bl	80145d0 <SDMMC_CmdStopTransfer>
 8010bb6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d012      	beq.n	8010be4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a3a      	ldr	r2, [pc, #232]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010bc4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bcc:	431a      	orrs	r2, r3
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010be0:	2301      	movs	r3, #1
 8010be2:	e05e      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bea:	f003 0308 	and.w	r3, r3, #8
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d012      	beq.n	8010c18 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a2d      	ldr	r2, [pc, #180]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfe:	f043 0208 	orr.w	r2, r3, #8
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010c14:	2301      	movs	r3, #1
 8010c16:	e044      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1e:	f003 0302 	and.w	r3, r3, #2
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d012      	beq.n	8010c4c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a20      	ldr	r2, [pc, #128]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010c2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c32:	f043 0202 	orr.w	r2, r3, #2
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e02a      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c52:	f003 0310 	and.w	r3, r3, #16
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d012      	beq.n	8010c80 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4a13      	ldr	r2, [pc, #76]	; (8010cac <HAL_SD_WriteBlocks+0x314>)
 8010c60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c66:	f043 0210 	orr.w	r2, r3, #16
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2201      	movs	r2, #1
 8010c72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e010      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a0a      	ldr	r2, [pc, #40]	; (8010cb0 <HAL_SD_WriteBlocks+0x318>)
 8010c86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	e006      	b.n	8010ca2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
  }
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3748      	adds	r7, #72	; 0x48
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	1fe00fff 	.word	0x1fe00fff
 8010cb0:	18000f3a 	.word	0x18000f3a

08010cb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cc2:	0f9b      	lsrs	r3, r3, #30
 8010cc4:	b2da      	uxtb	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cce:	0e9b      	lsrs	r3, r3, #26
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	f003 030f 	and.w	r3, r3, #15
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ce0:	0e1b      	lsrs	r3, r3, #24
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	f003 0303 	and.w	r3, r3, #3
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cf2:	0c1b      	lsrs	r3, r3, #16
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cfe:	0a1b      	lsrs	r3, r3, #8
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d14:	0d1b      	lsrs	r3, r3, #20
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d20:	0c1b      	lsrs	r3, r3, #16
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f003 030f 	and.w	r3, r3, #15
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d32:	0bdb      	lsrs	r3, r3, #15
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d44:	0b9b      	lsrs	r3, r3, #14
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	f003 0301 	and.w	r3, r3, #1
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d56:	0b5b      	lsrs	r3, r3, #13
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d68:	0b1b      	lsrs	r3, r3, #12
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d163      	bne.n	8010e4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d88:	009a      	lsls	r2, r3, #2
 8010d8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010d8e:	4013      	ands	r3, r2
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010d94:	0f92      	lsrs	r2, r2, #30
 8010d96:	431a      	orrs	r2, r3
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010da0:	0edb      	lsrs	r3, r3, #27
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	f003 0307 	and.w	r3, r3, #7
 8010da8:	b2da      	uxtb	r2, r3
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010db2:	0e1b      	lsrs	r3, r3, #24
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	b2da      	uxtb	r2, r3
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010dc4:	0d5b      	lsrs	r3, r3, #21
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f003 0307 	and.w	r3, r3, #7
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010dd6:	0c9b      	lsrs	r3, r3, #18
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	f003 0307 	and.w	r3, r3, #7
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010de8:	0bdb      	lsrs	r3, r3, #15
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	f003 0307 	and.w	r3, r3, #7
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	691b      	ldr	r3, [r3, #16]
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	7e1b      	ldrb	r3, [r3, #24]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	3302      	adds	r3, #2
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010e16:	fb03 f202 	mul.w	r2, r3, r2
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	7a1b      	ldrb	r3, [r3, #8]
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	f003 030f 	and.w	r3, r3, #15
 8010e28:	2201      	movs	r2, #1
 8010e2a:	409a      	lsls	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010e38:	0a52      	lsrs	r2, r2, #9
 8010e3a:	fb03 f202 	mul.w	r2, r3, r2
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e48:	655a      	str	r2, [r3, #84]	; 0x54
 8010e4a:	e031      	b.n	8010eb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d11d      	bne.n	8010e90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e58:	041b      	lsls	r3, r3, #16
 8010e5a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e62:	0c1b      	lsrs	r3, r3, #16
 8010e64:	431a      	orrs	r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	029a      	lsls	r2, r3, #10
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e84:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	655a      	str	r2, [r3, #84]	; 0x54
 8010e8e:	e00f      	b.n	8010eb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a58      	ldr	r2, [pc, #352]	; (8010ff8 <HAL_SD_GetCardCSD+0x344>)
 8010e96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	e09d      	b.n	8010fec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010eb4:	0b9b      	lsrs	r3, r3, #14
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ec6:	09db      	lsrs	r3, r3, #7
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ede:	b2da      	uxtb	r2, r3
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ee8:	0fdb      	lsrs	r3, r3, #31
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ef4:	0f5b      	lsrs	r3, r3, #29
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f003 0303 	and.w	r3, r3, #3
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f06:	0e9b      	lsrs	r3, r3, #26
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	f003 0307 	and.w	r3, r3, #7
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f18:	0d9b      	lsrs	r3, r3, #22
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	f003 030f 	and.w	r3, r3, #15
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f2a:	0d5b      	lsrs	r3, r3, #21
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	f003 0301 	and.w	r3, r3, #1
 8010f32:	b2da      	uxtb	r2, r3
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f46:	0c1b      	lsrs	r3, r3, #16
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	f003 0301 	and.w	r3, r3, #1
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f5a:	0bdb      	lsrs	r3, r3, #15
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	b2da      	uxtb	r2, r3
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f6e:	0b9b      	lsrs	r3, r3, #14
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	f003 0301 	and.w	r3, r3, #1
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f82:	0b5b      	lsrs	r3, r3, #13
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	f003 0301 	and.w	r3, r3, #1
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f96:	0b1b      	lsrs	r3, r3, #12
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	f003 0301 	and.w	r3, r3, #1
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010faa:	0a9b      	lsrs	r3, r3, #10
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 0303 	and.w	r3, r3, #3
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fbe:	0a1b      	lsrs	r3, r3, #8
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	f003 0303 	and.w	r3, r3, #3
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fd2:	085b      	lsrs	r3, r3, #1
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	1fe00fff 	.word	0x1fe00fff

08010ffc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b094      	sub	sp, #80	; 0x50
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011012:	b2db      	uxtb	r3, r3
 8011014:	2b03      	cmp	r3, #3
 8011016:	d101      	bne.n	801101c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8011018:	2301      	movs	r3, #1
 801101a:	e0a7      	b.n	801116c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801101c:	f107 0308 	add.w	r3, r7, #8
 8011020:	4619      	mov	r1, r3
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 fb62 	bl	80116ec <SD_SendSDStatus>
 8011028:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801102c:	2b00      	cmp	r3, #0
 801102e:	d011      	beq.n	8011054 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a4f      	ldr	r2, [pc, #316]	; (8011174 <HAL_SD_GetCardStatus+0x178>)
 8011036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801103e:	431a      	orrs	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011052:	e070      	b.n	8011136 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	099b      	lsrs	r3, r3, #6
 8011058:	b2db      	uxtb	r3, r3
 801105a:	f003 0303 	and.w	r3, r3, #3
 801105e:	b2da      	uxtb	r2, r3
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	095b      	lsrs	r3, r3, #5
 8011068:	b2db      	uxtb	r3, r3
 801106a:	f003 0301 	and.w	r3, r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	0a1b      	lsrs	r3, r3, #8
 8011078:	b29b      	uxth	r3, r3
 801107a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801107e:	b29a      	uxth	r2, r3
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	0e1b      	lsrs	r3, r3, #24
 8011084:	b29b      	uxth	r3, r3
 8011086:	4313      	orrs	r3, r2
 8011088:	b29a      	uxth	r2, r3
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	061a      	lsls	r2, r3, #24
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801109a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	0a1b      	lsrs	r3, r3, #8
 80110a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80110a4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	0e1b      	lsrs	r3, r3, #24
 80110aa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	0a1b      	lsrs	r3, r3, #8
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	0d1b      	lsrs	r3, r3, #20
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	f003 030f 	and.w	r3, r3, #15
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	0c1b      	lsrs	r3, r3, #16
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80110dc:	b29a      	uxth	r2, r3
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	4313      	orrs	r3, r2
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	0a9b      	lsrs	r3, r3, #10
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	0a1b      	lsrs	r3, r3, #8
 8011102:	b2db      	uxtb	r3, r3
 8011104:	f003 0303 	and.w	r3, r3, #3
 8011108:	b2da      	uxtb	r2, r3
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	091b      	lsrs	r3, r3, #4
 8011112:	b2db      	uxtb	r3, r3
 8011114:	f003 030f 	and.w	r3, r3, #15
 8011118:	b2da      	uxtb	r2, r3
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	b2db      	uxtb	r3, r3
 8011122:	f003 030f 	and.w	r3, r3, #15
 8011126:	b2da      	uxtb	r2, r3
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	0e1b      	lsrs	r3, r3, #24
 8011130:	b2da      	uxtb	r2, r3
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801113e:	4618      	mov	r0, r3
 8011140:	f003 f996 	bl	8014470 <SDMMC_CmdBlockLength>
 8011144:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8011146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00d      	beq.n	8011168 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4a08      	ldr	r2, [pc, #32]	; (8011174 <HAL_SD_GetCardStatus+0x178>)
 8011152:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011158:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8011162:	2301      	movs	r3, #1
 8011164:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8011168:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801116c:	4618      	mov	r0, r3
 801116e:	3750      	adds	r7, #80	; 0x50
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	1fe00fff 	.word	0x1fe00fff

08011178 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80111c2:	2300      	movs	r3, #0
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b08d      	sub	sp, #52	; 0x34
 80111d4:	af02      	add	r7, sp, #8
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2203      	movs	r2, #3
 80111e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ec:	2b03      	cmp	r3, #3
 80111ee:	d02e      	beq.n	801124e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80111f6:	d106      	bne.n	8011206 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	635a      	str	r2, [r3, #52]	; 0x34
 8011204:	e029      	b.n	801125a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801120c:	d10a      	bne.n	8011224 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 fb64 	bl	80118dc <SD_WideBus_Enable>
 8011214:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	431a      	orrs	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	635a      	str	r2, [r3, #52]	; 0x34
 8011222:	e01a      	b.n	801125a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d10a      	bne.n	8011240 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 fba1 	bl	8011972 <SD_WideBus_Disable>
 8011230:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	431a      	orrs	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	635a      	str	r2, [r3, #52]	; 0x34
 801123e:	e00c      	b.n	801125a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011244:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	635a      	str	r2, [r3, #52]	; 0x34
 801124c:	e005      	b.n	801125a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011252:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801125e:	2b00      	cmp	r3, #0
 8011260:	d007      	beq.n	8011272 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a5f      	ldr	r2, [pc, #380]	; (80113e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8011268:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011270:	e096      	b.n	80113a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011272:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011276:	f04f 0100 	mov.w	r1, #0
 801127a:	f7fc fec1 	bl	800e000 <HAL_RCCEx_GetPeriphCLKFreq>
 801127e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8011280:	69fb      	ldr	r3, [r7, #28]
 8011282:	2b00      	cmp	r3, #0
 8011284:	f000 8083 	beq.w	801138e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	689b      	ldr	r3, [r3, #8]
 8011292:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	691b      	ldr	r3, [r3, #16]
 801129c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	695a      	ldr	r2, [r3, #20]
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	4950      	ldr	r1, [pc, #320]	; (80113e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112a6:	fba1 1303 	umull	r1, r3, r1, r3
 80112aa:	0e1b      	lsrs	r3, r3, #24
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d303      	bcc.n	80112b8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	61bb      	str	r3, [r7, #24]
 80112b6:	e05a      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112c0:	d103      	bne.n	80112ca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	61bb      	str	r3, [r7, #24]
 80112c8:	e051      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112d2:	d126      	bne.n	8011322 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	695b      	ldr	r3, [r3, #20]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10e      	bne.n	80112fa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	4a43      	ldr	r2, [pc, #268]	; (80113ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d906      	bls.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	4a40      	ldr	r2, [pc, #256]	; (80113e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112e8:	fba2 2303 	umull	r2, r3, r2, r3
 80112ec:	0e5b      	lsrs	r3, r3, #25
 80112ee:	61bb      	str	r3, [r7, #24]
 80112f0:	e03d      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	695b      	ldr	r3, [r3, #20]
 80112f6:	61bb      	str	r3, [r7, #24]
 80112f8:	e039      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	69fa      	ldr	r2, [r7, #28]
 8011302:	fbb2 f3f3 	udiv	r3, r2, r3
 8011306:	4a39      	ldr	r2, [pc, #228]	; (80113ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d906      	bls.n	801131a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	4a36      	ldr	r2, [pc, #216]	; (80113e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011310:	fba2 2303 	umull	r2, r3, r2, r3
 8011314:	0e5b      	lsrs	r3, r3, #25
 8011316:	61bb      	str	r3, [r7, #24]
 8011318:	e029      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	695b      	ldr	r3, [r3, #20]
 801131e:	61bb      	str	r3, [r7, #24]
 8011320:	e025      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10e      	bne.n	8011348 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	4a30      	ldr	r2, [pc, #192]	; (80113f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d906      	bls.n	8011340 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	4a2c      	ldr	r2, [pc, #176]	; (80113e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011336:	fba2 2303 	umull	r2, r3, r2, r3
 801133a:	0e1b      	lsrs	r3, r3, #24
 801133c:	61bb      	str	r3, [r7, #24]
 801133e:	e016      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	61bb      	str	r3, [r7, #24]
 8011346:	e012      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	695b      	ldr	r3, [r3, #20]
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	69fa      	ldr	r2, [r7, #28]
 8011350:	fbb2 f3f3 	udiv	r3, r2, r3
 8011354:	4a26      	ldr	r2, [pc, #152]	; (80113f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d906      	bls.n	8011368 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	4a22      	ldr	r2, [pc, #136]	; (80113e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801135e:	fba2 2303 	umull	r2, r3, r2, r3
 8011362:	0e1b      	lsrs	r3, r3, #24
 8011364:	61bb      	str	r3, [r7, #24]
 8011366:	e002      	b.n	801136e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	695b      	ldr	r3, [r3, #20]
 801136c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681c      	ldr	r4, [r3, #0]
 8011372:	466a      	mov	r2, sp
 8011374:	f107 0314 	add.w	r3, r7, #20
 8011378:	e893 0003 	ldmia.w	r3, {r0, r1}
 801137c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011380:	f107 0308 	add.w	r3, r7, #8
 8011384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011386:	4620      	mov	r0, r4
 8011388:	f002 ff94 	bl	80142b4 <SDMMC_Init>
 801138c:	e008      	b.n	80113a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011392:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113a8:	4618      	mov	r0, r3
 80113aa:	f003 f861 	bl	8014470 <SDMMC_CmdBlockLength>
 80113ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80113b0:	6a3b      	ldr	r3, [r7, #32]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d00c      	beq.n	80113d0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a0a      	ldr	r2, [pc, #40]	; (80113e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80113bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	431a      	orrs	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80113ca:	2301      	movs	r3, #1
 80113cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2201      	movs	r2, #1
 80113d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80113d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80113dc:	4618      	mov	r0, r3
 80113de:	372c      	adds	r7, #44	; 0x2c
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd90      	pop	{r4, r7, pc}
 80113e4:	1fe00fff 	.word	0x1fe00fff
 80113e8:	55e63b89 	.word	0x55e63b89
 80113ec:	02faf080 	.word	0x02faf080
 80113f0:	017d7840 	.word	0x017d7840

080113f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80113fc:	2300      	movs	r3, #0
 80113fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011400:	f107 030c 	add.w	r3, r7, #12
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fa40 	bl	801188c <SD_SendStatus>
 801140c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d005      	beq.n	8011420 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	431a      	orrs	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	0a5b      	lsrs	r3, r3, #9
 8011424:	f003 030f 	and.w	r3, r3, #15
 8011428:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801142a:	693b      	ldr	r3, [r7, #16]
}
 801142c:	4618      	mov	r0, r3
 801142e:	3718      	adds	r7, #24
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b090      	sub	sp, #64	; 0x40
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 801143c:	2300      	movs	r3, #0
 801143e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8011440:	f7f4 f84c 	bl	80054dc <HAL_GetTick>
 8011444:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4618      	mov	r0, r3
 801144c:	f002 ff8b 	bl	8014366 <SDMMC_GetPowerState>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d102      	bne.n	801145c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801145a:	e0b5      	b.n	80115c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011460:	2b03      	cmp	r3, #3
 8011462:	d02e      	beq.n	80114c2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f003 f9d6 	bl	801481a <SDMMC_CmdSendCID>
 801146e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <SD_InitCard+0x46>
    {
      return errorstate;
 8011476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011478:	e0a6      	b.n	80115c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2100      	movs	r1, #0
 8011480:	4618      	mov	r0, r3
 8011482:	f002 ffb6 	bl	80143f2 <SDMMC_GetResponse>
 8011486:	4602      	mov	r2, r0
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2104      	movs	r1, #4
 8011492:	4618      	mov	r0, r3
 8011494:	f002 ffad 	bl	80143f2 <SDMMC_GetResponse>
 8011498:	4602      	mov	r2, r0
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	2108      	movs	r1, #8
 80114a4:	4618      	mov	r0, r3
 80114a6:	f002 ffa4 	bl	80143f2 <SDMMC_GetResponse>
 80114aa:	4602      	mov	r2, r0
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	210c      	movs	r1, #12
 80114b6:	4618      	mov	r0, r3
 80114b8:	f002 ff9b 	bl	80143f2 <SDMMC_GetResponse>
 80114bc:	4602      	mov	r2, r0
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c6:	2b03      	cmp	r3, #3
 80114c8:	d01d      	beq.n	8011506 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80114ca:	e019      	b.n	8011500 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f107 020a 	add.w	r2, r7, #10
 80114d4:	4611      	mov	r1, r2
 80114d6:	4618      	mov	r0, r3
 80114d8:	f003 f9de 	bl	8014898 <SDMMC_CmdSetRelAdd>
 80114dc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80114de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d001      	beq.n	80114e8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	e06f      	b.n	80115c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80114e8:	f7f3 fff8 	bl	80054dc <HAL_GetTick>
 80114ec:	4602      	mov	r2, r0
 80114ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d902      	bls.n	8011500 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80114fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114fe:	e063      	b.n	80115c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8011500:	897b      	ldrh	r3, [r7, #10]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d0e2      	beq.n	80114cc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150a:	2b03      	cmp	r3, #3
 801150c:	d036      	beq.n	801157c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801150e:	897b      	ldrh	r3, [r7, #10]
 8011510:	461a      	mov	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801151e:	041b      	lsls	r3, r3, #16
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f003 f998 	bl	8014858 <SDMMC_CmdSendCSD>
 8011528:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152c:	2b00      	cmp	r3, #0
 801152e:	d001      	beq.n	8011534 <SD_InitCard+0x100>
    {
      return errorstate;
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	e049      	b.n	80115c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2100      	movs	r1, #0
 801153a:	4618      	mov	r0, r3
 801153c:	f002 ff59 	bl	80143f2 <SDMMC_GetResponse>
 8011540:	4602      	mov	r2, r0
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2104      	movs	r1, #4
 801154c:	4618      	mov	r0, r3
 801154e:	f002 ff50 	bl	80143f2 <SDMMC_GetResponse>
 8011552:	4602      	mov	r2, r0
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2108      	movs	r1, #8
 801155e:	4618      	mov	r0, r3
 8011560:	f002 ff47 	bl	80143f2 <SDMMC_GetResponse>
 8011564:	4602      	mov	r2, r0
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	210c      	movs	r1, #12
 8011570:	4618      	mov	r0, r3
 8011572:	f002 ff3e 	bl	80143f2 <SDMMC_GetResponse>
 8011576:	4602      	mov	r2, r0
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2104      	movs	r1, #4
 8011582:	4618      	mov	r0, r3
 8011584:	f002 ff35 	bl	80143f2 <SDMMC_GetResponse>
 8011588:	4603      	mov	r3, r0
 801158a:	0d1a      	lsrs	r2, r3, #20
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011590:	f107 030c 	add.w	r3, r7, #12
 8011594:	4619      	mov	r1, r3
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7ff fb8c 	bl	8010cb4 <HAL_SD_GetCardCSD>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d002      	beq.n	80115a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80115a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80115a6:	e00f      	b.n	80115c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115b0:	041b      	lsls	r3, r3, #16
 80115b2:	4619      	mov	r1, r3
 80115b4:	4610      	mov	r0, r2
 80115b6:	f003 f847 	bl	8014648 <SDMMC_CmdSelDesel>
 80115ba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80115bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d001      	beq.n	80115c6 <SD_InitCard+0x192>
  {
    return errorstate;
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	e000      	b.n	80115c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80115c6:	2300      	movs	r3, #0
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3740      	adds	r7, #64	; 0x40
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b086      	sub	sp, #24
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80115d8:	2300      	movs	r3, #0
 80115da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80115dc:	2300      	movs	r3, #0
 80115de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80115e0:	2300      	movs	r3, #0
 80115e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f003 f850 	bl	801468e <SDMMC_CmdGoIdleState>
 80115ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	e072      	b.n	80116e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4618      	mov	r0, r3
 8011600:	f003 f863 	bl	80146ca <SDMMC_CmdOperCond>
 8011604:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801160c:	d10d      	bne.n	801162a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4618      	mov	r0, r3
 801161a:	f003 f838 	bl	801468e <SDMMC_CmdGoIdleState>
 801161e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d004      	beq.n	8011630 <SD_PowerON+0x60>
    {
      return errorstate;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	e05a      	b.n	80116e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011634:	2b01      	cmp	r3, #1
 8011636:	d137      	bne.n	80116a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2100      	movs	r1, #0
 801163e:	4618      	mov	r0, r3
 8011640:	f003 f863 	bl	801470a <SDMMC_CmdAppCommand>
 8011644:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d02d      	beq.n	80116a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801164c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011650:	e046      	b.n	80116e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2100      	movs	r1, #0
 8011658:	4618      	mov	r0, r3
 801165a:	f003 f856 	bl	801470a <SDMMC_CmdAppCommand>
 801165e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d001      	beq.n	801166a <SD_PowerON+0x9a>
    {
      return errorstate;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	e03a      	b.n	80116e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	491e      	ldr	r1, [pc, #120]	; (80116e8 <SD_PowerON+0x118>)
 8011670:	4618      	mov	r0, r3
 8011672:	f003 f86d 	bl	8014750 <SDMMC_CmdAppOperCommand>
 8011676:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d002      	beq.n	8011684 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801167e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011682:	e02d      	b.n	80116e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2100      	movs	r1, #0
 801168a:	4618      	mov	r0, r3
 801168c:	f002 feb1 	bl	80143f2 <SDMMC_GetResponse>
 8011690:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	0fdb      	lsrs	r3, r3, #31
 8011696:	2b01      	cmp	r3, #1
 8011698:	d101      	bne.n	801169e <SD_PowerON+0xce>
 801169a:	2301      	movs	r3, #1
 801169c:	e000      	b.n	80116a0 <SD_PowerON+0xd0>
 801169e:	2300      	movs	r3, #0
 80116a0:	613b      	str	r3, [r7, #16]

    count++;
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	3301      	adds	r3, #1
 80116a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d802      	bhi.n	80116b8 <SD_PowerON+0xe8>
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0cc      	beq.n	8011652 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80116be:	4293      	cmp	r3, r2
 80116c0:	d902      	bls.n	80116c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80116c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80116c6:	e00b      	b.n	80116e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80116de:	2300      	movs	r3, #0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3718      	adds	r7, #24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	c1100000 	.word	0xc1100000

080116ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b08c      	sub	sp, #48	; 0x30
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80116f6:	f7f3 fef1 	bl	80054dc <HAL_GetTick>
 80116fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	2100      	movs	r1, #0
 8011706:	4618      	mov	r0, r3
 8011708:	f002 fe73 	bl	80143f2 <SDMMC_GetResponse>
 801170c:	4603      	mov	r3, r0
 801170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011716:	d102      	bne.n	801171e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801171c:	e0b0      	b.n	8011880 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2140      	movs	r1, #64	; 0x40
 8011724:	4618      	mov	r0, r3
 8011726:	f002 fea3 	bl	8014470 <SDMMC_CmdBlockLength>
 801172a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d005      	beq.n	801173e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	e0a0      	b.n	8011880 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011746:	041b      	lsls	r3, r3, #16
 8011748:	4619      	mov	r1, r3
 801174a:	4610      	mov	r0, r2
 801174c:	f002 ffdd 	bl	801470a <SDMMC_CmdAppCommand>
 8011750:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011752:	6a3b      	ldr	r3, [r7, #32]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d005      	beq.n	8011764 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011760:	6a3b      	ldr	r3, [r7, #32]
 8011762:	e08d      	b.n	8011880 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011768:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801176a:	2340      	movs	r3, #64	; 0x40
 801176c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801176e:	2360      	movs	r3, #96	; 0x60
 8011770:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011772:	2302      	movs	r3, #2
 8011774:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011776:	2300      	movs	r3, #0
 8011778:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801177a:	2301      	movs	r3, #1
 801177c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f107 0208 	add.w	r2, r7, #8
 8011786:	4611      	mov	r1, r2
 8011788:	4618      	mov	r0, r3
 801178a:	f002 fe45 	bl	8014418 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4618      	mov	r0, r3
 8011794:	f003 f8c5 	bl	8014922 <SDMMC_CmdStatusRegister>
 8011798:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d02b      	beq.n	80117f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	e069      	b.n	8011880 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d013      	beq.n	80117e2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117be:	e00d      	b.n	80117dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f002 fd9f 	bl	8014308 <SDMMC_ReadFIFO>
 80117ca:	4602      	mov	r2, r0
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	601a      	str	r2, [r3, #0]
        pData++;
 80117d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d2:	3304      	adds	r3, #4
 80117d4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80117d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d8:	3301      	adds	r3, #1
 80117da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	2b07      	cmp	r3, #7
 80117e0:	d9ee      	bls.n	80117c0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80117e2:	f7f3 fe7b 	bl	80054dc <HAL_GetTick>
 80117e6:	4602      	mov	r2, r0
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117f0:	d102      	bne.n	80117f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80117f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117f6:	e043      	b.n	8011880 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0d2      	beq.n	80117ac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801180c:	f003 0308 	and.w	r3, r3, #8
 8011810:	2b00      	cmp	r3, #0
 8011812:	d001      	beq.n	8011818 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011814:	2308      	movs	r3, #8
 8011816:	e033      	b.n	8011880 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801181e:	f003 0302 	and.w	r3, r3, #2
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011826:	2302      	movs	r3, #2
 8011828:	e02a      	b.n	8011880 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011830:	f003 0320 	and.w	r3, r3, #32
 8011834:	2b00      	cmp	r3, #0
 8011836:	d017      	beq.n	8011868 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8011838:	2320      	movs	r3, #32
 801183a:	e021      	b.n	8011880 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	f002 fd61 	bl	8014308 <SDMMC_ReadFIFO>
 8011846:	4602      	mov	r2, r0
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	601a      	str	r2, [r3, #0]
    pData++;
 801184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184e:	3304      	adds	r3, #4
 8011850:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011852:	f7f3 fe43 	bl	80054dc <HAL_GetTick>
 8011856:	4602      	mov	r2, r0
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011860:	d102      	bne.n	8011868 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011862:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011866:	e00b      	b.n	8011880 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1e2      	bne.n	801183c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a03      	ldr	r2, [pc, #12]	; (8011888 <SD_SendSDStatus+0x19c>)
 801187c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801187e:	2300      	movs	r3, #0
}
 8011880:	4618      	mov	r0, r3
 8011882:	3730      	adds	r7, #48	; 0x30
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	18000f3a 	.word	0x18000f3a

0801188c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d102      	bne.n	80118a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801189c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80118a0:	e018      	b.n	80118d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118aa:	041b      	lsls	r3, r3, #16
 80118ac:	4619      	mov	r1, r3
 80118ae:	4610      	mov	r0, r2
 80118b0:	f003 f814 	bl	80148dc <SDMMC_CmdSendStatus>
 80118b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	e009      	b.n	80118d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2100      	movs	r1, #0
 80118c6:	4618      	mov	r0, r3
 80118c8:	f002 fd93 	bl	80143f2 <SDMMC_GetResponse>
 80118cc:	4602      	mov	r2, r0
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b086      	sub	sp, #24
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80118e4:	2300      	movs	r3, #0
 80118e6:	60fb      	str	r3, [r7, #12]
 80118e8:	2300      	movs	r3, #0
 80118ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2100      	movs	r1, #0
 80118f2:	4618      	mov	r0, r3
 80118f4:	f002 fd7d 	bl	80143f2 <SDMMC_GetResponse>
 80118f8:	4603      	mov	r3, r0
 80118fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011902:	d102      	bne.n	801190a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011908:	e02f      	b.n	801196a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	4619      	mov	r1, r3
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 f879 	bl	8011a08 <SD_FindSCR>
 8011916:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	e023      	b.n	801196a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011928:	2b00      	cmp	r3, #0
 801192a:	d01c      	beq.n	8011966 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011934:	041b      	lsls	r3, r3, #16
 8011936:	4619      	mov	r1, r3
 8011938:	4610      	mov	r0, r2
 801193a:	f002 fee6 	bl	801470a <SDMMC_CmdAppCommand>
 801193e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	e00f      	b.n	801196a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2102      	movs	r1, #2
 8011950:	4618      	mov	r0, r3
 8011952:	f002 ff1d 	bl	8014790 <SDMMC_CmdBusWidth>
 8011956:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d001      	beq.n	8011962 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	e003      	b.n	801196a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011962:	2300      	movs	r3, #0
 8011964:	e001      	b.n	801196a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011966:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801196a:	4618      	mov	r0, r3
 801196c:	3718      	adds	r7, #24
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}

08011972 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b086      	sub	sp, #24
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801197a:	2300      	movs	r3, #0
 801197c:	60fb      	str	r3, [r7, #12]
 801197e:	2300      	movs	r3, #0
 8011980:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2100      	movs	r1, #0
 8011988:	4618      	mov	r0, r3
 801198a:	f002 fd32 	bl	80143f2 <SDMMC_GetResponse>
 801198e:	4603      	mov	r3, r0
 8011990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011998:	d102      	bne.n	80119a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801199a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801199e:	e02f      	b.n	8011a00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80119a0:	f107 030c 	add.w	r3, r7, #12
 80119a4:	4619      	mov	r1, r3
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 f82e 	bl	8011a08 <SD_FindSCR>
 80119ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	e023      	b.n	8011a00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d01c      	beq.n	80119fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ca:	041b      	lsls	r3, r3, #16
 80119cc:	4619      	mov	r1, r3
 80119ce:	4610      	mov	r0, r2
 80119d0:	f002 fe9b 	bl	801470a <SDMMC_CmdAppCommand>
 80119d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d001      	beq.n	80119e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	e00f      	b.n	8011a00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2100      	movs	r1, #0
 80119e6:	4618      	mov	r0, r3
 80119e8:	f002 fed2 	bl	8014790 <SDMMC_CmdBusWidth>
 80119ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	e003      	b.n	8011a00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80119f8:	2300      	movs	r3, #0
 80119fa:	e001      	b.n	8011a00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80119fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3718      	adds	r7, #24
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b08e      	sub	sp, #56	; 0x38
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011a12:	f7f3 fd63 	bl	80054dc <HAL_GetTick>
 8011a16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	60bb      	str	r3, [r7, #8]
 8011a20:	2300      	movs	r3, #0
 8011a22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2108      	movs	r1, #8
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f002 fd1e 	bl	8014470 <SDMMC_CmdBlockLength>
 8011a34:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d001      	beq.n	8011a40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3e:	e0ad      	b.n	8011b9c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a48:	041b      	lsls	r3, r3, #16
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	f002 fe5c 	bl	801470a <SDMMC_CmdAppCommand>
 8011a52:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d001      	beq.n	8011a5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8011a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5c:	e09e      	b.n	8011b9c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011a64:	2308      	movs	r3, #8
 8011a66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011a68:	2330      	movs	r3, #48	; 0x30
 8011a6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011a6c:	2302      	movs	r3, #2
 8011a6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011a74:	2301      	movs	r3, #1
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f107 0210 	add.w	r2, r7, #16
 8011a80:	4611      	mov	r1, r2
 8011a82:	4618      	mov	r0, r3
 8011a84:	f002 fcc8 	bl	8014418 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f002 fea2 	bl	80147d6 <SDMMC_CmdSendSCR>
 8011a92:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d027      	beq.n	8011aea <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	e07e      	b.n	8011b9c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d113      	bne.n	8011ad4 <SD_FindSCR+0xcc>
 8011aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d110      	bne.n	8011ad4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f002 fc26 	bl	8014308 <SDMMC_ReadFIFO>
 8011abc:	4603      	mov	r3, r0
 8011abe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f002 fc1f 	bl	8014308 <SDMMC_ReadFIFO>
 8011aca:	4603      	mov	r3, r0
 8011acc:	60fb      	str	r3, [r7, #12]
      index++;
 8011ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011ad4:	f7f3 fd02 	bl	80054dc <HAL_GetTick>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ae2:	d102      	bne.n	8011aea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011ae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ae8:	e058      	b.n	8011b9c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af0:	f240 532a 	movw	r3, #1322	; 0x52a
 8011af4:	4013      	ands	r3, r2
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0d1      	beq.n	8011a9e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b00:	f003 0308 	and.w	r3, r3, #8
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d005      	beq.n	8011b14 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2208      	movs	r2, #8
 8011b0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011b10:	2308      	movs	r3, #8
 8011b12:	e043      	b.n	8011b9c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b1a:	f003 0302 	and.w	r3, r3, #2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d005      	beq.n	8011b2e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2202      	movs	r2, #2
 8011b28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011b2a:	2302      	movs	r3, #2
 8011b2c:	e036      	b.n	8011b9c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b34:	f003 0320 	and.w	r3, r3, #32
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d005      	beq.n	8011b48 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2220      	movs	r2, #32
 8011b42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011b44:	2320      	movs	r3, #32
 8011b46:	e029      	b.n	8011b9c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4a15      	ldr	r2, [pc, #84]	; (8011ba4 <SD_FindSCR+0x19c>)
 8011b4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	061a      	lsls	r2, r3, #24
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	021b      	lsls	r3, r3, #8
 8011b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	0a1b      	lsrs	r3, r3, #8
 8011b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011b66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	0e1b      	lsrs	r3, r3, #24
 8011b6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b70:	601a      	str	r2, [r3, #0]
    scr++;
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	3304      	adds	r3, #4
 8011b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	061a      	lsls	r2, r3, #24
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	021b      	lsls	r3, r3, #8
 8011b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	0a1b      	lsrs	r3, r3, #8
 8011b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	0e1b      	lsrs	r3, r3, #24
 8011b94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3738      	adds	r7, #56	; 0x38
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	18000f3a 	.word	0x18000f3a

08011ba8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d101      	bne.n	8011bbc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e02b      	b.n	8011c14 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d106      	bne.n	8011bd6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7f1 f86b 	bl	8002cac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2202      	movs	r2, #2
 8011bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	4619      	mov	r1, r3
 8011be8:	4610      	mov	r0, r2
 8011bea:	f002 fa61 	bl	80140b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6818      	ldr	r0, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	f002 fab5 	bl	8014168 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011bfe:	4b07      	ldr	r3, [pc, #28]	; (8011c1c <HAL_SDRAM_Init+0x74>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a06      	ldr	r2, [pc, #24]	; (8011c1c <HAL_SDRAM_Init+0x74>)
 8011c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011c08:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	52004000 	.word	0x52004000

08011c20 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c32:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011c34:	7dfb      	ldrb	r3, [r7, #23]
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d101      	bne.n	8011c3e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e021      	b.n	8011c82 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d002      	beq.n	8011c4a <HAL_SDRAM_SendCommand+0x2a>
 8011c44:	7dfb      	ldrb	r3, [r7, #23]
 8011c46:	2b05      	cmp	r3, #5
 8011c48:	d118      	bne.n	8011c7c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f002 faee 	bl	801423c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2b02      	cmp	r3, #2
 8011c66:	d104      	bne.n	8011c72 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2205      	movs	r2, #5
 8011c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011c70:	e006      	b.n	8011c80 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011c7a:	e001      	b.n	8011c80 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e000      	b.n	8011c82 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3718      	adds	r7, #24
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}

08011c8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b082      	sub	sp, #8
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
 8011c92:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	2b02      	cmp	r3, #2
 8011c9e:	d101      	bne.n	8011ca4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	e016      	b.n	8011cd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d10f      	bne.n	8011cd0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	6839      	ldr	r1, [r7, #0]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f002 fae0 	bl	8014284 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	e000      	b.n	8011cd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011cd0:	2301      	movs	r3, #1
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011cea:	2301      	movs	r3, #1
 8011cec:	e10f      	b.n	8011f0e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4a87      	ldr	r2, [pc, #540]	; (8011f18 <HAL_SPI_Init+0x23c>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d00f      	beq.n	8011d1e <HAL_SPI_Init+0x42>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	4a86      	ldr	r2, [pc, #536]	; (8011f1c <HAL_SPI_Init+0x240>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d00a      	beq.n	8011d1e <HAL_SPI_Init+0x42>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a84      	ldr	r2, [pc, #528]	; (8011f20 <HAL_SPI_Init+0x244>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d005      	beq.n	8011d1e <HAL_SPI_Init+0x42>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	2b0f      	cmp	r3, #15
 8011d18:	d901      	bls.n	8011d1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e0f7      	b.n	8011f0e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f900 	bl	8011f24 <SPI_GetPacketSize>
 8011d24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4a7b      	ldr	r2, [pc, #492]	; (8011f18 <HAL_SPI_Init+0x23c>)
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	d00c      	beq.n	8011d4a <HAL_SPI_Init+0x6e>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4a79      	ldr	r2, [pc, #484]	; (8011f1c <HAL_SPI_Init+0x240>)
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d007      	beq.n	8011d4a <HAL_SPI_Init+0x6e>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4a78      	ldr	r2, [pc, #480]	; (8011f20 <HAL_SPI_Init+0x244>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d002      	beq.n	8011d4a <HAL_SPI_Init+0x6e>
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2b08      	cmp	r3, #8
 8011d48:	d811      	bhi.n	8011d6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011d4e:	4a72      	ldr	r2, [pc, #456]	; (8011f18 <HAL_SPI_Init+0x23c>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d009      	beq.n	8011d68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4a70      	ldr	r2, [pc, #448]	; (8011f1c <HAL_SPI_Init+0x240>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d004      	beq.n	8011d68 <HAL_SPI_Init+0x8c>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a6f      	ldr	r2, [pc, #444]	; (8011f20 <HAL_SPI_Init+0x244>)
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d104      	bne.n	8011d72 <HAL_SPI_Init+0x96>
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2b10      	cmp	r3, #16
 8011d6c:	d901      	bls.n	8011d72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	e0cd      	b.n	8011f0e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d106      	bne.n	8011d8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7f1 ffa4 	bl	8003cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2202      	movs	r2, #2
 8011d90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f022 0201 	bic.w	r2, r2, #1
 8011da2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011dae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	699b      	ldr	r3, [r3, #24]
 8011db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011db8:	d119      	bne.n	8011dee <HAL_SPI_Init+0x112>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011dc2:	d103      	bne.n	8011dcc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d008      	beq.n	8011dde <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d10c      	bne.n	8011dee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011ddc:	d107      	bne.n	8011dee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011dec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d00f      	beq.n	8011e1a <HAL_SPI_Init+0x13e>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	2b06      	cmp	r3, #6
 8011e00:	d90b      	bls.n	8011e1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	430a      	orrs	r2, r1
 8011e16:	601a      	str	r2, [r3, #0]
 8011e18:	e007      	b.n	8011e2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011e28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	69da      	ldr	r2, [r3, #28]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e32:	431a      	orrs	r2, r3
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	431a      	orrs	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e3c:	ea42 0103 	orr.w	r1, r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68da      	ldr	r2, [r3, #12]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	430a      	orrs	r2, r1
 8011e4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e54:	431a      	orrs	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5a:	431a      	orrs	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	699b      	ldr	r3, [r3, #24]
 8011e60:	431a      	orrs	r2, r3
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	431a      	orrs	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	431a      	orrs	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a1b      	ldr	r3, [r3, #32]
 8011e72:	431a      	orrs	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	431a      	orrs	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e7e:	431a      	orrs	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	431a      	orrs	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e8a:	ea42 0103 	orr.w	r1, r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	430a      	orrs	r2, r1
 8011e98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d113      	bne.n	8011eca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011eb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	689b      	ldr	r3, [r3, #8]
 8011ebc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ec8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f022 0201 	bic.w	r2, r2, #1
 8011ed8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00a      	beq.n	8011efc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	430a      	orrs	r2, r1
 8011efa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2201      	movs	r2, #1
 8011f08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	40013000 	.word	0x40013000
 8011f1c:	40003800 	.word	0x40003800
 8011f20:	40003c00 	.word	0x40003c00

08011f24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f30:	095b      	lsrs	r3, r3, #5
 8011f32:	3301      	adds	r3, #1
 8011f34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	3307      	adds	r3, #7
 8011f42:	08db      	lsrs	r3, r3, #3
 8011f44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b082      	sub	sp, #8
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d101      	bne.n	8011f6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e049      	b.n	8012000 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7f2 fa3f 	bl	8004404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2202      	movs	r2, #2
 8011f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	3304      	adds	r3, #4
 8011f96:	4619      	mov	r1, r3
 8011f98:	4610      	mov	r0, r2
 8011f9a:	f000 fa99 	bl	80124d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2201      	movs	r2, #1
 8011faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	e049      	b.n	80120ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7f2 f9c6 	bl	80043c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2202      	movs	r2, #2
 8012038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	3304      	adds	r3, #4
 8012044:	4619      	mov	r1, r3
 8012046:	4610      	mov	r0, r2
 8012048:	f000 fa42 	bl	80124d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2201      	movs	r2, #1
 8012058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2201      	movs	r2, #1
 8012060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2201      	movs	r2, #1
 8012068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2201      	movs	r2, #1
 8012070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2201      	movs	r2, #1
 8012078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2201      	movs	r2, #1
 8012080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2201      	movs	r2, #1
 8012088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2201      	movs	r2, #1
 80120a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2201      	movs	r2, #1
 80120a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
	...

080120b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80120c4:	2300      	movs	r3, #0
 80120c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d101      	bne.n	80120d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80120d2:	2302      	movs	r3, #2
 80120d4:	e0ff      	b.n	80122d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2201      	movs	r2, #1
 80120da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b14      	cmp	r3, #20
 80120e2:	f200 80f0 	bhi.w	80122c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80120e6:	a201      	add	r2, pc, #4	; (adr r2, 80120ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80120e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ec:	08012141 	.word	0x08012141
 80120f0:	080122c7 	.word	0x080122c7
 80120f4:	080122c7 	.word	0x080122c7
 80120f8:	080122c7 	.word	0x080122c7
 80120fc:	08012181 	.word	0x08012181
 8012100:	080122c7 	.word	0x080122c7
 8012104:	080122c7 	.word	0x080122c7
 8012108:	080122c7 	.word	0x080122c7
 801210c:	080121c3 	.word	0x080121c3
 8012110:	080122c7 	.word	0x080122c7
 8012114:	080122c7 	.word	0x080122c7
 8012118:	080122c7 	.word	0x080122c7
 801211c:	08012203 	.word	0x08012203
 8012120:	080122c7 	.word	0x080122c7
 8012124:	080122c7 	.word	0x080122c7
 8012128:	080122c7 	.word	0x080122c7
 801212c:	08012245 	.word	0x08012245
 8012130:	080122c7 	.word	0x080122c7
 8012134:	080122c7 	.word	0x080122c7
 8012138:	080122c7 	.word	0x080122c7
 801213c:	08012285 	.word	0x08012285
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	68b9      	ldr	r1, [r7, #8]
 8012146:	4618      	mov	r0, r3
 8012148:	f000 fa5c 	bl	8012604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	699a      	ldr	r2, [r3, #24]
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f042 0208 	orr.w	r2, r2, #8
 801215a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	699a      	ldr	r2, [r3, #24]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f022 0204 	bic.w	r2, r2, #4
 801216a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6999      	ldr	r1, [r3, #24]
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	691a      	ldr	r2, [r3, #16]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	430a      	orrs	r2, r1
 801217c:	619a      	str	r2, [r3, #24]
      break;
 801217e:	e0a5      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	68b9      	ldr	r1, [r7, #8]
 8012186:	4618      	mov	r0, r3
 8012188:	f000 facc 	bl	8012724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	699a      	ldr	r2, [r3, #24]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801219a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	699a      	ldr	r2, [r3, #24]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80121aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6999      	ldr	r1, [r3, #24]
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	021a      	lsls	r2, r3, #8
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	430a      	orrs	r2, r1
 80121be:	619a      	str	r2, [r3, #24]
      break;
 80121c0:	e084      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 fb35 	bl	8012838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	69da      	ldr	r2, [r3, #28]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f042 0208 	orr.w	r2, r2, #8
 80121dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69da      	ldr	r2, [r3, #28]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f022 0204 	bic.w	r2, r2, #4
 80121ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	69d9      	ldr	r1, [r3, #28]
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	691a      	ldr	r2, [r3, #16]
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	430a      	orrs	r2, r1
 80121fe:	61da      	str	r2, [r3, #28]
      break;
 8012200:	e064      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	4618      	mov	r0, r3
 801220a:	f000 fb9d 	bl	8012948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	69da      	ldr	r2, [r3, #28]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801221c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	69da      	ldr	r2, [r3, #28]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801222c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	69d9      	ldr	r1, [r3, #28]
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	021a      	lsls	r2, r3, #8
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	430a      	orrs	r2, r1
 8012240:	61da      	str	r2, [r3, #28]
      break;
 8012242:	e043      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68b9      	ldr	r1, [r7, #8]
 801224a:	4618      	mov	r0, r3
 801224c:	f000 fbe6 	bl	8012a1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f042 0208 	orr.w	r2, r2, #8
 801225e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f022 0204 	bic.w	r2, r2, #4
 801226e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	691a      	ldr	r2, [r3, #16]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	430a      	orrs	r2, r1
 8012280:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012282:	e023      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	68b9      	ldr	r1, [r7, #8]
 801228a:	4618      	mov	r0, r3
 801228c:	f000 fc2a 	bl	8012ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801229e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80122ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	691b      	ldr	r3, [r3, #16]
 80122ba:	021a      	lsls	r2, r3, #8
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	430a      	orrs	r2, r1
 80122c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80122c4:	e002      	b.n	80122cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	75fb      	strb	r3, [r7, #23]
      break;
 80122ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80122d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop

080122e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80122ea:	2300      	movs	r3, #0
 80122ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d101      	bne.n	80122fc <HAL_TIM_ConfigClockSource+0x1c>
 80122f8:	2302      	movs	r3, #2
 80122fa:	e0dc      	b.n	80124b6 <HAL_TIM_ConfigClockSource+0x1d6>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2202      	movs	r2, #2
 8012308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	689b      	ldr	r3, [r3, #8]
 8012312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	4b6a      	ldr	r3, [pc, #424]	; (80124c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012318:	4013      	ands	r3, r2
 801231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68ba      	ldr	r2, [r7, #8]
 801232a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4a64      	ldr	r2, [pc, #400]	; (80124c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012332:	4293      	cmp	r3, r2
 8012334:	f000 80a9 	beq.w	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 8012338:	4a62      	ldr	r2, [pc, #392]	; (80124c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801233a:	4293      	cmp	r3, r2
 801233c:	f200 80ae 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 8012340:	4a61      	ldr	r2, [pc, #388]	; (80124c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012342:	4293      	cmp	r3, r2
 8012344:	f000 80a1 	beq.w	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 8012348:	4a5f      	ldr	r2, [pc, #380]	; (80124c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801234a:	4293      	cmp	r3, r2
 801234c:	f200 80a6 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 8012350:	4a5e      	ldr	r2, [pc, #376]	; (80124cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8012352:	4293      	cmp	r3, r2
 8012354:	f000 8099 	beq.w	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 8012358:	4a5c      	ldr	r2, [pc, #368]	; (80124cc <HAL_TIM_ConfigClockSource+0x1ec>)
 801235a:	4293      	cmp	r3, r2
 801235c:	f200 809e 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 8012360:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012364:	f000 8091 	beq.w	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 8012368:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801236c:	f200 8096 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 8012370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012374:	f000 8089 	beq.w	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 8012378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801237c:	f200 808e 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 8012380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012384:	d03e      	beq.n	8012404 <HAL_TIM_ConfigClockSource+0x124>
 8012386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801238a:	f200 8087 	bhi.w	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 801238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012392:	f000 8086 	beq.w	80124a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8012396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801239a:	d87f      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 801239c:	2b70      	cmp	r3, #112	; 0x70
 801239e:	d01a      	beq.n	80123d6 <HAL_TIM_ConfigClockSource+0xf6>
 80123a0:	2b70      	cmp	r3, #112	; 0x70
 80123a2:	d87b      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123a4:	2b60      	cmp	r3, #96	; 0x60
 80123a6:	d050      	beq.n	801244a <HAL_TIM_ConfigClockSource+0x16a>
 80123a8:	2b60      	cmp	r3, #96	; 0x60
 80123aa:	d877      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123ac:	2b50      	cmp	r3, #80	; 0x50
 80123ae:	d03c      	beq.n	801242a <HAL_TIM_ConfigClockSource+0x14a>
 80123b0:	2b50      	cmp	r3, #80	; 0x50
 80123b2:	d873      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123b4:	2b40      	cmp	r3, #64	; 0x40
 80123b6:	d058      	beq.n	801246a <HAL_TIM_ConfigClockSource+0x18a>
 80123b8:	2b40      	cmp	r3, #64	; 0x40
 80123ba:	d86f      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123bc:	2b30      	cmp	r3, #48	; 0x30
 80123be:	d064      	beq.n	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 80123c0:	2b30      	cmp	r3, #48	; 0x30
 80123c2:	d86b      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123c4:	2b20      	cmp	r3, #32
 80123c6:	d060      	beq.n	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 80123c8:	2b20      	cmp	r3, #32
 80123ca:	d867      	bhi.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d05c      	beq.n	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 80123d0:	2b10      	cmp	r3, #16
 80123d2:	d05a      	beq.n	801248a <HAL_TIM_ConfigClockSource+0x1aa>
 80123d4:	e062      	b.n	801249c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80123e6:	f000 fc61 	bl	8012cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80123f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68ba      	ldr	r2, [r7, #8]
 8012400:	609a      	str	r2, [r3, #8]
      break;
 8012402:	e04f      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012414:	f000 fc4a 	bl	8012cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	689a      	ldr	r2, [r3, #8]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012426:	609a      	str	r2, [r3, #8]
      break;
 8012428:	e03c      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012436:	461a      	mov	r2, r3
 8012438:	f000 fbba 	bl	8012bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2150      	movs	r1, #80	; 0x50
 8012442:	4618      	mov	r0, r3
 8012444:	f000 fc14 	bl	8012c70 <TIM_ITRx_SetConfig>
      break;
 8012448:	e02c      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012456:	461a      	mov	r2, r3
 8012458:	f000 fbd9 	bl	8012c0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2160      	movs	r1, #96	; 0x60
 8012462:	4618      	mov	r0, r3
 8012464:	f000 fc04 	bl	8012c70 <TIM_ITRx_SetConfig>
      break;
 8012468:	e01c      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012476:	461a      	mov	r2, r3
 8012478:	f000 fb9a 	bl	8012bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2140      	movs	r1, #64	; 0x40
 8012482:	4618      	mov	r0, r3
 8012484:	f000 fbf4 	bl	8012c70 <TIM_ITRx_SetConfig>
      break;
 8012488:	e00c      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	4619      	mov	r1, r3
 8012494:	4610      	mov	r0, r2
 8012496:	f000 fbeb 	bl	8012c70 <TIM_ITRx_SetConfig>
      break;
 801249a:	e003      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	73fb      	strb	r3, [r7, #15]
      break;
 80124a0:	e000      	b.n	80124a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80124a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2201      	movs	r2, #1
 80124a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2200      	movs	r2, #0
 80124b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80124b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	ffceff88 	.word	0xffceff88
 80124c4:	00100040 	.word	0x00100040
 80124c8:	00100030 	.word	0x00100030
 80124cc:	00100020 	.word	0x00100020

080124d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b085      	sub	sp, #20
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4a40      	ldr	r2, [pc, #256]	; (80125e4 <TIM_Base_SetConfig+0x114>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d013      	beq.n	8012510 <TIM_Base_SetConfig+0x40>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124ee:	d00f      	beq.n	8012510 <TIM_Base_SetConfig+0x40>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4a3d      	ldr	r2, [pc, #244]	; (80125e8 <TIM_Base_SetConfig+0x118>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d00b      	beq.n	8012510 <TIM_Base_SetConfig+0x40>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	4a3c      	ldr	r2, [pc, #240]	; (80125ec <TIM_Base_SetConfig+0x11c>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d007      	beq.n	8012510 <TIM_Base_SetConfig+0x40>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4a3b      	ldr	r2, [pc, #236]	; (80125f0 <TIM_Base_SetConfig+0x120>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d003      	beq.n	8012510 <TIM_Base_SetConfig+0x40>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	4a3a      	ldr	r2, [pc, #232]	; (80125f4 <TIM_Base_SetConfig+0x124>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d108      	bne.n	8012522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	4313      	orrs	r3, r2
 8012520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4a2f      	ldr	r2, [pc, #188]	; (80125e4 <TIM_Base_SetConfig+0x114>)
 8012526:	4293      	cmp	r3, r2
 8012528:	d01f      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012530:	d01b      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4a2c      	ldr	r2, [pc, #176]	; (80125e8 <TIM_Base_SetConfig+0x118>)
 8012536:	4293      	cmp	r3, r2
 8012538:	d017      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4a2b      	ldr	r2, [pc, #172]	; (80125ec <TIM_Base_SetConfig+0x11c>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d013      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4a2a      	ldr	r2, [pc, #168]	; (80125f0 <TIM_Base_SetConfig+0x120>)
 8012546:	4293      	cmp	r3, r2
 8012548:	d00f      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4a29      	ldr	r2, [pc, #164]	; (80125f4 <TIM_Base_SetConfig+0x124>)
 801254e:	4293      	cmp	r3, r2
 8012550:	d00b      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4a28      	ldr	r2, [pc, #160]	; (80125f8 <TIM_Base_SetConfig+0x128>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d007      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a27      	ldr	r2, [pc, #156]	; (80125fc <TIM_Base_SetConfig+0x12c>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d003      	beq.n	801256a <TIM_Base_SetConfig+0x9a>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4a26      	ldr	r2, [pc, #152]	; (8012600 <TIM_Base_SetConfig+0x130>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d108      	bne.n	801257c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	4313      	orrs	r3, r2
 801257a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	4313      	orrs	r3, r2
 8012588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	68fa      	ldr	r2, [r7, #12]
 801258e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	689a      	ldr	r2, [r3, #8]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a10      	ldr	r2, [pc, #64]	; (80125e4 <TIM_Base_SetConfig+0x114>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d00f      	beq.n	80125c8 <TIM_Base_SetConfig+0xf8>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4a12      	ldr	r2, [pc, #72]	; (80125f4 <TIM_Base_SetConfig+0x124>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d00b      	beq.n	80125c8 <TIM_Base_SetConfig+0xf8>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4a11      	ldr	r2, [pc, #68]	; (80125f8 <TIM_Base_SetConfig+0x128>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d007      	beq.n	80125c8 <TIM_Base_SetConfig+0xf8>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	4a10      	ldr	r2, [pc, #64]	; (80125fc <TIM_Base_SetConfig+0x12c>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d003      	beq.n	80125c8 <TIM_Base_SetConfig+0xf8>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	4a0f      	ldr	r2, [pc, #60]	; (8012600 <TIM_Base_SetConfig+0x130>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d103      	bne.n	80125d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	691a      	ldr	r2, [r3, #16]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2201      	movs	r2, #1
 80125d4:	615a      	str	r2, [r3, #20]
}
 80125d6:	bf00      	nop
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	40010000 	.word	0x40010000
 80125e8:	40000400 	.word	0x40000400
 80125ec:	40000800 	.word	0x40000800
 80125f0:	40000c00 	.word	0x40000c00
 80125f4:	40010400 	.word	0x40010400
 80125f8:	40014000 	.word	0x40014000
 80125fc:	40014400 	.word	0x40014400
 8012600:	40014800 	.word	0x40014800

08012604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012604:	b480      	push	{r7}
 8012606:	b087      	sub	sp, #28
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a1b      	ldr	r3, [r3, #32]
 8012612:	f023 0201 	bic.w	r2, r3, #1
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a1b      	ldr	r3, [r3, #32]
 801261e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	699b      	ldr	r3, [r3, #24]
 801262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	4b37      	ldr	r3, [pc, #220]	; (801270c <TIM_OC1_SetConfig+0x108>)
 8012630:	4013      	ands	r3, r2
 8012632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f023 0303 	bic.w	r3, r3, #3
 801263a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	4313      	orrs	r3, r2
 8012644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f023 0302 	bic.w	r3, r3, #2
 801264c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	697a      	ldr	r2, [r7, #20]
 8012654:	4313      	orrs	r3, r2
 8012656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4a2d      	ldr	r2, [pc, #180]	; (8012710 <TIM_OC1_SetConfig+0x10c>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d00f      	beq.n	8012680 <TIM_OC1_SetConfig+0x7c>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4a2c      	ldr	r2, [pc, #176]	; (8012714 <TIM_OC1_SetConfig+0x110>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d00b      	beq.n	8012680 <TIM_OC1_SetConfig+0x7c>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4a2b      	ldr	r2, [pc, #172]	; (8012718 <TIM_OC1_SetConfig+0x114>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d007      	beq.n	8012680 <TIM_OC1_SetConfig+0x7c>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4a2a      	ldr	r2, [pc, #168]	; (801271c <TIM_OC1_SetConfig+0x118>)
 8012674:	4293      	cmp	r3, r2
 8012676:	d003      	beq.n	8012680 <TIM_OC1_SetConfig+0x7c>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4a29      	ldr	r2, [pc, #164]	; (8012720 <TIM_OC1_SetConfig+0x11c>)
 801267c:	4293      	cmp	r3, r2
 801267e:	d10c      	bne.n	801269a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	f023 0308 	bic.w	r3, r3, #8
 8012686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	697a      	ldr	r2, [r7, #20]
 801268e:	4313      	orrs	r3, r2
 8012690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	f023 0304 	bic.w	r3, r3, #4
 8012698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4a1c      	ldr	r2, [pc, #112]	; (8012710 <TIM_OC1_SetConfig+0x10c>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d00f      	beq.n	80126c2 <TIM_OC1_SetConfig+0xbe>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	4a1b      	ldr	r2, [pc, #108]	; (8012714 <TIM_OC1_SetConfig+0x110>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d00b      	beq.n	80126c2 <TIM_OC1_SetConfig+0xbe>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4a1a      	ldr	r2, [pc, #104]	; (8012718 <TIM_OC1_SetConfig+0x114>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d007      	beq.n	80126c2 <TIM_OC1_SetConfig+0xbe>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a19      	ldr	r2, [pc, #100]	; (801271c <TIM_OC1_SetConfig+0x118>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d003      	beq.n	80126c2 <TIM_OC1_SetConfig+0xbe>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a18      	ldr	r2, [pc, #96]	; (8012720 <TIM_OC1_SetConfig+0x11c>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d111      	bne.n	80126e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80126d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	695b      	ldr	r3, [r3, #20]
 80126d6:	693a      	ldr	r2, [r7, #16]
 80126d8:	4313      	orrs	r3, r2
 80126da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	699b      	ldr	r3, [r3, #24]
 80126e0:	693a      	ldr	r2, [r7, #16]
 80126e2:	4313      	orrs	r3, r2
 80126e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	693a      	ldr	r2, [r7, #16]
 80126ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	697a      	ldr	r2, [r7, #20]
 80126fe:	621a      	str	r2, [r3, #32]
}
 8012700:	bf00      	nop
 8012702:	371c      	adds	r7, #28
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	fffeff8f 	.word	0xfffeff8f
 8012710:	40010000 	.word	0x40010000
 8012714:	40010400 	.word	0x40010400
 8012718:	40014000 	.word	0x40014000
 801271c:	40014400 	.word	0x40014400
 8012720:	40014800 	.word	0x40014800

08012724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012724:	b480      	push	{r7}
 8012726:	b087      	sub	sp, #28
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6a1b      	ldr	r3, [r3, #32]
 8012732:	f023 0210 	bic.w	r2, r3, #16
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6a1b      	ldr	r3, [r3, #32]
 801273e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	4b34      	ldr	r3, [pc, #208]	; (8012820 <TIM_OC2_SetConfig+0xfc>)
 8012750:	4013      	ands	r3, r2
 8012752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801275a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	021b      	lsls	r3, r3, #8
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	4313      	orrs	r3, r2
 8012766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	f023 0320 	bic.w	r3, r3, #32
 801276e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	011b      	lsls	r3, r3, #4
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	4313      	orrs	r3, r2
 801277a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	4a29      	ldr	r2, [pc, #164]	; (8012824 <TIM_OC2_SetConfig+0x100>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d003      	beq.n	801278c <TIM_OC2_SetConfig+0x68>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4a28      	ldr	r2, [pc, #160]	; (8012828 <TIM_OC2_SetConfig+0x104>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d10d      	bne.n	80127a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	011b      	lsls	r3, r3, #4
 801279a:	697a      	ldr	r2, [r7, #20]
 801279c:	4313      	orrs	r3, r2
 801279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	4a1e      	ldr	r2, [pc, #120]	; (8012824 <TIM_OC2_SetConfig+0x100>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d00f      	beq.n	80127d0 <TIM_OC2_SetConfig+0xac>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	4a1d      	ldr	r2, [pc, #116]	; (8012828 <TIM_OC2_SetConfig+0x104>)
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d00b      	beq.n	80127d0 <TIM_OC2_SetConfig+0xac>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4a1c      	ldr	r2, [pc, #112]	; (801282c <TIM_OC2_SetConfig+0x108>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d007      	beq.n	80127d0 <TIM_OC2_SetConfig+0xac>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	4a1b      	ldr	r2, [pc, #108]	; (8012830 <TIM_OC2_SetConfig+0x10c>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d003      	beq.n	80127d0 <TIM_OC2_SetConfig+0xac>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4a1a      	ldr	r2, [pc, #104]	; (8012834 <TIM_OC2_SetConfig+0x110>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d113      	bne.n	80127f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	695b      	ldr	r3, [r3, #20]
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	693a      	ldr	r2, [r7, #16]
 80127e8:	4313      	orrs	r3, r2
 80127ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	693a      	ldr	r2, [r7, #16]
 80127f4:	4313      	orrs	r3, r2
 80127f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	693a      	ldr	r2, [r7, #16]
 80127fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	685a      	ldr	r2, [r3, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	697a      	ldr	r2, [r7, #20]
 8012810:	621a      	str	r2, [r3, #32]
}
 8012812:	bf00      	nop
 8012814:	371c      	adds	r7, #28
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	feff8fff 	.word	0xfeff8fff
 8012824:	40010000 	.word	0x40010000
 8012828:	40010400 	.word	0x40010400
 801282c:	40014000 	.word	0x40014000
 8012830:	40014400 	.word	0x40014400
 8012834:	40014800 	.word	0x40014800

08012838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012838:	b480      	push	{r7}
 801283a:	b087      	sub	sp, #28
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6a1b      	ldr	r3, [r3, #32]
 8012846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6a1b      	ldr	r3, [r3, #32]
 8012852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	69db      	ldr	r3, [r3, #28]
 801285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	4b33      	ldr	r3, [pc, #204]	; (8012930 <TIM_OC3_SetConfig+0xf8>)
 8012864:	4013      	ands	r3, r2
 8012866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f023 0303 	bic.w	r3, r3, #3
 801286e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	68fa      	ldr	r2, [r7, #12]
 8012876:	4313      	orrs	r3, r2
 8012878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	689b      	ldr	r3, [r3, #8]
 8012886:	021b      	lsls	r3, r3, #8
 8012888:	697a      	ldr	r2, [r7, #20]
 801288a:	4313      	orrs	r3, r2
 801288c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4a28      	ldr	r2, [pc, #160]	; (8012934 <TIM_OC3_SetConfig+0xfc>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d003      	beq.n	801289e <TIM_OC3_SetConfig+0x66>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4a27      	ldr	r2, [pc, #156]	; (8012938 <TIM_OC3_SetConfig+0x100>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d10d      	bne.n	80128ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80128a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	021b      	lsls	r3, r3, #8
 80128ac:	697a      	ldr	r2, [r7, #20]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80128b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4a1d      	ldr	r2, [pc, #116]	; (8012934 <TIM_OC3_SetConfig+0xfc>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d00f      	beq.n	80128e2 <TIM_OC3_SetConfig+0xaa>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4a1c      	ldr	r2, [pc, #112]	; (8012938 <TIM_OC3_SetConfig+0x100>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d00b      	beq.n	80128e2 <TIM_OC3_SetConfig+0xaa>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	4a1b      	ldr	r2, [pc, #108]	; (801293c <TIM_OC3_SetConfig+0x104>)
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d007      	beq.n	80128e2 <TIM_OC3_SetConfig+0xaa>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4a1a      	ldr	r2, [pc, #104]	; (8012940 <TIM_OC3_SetConfig+0x108>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d003      	beq.n	80128e2 <TIM_OC3_SetConfig+0xaa>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4a19      	ldr	r2, [pc, #100]	; (8012944 <TIM_OC3_SetConfig+0x10c>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d113      	bne.n	801290a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80128f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	695b      	ldr	r3, [r3, #20]
 80128f6:	011b      	lsls	r3, r3, #4
 80128f8:	693a      	ldr	r2, [r7, #16]
 80128fa:	4313      	orrs	r3, r2
 80128fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	699b      	ldr	r3, [r3, #24]
 8012902:	011b      	lsls	r3, r3, #4
 8012904:	693a      	ldr	r2, [r7, #16]
 8012906:	4313      	orrs	r3, r2
 8012908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	685a      	ldr	r2, [r3, #4]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	697a      	ldr	r2, [r7, #20]
 8012922:	621a      	str	r2, [r3, #32]
}
 8012924:	bf00      	nop
 8012926:	371c      	adds	r7, #28
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr
 8012930:	fffeff8f 	.word	0xfffeff8f
 8012934:	40010000 	.word	0x40010000
 8012938:	40010400 	.word	0x40010400
 801293c:	40014000 	.word	0x40014000
 8012940:	40014400 	.word	0x40014400
 8012944:	40014800 	.word	0x40014800

08012948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012948:	b480      	push	{r7}
 801294a:	b087      	sub	sp, #28
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a1b      	ldr	r3, [r3, #32]
 8012962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	69db      	ldr	r3, [r3, #28]
 801296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	4b24      	ldr	r3, [pc, #144]	; (8012a04 <TIM_OC4_SetConfig+0xbc>)
 8012974:	4013      	ands	r3, r2
 8012976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801297e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	021b      	lsls	r3, r3, #8
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	4313      	orrs	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	031b      	lsls	r3, r3, #12
 801299a:	693a      	ldr	r2, [r7, #16]
 801299c:	4313      	orrs	r3, r2
 801299e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4a19      	ldr	r2, [pc, #100]	; (8012a08 <TIM_OC4_SetConfig+0xc0>)
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d00f      	beq.n	80129c8 <TIM_OC4_SetConfig+0x80>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4a18      	ldr	r2, [pc, #96]	; (8012a0c <TIM_OC4_SetConfig+0xc4>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d00b      	beq.n	80129c8 <TIM_OC4_SetConfig+0x80>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4a17      	ldr	r2, [pc, #92]	; (8012a10 <TIM_OC4_SetConfig+0xc8>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d007      	beq.n	80129c8 <TIM_OC4_SetConfig+0x80>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4a16      	ldr	r2, [pc, #88]	; (8012a14 <TIM_OC4_SetConfig+0xcc>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d003      	beq.n	80129c8 <TIM_OC4_SetConfig+0x80>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4a15      	ldr	r2, [pc, #84]	; (8012a18 <TIM_OC4_SetConfig+0xd0>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d109      	bne.n	80129dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80129ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	695b      	ldr	r3, [r3, #20]
 80129d4:	019b      	lsls	r3, r3, #6
 80129d6:	697a      	ldr	r2, [r7, #20]
 80129d8:	4313      	orrs	r3, r2
 80129da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	621a      	str	r2, [r3, #32]
}
 80129f6:	bf00      	nop
 80129f8:	371c      	adds	r7, #28
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	feff8fff 	.word	0xfeff8fff
 8012a08:	40010000 	.word	0x40010000
 8012a0c:	40010400 	.word	0x40010400
 8012a10:	40014000 	.word	0x40014000
 8012a14:	40014400 	.word	0x40014400
 8012a18:	40014800 	.word	0x40014800

08012a1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b087      	sub	sp, #28
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a1b      	ldr	r3, [r3, #32]
 8012a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6a1b      	ldr	r3, [r3, #32]
 8012a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012a44:	68fa      	ldr	r2, [r7, #12]
 8012a46:	4b21      	ldr	r3, [pc, #132]	; (8012acc <TIM_OC5_SetConfig+0xb0>)
 8012a48:	4013      	ands	r3, r2
 8012a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	4313      	orrs	r3, r2
 8012a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	041b      	lsls	r3, r3, #16
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	4313      	orrs	r3, r2
 8012a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	4a18      	ldr	r2, [pc, #96]	; (8012ad0 <TIM_OC5_SetConfig+0xb4>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d00f      	beq.n	8012a92 <TIM_OC5_SetConfig+0x76>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4a17      	ldr	r2, [pc, #92]	; (8012ad4 <TIM_OC5_SetConfig+0xb8>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d00b      	beq.n	8012a92 <TIM_OC5_SetConfig+0x76>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4a16      	ldr	r2, [pc, #88]	; (8012ad8 <TIM_OC5_SetConfig+0xbc>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d007      	beq.n	8012a92 <TIM_OC5_SetConfig+0x76>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4a15      	ldr	r2, [pc, #84]	; (8012adc <TIM_OC5_SetConfig+0xc0>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d003      	beq.n	8012a92 <TIM_OC5_SetConfig+0x76>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4a14      	ldr	r2, [pc, #80]	; (8012ae0 <TIM_OC5_SetConfig+0xc4>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d109      	bne.n	8012aa6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	695b      	ldr	r3, [r3, #20]
 8012a9e:	021b      	lsls	r3, r3, #8
 8012aa0:	697a      	ldr	r2, [r7, #20]
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	697a      	ldr	r2, [r7, #20]
 8012aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	685a      	ldr	r2, [r3, #4]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	621a      	str	r2, [r3, #32]
}
 8012ac0:	bf00      	nop
 8012ac2:	371c      	adds	r7, #28
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	fffeff8f 	.word	0xfffeff8f
 8012ad0:	40010000 	.word	0x40010000
 8012ad4:	40010400 	.word	0x40010400
 8012ad8:	40014000 	.word	0x40014000
 8012adc:	40014400 	.word	0x40014400
 8012ae0:	40014800 	.word	0x40014800

08012ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b087      	sub	sp, #28
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a1b      	ldr	r3, [r3, #32]
 8012af2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <TIM_OC6_SetConfig+0xb4>)
 8012b10:	4013      	ands	r3, r2
 8012b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	021b      	lsls	r3, r3, #8
 8012b1a:	68fa      	ldr	r2, [r7, #12]
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	051b      	lsls	r3, r3, #20
 8012b2e:	693a      	ldr	r2, [r7, #16]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4a19      	ldr	r2, [pc, #100]	; (8012b9c <TIM_OC6_SetConfig+0xb8>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d00f      	beq.n	8012b5c <TIM_OC6_SetConfig+0x78>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4a18      	ldr	r2, [pc, #96]	; (8012ba0 <TIM_OC6_SetConfig+0xbc>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d00b      	beq.n	8012b5c <TIM_OC6_SetConfig+0x78>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4a17      	ldr	r2, [pc, #92]	; (8012ba4 <TIM_OC6_SetConfig+0xc0>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d007      	beq.n	8012b5c <TIM_OC6_SetConfig+0x78>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4a16      	ldr	r2, [pc, #88]	; (8012ba8 <TIM_OC6_SetConfig+0xc4>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d003      	beq.n	8012b5c <TIM_OC6_SetConfig+0x78>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	4a15      	ldr	r2, [pc, #84]	; (8012bac <TIM_OC6_SetConfig+0xc8>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d109      	bne.n	8012b70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012b62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	695b      	ldr	r3, [r3, #20]
 8012b68:	029b      	lsls	r3, r3, #10
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	697a      	ldr	r2, [r7, #20]
 8012b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	685a      	ldr	r2, [r3, #4]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	693a      	ldr	r2, [r7, #16]
 8012b88:	621a      	str	r2, [r3, #32]
}
 8012b8a:	bf00      	nop
 8012b8c:	371c      	adds	r7, #28
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr
 8012b96:	bf00      	nop
 8012b98:	feff8fff 	.word	0xfeff8fff
 8012b9c:	40010000 	.word	0x40010000
 8012ba0:	40010400 	.word	0x40010400
 8012ba4:	40014000 	.word	0x40014000
 8012ba8:	40014400 	.word	0x40014400
 8012bac:	40014800 	.word	0x40014800

08012bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6a1b      	ldr	r3, [r3, #32]
 8012bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	f023 0201 	bic.w	r2, r3, #1
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	699b      	ldr	r3, [r3, #24]
 8012bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	011b      	lsls	r3, r3, #4
 8012be0:	693a      	ldr	r2, [r7, #16]
 8012be2:	4313      	orrs	r3, r2
 8012be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	f023 030a 	bic.w	r3, r3, #10
 8012bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012bee:	697a      	ldr	r2, [r7, #20]
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	621a      	str	r2, [r3, #32]
}
 8012c02:	bf00      	nop
 8012c04:	371c      	adds	r7, #28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012c0e:	b480      	push	{r7}
 8012c10:	b087      	sub	sp, #28
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	60f8      	str	r0, [r7, #12]
 8012c16:	60b9      	str	r1, [r7, #8]
 8012c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	6a1b      	ldr	r3, [r3, #32]
 8012c1e:	f023 0210 	bic.w	r2, r3, #16
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	699b      	ldr	r3, [r3, #24]
 8012c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	6a1b      	ldr	r3, [r3, #32]
 8012c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	031b      	lsls	r3, r3, #12
 8012c3e:	697a      	ldr	r2, [r7, #20]
 8012c40:	4313      	orrs	r3, r2
 8012c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	011b      	lsls	r3, r3, #4
 8012c50:	693a      	ldr	r2, [r7, #16]
 8012c52:	4313      	orrs	r3, r2
 8012c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	697a      	ldr	r2, [r7, #20]
 8012c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	693a      	ldr	r2, [r7, #16]
 8012c60:	621a      	str	r2, [r3, #32]
}
 8012c62:	bf00      	nop
 8012c64:	371c      	adds	r7, #28
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr
	...

08012c70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	4b09      	ldr	r3, [pc, #36]	; (8012ca8 <TIM_ITRx_SetConfig+0x38>)
 8012c84:	4013      	ands	r3, r2
 8012c86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012c88:	683a      	ldr	r2, [r7, #0]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	f043 0307 	orr.w	r3, r3, #7
 8012c92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	609a      	str	r2, [r3, #8]
}
 8012c9a:	bf00      	nop
 8012c9c:	3714      	adds	r7, #20
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop
 8012ca8:	ffcfff8f 	.word	0xffcfff8f

08012cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b087      	sub	sp, #28
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	021a      	lsls	r2, r3, #8
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	431a      	orrs	r2, r3
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	697a      	ldr	r2, [r7, #20]
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	609a      	str	r2, [r3, #8]
}
 8012ce0:	bf00      	nop
 8012ce2:	371c      	adds	r7, #28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d101      	bne.n	8012d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012d00:	2302      	movs	r3, #2
 8012d02:	e06d      	b.n	8012de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2202      	movs	r2, #2
 8012d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4a30      	ldr	r2, [pc, #192]	; (8012dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d004      	beq.n	8012d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4a2f      	ldr	r2, [pc, #188]	; (8012df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d108      	bne.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	68fa      	ldr	r2, [r7, #12]
 8012d46:	4313      	orrs	r3, r2
 8012d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4313      	orrs	r3, r2
 8012d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	68fa      	ldr	r2, [r7, #12]
 8012d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4a20      	ldr	r2, [pc, #128]	; (8012dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d022      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d76:	d01d      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a1d      	ldr	r2, [pc, #116]	; (8012df4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d018      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4a1c      	ldr	r2, [pc, #112]	; (8012df8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d013      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4a1a      	ldr	r2, [pc, #104]	; (8012dfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d00e      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a15      	ldr	r2, [pc, #84]	; (8012df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d009      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4a16      	ldr	r2, [pc, #88]	; (8012e00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d004      	beq.n	8012db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	4a15      	ldr	r2, [pc, #84]	; (8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d10c      	bne.n	8012dce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	68ba      	ldr	r2, [r7, #8]
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	68ba      	ldr	r2, [r7, #8]
 8012dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012dde:	2300      	movs	r3, #0
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr
 8012dec:	40010000 	.word	0x40010000
 8012df0:	40010400 	.word	0x40010400
 8012df4:	40000400 	.word	0x40000400
 8012df8:	40000800 	.word	0x40000800
 8012dfc:	40000c00 	.word	0x40000c00
 8012e00:	40001800 	.word	0x40001800
 8012e04:	40014000 	.word	0x40014000

08012e08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012e12:	2300      	movs	r3, #0
 8012e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d101      	bne.n	8012e24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012e20:	2302      	movs	r3, #2
 8012e22:	e065      	b.n	8012ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2201      	movs	r2, #1
 8012e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	4313      	orrs	r3, r2
 8012e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	4313      	orrs	r3, r2
 8012e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4313      	orrs	r3, r2
 8012e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	691b      	ldr	r3, [r3, #16]
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	695b      	ldr	r3, [r3, #20]
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e8a:	4313      	orrs	r3, r2
 8012e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	699b      	ldr	r3, [r3, #24]
 8012e98:	041b      	lsls	r3, r3, #16
 8012e9a:	4313      	orrs	r3, r2
 8012e9c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4a16      	ldr	r2, [pc, #88]	; (8012efc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d004      	beq.n	8012eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4a14      	ldr	r2, [pc, #80]	; (8012f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d115      	bne.n	8012ede <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ebc:	051b      	lsls	r3, r3, #20
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	69db      	ldr	r3, [r3, #28]
 8012ecc:	4313      	orrs	r3, r2
 8012ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	6a1b      	ldr	r3, [r3, #32]
 8012eda:	4313      	orrs	r3, r2
 8012edc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	68fa      	ldr	r2, [r7, #12]
 8012ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012eee:	2300      	movs	r3, #0
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3714      	adds	r7, #20
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	40010000 	.word	0x40010000
 8012f00:	40010400 	.word	0x40010400

08012f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d101      	bne.n	8012f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012f12:	2301      	movs	r3, #1
 8012f14:	e042      	b.n	8012f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d106      	bne.n	8012f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7f1 fb93 	bl	8004654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2224      	movs	r2, #36	; 0x24
 8012f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f022 0201 	bic.w	r2, r2, #1
 8012f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 f82c 	bl	8012fa4 <UART_SetConfig>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d101      	bne.n	8012f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012f52:	2301      	movs	r3, #1
 8012f54:	e022      	b.n	8012f9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d002      	beq.n	8012f64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 fd88 	bl	8013a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	685a      	ldr	r2, [r3, #4]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	689a      	ldr	r2, [r3, #8]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f042 0201 	orr.w	r2, r2, #1
 8012f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fe0f 	bl	8013bb8 <UART_CheckIdleState>
 8012f9a:	4603      	mov	r3, r0
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012fa8:	b092      	sub	sp, #72	; 0x48
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	689a      	ldr	r2, [r3, #8]
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	691b      	ldr	r3, [r3, #16]
 8012fbc:	431a      	orrs	r2, r3
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	695b      	ldr	r3, [r3, #20]
 8012fc2:	431a      	orrs	r2, r3
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	69db      	ldr	r3, [r3, #28]
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	4bbe      	ldr	r3, [pc, #760]	; (80132cc <UART_SetConfig+0x328>)
 8012fd4:	4013      	ands	r3, r2
 8012fd6:	697a      	ldr	r2, [r7, #20]
 8012fd8:	6812      	ldr	r2, [r2, #0]
 8012fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012fdc:	430b      	orrs	r3, r1
 8012fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	68da      	ldr	r2, [r3, #12]
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	430a      	orrs	r2, r1
 8012ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	699b      	ldr	r3, [r3, #24]
 8012ffa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4ab3      	ldr	r2, [pc, #716]	; (80132d0 <UART_SetConfig+0x32c>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d004      	beq.n	8013010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	6a1b      	ldr	r3, [r3, #32]
 801300a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801300c:	4313      	orrs	r3, r2
 801300e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	689a      	ldr	r2, [r3, #8]
 8013016:	4baf      	ldr	r3, [pc, #700]	; (80132d4 <UART_SetConfig+0x330>)
 8013018:	4013      	ands	r3, r2
 801301a:	697a      	ldr	r2, [r7, #20]
 801301c:	6812      	ldr	r2, [r2, #0]
 801301e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013020:	430b      	orrs	r3, r1
 8013022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801302a:	f023 010f 	bic.w	r1, r3, #15
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	430a      	orrs	r2, r1
 8013038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4aa6      	ldr	r2, [pc, #664]	; (80132d8 <UART_SetConfig+0x334>)
 8013040:	4293      	cmp	r3, r2
 8013042:	d177      	bne.n	8013134 <UART_SetConfig+0x190>
 8013044:	4ba5      	ldr	r3, [pc, #660]	; (80132dc <UART_SetConfig+0x338>)
 8013046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801304c:	2b28      	cmp	r3, #40	; 0x28
 801304e:	d86d      	bhi.n	801312c <UART_SetConfig+0x188>
 8013050:	a201      	add	r2, pc, #4	; (adr r2, 8013058 <UART_SetConfig+0xb4>)
 8013052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013056:	bf00      	nop
 8013058:	080130fd 	.word	0x080130fd
 801305c:	0801312d 	.word	0x0801312d
 8013060:	0801312d 	.word	0x0801312d
 8013064:	0801312d 	.word	0x0801312d
 8013068:	0801312d 	.word	0x0801312d
 801306c:	0801312d 	.word	0x0801312d
 8013070:	0801312d 	.word	0x0801312d
 8013074:	0801312d 	.word	0x0801312d
 8013078:	08013105 	.word	0x08013105
 801307c:	0801312d 	.word	0x0801312d
 8013080:	0801312d 	.word	0x0801312d
 8013084:	0801312d 	.word	0x0801312d
 8013088:	0801312d 	.word	0x0801312d
 801308c:	0801312d 	.word	0x0801312d
 8013090:	0801312d 	.word	0x0801312d
 8013094:	0801312d 	.word	0x0801312d
 8013098:	0801310d 	.word	0x0801310d
 801309c:	0801312d 	.word	0x0801312d
 80130a0:	0801312d 	.word	0x0801312d
 80130a4:	0801312d 	.word	0x0801312d
 80130a8:	0801312d 	.word	0x0801312d
 80130ac:	0801312d 	.word	0x0801312d
 80130b0:	0801312d 	.word	0x0801312d
 80130b4:	0801312d 	.word	0x0801312d
 80130b8:	08013115 	.word	0x08013115
 80130bc:	0801312d 	.word	0x0801312d
 80130c0:	0801312d 	.word	0x0801312d
 80130c4:	0801312d 	.word	0x0801312d
 80130c8:	0801312d 	.word	0x0801312d
 80130cc:	0801312d 	.word	0x0801312d
 80130d0:	0801312d 	.word	0x0801312d
 80130d4:	0801312d 	.word	0x0801312d
 80130d8:	0801311d 	.word	0x0801311d
 80130dc:	0801312d 	.word	0x0801312d
 80130e0:	0801312d 	.word	0x0801312d
 80130e4:	0801312d 	.word	0x0801312d
 80130e8:	0801312d 	.word	0x0801312d
 80130ec:	0801312d 	.word	0x0801312d
 80130f0:	0801312d 	.word	0x0801312d
 80130f4:	0801312d 	.word	0x0801312d
 80130f8:	08013125 	.word	0x08013125
 80130fc:	2301      	movs	r3, #1
 80130fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013102:	e222      	b.n	801354a <UART_SetConfig+0x5a6>
 8013104:	2304      	movs	r3, #4
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310a:	e21e      	b.n	801354a <UART_SetConfig+0x5a6>
 801310c:	2308      	movs	r3, #8
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013112:	e21a      	b.n	801354a <UART_SetConfig+0x5a6>
 8013114:	2310      	movs	r3, #16
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311a:	e216      	b.n	801354a <UART_SetConfig+0x5a6>
 801311c:	2320      	movs	r3, #32
 801311e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013122:	e212      	b.n	801354a <UART_SetConfig+0x5a6>
 8013124:	2340      	movs	r3, #64	; 0x40
 8013126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312a:	e20e      	b.n	801354a <UART_SetConfig+0x5a6>
 801312c:	2380      	movs	r3, #128	; 0x80
 801312e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013132:	e20a      	b.n	801354a <UART_SetConfig+0x5a6>
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a69      	ldr	r2, [pc, #420]	; (80132e0 <UART_SetConfig+0x33c>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d130      	bne.n	80131a0 <UART_SetConfig+0x1fc>
 801313e:	4b67      	ldr	r3, [pc, #412]	; (80132dc <UART_SetConfig+0x338>)
 8013140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013142:	f003 0307 	and.w	r3, r3, #7
 8013146:	2b05      	cmp	r3, #5
 8013148:	d826      	bhi.n	8013198 <UART_SetConfig+0x1f4>
 801314a:	a201      	add	r2, pc, #4	; (adr r2, 8013150 <UART_SetConfig+0x1ac>)
 801314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013150:	08013169 	.word	0x08013169
 8013154:	08013171 	.word	0x08013171
 8013158:	08013179 	.word	0x08013179
 801315c:	08013181 	.word	0x08013181
 8013160:	08013189 	.word	0x08013189
 8013164:	08013191 	.word	0x08013191
 8013168:	2300      	movs	r3, #0
 801316a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801316e:	e1ec      	b.n	801354a <UART_SetConfig+0x5a6>
 8013170:	2304      	movs	r3, #4
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013176:	e1e8      	b.n	801354a <UART_SetConfig+0x5a6>
 8013178:	2308      	movs	r3, #8
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317e:	e1e4      	b.n	801354a <UART_SetConfig+0x5a6>
 8013180:	2310      	movs	r3, #16
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e1e0      	b.n	801354a <UART_SetConfig+0x5a6>
 8013188:	2320      	movs	r3, #32
 801318a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318e:	e1dc      	b.n	801354a <UART_SetConfig+0x5a6>
 8013190:	2340      	movs	r3, #64	; 0x40
 8013192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013196:	e1d8      	b.n	801354a <UART_SetConfig+0x5a6>
 8013198:	2380      	movs	r3, #128	; 0x80
 801319a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319e:	e1d4      	b.n	801354a <UART_SetConfig+0x5a6>
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a4f      	ldr	r2, [pc, #316]	; (80132e4 <UART_SetConfig+0x340>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d130      	bne.n	801320c <UART_SetConfig+0x268>
 80131aa:	4b4c      	ldr	r3, [pc, #304]	; (80132dc <UART_SetConfig+0x338>)
 80131ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131ae:	f003 0307 	and.w	r3, r3, #7
 80131b2:	2b05      	cmp	r3, #5
 80131b4:	d826      	bhi.n	8013204 <UART_SetConfig+0x260>
 80131b6:	a201      	add	r2, pc, #4	; (adr r2, 80131bc <UART_SetConfig+0x218>)
 80131b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131bc:	080131d5 	.word	0x080131d5
 80131c0:	080131dd 	.word	0x080131dd
 80131c4:	080131e5 	.word	0x080131e5
 80131c8:	080131ed 	.word	0x080131ed
 80131cc:	080131f5 	.word	0x080131f5
 80131d0:	080131fd 	.word	0x080131fd
 80131d4:	2300      	movs	r3, #0
 80131d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131da:	e1b6      	b.n	801354a <UART_SetConfig+0x5a6>
 80131dc:	2304      	movs	r3, #4
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e2:	e1b2      	b.n	801354a <UART_SetConfig+0x5a6>
 80131e4:	2308      	movs	r3, #8
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ea:	e1ae      	b.n	801354a <UART_SetConfig+0x5a6>
 80131ec:	2310      	movs	r3, #16
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f2:	e1aa      	b.n	801354a <UART_SetConfig+0x5a6>
 80131f4:	2320      	movs	r3, #32
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fa:	e1a6      	b.n	801354a <UART_SetConfig+0x5a6>
 80131fc:	2340      	movs	r3, #64	; 0x40
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013202:	e1a2      	b.n	801354a <UART_SetConfig+0x5a6>
 8013204:	2380      	movs	r3, #128	; 0x80
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320a:	e19e      	b.n	801354a <UART_SetConfig+0x5a6>
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a35      	ldr	r2, [pc, #212]	; (80132e8 <UART_SetConfig+0x344>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d130      	bne.n	8013278 <UART_SetConfig+0x2d4>
 8013216:	4b31      	ldr	r3, [pc, #196]	; (80132dc <UART_SetConfig+0x338>)
 8013218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801321a:	f003 0307 	and.w	r3, r3, #7
 801321e:	2b05      	cmp	r3, #5
 8013220:	d826      	bhi.n	8013270 <UART_SetConfig+0x2cc>
 8013222:	a201      	add	r2, pc, #4	; (adr r2, 8013228 <UART_SetConfig+0x284>)
 8013224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013228:	08013241 	.word	0x08013241
 801322c:	08013249 	.word	0x08013249
 8013230:	08013251 	.word	0x08013251
 8013234:	08013259 	.word	0x08013259
 8013238:	08013261 	.word	0x08013261
 801323c:	08013269 	.word	0x08013269
 8013240:	2300      	movs	r3, #0
 8013242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013246:	e180      	b.n	801354a <UART_SetConfig+0x5a6>
 8013248:	2304      	movs	r3, #4
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324e:	e17c      	b.n	801354a <UART_SetConfig+0x5a6>
 8013250:	2308      	movs	r3, #8
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013256:	e178      	b.n	801354a <UART_SetConfig+0x5a6>
 8013258:	2310      	movs	r3, #16
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325e:	e174      	b.n	801354a <UART_SetConfig+0x5a6>
 8013260:	2320      	movs	r3, #32
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013266:	e170      	b.n	801354a <UART_SetConfig+0x5a6>
 8013268:	2340      	movs	r3, #64	; 0x40
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326e:	e16c      	b.n	801354a <UART_SetConfig+0x5a6>
 8013270:	2380      	movs	r3, #128	; 0x80
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013276:	e168      	b.n	801354a <UART_SetConfig+0x5a6>
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a1b      	ldr	r2, [pc, #108]	; (80132ec <UART_SetConfig+0x348>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d142      	bne.n	8013308 <UART_SetConfig+0x364>
 8013282:	4b16      	ldr	r3, [pc, #88]	; (80132dc <UART_SetConfig+0x338>)
 8013284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013286:	f003 0307 	and.w	r3, r3, #7
 801328a:	2b05      	cmp	r3, #5
 801328c:	d838      	bhi.n	8013300 <UART_SetConfig+0x35c>
 801328e:	a201      	add	r2, pc, #4	; (adr r2, 8013294 <UART_SetConfig+0x2f0>)
 8013290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013294:	080132ad 	.word	0x080132ad
 8013298:	080132b5 	.word	0x080132b5
 801329c:	080132bd 	.word	0x080132bd
 80132a0:	080132c5 	.word	0x080132c5
 80132a4:	080132f1 	.word	0x080132f1
 80132a8:	080132f9 	.word	0x080132f9
 80132ac:	2300      	movs	r3, #0
 80132ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132b2:	e14a      	b.n	801354a <UART_SetConfig+0x5a6>
 80132b4:	2304      	movs	r3, #4
 80132b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ba:	e146      	b.n	801354a <UART_SetConfig+0x5a6>
 80132bc:	2308      	movs	r3, #8
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132c2:	e142      	b.n	801354a <UART_SetConfig+0x5a6>
 80132c4:	2310      	movs	r3, #16
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ca:	e13e      	b.n	801354a <UART_SetConfig+0x5a6>
 80132cc:	cfff69f3 	.word	0xcfff69f3
 80132d0:	58000c00 	.word	0x58000c00
 80132d4:	11fff4ff 	.word	0x11fff4ff
 80132d8:	40011000 	.word	0x40011000
 80132dc:	58024400 	.word	0x58024400
 80132e0:	40004400 	.word	0x40004400
 80132e4:	40004800 	.word	0x40004800
 80132e8:	40004c00 	.word	0x40004c00
 80132ec:	40005000 	.word	0x40005000
 80132f0:	2320      	movs	r3, #32
 80132f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132f6:	e128      	b.n	801354a <UART_SetConfig+0x5a6>
 80132f8:	2340      	movs	r3, #64	; 0x40
 80132fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132fe:	e124      	b.n	801354a <UART_SetConfig+0x5a6>
 8013300:	2380      	movs	r3, #128	; 0x80
 8013302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013306:	e120      	b.n	801354a <UART_SetConfig+0x5a6>
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4acb      	ldr	r2, [pc, #812]	; (801363c <UART_SetConfig+0x698>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d176      	bne.n	8013400 <UART_SetConfig+0x45c>
 8013312:	4bcb      	ldr	r3, [pc, #812]	; (8013640 <UART_SetConfig+0x69c>)
 8013314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801331a:	2b28      	cmp	r3, #40	; 0x28
 801331c:	d86c      	bhi.n	80133f8 <UART_SetConfig+0x454>
 801331e:	a201      	add	r2, pc, #4	; (adr r2, 8013324 <UART_SetConfig+0x380>)
 8013320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013324:	080133c9 	.word	0x080133c9
 8013328:	080133f9 	.word	0x080133f9
 801332c:	080133f9 	.word	0x080133f9
 8013330:	080133f9 	.word	0x080133f9
 8013334:	080133f9 	.word	0x080133f9
 8013338:	080133f9 	.word	0x080133f9
 801333c:	080133f9 	.word	0x080133f9
 8013340:	080133f9 	.word	0x080133f9
 8013344:	080133d1 	.word	0x080133d1
 8013348:	080133f9 	.word	0x080133f9
 801334c:	080133f9 	.word	0x080133f9
 8013350:	080133f9 	.word	0x080133f9
 8013354:	080133f9 	.word	0x080133f9
 8013358:	080133f9 	.word	0x080133f9
 801335c:	080133f9 	.word	0x080133f9
 8013360:	080133f9 	.word	0x080133f9
 8013364:	080133d9 	.word	0x080133d9
 8013368:	080133f9 	.word	0x080133f9
 801336c:	080133f9 	.word	0x080133f9
 8013370:	080133f9 	.word	0x080133f9
 8013374:	080133f9 	.word	0x080133f9
 8013378:	080133f9 	.word	0x080133f9
 801337c:	080133f9 	.word	0x080133f9
 8013380:	080133f9 	.word	0x080133f9
 8013384:	080133e1 	.word	0x080133e1
 8013388:	080133f9 	.word	0x080133f9
 801338c:	080133f9 	.word	0x080133f9
 8013390:	080133f9 	.word	0x080133f9
 8013394:	080133f9 	.word	0x080133f9
 8013398:	080133f9 	.word	0x080133f9
 801339c:	080133f9 	.word	0x080133f9
 80133a0:	080133f9 	.word	0x080133f9
 80133a4:	080133e9 	.word	0x080133e9
 80133a8:	080133f9 	.word	0x080133f9
 80133ac:	080133f9 	.word	0x080133f9
 80133b0:	080133f9 	.word	0x080133f9
 80133b4:	080133f9 	.word	0x080133f9
 80133b8:	080133f9 	.word	0x080133f9
 80133bc:	080133f9 	.word	0x080133f9
 80133c0:	080133f9 	.word	0x080133f9
 80133c4:	080133f1 	.word	0x080133f1
 80133c8:	2301      	movs	r3, #1
 80133ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ce:	e0bc      	b.n	801354a <UART_SetConfig+0x5a6>
 80133d0:	2304      	movs	r3, #4
 80133d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133d6:	e0b8      	b.n	801354a <UART_SetConfig+0x5a6>
 80133d8:	2308      	movs	r3, #8
 80133da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133de:	e0b4      	b.n	801354a <UART_SetConfig+0x5a6>
 80133e0:	2310      	movs	r3, #16
 80133e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133e6:	e0b0      	b.n	801354a <UART_SetConfig+0x5a6>
 80133e8:	2320      	movs	r3, #32
 80133ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ee:	e0ac      	b.n	801354a <UART_SetConfig+0x5a6>
 80133f0:	2340      	movs	r3, #64	; 0x40
 80133f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133f6:	e0a8      	b.n	801354a <UART_SetConfig+0x5a6>
 80133f8:	2380      	movs	r3, #128	; 0x80
 80133fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133fe:	e0a4      	b.n	801354a <UART_SetConfig+0x5a6>
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a8f      	ldr	r2, [pc, #572]	; (8013644 <UART_SetConfig+0x6a0>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d130      	bne.n	801346c <UART_SetConfig+0x4c8>
 801340a:	4b8d      	ldr	r3, [pc, #564]	; (8013640 <UART_SetConfig+0x69c>)
 801340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801340e:	f003 0307 	and.w	r3, r3, #7
 8013412:	2b05      	cmp	r3, #5
 8013414:	d826      	bhi.n	8013464 <UART_SetConfig+0x4c0>
 8013416:	a201      	add	r2, pc, #4	; (adr r2, 801341c <UART_SetConfig+0x478>)
 8013418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801341c:	08013435 	.word	0x08013435
 8013420:	0801343d 	.word	0x0801343d
 8013424:	08013445 	.word	0x08013445
 8013428:	0801344d 	.word	0x0801344d
 801342c:	08013455 	.word	0x08013455
 8013430:	0801345d 	.word	0x0801345d
 8013434:	2300      	movs	r3, #0
 8013436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801343a:	e086      	b.n	801354a <UART_SetConfig+0x5a6>
 801343c:	2304      	movs	r3, #4
 801343e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013442:	e082      	b.n	801354a <UART_SetConfig+0x5a6>
 8013444:	2308      	movs	r3, #8
 8013446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801344a:	e07e      	b.n	801354a <UART_SetConfig+0x5a6>
 801344c:	2310      	movs	r3, #16
 801344e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013452:	e07a      	b.n	801354a <UART_SetConfig+0x5a6>
 8013454:	2320      	movs	r3, #32
 8013456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801345a:	e076      	b.n	801354a <UART_SetConfig+0x5a6>
 801345c:	2340      	movs	r3, #64	; 0x40
 801345e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013462:	e072      	b.n	801354a <UART_SetConfig+0x5a6>
 8013464:	2380      	movs	r3, #128	; 0x80
 8013466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801346a:	e06e      	b.n	801354a <UART_SetConfig+0x5a6>
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4a75      	ldr	r2, [pc, #468]	; (8013648 <UART_SetConfig+0x6a4>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d130      	bne.n	80134d8 <UART_SetConfig+0x534>
 8013476:	4b72      	ldr	r3, [pc, #456]	; (8013640 <UART_SetConfig+0x69c>)
 8013478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801347a:	f003 0307 	and.w	r3, r3, #7
 801347e:	2b05      	cmp	r3, #5
 8013480:	d826      	bhi.n	80134d0 <UART_SetConfig+0x52c>
 8013482:	a201      	add	r2, pc, #4	; (adr r2, 8013488 <UART_SetConfig+0x4e4>)
 8013484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013488:	080134a1 	.word	0x080134a1
 801348c:	080134a9 	.word	0x080134a9
 8013490:	080134b1 	.word	0x080134b1
 8013494:	080134b9 	.word	0x080134b9
 8013498:	080134c1 	.word	0x080134c1
 801349c:	080134c9 	.word	0x080134c9
 80134a0:	2300      	movs	r3, #0
 80134a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134a6:	e050      	b.n	801354a <UART_SetConfig+0x5a6>
 80134a8:	2304      	movs	r3, #4
 80134aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ae:	e04c      	b.n	801354a <UART_SetConfig+0x5a6>
 80134b0:	2308      	movs	r3, #8
 80134b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134b6:	e048      	b.n	801354a <UART_SetConfig+0x5a6>
 80134b8:	2310      	movs	r3, #16
 80134ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134be:	e044      	b.n	801354a <UART_SetConfig+0x5a6>
 80134c0:	2320      	movs	r3, #32
 80134c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134c6:	e040      	b.n	801354a <UART_SetConfig+0x5a6>
 80134c8:	2340      	movs	r3, #64	; 0x40
 80134ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ce:	e03c      	b.n	801354a <UART_SetConfig+0x5a6>
 80134d0:	2380      	movs	r3, #128	; 0x80
 80134d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134d6:	e038      	b.n	801354a <UART_SetConfig+0x5a6>
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	4a5b      	ldr	r2, [pc, #364]	; (801364c <UART_SetConfig+0x6a8>)
 80134de:	4293      	cmp	r3, r2
 80134e0:	d130      	bne.n	8013544 <UART_SetConfig+0x5a0>
 80134e2:	4b57      	ldr	r3, [pc, #348]	; (8013640 <UART_SetConfig+0x69c>)
 80134e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134e6:	f003 0307 	and.w	r3, r3, #7
 80134ea:	2b05      	cmp	r3, #5
 80134ec:	d826      	bhi.n	801353c <UART_SetConfig+0x598>
 80134ee:	a201      	add	r2, pc, #4	; (adr r2, 80134f4 <UART_SetConfig+0x550>)
 80134f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f4:	0801350d 	.word	0x0801350d
 80134f8:	08013515 	.word	0x08013515
 80134fc:	0801351d 	.word	0x0801351d
 8013500:	08013525 	.word	0x08013525
 8013504:	0801352d 	.word	0x0801352d
 8013508:	08013535 	.word	0x08013535
 801350c:	2302      	movs	r3, #2
 801350e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013512:	e01a      	b.n	801354a <UART_SetConfig+0x5a6>
 8013514:	2304      	movs	r3, #4
 8013516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801351a:	e016      	b.n	801354a <UART_SetConfig+0x5a6>
 801351c:	2308      	movs	r3, #8
 801351e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013522:	e012      	b.n	801354a <UART_SetConfig+0x5a6>
 8013524:	2310      	movs	r3, #16
 8013526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801352a:	e00e      	b.n	801354a <UART_SetConfig+0x5a6>
 801352c:	2320      	movs	r3, #32
 801352e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013532:	e00a      	b.n	801354a <UART_SetConfig+0x5a6>
 8013534:	2340      	movs	r3, #64	; 0x40
 8013536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801353a:	e006      	b.n	801354a <UART_SetConfig+0x5a6>
 801353c:	2380      	movs	r3, #128	; 0x80
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013542:	e002      	b.n	801354a <UART_SetConfig+0x5a6>
 8013544:	2380      	movs	r3, #128	; 0x80
 8013546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	4a3f      	ldr	r2, [pc, #252]	; (801364c <UART_SetConfig+0x6a8>)
 8013550:	4293      	cmp	r3, r2
 8013552:	f040 80f8 	bne.w	8013746 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013556:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801355a:	2b20      	cmp	r3, #32
 801355c:	dc46      	bgt.n	80135ec <UART_SetConfig+0x648>
 801355e:	2b02      	cmp	r3, #2
 8013560:	f2c0 8082 	blt.w	8013668 <UART_SetConfig+0x6c4>
 8013564:	3b02      	subs	r3, #2
 8013566:	2b1e      	cmp	r3, #30
 8013568:	d87e      	bhi.n	8013668 <UART_SetConfig+0x6c4>
 801356a:	a201      	add	r2, pc, #4	; (adr r2, 8013570 <UART_SetConfig+0x5cc>)
 801356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013570:	080135f3 	.word	0x080135f3
 8013574:	08013669 	.word	0x08013669
 8013578:	080135fb 	.word	0x080135fb
 801357c:	08013669 	.word	0x08013669
 8013580:	08013669 	.word	0x08013669
 8013584:	08013669 	.word	0x08013669
 8013588:	0801360b 	.word	0x0801360b
 801358c:	08013669 	.word	0x08013669
 8013590:	08013669 	.word	0x08013669
 8013594:	08013669 	.word	0x08013669
 8013598:	08013669 	.word	0x08013669
 801359c:	08013669 	.word	0x08013669
 80135a0:	08013669 	.word	0x08013669
 80135a4:	08013669 	.word	0x08013669
 80135a8:	0801361b 	.word	0x0801361b
 80135ac:	08013669 	.word	0x08013669
 80135b0:	08013669 	.word	0x08013669
 80135b4:	08013669 	.word	0x08013669
 80135b8:	08013669 	.word	0x08013669
 80135bc:	08013669 	.word	0x08013669
 80135c0:	08013669 	.word	0x08013669
 80135c4:	08013669 	.word	0x08013669
 80135c8:	08013669 	.word	0x08013669
 80135cc:	08013669 	.word	0x08013669
 80135d0:	08013669 	.word	0x08013669
 80135d4:	08013669 	.word	0x08013669
 80135d8:	08013669 	.word	0x08013669
 80135dc:	08013669 	.word	0x08013669
 80135e0:	08013669 	.word	0x08013669
 80135e4:	08013669 	.word	0x08013669
 80135e8:	0801365b 	.word	0x0801365b
 80135ec:	2b40      	cmp	r3, #64	; 0x40
 80135ee:	d037      	beq.n	8013660 <UART_SetConfig+0x6bc>
 80135f0:	e03a      	b.n	8013668 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80135f2:	f7fb fa85 	bl	800eb00 <HAL_RCCEx_GetD3PCLK1Freq>
 80135f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80135f8:	e03c      	b.n	8013674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fb fa94 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013608:	e034      	b.n	8013674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801360a:	f107 0318 	add.w	r3, r7, #24
 801360e:	4618      	mov	r0, r3
 8013610:	f7fb fbe0 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013618:	e02c      	b.n	8013674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801361a:	4b09      	ldr	r3, [pc, #36]	; (8013640 <UART_SetConfig+0x69c>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f003 0320 	and.w	r3, r3, #32
 8013622:	2b00      	cmp	r3, #0
 8013624:	d016      	beq.n	8013654 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013626:	4b06      	ldr	r3, [pc, #24]	; (8013640 <UART_SetConfig+0x69c>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	08db      	lsrs	r3, r3, #3
 801362c:	f003 0303 	and.w	r3, r3, #3
 8013630:	4a07      	ldr	r2, [pc, #28]	; (8013650 <UART_SetConfig+0x6ac>)
 8013632:	fa22 f303 	lsr.w	r3, r2, r3
 8013636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013638:	e01c      	b.n	8013674 <UART_SetConfig+0x6d0>
 801363a:	bf00      	nop
 801363c:	40011400 	.word	0x40011400
 8013640:	58024400 	.word	0x58024400
 8013644:	40007800 	.word	0x40007800
 8013648:	40007c00 	.word	0x40007c00
 801364c:	58000c00 	.word	0x58000c00
 8013650:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013654:	4b9d      	ldr	r3, [pc, #628]	; (80138cc <UART_SetConfig+0x928>)
 8013656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013658:	e00c      	b.n	8013674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801365a:	4b9d      	ldr	r3, [pc, #628]	; (80138d0 <UART_SetConfig+0x92c>)
 801365c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801365e:	e009      	b.n	8013674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013666:	e005      	b.n	8013674 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013668:	2300      	movs	r3, #0
 801366a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801366c:	2301      	movs	r3, #1
 801366e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 81de 	beq.w	8013a38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013680:	4a94      	ldr	r2, [pc, #592]	; (80138d4 <UART_SetConfig+0x930>)
 8013682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013686:	461a      	mov	r2, r3
 8013688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801368a:	fbb3 f3f2 	udiv	r3, r3, r2
 801368e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	685a      	ldr	r2, [r3, #4]
 8013694:	4613      	mov	r3, r2
 8013696:	005b      	lsls	r3, r3, #1
 8013698:	4413      	add	r3, r2
 801369a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801369c:	429a      	cmp	r2, r3
 801369e:	d305      	bcc.n	80136ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	685b      	ldr	r3, [r3, #4]
 80136a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d903      	bls.n	80136b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80136ac:	2301      	movs	r3, #1
 80136ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80136b2:	e1c1      	b.n	8013a38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b6:	2200      	movs	r2, #0
 80136b8:	60bb      	str	r3, [r7, #8]
 80136ba:	60fa      	str	r2, [r7, #12]
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c0:	4a84      	ldr	r2, [pc, #528]	; (80138d4 <UART_SetConfig+0x930>)
 80136c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	2200      	movs	r2, #0
 80136ca:	603b      	str	r3, [r7, #0]
 80136cc:	607a      	str	r2, [r7, #4]
 80136ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80136d6:	f7ec fdff 	bl	80002d8 <__aeabi_uldivmod>
 80136da:	4602      	mov	r2, r0
 80136dc:	460b      	mov	r3, r1
 80136de:	4610      	mov	r0, r2
 80136e0:	4619      	mov	r1, r3
 80136e2:	f04f 0200 	mov.w	r2, #0
 80136e6:	f04f 0300 	mov.w	r3, #0
 80136ea:	020b      	lsls	r3, r1, #8
 80136ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80136f0:	0202      	lsls	r2, r0, #8
 80136f2:	6979      	ldr	r1, [r7, #20]
 80136f4:	6849      	ldr	r1, [r1, #4]
 80136f6:	0849      	lsrs	r1, r1, #1
 80136f8:	2000      	movs	r0, #0
 80136fa:	460c      	mov	r4, r1
 80136fc:	4605      	mov	r5, r0
 80136fe:	eb12 0804 	adds.w	r8, r2, r4
 8013702:	eb43 0905 	adc.w	r9, r3, r5
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	469a      	mov	sl, r3
 801370e:	4693      	mov	fp, r2
 8013710:	4652      	mov	r2, sl
 8013712:	465b      	mov	r3, fp
 8013714:	4640      	mov	r0, r8
 8013716:	4649      	mov	r1, r9
 8013718:	f7ec fdde 	bl	80002d8 <__aeabi_uldivmod>
 801371c:	4602      	mov	r2, r0
 801371e:	460b      	mov	r3, r1
 8013720:	4613      	mov	r3, r2
 8013722:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801372a:	d308      	bcc.n	801373e <UART_SetConfig+0x79a>
 801372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013732:	d204      	bcs.n	801373e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801373a:	60da      	str	r2, [r3, #12]
 801373c:	e17c      	b.n	8013a38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801373e:	2301      	movs	r3, #1
 8013740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013744:	e178      	b.n	8013a38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	69db      	ldr	r3, [r3, #28]
 801374a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801374e:	f040 80c5 	bne.w	80138dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013756:	2b20      	cmp	r3, #32
 8013758:	dc48      	bgt.n	80137ec <UART_SetConfig+0x848>
 801375a:	2b00      	cmp	r3, #0
 801375c:	db7b      	blt.n	8013856 <UART_SetConfig+0x8b2>
 801375e:	2b20      	cmp	r3, #32
 8013760:	d879      	bhi.n	8013856 <UART_SetConfig+0x8b2>
 8013762:	a201      	add	r2, pc, #4	; (adr r2, 8013768 <UART_SetConfig+0x7c4>)
 8013764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013768:	080137f3 	.word	0x080137f3
 801376c:	080137fb 	.word	0x080137fb
 8013770:	08013857 	.word	0x08013857
 8013774:	08013857 	.word	0x08013857
 8013778:	08013803 	.word	0x08013803
 801377c:	08013857 	.word	0x08013857
 8013780:	08013857 	.word	0x08013857
 8013784:	08013857 	.word	0x08013857
 8013788:	08013813 	.word	0x08013813
 801378c:	08013857 	.word	0x08013857
 8013790:	08013857 	.word	0x08013857
 8013794:	08013857 	.word	0x08013857
 8013798:	08013857 	.word	0x08013857
 801379c:	08013857 	.word	0x08013857
 80137a0:	08013857 	.word	0x08013857
 80137a4:	08013857 	.word	0x08013857
 80137a8:	08013823 	.word	0x08013823
 80137ac:	08013857 	.word	0x08013857
 80137b0:	08013857 	.word	0x08013857
 80137b4:	08013857 	.word	0x08013857
 80137b8:	08013857 	.word	0x08013857
 80137bc:	08013857 	.word	0x08013857
 80137c0:	08013857 	.word	0x08013857
 80137c4:	08013857 	.word	0x08013857
 80137c8:	08013857 	.word	0x08013857
 80137cc:	08013857 	.word	0x08013857
 80137d0:	08013857 	.word	0x08013857
 80137d4:	08013857 	.word	0x08013857
 80137d8:	08013857 	.word	0x08013857
 80137dc:	08013857 	.word	0x08013857
 80137e0:	08013857 	.word	0x08013857
 80137e4:	08013857 	.word	0x08013857
 80137e8:	08013849 	.word	0x08013849
 80137ec:	2b40      	cmp	r3, #64	; 0x40
 80137ee:	d02e      	beq.n	801384e <UART_SetConfig+0x8aa>
 80137f0:	e031      	b.n	8013856 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80137f2:	f7f9 f9cf 	bl	800cb94 <HAL_RCC_GetPCLK1Freq>
 80137f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80137f8:	e033      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80137fa:	f7f9 f9e1 	bl	800cbc0 <HAL_RCC_GetPCLK2Freq>
 80137fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013800:	e02f      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013806:	4618      	mov	r0, r3
 8013808:	f7fb f990 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801380e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013810:	e027      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013812:	f107 0318 	add.w	r3, r7, #24
 8013816:	4618      	mov	r0, r3
 8013818:	f7fb fadc 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013820:	e01f      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013822:	4b2d      	ldr	r3, [pc, #180]	; (80138d8 <UART_SetConfig+0x934>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f003 0320 	and.w	r3, r3, #32
 801382a:	2b00      	cmp	r3, #0
 801382c:	d009      	beq.n	8013842 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801382e:	4b2a      	ldr	r3, [pc, #168]	; (80138d8 <UART_SetConfig+0x934>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	08db      	lsrs	r3, r3, #3
 8013834:	f003 0303 	and.w	r3, r3, #3
 8013838:	4a24      	ldr	r2, [pc, #144]	; (80138cc <UART_SetConfig+0x928>)
 801383a:	fa22 f303 	lsr.w	r3, r2, r3
 801383e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013840:	e00f      	b.n	8013862 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013842:	4b22      	ldr	r3, [pc, #136]	; (80138cc <UART_SetConfig+0x928>)
 8013844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013846:	e00c      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013848:	4b21      	ldr	r3, [pc, #132]	; (80138d0 <UART_SetConfig+0x92c>)
 801384a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801384c:	e009      	b.n	8013862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013854:	e005      	b.n	8013862 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013856:	2300      	movs	r3, #0
 8013858:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801385a:	2301      	movs	r3, #1
 801385c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013864:	2b00      	cmp	r3, #0
 8013866:	f000 80e7 	beq.w	8013a38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386e:	4a19      	ldr	r2, [pc, #100]	; (80138d4 <UART_SetConfig+0x930>)
 8013870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013874:	461a      	mov	r2, r3
 8013876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013878:	fbb3 f3f2 	udiv	r3, r3, r2
 801387c:	005a      	lsls	r2, r3, #1
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	085b      	lsrs	r3, r3, #1
 8013884:	441a      	add	r2, r3
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	fbb2 f3f3 	udiv	r3, r2, r3
 801388e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013892:	2b0f      	cmp	r3, #15
 8013894:	d916      	bls.n	80138c4 <UART_SetConfig+0x920>
 8013896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801389c:	d212      	bcs.n	80138c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	f023 030f 	bic.w	r3, r3, #15
 80138a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80138a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138aa:	085b      	lsrs	r3, r3, #1
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	f003 0307 	and.w	r3, r3, #7
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80138b6:	4313      	orrs	r3, r2
 80138b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80138c0:	60da      	str	r2, [r3, #12]
 80138c2:	e0b9      	b.n	8013a38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80138c4:	2301      	movs	r3, #1
 80138c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80138ca:	e0b5      	b.n	8013a38 <UART_SetConfig+0xa94>
 80138cc:	03d09000 	.word	0x03d09000
 80138d0:	003d0900 	.word	0x003d0900
 80138d4:	08018224 	.word	0x08018224
 80138d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80138dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80138e0:	2b20      	cmp	r3, #32
 80138e2:	dc49      	bgt.n	8013978 <UART_SetConfig+0x9d4>
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	db7c      	blt.n	80139e2 <UART_SetConfig+0xa3e>
 80138e8:	2b20      	cmp	r3, #32
 80138ea:	d87a      	bhi.n	80139e2 <UART_SetConfig+0xa3e>
 80138ec:	a201      	add	r2, pc, #4	; (adr r2, 80138f4 <UART_SetConfig+0x950>)
 80138ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138f2:	bf00      	nop
 80138f4:	0801397f 	.word	0x0801397f
 80138f8:	08013987 	.word	0x08013987
 80138fc:	080139e3 	.word	0x080139e3
 8013900:	080139e3 	.word	0x080139e3
 8013904:	0801398f 	.word	0x0801398f
 8013908:	080139e3 	.word	0x080139e3
 801390c:	080139e3 	.word	0x080139e3
 8013910:	080139e3 	.word	0x080139e3
 8013914:	0801399f 	.word	0x0801399f
 8013918:	080139e3 	.word	0x080139e3
 801391c:	080139e3 	.word	0x080139e3
 8013920:	080139e3 	.word	0x080139e3
 8013924:	080139e3 	.word	0x080139e3
 8013928:	080139e3 	.word	0x080139e3
 801392c:	080139e3 	.word	0x080139e3
 8013930:	080139e3 	.word	0x080139e3
 8013934:	080139af 	.word	0x080139af
 8013938:	080139e3 	.word	0x080139e3
 801393c:	080139e3 	.word	0x080139e3
 8013940:	080139e3 	.word	0x080139e3
 8013944:	080139e3 	.word	0x080139e3
 8013948:	080139e3 	.word	0x080139e3
 801394c:	080139e3 	.word	0x080139e3
 8013950:	080139e3 	.word	0x080139e3
 8013954:	080139e3 	.word	0x080139e3
 8013958:	080139e3 	.word	0x080139e3
 801395c:	080139e3 	.word	0x080139e3
 8013960:	080139e3 	.word	0x080139e3
 8013964:	080139e3 	.word	0x080139e3
 8013968:	080139e3 	.word	0x080139e3
 801396c:	080139e3 	.word	0x080139e3
 8013970:	080139e3 	.word	0x080139e3
 8013974:	080139d5 	.word	0x080139d5
 8013978:	2b40      	cmp	r3, #64	; 0x40
 801397a:	d02e      	beq.n	80139da <UART_SetConfig+0xa36>
 801397c:	e031      	b.n	80139e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801397e:	f7f9 f909 	bl	800cb94 <HAL_RCC_GetPCLK1Freq>
 8013982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013984:	e033      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013986:	f7f9 f91b 	bl	800cbc0 <HAL_RCC_GetPCLK2Freq>
 801398a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801398c:	e02f      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801398e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013992:	4618      	mov	r0, r3
 8013994:	f7fb f8ca 	bl	800eb2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801399c:	e027      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801399e:	f107 0318 	add.w	r3, r7, #24
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fb fa16 	bl	800edd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139ac:	e01f      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80139ae:	4b2d      	ldr	r3, [pc, #180]	; (8013a64 <UART_SetConfig+0xac0>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	f003 0320 	and.w	r3, r3, #32
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d009      	beq.n	80139ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80139ba:	4b2a      	ldr	r3, [pc, #168]	; (8013a64 <UART_SetConfig+0xac0>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	08db      	lsrs	r3, r3, #3
 80139c0:	f003 0303 	and.w	r3, r3, #3
 80139c4:	4a28      	ldr	r2, [pc, #160]	; (8013a68 <UART_SetConfig+0xac4>)
 80139c6:	fa22 f303 	lsr.w	r3, r2, r3
 80139ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80139cc:	e00f      	b.n	80139ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80139ce:	4b26      	ldr	r3, [pc, #152]	; (8013a68 <UART_SetConfig+0xac4>)
 80139d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139d2:	e00c      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80139d4:	4b25      	ldr	r3, [pc, #148]	; (8013a6c <UART_SetConfig+0xac8>)
 80139d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139d8:	e009      	b.n	80139ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80139da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80139de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139e0:	e005      	b.n	80139ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80139e2:	2300      	movs	r3, #0
 80139e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80139e6:	2301      	movs	r3, #1
 80139e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80139ec:	bf00      	nop
    }

    if (pclk != 0U)
 80139ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d021      	beq.n	8013a38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f8:	4a1d      	ldr	r2, [pc, #116]	; (8013a70 <UART_SetConfig+0xacc>)
 80139fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139fe:	461a      	mov	r2, r3
 8013a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	085b      	lsrs	r3, r3, #1
 8013a0c:	441a      	add	r2, r3
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1a:	2b0f      	cmp	r3, #15
 8013a1c:	d909      	bls.n	8013a32 <UART_SetConfig+0xa8e>
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a24:	d205      	bcs.n	8013a32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	60da      	str	r2, [r3, #12]
 8013a30:	e002      	b.n	8013a38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013a32:	2301      	movs	r3, #1
 8013a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	2201      	movs	r2, #1
 8013a44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	2200      	movs	r2, #0
 8013a52:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013a54:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3748      	adds	r7, #72	; 0x48
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013a62:	bf00      	nop
 8013a64:	58024400 	.word	0x58024400
 8013a68:	03d09000 	.word	0x03d09000
 8013a6c:	003d0900 	.word	0x003d0900
 8013a70:	08018224 	.word	0x08018224

08013a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a80:	f003 0301 	and.w	r3, r3, #1
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00a      	beq.n	8013a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	430a      	orrs	r2, r1
 8013a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aa2:	f003 0302 	and.w	r3, r3, #2
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d00a      	beq.n	8013ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	430a      	orrs	r2, r1
 8013abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ac4:	f003 0304 	and.w	r3, r3, #4
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	430a      	orrs	r2, r1
 8013ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae6:	f003 0308 	and.w	r3, r3, #8
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00a      	beq.n	8013b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	430a      	orrs	r2, r1
 8013b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b08:	f003 0310 	and.w	r3, r3, #16
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00a      	beq.n	8013b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	689b      	ldr	r3, [r3, #8]
 8013b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	430a      	orrs	r2, r1
 8013b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b2a:	f003 0320 	and.w	r3, r3, #32
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d00a      	beq.n	8013b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	430a      	orrs	r2, r1
 8013b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d01a      	beq.n	8013b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	430a      	orrs	r2, r1
 8013b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b72:	d10a      	bne.n	8013b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	430a      	orrs	r2, r1
 8013b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d00a      	beq.n	8013bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	430a      	orrs	r2, r1
 8013baa:	605a      	str	r2, [r3, #4]
  }
}
 8013bac:	bf00      	nop
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr

08013bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b098      	sub	sp, #96	; 0x60
 8013bbc:	af02      	add	r7, sp, #8
 8013bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013bc8:	f7f1 fc88 	bl	80054dc <HAL_GetTick>
 8013bcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f003 0308 	and.w	r3, r3, #8
 8013bd8:	2b08      	cmp	r3, #8
 8013bda:	d12f      	bne.n	8013c3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013be0:	9300      	str	r3, [sp, #0]
 8013be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013be4:	2200      	movs	r2, #0
 8013be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 f88e 	bl	8013d0c <UART_WaitOnFlagUntilTimeout>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d022      	beq.n	8013c3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfe:	e853 3f00 	ldrex	r3, [r3]
 8013c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	461a      	mov	r2, r3
 8013c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c14:	647b      	str	r3, [r7, #68]	; 0x44
 8013c16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c1c:	e841 2300 	strex	r3, r2, [r1]
 8013c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1e6      	bne.n	8013bf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2220      	movs	r2, #32
 8013c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c38:	2303      	movs	r3, #3
 8013c3a:	e063      	b.n	8013d04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	f003 0304 	and.w	r3, r3, #4
 8013c46:	2b04      	cmp	r3, #4
 8013c48:	d149      	bne.n	8013cde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013c4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c52:	2200      	movs	r2, #0
 8013c54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 f857 	bl	8013d0c <UART_WaitOnFlagUntilTimeout>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d03c      	beq.n	8013cde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6c:	e853 3f00 	ldrex	r3, [r3]
 8013c70:	623b      	str	r3, [r7, #32]
   return(result);
 8013c72:	6a3b      	ldr	r3, [r7, #32]
 8013c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	461a      	mov	r2, r3
 8013c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c82:	633b      	str	r3, [r7, #48]	; 0x30
 8013c84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c8a:	e841 2300 	strex	r3, r2, [r1]
 8013c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1e6      	bne.n	8013c64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	3308      	adds	r3, #8
 8013c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	e853 3f00 	ldrex	r3, [r3]
 8013ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f023 0301 	bic.w	r3, r3, #1
 8013cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cb6:	61fa      	str	r2, [r7, #28]
 8013cb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cba:	69b9      	ldr	r1, [r7, #24]
 8013cbc:	69fa      	ldr	r2, [r7, #28]
 8013cbe:	e841 2300 	strex	r3, r2, [r1]
 8013cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d1e5      	bne.n	8013c96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2220      	movs	r2, #32
 8013cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013cda:	2303      	movs	r3, #3
 8013cdc:	e012      	b.n	8013d04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2220      	movs	r2, #32
 8013ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2220      	movs	r2, #32
 8013cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013d02:	2300      	movs	r3, #0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3758      	adds	r7, #88	; 0x58
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	60f8      	str	r0, [r7, #12]
 8013d14:	60b9      	str	r1, [r7, #8]
 8013d16:	603b      	str	r3, [r7, #0]
 8013d18:	4613      	mov	r3, r2
 8013d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d1c:	e049      	b.n	8013db2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d24:	d045      	beq.n	8013db2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d26:	f7f1 fbd9 	bl	80054dc <HAL_GetTick>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	69ba      	ldr	r2, [r7, #24]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d302      	bcc.n	8013d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d101      	bne.n	8013d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	e048      	b.n	8013dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f003 0304 	and.w	r3, r3, #4
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d031      	beq.n	8013db2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	69db      	ldr	r3, [r3, #28]
 8013d54:	f003 0308 	and.w	r3, r3, #8
 8013d58:	2b08      	cmp	r3, #8
 8013d5a:	d110      	bne.n	8013d7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2208      	movs	r2, #8
 8013d62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	f000 f839 	bl	8013ddc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2208      	movs	r2, #8
 8013d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2200      	movs	r2, #0
 8013d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	e029      	b.n	8013dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	69db      	ldr	r3, [r3, #28]
 8013d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d8c:	d111      	bne.n	8013db2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013d98:	68f8      	ldr	r0, [r7, #12]
 8013d9a:	f000 f81f 	bl	8013ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2220      	movs	r2, #32
 8013da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013dae:	2303      	movs	r3, #3
 8013db0:	e00f      	b.n	8013dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	69da      	ldr	r2, [r3, #28]
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	4013      	ands	r3, r2
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	bf0c      	ite	eq
 8013dc2:	2301      	moveq	r3, #1
 8013dc4:	2300      	movne	r3, #0
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	461a      	mov	r2, r3
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d0a6      	beq.n	8013d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
	...

08013ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b095      	sub	sp, #84	; 0x54
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dec:	e853 3f00 	ldrex	r3, [r3]
 8013df0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	461a      	mov	r2, r3
 8013e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e02:	643b      	str	r3, [r7, #64]	; 0x40
 8013e04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e0a:	e841 2300 	strex	r3, r2, [r1]
 8013e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d1e6      	bne.n	8013de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	3308      	adds	r3, #8
 8013e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e1e:	6a3b      	ldr	r3, [r7, #32]
 8013e20:	e853 3f00 	ldrex	r3, [r3]
 8013e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e26:	69fa      	ldr	r2, [r7, #28]
 8013e28:	4b1e      	ldr	r3, [pc, #120]	; (8013ea4 <UART_EndRxTransfer+0xc8>)
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	3308      	adds	r3, #8
 8013e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e3e:	e841 2300 	strex	r3, r2, [r1]
 8013e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d1e5      	bne.n	8013e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e4e:	2b01      	cmp	r3, #1
 8013e50:	d118      	bne.n	8013e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	e853 3f00 	ldrex	r3, [r3]
 8013e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	f023 0310 	bic.w	r3, r3, #16
 8013e66:	647b      	str	r3, [r7, #68]	; 0x44
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e70:	61bb      	str	r3, [r7, #24]
 8013e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e74:	6979      	ldr	r1, [r7, #20]
 8013e76:	69ba      	ldr	r2, [r7, #24]
 8013e78:	e841 2300 	strex	r3, r2, [r1]
 8013e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1e6      	bne.n	8013e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2220      	movs	r2, #32
 8013e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013e98:	bf00      	nop
 8013e9a:	3754      	adds	r7, #84	; 0x54
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	effffffe 	.word	0xeffffffe

08013ea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	d101      	bne.n	8013ebe <HAL_UARTEx_DisableFifoMode+0x16>
 8013eba:	2302      	movs	r3, #2
 8013ebc:	e027      	b.n	8013f0e <HAL_UARTEx_DisableFifoMode+0x66>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2224      	movs	r2, #36	; 0x24
 8013eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	f022 0201 	bic.w	r2, r2, #1
 8013ee4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013eec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2220      	movs	r2, #32
 8013f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3714      	adds	r7, #20
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr

08013f1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f1a:	b580      	push	{r7, lr}
 8013f1c:	b084      	sub	sp, #16
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	6078      	str	r0, [r7, #4]
 8013f22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d101      	bne.n	8013f32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e02d      	b.n	8013f8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2201      	movs	r2, #1
 8013f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2224      	movs	r2, #36	; 0x24
 8013f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f022 0201 	bic.w	r2, r2, #1
 8013f58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	430a      	orrs	r2, r1
 8013f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f000 f850 	bl	8014014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2220      	movs	r2, #32
 8013f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f8c:	2300      	movs	r3, #0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}

08013f96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f96:	b580      	push	{r7, lr}
 8013f98:	b084      	sub	sp, #16
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
 8013f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d101      	bne.n	8013fae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013faa:	2302      	movs	r3, #2
 8013fac:	e02d      	b.n	801400a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2224      	movs	r2, #36	; 0x24
 8013fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f022 0201 	bic.w	r2, r2, #1
 8013fd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	683a      	ldr	r2, [r7, #0]
 8013fe6:	430a      	orrs	r2, r1
 8013fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f000 f812 	bl	8014014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	68fa      	ldr	r2, [r7, #12]
 8013ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2220      	movs	r2, #32
 8013ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2200      	movs	r2, #0
 8014004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014008:	2300      	movs	r3, #0
}
 801400a:	4618      	mov	r0, r3
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
	...

08014014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014014:	b480      	push	{r7}
 8014016:	b085      	sub	sp, #20
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014020:	2b00      	cmp	r3, #0
 8014022:	d108      	bne.n	8014036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2201      	movs	r2, #1
 8014028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2201      	movs	r2, #1
 8014030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014034:	e031      	b.n	801409a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014036:	2310      	movs	r3, #16
 8014038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801403a:	2310      	movs	r3, #16
 801403c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	689b      	ldr	r3, [r3, #8]
 8014044:	0e5b      	lsrs	r3, r3, #25
 8014046:	b2db      	uxtb	r3, r3
 8014048:	f003 0307 	and.w	r3, r3, #7
 801404c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	0f5b      	lsrs	r3, r3, #29
 8014056:	b2db      	uxtb	r3, r3
 8014058:	f003 0307 	and.w	r3, r3, #7
 801405c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801405e:	7bbb      	ldrb	r3, [r7, #14]
 8014060:	7b3a      	ldrb	r2, [r7, #12]
 8014062:	4911      	ldr	r1, [pc, #68]	; (80140a8 <UARTEx_SetNbDataToProcess+0x94>)
 8014064:	5c8a      	ldrb	r2, [r1, r2]
 8014066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801406a:	7b3a      	ldrb	r2, [r7, #12]
 801406c:	490f      	ldr	r1, [pc, #60]	; (80140ac <UARTEx_SetNbDataToProcess+0x98>)
 801406e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014070:	fb93 f3f2 	sdiv	r3, r3, r2
 8014074:	b29a      	uxth	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801407c:	7bfb      	ldrb	r3, [r7, #15]
 801407e:	7b7a      	ldrb	r2, [r7, #13]
 8014080:	4909      	ldr	r1, [pc, #36]	; (80140a8 <UARTEx_SetNbDataToProcess+0x94>)
 8014082:	5c8a      	ldrb	r2, [r1, r2]
 8014084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014088:	7b7a      	ldrb	r2, [r7, #13]
 801408a:	4908      	ldr	r1, [pc, #32]	; (80140ac <UARTEx_SetNbDataToProcess+0x98>)
 801408c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801408e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801409a:	bf00      	nop
 801409c:	3714      	adds	r7, #20
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	0801823c 	.word	0x0801823c
 80140ac:	08018244 	.word	0x08018244

080140b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d121      	bne.n	8014106 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	4b27      	ldr	r3, [pc, #156]	; (8014164 <FMC_SDRAM_Init+0xb4>)
 80140c8:	4013      	ands	r3, r2
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	6851      	ldr	r1, [r2, #4]
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	6892      	ldr	r2, [r2, #8]
 80140d2:	4311      	orrs	r1, r2
 80140d4:	683a      	ldr	r2, [r7, #0]
 80140d6:	68d2      	ldr	r2, [r2, #12]
 80140d8:	4311      	orrs	r1, r2
 80140da:	683a      	ldr	r2, [r7, #0]
 80140dc:	6912      	ldr	r2, [r2, #16]
 80140de:	4311      	orrs	r1, r2
 80140e0:	683a      	ldr	r2, [r7, #0]
 80140e2:	6952      	ldr	r2, [r2, #20]
 80140e4:	4311      	orrs	r1, r2
 80140e6:	683a      	ldr	r2, [r7, #0]
 80140e8:	6992      	ldr	r2, [r2, #24]
 80140ea:	4311      	orrs	r1, r2
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	69d2      	ldr	r2, [r2, #28]
 80140f0:	4311      	orrs	r1, r2
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	6a12      	ldr	r2, [r2, #32]
 80140f6:	4311      	orrs	r1, r2
 80140f8:	683a      	ldr	r2, [r7, #0]
 80140fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80140fc:	430a      	orrs	r2, r1
 80140fe:	431a      	orrs	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	e026      	b.n	8014154 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	69d9      	ldr	r1, [r3, #28]
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	6a1b      	ldr	r3, [r3, #32]
 8014116:	4319      	orrs	r1, r3
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411c:	430b      	orrs	r3, r1
 801411e:	431a      	orrs	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	685a      	ldr	r2, [r3, #4]
 8014128:	4b0e      	ldr	r3, [pc, #56]	; (8014164 <FMC_SDRAM_Init+0xb4>)
 801412a:	4013      	ands	r3, r2
 801412c:	683a      	ldr	r2, [r7, #0]
 801412e:	6851      	ldr	r1, [r2, #4]
 8014130:	683a      	ldr	r2, [r7, #0]
 8014132:	6892      	ldr	r2, [r2, #8]
 8014134:	4311      	orrs	r1, r2
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	68d2      	ldr	r2, [r2, #12]
 801413a:	4311      	orrs	r1, r2
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	6912      	ldr	r2, [r2, #16]
 8014140:	4311      	orrs	r1, r2
 8014142:	683a      	ldr	r2, [r7, #0]
 8014144:	6952      	ldr	r2, [r2, #20]
 8014146:	4311      	orrs	r1, r2
 8014148:	683a      	ldr	r2, [r7, #0]
 801414a:	6992      	ldr	r2, [r2, #24]
 801414c:	430a      	orrs	r2, r1
 801414e:	431a      	orrs	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8014154:	2300      	movs	r3, #0
}
 8014156:	4618      	mov	r0, r3
 8014158:	370c      	adds	r7, #12
 801415a:	46bd      	mov	sp, r7
 801415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop
 8014164:	ffff8000 	.word	0xffff8000

08014168 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014168:	b480      	push	{r7}
 801416a:	b085      	sub	sp, #20
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d128      	bne.n	80141cc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	689b      	ldr	r3, [r3, #8]
 801417e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	1e59      	subs	r1, r3, #1
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	3b01      	subs	r3, #1
 801418e:	011b      	lsls	r3, r3, #4
 8014190:	4319      	orrs	r1, r3
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	3b01      	subs	r3, #1
 8014198:	021b      	lsls	r3, r3, #8
 801419a:	4319      	orrs	r1, r3
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	68db      	ldr	r3, [r3, #12]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	031b      	lsls	r3, r3, #12
 80141a4:	4319      	orrs	r1, r3
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	3b01      	subs	r3, #1
 80141ac:	041b      	lsls	r3, r3, #16
 80141ae:	4319      	orrs	r1, r3
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	3b01      	subs	r3, #1
 80141b6:	051b      	lsls	r3, r3, #20
 80141b8:	4319      	orrs	r1, r3
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	699b      	ldr	r3, [r3, #24]
 80141be:	3b01      	subs	r3, #1
 80141c0:	061b      	lsls	r3, r3, #24
 80141c2:	430b      	orrs	r3, r1
 80141c4:	431a      	orrs	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	609a      	str	r2, [r3, #8]
 80141ca:	e02d      	b.n	8014228 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	689a      	ldr	r2, [r3, #8]
 80141d0:	4b19      	ldr	r3, [pc, #100]	; (8014238 <FMC_SDRAM_Timing_Init+0xd0>)
 80141d2:	4013      	ands	r3, r2
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	68d2      	ldr	r2, [r2, #12]
 80141d8:	3a01      	subs	r2, #1
 80141da:	0311      	lsls	r1, r2, #12
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	6952      	ldr	r2, [r2, #20]
 80141e0:	3a01      	subs	r2, #1
 80141e2:	0512      	lsls	r2, r2, #20
 80141e4:	430a      	orrs	r2, r1
 80141e6:	431a      	orrs	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	1e59      	subs	r1, r3, #1
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	3b01      	subs	r3, #1
 8014200:	011b      	lsls	r3, r3, #4
 8014202:	4319      	orrs	r1, r3
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	689b      	ldr	r3, [r3, #8]
 8014208:	3b01      	subs	r3, #1
 801420a:	021b      	lsls	r3, r3, #8
 801420c:	4319      	orrs	r1, r3
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	691b      	ldr	r3, [r3, #16]
 8014212:	3b01      	subs	r3, #1
 8014214:	041b      	lsls	r3, r3, #16
 8014216:	4319      	orrs	r1, r3
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	699b      	ldr	r3, [r3, #24]
 801421c:	3b01      	subs	r3, #1
 801421e:	061b      	lsls	r3, r3, #24
 8014220:	430b      	orrs	r3, r1
 8014222:	431a      	orrs	r2, r3
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8014228:	2300      	movs	r3, #0
}
 801422a:	4618      	mov	r0, r3
 801422c:	3714      	adds	r7, #20
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr
 8014236:	bf00      	nop
 8014238:	ff0f0fff 	.word	0xff0f0fff

0801423c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801423c:	b480      	push	{r7}
 801423e:	b085      	sub	sp, #20
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	691a      	ldr	r2, [r3, #16]
 801424c:	4b0c      	ldr	r3, [pc, #48]	; (8014280 <FMC_SDRAM_SendCommand+0x44>)
 801424e:	4013      	ands	r3, r2
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	6811      	ldr	r1, [r2, #0]
 8014254:	68ba      	ldr	r2, [r7, #8]
 8014256:	6852      	ldr	r2, [r2, #4]
 8014258:	4311      	orrs	r1, r2
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	6892      	ldr	r2, [r2, #8]
 801425e:	3a01      	subs	r2, #1
 8014260:	0152      	lsls	r2, r2, #5
 8014262:	4311      	orrs	r1, r2
 8014264:	68ba      	ldr	r2, [r7, #8]
 8014266:	68d2      	ldr	r2, [r2, #12]
 8014268:	0252      	lsls	r2, r2, #9
 801426a:	430a      	orrs	r2, r1
 801426c:	431a      	orrs	r2, r3
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3714      	adds	r7, #20
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr
 8014280:	ffc00000 	.word	0xffc00000

08014284 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	695a      	ldr	r2, [r3, #20]
 8014292:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014294:	4013      	ands	r3, r2
 8014296:	683a      	ldr	r2, [r7, #0]
 8014298:	0052      	lsls	r2, r2, #1
 801429a:	431a      	orrs	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	370c      	adds	r7, #12
 80142a6:	46bd      	mov	sp, r7
 80142a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ac:	4770      	bx	lr
 80142ae:	bf00      	nop
 80142b0:	ffffc001 	.word	0xffffc001

080142b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80142b4:	b084      	sub	sp, #16
 80142b6:	b480      	push	{r7}
 80142b8:	b085      	sub	sp, #20
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
 80142be:	f107 001c 	add.w	r0, r7, #28
 80142c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80142c6:	2300      	movs	r3, #0
 80142c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80142ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80142cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80142ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80142d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80142d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80142d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80142d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80142d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80142da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80142dc:	68fa      	ldr	r2, [r7, #12]
 80142de:	4313      	orrs	r3, r2
 80142e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685a      	ldr	r2, [r3, #4]
 80142e6:	4b07      	ldr	r3, [pc, #28]	; (8014304 <SDMMC_Init+0x50>)
 80142e8:	4013      	ands	r3, r2
 80142ea:	68fa      	ldr	r2, [r7, #12]
 80142ec:	431a      	orrs	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80142f2:	2300      	movs	r3, #0
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3714      	adds	r7, #20
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	b004      	add	sp, #16
 8014300:	4770      	bx	lr
 8014302:	bf00      	nop
 8014304:	ffc02c00 	.word	0xffc02c00

08014308 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8014316:	4618      	mov	r0, r3
 8014318:	370c      	adds	r7, #12
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr

08014322 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8014322:	b480      	push	{r7}
 8014324:	b083      	sub	sp, #12
 8014326:	af00      	add	r7, sp, #0
 8014328:	6078      	str	r0, [r7, #4]
 801432a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f043 0203 	orr.w	r2, r3, #3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8014358:	2300      	movs	r3, #0
}
 801435a:	4618      	mov	r0, r3
 801435c:	370c      	adds	r7, #12
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr

08014366 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8014366:	b480      	push	{r7}
 8014368:	b083      	sub	sp, #12
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f003 0303 	and.w	r3, r3, #3
}
 8014376:	4618      	mov	r0, r3
 8014378:	370c      	adds	r7, #12
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr
	...

08014384 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	681a      	ldr	r2, [r3, #0]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80143a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80143a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80143ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	4313      	orrs	r3, r2
 80143b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	68da      	ldr	r2, [r3, #12]
 80143ba:	4b06      	ldr	r3, [pc, #24]	; (80143d4 <SDMMC_SendCommand+0x50>)
 80143bc:	4013      	ands	r3, r2
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	431a      	orrs	r2, r3
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3714      	adds	r7, #20
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr
 80143d4:	fffee0c0 	.word	0xfffee0c0

080143d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	691b      	ldr	r3, [r3, #16]
 80143e4:	b2db      	uxtb	r3, r3
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	370c      	adds	r7, #12
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80143f2:	b480      	push	{r7}
 80143f4:	b085      	sub	sp, #20
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	3314      	adds	r3, #20
 8014400:	461a      	mov	r2, r3
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	4413      	add	r3, r2
 8014406:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
}
 801440c:	4618      	mov	r0, r3
 801440e:	3714      	adds	r7, #20
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014422:	2300      	movs	r3, #0
 8014424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	685a      	ldr	r2, [r3, #4]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801443e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8014444:	431a      	orrs	r2, r3
                       Data->DPSM);
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801444a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801444c:	68fa      	ldr	r2, [r7, #12]
 801444e:	4313      	orrs	r3, r2
 8014450:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014456:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	431a      	orrs	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8014462:	2300      	movs	r3, #0

}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b088      	sub	sp, #32
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801447e:	2310      	movs	r3, #16
 8014480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014488:	2300      	movs	r3, #0
 801448a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801448c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014492:	f107 0308 	add.w	r3, r7, #8
 8014496:	4619      	mov	r1, r3
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7ff ff73 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80144a2:	2110      	movs	r1, #16
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 fa5f 	bl	8014968 <SDMMC_GetCmdResp1>
 80144aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144ac:	69fb      	ldr	r3, [r7, #28]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3720      	adds	r7, #32
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b088      	sub	sp, #32
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80144c4:	2311      	movs	r3, #17
 80144c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ce:	2300      	movs	r3, #0
 80144d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144d8:	f107 0308 	add.w	r3, r7, #8
 80144dc:	4619      	mov	r1, r3
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f7ff ff50 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80144e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80144e8:	2111      	movs	r1, #17
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fa3c 	bl	8014968 <SDMMC_GetCmdResp1>
 80144f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144f2:	69fb      	ldr	r3, [r7, #28]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3720      	adds	r7, #32
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b088      	sub	sp, #32
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801450a:	2312      	movs	r3, #18
 801450c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801450e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014514:	2300      	movs	r3, #0
 8014516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801451c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801451e:	f107 0308 	add.w	r3, r7, #8
 8014522:	4619      	mov	r1, r3
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f7ff ff2d 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801452a:	f241 3288 	movw	r2, #5000	; 0x1388
 801452e:	2112      	movs	r1, #18
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 fa19 	bl	8014968 <SDMMC_GetCmdResp1>
 8014536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014538:	69fb      	ldr	r3, [r7, #28]
}
 801453a:	4618      	mov	r0, r3
 801453c:	3720      	adds	r7, #32
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}

08014542 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014542:	b580      	push	{r7, lr}
 8014544:	b088      	sub	sp, #32
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
 801454a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8014550:	2318      	movs	r3, #24
 8014552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801455a:	2300      	movs	r3, #0
 801455c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801455e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014564:	f107 0308 	add.w	r3, r7, #8
 8014568:	4619      	mov	r1, r3
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7ff ff0a 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014570:	f241 3288 	movw	r2, #5000	; 0x1388
 8014574:	2118      	movs	r1, #24
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 f9f6 	bl	8014968 <SDMMC_GetCmdResp1>
 801457c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801457e:	69fb      	ldr	r3, [r7, #28]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3720      	adds	r7, #32
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b088      	sub	sp, #32
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8014596:	2319      	movs	r3, #25
 8014598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801459a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801459e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145a0:	2300      	movs	r3, #0
 80145a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145aa:	f107 0308 	add.w	r3, r7, #8
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7ff fee7 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80145b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80145ba:	2119      	movs	r1, #25
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f000 f9d3 	bl	8014968 <SDMMC_GetCmdResp1>
 80145c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145c4:	69fb      	ldr	r3, [r7, #28]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3720      	adds	r7, #32
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
	...

080145d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80145d8:	2300      	movs	r3, #0
 80145da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80145dc:	230c      	movs	r3, #12
 80145de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80145e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80145e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145e6:	2300      	movs	r3, #0
 80145e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	68db      	ldr	r3, [r3, #12]
 80145f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014608:	f107 0308 	add.w	r3, r7, #8
 801460c:	4619      	mov	r1, r3
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7ff feb8 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8014614:	4a0b      	ldr	r2, [pc, #44]	; (8014644 <SDMMC_CmdStopTransfer+0x74>)
 8014616:	210c      	movs	r1, #12
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 f9a5 	bl	8014968 <SDMMC_GetCmdResp1>
 801461e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	68db      	ldr	r3, [r3, #12]
 8014624:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014632:	d101      	bne.n	8014638 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8014634:	2300      	movs	r3, #0
 8014636:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8014638:	69fb      	ldr	r3, [r7, #28]
}
 801463a:	4618      	mov	r0, r3
 801463c:	3720      	adds	r7, #32
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	05f5e100 	.word	0x05f5e100

08014648 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b088      	sub	sp, #32
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014656:	2307      	movs	r3, #7
 8014658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801465a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801465e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014660:	2300      	movs	r3, #0
 8014662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801466a:	f107 0308 	add.w	r3, r7, #8
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7ff fe87 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014676:	f241 3288 	movw	r2, #5000	; 0x1388
 801467a:	2107      	movs	r1, #7
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f000 f973 	bl	8014968 <SDMMC_GetCmdResp1>
 8014682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014684:	69fb      	ldr	r3, [r7, #28]
}
 8014686:	4618      	mov	r0, r3
 8014688:	3720      	adds	r7, #32
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b088      	sub	sp, #32
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014696:	2300      	movs	r3, #0
 8014698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801469a:	2300      	movs	r3, #0
 801469c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801469e:	2300      	movs	r3, #0
 80146a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146a2:	2300      	movs	r3, #0
 80146a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146ac:	f107 0308 	add.w	r3, r7, #8
 80146b0:	4619      	mov	r1, r3
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fe66 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 fb97 	bl	8014dec <SDMMC_GetCmdError>
 80146be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146c0:	69fb      	ldr	r3, [r7, #28]
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3720      	adds	r7, #32
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b088      	sub	sp, #32
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80146d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80146d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80146d8:	2308      	movs	r3, #8
 80146da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146e2:	2300      	movs	r3, #0
 80146e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146ec:	f107 0308 	add.w	r3, r7, #8
 80146f0:	4619      	mov	r1, r3
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff fe46 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 fb29 	bl	8014d50 <SDMMC_GetCmdResp7>
 80146fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014700:	69fb      	ldr	r3, [r7, #28]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3720      	adds	r7, #32
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801470a:	b580      	push	{r7, lr}
 801470c:	b088      	sub	sp, #32
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
 8014712:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014718:	2337      	movs	r3, #55	; 0x37
 801471a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801471c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014722:	2300      	movs	r3, #0
 8014724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801472a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801472c:	f107 0308 	add.w	r3, r7, #8
 8014730:	4619      	mov	r1, r3
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7ff fe26 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014738:	f241 3288 	movw	r2, #5000	; 0x1388
 801473c:	2137      	movs	r1, #55	; 0x37
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f912 	bl	8014968 <SDMMC_GetCmdResp1>
 8014744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014746:	69fb      	ldr	r3, [r7, #28]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3720      	adds	r7, #32
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b088      	sub	sp, #32
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801475e:	2329      	movs	r3, #41	; 0x29
 8014760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014768:	2300      	movs	r3, #0
 801476a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801476c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4619      	mov	r1, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7ff fe03 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f000 fa2e 	bl	8014be0 <SDMMC_GetCmdResp3>
 8014784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014786:	69fb      	ldr	r3, [r7, #28]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3720      	adds	r7, #32
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b088      	sub	sp, #32
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801479e:	2306      	movs	r3, #6
 80147a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80147a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80147a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147a8:	2300      	movs	r3, #0
 80147aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147b2:	f107 0308 	add.w	r3, r7, #8
 80147b6:	4619      	mov	r1, r3
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f7ff fde3 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80147be:	f241 3288 	movw	r2, #5000	; 0x1388
 80147c2:	2106      	movs	r1, #6
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 f8cf 	bl	8014968 <SDMMC_GetCmdResp1>
 80147ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147cc:	69fb      	ldr	r3, [r7, #28]
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3720      	adds	r7, #32
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80147d6:	b580      	push	{r7, lr}
 80147d8:	b088      	sub	sp, #32
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80147de:	2300      	movs	r3, #0
 80147e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80147e2:	2333      	movs	r3, #51	; 0x33
 80147e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80147e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80147ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147ec:	2300      	movs	r3, #0
 80147ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147f6:	f107 0308 	add.w	r3, r7, #8
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f7ff fdc1 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014802:	f241 3288 	movw	r2, #5000	; 0x1388
 8014806:	2133      	movs	r1, #51	; 0x33
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f8ad 	bl	8014968 <SDMMC_GetCmdResp1>
 801480e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014810:	69fb      	ldr	r3, [r7, #28]
}
 8014812:	4618      	mov	r0, r3
 8014814:	3720      	adds	r7, #32
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801481a:	b580      	push	{r7, lr}
 801481c:	b088      	sub	sp, #32
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014822:	2300      	movs	r3, #0
 8014824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8014826:	2302      	movs	r3, #2
 8014828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801482a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801482e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014830:	2300      	movs	r3, #0
 8014832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801483a:	f107 0308 	add.w	r3, r7, #8
 801483e:	4619      	mov	r1, r3
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f7ff fd9f 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 f980 	bl	8014b4c <SDMMC_GetCmdResp2>
 801484c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801484e:	69fb      	ldr	r3, [r7, #28]
}
 8014850:	4618      	mov	r0, r3
 8014852:	3720      	adds	r7, #32
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b088      	sub	sp, #32
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014866:	2309      	movs	r3, #9
 8014868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801486a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801486e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014870:	2300      	movs	r3, #0
 8014872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801487a:	f107 0308 	add.w	r3, r7, #8
 801487e:	4619      	mov	r1, r3
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f7ff fd7f 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f000 f960 	bl	8014b4c <SDMMC_GetCmdResp2>
 801488c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801488e:	69fb      	ldr	r3, [r7, #28]
}
 8014890:	4618      	mov	r0, r3
 8014892:	3720      	adds	r7, #32
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b088      	sub	sp, #32
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80148a2:	2300      	movs	r3, #0
 80148a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80148a6:	2303      	movs	r3, #3
 80148a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80148aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80148ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148b0:	2300      	movs	r3, #0
 80148b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80148b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148ba:	f107 0308 	add.w	r3, r7, #8
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff fd5f 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	2103      	movs	r1, #3
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f9c8 	bl	8014c60 <SDMMC_GetCmdResp6>
 80148d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148d2:	69fb      	ldr	r3, [r7, #28]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3720      	adds	r7, #32
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b088      	sub	sp, #32
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80148ea:	230d      	movs	r3, #13
 80148ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80148ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80148f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148f4:	2300      	movs	r3, #0
 80148f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80148fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148fe:	f107 0308 	add.w	r3, r7, #8
 8014902:	4619      	mov	r1, r3
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff fd3d 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801490a:	f241 3288 	movw	r2, #5000	; 0x1388
 801490e:	210d      	movs	r1, #13
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f000 f829 	bl	8014968 <SDMMC_GetCmdResp1>
 8014916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014918:	69fb      	ldr	r3, [r7, #28]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3720      	adds	r7, #32
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8014922:	b580      	push	{r7, lr}
 8014924:	b088      	sub	sp, #32
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801492a:	2300      	movs	r3, #0
 801492c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801492e:	230d      	movs	r3, #13
 8014930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014938:	2300      	movs	r3, #0
 801493a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801493c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014942:	f107 0308 	add.w	r3, r7, #8
 8014946:	4619      	mov	r1, r3
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff fd1b 	bl	8014384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014952:	210d      	movs	r1, #13
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f000 f807 	bl	8014968 <SDMMC_GetCmdResp1>
 801495a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801495c:	69fb      	ldr	r3, [r7, #28]
}
 801495e:	4618      	mov	r0, r3
 8014960:	3720      	adds	r7, #32
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
	...

08014968 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b088      	sub	sp, #32
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	460b      	mov	r3, r1
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8014976:	4b70      	ldr	r3, [pc, #448]	; (8014b38 <SDMMC_GetCmdResp1+0x1d0>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	4a70      	ldr	r2, [pc, #448]	; (8014b3c <SDMMC_GetCmdResp1+0x1d4>)
 801497c:	fba2 2303 	umull	r2, r3, r2, r3
 8014980:	0a5a      	lsrs	r2, r3, #9
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	fb02 f303 	mul.w	r3, r2, r3
 8014988:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	1e5a      	subs	r2, r3, #1
 801498e:	61fa      	str	r2, [r7, #28]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d102      	bne.n	801499a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014998:	e0c9      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801499e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80149a0:	69ba      	ldr	r2, [r7, #24]
 80149a2:	4b67      	ldr	r3, [pc, #412]	; (8014b40 <SDMMC_GetCmdResp1+0x1d8>)
 80149a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0ef      	beq.n	801498a <SDMMC_GetCmdResp1+0x22>
 80149aa:	69bb      	ldr	r3, [r7, #24]
 80149ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1ea      	bne.n	801498a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149b8:	f003 0304 	and.w	r3, r3, #4
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d004      	beq.n	80149ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2204      	movs	r2, #4
 80149c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149c6:	2304      	movs	r3, #4
 80149c8:	e0b1      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149ce:	f003 0301 	and.w	r3, r3, #1
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d004      	beq.n	80149e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2201      	movs	r2, #1
 80149da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80149dc:	2301      	movs	r3, #1
 80149de:	e0a6      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	4a58      	ldr	r2, [pc, #352]	; (8014b44 <SDMMC_GetCmdResp1+0x1dc>)
 80149e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f7ff fcf6 	bl	80143d8 <SDMMC_GetCommandResponse>
 80149ec:	4603      	mov	r3, r0
 80149ee:	461a      	mov	r2, r3
 80149f0:	7afb      	ldrb	r3, [r7, #11]
 80149f2:	4293      	cmp	r3, r2
 80149f4:	d001      	beq.n	80149fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80149f6:	2301      	movs	r3, #1
 80149f8:	e099      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80149fa:	2100      	movs	r1, #0
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f7ff fcf8 	bl	80143f2 <SDMMC_GetResponse>
 8014a02:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014a04:	697a      	ldr	r2, [r7, #20]
 8014a06:	4b50      	ldr	r3, [pc, #320]	; (8014b48 <SDMMC_GetCmdResp1+0x1e0>)
 8014a08:	4013      	ands	r3, r2
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e08d      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	da02      	bge.n	8014a1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014a1c:	e087      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014a28:	2340      	movs	r3, #64	; 0x40
 8014a2a:	e080      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d001      	beq.n	8014a3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014a36:	2380      	movs	r3, #128	; 0x80
 8014a38:	e079      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014a48:	e071      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a58:	e069      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d002      	beq.n	8014a6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a68:	e061      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d002      	beq.n	8014a7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a78:	e059      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d002      	beq.n	8014a8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014a88:	e051      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014a98:	e049      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014aa8:	e041      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014ab8:	e039      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014ac8:	e031      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d002      	beq.n	8014ada <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014ad8:	e029      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d002      	beq.n	8014aea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014ae8:	e021      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d002      	beq.n	8014afa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014af4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014af8:	e019      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014b08:	e011      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d002      	beq.n	8014b1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014b14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014b18:	e009      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	f003 0308 	and.w	r3, r3, #8
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d002      	beq.n	8014b2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014b24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014b28:	e001      	b.n	8014b2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3720      	adds	r7, #32
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	20000018 	.word	0x20000018
 8014b3c:	10624dd3 	.word	0x10624dd3
 8014b40:	00200045 	.word	0x00200045
 8014b44:	002000c5 	.word	0x002000c5
 8014b48:	fdffe008 	.word	0xfdffe008

08014b4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b085      	sub	sp, #20
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b54:	4b1f      	ldr	r3, [pc, #124]	; (8014bd4 <SDMMC_GetCmdResp2+0x88>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4a1f      	ldr	r2, [pc, #124]	; (8014bd8 <SDMMC_GetCmdResp2+0x8c>)
 8014b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8014b5e:	0a5b      	lsrs	r3, r3, #9
 8014b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b64:	fb02 f303 	mul.w	r3, r2, r3
 8014b68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	1e5a      	subs	r2, r3, #1
 8014b6e:	60fa      	str	r2, [r7, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d102      	bne.n	8014b7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b78:	e026      	b.n	8014bc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d0ef      	beq.n	8014b6a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d1ea      	bne.n	8014b6a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b98:	f003 0304 	and.w	r3, r3, #4
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d004      	beq.n	8014baa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2204      	movs	r2, #4
 8014ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ba6:	2304      	movs	r3, #4
 8014ba8:	e00e      	b.n	8014bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bae:	f003 0301 	and.w	r3, r3, #1
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d004      	beq.n	8014bc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2201      	movs	r2, #1
 8014bba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	e003      	b.n	8014bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4a06      	ldr	r2, [pc, #24]	; (8014bdc <SDMMC_GetCmdResp2+0x90>)
 8014bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014bc6:	2300      	movs	r3, #0
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3714      	adds	r7, #20
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd2:	4770      	bx	lr
 8014bd4:	20000018 	.word	0x20000018
 8014bd8:	10624dd3 	.word	0x10624dd3
 8014bdc:	002000c5 	.word	0x002000c5

08014be0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b085      	sub	sp, #20
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014be8:	4b1a      	ldr	r3, [pc, #104]	; (8014c54 <SDMMC_GetCmdResp3+0x74>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4a1a      	ldr	r2, [pc, #104]	; (8014c58 <SDMMC_GetCmdResp3+0x78>)
 8014bee:	fba2 2303 	umull	r2, r3, r2, r3
 8014bf2:	0a5b      	lsrs	r3, r3, #9
 8014bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bf8:	fb02 f303 	mul.w	r3, r2, r3
 8014bfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	1e5a      	subs	r2, r3, #1
 8014c02:	60fa      	str	r2, [r7, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d102      	bne.n	8014c0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c0c:	e01b      	b.n	8014c46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d0ef      	beq.n	8014bfe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d1ea      	bne.n	8014bfe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c2c:	f003 0304 	and.w	r3, r3, #4
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d004      	beq.n	8014c3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2204      	movs	r2, #4
 8014c38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c3a:	2304      	movs	r3, #4
 8014c3c:	e003      	b.n	8014c46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4a06      	ldr	r2, [pc, #24]	; (8014c5c <SDMMC_GetCmdResp3+0x7c>)
 8014c42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014c44:	2300      	movs	r3, #0
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3714      	adds	r7, #20
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	20000018 	.word	0x20000018
 8014c58:	10624dd3 	.word	0x10624dd3
 8014c5c:	002000c5 	.word	0x002000c5

08014c60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	460b      	mov	r3, r1
 8014c6a:	607a      	str	r2, [r7, #4]
 8014c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014c6e:	4b35      	ldr	r3, [pc, #212]	; (8014d44 <SDMMC_GetCmdResp6+0xe4>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	4a35      	ldr	r2, [pc, #212]	; (8014d48 <SDMMC_GetCmdResp6+0xe8>)
 8014c74:	fba2 2303 	umull	r2, r3, r2, r3
 8014c78:	0a5b      	lsrs	r3, r3, #9
 8014c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c7e:	fb02 f303 	mul.w	r3, r2, r3
 8014c82:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	1e5a      	subs	r2, r3, #1
 8014c88:	61fa      	str	r2, [r7, #28]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d102      	bne.n	8014c94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c92:	e052      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c98:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d0ef      	beq.n	8014c84 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d1ea      	bne.n	8014c84 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cb2:	f003 0304 	and.w	r3, r3, #4
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d004      	beq.n	8014cc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2204      	movs	r2, #4
 8014cbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014cc0:	2304      	movs	r3, #4
 8014cc2:	e03a      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cc8:	f003 0301 	and.w	r3, r3, #1
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d004      	beq.n	8014cda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	e02f      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f7ff fb7c 	bl	80143d8 <SDMMC_GetCommandResponse>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	7afb      	ldrb	r3, [r7, #11]
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	d001      	beq.n	8014cee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014cea:	2301      	movs	r3, #1
 8014cec:	e025      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	4a16      	ldr	r2, [pc, #88]	; (8014d4c <SDMMC_GetCmdResp6+0xec>)
 8014cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	f7ff fb7b 	bl	80143f2 <SDMMC_GetResponse>
 8014cfc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d106      	bne.n	8014d16 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	0c1b      	lsrs	r3, r3, #16
 8014d0c:	b29a      	uxth	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014d12:	2300      	movs	r3, #0
 8014d14:	e011      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d002      	beq.n	8014d26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014d24:	e009      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d002      	beq.n	8014d36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014d34:	e001      	b.n	8014d3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3720      	adds	r7, #32
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	20000018 	.word	0x20000018
 8014d48:	10624dd3 	.word	0x10624dd3
 8014d4c:	002000c5 	.word	0x002000c5

08014d50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b085      	sub	sp, #20
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014d58:	4b22      	ldr	r3, [pc, #136]	; (8014de4 <SDMMC_GetCmdResp7+0x94>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4a22      	ldr	r2, [pc, #136]	; (8014de8 <SDMMC_GetCmdResp7+0x98>)
 8014d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8014d62:	0a5b      	lsrs	r3, r3, #9
 8014d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d68:	fb02 f303 	mul.w	r3, r2, r3
 8014d6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	1e5a      	subs	r2, r3, #1
 8014d72:	60fa      	str	r2, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d102      	bne.n	8014d7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d7c:	e02c      	b.n	8014dd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d0ef      	beq.n	8014d6e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d1ea      	bne.n	8014d6e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d9c:	f003 0304 	and.w	r3, r3, #4
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d004      	beq.n	8014dae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2204      	movs	r2, #4
 8014da8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014daa:	2304      	movs	r3, #4
 8014dac:	e014      	b.n	8014dd8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014db2:	f003 0301 	and.w	r3, r3, #1
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d004      	beq.n	8014dc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e009      	b.n	8014dd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d002      	beq.n	8014dd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2240      	movs	r2, #64	; 0x40
 8014dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014dd6:	2300      	movs	r3, #0

}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3714      	adds	r7, #20
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr
 8014de4:	20000018 	.word	0x20000018
 8014de8:	10624dd3 	.word	0x10624dd3

08014dec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014df4:	4b11      	ldr	r3, [pc, #68]	; (8014e3c <SDMMC_GetCmdError+0x50>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4a11      	ldr	r2, [pc, #68]	; (8014e40 <SDMMC_GetCmdError+0x54>)
 8014dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8014dfe:	0a5b      	lsrs	r3, r3, #9
 8014e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e04:	fb02 f303 	mul.w	r3, r2, r3
 8014e08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	1e5a      	subs	r2, r3, #1
 8014e0e:	60fa      	str	r2, [r7, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d102      	bne.n	8014e1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014e14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e18:	e009      	b.n	8014e2e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d0f1      	beq.n	8014e0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4a06      	ldr	r2, [pc, #24]	; (8014e44 <SDMMC_GetCmdError+0x58>)
 8014e2a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014e2c:	2300      	movs	r3, #0
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	3714      	adds	r7, #20
 8014e32:	46bd      	mov	sp, r7
 8014e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop
 8014e3c:	20000018 	.word	0x20000018
 8014e40:	10624dd3 	.word	0x10624dd3
 8014e44:	002000c5 	.word	0x002000c5

08014e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014e48:	b084      	sub	sp, #16
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b084      	sub	sp, #16
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	6078      	str	r0, [r7, #4]
 8014e52:	f107 001c 	add.w	r0, r7, #28
 8014e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d120      	bne.n	8014ea2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	68da      	ldr	r2, [r3, #12]
 8014e70:	4b2a      	ldr	r3, [pc, #168]	; (8014f1c <USB_CoreInit+0xd4>)
 8014e72:	4013      	ands	r3, r2
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d105      	bne.n	8014e96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f000 f9ee 	bl	8015278 <USB_CoreReset>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73fb      	strb	r3, [r7, #15]
 8014ea0:	e01a      	b.n	8014ed8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f000 f9e2 	bl	8015278 <USB_CoreReset>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d106      	bne.n	8014ecc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8014eca:	e005      	b.n	8014ed8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d116      	bne.n	8014f0c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014eec:	4b0c      	ldr	r3, [pc, #48]	; (8014f20 <USB_CoreInit+0xd8>)
 8014eee:	4313      	orrs	r3, r2
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	689b      	ldr	r3, [r3, #8]
 8014ef8:	f043 0206 	orr.w	r2, r3, #6
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	689b      	ldr	r3, [r3, #8]
 8014f04:	f043 0220 	orr.w	r2, r3, #32
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3710      	adds	r7, #16
 8014f12:	46bd      	mov	sp, r7
 8014f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014f18:	b004      	add	sp, #16
 8014f1a:	4770      	bx	lr
 8014f1c:	ffbdffbf 	.word	0xffbdffbf
 8014f20:	03ee0000 	.word	0x03ee0000

08014f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	f043 0201 	orr.w	r2, r3, #1
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014f38:	2300      	movs	r3, #0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	370c      	adds	r7, #12
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr

08014f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014f46:	b480      	push	{r7}
 8014f48:	b083      	sub	sp, #12
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	f023 0201 	bic.w	r2, r3, #1
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	370c      	adds	r7, #12
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr

08014f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	460b      	mov	r3, r1
 8014f72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014f74:	2300      	movs	r3, #0
 8014f76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014f84:	78fb      	ldrb	r3, [r7, #3]
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d115      	bne.n	8014fb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014f96:	2001      	movs	r0, #1
 8014f98:	f7f0 faac 	bl	80054f4 <HAL_Delay>
      ms++;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 f95a 	bl	801525c <USB_GetMode>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b01      	cmp	r3, #1
 8014fac:	d01e      	beq.n	8014fec <USB_SetCurrentMode+0x84>
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2b31      	cmp	r3, #49	; 0x31
 8014fb2:	d9f0      	bls.n	8014f96 <USB_SetCurrentMode+0x2e>
 8014fb4:	e01a      	b.n	8014fec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014fb6:	78fb      	ldrb	r3, [r7, #3]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d115      	bne.n	8014fe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014fc8:	2001      	movs	r0, #1
 8014fca:	f7f0 fa93 	bl	80054f4 <HAL_Delay>
      ms++;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 f941 	bl	801525c <USB_GetMode>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d005      	beq.n	8014fec <USB_SetCurrentMode+0x84>
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2b31      	cmp	r3, #49	; 0x31
 8014fe4:	d9f0      	bls.n	8014fc8 <USB_SetCurrentMode+0x60>
 8014fe6:	e001      	b.n	8014fec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014fe8:	2301      	movs	r3, #1
 8014fea:	e005      	b.n	8014ff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	2b32      	cmp	r3, #50	; 0x32
 8014ff0:	d101      	bne.n	8014ff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	e000      	b.n	8014ff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014ff6:	2300      	movs	r3, #0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3710      	adds	r7, #16
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015000:	b480      	push	{r7}
 8015002:	b085      	sub	sp, #20
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801500a:	2300      	movs	r3, #0
 801500c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	3301      	adds	r3, #1
 8015012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	4a13      	ldr	r2, [pc, #76]	; (8015064 <USB_FlushTxFifo+0x64>)
 8015018:	4293      	cmp	r3, r2
 801501a:	d901      	bls.n	8015020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801501c:	2303      	movs	r3, #3
 801501e:	e01b      	b.n	8015058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	691b      	ldr	r3, [r3, #16]
 8015024:	2b00      	cmp	r3, #0
 8015026:	daf2      	bge.n	801500e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015028:	2300      	movs	r3, #0
 801502a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	019b      	lsls	r3, r3, #6
 8015030:	f043 0220 	orr.w	r2, r3, #32
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3301      	adds	r3, #1
 801503c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	4a08      	ldr	r2, [pc, #32]	; (8015064 <USB_FlushTxFifo+0x64>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d901      	bls.n	801504a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015046:	2303      	movs	r3, #3
 8015048:	e006      	b.n	8015058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	691b      	ldr	r3, [r3, #16]
 801504e:	f003 0320 	and.w	r3, r3, #32
 8015052:	2b20      	cmp	r3, #32
 8015054:	d0f0      	beq.n	8015038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015056:	2300      	movs	r3, #0
}
 8015058:	4618      	mov	r0, r3
 801505a:	3714      	adds	r7, #20
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	00030d40 	.word	0x00030d40

08015068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015068:	b480      	push	{r7}
 801506a:	b085      	sub	sp, #20
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015070:	2300      	movs	r3, #0
 8015072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	3301      	adds	r3, #1
 8015078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	4a11      	ldr	r2, [pc, #68]	; (80150c4 <USB_FlushRxFifo+0x5c>)
 801507e:	4293      	cmp	r3, r2
 8015080:	d901      	bls.n	8015086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015082:	2303      	movs	r3, #3
 8015084:	e018      	b.n	80150b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	691b      	ldr	r3, [r3, #16]
 801508a:	2b00      	cmp	r3, #0
 801508c:	daf2      	bge.n	8015074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801508e:	2300      	movs	r3, #0
 8015090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2210      	movs	r2, #16
 8015096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	3301      	adds	r3, #1
 801509c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	4a08      	ldr	r2, [pc, #32]	; (80150c4 <USB_FlushRxFifo+0x5c>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d901      	bls.n	80150aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80150a6:	2303      	movs	r3, #3
 80150a8:	e006      	b.n	80150b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	691b      	ldr	r3, [r3, #16]
 80150ae:	f003 0310 	and.w	r3, r3, #16
 80150b2:	2b10      	cmp	r3, #16
 80150b4:	d0f0      	beq.n	8015098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80150b6:	2300      	movs	r3, #0
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3714      	adds	r7, #20
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr
 80150c4:	00030d40 	.word	0x00030d40

080150c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80150c8:	b480      	push	{r7}
 80150ca:	b089      	sub	sp, #36	; 0x24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	4611      	mov	r1, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	460b      	mov	r3, r1
 80150d8:	71fb      	strb	r3, [r7, #7]
 80150da:	4613      	mov	r3, r2
 80150dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d123      	bne.n	8015136 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150ee:	88bb      	ldrh	r3, [r7, #4]
 80150f0:	3303      	adds	r3, #3
 80150f2:	089b      	lsrs	r3, r3, #2
 80150f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80150f6:	2300      	movs	r3, #0
 80150f8:	61bb      	str	r3, [r7, #24]
 80150fa:	e018      	b.n	801512e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80150fc:	79fb      	ldrb	r3, [r7, #7]
 80150fe:	031a      	lsls	r2, r3, #12
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	4413      	add	r3, r2
 8015104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015108:	461a      	mov	r2, r3
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	3301      	adds	r3, #1
 8015114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	3301      	adds	r3, #1
 801511a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	3301      	adds	r3, #1
 8015120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	3301      	adds	r3, #1
 8015126:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015128:	69bb      	ldr	r3, [r7, #24]
 801512a:	3301      	adds	r3, #1
 801512c:	61bb      	str	r3, [r7, #24]
 801512e:	69ba      	ldr	r2, [r7, #24]
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	429a      	cmp	r2, r3
 8015134:	d3e2      	bcc.n	80150fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3724      	adds	r7, #36	; 0x24
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr

08015144 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015144:	b480      	push	{r7}
 8015146:	b08b      	sub	sp, #44	; 0x2c
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	4613      	mov	r3, r2
 8015150:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801515a:	88fb      	ldrh	r3, [r7, #6]
 801515c:	089b      	lsrs	r3, r3, #2
 801515e:	b29b      	uxth	r3, r3
 8015160:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015162:	88fb      	ldrh	r3, [r7, #6]
 8015164:	f003 0303 	and.w	r3, r3, #3
 8015168:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801516a:	2300      	movs	r3, #0
 801516c:	623b      	str	r3, [r7, #32]
 801516e:	e014      	b.n	801519a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015170:	69bb      	ldr	r3, [r7, #24]
 8015172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517a:	601a      	str	r2, [r3, #0]
    pDest++;
 801517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517e:	3301      	adds	r3, #1
 8015180:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015184:	3301      	adds	r3, #1
 8015186:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	3301      	adds	r3, #1
 801518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015190:	3301      	adds	r3, #1
 8015192:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015194:	6a3b      	ldr	r3, [r7, #32]
 8015196:	3301      	adds	r3, #1
 8015198:	623b      	str	r3, [r7, #32]
 801519a:	6a3a      	ldr	r2, [r7, #32]
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d3e6      	bcc.n	8015170 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80151a2:	8bfb      	ldrh	r3, [r7, #30]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d01e      	beq.n	80151e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80151a8:	2300      	movs	r3, #0
 80151aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151b2:	461a      	mov	r2, r3
 80151b4:	f107 0310 	add.w	r3, r7, #16
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80151bc:	693a      	ldr	r2, [r7, #16]
 80151be:	6a3b      	ldr	r3, [r7, #32]
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	fa22 f303 	lsr.w	r3, r2, r3
 80151c8:	b2da      	uxtb	r2, r3
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	701a      	strb	r2, [r3, #0]
      i++;
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	3301      	adds	r3, #1
 80151d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80151d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d6:	3301      	adds	r3, #1
 80151d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80151da:	8bfb      	ldrh	r3, [r7, #30]
 80151dc:	3b01      	subs	r3, #1
 80151de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151e0:	8bfb      	ldrh	r3, [r7, #30]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1ea      	bne.n	80151bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	372c      	adds	r7, #44	; 0x2c
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr

080151f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b085      	sub	sp, #20
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	695b      	ldr	r3, [r3, #20]
 8015200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	699b      	ldr	r3, [r3, #24]
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	4013      	ands	r3, r2
 801520a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801520c:	68fb      	ldr	r3, [r7, #12]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3714      	adds	r7, #20
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr

0801521a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801521a:	b480      	push	{r7}
 801521c:	b085      	sub	sp, #20
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	460b      	mov	r3, r1
 8015224:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801522a:	78fb      	ldrb	r3, [r7, #3]
 801522c:	015a      	lsls	r2, r3, #5
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	4413      	add	r3, r2
 8015232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015236:	689b      	ldr	r3, [r3, #8]
 8015238:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801523a:	78fb      	ldrb	r3, [r7, #3]
 801523c:	015a      	lsls	r2, r3, #5
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	4413      	add	r3, r2
 8015242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015246:	68db      	ldr	r3, [r3, #12]
 8015248:	68ba      	ldr	r2, [r7, #8]
 801524a:	4013      	ands	r3, r2
 801524c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801524e:	68bb      	ldr	r3, [r7, #8]
}
 8015250:	4618      	mov	r0, r3
 8015252:	3714      	adds	r7, #20
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr

0801525c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801525c:	b480      	push	{r7}
 801525e:	b083      	sub	sp, #12
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	695b      	ldr	r3, [r3, #20]
 8015268:	f003 0301 	and.w	r3, r3, #1
}
 801526c:	4618      	mov	r0, r3
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr

08015278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015278:	b480      	push	{r7}
 801527a:	b085      	sub	sp, #20
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015280:	2300      	movs	r3, #0
 8015282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	3301      	adds	r3, #1
 8015288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	4a13      	ldr	r2, [pc, #76]	; (80152dc <USB_CoreReset+0x64>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d901      	bls.n	8015296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015292:	2303      	movs	r3, #3
 8015294:	e01b      	b.n	80152ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	691b      	ldr	r3, [r3, #16]
 801529a:	2b00      	cmp	r3, #0
 801529c:	daf2      	bge.n	8015284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801529e:	2300      	movs	r3, #0
 80152a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	691b      	ldr	r3, [r3, #16]
 80152a6:	f043 0201 	orr.w	r2, r3, #1
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	3301      	adds	r3, #1
 80152b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	4a09      	ldr	r2, [pc, #36]	; (80152dc <USB_CoreReset+0x64>)
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d901      	bls.n	80152c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80152bc:	2303      	movs	r3, #3
 80152be:	e006      	b.n	80152ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	f003 0301 	and.w	r3, r3, #1
 80152c8:	2b01      	cmp	r3, #1
 80152ca:	d0f0      	beq.n	80152ae <USB_CoreReset+0x36>

  return HAL_OK;
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	00030d40 	.word	0x00030d40

080152e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80152e0:	b084      	sub	sp, #16
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b086      	sub	sp, #24
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80152ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80152f2:	2300      	movs	r3, #0
 80152f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015300:	461a      	mov	r2, r3
 8015302:	2300      	movs	r3, #0
 8015304:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801530a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015316:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015326:	2b00      	cmp	r3, #0
 8015328:	d018      	beq.n	801535c <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532c:	2b01      	cmp	r3, #1
 801532e:	d10a      	bne.n	8015346 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801533e:	f043 0304 	orr.w	r3, r3, #4
 8015342:	6013      	str	r3, [r2, #0]
 8015344:	e014      	b.n	8015370 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015354:	f023 0304 	bic.w	r3, r3, #4
 8015358:	6013      	str	r3, [r2, #0]
 801535a:	e009      	b.n	8015370 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801536a:	f023 0304 	bic.w	r3, r3, #4
 801536e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015370:	2110      	movs	r1, #16
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff fe44 	bl	8015000 <USB_FlushTxFifo>
 8015378:	4603      	mov	r3, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	d001      	beq.n	8015382 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 801537e:	2301      	movs	r3, #1
 8015380:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f7ff fe70 	bl	8015068 <USB_FlushRxFifo>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	d001      	beq.n	8015392 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 801538e:	2301      	movs	r3, #1
 8015390:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8015392:	2300      	movs	r3, #0
 8015394:	613b      	str	r3, [r7, #16]
 8015396:	e015      	b.n	80153c4 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	015a      	lsls	r2, r3, #5
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	4413      	add	r3, r2
 80153a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153a4:	461a      	mov	r2, r3
 80153a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	015a      	lsls	r2, r3, #5
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4413      	add	r3, r2
 80153b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153b8:	461a      	mov	r2, r3
 80153ba:	2300      	movs	r3, #0
 80153bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	3301      	adds	r3, #1
 80153c2:	613b      	str	r3, [r7, #16]
 80153c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c6:	693a      	ldr	r2, [r7, #16]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d3e5      	bcc.n	8015398 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d00b      	beq.n	80153fe <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	4a13      	ldr	r2, [pc, #76]	; (8015440 <USB_HostInit+0x160>)
 80153f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	4a13      	ldr	r2, [pc, #76]	; (8015444 <USB_HostInit+0x164>)
 80153f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80153fc:	e009      	b.n	8015412 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2280      	movs	r2, #128	; 0x80
 8015402:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	4a10      	ldr	r2, [pc, #64]	; (8015448 <USB_HostInit+0x168>)
 8015408:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4a0f      	ldr	r2, [pc, #60]	; (801544c <USB_HostInit+0x16c>)
 801540e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015414:	2b00      	cmp	r3, #0
 8015416:	d105      	bne.n	8015424 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	699b      	ldr	r3, [r3, #24]
 801541c:	f043 0210 	orr.w	r2, r3, #16
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	699a      	ldr	r2, [r3, #24]
 8015428:	4b09      	ldr	r3, [pc, #36]	; (8015450 <USB_HostInit+0x170>)
 801542a:	4313      	orrs	r3, r2
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8015430:	7dfb      	ldrb	r3, [r7, #23]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801543c:	b004      	add	sp, #16
 801543e:	4770      	bx	lr
 8015440:	01000200 	.word	0x01000200
 8015444:	00e00300 	.word	0x00e00300
 8015448:	00600080 	.word	0x00600080
 801544c:	004000e0 	.word	0x004000e0
 8015450:	a3200008 	.word	0xa3200008

08015454 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8015454:	b480      	push	{r7}
 8015456:	b085      	sub	sp, #20
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	460b      	mov	r3, r1
 801545e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015472:	f023 0303 	bic.w	r3, r3, #3
 8015476:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	78fb      	ldrb	r3, [r7, #3]
 8015482:	f003 0303 	and.w	r3, r3, #3
 8015486:	68f9      	ldr	r1, [r7, #12]
 8015488:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801548c:	4313      	orrs	r3, r2
 801548e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8015490:	78fb      	ldrb	r3, [r7, #3]
 8015492:	2b01      	cmp	r3, #1
 8015494:	d107      	bne.n	80154a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801549c:	461a      	mov	r2, r3
 801549e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80154a2:	6053      	str	r3, [r2, #4]
 80154a4:	e00c      	b.n	80154c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80154a6:	78fb      	ldrb	r3, [r7, #3]
 80154a8:	2b02      	cmp	r3, #2
 80154aa:	d107      	bne.n	80154bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80154b2:	461a      	mov	r2, r3
 80154b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80154b8:	6053      	str	r3, [r2, #4]
 80154ba:	e001      	b.n	80154c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80154bc:	2301      	movs	r3, #1
 80154be:	e000      	b.n	80154c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80154c0:	2300      	movs	r3, #0
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3714      	adds	r7, #20
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr

080154ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b084      	sub	sp, #16
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80154da:	2300      	movs	r3, #0
 80154dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80154ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	68fa      	ldr	r2, [r7, #12]
 80154f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80154f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80154fe:	2064      	movs	r0, #100	; 0x64
 8015500:	f7ef fff8 	bl	80054f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	68fa      	ldr	r2, [r7, #12]
 8015508:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015510:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8015512:	200a      	movs	r0, #10
 8015514:	f7ef ffee 	bl	80054f4 <HAL_Delay>

  return HAL_OK;
 8015518:	2300      	movs	r3, #0
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8015522:	b480      	push	{r7}
 8015524:	b085      	sub	sp, #20
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8015532:	2300      	movs	r3, #0
 8015534:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015546:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801554e:	2b00      	cmp	r3, #0
 8015550:	d109      	bne.n	8015566 <USB_DriveVbus+0x44>
 8015552:	78fb      	ldrb	r3, [r7, #3]
 8015554:	2b01      	cmp	r3, #1
 8015556:	d106      	bne.n	8015566 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	68fa      	ldr	r2, [r7, #12]
 801555c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015564:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801556c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015570:	d109      	bne.n	8015586 <USB_DriveVbus+0x64>
 8015572:	78fb      	ldrb	r3, [r7, #3]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d106      	bne.n	8015586 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015584:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	3714      	adds	r7, #20
 801558c:	46bd      	mov	sp, r7
 801558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015592:	4770      	bx	lr

08015594 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80155a0:	2300      	movs	r3, #0
 80155a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	0c5b      	lsrs	r3, r3, #17
 80155b2:	f003 0303 	and.w	r3, r3, #3
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3714      	adds	r7, #20
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr

080155c2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80155c2:	b480      	push	{r7}
 80155c4:	b085      	sub	sp, #20
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	b29b      	uxth	r3, r3
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3714      	adds	r7, #20
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr

080155e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b088      	sub	sp, #32
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	4608      	mov	r0, r1
 80155ee:	4611      	mov	r1, r2
 80155f0:	461a      	mov	r2, r3
 80155f2:	4603      	mov	r3, r0
 80155f4:	70fb      	strb	r3, [r7, #3]
 80155f6:	460b      	mov	r3, r1
 80155f8:	70bb      	strb	r3, [r7, #2]
 80155fa:	4613      	mov	r3, r2
 80155fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80155fe:	2300      	movs	r3, #0
 8015600:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8015606:	78fb      	ldrb	r3, [r7, #3]
 8015608:	015a      	lsls	r2, r3, #5
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	4413      	add	r3, r2
 801560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015612:	461a      	mov	r2, r3
 8015614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015618:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801561a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801561e:	2b03      	cmp	r3, #3
 8015620:	d87e      	bhi.n	8015720 <USB_HC_Init+0x13c>
 8015622:	a201      	add	r2, pc, #4	; (adr r2, 8015628 <USB_HC_Init+0x44>)
 8015624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015628:	08015639 	.word	0x08015639
 801562c:	080156e3 	.word	0x080156e3
 8015630:	08015639 	.word	0x08015639
 8015634:	080156a5 	.word	0x080156a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015638:	78fb      	ldrb	r3, [r7, #3]
 801563a:	015a      	lsls	r2, r3, #5
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	4413      	add	r3, r2
 8015640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015644:	461a      	mov	r2, r3
 8015646:	f240 439d 	movw	r3, #1181	; 0x49d
 801564a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801564c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015650:	2b00      	cmp	r3, #0
 8015652:	da10      	bge.n	8015676 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015654:	78fb      	ldrb	r3, [r7, #3]
 8015656:	015a      	lsls	r2, r3, #5
 8015658:	693b      	ldr	r3, [r7, #16]
 801565a:	4413      	add	r3, r2
 801565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	78fa      	ldrb	r2, [r7, #3]
 8015664:	0151      	lsls	r1, r2, #5
 8015666:	693a      	ldr	r2, [r7, #16]
 8015668:	440a      	add	r2, r1
 801566a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801566e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015672:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8015674:	e057      	b.n	8015726 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801567e:	2b00      	cmp	r3, #0
 8015680:	d051      	beq.n	8015726 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8015682:	78fb      	ldrb	r3, [r7, #3]
 8015684:	015a      	lsls	r2, r3, #5
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	4413      	add	r3, r2
 801568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801568e:	68db      	ldr	r3, [r3, #12]
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	0151      	lsls	r1, r2, #5
 8015694:	693a      	ldr	r2, [r7, #16]
 8015696:	440a      	add	r2, r1
 8015698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801569c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80156a0:	60d3      	str	r3, [r2, #12]
      break;
 80156a2:	e040      	b.n	8015726 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80156a4:	78fb      	ldrb	r3, [r7, #3]
 80156a6:	015a      	lsls	r2, r3, #5
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	4413      	add	r3, r2
 80156ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156b0:	461a      	mov	r2, r3
 80156b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80156b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80156b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	da34      	bge.n	801572a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80156c0:	78fb      	ldrb	r3, [r7, #3]
 80156c2:	015a      	lsls	r2, r3, #5
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	4413      	add	r3, r2
 80156c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	78fa      	ldrb	r2, [r7, #3]
 80156d0:	0151      	lsls	r1, r2, #5
 80156d2:	693a      	ldr	r2, [r7, #16]
 80156d4:	440a      	add	r2, r1
 80156d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80156e0:	e023      	b.n	801572a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80156e2:	78fb      	ldrb	r3, [r7, #3]
 80156e4:	015a      	lsls	r2, r3, #5
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	4413      	add	r3, r2
 80156ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156ee:	461a      	mov	r2, r3
 80156f0:	f240 2325 	movw	r3, #549	; 0x225
 80156f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80156f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	da17      	bge.n	801572e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80156fe:	78fb      	ldrb	r3, [r7, #3]
 8015700:	015a      	lsls	r2, r3, #5
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	4413      	add	r3, r2
 8015706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	78fa      	ldrb	r2, [r7, #3]
 801570e:	0151      	lsls	r1, r2, #5
 8015710:	693a      	ldr	r2, [r7, #16]
 8015712:	440a      	add	r2, r1
 8015714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015718:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801571c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801571e:	e006      	b.n	801572e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8015720:	2301      	movs	r3, #1
 8015722:	77fb      	strb	r3, [r7, #31]
      break;
 8015724:	e004      	b.n	8015730 <USB_HC_Init+0x14c>
      break;
 8015726:	bf00      	nop
 8015728:	e002      	b.n	8015730 <USB_HC_Init+0x14c>
      break;
 801572a:	bf00      	nop
 801572c:	e000      	b.n	8015730 <USB_HC_Init+0x14c>
      break;
 801572e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8015730:	78fb      	ldrb	r3, [r7, #3]
 8015732:	015a      	lsls	r2, r3, #5
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	4413      	add	r3, r2
 8015738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	78fa      	ldrb	r2, [r7, #3]
 8015740:	0151      	lsls	r1, r2, #5
 8015742:	693a      	ldr	r2, [r7, #16]
 8015744:	440a      	add	r2, r1
 8015746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801574a:	f043 0302 	orr.w	r3, r3, #2
 801574e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015756:	699a      	ldr	r2, [r3, #24]
 8015758:	78fb      	ldrb	r3, [r7, #3]
 801575a:	f003 030f 	and.w	r3, r3, #15
 801575e:	2101      	movs	r1, #1
 8015760:	fa01 f303 	lsl.w	r3, r1, r3
 8015764:	6939      	ldr	r1, [r7, #16]
 8015766:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801576a:	4313      	orrs	r3, r2
 801576c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	699b      	ldr	r3, [r3, #24]
 8015772:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801577a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801577e:	2b00      	cmp	r3, #0
 8015780:	da03      	bge.n	801578a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8015782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015786:	61bb      	str	r3, [r7, #24]
 8015788:	e001      	b.n	801578e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 801578a:	2300      	movs	r3, #0
 801578c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7ff ff00 	bl	8015594 <USB_GetHostSpeed>
 8015794:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8015796:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801579a:	2b02      	cmp	r3, #2
 801579c:	d106      	bne.n	80157ac <USB_HC_Init+0x1c8>
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	d003      	beq.n	80157ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80157a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80157a8:	617b      	str	r3, [r7, #20]
 80157aa:	e001      	b.n	80157b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80157ac:	2300      	movs	r3, #0
 80157ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157b0:	787b      	ldrb	r3, [r7, #1]
 80157b2:	059b      	lsls	r3, r3, #22
 80157b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80157b8:	78bb      	ldrb	r3, [r7, #2]
 80157ba:	02db      	lsls	r3, r3, #11
 80157bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80157c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80157c6:	049b      	lsls	r3, r3, #18
 80157c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80157cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80157ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80157d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80157d4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	431a      	orrs	r2, r3
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157de:	78fa      	ldrb	r2, [r7, #3]
 80157e0:	0151      	lsls	r1, r2, #5
 80157e2:	693a      	ldr	r2, [r7, #16]
 80157e4:	440a      	add	r2, r1
 80157e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80157ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157ee:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80157f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80157f4:	2b03      	cmp	r3, #3
 80157f6:	d003      	beq.n	8015800 <USB_HC_Init+0x21c>
 80157f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80157fc:	2b01      	cmp	r3, #1
 80157fe:	d10f      	bne.n	8015820 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015800:	78fb      	ldrb	r3, [r7, #3]
 8015802:	015a      	lsls	r2, r3, #5
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	4413      	add	r3, r2
 8015808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	78fa      	ldrb	r2, [r7, #3]
 8015810:	0151      	lsls	r1, r2, #5
 8015812:	693a      	ldr	r2, [r7, #16]
 8015814:	440a      	add	r2, r1
 8015816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801581a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801581e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8015820:	7ffb      	ldrb	r3, [r7, #31]
}
 8015822:	4618      	mov	r0, r3
 8015824:	3720      	adds	r7, #32
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop

0801582c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b08c      	sub	sp, #48	; 0x30
 8015830:	af02      	add	r7, sp, #8
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	60b9      	str	r1, [r7, #8]
 8015836:	4613      	mov	r3, r2
 8015838:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	785b      	ldrb	r3, [r3, #1]
 8015842:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8015844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015848:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015852:	2b00      	cmp	r3, #0
 8015854:	d02d      	beq.n	80158b2 <USB_HC_StartXfer+0x86>
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	791b      	ldrb	r3, [r3, #4]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d129      	bne.n	80158b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801585e:	79fb      	ldrb	r3, [r7, #7]
 8015860:	2b01      	cmp	r3, #1
 8015862:	d117      	bne.n	8015894 <USB_HC_StartXfer+0x68>
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	79db      	ldrb	r3, [r3, #7]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d003      	beq.n	8015874 <USB_HC_StartXfer+0x48>
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	79db      	ldrb	r3, [r3, #7]
 8015870:	2b02      	cmp	r3, #2
 8015872:	d10f      	bne.n	8015894 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	015a      	lsls	r2, r3, #5
 8015878:	6a3b      	ldr	r3, [r7, #32]
 801587a:	4413      	add	r3, r2
 801587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015880:	68db      	ldr	r3, [r3, #12]
 8015882:	69fa      	ldr	r2, [r7, #28]
 8015884:	0151      	lsls	r1, r2, #5
 8015886:	6a3a      	ldr	r2, [r7, #32]
 8015888:	440a      	add	r2, r1
 801588a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015892:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8015894:	79fb      	ldrb	r3, [r7, #7]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d10b      	bne.n	80158b2 <USB_HC_StartXfer+0x86>
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	795b      	ldrb	r3, [r3, #5]
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d107      	bne.n	80158b2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	785b      	ldrb	r3, [r3, #1]
 80158a6:	4619      	mov	r1, r3
 80158a8:	68f8      	ldr	r0, [r7, #12]
 80158aa:	f000 fa0f 	bl	8015ccc <USB_DoPing>
      return HAL_OK;
 80158ae:	2300      	movs	r3, #0
 80158b0:	e0f8      	b.n	8015aa4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	695b      	ldr	r3, [r3, #20]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d018      	beq.n	80158ec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	695b      	ldr	r3, [r3, #20]
 80158be:	68ba      	ldr	r2, [r7, #8]
 80158c0:	8912      	ldrh	r2, [r2, #8]
 80158c2:	4413      	add	r3, r2
 80158c4:	3b01      	subs	r3, #1
 80158c6:	68ba      	ldr	r2, [r7, #8]
 80158c8:	8912      	ldrh	r2, [r2, #8]
 80158ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80158ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80158d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80158d2:	8b7b      	ldrh	r3, [r7, #26]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d90b      	bls.n	80158f0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80158d8:	8b7b      	ldrh	r3, [r7, #26]
 80158da:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80158dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	8912      	ldrh	r2, [r2, #8]
 80158e2:	fb03 f202 	mul.w	r2, r3, r2
 80158e6:	68bb      	ldr	r3, [r7, #8]
 80158e8:	611a      	str	r2, [r3, #16]
 80158ea:	e001      	b.n	80158f0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80158ec:	2301      	movs	r3, #1
 80158ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	78db      	ldrb	r3, [r3, #3]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d007      	beq.n	8015908 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80158f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	8912      	ldrh	r2, [r2, #8]
 80158fe:	fb03 f202 	mul.w	r2, r3, r2
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	611a      	str	r2, [r3, #16]
 8015906:	e003      	b.n	8015910 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	695a      	ldr	r2, [r3, #20]
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	691b      	ldr	r3, [r3, #16]
 8015914:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801591a:	04d9      	lsls	r1, r3, #19
 801591c:	4b63      	ldr	r3, [pc, #396]	; (8015aac <USB_HC_StartXfer+0x280>)
 801591e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015920:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	7a9b      	ldrb	r3, [r3, #10]
 8015926:	075b      	lsls	r3, r3, #29
 8015928:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801592c:	69f9      	ldr	r1, [r7, #28]
 801592e:	0148      	lsls	r0, r1, #5
 8015930:	6a39      	ldr	r1, [r7, #32]
 8015932:	4401      	add	r1, r0
 8015934:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015938:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801593a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801593c:	79fb      	ldrb	r3, [r7, #7]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d009      	beq.n	8015956 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8015942:	68bb      	ldr	r3, [r7, #8]
 8015944:	68d9      	ldr	r1, [r3, #12]
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	015a      	lsls	r2, r3, #5
 801594a:	6a3b      	ldr	r3, [r7, #32]
 801594c:	4413      	add	r3, r2
 801594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015952:	460a      	mov	r2, r1
 8015954:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8015956:	6a3b      	ldr	r3, [r7, #32]
 8015958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	f003 0301 	and.w	r3, r3, #1
 8015962:	2b00      	cmp	r3, #0
 8015964:	bf0c      	ite	eq
 8015966:	2301      	moveq	r3, #1
 8015968:	2300      	movne	r3, #0
 801596a:	b2db      	uxtb	r3, r3
 801596c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	015a      	lsls	r2, r3, #5
 8015972:	6a3b      	ldr	r3, [r7, #32]
 8015974:	4413      	add	r3, r2
 8015976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	69fa      	ldr	r2, [r7, #28]
 801597e:	0151      	lsls	r1, r2, #5
 8015980:	6a3a      	ldr	r2, [r7, #32]
 8015982:	440a      	add	r2, r1
 8015984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801598c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	015a      	lsls	r2, r3, #5
 8015992:	6a3b      	ldr	r3, [r7, #32]
 8015994:	4413      	add	r3, r2
 8015996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	7e7b      	ldrb	r3, [r7, #25]
 801599e:	075b      	lsls	r3, r3, #29
 80159a0:	69f9      	ldr	r1, [r7, #28]
 80159a2:	0148      	lsls	r0, r1, #5
 80159a4:	6a39      	ldr	r1, [r7, #32]
 80159a6:	4401      	add	r1, r0
 80159a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80159ac:	4313      	orrs	r3, r2
 80159ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	015a      	lsls	r2, r3, #5
 80159b4:	6a3b      	ldr	r3, [r7, #32]
 80159b6:	4413      	add	r3, r2
 80159b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80159c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	78db      	ldrb	r3, [r3, #3]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d004      	beq.n	80159da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159d6:	613b      	str	r3, [r7, #16]
 80159d8:	e003      	b.n	80159e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80159e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80159e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	015a      	lsls	r2, r3, #5
 80159ee:	6a3b      	ldr	r3, [r7, #32]
 80159f0:	4413      	add	r3, r2
 80159f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159f6:	461a      	mov	r2, r3
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80159fc:	79fb      	ldrb	r3, [r7, #7]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d001      	beq.n	8015a06 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015a02:	2300      	movs	r3, #0
 8015a04:	e04e      	b.n	8015aa4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	78db      	ldrb	r3, [r3, #3]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d149      	bne.n	8015aa2 <USB_HC_StartXfer+0x276>
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	695b      	ldr	r3, [r3, #20]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d045      	beq.n	8015aa2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	79db      	ldrb	r3, [r3, #7]
 8015a1a:	2b03      	cmp	r3, #3
 8015a1c:	d830      	bhi.n	8015a80 <USB_HC_StartXfer+0x254>
 8015a1e:	a201      	add	r2, pc, #4	; (adr r2, 8015a24 <USB_HC_StartXfer+0x1f8>)
 8015a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a24:	08015a35 	.word	0x08015a35
 8015a28:	08015a59 	.word	0x08015a59
 8015a2c:	08015a35 	.word	0x08015a35
 8015a30:	08015a59 	.word	0x08015a59
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	695b      	ldr	r3, [r3, #20]
 8015a38:	3303      	adds	r3, #3
 8015a3a:	089b      	lsrs	r3, r3, #2
 8015a3c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015a3e:	8afa      	ldrh	r2, [r7, #22]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d91c      	bls.n	8015a84 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	699b      	ldr	r3, [r3, #24]
 8015a4e:	f043 0220 	orr.w	r2, r3, #32
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	619a      	str	r2, [r3, #24]
        }
        break;
 8015a56:	e015      	b.n	8015a84 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	695b      	ldr	r3, [r3, #20]
 8015a5c:	3303      	adds	r3, #3
 8015a5e:	089b      	lsrs	r3, r3, #2
 8015a60:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015a62:	8afa      	ldrh	r2, [r7, #22]
 8015a64:	6a3b      	ldr	r3, [r7, #32]
 8015a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015a6a:	691b      	ldr	r3, [r3, #16]
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d90a      	bls.n	8015a88 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	699b      	ldr	r3, [r3, #24]
 8015a76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8015a7e:	e003      	b.n	8015a88 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015a80:	bf00      	nop
 8015a82:	e002      	b.n	8015a8a <USB_HC_StartXfer+0x25e>
        break;
 8015a84:	bf00      	nop
 8015a86:	e000      	b.n	8015a8a <USB_HC_StartXfer+0x25e>
        break;
 8015a88:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	68d9      	ldr	r1, [r3, #12]
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	785a      	ldrb	r2, [r3, #1]
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	695b      	ldr	r3, [r3, #20]
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	2000      	movs	r0, #0
 8015a9a:	9000      	str	r0, [sp, #0]
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f7ff fb13 	bl	80150c8 <USB_WritePacket>
  }

  return HAL_OK;
 8015aa2:	2300      	movs	r3, #0
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3728      	adds	r7, #40	; 0x28
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	1ff80000 	.word	0x1ff80000

08015ab0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015ac2:	695b      	ldr	r3, [r3, #20]
 8015ac4:	b29b      	uxth	r3, r3
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3714      	adds	r7, #20
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr

08015ad2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015ad2:	b480      	push	{r7}
 8015ad4:	b089      	sub	sp, #36	; 0x24
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	460b      	mov	r3, r1
 8015adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015ae2:	78fb      	ldrb	r3, [r7, #3]
 8015ae4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8015aea:	69bb      	ldr	r3, [r7, #24]
 8015aec:	015a      	lsls	r2, r3, #5
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	4413      	add	r3, r2
 8015af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	0c9b      	lsrs	r3, r3, #18
 8015afa:	f003 0303 	and.w	r3, r3, #3
 8015afe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	015a      	lsls	r2, r3, #5
 8015b04:	69fb      	ldr	r3, [r7, #28]
 8015b06:	4413      	add	r3, r2
 8015b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	0fdb      	lsrs	r3, r3, #31
 8015b10:	f003 0301 	and.w	r3, r3, #1
 8015b14:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	f003 0320 	and.w	r3, r3, #32
 8015b1e:	2b20      	cmp	r3, #32
 8015b20:	d104      	bne.n	8015b2c <USB_HC_Halt+0x5a>
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d101      	bne.n	8015b2c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	e0c8      	b.n	8015cbe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d002      	beq.n	8015b38 <USB_HC_Halt+0x66>
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d163      	bne.n	8015c00 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015b38:	69bb      	ldr	r3, [r7, #24]
 8015b3a:	015a      	lsls	r2, r3, #5
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	4413      	add	r3, r2
 8015b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	69ba      	ldr	r2, [r7, #24]
 8015b48:	0151      	lsls	r1, r2, #5
 8015b4a:	69fa      	ldr	r2, [r7, #28]
 8015b4c:	440a      	add	r2, r1
 8015b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b56:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	f003 0320 	and.w	r3, r3, #32
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	f040 80ab 	bne.w	8015cbc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d133      	bne.n	8015bda <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	015a      	lsls	r2, r3, #5
 8015b76:	69fb      	ldr	r3, [r7, #28]
 8015b78:	4413      	add	r3, r2
 8015b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	69ba      	ldr	r2, [r7, #24]
 8015b82:	0151      	lsls	r1, r2, #5
 8015b84:	69fa      	ldr	r2, [r7, #28]
 8015b86:	440a      	add	r2, r1
 8015b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b90:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	015a      	lsls	r2, r3, #5
 8015b96:	69fb      	ldr	r3, [r7, #28]
 8015b98:	4413      	add	r3, r2
 8015b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	69ba      	ldr	r2, [r7, #24]
 8015ba2:	0151      	lsls	r1, r2, #5
 8015ba4:	69fa      	ldr	r2, [r7, #28]
 8015ba6:	440a      	add	r2, r1
 8015ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015bb0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015bbe:	d81d      	bhi.n	8015bfc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	015a      	lsls	r2, r3, #5
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bd6:	d0ec      	beq.n	8015bb2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015bd8:	e070      	b.n	8015cbc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	015a      	lsls	r2, r3, #5
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	4413      	add	r3, r2
 8015be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	69ba      	ldr	r2, [r7, #24]
 8015bea:	0151      	lsls	r1, r2, #5
 8015bec:	69fa      	ldr	r2, [r7, #28]
 8015bee:	440a      	add	r2, r1
 8015bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015bf8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015bfa:	e05f      	b.n	8015cbc <USB_HC_Halt+0x1ea>
            break;
 8015bfc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015bfe:	e05d      	b.n	8015cbc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	015a      	lsls	r2, r3, #5
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	4413      	add	r3, r2
 8015c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	69ba      	ldr	r2, [r7, #24]
 8015c10:	0151      	lsls	r1, r2, #5
 8015c12:	69fa      	ldr	r2, [r7, #28]
 8015c14:	440a      	add	r2, r1
 8015c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015c1e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015c26:	691b      	ldr	r3, [r3, #16]
 8015c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d133      	bne.n	8015c98 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015c30:	69bb      	ldr	r3, [r7, #24]
 8015c32:	015a      	lsls	r2, r3, #5
 8015c34:	69fb      	ldr	r3, [r7, #28]
 8015c36:	4413      	add	r3, r2
 8015c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	69ba      	ldr	r2, [r7, #24]
 8015c40:	0151      	lsls	r1, r2, #5
 8015c42:	69fa      	ldr	r2, [r7, #28]
 8015c44:	440a      	add	r2, r1
 8015c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	015a      	lsls	r2, r3, #5
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	4413      	add	r3, r2
 8015c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	69ba      	ldr	r2, [r7, #24]
 8015c60:	0151      	lsls	r1, r2, #5
 8015c62:	69fa      	ldr	r2, [r7, #28]
 8015c64:	440a      	add	r2, r1
 8015c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c6e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	3301      	adds	r3, #1
 8015c74:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015c7c:	d81d      	bhi.n	8015cba <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	015a      	lsls	r2, r3, #5
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	4413      	add	r3, r2
 8015c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c94:	d0ec      	beq.n	8015c70 <USB_HC_Halt+0x19e>
 8015c96:	e011      	b.n	8015cbc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	015a      	lsls	r2, r3, #5
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	4413      	add	r3, r2
 8015ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	69ba      	ldr	r2, [r7, #24]
 8015ca8:	0151      	lsls	r1, r2, #5
 8015caa:	69fa      	ldr	r2, [r7, #28]
 8015cac:	440a      	add	r2, r1
 8015cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015cb6:	6013      	str	r3, [r2, #0]
 8015cb8:	e000      	b.n	8015cbc <USB_HC_Halt+0x1ea>
          break;
 8015cba:	bf00      	nop
    }
  }

  return HAL_OK;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3724      	adds	r7, #36	; 0x24
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc8:	4770      	bx	lr
	...

08015ccc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b087      	sub	sp, #28
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015cdc:	78fb      	ldrb	r3, [r7, #3]
 8015cde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	04da      	lsls	r2, r3, #19
 8015ce8:	4b15      	ldr	r3, [pc, #84]	; (8015d40 <USB_DoPing+0x74>)
 8015cea:	4013      	ands	r3, r2
 8015cec:	693a      	ldr	r2, [r7, #16]
 8015cee:	0151      	lsls	r1, r2, #5
 8015cf0:	697a      	ldr	r2, [r7, #20]
 8015cf2:	440a      	add	r2, r1
 8015cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015cfc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	015a      	lsls	r2, r3, #5
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	4413      	add	r3, r2
 8015d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	015a      	lsls	r2, r3, #5
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	4413      	add	r3, r2
 8015d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	371c      	adds	r7, #28
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr
 8015d3e:	bf00      	nop
 8015d40:	1ff80000 	.word	0x1ff80000

08015d44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b088      	sub	sp, #32
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015d54:	2300      	movs	r3, #0
 8015d56:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f7ff f8f4 	bl	8014f46 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015d5e:	2110      	movs	r1, #16
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f7ff f94d 	bl	8015000 <USB_FlushTxFifo>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d001      	beq.n	8015d70 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f7ff f979 	bl	8015068 <USB_FlushRxFifo>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d001      	beq.n	8015d80 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015d80:	2300      	movs	r3, #0
 8015d82:	61bb      	str	r3, [r7, #24]
 8015d84:	e01f      	b.n	8015dc6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8015d86:	69bb      	ldr	r3, [r7, #24]
 8015d88:	015a      	lsls	r2, r3, #5
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	4413      	add	r3, r2
 8015d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015d9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015da4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015dac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015dae:	69bb      	ldr	r3, [r7, #24]
 8015db0:	015a      	lsls	r2, r3, #5
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	4413      	add	r3, r2
 8015db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015dba:	461a      	mov	r2, r3
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015dc0:	69bb      	ldr	r3, [r7, #24]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	61bb      	str	r3, [r7, #24]
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	2b0f      	cmp	r3, #15
 8015dca:	d9dc      	bls.n	8015d86 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015dcc:	2300      	movs	r3, #0
 8015dce:	61bb      	str	r3, [r7, #24]
 8015dd0:	e034      	b.n	8015e3c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	015a      	lsls	r2, r3, #5
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	4413      	add	r3, r2
 8015dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015de8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015df0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015df8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015dfa:	69bb      	ldr	r3, [r7, #24]
 8015dfc:	015a      	lsls	r2, r3, #5
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	4413      	add	r3, r2
 8015e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e06:	461a      	mov	r2, r3
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015e18:	d80c      	bhi.n	8015e34 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015e1a:	69bb      	ldr	r3, [r7, #24]
 8015e1c:	015a      	lsls	r2, r3, #5
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	4413      	add	r3, r2
 8015e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e30:	d0ec      	beq.n	8015e0c <USB_StopHost+0xc8>
 8015e32:	e000      	b.n	8015e36 <USB_StopHost+0xf2>
        break;
 8015e34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	61bb      	str	r3, [r7, #24]
 8015e3c:	69bb      	ldr	r3, [r7, #24]
 8015e3e:	2b0f      	cmp	r3, #15
 8015e40:	d9c7      	bls.n	8015dd2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015e48:	461a      	mov	r2, r3
 8015e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f7ff f863 	bl	8014f24 <USB_EnableGlobalInt>

  return ret;
 8015e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3720      	adds	r7, #32
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	4613      	mov	r3, r2
 8015e74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d101      	bne.n	8015e80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015e7c:	2302      	movs	r3, #2
 8015e7e:	e029      	b.n	8015ed4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	79fa      	ldrb	r2, [r7, #7]
 8015e84:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	f000 f81f 	bl	8015edc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d003      	beq.n	8015ecc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	68ba      	ldr	r2, [r7, #8]
 8015ec8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f7ef f861 	bl	8004f94 <USBH_LL_Init>

  return USBH_OK;
 8015ed2:	2300      	movs	r3, #0
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3710      	adds	r7, #16
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015ee8:	2300      	movs	r3, #0
 8015eea:	60fb      	str	r3, [r7, #12]
 8015eec:	e00a      	b.n	8015f04 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015ef6:	009b      	lsls	r3, r3, #2
 8015ef8:	4413      	add	r3, r2
 8015efa:	2200      	movs	r2, #0
 8015efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	3301      	adds	r3, #1
 8015f02:	60fb      	str	r3, [r7, #12]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2b0f      	cmp	r3, #15
 8015f08:	d9f1      	bls.n	8015eee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	60fb      	str	r3, [r7, #12]
 8015f0e:	e009      	b.n	8015f24 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	4413      	add	r3, r2
 8015f16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	3301      	adds	r3, #1
 8015f22:	60fb      	str	r3, [r7, #12]
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f2a:	d3f1      	bcc.n	8015f10 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2200      	movs	r2, #0
 8015f36:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2200      	movs	r2, #0
 8015f42:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2201      	movs	r2, #1
 8015f4a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2240      	movs	r2, #64	; 0x40
 8015f50:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2200      	movs	r2, #0
 8015f56:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2201      	movs	r2, #1
 8015f64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	331c      	adds	r3, #28
 8015f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f80:	2100      	movs	r1, #0
 8015f82:	4618      	mov	r0, r3
 8015f84:	f001 fd96 	bl	8017ab4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f92:	2100      	movs	r1, #0
 8015f94:	4618      	mov	r0, r3
 8015f96:	f001 fd8d 	bl	8017ab4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015fa0:	2212      	movs	r2, #18
 8015fa2:	2100      	movs	r1, #0
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f001 fd85 	bl	8017ab4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015fb0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015fb4:	2100      	movs	r1, #0
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f001 fd7c 	bl	8017ab4 <memset>

  return USBH_OK;
 8015fbc:	2300      	movs	r3, #0
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3710      	adds	r7, #16
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015fc6:	b480      	push	{r7}
 8015fc8:	b085      	sub	sp, #20
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
 8015fce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d017      	beq.n	801600a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10f      	bne.n	8016004 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015fea:	1c59      	adds	r1, r3, #1
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015ff2:	687a      	ldr	r2, [r7, #4]
 8015ff4:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015ff8:	6839      	ldr	r1, [r7, #0]
 8015ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015ffe:	2300      	movs	r3, #0
 8016000:	73fb      	strb	r3, [r7, #15]
 8016002:	e004      	b.n	801600e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8016004:	2302      	movs	r3, #2
 8016006:	73fb      	strb	r3, [r7, #15]
 8016008:	e001      	b.n	801600e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801600a:	2302      	movs	r3, #2
 801600c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016010:	4618      	mov	r0, r3
 8016012:	3714      	adds	r7, #20
 8016014:	46bd      	mov	sp, r7
 8016016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601a:	4770      	bx	lr

0801601c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801601c:	b480      	push	{r7}
 801601e:	b085      	sub	sp, #20
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	460b      	mov	r3, r1
 8016026:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8016028:	2300      	movs	r3, #0
 801602a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8016032:	78fa      	ldrb	r2, [r7, #3]
 8016034:	429a      	cmp	r2, r3
 8016036:	d204      	bcs.n	8016042 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	78fa      	ldrb	r2, [r7, #3]
 801603c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8016040:	e001      	b.n	8016046 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8016042:	2302      	movs	r3, #2
 8016044:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016046:	7bfb      	ldrb	r3, [r7, #15]
}
 8016048:	4618      	mov	r0, r3
 801604a:	3714      	adds	r7, #20
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8016054:	b480      	push	{r7}
 8016056:	b087      	sub	sp, #28
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	4608      	mov	r0, r1
 801605e:	4611      	mov	r1, r2
 8016060:	461a      	mov	r2, r3
 8016062:	4603      	mov	r3, r0
 8016064:	70fb      	strb	r3, [r7, #3]
 8016066:	460b      	mov	r3, r1
 8016068:	70bb      	strb	r3, [r7, #2]
 801606a:	4613      	mov	r3, r2
 801606c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 801606e:	2300      	movs	r3, #0
 8016070:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016072:	2300      	movs	r3, #0
 8016074:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801607c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801607e:	e025      	b.n	80160cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8016080:	7dfb      	ldrb	r3, [r7, #23]
 8016082:	221a      	movs	r2, #26
 8016084:	fb02 f303 	mul.w	r3, r2, r3
 8016088:	3308      	adds	r3, #8
 801608a:	68fa      	ldr	r2, [r7, #12]
 801608c:	4413      	add	r3, r2
 801608e:	3302      	adds	r3, #2
 8016090:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	795b      	ldrb	r3, [r3, #5]
 8016096:	78fa      	ldrb	r2, [r7, #3]
 8016098:	429a      	cmp	r2, r3
 801609a:	d002      	beq.n	80160a2 <USBH_FindInterface+0x4e>
 801609c:	78fb      	ldrb	r3, [r7, #3]
 801609e:	2bff      	cmp	r3, #255	; 0xff
 80160a0:	d111      	bne.n	80160c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80160a6:	78ba      	ldrb	r2, [r7, #2]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d002      	beq.n	80160b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80160ac:	78bb      	ldrb	r3, [r7, #2]
 80160ae:	2bff      	cmp	r3, #255	; 0xff
 80160b0:	d109      	bne.n	80160c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80160b6:	787a      	ldrb	r2, [r7, #1]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d002      	beq.n	80160c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80160bc:	787b      	ldrb	r3, [r7, #1]
 80160be:	2bff      	cmp	r3, #255	; 0xff
 80160c0:	d101      	bne.n	80160c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80160c2:	7dfb      	ldrb	r3, [r7, #23]
 80160c4:	e006      	b.n	80160d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80160c6:	7dfb      	ldrb	r3, [r7, #23]
 80160c8:	3301      	adds	r3, #1
 80160ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80160cc:	7dfb      	ldrb	r3, [r7, #23]
 80160ce:	2b09      	cmp	r3, #9
 80160d0:	d9d6      	bls.n	8016080 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80160d2:	23ff      	movs	r3, #255	; 0xff
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	371c      	adds	r7, #28
 80160d8:	46bd      	mov	sp, r7
 80160da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160de:	4770      	bx	lr

080160e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7ee ff8f 	bl	800500c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80160ee:	2101      	movs	r1, #1
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7ef f8a8 	bl	8005246 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80160f6:	2300      	movs	r3, #0
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	3708      	adds	r7, #8
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}

08016100 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b082      	sub	sp, #8
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8016108:	2100      	movs	r1, #0
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7ef f89b 	bl	8005246 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7ee ff96 	bl	8005042 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	791b      	ldrb	r3, [r3, #4]
 801611a:	4619      	mov	r1, r3
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f001 fb6c 	bl	80177fa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	795b      	ldrb	r3, [r3, #5]
 8016126:	4619      	mov	r1, r3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f001 fb66 	bl	80177fa <USBH_FreePipe>

  return USBH_OK;
 801612e:	2300      	movs	r3, #0
}
 8016130:	4618      	mov	r0, r3
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b088      	sub	sp, #32
 801613c:	af04      	add	r7, sp, #16
 801613e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8016140:	2302      	movs	r3, #2
 8016142:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8016144:	2300      	movs	r3, #0
 8016146:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801614e:	b2db      	uxtb	r3, r3
 8016150:	2b01      	cmp	r3, #1
 8016152:	d102      	bne.n	801615a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2203      	movs	r2, #3
 8016158:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	b2db      	uxtb	r3, r3
 8016160:	2b0b      	cmp	r3, #11
 8016162:	f200 81c0 	bhi.w	80164e6 <USBH_Process+0x3ae>
 8016166:	a201      	add	r2, pc, #4	; (adr r2, 801616c <USBH_Process+0x34>)
 8016168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616c:	0801619d 	.word	0x0801619d
 8016170:	080161cf 	.word	0x080161cf
 8016174:	08016237 	.word	0x08016237
 8016178:	08016481 	.word	0x08016481
 801617c:	080164e7 	.word	0x080164e7
 8016180:	080162db 	.word	0x080162db
 8016184:	08016427 	.word	0x08016427
 8016188:	08016311 	.word	0x08016311
 801618c:	08016331 	.word	0x08016331
 8016190:	08016351 	.word	0x08016351
 8016194:	08016395 	.word	0x08016395
 8016198:	08016469 	.word	0x08016469
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f000 81a0 	beq.w	80164ea <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2201      	movs	r2, #1
 80161ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80161b0:	20c8      	movs	r0, #200	; 0xc8
 80161b2:	f7ef f88f 	bl	80052d4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f7ee ff85 	bl	80050c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2200      	movs	r2, #0
 80161c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2200      	movs	r2, #0
 80161c8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80161cc:	e18d      	b.n	80164ea <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d107      	bne.n	80161e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2200      	movs	r2, #0
 80161dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2202      	movs	r2, #2
 80161e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80161e6:	e18f      	b.n	8016508 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80161ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80161f2:	d914      	bls.n	801621e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80161fa:	3301      	adds	r3, #1
 80161fc:	b2da      	uxtb	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801620a:	2b03      	cmp	r3, #3
 801620c:	d903      	bls.n	8016216 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	220d      	movs	r2, #13
 8016212:	701a      	strb	r2, [r3, #0]
      break;
 8016214:	e178      	b.n	8016508 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	701a      	strb	r2, [r3, #0]
      break;
 801621c:	e174      	b.n	8016508 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8016224:	f103 020a 	add.w	r2, r3, #10
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 801622e:	200a      	movs	r0, #10
 8016230:	f7ef f850 	bl	80052d4 <USBH_Delay>
      break;
 8016234:	e168      	b.n	8016508 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801623c:	2b00      	cmp	r3, #0
 801623e:	d005      	beq.n	801624c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016246:	2104      	movs	r1, #4
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801624c:	2064      	movs	r0, #100	; 0x64
 801624e:	f7ef f841 	bl	80052d4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f7ee ff10 	bl	8005078 <USBH_LL_GetSpeed>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2205      	movs	r2, #5
 8016266:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8016268:	2100      	movs	r1, #0
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f001 faa3 	bl	80177b6 <USBH_AllocPipe>
 8016270:	4603      	mov	r3, r0
 8016272:	461a      	mov	r2, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8016278:	2180      	movs	r1, #128	; 0x80
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f001 fa9b 	bl	80177b6 <USBH_AllocPipe>
 8016280:	4603      	mov	r3, r0
 8016282:	461a      	mov	r2, r3
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	7919      	ldrb	r1, [r3, #4]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801629c:	b292      	uxth	r2, r2
 801629e:	9202      	str	r2, [sp, #8]
 80162a0:	2200      	movs	r2, #0
 80162a2:	9201      	str	r2, [sp, #4]
 80162a4:	9300      	str	r3, [sp, #0]
 80162a6:	4603      	mov	r3, r0
 80162a8:	2280      	movs	r2, #128	; 0x80
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f001 fa54 	bl	8017758 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	7959      	ldrb	r1, [r3, #5]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80162c4:	b292      	uxth	r2, r2
 80162c6:	9202      	str	r2, [sp, #8]
 80162c8:	2200      	movs	r2, #0
 80162ca:	9201      	str	r2, [sp, #4]
 80162cc:	9300      	str	r3, [sp, #0]
 80162ce:	4603      	mov	r3, r0
 80162d0:	2200      	movs	r2, #0
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f001 fa40 	bl	8017758 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80162d8:	e116      	b.n	8016508 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f000 f91a 	bl	8016514 <USBH_HandleEnum>
 80162e0:	4603      	mov	r3, r0
 80162e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80162e4:	7bbb      	ldrb	r3, [r7, #14]
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	f040 8100 	bne.w	80164ee <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2200      	movs	r2, #0
 80162f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	d103      	bne.n	8016308 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2208      	movs	r2, #8
 8016304:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016306:	e0f2      	b.n	80164ee <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2207      	movs	r2, #7
 801630c:	701a      	strb	r2, [r3, #0]
      break;
 801630e:	e0ee      	b.n	80164ee <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016316:	2b00      	cmp	r3, #0
 8016318:	f000 80eb 	beq.w	80164f2 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016322:	2101      	movs	r1, #1
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2208      	movs	r2, #8
 801632c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801632e:	e0e0      	b.n	80164f2 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8016336:	b29b      	uxth	r3, r3
 8016338:	4619      	mov	r1, r3
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f000 fc41 	bl	8016bc2 <USBH_SetCfg>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	f040 80d7 	bne.w	80164f6 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2209      	movs	r2, #9
 801634c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801634e:	e0d2      	b.n	80164f6 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8016356:	f003 0320 	and.w	r3, r3, #32
 801635a:	2b00      	cmp	r3, #0
 801635c:	d016      	beq.n	801638c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801635e:	2101      	movs	r1, #1
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f000 fc51 	bl	8016c08 <USBH_SetFeature>
 8016366:	4603      	mov	r3, r0
 8016368:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801636a:	7bbb      	ldrb	r3, [r7, #14]
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b00      	cmp	r3, #0
 8016370:	d103      	bne.n	801637a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	220a      	movs	r2, #10
 8016376:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016378:	e0bf      	b.n	80164fa <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 801637a:	7bbb      	ldrb	r3, [r7, #14]
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b03      	cmp	r3, #3
 8016380:	f040 80bb 	bne.w	80164fa <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	220a      	movs	r2, #10
 8016388:	701a      	strb	r2, [r3, #0]
      break;
 801638a:	e0b6      	b.n	80164fa <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	220a      	movs	r2, #10
 8016390:	701a      	strb	r2, [r3, #0]
      break;
 8016392:	e0b2      	b.n	80164fa <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 801639a:	2b00      	cmp	r3, #0
 801639c:	f000 80af 	beq.w	80164fe <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2200      	movs	r2, #0
 80163a4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80163a8:	2300      	movs	r3, #0
 80163aa:	73fb      	strb	r3, [r7, #15]
 80163ac:	e018      	b.n	80163e0 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80163ae:	7bfa      	ldrb	r2, [r7, #15]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80163b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ba:	791a      	ldrb	r2, [r3, #4]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d109      	bne.n	80163da <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 80163c6:	7bfa      	ldrb	r2, [r7, #15]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80163ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80163d8:	e005      	b.n	80163e6 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80163da:	7bfb      	ldrb	r3, [r7, #15]
 80163dc:	3301      	adds	r3, #1
 80163de:	73fb      	strb	r3, [r7, #15]
 80163e0:	7bfb      	ldrb	r3, [r7, #15]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d0e3      	beq.n	80163ae <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d016      	beq.n	801641e <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80163f6:	689b      	ldr	r3, [r3, #8]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	4798      	blx	r3
 80163fc:	4603      	mov	r3, r0
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d109      	bne.n	8016416 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2206      	movs	r2, #6
 8016406:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801640e:	2103      	movs	r1, #3
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016414:	e073      	b.n	80164fe <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	220d      	movs	r2, #13
 801641a:	701a      	strb	r2, [r3, #0]
      break;
 801641c:	e06f      	b.n	80164fe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	220d      	movs	r2, #13
 8016422:	701a      	strb	r2, [r3, #0]
      break;
 8016424:	e06b      	b.n	80164fe <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801642c:	2b00      	cmp	r3, #0
 801642e:	d017      	beq.n	8016460 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016436:	691b      	ldr	r3, [r3, #16]
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	4798      	blx	r3
 801643c:	4603      	mov	r3, r0
 801643e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8016440:	7bbb      	ldrb	r3, [r7, #14]
 8016442:	b2db      	uxtb	r3, r3
 8016444:	2b00      	cmp	r3, #0
 8016446:	d103      	bne.n	8016450 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	220b      	movs	r2, #11
 801644c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801644e:	e058      	b.n	8016502 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8016450:	7bbb      	ldrb	r3, [r7, #14]
 8016452:	b2db      	uxtb	r3, r3
 8016454:	2b02      	cmp	r3, #2
 8016456:	d154      	bne.n	8016502 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	220d      	movs	r2, #13
 801645c:	701a      	strb	r2, [r3, #0]
      break;
 801645e:	e050      	b.n	8016502 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	220d      	movs	r2, #13
 8016464:	701a      	strb	r2, [r3, #0]
      break;
 8016466:	e04c      	b.n	8016502 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801646e:	2b00      	cmp	r3, #0
 8016470:	d049      	beq.n	8016506 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016478:	695b      	ldr	r3, [r3, #20]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	4798      	blx	r3
      }
      break;
 801647e:	e042      	b.n	8016506 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2200      	movs	r2, #0
 8016484:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff fd27 	bl	8015edc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016494:	2b00      	cmp	r3, #0
 8016496:	d009      	beq.n	80164ac <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	2200      	movs	r2, #0
 80164a8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d005      	beq.n	80164c2 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80164bc:	2105      	movs	r1, #5
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80164c8:	b2db      	uxtb	r3, r3
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d107      	bne.n	80164de <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2200      	movs	r2, #0
 80164d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f7ff fe02 	bl	80160e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80164dc:	e014      	b.n	8016508 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7ee fd94 	bl	800500c <USBH_LL_Start>
      break;
 80164e4:	e010      	b.n	8016508 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 80164e6:	bf00      	nop
 80164e8:	e00e      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 80164ea:	bf00      	nop
 80164ec:	e00c      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 80164ee:	bf00      	nop
 80164f0:	e00a      	b.n	8016508 <USBH_Process+0x3d0>
    break;
 80164f2:	bf00      	nop
 80164f4:	e008      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 80164f6:	bf00      	nop
 80164f8:	e006      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 80164fa:	bf00      	nop
 80164fc:	e004      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 80164fe:	bf00      	nop
 8016500:	e002      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 8016502:	bf00      	nop
 8016504:	e000      	b.n	8016508 <USBH_Process+0x3d0>
      break;
 8016506:	bf00      	nop
  }
  return USBH_OK;
 8016508:	2300      	movs	r3, #0
}
 801650a:	4618      	mov	r0, r3
 801650c:	3710      	adds	r7, #16
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop

08016514 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b088      	sub	sp, #32
 8016518:	af04      	add	r7, sp, #16
 801651a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801651c:	2301      	movs	r3, #1
 801651e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8016520:	2301      	movs	r3, #1
 8016522:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	785b      	ldrb	r3, [r3, #1]
 8016528:	2b07      	cmp	r3, #7
 801652a:	f200 81c1 	bhi.w	80168b0 <USBH_HandleEnum+0x39c>
 801652e:	a201      	add	r2, pc, #4	; (adr r2, 8016534 <USBH_HandleEnum+0x20>)
 8016530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016534:	08016555 	.word	0x08016555
 8016538:	08016613 	.word	0x08016613
 801653c:	0801667d 	.word	0x0801667d
 8016540:	0801670b 	.word	0x0801670b
 8016544:	08016775 	.word	0x08016775
 8016548:	080167e5 	.word	0x080167e5
 801654c:	0801682b 	.word	0x0801682b
 8016550:	08016871 	.word	0x08016871
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8016554:	2108      	movs	r1, #8
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa50 	bl	80169fc <USBH_Get_DevDesc>
 801655c:	4603      	mov	r3, r0
 801655e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016560:	7bbb      	ldrb	r3, [r7, #14]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d130      	bne.n	80165c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2201      	movs	r2, #1
 8016574:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	7919      	ldrb	r1, [r3, #4]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801658a:	b292      	uxth	r2, r2
 801658c:	9202      	str	r2, [sp, #8]
 801658e:	2200      	movs	r2, #0
 8016590:	9201      	str	r2, [sp, #4]
 8016592:	9300      	str	r3, [sp, #0]
 8016594:	4603      	mov	r3, r0
 8016596:	2280      	movs	r2, #128	; 0x80
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f001 f8dd 	bl	8017758 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	7959      	ldrb	r1, [r3, #5]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80165b2:	b292      	uxth	r2, r2
 80165b4:	9202      	str	r2, [sp, #8]
 80165b6:	2200      	movs	r2, #0
 80165b8:	9201      	str	r2, [sp, #4]
 80165ba:	9300      	str	r3, [sp, #0]
 80165bc:	4603      	mov	r3, r0
 80165be:	2200      	movs	r2, #0
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f001 f8c9 	bl	8017758 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80165c6:	e175      	b.n	80168b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80165c8:	7bbb      	ldrb	r3, [r7, #14]
 80165ca:	2b03      	cmp	r3, #3
 80165cc:	f040 8172 	bne.w	80168b4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80165d6:	3301      	adds	r3, #1
 80165d8:	b2da      	uxtb	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80165e6:	2b03      	cmp	r3, #3
 80165e8:	d903      	bls.n	80165f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	220d      	movs	r2, #13
 80165ee:	701a      	strb	r2, [r3, #0]
      break;
 80165f0:	e160      	b.n	80168b4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	795b      	ldrb	r3, [r3, #5]
 80165f6:	4619      	mov	r1, r3
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f001 f8fe 	bl	80177fa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	791b      	ldrb	r3, [r3, #4]
 8016602:	4619      	mov	r1, r3
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f001 f8f8 	bl	80177fa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2200      	movs	r2, #0
 801660e:	701a      	strb	r2, [r3, #0]
      break;
 8016610:	e150      	b.n	80168b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8016612:	2112      	movs	r1, #18
 8016614:	6878      	ldr	r0, [r7, #4]
 8016616:	f000 f9f1 	bl	80169fc <USBH_Get_DevDesc>
 801661a:	4603      	mov	r3, r0
 801661c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801661e:	7bbb      	ldrb	r3, [r7, #14]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d103      	bne.n	801662c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2202      	movs	r2, #2
 8016628:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801662a:	e145      	b.n	80168b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801662c:	7bbb      	ldrb	r3, [r7, #14]
 801662e:	2b03      	cmp	r3, #3
 8016630:	f040 8142 	bne.w	80168b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801663a:	3301      	adds	r3, #1
 801663c:	b2da      	uxtb	r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801664a:	2b03      	cmp	r3, #3
 801664c:	d903      	bls.n	8016656 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	220d      	movs	r2, #13
 8016652:	701a      	strb	r2, [r3, #0]
      break;
 8016654:	e130      	b.n	80168b8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	795b      	ldrb	r3, [r3, #5]
 801665a:	4619      	mov	r1, r3
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f001 f8cc 	bl	80177fa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	791b      	ldrb	r3, [r3, #4]
 8016666:	4619      	mov	r1, r3
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f001 f8c6 	bl	80177fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2200      	movs	r2, #0
 8016672:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2200      	movs	r2, #0
 8016678:	701a      	strb	r2, [r3, #0]
      break;
 801667a:	e11d      	b.n	80168b8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801667c:	2101      	movs	r1, #1
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f000 fa7b 	bl	8016b7a <USBH_SetAddress>
 8016684:	4603      	mov	r3, r0
 8016686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016688:	7bbb      	ldrb	r3, [r7, #14]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d132      	bne.n	80166f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801668e:	2002      	movs	r0, #2
 8016690:	f7ee fe20 	bl	80052d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2201      	movs	r2, #1
 8016698:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2203      	movs	r2, #3
 80166a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	7919      	ldrb	r1, [r3, #4]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80166b2:	687a      	ldr	r2, [r7, #4]
 80166b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80166b6:	b292      	uxth	r2, r2
 80166b8:	9202      	str	r2, [sp, #8]
 80166ba:	2200      	movs	r2, #0
 80166bc:	9201      	str	r2, [sp, #4]
 80166be:	9300      	str	r3, [sp, #0]
 80166c0:	4603      	mov	r3, r0
 80166c2:	2280      	movs	r2, #128	; 0x80
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f001 f847 	bl	8017758 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	7959      	ldrb	r1, [r3, #5]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80166da:	687a      	ldr	r2, [r7, #4]
 80166dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80166de:	b292      	uxth	r2, r2
 80166e0:	9202      	str	r2, [sp, #8]
 80166e2:	2200      	movs	r2, #0
 80166e4:	9201      	str	r2, [sp, #4]
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	4603      	mov	r3, r0
 80166ea:	2200      	movs	r2, #0
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f001 f833 	bl	8017758 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80166f2:	e0e3      	b.n	80168bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80166f4:	7bbb      	ldrb	r3, [r7, #14]
 80166f6:	2b03      	cmp	r3, #3
 80166f8:	f040 80e0 	bne.w	80168bc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	220d      	movs	r2, #13
 8016700:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2200      	movs	r2, #0
 8016706:	705a      	strb	r2, [r3, #1]
      break;
 8016708:	e0d8      	b.n	80168bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801670a:	2109      	movs	r1, #9
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 f9a1 	bl	8016a54 <USBH_Get_CfgDesc>
 8016712:	4603      	mov	r3, r0
 8016714:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016716:	7bbb      	ldrb	r3, [r7, #14]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d103      	bne.n	8016724 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2204      	movs	r2, #4
 8016720:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016722:	e0cd      	b.n	80168c0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016724:	7bbb      	ldrb	r3, [r7, #14]
 8016726:	2b03      	cmp	r3, #3
 8016728:	f040 80ca 	bne.w	80168c0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016732:	3301      	adds	r3, #1
 8016734:	b2da      	uxtb	r2, r3
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016742:	2b03      	cmp	r3, #3
 8016744:	d903      	bls.n	801674e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	220d      	movs	r2, #13
 801674a:	701a      	strb	r2, [r3, #0]
      break;
 801674c:	e0b8      	b.n	80168c0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	795b      	ldrb	r3, [r3, #5]
 8016752:	4619      	mov	r1, r3
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f001 f850 	bl	80177fa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	791b      	ldrb	r3, [r3, #4]
 801675e:	4619      	mov	r1, r3
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f001 f84a 	bl	80177fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2200      	movs	r2, #0
 801676a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2200      	movs	r2, #0
 8016770:	701a      	strb	r2, [r3, #0]
      break;
 8016772:	e0a5      	b.n	80168c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801677a:	4619      	mov	r1, r3
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 f969 	bl	8016a54 <USBH_Get_CfgDesc>
 8016782:	4603      	mov	r3, r0
 8016784:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016786:	7bbb      	ldrb	r3, [r7, #14]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d103      	bne.n	8016794 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2205      	movs	r2, #5
 8016790:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016792:	e097      	b.n	80168c4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016794:	7bbb      	ldrb	r3, [r7, #14]
 8016796:	2b03      	cmp	r3, #3
 8016798:	f040 8094 	bne.w	80168c4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80167a2:	3301      	adds	r3, #1
 80167a4:	b2da      	uxtb	r2, r3
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80167b2:	2b03      	cmp	r3, #3
 80167b4:	d903      	bls.n	80167be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	220d      	movs	r2, #13
 80167ba:	701a      	strb	r2, [r3, #0]
      break;
 80167bc:	e082      	b.n	80168c4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	795b      	ldrb	r3, [r3, #5]
 80167c2:	4619      	mov	r1, r3
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f001 f818 	bl	80177fa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	791b      	ldrb	r3, [r3, #4]
 80167ce:	4619      	mov	r1, r3
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f001 f812 	bl	80177fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2200      	movs	r2, #0
 80167da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	2200      	movs	r2, #0
 80167e0:	701a      	strb	r2, [r3, #0]
      break;
 80167e2:	e06f      	b.n	80168c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d019      	beq.n	8016822 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80167fa:	23ff      	movs	r3, #255	; 0xff
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f000 f953 	bl	8016aa8 <USBH_Get_StringDesc>
 8016802:	4603      	mov	r3, r0
 8016804:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016806:	7bbb      	ldrb	r3, [r7, #14]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d103      	bne.n	8016814 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	2206      	movs	r2, #6
 8016810:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016812:	e059      	b.n	80168c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016814:	7bbb      	ldrb	r3, [r7, #14]
 8016816:	2b03      	cmp	r3, #3
 8016818:	d156      	bne.n	80168c8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2206      	movs	r2, #6
 801681e:	705a      	strb	r2, [r3, #1]
      break;
 8016820:	e052      	b.n	80168c8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	2206      	movs	r2, #6
 8016826:	705a      	strb	r2, [r3, #1]
      break;
 8016828:	e04e      	b.n	80168c8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8016830:	2b00      	cmp	r3, #0
 8016832:	d019      	beq.n	8016868 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016840:	23ff      	movs	r3, #255	; 0xff
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 f930 	bl	8016aa8 <USBH_Get_StringDesc>
 8016848:	4603      	mov	r3, r0
 801684a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801684c:	7bbb      	ldrb	r3, [r7, #14]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d103      	bne.n	801685a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2207      	movs	r2, #7
 8016856:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016858:	e038      	b.n	80168cc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801685a:	7bbb      	ldrb	r3, [r7, #14]
 801685c:	2b03      	cmp	r3, #3
 801685e:	d135      	bne.n	80168cc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2207      	movs	r2, #7
 8016864:	705a      	strb	r2, [r3, #1]
      break;
 8016866:	e031      	b.n	80168cc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2207      	movs	r2, #7
 801686c:	705a      	strb	r2, [r3, #1]
      break;
 801686e:	e02d      	b.n	80168cc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8016876:	2b00      	cmp	r3, #0
 8016878:	d017      	beq.n	80168aa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016886:	23ff      	movs	r3, #255	; 0xff
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f000 f90d 	bl	8016aa8 <USBH_Get_StringDesc>
 801688e:	4603      	mov	r3, r0
 8016890:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016892:	7bbb      	ldrb	r3, [r7, #14]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d102      	bne.n	801689e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8016898:	2300      	movs	r3, #0
 801689a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801689c:	e018      	b.n	80168d0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801689e:	7bbb      	ldrb	r3, [r7, #14]
 80168a0:	2b03      	cmp	r3, #3
 80168a2:	d115      	bne.n	80168d0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80168a4:	2300      	movs	r3, #0
 80168a6:	73fb      	strb	r3, [r7, #15]
      break;
 80168a8:	e012      	b.n	80168d0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80168aa:	2300      	movs	r3, #0
 80168ac:	73fb      	strb	r3, [r7, #15]
      break;
 80168ae:	e00f      	b.n	80168d0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80168b0:	bf00      	nop
 80168b2:	e00e      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168b4:	bf00      	nop
 80168b6:	e00c      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168b8:	bf00      	nop
 80168ba:	e00a      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168bc:	bf00      	nop
 80168be:	e008      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168c0:	bf00      	nop
 80168c2:	e006      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168c4:	bf00      	nop
 80168c6:	e004      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168c8:	bf00      	nop
 80168ca:	e002      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168cc:	bf00      	nop
 80168ce:	e000      	b.n	80168d2 <USBH_HandleEnum+0x3be>
      break;
 80168d0:	bf00      	nop
  }
  return Status;
 80168d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3710      	adds	r7, #16
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80168dc:	b480      	push	{r7}
 80168de:	b083      	sub	sp, #12
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	683a      	ldr	r2, [r7, #0]
 80168ea:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 80168ee:	bf00      	nop
 80168f0:	370c      	adds	r7, #12
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr

080168fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b082      	sub	sp, #8
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016908:	1c5a      	adds	r2, r3, #1
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f000 f804 	bl	801691e <USBH_HandleSof>
}
 8016916:	bf00      	nop
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b082      	sub	sp, #8
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	b2db      	uxtb	r3, r3
 801692c:	2b0b      	cmp	r3, #11
 801692e:	d10a      	bne.n	8016946 <USBH_HandleSof+0x28>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016936:	2b00      	cmp	r3, #0
 8016938:	d005      	beq.n	8016946 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016940:	699b      	ldr	r3, [r3, #24]
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	4798      	blx	r3
  }
}
 8016946:	bf00      	nop
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}

0801694e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801694e:	b480      	push	{r7}
 8016950:	b083      	sub	sp, #12
 8016952:	af00      	add	r7, sp, #0
 8016954:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2201      	movs	r2, #1
 801695a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801695e:	bf00      	nop
}
 8016960:	370c      	adds	r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016968:	4770      	bx	lr

0801696a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801696a:	b480      	push	{r7}
 801696c:	b083      	sub	sp, #12
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801697a:	bf00      	nop
}
 801697c:	370c      	adds	r7, #12
 801697e:	46bd      	mov	sp, r7
 8016980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016984:	4770      	bx	lr

08016986 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8016986:	b480      	push	{r7}
 8016988:	b083      	sub	sp, #12
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2201      	movs	r2, #1
 8016992:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2200      	movs	r2, #0
 801699a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80169a6:	2300      	movs	r3, #0
}
 80169a8:	4618      	mov	r0, r3
 80169aa:	370c      	adds	r7, #12
 80169ac:	46bd      	mov	sp, r7
 80169ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b2:	4770      	bx	lr

080169b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2201      	movs	r2, #1
 80169c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2200      	movs	r2, #0
 80169c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2200      	movs	r2, #0
 80169d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ee fb34 	bl	8005042 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	791b      	ldrb	r3, [r3, #4]
 80169de:	4619      	mov	r1, r3
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 ff0a 	bl	80177fa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	795b      	ldrb	r3, [r3, #5]
 80169ea:	4619      	mov	r1, r3
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 ff04 	bl	80177fa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80169f2:	2300      	movs	r3, #0
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3708      	adds	r7, #8
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b086      	sub	sp, #24
 8016a00:	af02      	add	r7, sp, #8
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	460b      	mov	r3, r1
 8016a06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016a08:	887b      	ldrh	r3, [r7, #2]
 8016a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a0e:	d901      	bls.n	8016a14 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016a10:	2303      	movs	r3, #3
 8016a12:	e01b      	b.n	8016a4c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016a1a:	887b      	ldrh	r3, [r7, #2]
 8016a1c:	9300      	str	r3, [sp, #0]
 8016a1e:	4613      	mov	r3, r2
 8016a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016a24:	2100      	movs	r1, #0
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 f872 	bl	8016b10 <USBH_GetDescriptor>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016a30:	7bfb      	ldrb	r3, [r7, #15]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d109      	bne.n	8016a4a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016a3c:	887a      	ldrh	r2, [r7, #2]
 8016a3e:	4619      	mov	r1, r3
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 f929 	bl	8016c98 <USBH_ParseDevDesc>
 8016a46:	4603      	mov	r3, r0
 8016a48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3710      	adds	r7, #16
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b086      	sub	sp, #24
 8016a58:	af02      	add	r7, sp, #8
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	331c      	adds	r3, #28
 8016a64:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8016a66:	887b      	ldrh	r3, [r7, #2]
 8016a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a6c:	d901      	bls.n	8016a72 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016a6e:	2303      	movs	r3, #3
 8016a70:	e016      	b.n	8016aa0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8016a72:	887b      	ldrh	r3, [r7, #2]
 8016a74:	9300      	str	r3, [sp, #0]
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f000 f846 	bl	8016b10 <USBH_GetDescriptor>
 8016a84:	4603      	mov	r3, r0
 8016a86:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8016a88:	7bfb      	ldrb	r3, [r7, #15]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d107      	bne.n	8016a9e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016a8e:	887b      	ldrh	r3, [r7, #2]
 8016a90:	461a      	mov	r2, r3
 8016a92:	68b9      	ldr	r1, [r7, #8]
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f000 f9b3 	bl	8016e00 <USBH_ParseCfgDesc>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3710      	adds	r7, #16
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b088      	sub	sp, #32
 8016aac:	af02      	add	r7, sp, #8
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	607a      	str	r2, [r7, #4]
 8016ab2:	461a      	mov	r2, r3
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	72fb      	strb	r3, [r7, #11]
 8016ab8:	4613      	mov	r3, r2
 8016aba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016abc:	893b      	ldrh	r3, [r7, #8]
 8016abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ac2:	d802      	bhi.n	8016aca <USBH_Get_StringDesc+0x22>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d101      	bne.n	8016ace <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016aca:	2303      	movs	r3, #3
 8016acc:	e01c      	b.n	8016b08 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016ace:	7afb      	ldrb	r3, [r7, #11]
 8016ad0:	b29b      	uxth	r3, r3
 8016ad2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016ad6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016ade:	893b      	ldrh	r3, [r7, #8]
 8016ae0:	9300      	str	r3, [sp, #0]
 8016ae2:	460b      	mov	r3, r1
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f000 f812 	bl	8016b10 <USBH_GetDescriptor>
 8016aec:	4603      	mov	r3, r0
 8016aee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016af0:	7dfb      	ldrb	r3, [r7, #23]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d107      	bne.n	8016b06 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016afc:	893a      	ldrh	r2, [r7, #8]
 8016afe:	6879      	ldr	r1, [r7, #4]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f000 fb8a 	bl	801721a <USBH_ParseStringDesc>
  }

  return status;
 8016b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3718      	adds	r7, #24
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	607b      	str	r3, [r7, #4]
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	72fb      	strb	r3, [r7, #11]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	789b      	ldrb	r3, [r3, #2]
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	d11c      	bne.n	8016b64 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016b2a:	7afb      	ldrb	r3, [r7, #11]
 8016b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016b30:	b2da      	uxtb	r2, r3
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	2206      	movs	r2, #6
 8016b3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	893a      	ldrh	r2, [r7, #8]
 8016b40:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016b42:	893b      	ldrh	r3, [r7, #8]
 8016b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016b4c:	d104      	bne.n	8016b58 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	f240 4209 	movw	r2, #1033	; 0x409
 8016b54:	829a      	strh	r2, [r3, #20]
 8016b56:	e002      	b.n	8016b5e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	8b3a      	ldrh	r2, [r7, #24]
 8016b62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8016b64:	8b3b      	ldrh	r3, [r7, #24]
 8016b66:	461a      	mov	r2, r3
 8016b68:	6879      	ldr	r1, [r7, #4]
 8016b6a:	68f8      	ldr	r0, [r7, #12]
 8016b6c:	f000 fba3 	bl	80172b6 <USBH_CtlReq>
 8016b70:	4603      	mov	r3, r0
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3710      	adds	r7, #16
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}

08016b7a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016b7a:	b580      	push	{r7, lr}
 8016b7c:	b082      	sub	sp, #8
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	6078      	str	r0, [r7, #4]
 8016b82:	460b      	mov	r3, r1
 8016b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	789b      	ldrb	r3, [r3, #2]
 8016b8a:	2b01      	cmp	r3, #1
 8016b8c:	d10f      	bne.n	8016bae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2200      	movs	r2, #0
 8016b92:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2205      	movs	r2, #5
 8016b98:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016b9a:	78fb      	ldrb	r3, [r7, #3]
 8016b9c:	b29a      	uxth	r2, r3
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2200      	movs	r2, #0
 8016bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016bae:	2200      	movs	r2, #0
 8016bb0:	2100      	movs	r1, #0
 8016bb2:	6878      	ldr	r0, [r7, #4]
 8016bb4:	f000 fb7f 	bl	80172b6 <USBH_CtlReq>
 8016bb8:	4603      	mov	r3, r0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3708      	adds	r7, #8
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b082      	sub	sp, #8
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
 8016bca:	460b      	mov	r3, r1
 8016bcc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	789b      	ldrb	r3, [r3, #2]
 8016bd2:	2b01      	cmp	r3, #1
 8016bd4:	d10e      	bne.n	8016bf4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2209      	movs	r2, #9
 8016be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	887a      	ldrh	r2, [r7, #2]
 8016be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2200      	movs	r2, #0
 8016bec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	2100      	movs	r1, #0
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f000 fb5c 	bl	80172b6 <USBH_CtlReq>
 8016bfe:	4603      	mov	r3, r0
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3708      	adds	r7, #8
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	460b      	mov	r3, r1
 8016c12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	789b      	ldrb	r3, [r3, #2]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d10f      	bne.n	8016c3c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2203      	movs	r2, #3
 8016c26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016c28:	78fb      	ldrb	r3, [r7, #3]
 8016c2a:	b29a      	uxth	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2100      	movs	r1, #0
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 fb38 	bl	80172b6 <USBH_CtlReq>
 8016c46:	4603      	mov	r3, r0
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	789b      	ldrb	r3, [r3, #2]
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d10f      	bne.n	8016c84 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2202      	movs	r2, #2
 8016c68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2201      	movs	r2, #1
 8016c6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2200      	movs	r2, #0
 8016c74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8016c76:	78fb      	ldrb	r3, [r7, #3]
 8016c78:	b29a      	uxth	r2, r3
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2200      	movs	r2, #0
 8016c82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016c84:	2200      	movs	r2, #0
 8016c86:	2100      	movs	r1, #0
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f000 fb14 	bl	80172b6 <USBH_CtlReq>
 8016c8e:	4603      	mov	r3, r0
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b087      	sub	sp, #28
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f203 3326 	addw	r3, r3, #806	; 0x326
 8016cac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d101      	bne.n	8016cbc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8016cb8:	2302      	movs	r3, #2
 8016cba:	e098      	b.n	8016dee <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	781a      	ldrb	r2, [r3, #0]
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	785a      	ldrb	r2, [r3, #1]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	3302      	adds	r3, #2
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	3303      	adds	r3, #3
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	021b      	lsls	r3, r3, #8
 8016cde:	b29b      	uxth	r3, r3
 8016ce0:	4313      	orrs	r3, r2
 8016ce2:	b29a      	uxth	r2, r3
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	791a      	ldrb	r2, [r3, #4]
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	795a      	ldrb	r2, [r3, #5]
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	799a      	ldrb	r2, [r3, #6]
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	79da      	ldrb	r2, [r3, #7]
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016d18:	2b01      	cmp	r3, #1
 8016d1a:	d11b      	bne.n	8016d54 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	79db      	ldrb	r3, [r3, #7]
 8016d20:	2b20      	cmp	r3, #32
 8016d22:	dc0f      	bgt.n	8016d44 <USBH_ParseDevDesc+0xac>
 8016d24:	2b08      	cmp	r3, #8
 8016d26:	db0f      	blt.n	8016d48 <USBH_ParseDevDesc+0xb0>
 8016d28:	3b08      	subs	r3, #8
 8016d2a:	4a34      	ldr	r2, [pc, #208]	; (8016dfc <USBH_ParseDevDesc+0x164>)
 8016d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8016d30:	f003 0301 	and.w	r3, r3, #1
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	bf14      	ite	ne
 8016d38:	2301      	movne	r3, #1
 8016d3a:	2300      	moveq	r3, #0
 8016d3c:	b2db      	uxtb	r3, r3
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d106      	bne.n	8016d50 <USBH_ParseDevDesc+0xb8>
 8016d42:	e001      	b.n	8016d48 <USBH_ParseDevDesc+0xb0>
 8016d44:	2b40      	cmp	r3, #64	; 0x40
 8016d46:	d003      	beq.n	8016d50 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	2208      	movs	r2, #8
 8016d4c:	71da      	strb	r2, [r3, #7]
        break;
 8016d4e:	e000      	b.n	8016d52 <USBH_ParseDevDesc+0xba>
        break;
 8016d50:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016d52:	e00e      	b.n	8016d72 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016d5a:	2b02      	cmp	r3, #2
 8016d5c:	d107      	bne.n	8016d6e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	79db      	ldrb	r3, [r3, #7]
 8016d62:	2b08      	cmp	r3, #8
 8016d64:	d005      	beq.n	8016d72 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	2208      	movs	r2, #8
 8016d6a:	71da      	strb	r2, [r3, #7]
 8016d6c:	e001      	b.n	8016d72 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016d6e:	2303      	movs	r3, #3
 8016d70:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016d72:	88fb      	ldrh	r3, [r7, #6]
 8016d74:	2b08      	cmp	r3, #8
 8016d76:	d939      	bls.n	8016dec <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	3308      	adds	r3, #8
 8016d7c:	781b      	ldrb	r3, [r3, #0]
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	3309      	adds	r3, #9
 8016d84:	781b      	ldrb	r3, [r3, #0]
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	021b      	lsls	r3, r3, #8
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	4313      	orrs	r3, r2
 8016d8e:	b29a      	uxth	r2, r3
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	330a      	adds	r3, #10
 8016d98:	781b      	ldrb	r3, [r3, #0]
 8016d9a:	b29a      	uxth	r2, r3
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	330b      	adds	r3, #11
 8016da0:	781b      	ldrb	r3, [r3, #0]
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	021b      	lsls	r3, r3, #8
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	4313      	orrs	r3, r2
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	330c      	adds	r3, #12
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	b29a      	uxth	r2, r3
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	330d      	adds	r3, #13
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	021b      	lsls	r3, r3, #8
 8016dc2:	b29b      	uxth	r3, r3
 8016dc4:	4313      	orrs	r3, r2
 8016dc6:	b29a      	uxth	r2, r3
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	7b9a      	ldrb	r2, [r3, #14]
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	7bda      	ldrb	r2, [r3, #15]
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	7c1a      	ldrb	r2, [r3, #16]
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	7c5a      	ldrb	r2, [r3, #17]
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	371c      	adds	r7, #28
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop
 8016dfc:	01000101 	.word	0x01000101

08016e00 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b08c      	sub	sp, #48	; 0x30
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016e14:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016e16:	2300      	movs	r3, #0
 8016e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016e22:	2300      	movs	r3, #0
 8016e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d101      	bne.n	8016e32 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016e2e:	2302      	movs	r3, #2
 8016e30:	e0d7      	b.n	8016fe2 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	781a      	ldrb	r2, [r3, #0]
 8016e3a:	6a3b      	ldr	r3, [r7, #32]
 8016e3c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	785a      	ldrb	r2, [r3, #1]
 8016e42:	6a3b      	ldr	r3, [r7, #32]
 8016e44:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	3302      	adds	r3, #2
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	b29a      	uxth	r2, r3
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	3303      	adds	r3, #3
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	021b      	lsls	r3, r3, #8
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	4313      	orrs	r3, r2
 8016e5c:	b29b      	uxth	r3, r3
 8016e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e62:	bf28      	it	cs
 8016e64:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016e68:	b29a      	uxth	r2, r3
 8016e6a:	6a3b      	ldr	r3, [r7, #32]
 8016e6c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	791a      	ldrb	r2, [r3, #4]
 8016e72:	6a3b      	ldr	r3, [r7, #32]
 8016e74:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	795a      	ldrb	r2, [r3, #5]
 8016e7a:	6a3b      	ldr	r3, [r7, #32]
 8016e7c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	799a      	ldrb	r2, [r3, #6]
 8016e82:	6a3b      	ldr	r3, [r7, #32]
 8016e84:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	79da      	ldrb	r2, [r3, #7]
 8016e8a:	6a3b      	ldr	r3, [r7, #32]
 8016e8c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	7a1a      	ldrb	r2, [r3, #8]
 8016e92:	6a3b      	ldr	r3, [r7, #32]
 8016e94:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8016e96:	6a3b      	ldr	r3, [r7, #32]
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	2b09      	cmp	r3, #9
 8016e9c:	d002      	beq.n	8016ea4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016e9e:	6a3b      	ldr	r3, [r7, #32]
 8016ea0:	2209      	movs	r2, #9
 8016ea2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016ea4:	88fb      	ldrh	r3, [r7, #6]
 8016ea6:	2b09      	cmp	r3, #9
 8016ea8:	f240 8099 	bls.w	8016fde <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8016eac:	2309      	movs	r3, #9
 8016eae:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016eb4:	e07d      	b.n	8016fb2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016eb6:	f107 0316 	add.w	r3, r7, #22
 8016eba:	4619      	mov	r1, r3
 8016ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ebe:	f000 f9df 	bl	8017280 <USBH_GetNextDesc>
 8016ec2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec6:	785b      	ldrb	r3, [r3, #1]
 8016ec8:	2b04      	cmp	r3, #4
 8016eca:	d172      	bne.n	8016fb2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	2b09      	cmp	r3, #9
 8016ed2:	d002      	beq.n	8016eda <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	2209      	movs	r2, #9
 8016ed8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8016eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ede:	221a      	movs	r2, #26
 8016ee0:	fb02 f303 	mul.w	r3, r2, r3
 8016ee4:	3308      	adds	r3, #8
 8016ee6:	6a3a      	ldr	r2, [r7, #32]
 8016ee8:	4413      	add	r3, r2
 8016eea:	3302      	adds	r3, #2
 8016eec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016ef0:	69f8      	ldr	r0, [r7, #28]
 8016ef2:	f000 f87a 	bl	8016fea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016efc:	2300      	movs	r3, #0
 8016efe:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016f00:	e03f      	b.n	8016f82 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016f02:	f107 0316 	add.w	r3, r7, #22
 8016f06:	4619      	mov	r1, r3
 8016f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f0a:	f000 f9b9 	bl	8017280 <USBH_GetNextDesc>
 8016f0e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f12:	785b      	ldrb	r3, [r3, #1]
 8016f14:	2b05      	cmp	r3, #5
 8016f16:	d134      	bne.n	8016f82 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	795b      	ldrb	r3, [r3, #5]
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d10f      	bne.n	8016f40 <USBH_ParseCfgDesc+0x140>
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	799b      	ldrb	r3, [r3, #6]
 8016f24:	2b02      	cmp	r3, #2
 8016f26:	d10b      	bne.n	8016f40 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	79db      	ldrb	r3, [r3, #7]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d10b      	bne.n	8016f48 <USBH_ParseCfgDesc+0x148>
 8016f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	2b09      	cmp	r3, #9
 8016f36:	d007      	beq.n	8016f48 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f3a:	2209      	movs	r2, #9
 8016f3c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016f3e:	e003      	b.n	8016f48 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f42:	2207      	movs	r2, #7
 8016f44:	701a      	strb	r2, [r3, #0]
 8016f46:	e000      	b.n	8016f4a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016f48:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016f52:	3201      	adds	r2, #1
 8016f54:	00d2      	lsls	r2, r2, #3
 8016f56:	211a      	movs	r1, #26
 8016f58:	fb01 f303 	mul.w	r3, r1, r3
 8016f5c:	4413      	add	r3, r2
 8016f5e:	3308      	adds	r3, #8
 8016f60:	6a3a      	ldr	r2, [r7, #32]
 8016f62:	4413      	add	r3, r2
 8016f64:	3304      	adds	r3, #4
 8016f66:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f6a:	69b9      	ldr	r1, [r7, #24]
 8016f6c:	68f8      	ldr	r0, [r7, #12]
 8016f6e:	f000 f86b 	bl	8017048 <USBH_ParseEPDesc>
 8016f72:	4603      	mov	r3, r0
 8016f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016f82:	69fb      	ldr	r3, [r7, #28]
 8016f84:	791b      	ldrb	r3, [r3, #4]
 8016f86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	d204      	bcs.n	8016f98 <USBH_ParseCfgDesc+0x198>
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	885a      	ldrh	r2, [r3, #2]
 8016f92:	8afb      	ldrh	r3, [r7, #22]
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d8b4      	bhi.n	8016f02 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016f98:	69fb      	ldr	r3, [r7, #28]
 8016f9a:	791b      	ldrb	r3, [r3, #4]
 8016f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d201      	bcs.n	8016fa8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8016fa4:	2303      	movs	r3, #3
 8016fa6:	e01c      	b.n	8016fe2 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8016fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fac:	3301      	adds	r3, #1
 8016fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fb6:	2b09      	cmp	r3, #9
 8016fb8:	d805      	bhi.n	8016fc6 <USBH_ParseCfgDesc+0x1c6>
 8016fba:	6a3b      	ldr	r3, [r7, #32]
 8016fbc:	885a      	ldrh	r2, [r3, #2]
 8016fbe:	8afb      	ldrh	r3, [r7, #22]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	f63f af78 	bhi.w	8016eb6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	791b      	ldrb	r3, [r3, #4]
 8016fca:	2b0a      	cmp	r3, #10
 8016fcc:	bf28      	it	cs
 8016fce:	230a      	movcs	r3, #10
 8016fd0:	b2db      	uxtb	r3, r3
 8016fd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d201      	bcs.n	8016fde <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016fda:	2303      	movs	r3, #3
 8016fdc:	e001      	b.n	8016fe2 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3730      	adds	r7, #48	; 0x30
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016fea:	b480      	push	{r7}
 8016fec:	b083      	sub	sp, #12
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
 8016ff2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	781a      	ldrb	r2, [r3, #0]
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	785a      	ldrb	r2, [r3, #1]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	789a      	ldrb	r2, [r3, #2]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	78da      	ldrb	r2, [r3, #3]
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	791a      	ldrb	r2, [r3, #4]
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	795a      	ldrb	r2, [r3, #5]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	799a      	ldrb	r2, [r3, #6]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	79da      	ldrb	r2, [r3, #7]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	7a1a      	ldrb	r2, [r3, #8]
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	721a      	strb	r2, [r3, #8]
}
 801703c:	bf00      	nop
 801703e:	370c      	adds	r7, #12
 8017040:	46bd      	mov	sp, r7
 8017042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017046:	4770      	bx	lr

08017048 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8017048:	b480      	push	{r7}
 801704a:	b087      	sub	sp, #28
 801704c:	af00      	add	r7, sp, #0
 801704e:	60f8      	str	r0, [r7, #12]
 8017050:	60b9      	str	r1, [r7, #8]
 8017052:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8017054:	2300      	movs	r3, #0
 8017056:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	781a      	ldrb	r2, [r3, #0]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	785a      	ldrb	r2, [r3, #1]
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	789a      	ldrb	r2, [r3, #2]
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	78da      	ldrb	r2, [r3, #3]
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	3304      	adds	r3, #4
 801707c:	781b      	ldrb	r3, [r3, #0]
 801707e:	b29a      	uxth	r2, r3
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	3305      	adds	r3, #5
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	b29b      	uxth	r3, r3
 8017088:	021b      	lsls	r3, r3, #8
 801708a:	b29b      	uxth	r3, r3
 801708c:	4313      	orrs	r3, r2
 801708e:	b29a      	uxth	r2, r3
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	799a      	ldrb	r2, [r3, #6]
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	889b      	ldrh	r3, [r3, #4]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d009      	beq.n	80170b8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80170a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80170ac:	d804      	bhi.n	80170b8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80170b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170b6:	d901      	bls.n	80170bc <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80170b8:	2303      	movs	r3, #3
 80170ba:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d136      	bne.n	8017134 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	78db      	ldrb	r3, [r3, #3]
 80170ca:	f003 0303 	and.w	r3, r3, #3
 80170ce:	2b02      	cmp	r3, #2
 80170d0:	d108      	bne.n	80170e4 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	889b      	ldrh	r3, [r3, #4]
 80170d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170da:	f240 8097 	bls.w	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80170de:	2303      	movs	r3, #3
 80170e0:	75fb      	strb	r3, [r7, #23]
 80170e2:	e093      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	78db      	ldrb	r3, [r3, #3]
 80170e8:	f003 0303 	and.w	r3, r3, #3
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d107      	bne.n	8017100 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	889b      	ldrh	r3, [r3, #4]
 80170f4:	2b40      	cmp	r3, #64	; 0x40
 80170f6:	f240 8089 	bls.w	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80170fa:	2303      	movs	r3, #3
 80170fc:	75fb      	strb	r3, [r7, #23]
 80170fe:	e085      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	78db      	ldrb	r3, [r3, #3]
 8017104:	f003 0303 	and.w	r3, r3, #3
 8017108:	2b01      	cmp	r3, #1
 801710a:	d005      	beq.n	8017118 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	78db      	ldrb	r3, [r3, #3]
 8017110:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8017114:	2b03      	cmp	r3, #3
 8017116:	d10a      	bne.n	801712e <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	799b      	ldrb	r3, [r3, #6]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d003      	beq.n	8017128 <USBH_ParseEPDesc+0xe0>
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	799b      	ldrb	r3, [r3, #6]
 8017124:	2b10      	cmp	r3, #16
 8017126:	d970      	bls.n	801720a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017128:	2303      	movs	r3, #3
 801712a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801712c:	e06d      	b.n	801720a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801712e:	2303      	movs	r3, #3
 8017130:	75fb      	strb	r3, [r7, #23]
 8017132:	e06b      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801713a:	2b01      	cmp	r3, #1
 801713c:	d13c      	bne.n	80171b8 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	78db      	ldrb	r3, [r3, #3]
 8017142:	f003 0303 	and.w	r3, r3, #3
 8017146:	2b02      	cmp	r3, #2
 8017148:	d005      	beq.n	8017156 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	78db      	ldrb	r3, [r3, #3]
 801714e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8017152:	2b00      	cmp	r3, #0
 8017154:	d106      	bne.n	8017164 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	889b      	ldrh	r3, [r3, #4]
 801715a:	2b40      	cmp	r3, #64	; 0x40
 801715c:	d956      	bls.n	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801715e:	2303      	movs	r3, #3
 8017160:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8017162:	e053      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	78db      	ldrb	r3, [r3, #3]
 8017168:	f003 0303 	and.w	r3, r3, #3
 801716c:	2b01      	cmp	r3, #1
 801716e:	d10e      	bne.n	801718e <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	799b      	ldrb	r3, [r3, #6]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d007      	beq.n	8017188 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801717c:	2b10      	cmp	r3, #16
 801717e:	d803      	bhi.n	8017188 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8017184:	2b40      	cmp	r3, #64	; 0x40
 8017186:	d941      	bls.n	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8017188:	2303      	movs	r3, #3
 801718a:	75fb      	strb	r3, [r7, #23]
 801718c:	e03e      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	78db      	ldrb	r3, [r3, #3]
 8017192:	f003 0303 	and.w	r3, r3, #3
 8017196:	2b03      	cmp	r3, #3
 8017198:	d10b      	bne.n	80171b2 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	799b      	ldrb	r3, [r3, #6]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d004      	beq.n	80171ac <USBH_ParseEPDesc+0x164>
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	889b      	ldrh	r3, [r3, #4]
 80171a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80171aa:	d32f      	bcc.n	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80171ac:	2303      	movs	r3, #3
 80171ae:	75fb      	strb	r3, [r7, #23]
 80171b0:	e02c      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80171b2:	2303      	movs	r3, #3
 80171b4:	75fb      	strb	r3, [r7, #23]
 80171b6:	e029      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d120      	bne.n	8017204 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	78db      	ldrb	r3, [r3, #3]
 80171c6:	f003 0303 	and.w	r3, r3, #3
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d106      	bne.n	80171dc <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	889b      	ldrh	r3, [r3, #4]
 80171d2:	2b08      	cmp	r3, #8
 80171d4:	d01a      	beq.n	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80171d6:	2303      	movs	r3, #3
 80171d8:	75fb      	strb	r3, [r7, #23]
 80171da:	e017      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	78db      	ldrb	r3, [r3, #3]
 80171e0:	f003 0303 	and.w	r3, r3, #3
 80171e4:	2b03      	cmp	r3, #3
 80171e6:	d10a      	bne.n	80171fe <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	799b      	ldrb	r3, [r3, #6]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d003      	beq.n	80171f8 <USBH_ParseEPDesc+0x1b0>
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	889b      	ldrh	r3, [r3, #4]
 80171f4:	2b08      	cmp	r3, #8
 80171f6:	d909      	bls.n	801720c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80171f8:	2303      	movs	r3, #3
 80171fa:	75fb      	strb	r3, [r7, #23]
 80171fc:	e006      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80171fe:	2303      	movs	r3, #3
 8017200:	75fb      	strb	r3, [r7, #23]
 8017202:	e003      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8017204:	2303      	movs	r3, #3
 8017206:	75fb      	strb	r3, [r7, #23]
 8017208:	e000      	b.n	801720c <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801720a:	bf00      	nop
  }

  return status;
 801720c:	7dfb      	ldrb	r3, [r7, #23]
}
 801720e:	4618      	mov	r0, r3
 8017210:	371c      	adds	r7, #28
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr

0801721a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801721a:	b480      	push	{r7}
 801721c:	b087      	sub	sp, #28
 801721e:	af00      	add	r7, sp, #0
 8017220:	60f8      	str	r0, [r7, #12]
 8017222:	60b9      	str	r1, [r7, #8]
 8017224:	4613      	mov	r3, r2
 8017226:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	3301      	adds	r3, #1
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	2b03      	cmp	r3, #3
 8017230:	d120      	bne.n	8017274 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	1e9a      	subs	r2, r3, #2
 8017238:	88fb      	ldrh	r3, [r7, #6]
 801723a:	4293      	cmp	r3, r2
 801723c:	bf28      	it	cs
 801723e:	4613      	movcs	r3, r2
 8017240:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	3302      	adds	r3, #2
 8017246:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8017248:	2300      	movs	r3, #0
 801724a:	82fb      	strh	r3, [r7, #22]
 801724c:	e00b      	b.n	8017266 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801724e:	8afb      	ldrh	r3, [r7, #22]
 8017250:	68fa      	ldr	r2, [r7, #12]
 8017252:	4413      	add	r3, r2
 8017254:	781a      	ldrb	r2, [r3, #0]
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	701a      	strb	r2, [r3, #0]
      pdest++;
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	3301      	adds	r3, #1
 801725e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8017260:	8afb      	ldrh	r3, [r7, #22]
 8017262:	3302      	adds	r3, #2
 8017264:	82fb      	strh	r3, [r7, #22]
 8017266:	8afa      	ldrh	r2, [r7, #22]
 8017268:	8abb      	ldrh	r3, [r7, #20]
 801726a:	429a      	cmp	r2, r3
 801726c:	d3ef      	bcc.n	801724e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	2200      	movs	r2, #0
 8017272:	701a      	strb	r2, [r3, #0]
  }
}
 8017274:	bf00      	nop
 8017276:	371c      	adds	r7, #28
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr

08017280 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017280:	b480      	push	{r7}
 8017282:	b085      	sub	sp, #20
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	881a      	ldrh	r2, [r3, #0]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	b29b      	uxth	r3, r3
 8017294:	4413      	add	r3, r2
 8017296:	b29a      	uxth	r2, r3
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	4413      	add	r3, r2
 80172a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80172a8:	68fb      	ldr	r3, [r7, #12]
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	3714      	adds	r7, #20
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b086      	sub	sp, #24
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	60f8      	str	r0, [r7, #12]
 80172be:	60b9      	str	r1, [r7, #8]
 80172c0:	4613      	mov	r3, r2
 80172c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80172c4:	2301      	movs	r3, #1
 80172c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	789b      	ldrb	r3, [r3, #2]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d002      	beq.n	80172d6 <USBH_CtlReq+0x20>
 80172d0:	2b02      	cmp	r3, #2
 80172d2:	d00f      	beq.n	80172f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80172d4:	e027      	b.n	8017326 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	68ba      	ldr	r2, [r7, #8]
 80172da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	88fa      	ldrh	r2, [r7, #6]
 80172e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	2201      	movs	r2, #1
 80172e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	2202      	movs	r2, #2
 80172ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80172ee:	2301      	movs	r3, #1
 80172f0:	75fb      	strb	r3, [r7, #23]
      break;
 80172f2:	e018      	b.n	8017326 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80172f4:	68f8      	ldr	r0, [r7, #12]
 80172f6:	f000 f81b 	bl	8017330 <USBH_HandleControl>
 80172fa:	4603      	mov	r3, r0
 80172fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80172fe:	7dfb      	ldrb	r3, [r7, #23]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d002      	beq.n	801730a <USBH_CtlReq+0x54>
 8017304:	7dfb      	ldrb	r3, [r7, #23]
 8017306:	2b03      	cmp	r3, #3
 8017308:	d106      	bne.n	8017318 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	2201      	movs	r2, #1
 801730e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2200      	movs	r2, #0
 8017314:	761a      	strb	r2, [r3, #24]
      break;
 8017316:	e005      	b.n	8017324 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8017318:	7dfb      	ldrb	r3, [r7, #23]
 801731a:	2b02      	cmp	r3, #2
 801731c:	d102      	bne.n	8017324 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	2201      	movs	r2, #1
 8017322:	709a      	strb	r2, [r3, #2]
      break;
 8017324:	bf00      	nop
  }
  return status;
 8017326:	7dfb      	ldrb	r3, [r7, #23]
}
 8017328:	4618      	mov	r0, r3
 801732a:	3718      	adds	r7, #24
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}

08017330 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b086      	sub	sp, #24
 8017334:	af02      	add	r7, sp, #8
 8017336:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8017338:	2301      	movs	r3, #1
 801733a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801733c:	2300      	movs	r3, #0
 801733e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	7e1b      	ldrb	r3, [r3, #24]
 8017344:	3b01      	subs	r3, #1
 8017346:	2b0a      	cmp	r3, #10
 8017348:	f200 8156 	bhi.w	80175f8 <USBH_HandleControl+0x2c8>
 801734c:	a201      	add	r2, pc, #4	; (adr r2, 8017354 <USBH_HandleControl+0x24>)
 801734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017352:	bf00      	nop
 8017354:	08017381 	.word	0x08017381
 8017358:	0801739b 	.word	0x0801739b
 801735c:	08017405 	.word	0x08017405
 8017360:	0801742b 	.word	0x0801742b
 8017364:	08017463 	.word	0x08017463
 8017368:	0801748d 	.word	0x0801748d
 801736c:	080174df 	.word	0x080174df
 8017370:	08017501 	.word	0x08017501
 8017374:	0801753d 	.word	0x0801753d
 8017378:	08017563 	.word	0x08017563
 801737c:	080175a1 	.word	0x080175a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f103 0110 	add.w	r1, r3, #16
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	795b      	ldrb	r3, [r3, #5]
 801738a:	461a      	mov	r2, r3
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f000 f943 	bl	8017618 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2202      	movs	r2, #2
 8017396:	761a      	strb	r2, [r3, #24]
      break;
 8017398:	e139      	b.n	801760e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	795b      	ldrb	r3, [r3, #5]
 801739e:	4619      	mov	r1, r3
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7ed ff3d 	bl	8005220 <USBH_LL_GetURBState>
 80173a6:	4603      	mov	r3, r0
 80173a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80173aa:	7bbb      	ldrb	r3, [r7, #14]
 80173ac:	2b01      	cmp	r3, #1
 80173ae:	d11e      	bne.n	80173ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	7c1b      	ldrb	r3, [r3, #16]
 80173b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80173b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	8adb      	ldrh	r3, [r3, #22]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d00a      	beq.n	80173d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80173c2:	7b7b      	ldrb	r3, [r7, #13]
 80173c4:	2b80      	cmp	r3, #128	; 0x80
 80173c6:	d103      	bne.n	80173d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2203      	movs	r2, #3
 80173cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80173ce:	e115      	b.n	80175fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2205      	movs	r2, #5
 80173d4:	761a      	strb	r2, [r3, #24]
      break;
 80173d6:	e111      	b.n	80175fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80173d8:	7b7b      	ldrb	r3, [r7, #13]
 80173da:	2b80      	cmp	r3, #128	; 0x80
 80173dc:	d103      	bne.n	80173e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2209      	movs	r2, #9
 80173e2:	761a      	strb	r2, [r3, #24]
      break;
 80173e4:	e10a      	b.n	80175fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	2207      	movs	r2, #7
 80173ea:	761a      	strb	r2, [r3, #24]
      break;
 80173ec:	e106      	b.n	80175fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80173ee:	7bbb      	ldrb	r3, [r7, #14]
 80173f0:	2b04      	cmp	r3, #4
 80173f2:	d003      	beq.n	80173fc <USBH_HandleControl+0xcc>
 80173f4:	7bbb      	ldrb	r3, [r7, #14]
 80173f6:	2b02      	cmp	r3, #2
 80173f8:	f040 8100 	bne.w	80175fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	220b      	movs	r2, #11
 8017400:	761a      	strb	r2, [r3, #24]
      break;
 8017402:	e0fb      	b.n	80175fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801740a:	b29a      	uxth	r2, r3
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6899      	ldr	r1, [r3, #8]
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	899a      	ldrh	r2, [r3, #12]
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	791b      	ldrb	r3, [r3, #4]
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f000 f93a 	bl	8017696 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2204      	movs	r2, #4
 8017426:	761a      	strb	r2, [r3, #24]
      break;
 8017428:	e0f1      	b.n	801760e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	791b      	ldrb	r3, [r3, #4]
 801742e:	4619      	mov	r1, r3
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f7ed fef5 	bl	8005220 <USBH_LL_GetURBState>
 8017436:	4603      	mov	r3, r0
 8017438:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801743a:	7bbb      	ldrb	r3, [r7, #14]
 801743c:	2b01      	cmp	r3, #1
 801743e:	d102      	bne.n	8017446 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2209      	movs	r2, #9
 8017444:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8017446:	7bbb      	ldrb	r3, [r7, #14]
 8017448:	2b05      	cmp	r3, #5
 801744a:	d102      	bne.n	8017452 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801744c:	2303      	movs	r3, #3
 801744e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017450:	e0d6      	b.n	8017600 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8017452:	7bbb      	ldrb	r3, [r7, #14]
 8017454:	2b04      	cmp	r3, #4
 8017456:	f040 80d3 	bne.w	8017600 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	220b      	movs	r2, #11
 801745e:	761a      	strb	r2, [r3, #24]
      break;
 8017460:	e0ce      	b.n	8017600 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6899      	ldr	r1, [r3, #8]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	899a      	ldrh	r2, [r3, #12]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	795b      	ldrb	r3, [r3, #5]
 801746e:	2001      	movs	r0, #1
 8017470:	9000      	str	r0, [sp, #0]
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f000 f8ea 	bl	801764c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801747e:	b29a      	uxth	r2, r3
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2206      	movs	r2, #6
 8017488:	761a      	strb	r2, [r3, #24]
      break;
 801748a:	e0c0      	b.n	801760e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	795b      	ldrb	r3, [r3, #5]
 8017490:	4619      	mov	r1, r3
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f7ed fec4 	bl	8005220 <USBH_LL_GetURBState>
 8017498:	4603      	mov	r3, r0
 801749a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801749c:	7bbb      	ldrb	r3, [r7, #14]
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d103      	bne.n	80174aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2207      	movs	r2, #7
 80174a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80174a8:	e0ac      	b.n	8017604 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80174aa:	7bbb      	ldrb	r3, [r7, #14]
 80174ac:	2b05      	cmp	r3, #5
 80174ae:	d105      	bne.n	80174bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	220c      	movs	r2, #12
 80174b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80174b6:	2303      	movs	r3, #3
 80174b8:	73fb      	strb	r3, [r7, #15]
      break;
 80174ba:	e0a3      	b.n	8017604 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80174bc:	7bbb      	ldrb	r3, [r7, #14]
 80174be:	2b02      	cmp	r3, #2
 80174c0:	d103      	bne.n	80174ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2205      	movs	r2, #5
 80174c6:	761a      	strb	r2, [r3, #24]
      break;
 80174c8:	e09c      	b.n	8017604 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80174ca:	7bbb      	ldrb	r3, [r7, #14]
 80174cc:	2b04      	cmp	r3, #4
 80174ce:	f040 8099 	bne.w	8017604 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	220b      	movs	r2, #11
 80174d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80174d8:	2302      	movs	r3, #2
 80174da:	73fb      	strb	r3, [r7, #15]
      break;
 80174dc:	e092      	b.n	8017604 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	791b      	ldrb	r3, [r3, #4]
 80174e2:	2200      	movs	r2, #0
 80174e4:	2100      	movs	r1, #0
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f000 f8d5 	bl	8017696 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2208      	movs	r2, #8
 80174fc:	761a      	strb	r2, [r3, #24]

      break;
 80174fe:	e086      	b.n	801760e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	791b      	ldrb	r3, [r3, #4]
 8017504:	4619      	mov	r1, r3
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7ed fe8a 	bl	8005220 <USBH_LL_GetURBState>
 801750c:	4603      	mov	r3, r0
 801750e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8017510:	7bbb      	ldrb	r3, [r7, #14]
 8017512:	2b01      	cmp	r3, #1
 8017514:	d105      	bne.n	8017522 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	220d      	movs	r2, #13
 801751a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801751c:	2300      	movs	r3, #0
 801751e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017520:	e072      	b.n	8017608 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8017522:	7bbb      	ldrb	r3, [r7, #14]
 8017524:	2b04      	cmp	r3, #4
 8017526:	d103      	bne.n	8017530 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	220b      	movs	r2, #11
 801752c:	761a      	strb	r2, [r3, #24]
      break;
 801752e:	e06b      	b.n	8017608 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8017530:	7bbb      	ldrb	r3, [r7, #14]
 8017532:	2b05      	cmp	r3, #5
 8017534:	d168      	bne.n	8017608 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8017536:	2303      	movs	r3, #3
 8017538:	73fb      	strb	r3, [r7, #15]
      break;
 801753a:	e065      	b.n	8017608 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	795b      	ldrb	r3, [r3, #5]
 8017540:	2201      	movs	r2, #1
 8017542:	9200      	str	r2, [sp, #0]
 8017544:	2200      	movs	r2, #0
 8017546:	2100      	movs	r1, #0
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 f87f 	bl	801764c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017554:	b29a      	uxth	r2, r3
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	220a      	movs	r2, #10
 801755e:	761a      	strb	r2, [r3, #24]
      break;
 8017560:	e055      	b.n	801760e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	795b      	ldrb	r3, [r3, #5]
 8017566:	4619      	mov	r1, r3
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f7ed fe59 	bl	8005220 <USBH_LL_GetURBState>
 801756e:	4603      	mov	r3, r0
 8017570:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8017572:	7bbb      	ldrb	r3, [r7, #14]
 8017574:	2b01      	cmp	r3, #1
 8017576:	d105      	bne.n	8017584 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8017578:	2300      	movs	r3, #0
 801757a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	220d      	movs	r2, #13
 8017580:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017582:	e043      	b.n	801760c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017584:	7bbb      	ldrb	r3, [r7, #14]
 8017586:	2b02      	cmp	r3, #2
 8017588:	d103      	bne.n	8017592 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2209      	movs	r2, #9
 801758e:	761a      	strb	r2, [r3, #24]
      break;
 8017590:	e03c      	b.n	801760c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8017592:	7bbb      	ldrb	r3, [r7, #14]
 8017594:	2b04      	cmp	r3, #4
 8017596:	d139      	bne.n	801760c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	220b      	movs	r2, #11
 801759c:	761a      	strb	r2, [r3, #24]
      break;
 801759e:	e035      	b.n	801760c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	7e5b      	ldrb	r3, [r3, #25]
 80175a4:	3301      	adds	r3, #1
 80175a6:	b2da      	uxtb	r2, r3
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	765a      	strb	r2, [r3, #25]
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	7e5b      	ldrb	r3, [r3, #25]
 80175b0:	2b02      	cmp	r3, #2
 80175b2:	d806      	bhi.n	80175c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2201      	movs	r2, #1
 80175b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2201      	movs	r2, #1
 80175be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80175c0:	e025      	b.n	801760e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80175c8:	2106      	movs	r1, #6
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2200      	movs	r2, #0
 80175d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	795b      	ldrb	r3, [r3, #5]
 80175d8:	4619      	mov	r1, r3
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 f90d 	bl	80177fa <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	791b      	ldrb	r3, [r3, #4]
 80175e4:	4619      	mov	r1, r3
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 f907 	bl	80177fa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2200      	movs	r2, #0
 80175f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80175f2:	2302      	movs	r3, #2
 80175f4:	73fb      	strb	r3, [r7, #15]
      break;
 80175f6:	e00a      	b.n	801760e <USBH_HandleControl+0x2de>

    default:
      break;
 80175f8:	bf00      	nop
 80175fa:	e008      	b.n	801760e <USBH_HandleControl+0x2de>
      break;
 80175fc:	bf00      	nop
 80175fe:	e006      	b.n	801760e <USBH_HandleControl+0x2de>
      break;
 8017600:	bf00      	nop
 8017602:	e004      	b.n	801760e <USBH_HandleControl+0x2de>
      break;
 8017604:	bf00      	nop
 8017606:	e002      	b.n	801760e <USBH_HandleControl+0x2de>
      break;
 8017608:	bf00      	nop
 801760a:	e000      	b.n	801760e <USBH_HandleControl+0x2de>
      break;
 801760c:	bf00      	nop
  }

  return status;
 801760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017610:	4618      	mov	r0, r3
 8017612:	3710      	adds	r7, #16
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}

08017618 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b088      	sub	sp, #32
 801761c:	af04      	add	r7, sp, #16
 801761e:	60f8      	str	r0, [r7, #12]
 8017620:	60b9      	str	r1, [r7, #8]
 8017622:	4613      	mov	r3, r2
 8017624:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017626:	79f9      	ldrb	r1, [r7, #7]
 8017628:	2300      	movs	r3, #0
 801762a:	9303      	str	r3, [sp, #12]
 801762c:	2308      	movs	r3, #8
 801762e:	9302      	str	r3, [sp, #8]
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	9301      	str	r3, [sp, #4]
 8017634:	2300      	movs	r3, #0
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	2300      	movs	r3, #0
 801763a:	2200      	movs	r2, #0
 801763c:	68f8      	ldr	r0, [r7, #12]
 801763e:	f7ed fdbe 	bl	80051be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8017642:	2300      	movs	r3, #0
}
 8017644:	4618      	mov	r0, r3
 8017646:	3710      	adds	r7, #16
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b088      	sub	sp, #32
 8017650:	af04      	add	r7, sp, #16
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	4611      	mov	r1, r2
 8017658:	461a      	mov	r2, r3
 801765a:	460b      	mov	r3, r1
 801765c:	80fb      	strh	r3, [r7, #6]
 801765e:	4613      	mov	r3, r2
 8017660:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017668:	2b00      	cmp	r3, #0
 801766a:	d001      	beq.n	8017670 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801766c:	2300      	movs	r3, #0
 801766e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017670:	7979      	ldrb	r1, [r7, #5]
 8017672:	7e3b      	ldrb	r3, [r7, #24]
 8017674:	9303      	str	r3, [sp, #12]
 8017676:	88fb      	ldrh	r3, [r7, #6]
 8017678:	9302      	str	r3, [sp, #8]
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	9301      	str	r3, [sp, #4]
 801767e:	2301      	movs	r3, #1
 8017680:	9300      	str	r3, [sp, #0]
 8017682:	2300      	movs	r3, #0
 8017684:	2200      	movs	r2, #0
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f7ed fd99 	bl	80051be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801768c:	2300      	movs	r3, #0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}

08017696 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8017696:	b580      	push	{r7, lr}
 8017698:	b088      	sub	sp, #32
 801769a:	af04      	add	r7, sp, #16
 801769c:	60f8      	str	r0, [r7, #12]
 801769e:	60b9      	str	r1, [r7, #8]
 80176a0:	4611      	mov	r1, r2
 80176a2:	461a      	mov	r2, r3
 80176a4:	460b      	mov	r3, r1
 80176a6:	80fb      	strh	r3, [r7, #6]
 80176a8:	4613      	mov	r3, r2
 80176aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80176ac:	7979      	ldrb	r1, [r7, #5]
 80176ae:	2300      	movs	r3, #0
 80176b0:	9303      	str	r3, [sp, #12]
 80176b2:	88fb      	ldrh	r3, [r7, #6]
 80176b4:	9302      	str	r3, [sp, #8]
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	9301      	str	r3, [sp, #4]
 80176ba:	2301      	movs	r3, #1
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	2300      	movs	r3, #0
 80176c0:	2201      	movs	r2, #1
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f7ed fd7b 	bl	80051be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80176c8:	2300      	movs	r3, #0

}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3710      	adds	r7, #16
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}

080176d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80176d2:	b580      	push	{r7, lr}
 80176d4:	b088      	sub	sp, #32
 80176d6:	af04      	add	r7, sp, #16
 80176d8:	60f8      	str	r0, [r7, #12]
 80176da:	60b9      	str	r1, [r7, #8]
 80176dc:	4611      	mov	r1, r2
 80176de:	461a      	mov	r2, r3
 80176e0:	460b      	mov	r3, r1
 80176e2:	80fb      	strh	r3, [r7, #6]
 80176e4:	4613      	mov	r3, r2
 80176e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d001      	beq.n	80176f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80176f2:	2300      	movs	r3, #0
 80176f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80176f6:	7979      	ldrb	r1, [r7, #5]
 80176f8:	7e3b      	ldrb	r3, [r7, #24]
 80176fa:	9303      	str	r3, [sp, #12]
 80176fc:	88fb      	ldrh	r3, [r7, #6]
 80176fe:	9302      	str	r3, [sp, #8]
 8017700:	68bb      	ldr	r3, [r7, #8]
 8017702:	9301      	str	r3, [sp, #4]
 8017704:	2301      	movs	r3, #1
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	2302      	movs	r3, #2
 801770a:	2200      	movs	r2, #0
 801770c:	68f8      	ldr	r0, [r7, #12]
 801770e:	f7ed fd56 	bl	80051be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8017712:	2300      	movs	r3, #0
}
 8017714:	4618      	mov	r0, r3
 8017716:	3710      	adds	r7, #16
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b088      	sub	sp, #32
 8017720:	af04      	add	r7, sp, #16
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	4611      	mov	r1, r2
 8017728:	461a      	mov	r2, r3
 801772a:	460b      	mov	r3, r1
 801772c:	80fb      	strh	r3, [r7, #6]
 801772e:	4613      	mov	r3, r2
 8017730:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017732:	7979      	ldrb	r1, [r7, #5]
 8017734:	2300      	movs	r3, #0
 8017736:	9303      	str	r3, [sp, #12]
 8017738:	88fb      	ldrh	r3, [r7, #6]
 801773a:	9302      	str	r3, [sp, #8]
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	9301      	str	r3, [sp, #4]
 8017740:	2301      	movs	r3, #1
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	2302      	movs	r3, #2
 8017746:	2201      	movs	r2, #1
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f7ed fd38 	bl	80051be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801774e:	2300      	movs	r3, #0
}
 8017750:	4618      	mov	r0, r3
 8017752:	3710      	adds	r7, #16
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}

08017758 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b086      	sub	sp, #24
 801775c:	af04      	add	r7, sp, #16
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	4608      	mov	r0, r1
 8017762:	4611      	mov	r1, r2
 8017764:	461a      	mov	r2, r3
 8017766:	4603      	mov	r3, r0
 8017768:	70fb      	strb	r3, [r7, #3]
 801776a:	460b      	mov	r3, r1
 801776c:	70bb      	strb	r3, [r7, #2]
 801776e:	4613      	mov	r3, r2
 8017770:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8017772:	7878      	ldrb	r0, [r7, #1]
 8017774:	78ba      	ldrb	r2, [r7, #2]
 8017776:	78f9      	ldrb	r1, [r7, #3]
 8017778:	8b3b      	ldrh	r3, [r7, #24]
 801777a:	9302      	str	r3, [sp, #8]
 801777c:	7d3b      	ldrb	r3, [r7, #20]
 801777e:	9301      	str	r3, [sp, #4]
 8017780:	7c3b      	ldrb	r3, [r7, #16]
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	4603      	mov	r3, r0
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7ed fccb 	bl	8005122 <USBH_LL_OpenPipe>

  return USBH_OK;
 801778c:	2300      	movs	r3, #0
}
 801778e:	4618      	mov	r0, r3
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8017796:	b580      	push	{r7, lr}
 8017798:	b082      	sub	sp, #8
 801779a:	af00      	add	r7, sp, #0
 801779c:	6078      	str	r0, [r7, #4]
 801779e:	460b      	mov	r3, r1
 80177a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80177a2:	78fb      	ldrb	r3, [r7, #3]
 80177a4:	4619      	mov	r1, r3
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f7ed fcea 	bl	8005180 <USBH_LL_ClosePipe>

  return USBH_OK;
 80177ac:	2300      	movs	r3, #0
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b084      	sub	sp, #16
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
 80177be:	460b      	mov	r3, r1
 80177c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80177c2:	6878      	ldr	r0, [r7, #4]
 80177c4:	f000 f839 	bl	801783a <USBH_GetFreePipe>
 80177c8:	4603      	mov	r3, r0
 80177ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80177cc:	89fb      	ldrh	r3, [r7, #14]
 80177ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d00b      	beq.n	80177ee <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80177d6:	78fa      	ldrb	r2, [r7, #3]
 80177d8:	89fb      	ldrh	r3, [r7, #14]
 80177da:	f003 030f 	and.w	r3, r3, #15
 80177de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80177e2:	6879      	ldr	r1, [r7, #4]
 80177e4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	440b      	add	r3, r1
 80177ec:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80177ee:	89fb      	ldrh	r3, [r7, #14]
 80177f0:	b2db      	uxtb	r3, r3
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3710      	adds	r7, #16
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}

080177fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80177fa:	b480      	push	{r7}
 80177fc:	b083      	sub	sp, #12
 80177fe:	af00      	add	r7, sp, #0
 8017800:	6078      	str	r0, [r7, #4]
 8017802:	460b      	mov	r3, r1
 8017804:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8017806:	78fb      	ldrb	r3, [r7, #3]
 8017808:	2b0f      	cmp	r3, #15
 801780a:	d80f      	bhi.n	801782c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801780c:	78fb      	ldrb	r3, [r7, #3]
 801780e:	687a      	ldr	r2, [r7, #4]
 8017810:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017814:	009b      	lsls	r3, r3, #2
 8017816:	4413      	add	r3, r2
 8017818:	685a      	ldr	r2, [r3, #4]
 801781a:	78fb      	ldrb	r3, [r7, #3]
 801781c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017820:	6879      	ldr	r1, [r7, #4]
 8017822:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017826:	009b      	lsls	r3, r3, #2
 8017828:	440b      	add	r3, r1
 801782a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801782c:	2300      	movs	r3, #0
}
 801782e:	4618      	mov	r0, r3
 8017830:	370c      	adds	r7, #12
 8017832:	46bd      	mov	sp, r7
 8017834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017838:	4770      	bx	lr

0801783a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801783a:	b480      	push	{r7}
 801783c:	b085      	sub	sp, #20
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8017842:	2300      	movs	r3, #0
 8017844:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017846:	2300      	movs	r3, #0
 8017848:	73fb      	strb	r3, [r7, #15]
 801784a:	e010      	b.n	801786e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801784c:	7bfb      	ldrb	r3, [r7, #15]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	4413      	add	r3, r2
 8017858:	685b      	ldr	r3, [r3, #4]
 801785a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801785e:	2b00      	cmp	r3, #0
 8017860:	d102      	bne.n	8017868 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8017862:	7bfb      	ldrb	r3, [r7, #15]
 8017864:	b29b      	uxth	r3, r3
 8017866:	e007      	b.n	8017878 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017868:	7bfb      	ldrb	r3, [r7, #15]
 801786a:	3301      	adds	r3, #1
 801786c:	73fb      	strb	r3, [r7, #15]
 801786e:	7bfb      	ldrb	r3, [r7, #15]
 8017870:	2b0f      	cmp	r3, #15
 8017872:	d9eb      	bls.n	801784c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8017874:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8017878:	4618      	mov	r0, r3
 801787a:	3714      	adds	r7, #20
 801787c:	46bd      	mov	sp, r7
 801787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017882:	4770      	bx	lr

08017884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017884:	b480      	push	{r7}
 8017886:	b087      	sub	sp, #28
 8017888:	af00      	add	r7, sp, #0
 801788a:	60f8      	str	r0, [r7, #12]
 801788c:	60b9      	str	r1, [r7, #8]
 801788e:	4613      	mov	r3, r2
 8017890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017892:	2301      	movs	r3, #1
 8017894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017896:	2300      	movs	r3, #0
 8017898:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801789a:	4b1f      	ldr	r3, [pc, #124]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 801789c:	7a5b      	ldrb	r3, [r3, #9]
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d131      	bne.n	8017908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80178a4:	4b1c      	ldr	r3, [pc, #112]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178a6:	7a5b      	ldrb	r3, [r3, #9]
 80178a8:	b2db      	uxtb	r3, r3
 80178aa:	461a      	mov	r2, r3
 80178ac:	4b1a      	ldr	r3, [pc, #104]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178ae:	2100      	movs	r1, #0
 80178b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80178b2:	4b19      	ldr	r3, [pc, #100]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178b4:	7a5b      	ldrb	r3, [r3, #9]
 80178b6:	b2db      	uxtb	r3, r3
 80178b8:	4a17      	ldr	r2, [pc, #92]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178ba:	009b      	lsls	r3, r3, #2
 80178bc:	4413      	add	r3, r2
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80178c2:	4b15      	ldr	r3, [pc, #84]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178c4:	7a5b      	ldrb	r3, [r3, #9]
 80178c6:	b2db      	uxtb	r3, r3
 80178c8:	461a      	mov	r2, r3
 80178ca:	4b13      	ldr	r3, [pc, #76]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178cc:	4413      	add	r3, r2
 80178ce:	79fa      	ldrb	r2, [r7, #7]
 80178d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80178d2:	4b11      	ldr	r3, [pc, #68]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178d4:	7a5b      	ldrb	r3, [r3, #9]
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	1c5a      	adds	r2, r3, #1
 80178da:	b2d1      	uxtb	r1, r2
 80178dc:	4a0e      	ldr	r2, [pc, #56]	; (8017918 <FATFS_LinkDriverEx+0x94>)
 80178de:	7251      	strb	r1, [r2, #9]
 80178e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80178e2:	7dbb      	ldrb	r3, [r7, #22]
 80178e4:	3330      	adds	r3, #48	; 0x30
 80178e6:	b2da      	uxtb	r2, r3
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	3301      	adds	r3, #1
 80178f0:	223a      	movs	r2, #58	; 0x3a
 80178f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	3302      	adds	r3, #2
 80178f8:	222f      	movs	r2, #47	; 0x2f
 80178fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	3303      	adds	r3, #3
 8017900:	2200      	movs	r2, #0
 8017902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017904:	2300      	movs	r3, #0
 8017906:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017908:	7dfb      	ldrb	r3, [r7, #23]
}
 801790a:	4618      	mov	r0, r3
 801790c:	371c      	adds	r7, #28
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	200020ac 	.word	0x200020ac

0801791c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017926:	2200      	movs	r2, #0
 8017928:	6839      	ldr	r1, [r7, #0]
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f7ff ffaa 	bl	8017884 <FATFS_LinkDriverEx>
 8017930:	4603      	mov	r3, r0
}
 8017932:	4618      	mov	r0, r3
 8017934:	3708      	adds	r7, #8
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
	...

0801793c <malloc>:
 801793c:	4b02      	ldr	r3, [pc, #8]	; (8017948 <malloc+0xc>)
 801793e:	4601      	mov	r1, r0
 8017940:	6818      	ldr	r0, [r3, #0]
 8017942:	f000 b82b 	b.w	801799c <_malloc_r>
 8017946:	bf00      	nop
 8017948:	20000094 	.word	0x20000094

0801794c <free>:
 801794c:	4b02      	ldr	r3, [pc, #8]	; (8017958 <free+0xc>)
 801794e:	4601      	mov	r1, r0
 8017950:	6818      	ldr	r0, [r3, #0]
 8017952:	f000 b901 	b.w	8017b58 <_free_r>
 8017956:	bf00      	nop
 8017958:	20000094 	.word	0x20000094

0801795c <sbrk_aligned>:
 801795c:	b570      	push	{r4, r5, r6, lr}
 801795e:	4e0e      	ldr	r6, [pc, #56]	; (8017998 <sbrk_aligned+0x3c>)
 8017960:	460c      	mov	r4, r1
 8017962:	6831      	ldr	r1, [r6, #0]
 8017964:	4605      	mov	r5, r0
 8017966:	b911      	cbnz	r1, 801796e <sbrk_aligned+0x12>
 8017968:	f000 f8ac 	bl	8017ac4 <_sbrk_r>
 801796c:	6030      	str	r0, [r6, #0]
 801796e:	4621      	mov	r1, r4
 8017970:	4628      	mov	r0, r5
 8017972:	f000 f8a7 	bl	8017ac4 <_sbrk_r>
 8017976:	1c43      	adds	r3, r0, #1
 8017978:	d00a      	beq.n	8017990 <sbrk_aligned+0x34>
 801797a:	1cc4      	adds	r4, r0, #3
 801797c:	f024 0403 	bic.w	r4, r4, #3
 8017980:	42a0      	cmp	r0, r4
 8017982:	d007      	beq.n	8017994 <sbrk_aligned+0x38>
 8017984:	1a21      	subs	r1, r4, r0
 8017986:	4628      	mov	r0, r5
 8017988:	f000 f89c 	bl	8017ac4 <_sbrk_r>
 801798c:	3001      	adds	r0, #1
 801798e:	d101      	bne.n	8017994 <sbrk_aligned+0x38>
 8017990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017994:	4620      	mov	r0, r4
 8017996:	bd70      	pop	{r4, r5, r6, pc}
 8017998:	200020bc 	.word	0x200020bc

0801799c <_malloc_r>:
 801799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179a0:	1ccd      	adds	r5, r1, #3
 80179a2:	f025 0503 	bic.w	r5, r5, #3
 80179a6:	3508      	adds	r5, #8
 80179a8:	2d0c      	cmp	r5, #12
 80179aa:	bf38      	it	cc
 80179ac:	250c      	movcc	r5, #12
 80179ae:	2d00      	cmp	r5, #0
 80179b0:	4607      	mov	r7, r0
 80179b2:	db01      	blt.n	80179b8 <_malloc_r+0x1c>
 80179b4:	42a9      	cmp	r1, r5
 80179b6:	d905      	bls.n	80179c4 <_malloc_r+0x28>
 80179b8:	230c      	movs	r3, #12
 80179ba:	603b      	str	r3, [r7, #0]
 80179bc:	2600      	movs	r6, #0
 80179be:	4630      	mov	r0, r6
 80179c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a98 <_malloc_r+0xfc>
 80179c8:	f000 f868 	bl	8017a9c <__malloc_lock>
 80179cc:	f8d8 3000 	ldr.w	r3, [r8]
 80179d0:	461c      	mov	r4, r3
 80179d2:	bb5c      	cbnz	r4, 8017a2c <_malloc_r+0x90>
 80179d4:	4629      	mov	r1, r5
 80179d6:	4638      	mov	r0, r7
 80179d8:	f7ff ffc0 	bl	801795c <sbrk_aligned>
 80179dc:	1c43      	adds	r3, r0, #1
 80179de:	4604      	mov	r4, r0
 80179e0:	d155      	bne.n	8017a8e <_malloc_r+0xf2>
 80179e2:	f8d8 4000 	ldr.w	r4, [r8]
 80179e6:	4626      	mov	r6, r4
 80179e8:	2e00      	cmp	r6, #0
 80179ea:	d145      	bne.n	8017a78 <_malloc_r+0xdc>
 80179ec:	2c00      	cmp	r4, #0
 80179ee:	d048      	beq.n	8017a82 <_malloc_r+0xe6>
 80179f0:	6823      	ldr	r3, [r4, #0]
 80179f2:	4631      	mov	r1, r6
 80179f4:	4638      	mov	r0, r7
 80179f6:	eb04 0903 	add.w	r9, r4, r3
 80179fa:	f000 f863 	bl	8017ac4 <_sbrk_r>
 80179fe:	4581      	cmp	r9, r0
 8017a00:	d13f      	bne.n	8017a82 <_malloc_r+0xe6>
 8017a02:	6821      	ldr	r1, [r4, #0]
 8017a04:	1a6d      	subs	r5, r5, r1
 8017a06:	4629      	mov	r1, r5
 8017a08:	4638      	mov	r0, r7
 8017a0a:	f7ff ffa7 	bl	801795c <sbrk_aligned>
 8017a0e:	3001      	adds	r0, #1
 8017a10:	d037      	beq.n	8017a82 <_malloc_r+0xe6>
 8017a12:	6823      	ldr	r3, [r4, #0]
 8017a14:	442b      	add	r3, r5
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	f8d8 3000 	ldr.w	r3, [r8]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d038      	beq.n	8017a92 <_malloc_r+0xf6>
 8017a20:	685a      	ldr	r2, [r3, #4]
 8017a22:	42a2      	cmp	r2, r4
 8017a24:	d12b      	bne.n	8017a7e <_malloc_r+0xe2>
 8017a26:	2200      	movs	r2, #0
 8017a28:	605a      	str	r2, [r3, #4]
 8017a2a:	e00f      	b.n	8017a4c <_malloc_r+0xb0>
 8017a2c:	6822      	ldr	r2, [r4, #0]
 8017a2e:	1b52      	subs	r2, r2, r5
 8017a30:	d41f      	bmi.n	8017a72 <_malloc_r+0xd6>
 8017a32:	2a0b      	cmp	r2, #11
 8017a34:	d917      	bls.n	8017a66 <_malloc_r+0xca>
 8017a36:	1961      	adds	r1, r4, r5
 8017a38:	42a3      	cmp	r3, r4
 8017a3a:	6025      	str	r5, [r4, #0]
 8017a3c:	bf18      	it	ne
 8017a3e:	6059      	strne	r1, [r3, #4]
 8017a40:	6863      	ldr	r3, [r4, #4]
 8017a42:	bf08      	it	eq
 8017a44:	f8c8 1000 	streq.w	r1, [r8]
 8017a48:	5162      	str	r2, [r4, r5]
 8017a4a:	604b      	str	r3, [r1, #4]
 8017a4c:	4638      	mov	r0, r7
 8017a4e:	f104 060b 	add.w	r6, r4, #11
 8017a52:	f000 f829 	bl	8017aa8 <__malloc_unlock>
 8017a56:	f026 0607 	bic.w	r6, r6, #7
 8017a5a:	1d23      	adds	r3, r4, #4
 8017a5c:	1af2      	subs	r2, r6, r3
 8017a5e:	d0ae      	beq.n	80179be <_malloc_r+0x22>
 8017a60:	1b9b      	subs	r3, r3, r6
 8017a62:	50a3      	str	r3, [r4, r2]
 8017a64:	e7ab      	b.n	80179be <_malloc_r+0x22>
 8017a66:	42a3      	cmp	r3, r4
 8017a68:	6862      	ldr	r2, [r4, #4]
 8017a6a:	d1dd      	bne.n	8017a28 <_malloc_r+0x8c>
 8017a6c:	f8c8 2000 	str.w	r2, [r8]
 8017a70:	e7ec      	b.n	8017a4c <_malloc_r+0xb0>
 8017a72:	4623      	mov	r3, r4
 8017a74:	6864      	ldr	r4, [r4, #4]
 8017a76:	e7ac      	b.n	80179d2 <_malloc_r+0x36>
 8017a78:	4634      	mov	r4, r6
 8017a7a:	6876      	ldr	r6, [r6, #4]
 8017a7c:	e7b4      	b.n	80179e8 <_malloc_r+0x4c>
 8017a7e:	4613      	mov	r3, r2
 8017a80:	e7cc      	b.n	8017a1c <_malloc_r+0x80>
 8017a82:	230c      	movs	r3, #12
 8017a84:	603b      	str	r3, [r7, #0]
 8017a86:	4638      	mov	r0, r7
 8017a88:	f000 f80e 	bl	8017aa8 <__malloc_unlock>
 8017a8c:	e797      	b.n	80179be <_malloc_r+0x22>
 8017a8e:	6025      	str	r5, [r4, #0]
 8017a90:	e7dc      	b.n	8017a4c <_malloc_r+0xb0>
 8017a92:	605b      	str	r3, [r3, #4]
 8017a94:	deff      	udf	#255	; 0xff
 8017a96:	bf00      	nop
 8017a98:	200020b8 	.word	0x200020b8

08017a9c <__malloc_lock>:
 8017a9c:	4801      	ldr	r0, [pc, #4]	; (8017aa4 <__malloc_lock+0x8>)
 8017a9e:	f000 b84b 	b.w	8017b38 <__retarget_lock_acquire_recursive>
 8017aa2:	bf00      	nop
 8017aa4:	200021f8 	.word	0x200021f8

08017aa8 <__malloc_unlock>:
 8017aa8:	4801      	ldr	r0, [pc, #4]	; (8017ab0 <__malloc_unlock+0x8>)
 8017aaa:	f000 b846 	b.w	8017b3a <__retarget_lock_release_recursive>
 8017aae:	bf00      	nop
 8017ab0:	200021f8 	.word	0x200021f8

08017ab4 <memset>:
 8017ab4:	4402      	add	r2, r0
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d100      	bne.n	8017abe <memset+0xa>
 8017abc:	4770      	bx	lr
 8017abe:	f803 1b01 	strb.w	r1, [r3], #1
 8017ac2:	e7f9      	b.n	8017ab8 <memset+0x4>

08017ac4 <_sbrk_r>:
 8017ac4:	b538      	push	{r3, r4, r5, lr}
 8017ac6:	4d06      	ldr	r5, [pc, #24]	; (8017ae0 <_sbrk_r+0x1c>)
 8017ac8:	2300      	movs	r3, #0
 8017aca:	4604      	mov	r4, r0
 8017acc:	4608      	mov	r0, r1
 8017ace:	602b      	str	r3, [r5, #0]
 8017ad0:	f7ec fa1c 	bl	8003f0c <_sbrk>
 8017ad4:	1c43      	adds	r3, r0, #1
 8017ad6:	d102      	bne.n	8017ade <_sbrk_r+0x1a>
 8017ad8:	682b      	ldr	r3, [r5, #0]
 8017ada:	b103      	cbz	r3, 8017ade <_sbrk_r+0x1a>
 8017adc:	6023      	str	r3, [r4, #0]
 8017ade:	bd38      	pop	{r3, r4, r5, pc}
 8017ae0:	200021fc 	.word	0x200021fc

08017ae4 <__errno>:
 8017ae4:	4b01      	ldr	r3, [pc, #4]	; (8017aec <__errno+0x8>)
 8017ae6:	6818      	ldr	r0, [r3, #0]
 8017ae8:	4770      	bx	lr
 8017aea:	bf00      	nop
 8017aec:	20000094 	.word	0x20000094

08017af0 <__libc_init_array>:
 8017af0:	b570      	push	{r4, r5, r6, lr}
 8017af2:	4d0d      	ldr	r5, [pc, #52]	; (8017b28 <__libc_init_array+0x38>)
 8017af4:	4c0d      	ldr	r4, [pc, #52]	; (8017b2c <__libc_init_array+0x3c>)
 8017af6:	1b64      	subs	r4, r4, r5
 8017af8:	10a4      	asrs	r4, r4, #2
 8017afa:	2600      	movs	r6, #0
 8017afc:	42a6      	cmp	r6, r4
 8017afe:	d109      	bne.n	8017b14 <__libc_init_array+0x24>
 8017b00:	4d0b      	ldr	r5, [pc, #44]	; (8017b30 <__libc_init_array+0x40>)
 8017b02:	4c0c      	ldr	r4, [pc, #48]	; (8017b34 <__libc_init_array+0x44>)
 8017b04:	f000 fb68 	bl	80181d8 <_init>
 8017b08:	1b64      	subs	r4, r4, r5
 8017b0a:	10a4      	asrs	r4, r4, #2
 8017b0c:	2600      	movs	r6, #0
 8017b0e:	42a6      	cmp	r6, r4
 8017b10:	d105      	bne.n	8017b1e <__libc_init_array+0x2e>
 8017b12:	bd70      	pop	{r4, r5, r6, pc}
 8017b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b18:	4798      	blx	r3
 8017b1a:	3601      	adds	r6, #1
 8017b1c:	e7ee      	b.n	8017afc <__libc_init_array+0xc>
 8017b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b22:	4798      	blx	r3
 8017b24:	3601      	adds	r6, #1
 8017b26:	e7f2      	b.n	8017b0e <__libc_init_array+0x1e>
 8017b28:	08019b10 	.word	0x08019b10
 8017b2c:	08019b10 	.word	0x08019b10
 8017b30:	08019b10 	.word	0x08019b10
 8017b34:	08019b14 	.word	0x08019b14

08017b38 <__retarget_lock_acquire_recursive>:
 8017b38:	4770      	bx	lr

08017b3a <__retarget_lock_release_recursive>:
 8017b3a:	4770      	bx	lr

08017b3c <memcpy>:
 8017b3c:	440a      	add	r2, r1
 8017b3e:	4291      	cmp	r1, r2
 8017b40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017b44:	d100      	bne.n	8017b48 <memcpy+0xc>
 8017b46:	4770      	bx	lr
 8017b48:	b510      	push	{r4, lr}
 8017b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b52:	4291      	cmp	r1, r2
 8017b54:	d1f9      	bne.n	8017b4a <memcpy+0xe>
 8017b56:	bd10      	pop	{r4, pc}

08017b58 <_free_r>:
 8017b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b5a:	2900      	cmp	r1, #0
 8017b5c:	d044      	beq.n	8017be8 <_free_r+0x90>
 8017b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b62:	9001      	str	r0, [sp, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	f1a1 0404 	sub.w	r4, r1, #4
 8017b6a:	bfb8      	it	lt
 8017b6c:	18e4      	addlt	r4, r4, r3
 8017b6e:	f7ff ff95 	bl	8017a9c <__malloc_lock>
 8017b72:	4a1e      	ldr	r2, [pc, #120]	; (8017bec <_free_r+0x94>)
 8017b74:	9801      	ldr	r0, [sp, #4]
 8017b76:	6813      	ldr	r3, [r2, #0]
 8017b78:	b933      	cbnz	r3, 8017b88 <_free_r+0x30>
 8017b7a:	6063      	str	r3, [r4, #4]
 8017b7c:	6014      	str	r4, [r2, #0]
 8017b7e:	b003      	add	sp, #12
 8017b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b84:	f7ff bf90 	b.w	8017aa8 <__malloc_unlock>
 8017b88:	42a3      	cmp	r3, r4
 8017b8a:	d908      	bls.n	8017b9e <_free_r+0x46>
 8017b8c:	6825      	ldr	r5, [r4, #0]
 8017b8e:	1961      	adds	r1, r4, r5
 8017b90:	428b      	cmp	r3, r1
 8017b92:	bf01      	itttt	eq
 8017b94:	6819      	ldreq	r1, [r3, #0]
 8017b96:	685b      	ldreq	r3, [r3, #4]
 8017b98:	1949      	addeq	r1, r1, r5
 8017b9a:	6021      	streq	r1, [r4, #0]
 8017b9c:	e7ed      	b.n	8017b7a <_free_r+0x22>
 8017b9e:	461a      	mov	r2, r3
 8017ba0:	685b      	ldr	r3, [r3, #4]
 8017ba2:	b10b      	cbz	r3, 8017ba8 <_free_r+0x50>
 8017ba4:	42a3      	cmp	r3, r4
 8017ba6:	d9fa      	bls.n	8017b9e <_free_r+0x46>
 8017ba8:	6811      	ldr	r1, [r2, #0]
 8017baa:	1855      	adds	r5, r2, r1
 8017bac:	42a5      	cmp	r5, r4
 8017bae:	d10b      	bne.n	8017bc8 <_free_r+0x70>
 8017bb0:	6824      	ldr	r4, [r4, #0]
 8017bb2:	4421      	add	r1, r4
 8017bb4:	1854      	adds	r4, r2, r1
 8017bb6:	42a3      	cmp	r3, r4
 8017bb8:	6011      	str	r1, [r2, #0]
 8017bba:	d1e0      	bne.n	8017b7e <_free_r+0x26>
 8017bbc:	681c      	ldr	r4, [r3, #0]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	6053      	str	r3, [r2, #4]
 8017bc2:	440c      	add	r4, r1
 8017bc4:	6014      	str	r4, [r2, #0]
 8017bc6:	e7da      	b.n	8017b7e <_free_r+0x26>
 8017bc8:	d902      	bls.n	8017bd0 <_free_r+0x78>
 8017bca:	230c      	movs	r3, #12
 8017bcc:	6003      	str	r3, [r0, #0]
 8017bce:	e7d6      	b.n	8017b7e <_free_r+0x26>
 8017bd0:	6825      	ldr	r5, [r4, #0]
 8017bd2:	1961      	adds	r1, r4, r5
 8017bd4:	428b      	cmp	r3, r1
 8017bd6:	bf04      	itt	eq
 8017bd8:	6819      	ldreq	r1, [r3, #0]
 8017bda:	685b      	ldreq	r3, [r3, #4]
 8017bdc:	6063      	str	r3, [r4, #4]
 8017bde:	bf04      	itt	eq
 8017be0:	1949      	addeq	r1, r1, r5
 8017be2:	6021      	streq	r1, [r4, #0]
 8017be4:	6054      	str	r4, [r2, #4]
 8017be6:	e7ca      	b.n	8017b7e <_free_r+0x26>
 8017be8:	b003      	add	sp, #12
 8017bea:	bd30      	pop	{r4, r5, pc}
 8017bec:	200020b8 	.word	0x200020b8

08017bf0 <with_errno>:
 8017bf0:	b513      	push	{r0, r1, r4, lr}
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	ed8d 0b00 	vstr	d0, [sp]
 8017bf8:	f7ff ff74 	bl	8017ae4 <__errno>
 8017bfc:	ed9d 0b00 	vldr	d0, [sp]
 8017c00:	6004      	str	r4, [r0, #0]
 8017c02:	b002      	add	sp, #8
 8017c04:	bd10      	pop	{r4, pc}

08017c06 <xflow>:
 8017c06:	b082      	sub	sp, #8
 8017c08:	b158      	cbz	r0, 8017c22 <xflow+0x1c>
 8017c0a:	eeb1 7b40 	vneg.f64	d7, d0
 8017c0e:	ed8d 7b00 	vstr	d7, [sp]
 8017c12:	ed9d 7b00 	vldr	d7, [sp]
 8017c16:	2022      	movs	r0, #34	; 0x22
 8017c18:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017c1c:	b002      	add	sp, #8
 8017c1e:	f7ff bfe7 	b.w	8017bf0 <with_errno>
 8017c22:	eeb0 7b40 	vmov.f64	d7, d0
 8017c26:	e7f2      	b.n	8017c0e <xflow+0x8>

08017c28 <__math_uflow>:
 8017c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017c30 <__math_uflow+0x8>
 8017c2c:	f7ff bfeb 	b.w	8017c06 <xflow>
 8017c30:	00000000 	.word	0x00000000
 8017c34:	10000000 	.word	0x10000000

08017c38 <__math_oflow>:
 8017c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017c40 <__math_oflow+0x8>
 8017c3c:	f7ff bfe3 	b.w	8017c06 <xflow>
 8017c40:	00000000 	.word	0x00000000
 8017c44:	70000000 	.word	0x70000000

08017c48 <__math_divzero>:
 8017c48:	b082      	sub	sp, #8
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017c50:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017c54:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017c58:	ed8d 7b00 	vstr	d7, [sp]
 8017c5c:	ed9d 0b00 	vldr	d0, [sp]
 8017c60:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8017c70 <__math_divzero+0x28>
 8017c64:	2022      	movs	r0, #34	; 0x22
 8017c66:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017c6a:	b002      	add	sp, #8
 8017c6c:	f7ff bfc0 	b.w	8017bf0 <with_errno>
	...

08017c78 <__math_invalid>:
 8017c78:	eeb0 7b40 	vmov.f64	d7, d0
 8017c7c:	eeb4 7b47 	vcmp.f64	d7, d7
 8017c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c84:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017c88:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017c8c:	d602      	bvs.n	8017c94 <__math_invalid+0x1c>
 8017c8e:	2021      	movs	r0, #33	; 0x21
 8017c90:	f7ff bfae 	b.w	8017bf0 <with_errno>
 8017c94:	4770      	bx	lr

08017c96 <__math_check_uflow>:
 8017c96:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c9e:	d102      	bne.n	8017ca6 <__math_check_uflow+0x10>
 8017ca0:	2022      	movs	r0, #34	; 0x22
 8017ca2:	f7ff bfa5 	b.w	8017bf0 <with_errno>
 8017ca6:	4770      	bx	lr

08017ca8 <__math_check_oflow>:
 8017ca8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017cc8 <__math_check_oflow+0x20>
 8017cac:	eeb0 7bc0 	vabs.f64	d7, d0
 8017cb0:	eeb4 7b46 	vcmp.f64	d7, d6
 8017cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb8:	dd02      	ble.n	8017cc0 <__math_check_oflow+0x18>
 8017cba:	2022      	movs	r0, #34	; 0x22
 8017cbc:	f7ff bf98 	b.w	8017bf0 <with_errno>
 8017cc0:	4770      	bx	lr
 8017cc2:	bf00      	nop
 8017cc4:	f3af 8000 	nop.w
 8017cc8:	ffffffff 	.word	0xffffffff
 8017ccc:	7fefffff 	.word	0x7fefffff

08017cd0 <checkint>:
 8017cd0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017cd4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	b570      	push	{r4, r5, r6, lr}
 8017cdc:	dd2a      	ble.n	8017d34 <checkint+0x64>
 8017cde:	f240 4333 	movw	r3, #1075	; 0x433
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	dc24      	bgt.n	8017d30 <checkint+0x60>
 8017ce6:	1a9b      	subs	r3, r3, r2
 8017ce8:	f1a3 0620 	sub.w	r6, r3, #32
 8017cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017cf0:	fa02 f403 	lsl.w	r4, r2, r3
 8017cf4:	fa02 f606 	lsl.w	r6, r2, r6
 8017cf8:	f1c3 0520 	rsb	r5, r3, #32
 8017cfc:	fa22 f505 	lsr.w	r5, r2, r5
 8017d00:	4334      	orrs	r4, r6
 8017d02:	432c      	orrs	r4, r5
 8017d04:	409a      	lsls	r2, r3
 8017d06:	ea20 0202 	bic.w	r2, r0, r2
 8017d0a:	ea21 0404 	bic.w	r4, r1, r4
 8017d0e:	4322      	orrs	r2, r4
 8017d10:	f1a3 0420 	sub.w	r4, r3, #32
 8017d14:	f1c3 0220 	rsb	r2, r3, #32
 8017d18:	d10c      	bne.n	8017d34 <checkint+0x64>
 8017d1a:	40d8      	lsrs	r0, r3
 8017d1c:	fa01 f302 	lsl.w	r3, r1, r2
 8017d20:	4318      	orrs	r0, r3
 8017d22:	40e1      	lsrs	r1, r4
 8017d24:	4308      	orrs	r0, r1
 8017d26:	f000 0001 	and.w	r0, r0, #1
 8017d2a:	f1d0 0002 	rsbs	r0, r0, #2
 8017d2e:	bd70      	pop	{r4, r5, r6, pc}
 8017d30:	2002      	movs	r0, #2
 8017d32:	e7fc      	b.n	8017d2e <checkint+0x5e>
 8017d34:	2000      	movs	r0, #0
 8017d36:	e7fa      	b.n	8017d2e <checkint+0x5e>

08017d38 <pow>:
 8017d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3c:	ee10 4a90 	vmov	r4, s1
 8017d40:	ed2d 8b0a 	vpush	{d8-d12}
 8017d44:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017d48:	ee11 aa90 	vmov	sl, s3
 8017d4c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017d50:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8017d54:	429a      	cmp	r2, r3
 8017d56:	ee10 5a10 	vmov	r5, s0
 8017d5a:	ee11 0a10 	vmov	r0, s2
 8017d5e:	b087      	sub	sp, #28
 8017d60:	46c4      	mov	ip, r8
 8017d62:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8017d66:	d806      	bhi.n	8017d76 <pow+0x3e>
 8017d68:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017d6c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8017d70:	2b7f      	cmp	r3, #127	; 0x7f
 8017d72:	f240 8156 	bls.w	8018022 <pow+0x2ea>
 8017d76:	1802      	adds	r2, r0, r0
 8017d78:	eb4a 010a 	adc.w	r1, sl, sl
 8017d7c:	f06f 0b01 	mvn.w	fp, #1
 8017d80:	1e57      	subs	r7, r2, #1
 8017d82:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8017d86:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8017d8a:	45bb      	cmp	fp, r7
 8017d8c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017d90:	d242      	bcs.n	8017e18 <pow+0xe0>
 8017d92:	ea52 0301 	orrs.w	r3, r2, r1
 8017d96:	f04f 0300 	mov.w	r3, #0
 8017d9a:	d10c      	bne.n	8017db6 <pow+0x7e>
 8017d9c:	196d      	adds	r5, r5, r5
 8017d9e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8017da2:	4164      	adcs	r4, r4
 8017da4:	42ab      	cmp	r3, r5
 8017da6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017daa:	41a3      	sbcs	r3, r4
 8017dac:	f0c0 808f 	bcc.w	8017ece <pow+0x196>
 8017db0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017db4:	e02b      	b.n	8017e0e <pow+0xd6>
 8017db6:	4ed4      	ldr	r6, [pc, #848]	; (8018108 <pow+0x3d0>)
 8017db8:	42b4      	cmp	r4, r6
 8017dba:	bf08      	it	eq
 8017dbc:	429d      	cmpeq	r5, r3
 8017dbe:	d109      	bne.n	8017dd4 <pow+0x9c>
 8017dc0:	1800      	adds	r0, r0, r0
 8017dc2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8017dc6:	eb4a 0a0a 	adc.w	sl, sl, sl
 8017dca:	4283      	cmp	r3, r0
 8017dcc:	4bcf      	ldr	r3, [pc, #828]	; (801810c <pow+0x3d4>)
 8017dce:	eb73 030a 	sbcs.w	r3, r3, sl
 8017dd2:	e7eb      	b.n	8017dac <pow+0x74>
 8017dd4:	196d      	adds	r5, r5, r5
 8017dd6:	48ce      	ldr	r0, [pc, #824]	; (8018110 <pow+0x3d8>)
 8017dd8:	4164      	adcs	r4, r4
 8017dda:	42ab      	cmp	r3, r5
 8017ddc:	eb70 0604 	sbcs.w	r6, r0, r4
 8017de0:	d375      	bcc.n	8017ece <pow+0x196>
 8017de2:	4281      	cmp	r1, r0
 8017de4:	bf08      	it	eq
 8017de6:	429a      	cmpeq	r2, r3
 8017de8:	d171      	bne.n	8017ece <pow+0x196>
 8017dea:	4aca      	ldr	r2, [pc, #808]	; (8018114 <pow+0x3dc>)
 8017dec:	4294      	cmp	r4, r2
 8017dee:	bf08      	it	eq
 8017df0:	429d      	cmpeq	r5, r3
 8017df2:	d0dd      	beq.n	8017db0 <pow+0x78>
 8017df4:	4294      	cmp	r4, r2
 8017df6:	ea6f 0a0a 	mvn.w	sl, sl
 8017dfa:	bf34      	ite	cc
 8017dfc:	2400      	movcc	r4, #0
 8017dfe:	2401      	movcs	r4, #1
 8017e00:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8017e04:	4554      	cmp	r4, sl
 8017e06:	f040 81dc 	bne.w	80181c2 <pow+0x48a>
 8017e0a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8017e0e:	b007      	add	sp, #28
 8017e10:	ecbd 8b0a 	vpop	{d8-d12}
 8017e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e18:	196f      	adds	r7, r5, r5
 8017e1a:	eb44 0904 	adc.w	r9, r4, r4
 8017e1e:	1e7a      	subs	r2, r7, #1
 8017e20:	f169 0300 	sbc.w	r3, r9, #0
 8017e24:	4593      	cmp	fp, r2
 8017e26:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017e2a:	d225      	bcs.n	8017e78 <pow+0x140>
 8017e2c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017e30:	2c00      	cmp	r4, #0
 8017e32:	da13      	bge.n	8017e5c <pow+0x124>
 8017e34:	4651      	mov	r1, sl
 8017e36:	f7ff ff4b 	bl	8017cd0 <checkint>
 8017e3a:	2801      	cmp	r0, #1
 8017e3c:	d10e      	bne.n	8017e5c <pow+0x124>
 8017e3e:	eeb1 0b40 	vneg.f64	d0, d0
 8017e42:	ea57 0909 	orrs.w	r9, r7, r9
 8017e46:	d10b      	bne.n	8017e60 <pow+0x128>
 8017e48:	f1ba 0f00 	cmp.w	sl, #0
 8017e4c:	dadf      	bge.n	8017e0e <pow+0xd6>
 8017e4e:	b007      	add	sp, #28
 8017e50:	ecbd 8b0a 	vpop	{d8-d12}
 8017e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e58:	f7ff bef6 	b.w	8017c48 <__math_divzero>
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	e7f0      	b.n	8017e42 <pow+0x10a>
 8017e60:	f1ba 0f00 	cmp.w	sl, #0
 8017e64:	dad3      	bge.n	8017e0e <pow+0xd6>
 8017e66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017e6a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017e6e:	ed8d 7b00 	vstr	d7, [sp]
 8017e72:	ed9d 0b00 	vldr	d0, [sp]
 8017e76:	e7ca      	b.n	8017e0e <pow+0xd6>
 8017e78:	2c00      	cmp	r4, #0
 8017e7a:	da2b      	bge.n	8017ed4 <pow+0x19c>
 8017e7c:	4651      	mov	r1, sl
 8017e7e:	f7ff ff27 	bl	8017cd0 <checkint>
 8017e82:	b930      	cbnz	r0, 8017e92 <pow+0x15a>
 8017e84:	b007      	add	sp, #28
 8017e86:	ecbd 8b0a 	vpop	{d8-d12}
 8017e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8e:	f7ff bef3 	b.w	8017c78 <__math_invalid>
 8017e92:	1e41      	subs	r1, r0, #1
 8017e94:	4248      	negs	r0, r1
 8017e96:	4148      	adcs	r0, r1
 8017e98:	0480      	lsls	r0, r0, #18
 8017e9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017e9e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8017ea2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8017ea6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8017eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8017eac:	d92d      	bls.n	8017f0a <pow+0x1d2>
 8017eae:	4b96      	ldr	r3, [pc, #600]	; (8018108 <pow+0x3d0>)
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	429c      	cmp	r4, r3
 8017eb4:	bf08      	it	eq
 8017eb6:	4285      	cmpeq	r5, r0
 8017eb8:	f43f af7a 	beq.w	8017db0 <pow+0x78>
 8017ebc:	f240 31bd 	movw	r1, #957	; 0x3bd
 8017ec0:	428a      	cmp	r2, r1
 8017ec2:	d80c      	bhi.n	8017ede <pow+0x1a6>
 8017ec4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017ec8:	42a8      	cmp	r0, r5
 8017eca:	41a3      	sbcs	r3, r4
 8017ecc:	d204      	bcs.n	8017ed8 <pow+0x1a0>
 8017ece:	ee31 0b00 	vadd.f64	d0, d1, d0
 8017ed2:	e79c      	b.n	8017e0e <pow+0xd6>
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	e7e4      	b.n	8017ea2 <pow+0x16a>
 8017ed8:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017edc:	e797      	b.n	8017e0e <pow+0xd6>
 8017ede:	2d01      	cmp	r5, #1
 8017ee0:	eb74 0303 	sbcs.w	r3, r4, r3
 8017ee4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017ee8:	bf34      	ite	cc
 8017eea:	2301      	movcc	r3, #1
 8017eec:	2300      	movcs	r3, #0
 8017eee:	4296      	cmp	r6, r2
 8017ef0:	bf8c      	ite	hi
 8017ef2:	2600      	movhi	r6, #0
 8017ef4:	2601      	movls	r6, #1
 8017ef6:	42b3      	cmp	r3, r6
 8017ef8:	f000 809b 	beq.w	8018032 <pow+0x2fa>
 8017efc:	b007      	add	sp, #28
 8017efe:	ecbd 8b0a 	vpop	{d8-d12}
 8017f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f06:	f7ff be97 	b.w	8017c38 <__math_oflow>
 8017f0a:	f1bc 0f00 	cmp.w	ip, #0
 8017f0e:	d10b      	bne.n	8017f28 <pow+0x1f0>
 8017f10:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80180f8 <pow+0x3c0>
 8017f14:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017f18:	ec53 2b17 	vmov	r2, r3, d7
 8017f1c:	ee17 5a10 	vmov	r5, s14
 8017f20:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017f24:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017f28:	4b7b      	ldr	r3, [pc, #492]	; (8018118 <pow+0x3e0>)
 8017f2a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017f2e:	4423      	add	r3, r4
 8017f30:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017f34:	1519      	asrs	r1, r3, #20
 8017f36:	0d1b      	lsrs	r3, r3, #20
 8017f38:	051b      	lsls	r3, r3, #20
 8017f3a:	1ae7      	subs	r7, r4, r3
 8017f3c:	4b77      	ldr	r3, [pc, #476]	; (801811c <pow+0x3e4>)
 8017f3e:	ee03 1a10 	vmov	s6, r1
 8017f42:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017f46:	1e2e      	subs	r6, r5, #0
 8017f48:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8017f4c:	ec47 6b15 	vmov	d5, r6, r7
 8017f50:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017f54:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017f58:	ed93 7b00 	vldr	d7, [r3]
 8017f5c:	ed93 5b02 	vldr	d5, [r3, #8]
 8017f60:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017f64:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017f68:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8017f6c:	ee36 4b02 	vadd.f64	d4, d6, d2
 8017f70:	ee32 2b44 	vsub.f64	d2, d2, d4
 8017f74:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017f78:	ed93 5b04 	vldr	d5, [r3, #16]
 8017f7c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8017f80:	ee37 7b02 	vadd.f64	d7, d7, d2
 8017f84:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017f88:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017f8c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8017f90:	eeb0 9b40 	vmov.f64	d9, d0
 8017f94:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017f98:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8017f9c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8017fa0:	ed93 5b06 	vldr	d5, [r3, #24]
 8017fa4:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017fa8:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017fac:	ed93 4b08 	vldr	d4, [r3, #32]
 8017fb0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8017fb4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017fb8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017fbc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8017fc0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8017fc4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017fc8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017fcc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017fd0:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017fd4:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017fd8:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017fdc:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017fe0:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017fe4:	ee16 3a90 	vmov	r3, s13
 8017fe8:	eeb0 5b46 	vmov.f64	d5, d6
 8017fec:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017ff0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017ff4:	18b2      	adds	r2, r6, r2
 8017ff6:	2a3e      	cmp	r2, #62	; 0x3e
 8017ff8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017ffc:	ee38 8b44 	vsub.f64	d8, d8, d4
 8018000:	ee38 8b07 	vadd.f64	d8, d8, d7
 8018004:	eea1 5b08 	vfma.f64	d5, d1, d8
 8018008:	d91b      	bls.n	8018042 <pow+0x30a>
 801800a:	2a00      	cmp	r2, #0
 801800c:	da0b      	bge.n	8018026 <pow+0x2ee>
 801800e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018012:	ee36 0b00 	vadd.f64	d0, d6, d0
 8018016:	2800      	cmp	r0, #0
 8018018:	f43f aef9 	beq.w	8017e0e <pow+0xd6>
 801801c:	eeb1 0b40 	vneg.f64	d0, d0
 8018020:	e6f5      	b.n	8017e0e <pow+0xd6>
 8018022:	2000      	movs	r0, #0
 8018024:	e780      	b.n	8017f28 <pow+0x1f0>
 8018026:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801802a:	d909      	bls.n	8018040 <pow+0x308>
 801802c:	2b00      	cmp	r3, #0
 801802e:	f6bf af65 	bge.w	8017efc <pow+0x1c4>
 8018032:	b007      	add	sp, #28
 8018034:	ecbd 8b0a 	vpop	{d8-d12}
 8018038:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803c:	f7ff bdf4 	b.w	8017c28 <__math_uflow>
 8018040:	2600      	movs	r6, #0
 8018042:	4937      	ldr	r1, [pc, #220]	; (8018120 <pow+0x3e8>)
 8018044:	ed91 4b02 	vldr	d4, [r1, #8]
 8018048:	ed91 3b00 	vldr	d3, [r1]
 801804c:	eeb0 7b44 	vmov.f64	d7, d4
 8018050:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018054:	ee17 5a10 	vmov	r5, s14
 8018058:	ee37 7b44 	vsub.f64	d7, d7, d4
 801805c:	ed91 4b04 	vldr	d4, [r1, #16]
 8018060:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018064:	eea7 6b04 	vfma.f64	d6, d7, d4
 8018068:	ed91 4b06 	vldr	d4, [r1, #24]
 801806c:	18dc      	adds	r4, r3, r3
 801806e:	f104 030f 	add.w	r3, r4, #15
 8018072:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8018076:	eea7 6b04 	vfma.f64	d6, d7, d4
 801807a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801807e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018082:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018086:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801808a:	ed91 4b08 	vldr	d4, [r1, #32]
 801808e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8018092:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018096:	eea5 4b03 	vfma.f64	d4, d5, d3
 801809a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801809e:	eea6 7b04 	vfma.f64	d7, d6, d4
 80180a2:	ee26 6b06 	vmul.f64	d6, d6, d6
 80180a6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80180aa:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80180ae:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80180b2:	eea5 4b03 	vfma.f64	d4, d5, d3
 80180b6:	1940      	adds	r0, r0, r5
 80180b8:	2700      	movs	r7, #0
 80180ba:	eb17 020c 	adds.w	r2, r7, ip
 80180be:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80180c2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80180c6:	2e00      	cmp	r6, #0
 80180c8:	d176      	bne.n	80181b8 <pow+0x480>
 80180ca:	42bd      	cmp	r5, r7
 80180cc:	db2a      	blt.n	8018124 <pow+0x3ec>
 80180ce:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80180d2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80180d6:	4610      	mov	r0, r2
 80180d8:	ec41 0b10 	vmov	d0, r0, r1
 80180dc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80180e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8018100 <pow+0x3c8>
 80180e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80180e8:	b007      	add	sp, #28
 80180ea:	ecbd 8b0a 	vpop	{d8-d12}
 80180ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f2:	f7ff bdd9 	b.w	8017ca8 <__math_check_oflow>
 80180f6:	bf00      	nop
 80180f8:	00000000 	.word	0x00000000
 80180fc:	43300000 	.word	0x43300000
 8018100:	00000000 	.word	0x00000000
 8018104:	7f000000 	.word	0x7f000000
 8018108:	3ff00000 	.word	0x3ff00000
 801810c:	fff00000 	.word	0xfff00000
 8018110:	ffe00000 	.word	0xffe00000
 8018114:	7fe00000 	.word	0x7fe00000
 8018118:	c0196aab 	.word	0xc0196aab
 801811c:	08018ac0 	.word	0x08018ac0
 8018120:	08018250 	.word	0x08018250
 8018124:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018128:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801812c:	4610      	mov	r0, r2
 801812e:	ec41 0b15 	vmov	d5, r0, r1
 8018132:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8018136:	ee27 6b05 	vmul.f64	d6, d7, d5
 801813a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801813e:	eeb0 4bc7 	vabs.f64	d4, d7
 8018142:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8018146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801814a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80181c8 <pow+0x490>
 801814e:	d52a      	bpl.n	80181a6 <pow+0x46e>
 8018150:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018154:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018160:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8018164:	bf58      	it	pl
 8018166:	eeb0 4b43 	vmovpl.f64	d4, d3
 801816a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801816e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8018172:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018176:	ee36 6b05 	vadd.f64	d6, d6, d5
 801817a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801817e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8018182:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801818a:	d104      	bne.n	8018196 <pow+0x45e>
 801818c:	4632      	mov	r2, r6
 801818e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018192:	ec43 2b17 	vmov	d7, r2, r3
 8018196:	ed8d 0b02 	vstr	d0, [sp, #8]
 801819a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801819e:	ee26 6b00 	vmul.f64	d6, d6, d0
 80181a2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80181a6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80181aa:	b007      	add	sp, #28
 80181ac:	ecbd 8b0a 	vpop	{d8-d12}
 80181b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b4:	f7ff bd6f 	b.w	8017c96 <__math_check_uflow>
 80181b8:	ec43 2b10 	vmov	d0, r2, r3
 80181bc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80181c0:	e625      	b.n	8017e0e <pow+0xd6>
 80181c2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80181d0 <pow+0x498>
 80181c6:	e622      	b.n	8017e0e <pow+0xd6>
 80181c8:	00000000 	.word	0x00000000
 80181cc:	00100000 	.word	0x00100000
	...

080181d8 <_init>:
 80181d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181da:	bf00      	nop
 80181dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181de:	bc08      	pop	{r3}
 80181e0:	469e      	mov	lr, r3
 80181e2:	4770      	bx	lr

080181e4 <_fini>:
 80181e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181e6:	bf00      	nop
 80181e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ea:	bc08      	pop	{r3}
 80181ec:	469e      	mov	lr, r3
 80181ee:	4770      	bx	lr
