
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018930  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  08018bc8  08018bc8  00028bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a6c0  0801a6c0  0002a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a6c8  0801a6c8  0002a6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a6cc  0801a6cc  0002a6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000000  0801a6d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021f4  200000a0  0801a770  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002294  0801a770  00032294  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY
 14 .debug_info   00049109  00000000  00000000  00030111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000922a  00000000  00000000  0007921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003940  00000000  00000000  00082448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002ca2  00000000  00000000  00085d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00046247  00000000  00000000  00088a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f64a  00000000  00000000  000cec71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195d7b  00000000  00000000  0011e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000fdec  00000000  00000000  002b4038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c3e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000a0 	.word	0x200000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018bb0 	.word	0x08018bb0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000a4 	.word	0x200000a4
 80002d4:	08018bb0 	.word	0x08018bb0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <_LEAF_clip>:

#endif

// cannot find things in delay_math.h
Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	ed87 0a03 	vstr	s0, [r7, #12]
 80005de:	edc7 0a02 	vstr	s1, [r7, #8]
 80005e2:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d501      	bpl.n	80005fc <_LEAF_clip+0x28>
    {
        return min;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	e00b      	b.n	8000614 <_LEAF_clip+0x40>
    }
    else if (val > max)
 80005fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000600:	edd7 7a01 	vldr	s15, [r7, #4]
 8000604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060c:	dd01      	ble.n	8000612 <_LEAF_clip+0x3e>
    {
        return max;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	e000      	b.n	8000614 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 8000612:	68bb      	ldr	r3, [r7, #8]
    }
}
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <_LEAF_interpolate_hermite_x>:

Lfloat _LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
 8000626:	b480      	push	{r7}
 8000628:	b08d      	sub	sp, #52	; 0x34
 800062a:	af00      	add	r7, sp, #0
 800062c:	ed87 0a05 	vstr	s0, [r7, #20]
 8000630:	edc7 0a04 	vstr	s1, [r7, #16]
 8000634:	ed87 1a03 	vstr	s2, [r7, #12]
 8000638:	edc7 1a02 	vstr	s3, [r7, #8]
 800063c:	ed87 2a01 	vstr	s4, [r7, #4]
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8000644:	ed97 7a03 	vldr	s14, [r7, #12]
 8000648:	edd7 7a05 	vldr	s15, [r7, #20]
 800064c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000650:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000658:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Lfloat y0my1 = yy0 - yy1;
 800065c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000660:	edd7 7a04 	vldr	s15, [r7, #16]
 8000664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 800066c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000670:	edd7 7a03 	vldr	s15, [r7, #12]
 8000674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000678:	edd7 6a02 	vldr	s13, [r7, #8]
 800067c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000680:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000684:	edd7 7a03 	vldr	s15, [r7, #12]
 8000688:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800068c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000698:	edc7 7a08 	vstr	s15, [r7, #32]
    Lfloat c2 = y0my1 + c1 - c3;
 800069c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80006a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]

    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80006b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80006b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80006c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80006d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80006e4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80006e8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ec:	3734      	adds	r7, #52	; 0x34
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8000702:	6079      	str	r1, [r7, #4]
 8000704:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	617b      	str	r3, [r7, #20]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800070c:	6979      	ldr	r1, [r7, #20]
 800070e:	202c      	movs	r0, #44	; 0x2c
 8000710:	f000 fa8b 	bl	8000c2a <mpool_alloc>
 8000714:	4602      	mov	r2, r0
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	619a      	str	r2, [r3, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	6979      	ldr	r1, [r7, #20]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fa79 	bl	8000c2a <mpool_alloc>
 8000738:	4602      	mov	r2, r0
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	609a      	str	r2, [r3, #8]

    d->gain = 1.0f;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000744:	605a      	str	r2, [r3, #4]

    d->lastIn = 0.0f;
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	f04f 0200 	mov.w	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	60da      	str	r2, [r3, #12]

    d->idx = 0.0f;
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
    d->inc = 1.0f;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000764:	621a      	str	r2, [r3, #32]
    d->inPoint = 0;
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]

    tTapeDelay_setDelay(dl, delay);
 800076c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 f8f8 	bl	8000966 <tTapeDelay_setDelay>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	613b      	str	r3, [r7, #16]

    d->buff[d->inPoint] = input * d->gain;
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	ed93 7a01 	vldr	s14, [r3, #4]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	edd7 7a00 	vldr	s15, [r7]
 80007a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007aa:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d102      	bne.n	80007ca <tTapeDelay_tick+0x4c>
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]

    int idx =  (int) d->idx;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80007d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d4:	ee17 3a90 	vmov	r3, s15
 80007d8:	60fb      	str	r3, [r7, #12]
    Lfloat alpha = d->idx - idx;
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ee:	edc7 7a02 	vstr	s15, [r7, #8]

    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	6899      	ldr	r1, [r3, #8]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	3b01      	subs	r3, #1
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	6992      	ldr	r2, [r2, #24]
 8000804:	fbb3 f0f2 	udiv	r0, r3, r2
 8000808:	fb00 f202 	mul.w	r2, r0, r2
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	edd3 7a00 	vldr	s15, [r3]
                                              d->buff[idx],
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000820:	ed93 7a00 	vldr	s14, [r3]
                                              d->buff[(idx + 1) % d->maxDelay],
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	6899      	ldr	r1, [r3, #8]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	461a      	mov	r2, r3
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	fbb2 f0f3 	udiv	r0, r2, r3
 8000836:	fb00 f303 	mul.w	r3, r0, r3
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000840:	edd3 6a00 	vldr	s13, [r3]
                                              d->buff[(idx + 2) % d->maxDelay],
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	6899      	ldr	r1, [r3, #8]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3302      	adds	r3, #2
 800084c:	461a      	mov	r2, r3
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	fbb2 f0f3 	udiv	r0, r2, r3
 8000856:	fb00 f303 	mul.w	r3, r0, r3
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
    d->lastOut = _LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8000860:	ed93 6a00 	vldr	s12, [r3]
 8000864:	ed97 2a02 	vldr	s4, [r7, #8]
 8000868:	eef0 1a46 	vmov.f32	s3, s12
 800086c:	eeb0 1a66 	vmov.f32	s2, s13
 8000870:	eef0 0a47 	vmov.f32	s1, s14
 8000874:	eeb0 0a67 	vmov.f32	s0, s15
 8000878:	f7ff fed5 	bl	8000626 <_LEAF_interpolate_hermite_x>
 800087c:	eef0 7a40 	vmov.f32	s15, s0
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	edc3 7a03 	vstr	s15, [r3, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	ee07 3a90 	vmov	s15, r3
 800088e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089c:	edc7 7a05 	vstr	s15, [r7, #20]
    while (diff < 0.f) diff += d->maxDelay;
 80008a0:	e00b      	b.n	80008ba <tTapeDelay_tick+0x13c>
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80008b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b6:	edc7 7a05 	vstr	s15, [r7, #20]
 80008ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80008be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c6:	d4ec      	bmi.n	80008a2 <tTapeDelay_tick+0x124>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80008ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80008d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80008dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	edc3 7a08 	vstr	s15, [r3, #32]

    d->idx += d->inc;
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80008fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8000904:	e00d      	b.n	8000922 <tTapeDelay_tick+0x1a4>
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	dae3      	bge.n	8000906 <tTapeDelay_tick+0x188>

    if (d->lastOut)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	edd3 7a03 	vldr	s15, [r3, #12]
 8000944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094c:	d002      	beq.n	8000954 <tTapeDelay_tick+0x1d6>
        return d->lastOut;
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	e001      	b.n	8000958 <tTapeDelay_tick+0x1da>
    return 0.0f;
 8000954:	f04f 0300 	mov.w	r3, #0
}
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eeb0 0a67 	vmov.f32	s0, s15
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	ed87 0a00 	vstr	s0, [r7]
    _tTapeDelay* d = *dl;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	60fb      	str	r3, [r7, #12]
    d->delay = _LEAF_clip(1.f, delay,  d->maxDelay);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000984:	eeb0 1a67 	vmov.f32	s2, s15
 8000988:	edd7 0a00 	vldr	s1, [r7]
 800098c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000990:	f7ff fe20 	bl	80005d4 <_LEAF_clip>
 8000994:	eef0 7a40 	vmov.f32	s15, s0
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80009b4:	6079      	str	r1, [r7, #4]
 80009b6:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80009be:	69f9      	ldr	r1, [r7, #28]
 80009c0:	2028      	movs	r0, #40	; 0x28
 80009c2:	f000 f932 	bl	8000c2a <mpool_alloc>
 80009c6:	4602      	mov	r2, r0
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80009ee:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000ab0 <tRamp_initToPool+0x108>
 80009f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a34:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a40:	d504      	bpl.n	8000a4c <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	61da      	str	r2, [r3, #28]
 8000a4a:	e002      	b.n	8000a52 <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	edd3 7a08 	vldr	s15, [r3, #32]
 8000a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	3a83126f 	.word	0x3a83126f

08000ab4 <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	db07      	blt.n	8000b42 <tRamp_tick+0x4a>
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b40:	dc12      	bgt.n	8000b68 <tRamp_tick+0x70>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b56:	d80f      	bhi.n	8000b78 <tRamp_tick+0x80>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	d507      	bpl.n	8000b78 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	ee07 3a90 	vmov	s15, r3
}
 8000b80:	eeb0 0a67 	vmov.f32	s0, s15
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	af02      	add	r7, sp, #8
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685c      	ldr	r4, [r3, #4]
 8000b9e:	2010      	movs	r0, #16
 8000ba0:	f000 f902 	bl	8000da8 <mpool_align>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d203      	bcs.n	8000bc8 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc6:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	4613      	mov	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	f000 f8ea 	bl	8000dc4 <create_node>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	615a      	str	r2, [r3, #20]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}

08000bfe <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	331c      	adds	r3, #28
 8000c0e:	461a      	mov	r2, r3
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	68b8      	ldr	r0, [r7, #8]
 8000c14:	f7ff ffbb 	bl	8000b8e <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f103 021c 	add.w	r2, r3, #28
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	619a      	str	r2, [r3, #24]
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000c2a:	b590      	push	{r4, r7, lr}
 8000c2c:	b08d      	sub	sp, #52	; 0x34
 8000c2e:	af02      	add	r7, sp, #8
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c3a:	3201      	adds	r2, #1
 8000c3c:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d116      	bne.n	8000c74 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d206      	bcs.n	8000c64 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f9f9 	bl	8001054 <LEAF_internalErrorCallback>
 8000c62:	e005      	b.n	8000c70 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f9f2 	bl	8001054 <LEAF_internalErrorCallback>
        }
        return NULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	e095      	b.n	8000da0 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f897 	bl	8000da8 <mpool_align>
 8000c7a:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000c82:	e01c      	b.n	8000cbe <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d116      	bne.n	8000cbe <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d206      	bcs.n	8000cae <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f9d4 	bl	8001054 <LEAF_internalErrorCallback>
 8000cac:	e005      	b.n	8000cba <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f9cd 	bl	8001054 <LEAF_internalErrorCallback>
            }
            return NULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e070      	b.n	8000da0 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8dd      	bhi.n	8000c84 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d924      	bls.n	8000d2e <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8000d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	4613      	mov	r3, r2
 8000d24:	4622      	mov	r2, r4
 8000d26:	f000 f84d 	bl	8000dc4 <create_node>
 8000d2a:	6238      	str	r0, [r7, #32]
 8000d2c:	e008      	b.n	8000d40 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	441a      	add	r2, r3
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d102      	bne.n	8000d50 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	6a3a      	ldr	r2, [r7, #32]
 8000d4e:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8000d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d52:	f000 f855 	bl	8000e00 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	440b      	add	r3, r1
 8000d66:	441a      	add	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	dd12      	ble.n	8000d9c <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	e007      	b.n	8000d92 <mpool_alloc+0x168>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f2      	bhi.n	8000d82 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	681b      	ldr	r3, [r3, #0]
#endif
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	372c      	adds	r7, #44	; 0x2c
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}

08000da8 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3307      	adds	r3, #7
 8000db4:	f023 0307 	bic.w	r3, r3, #7
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	441a      	add	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	601a      	str	r2, [r3, #0]
    node->next = next;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	609a      	str	r2, [r3, #8]
    node->size = size;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	60da      	str	r2, [r3, #12]
    return node;
 8000df2:	697b      	ldr	r3, [r7, #20]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6892      	ldr	r2, [r2, #8]
 8000e18:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6852      	ldr	r2, [r2, #4]
 8000e2a:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3318      	adds	r3, #24
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f804 	bl	8000e68 <tMempool_initToPool>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8000e7c:	6979      	ldr	r1, [r7, #20]
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f7ff fed3 	bl	8000c2a <mpool_alloc>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	68b8      	ldr	r0, [r7, #8]
 8000e9e:	f7ff fe76 	bl	8000b8e <mpool_create>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8000ebc:	6979      	ldr	r1, [r7, #20]
 8000ebe:	2018      	movs	r0, #24
 8000ec0:	f7ff feb3 	bl	8000c2a <mpool_alloc>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f10 <tCycle_initToPool+0x64>
 8000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f04:	615a      	str	r2, [r3, #20]
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	4f800000 	.word	0x4f800000

08000f14 <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f32:	edd7 7a00 	vldr	s15, [r7]
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	609a      	str	r2, [r3, #8]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b088      	sub	sp, #32
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8000f66:	69f9      	ldr	r1, [r7, #28]
 8000f68:	2018      	movs	r0, #24
 8000f6a:	f7ff fe5e 	bl	8000c2a <mpool_alloc>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	7afa      	ldrb	r2, [r7, #11]
 8000f8c:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	615a      	str	r2, [r3, #20]
}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6178      	str	r0, [r7, #20]
 8000fa8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fac:	60f9      	str	r1, [r7, #12]
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff fe1e 	bl	8000bfe <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8000fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001034 <LEAF_init+0x94>
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LEAF_init+0x98>)
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e009      	b.n	800101a <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	330e      	adds	r3, #14
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3301      	adds	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	2b02      	cmp	r3, #2
 800101e:	ddf2      	ble.n	8001006 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2200      	movs	r2, #0
 8001024:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2200      	movs	r2, #0
 800102a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40c90fdb 	.word	0x40c90fdb
 8001038:	0800103d 	.word	0x0800103d

0800103c <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	330e      	adds	r3, #14
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	4611      	mov	r1, r2
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4798      	blx	r3
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MIDI_Application+0x54>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d111      	bne.n	80010b4 <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MIDI_Application+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d10d      	bne.n	80010b4 <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	4911      	ldr	r1, [pc, #68]	; (80010e0 <MIDI_Application+0x5c>)
 800109c:	4811      	ldr	r0, [pc, #68]	; (80010e4 <MIDI_Application+0x60>)
 800109e:	f003 fc88 	bl	80049b2 <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MIDI_Application+0x58>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MIDI_Application+0x64>)
 80010b0:	f008 fade 	bl	8009670 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MIDI_Application+0x54>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d10b      	bne.n	80010d4 <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MIDI_Application+0x58>)
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <MIDI_Application+0x60>)
 80010c4:	f003 fc0f 	bl	80048e6 <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MIDI_Application+0x64>)
 80010d0:	f008 face 	bl	8009670 <HAL_GPIO_WritePin>
	}
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20001e30 	.word	0x20001e30
 80010dc:	20000000 	.word	0x20000000
 80010e0:	30000000 	.word	0x30000000
 80010e4:	30000460 	.word	0x30000460
 80010e8:	58020400 	.word	0x58020400

080010ec <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 80010f4:	4bab      	ldr	r3, [pc, #684]	; (80013a4 <ProcessReceivedMidiDatas+0x2b8>)
 80010f6:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 814a 	beq.w	800139a <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 8001106:	e142      	b.n	800138e <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4ba6      	ldr	r3, [pc, #664]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3301      	adds	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	4ba3      	ldr	r3, [pc, #652]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 800111c:	705a      	strb	r2, [r3, #1]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3301      	adds	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b9f      	ldr	r3, [pc, #636]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 800112a:	709a      	strb	r2, [r3, #2]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3301      	adds	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	4b9c      	ldr	r3, [pc, #624]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 8001138:	70da      	strb	r2, [r3, #3]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2bf0      	cmp	r3, #240	; 0xf0
 8001148:	f000 8120 	beq.w	800138c <ProcessReceivedMidiDatas+0x2a0>
 800114c:	2bf0      	cmp	r3, #240	; 0xf0
 800114e:	f300 811e 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001152:	2be0      	cmp	r3, #224	; 0xe0
 8001154:	f000 811b 	beq.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001158:	2be0      	cmp	r3, #224	; 0xe0
 800115a:	f300 8118 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 800115e:	2bd0      	cmp	r3, #208	; 0xd0
 8001160:	f000 8115 	beq.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001164:	2bd0      	cmp	r3, #208	; 0xd0
 8001166:	f300 8112 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 800116a:	2bc0      	cmp	r3, #192	; 0xc0
 800116c:	f000 810f 	beq.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001170:	2bc0      	cmp	r3, #192	; 0xc0
 8001172:	f300 810c 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001176:	2bb0      	cmp	r3, #176	; 0xb0
 8001178:	d02f      	beq.n	80011da <ProcessReceivedMidiDatas+0xee>
 800117a:	2bb0      	cmp	r3, #176	; 0xb0
 800117c:	f300 8107 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001180:	2ba0      	cmp	r3, #160	; 0xa0
 8001182:	f000 8104 	beq.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001186:	2ba0      	cmp	r3, #160	; 0xa0
 8001188:	f300 8101 	bgt.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 800118c:	2b80      	cmp	r3, #128	; 0x80
 800118e:	d002      	beq.n	8001196 <ProcessReceivedMidiDatas+0xaa>
 8001190:	2b90      	cmp	r3, #144	; 0x90
 8001192:	d011      	beq.n	80011b8 <ProcessReceivedMidiDatas+0xcc>
 8001194:	e0fb      	b.n	800138e <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 8001196:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b83      	ldr	r3, [pc, #524]	; (80013ac <ProcessReceivedMidiDatas+0x2c0>)
 800119e:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <ProcessReceivedMidiDatas+0x2c4>)
 80011a8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4880      	ldr	r0, [pc, #512]	; (80013b4 <ProcessReceivedMidiDatas+0x2c8>)
 80011b2:	f008 fa5d 	bl	8009670 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 80011b6:	e0ea      	b.n	800138e <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 80011b8:	4b7b      	ldr	r3, [pc, #492]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <ProcessReceivedMidiDatas+0x2c0>)
 80011c0:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80011c2:	4b79      	ldr	r3, [pc, #484]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 80011c4:	78db      	ldrb	r3, [r3, #3]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b79      	ldr	r3, [pc, #484]	; (80013b0 <ProcessReceivedMidiDatas+0x2c4>)
 80011ca:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	4878      	ldr	r0, [pc, #480]	; (80013b4 <ProcessReceivedMidiDatas+0x2c8>)
 80011d4:	f008 fa4c 	bl	8009670 <HAL_GPIO_WritePin>

					break;
 80011d8:	e0d9      	b.n	800138e <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 80011da:	4b73      	ldr	r3, [pc, #460]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <ProcessReceivedMidiDatas+0x2cc>)
 80011e2:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <ProcessReceivedMidiDatas+0x2bc>)
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b74      	ldr	r3, [pc, #464]	; (80013bc <ProcessReceivedMidiDatas+0x2d0>)
 80011ec:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <ProcessReceivedMidiDatas+0x2cc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b71      	ldr	r3, [pc, #452]	; (80013bc <ProcessReceivedMidiDatas+0x2d0>)
 80011f6:	7819      	ldrb	r1, [r3, #0]
 80011f8:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <ProcessReceivedMidiDatas+0x2d4>)
 80011fa:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 80011fc:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <ProcessReceivedMidiDatas+0x2cc>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	2b5e      	cmp	r3, #94	; 0x5e
 8001204:	f200 80c3 	bhi.w	800138e <ProcessReceivedMidiDatas+0x2a2>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <ProcessReceivedMidiDatas+0x124>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	0800138f 	.word	0x0800138f
 8001214:	0800138f 	.word	0x0800138f
 8001218:	0800138f 	.word	0x0800138f
 800121c:	0800138f 	.word	0x0800138f
 8001220:	0800138f 	.word	0x0800138f
 8001224:	0800138f 	.word	0x0800138f
 8001228:	0800138f 	.word	0x0800138f
 800122c:	0800138f 	.word	0x0800138f
 8001230:	0800138f 	.word	0x0800138f
 8001234:	0800138f 	.word	0x0800138f
 8001238:	0800138f 	.word	0x0800138f
 800123c:	0800138f 	.word	0x0800138f
 8001240:	0800138f 	.word	0x0800138f
 8001244:	0800138f 	.word	0x0800138f
 8001248:	0800138f 	.word	0x0800138f
 800124c:	0800138f 	.word	0x0800138f
 8001250:	0800138f 	.word	0x0800138f
 8001254:	0800138f 	.word	0x0800138f
 8001258:	0800138f 	.word	0x0800138f
 800125c:	0800138f 	.word	0x0800138f
 8001260:	0800138f 	.word	0x0800138f
 8001264:	0800138f 	.word	0x0800138f
 8001268:	0800138f 	.word	0x0800138f
 800126c:	0800138f 	.word	0x0800138f
 8001270:	0800138f 	.word	0x0800138f
 8001274:	0800138f 	.word	0x0800138f
 8001278:	0800138f 	.word	0x0800138f
 800127c:	0800138f 	.word	0x0800138f
 8001280:	0800138f 	.word	0x0800138f
 8001284:	0800138f 	.word	0x0800138f
 8001288:	0800138f 	.word	0x0800138f
 800128c:	0800138f 	.word	0x0800138f
 8001290:	0800138f 	.word	0x0800138f
 8001294:	0800138f 	.word	0x0800138f
 8001298:	0800138f 	.word	0x0800138f
 800129c:	0800138f 	.word	0x0800138f
 80012a0:	0800138f 	.word	0x0800138f
 80012a4:	0800138f 	.word	0x0800138f
 80012a8:	0800138f 	.word	0x0800138f
 80012ac:	0800138f 	.word	0x0800138f
 80012b0:	0800138f 	.word	0x0800138f
 80012b4:	0800138f 	.word	0x0800138f
 80012b8:	0800138f 	.word	0x0800138f
 80012bc:	0800138f 	.word	0x0800138f
 80012c0:	0800138f 	.word	0x0800138f
 80012c4:	0800138f 	.word	0x0800138f
 80012c8:	0800138f 	.word	0x0800138f
 80012cc:	0800138f 	.word	0x0800138f
 80012d0:	0800138f 	.word	0x0800138f
 80012d4:	0800138f 	.word	0x0800138f
 80012d8:	0800138f 	.word	0x0800138f
 80012dc:	0800138f 	.word	0x0800138f
 80012e0:	0800138f 	.word	0x0800138f
 80012e4:	0800138f 	.word	0x0800138f
 80012e8:	0800138f 	.word	0x0800138f
 80012ec:	0800138f 	.word	0x0800138f
 80012f0:	0800138f 	.word	0x0800138f
 80012f4:	0800138f 	.word	0x0800138f
 80012f8:	0800138f 	.word	0x0800138f
 80012fc:	0800138f 	.word	0x0800138f
 8001300:	0800138f 	.word	0x0800138f
 8001304:	0800138f 	.word	0x0800138f
 8001308:	0800138f 	.word	0x0800138f
 800130c:	0800138f 	.word	0x0800138f
 8001310:	0800138f 	.word	0x0800138f
 8001314:	0800138f 	.word	0x0800138f
 8001318:	0800138f 	.word	0x0800138f
 800131c:	0800138f 	.word	0x0800138f
 8001320:	0800138f 	.word	0x0800138f
 8001324:	0800138f 	.word	0x0800138f
 8001328:	0800138f 	.word	0x0800138f
 800132c:	0800138f 	.word	0x0800138f
 8001330:	0800138f 	.word	0x0800138f
 8001334:	0800138f 	.word	0x0800138f
 8001338:	0800138f 	.word	0x0800138f
 800133c:	0800138f 	.word	0x0800138f
 8001340:	0800138f 	.word	0x0800138f
 8001344:	0800138f 	.word	0x0800138f
 8001348:	0800138f 	.word	0x0800138f
 800134c:	0800138f 	.word	0x0800138f
 8001350:	0800138f 	.word	0x0800138f
 8001354:	0800138f 	.word	0x0800138f
 8001358:	0800138f 	.word	0x0800138f
 800135c:	0800138f 	.word	0x0800138f
 8001360:	0800138f 	.word	0x0800138f
 8001364:	0800138f 	.word	0x0800138f
 8001368:	0800138f 	.word	0x0800138f
 800136c:	0800138f 	.word	0x0800138f
 8001370:	0800138f 	.word	0x0800138f
 8001374:	0800138f 	.word	0x0800138f
 8001378:	0800138f 	.word	0x0800138f
 800137c:	0800138f 	.word	0x0800138f
 8001380:	0800138f 	.word	0x0800138f
 8001384:	0800138f 	.word	0x0800138f
 8001388:	0800138f 	.word	0x0800138f
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 800138c:	bf00      	nop
		while(numberOfPackets--)
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	81fa      	strh	r2, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f aeb7 	bne.w	8001108 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	30000000 	.word	0x30000000
 80013a8:	20000140 	.word	0x20000140
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	200000bd 	.word	0x200000bd
 80013b4:	58020000 	.word	0x58020000
 80013b8:	200000be 	.word	0x200000be
 80013bc:	200000bf 	.word	0x200000bf
 80013c0:	200000c0 	.word	0x200000c0

080013c4 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 80013ce:	6838      	ldr	r0, [r7, #0]
 80013d0:	f7ff fe8c 	bl	80010ec <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	4904      	ldr	r1, [pc, #16]	; (80013e8 <USBH_MIDI_ReceiveCallback+0x24>)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <USBH_MIDI_ReceiveCallback+0x28>)
 80013da:	f003 faea 	bl	80049b2 <USBH_MIDI_Receive>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	30000000 	.word	0x30000000
 80013ec:	30000460 	.word	0x30000460

080013f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001414:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <MX_ADC1_Init+0x214>)
 8001416:	4a7c      	ldr	r2, [pc, #496]	; (8001608 <MX_ADC1_Init+0x218>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <MX_ADC1_Init+0x214>)
 800141c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <MX_ADC1_Init+0x214>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001428:	4b76      	ldr	r3, [pc, #472]	; (8001604 <MX_ADC1_Init+0x214>)
 800142a:	2201      	movs	r2, #1
 800142c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800142e:	4b75      	ldr	r3, [pc, #468]	; (8001604 <MX_ADC1_Init+0x214>)
 8001430:	2208      	movs	r2, #8
 8001432:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001434:	4b73      	ldr	r3, [pc, #460]	; (8001604 <MX_ADC1_Init+0x214>)
 8001436:	2200      	movs	r2, #0
 8001438:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <MX_ADC1_Init+0x214>)
 800143c:	2201      	movs	r2, #1
 800143e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <MX_ADC1_Init+0x214>)
 8001442:	220a      	movs	r2, #10
 8001444:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <MX_ADC1_Init+0x214>)
 8001448:	2200      	movs	r2, #0
 800144a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144c:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <MX_ADC1_Init+0x214>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001452:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <MX_ADC1_Init+0x214>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <MX_ADC1_Init+0x214>)
 800145a:	2203      	movs	r2, #3
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800145e:	4b69      	ldr	r3, [pc, #420]	; (8001604 <MX_ADC1_Init+0x214>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001464:	4b67      	ldr	r3, [pc, #412]	; (8001604 <MX_ADC1_Init+0x214>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <MX_ADC1_Init+0x214>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001472:	4864      	ldr	r0, [pc, #400]	; (8001604 <MX_ADC1_Init+0x214>)
 8001474:	f004 f956 	bl	8005724 <HAL_ADC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800147e:	f001 fee3 	bl	8003248 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	485d      	ldr	r0, [pc, #372]	; (8001604 <MX_ADC1_Init+0x214>)
 800148e:	f005 fbd9 	bl	8006c44 <HAL_ADCEx_MultiModeConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001498:	f001 fed6 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <MX_ADC1_Init+0x21c>)
 800149e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a0:	2306      	movs	r3, #6
 80014a2:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ae:	2304      	movs	r3, #4
 80014b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4851      	ldr	r0, [pc, #324]	; (8001604 <MX_ADC1_Init+0x214>)
 80014c0:	f004 fdee 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014ca:	f001 febd 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80014ce:	4b50      	ldr	r3, [pc, #320]	; (8001610 <MX_ADC1_Init+0x220>)
 80014d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014d2:	230c      	movs	r3, #12
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4849      	ldr	r0, [pc, #292]	; (8001604 <MX_ADC1_Init+0x214>)
 80014e0:	f004 fdde 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80014ea:	f001 fead 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014ee:	4b49      	ldr	r3, [pc, #292]	; (8001614 <MX_ADC1_Init+0x224>)
 80014f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014f2:	2312      	movs	r3, #18
 80014f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	4841      	ldr	r0, [pc, #260]	; (8001604 <MX_ADC1_Init+0x214>)
 8001500:	f004 fdce 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800150a:	f001 fe9d 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800150e:	4b42      	ldr	r3, [pc, #264]	; (8001618 <MX_ADC1_Init+0x228>)
 8001510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001512:	2318      	movs	r3, #24
 8001514:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_ADC1_Init+0x214>)
 8001520:	f004 fdbe 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800152a:	f001 fe8d 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <MX_ADC1_Init+0x22c>)
 8001530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4830      	ldr	r0, [pc, #192]	; (8001604 <MX_ADC1_Init+0x214>)
 8001542:	f004 fdad 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 800154c:	f001 fe7c 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <MX_ADC1_Init+0x230>)
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001554:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4828      	ldr	r0, [pc, #160]	; (8001604 <MX_ADC1_Init+0x214>)
 8001564:	f004 fd9c 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 800156e:	f001 fe6b 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <MX_ADC1_Init+0x234>)
 8001574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001576:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800157a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	481f      	ldr	r0, [pc, #124]	; (8001604 <MX_ADC1_Init+0x214>)
 8001586:	f004 fd8b 	bl	80060a0 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 8001590:	f001 fe5a 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <MX_ADC1_Init+0x238>)
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001598:	f44f 7389 	mov.w	r3, #274	; 0x112
 800159c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <MX_ADC1_Init+0x214>)
 80015a8:	f004 fd7a 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80015b2:	f001 fe49 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_ADC1_Init+0x23c>)
 80015b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80015ba:	f44f 738c 	mov.w	r3, #280	; 0x118
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_ADC1_Init+0x214>)
 80015ca:	f004 fd69 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80015d4:	f001 fe38 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_ADC1_Init+0x240>)
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80015dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_ADC1_Init+0x214>)
 80015ec:	f004 fd58 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 80015f6:	f001 fe27 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000144 	.word	0x20000144
 8001608:	40022000 	.word	0x40022000
 800160c:	1d500080 	.word	0x1d500080
 8001610:	4fb80000 	.word	0x4fb80000
 8001614:	3ef08000 	.word	0x3ef08000
 8001618:	0c900008 	.word	0x0c900008
 800161c:	4b840000 	.word	0x4b840000
 8001620:	3ac04000 	.word	0x3ac04000
 8001624:	10c00010 	.word	0x10c00010
 8001628:	21800100 	.word	0x21800100
 800162c:	25b00200 	.word	0x25b00200
 8001630:	14f00020 	.word	0x14f00020

08001634 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <MX_ADC3_Init+0x124>)
 800164e:	4a43      	ldr	r2, [pc, #268]	; (800175c <MX_ADC3_Init+0x128>)
 8001650:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <MX_ADC3_Init+0x124>)
 8001654:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001658:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <MX_ADC3_Init+0x124>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <MX_ADC3_Init+0x124>)
 8001662:	2201      	movs	r2, #1
 8001664:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <MX_ADC3_Init+0x124>)
 8001668:	2204      	movs	r2, #4
 800166a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <MX_ADC3_Init+0x124>)
 800166e:	2200      	movs	r2, #0
 8001670:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <MX_ADC3_Init+0x124>)
 8001674:	2201      	movs	r2, #1
 8001676:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_ADC3_Init+0x124>)
 800167a:	2205      	movs	r2, #5
 800167c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <MX_ADC3_Init+0x124>)
 8001680:	2200      	movs	r2, #0
 8001682:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_ADC3_Init+0x124>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <MX_ADC3_Init+0x124>)
 800168c:	2200      	movs	r2, #0
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_ADC3_Init+0x124>)
 8001692:	2200      	movs	r2, #0
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <MX_ADC3_Init+0x124>)
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_ADC3_Init+0x124>)
 800169e:	2200      	movs	r2, #0
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_ADC3_Init+0x124>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016aa:	482b      	ldr	r0, [pc, #172]	; (8001758 <MX_ADC3_Init+0x124>)
 80016ac:	f004 f83a 	bl	8005724 <HAL_ADC_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80016b6:	f001 fdc7 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <MX_ADC3_Init+0x12c>)
 80016bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016be:	2306      	movs	r3, #6
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016cc:	2304      	movs	r3, #4
 80016ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_ADC3_Init+0x124>)
 80016de:	f004 fcdf 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80016e8:	f001 fdae 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ec:	230c      	movs	r3, #12
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4818      	ldr	r0, [pc, #96]	; (8001758 <MX_ADC3_Init+0x124>)
 80016f6:	f004 fcd3 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001700:	f001 fda2 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001704:	2312      	movs	r3, #18
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_ADC3_Init+0x124>)
 800170e:	f004 fcc7 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001718:	f001 fd96 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800171c:	2318      	movs	r3, #24
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_ADC3_Init+0x124>)
 8001726:	f004 fcbb 	bl	80060a0 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001730:	f001 fd8a 	bl	8003248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_ADC3_Init+0x124>)
 8001740:	f004 fcae 	bl	80060a0 <HAL_ADC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 800174a:	f001 fd7d 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001a8 	.word	0x200001a8
 800175c:	58026000 	.word	0x58026000
 8001760:	08600004 	.word	0x08600004

08001764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6d      	ldr	r2, [pc, #436]	; (8001938 <HAL_ADC_MspInit+0x1d4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	f040 80a3 	bne.w	80018ce <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 800178a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800178e:	4a6b      	ldr	r2, [pc, #428]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 800179a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	4a63      	ldr	r2, [pc, #396]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a5c      	ldr	r2, [pc, #368]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001800:	2332      	movs	r3, #50	; 0x32
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	484b      	ldr	r0, [pc, #300]	; (8001940 <HAL_ADC_MspInit+0x1dc>)
 8001814:	f007 fd64 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	4846      	ldr	r0, [pc, #280]	; (8001944 <HAL_ADC_MspInit+0x1e0>)
 800182c:	f007 fd58 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001830:	2303      	movs	r3, #3
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4841      	ldr	r0, [pc, #260]	; (8001948 <HAL_ADC_MspInit+0x1e4>)
 8001844:	f007 fd4c 	bl	80092e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800184a:	4a41      	ldr	r2, [pc, #260]	; (8001950 <HAL_ADC_MspInit+0x1ec>)
 800184c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001850:	2209      	movs	r2, #9
 8001852:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001854:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001868:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800186a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001880:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001886:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800188a:	2204      	movs	r2, #4
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 8001896:	2200      	movs	r2, #0
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018a0:	482a      	ldr	r0, [pc, #168]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 80018a2:	f005 fc39 	bl	8007118 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80018ac:	f001 fccc 	bl	8003248 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 80018b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_ADC_MspInit+0x1e8>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2012      	movs	r0, #18
 80018c2:	f005 fb78 	bl	8006fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018c6:	2012      	movs	r0, #18
 80018c8:	f005 fb8f 	bl	8006fea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80018cc:	e02f      	b.n	800192e <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_ADC_MspInit+0x1f0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d12a      	bne.n	800192e <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80018e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_ADC_MspInit+0x1d8>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001914:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <HAL_ADC_MspInit+0x1f4>)
 800192a:	f007 fcd9 	bl	80092e0 <HAL_GPIO_Init>
}
 800192e:	bf00      	nop
 8001930:	3738      	adds	r7, #56	; 0x38
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	58024400 	.word	0x58024400
 8001940:	58020800 	.word	0x58020800
 8001944:	58020000 	.word	0x58020000
 8001948:	58020400 	.word	0x58020400
 800194c:	2000020c 	.word	0x2000020c
 8001950:	40020010 	.word	0x40020010
 8001954:	58026000 	.word	0x58026000
 8001958:	58021400 	.word	0x58021400

0800195c <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <audioInit+0x18c>)
 800196a:	4a60      	ldr	r2, [pc, #384]	; (8001aec <audioInit+0x190>)
 800196c:	4960      	ldr	r1, [pc, #384]	; (8001af0 <audioInit+0x194>)
 800196e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001af4 <audioInit+0x198>
 8001972:	4861      	ldr	r0, [pc, #388]	; (8001af8 <audioInit+0x19c>)
 8001974:	f7ff fb14 	bl	8000fa0 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001978:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <audioInit+0x19c>)
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	495f      	ldr	r1, [pc, #380]	; (8001afc <audioInit+0x1a0>)
 8001980:	485f      	ldr	r0, [pc, #380]	; (8001b00 <audioInit+0x1a4>)
 8001982:	f7ff fa5f 	bl	8000e44 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <audioInit+0x19c>)
 8001988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198c:	495d      	ldr	r1, [pc, #372]	; (8001b04 <audioInit+0x1a8>)
 800198e:	485e      	ldr	r0, [pc, #376]	; (8001b08 <audioInit+0x1ac>)
 8001990:	f7ff fa58 	bl	8000e44 <tMempool_init>

	for (int i = 0; i < 6; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	e00d      	b.n	80019b6 <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4a5b      	ldr	r2, [pc, #364]	; (8001b0c <audioInit+0x1b0>)
 80019a0:	4413      	add	r3, r2
 80019a2:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <audioInit+0x1a4>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fffc 	bl	80009a8 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	ddee      	ble.n	800199a <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	e009      	b.n	80019d6 <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 80019c2:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <audioInit+0x1a4>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80019ca:	4851      	ldr	r0, [pc, #324]	; (8001b10 <audioInit+0x1b4>)
 80019cc:	f7fe ffec 	bl	80009a8 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	3301      	adds	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	ddf2      	ble.n	80019c2 <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 80019dc:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <audioInit+0x1a4>)
 80019de:	2100      	movs	r1, #0
 80019e0:	484c      	ldr	r0, [pc, #304]	; (8001b14 <audioInit+0x1b8>)
 80019e2:	f7ff fab6 	bl	8000f52 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e013      	b.n	8001a14 <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <audioInit+0x1bc>)
 80019f2:	4413      	add	r3, r2
 80019f4:	4942      	ldr	r1, [pc, #264]	; (8001b00 <audioInit+0x1a4>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa58 	bl	8000eac <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <audioInit+0x1bc>)
 8001a02:	4413      	add	r3, r2
 8001a04:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001b1c <audioInit+0x1c0>
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa83 	bl	8000f14 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	dde8      	ble.n	80019ec <audioInit+0x90>
	}

	for(int i = 0; i < 2; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e00d      	b.n	8001a3c <audioInit+0xe0>
	{
//		tDelay_initToPool(&del[i], SAMPLE_RATE, MAX_DELAY, &largePool);
		tTapeDelay_initToPool(&delT[i], SAMPLE_RATE, MAX_DELAY, &largePool);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <audioInit+0x1c4>)
 8001a26:	4413      	add	r3, r2
 8001a28:	4a37      	ldr	r2, [pc, #220]	; (8001b08 <audioInit+0x1ac>)
 8001a2a:	493e      	ldr	r1, [pc, #248]	; (8001b24 <audioInit+0x1c8>)
 8001a2c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001af4 <audioInit+0x198>
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fe60 	bl	80006f6 <tTapeDelay_initToPool>
	for(int i = 0; i < 2; i++)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	ddee      	ble.n	8001a20 <audioInit+0xc4>
	}


	HAL_Delay(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f003 fc22 	bl	800528c <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e007      	b.n	8001a5e <audioInit+0x102>
	{
		audioOutBuffer[i] = 0;
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <audioInit+0x1cc>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2100      	movs	r1, #0
 8001a54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b7f      	cmp	r3, #127	; 0x7f
 8001a62:	ddf4      	ble.n	8001a4e <audioInit+0xf2>
	}



	HAL_Delay(1);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f003 fc11 	bl	800528c <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	492e      	ldr	r1, [pc, #184]	; (8001b28 <audioInit+0x1cc>)
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	f00e f81a 	bl	800faa8 <HAL_SAI_Transmit_DMA>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <audioInit+0x1d0>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	492c      	ldr	r1, [pc, #176]	; (8001b30 <audioInit+0x1d4>)
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f00e f8c7 	bl	800fc14 <HAL_SAI_Receive_DMA>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <audioInit+0x1d8>)
 8001a8c:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fd2a 	bl	80024e8 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e01e      	b.n	8001ad8 <audioInit+0x17c>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <audioInit+0x1dc>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <audioInit+0x1e0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <audioInit+0x1e4>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <audioInit+0x1e8>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	dddd      	ble.n	8001a9a <audioInit+0x13e>
	}

}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08003185 	.word	0x08003185
 8001aec:	0007a120 	.word	0x0007a120
 8001af0:	24000000 	.word	0x24000000
 8001af4:	473b8000 	.word	0x473b8000
 8001af8:	200016cc 	.word	0x200016cc
 8001afc:	20000344 	.word	0x20000344
 8001b00:	2000171c 	.word	0x2000171c
 8001b04:	60000000 	.word	0x60000000
 8001b08:	20001720 	.word	0x20001720
 8001b0c:	200002c8 	.word	0x200002c8
 8001b10:	20000304 	.word	0x20000304
 8001b14:	200002e0 	.word	0x200002e0
 8001b18:	200002e4 	.word	0x200002e4
 8001b1c:	43dc0000 	.word	0x43dc0000
 8001b20:	200002fc 	.word	0x200002fc
 8001b24:	0003a980 	.word	0x0003a980
 8001b28:	30000040 	.word	0x30000040
 8001b2c:	20000284 	.word	0x20000284
 8001b30:	30000240 	.word	0x30000240
 8001b34:	20000285 	.word	0x20000285
 8001b38:	20001724 	.word	0x20001724
 8001b3c:	20001744 	.word	0x20001744
 8001b40:	20001764 	.word	0x20001764
 8001b44:	20001784 	.word	0x20001784

08001b48 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]

	frameCounter++;
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <audioFrame+0x248>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <audioFrame+0x248>)
 8001b60:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <audioFrame+0x248>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d904      	bls.n	8001b74 <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <audioFrame+0x248>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 8001b70:	f000 faa2 	bl	80020b8 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e017      	b.n	8001baa <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4a85      	ldr	r2, [pc, #532]	; (8001d94 <audioFrame+0x24c>)
 8001b80:	441a      	add	r2, r3
 8001b82:	4985      	ldr	r1, [pc, #532]	; (8001d98 <audioFrame+0x250>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001d9c <audioFrame+0x254>
 8001b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f7fe ff88 	bl	8000ab4 <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	dde4      	ble.n	8001b7a <audioFrame+0x32>
	}

	/** read the inputs of the external knobs with multiplex **/
	if (count_knob < STEPS_MAX - 1){
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <audioFrame+0x258>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d80f      	bhi.n	8001bd8 <audioFrame+0x90>
		mux_pull_values(&randomness, &halls, &fc, &vari, count_knob);
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <audioFrame+0x258>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <audioFrame+0x25c>)
 8001bc0:	4a79      	ldr	r2, [pc, #484]	; (8001da8 <audioFrame+0x260>)
 8001bc2:	497a      	ldr	r1, [pc, #488]	; (8001dac <audioFrame+0x264>)
 8001bc4:	487a      	ldr	r0, [pc, #488]	; (8001db0 <audioFrame+0x268>)
 8001bc6:	f002 fb81 	bl	80042cc <mux_pull_values>
		count_knob++;
 8001bca:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <audioFrame+0x258>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <audioFrame+0x258>)
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e00a      	b.n	8001bee <audioFrame+0xa6>
	}
	else{
		mux_pull_values(&randomness, &halls, &fc, &vari, 7);
 8001bd8:	2307      	movs	r3, #7
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <audioFrame+0x25c>)
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <audioFrame+0x260>)
 8001be0:	4972      	ldr	r1, [pc, #456]	; (8001dac <audioFrame+0x264>)
 8001be2:	4873      	ldr	r0, [pc, #460]	; (8001db0 <audioFrame+0x268>)
 8001be4:	f002 fb72 	bl	80042cc <mux_pull_values>
		count_knob = 0;
 8001be8:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <audioFrame+0x258>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
	}
	/*>-<*/


	/** check if button[2] is held for hall calibration **/
	if(buttonHeld[0] == 1){
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <audioFrame+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d140      	bne.n	8001c78 <audioFrame+0x130>
		for(int j = 0; j < NUM_HALLS; j++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e030      	b.n	8001c5e <audioFrame+0x116>
			halls_cali[j] = halls_cali[j] * ((float)halls_cali_count / (float)(halls_cali_count+1)) + halls[j] / (halls_cali_count+1);
 8001bfc:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <audioFrame+0x270>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <audioFrame+0x274>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001c14:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <audioFrame+0x274>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <audioFrame+0x264>)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	ed93 6a00 	vldr	s12, [r3]
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <audioFrame+0x274>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <audioFrame+0x270>)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0; j < NUM_HALLS; j++){
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	ddcb      	ble.n	8001bfc <audioFrame+0xb4>
		}
		halls_cali_count++;
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <audioFrame+0x274>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <audioFrame+0x274>)
 8001c6e:	801a      	strh	r2, [r3, #0]
		halls_cali_done = 2; // 0: cali never happened, 1: cali done, 2: cali in progress
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <audioFrame+0x278>)
 8001c72:	2202      	movs	r2, #2
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	e009      	b.n	8001c8c <audioFrame+0x144>
	}
	else {
		halls_cali_count = 0;
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <audioFrame+0x274>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
		if(halls_cali_done == 2){
 8001c7e:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <audioFrame+0x278>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d102      	bne.n	8001c8c <audioFrame+0x144>
			halls_cali_done = 1;
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <audioFrame+0x278>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	801a      	strh	r2, [r3, #0]
		}
	}
	/*>-<*/

	/** find xs and ys **/
	if (halls_cali_done){
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <audioFrame+0x278>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <audioFrame+0x186>
		for (int j = 0; j < NUM_HALLS; j++){
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e016      	b.n	8001cc8 <audioFrame+0x180>
			halls_shift[j] = halls[j] - halls_cali[j];
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <audioFrame+0x264>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	ed93 7a00 	vldr	s14, [r3]
 8001ca6:	4a44      	ldr	r2, [pc, #272]	; (8001db8 <audioFrame+0x270>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb6:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <audioFrame+0x27c>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < NUM_HALLS; j++){
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	dde5      	ble.n	8001c9a <audioFrame+0x152>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <audioFrame+0x280>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d057      	beq.n	8001d86 <audioFrame+0x23e>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e051      	b.n	8001d80 <audioFrame+0x238>
		{

			if ((i & 1) == 0)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11e      	bne.n	8001d24 <audioFrame+0x1dc>
			{
				current_sample = (int32_t)(audioTickR((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31)) * TWO_TO_23);
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a37      	ldr	r2, [pc, #220]	; (8001dcc <audioFrame+0x284>)
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001dd0 <audioFrame+0x288>
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	f000 f9c0 	bl	800208c <audioTickR>
 8001d0c:	eef0 7a40 	vmov.f32	s15, s0
 8001d10:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001dd4 <audioFrame+0x28c>
 8001d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1c:	ee17 3a90 	vmov	r3, s15
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e01d      	b.n	8001d60 <audioFrame+0x218>
			}
			else
			{
				current_sample = (int32_t)(audioTickL((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31)) * TWO_TO_23);
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <audioFrame+0x284>)
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001dd0 <audioFrame+0x288>
 8001d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	f000 f84b 	bl	8001de0 <audioTickL>
 8001d4a:	eef0 7a40 	vmov.f32	s15, s0
 8001d4e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dd4 <audioFrame+0x28c>
 8001d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 3a90 	vmov	r3, s15
 8001d5e:	613b      	str	r3, [r7, #16]
			}

			if (LED_States[2] == 1){		//mute
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <audioFrame+0x290>)
 8001d62:	789b      	ldrb	r3, [r3, #2]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <audioFrame+0x224>
				current_sample *= 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4413      	add	r3, r2
 8001d72:	491a      	ldr	r1, [pc, #104]	; (8001ddc <audioFrame+0x294>)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b3f      	cmp	r3, #63	; 0x3f
 8001d84:	ddaa      	ble.n	8001cdc <audioFrame+0x194>

		}
	}
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200002c4 	.word	0x200002c4
 8001d94:	200002c8 	.word	0x200002c8
 8001d98:	30000440 	.word	0x30000440
 8001d9c:	377ffff6 	.word	0x377ffff6
 8001da0:	200017a8 	.word	0x200017a8
 8001da4:	20001744 	.word	0x20001744
 8001da8:	20001724 	.word	0x20001724
 8001dac:	200017ac 	.word	0x200017ac
 8001db0:	200017a4 	.word	0x200017a4
 8001db4:	200002b4 	.word	0x200002b4
 8001db8:	200017ec 	.word	0x200017ec
 8001dbc:	2000186c 	.word	0x2000186c
 8001dc0:	2000186e 	.word	0x2000186e
 8001dc4:	2000182c 	.word	0x2000182c
 8001dc8:	20000286 	.word	0x20000286
 8001dcc:	30000240 	.word	0x30000240
 8001dd0:	2ffffff6 	.word	0x2ffffff6
 8001dd4:	4b000000 	.word	0x4b000000
 8001dd8:	200002c0 	.word	0x200002c0
 8001ddc:	30000040 	.word	0x30000040

08001de0 <audioTickL>:
float del_mix = 0.5f, del_fb = 1.0f;
int del_lenX = SAMPLE_RATE, del_lenY = SAMPLE_RATE;
float a0 = 0.0f, a1 = 0.0f, a2 = 0.0f, b1 = 0.0f, b2 = 0.0f;

float audioTickL(float audioIn)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	ed87 0a01 	vstr	s0, [r7, #4]
//	sampleL += audioIn;
	/*>-<*/

	/* delay */
	/* simple delay */
	filter_fc = tRamp_tick(&adc[0]) * 1550.0f + 50.0f;
 8001dea:	488f      	ldr	r0, [pc, #572]	; (8002028 <audioTickL+0x248>)
 8001dec:	f7fe fe84 	bl	8000af8 <tRamp_tick>
 8001df0:	eef0 7a40 	vmov.f32	s15, s0
 8001df4:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800202c <audioTickL+0x24c>
 8001df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002030 <audioTickL+0x250>
 8001e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e04:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <audioTickL+0x254>)
 8001e06:	edc3 7a00 	vstr	s15, [r3]
	filter_k = tan(PI * filter_fc * INV_SAMPLE_RATE);
 8001e0a:	4b8a      	ldr	r3, [pc, #552]	; (8002034 <audioTickL+0x254>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002038 <audioTickL+0x258>
 8001e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e18:	eddf 6a88 	vldr	s13, [pc, #544]	; 800203c <audioTickL+0x25c>
 8001e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e24:	eeb0 0b47 	vmov.f64	d0, d7
 8001e28:	f016 f896 	bl	8017f58 <tan>
 8001e2c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e34:	4b82      	ldr	r3, [pc, #520]	; (8002040 <audioTickL+0x260>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
	filter_c = (filter_k - 1.0f) / (filter_k + 1.0f);
 8001e3a:	4b81      	ldr	r3, [pc, #516]	; (8002040 <audioTickL+0x260>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e44:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001e48:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <audioTickL+0x260>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <audioTickL+0x264>)
 8001e5c:	edc3 7a00 	vstr	s15, [r3]
	del_mix = 1.0f - tRamp_tick(&adc[1]);
 8001e60:	4879      	ldr	r0, [pc, #484]	; (8002048 <audioTickL+0x268>)
 8001e62:	f7fe fe49 	bl	8000af8 <tRamp_tick>
 8001e66:	eef0 7a40 	vmov.f32	s15, s0
 8001e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <audioTickL+0x26c>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
	del_lenX = (int)(pow(8, (9 * tRamp_tick(&adc[2]) - 3)) + 1);
 8001e78:	4875      	ldr	r0, [pc, #468]	; (8002050 <audioTickL+0x270>)
 8001e7a:	f7fe fe3d 	bl	8000af8 <tRamp_tick>
 8001e7e:	eef0 7a40 	vmov.f32	s15, s0
 8001e82:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e96:	eeb0 1b47 	vmov.f64	d1, d7
 8001e9a:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 8001e9e:	f015 fe0b 	bl	8017ab8 <pow>
 8001ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ea6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001eaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001eb2:	ee17 2a90 	vmov	r2, s15
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <audioTickL+0x274>)
 8001eb8:	601a      	str	r2, [r3, #0]
	del_lenY = LED_States[0] == 1 ? del_lenX : (int)(pow(8, (9 * tRamp_tick(&adc[5]) - 3)) + 1);
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <audioTickL+0x278>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d01f      	beq.n	8001f02 <audioTickL+0x122>
 8001ec2:	4866      	ldr	r0, [pc, #408]	; (800205c <audioTickL+0x27c>)
 8001ec4:	f7fe fe18 	bl	8000af8 <tRamp_tick>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001edc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ee0:	eeb0 1b47 	vmov.f64	d1, d7
 8001ee4:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 8001ee8:	f015 fde6 	bl	8017ab8 <pow>
 8001eec:	eeb0 7b40 	vmov.f64	d7, d0
 8001ef0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ef4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ef8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001efc:	ee17 2a90 	vmov	r2, s15
 8001f00:	e001      	b.n	8001f06 <audioTickL+0x126>
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <audioTickL+0x274>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <audioTickL+0x280>)
 8001f08:	601a      	str	r2, [r3, #0]
//	del_len = tRamp_tick(&adc[2]) * SAMPLE_RATE * 3;
	del_fb = tRamp_tick(&adc[3]);
 8001f0a:	4856      	ldr	r0, [pc, #344]	; (8002064 <audioTickL+0x284>)
 8001f0c:	f7fe fdf4 	bl	8000af8 <tRamp_tick>
 8001f10:	eef0 7a40 	vmov.f32	s15, s0
 8001f14:	4b54      	ldr	r3, [pc, #336]	; (8002068 <audioTickL+0x288>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]

	a0 = del_mix + (1 - del_mix) * filter_c;
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <audioTickL+0x26c>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f28:	4b46      	ldr	r3, [pc, #280]	; (8002044 <audioTickL+0x264>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <audioTickL+0x26c>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <audioTickL+0x28c>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
	a1 = 1 - del_mix;
 8001f42:	4b42      	ldr	r3, [pc, #264]	; (800204c <audioTickL+0x26c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <audioTickL+0x290>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	b1 = filter_c * del_fb * (1 - del_mix);
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <audioTickL+0x264>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <audioTickL+0x288>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <audioTickL+0x26c>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <audioTickL+0x294>)
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
//	del[1]->lastOut = del[1]->buff[del[1]->outPoint];
//	if (++(del[1]->outPoint) == del[1]->maxDelay)    del[1]->outPoint = 0;
	/*>-<*/

	/* tape delay */
	tTapeDelay_setDelay(&delT[0], del_lenX);
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <audioTickL+0x274>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	483a      	ldr	r0, [pc, #232]	; (8002078 <audioTickL+0x298>)
 8001f90:	f7fe fce9 	bl	8000966 <tTapeDelay_setDelay>
	tTapeDelay_setDelay(&delT[1], del_lenY-1);
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <audioTickL+0x280>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	4835      	ldr	r0, [pc, #212]	; (800207c <audioTickL+0x29c>)
 8001fa8:	f7fe fcdd 	bl	8000966 <tTapeDelay_setDelay>

	x1L = tTapeDelay_tick(&delT[0], audioIn);
 8001fac:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fb0:	4831      	ldr	r0, [pc, #196]	; (8002078 <audioTickL+0x298>)
 8001fb2:	f7fe fbe4 	bl	800077e <tTapeDelay_tick>
 8001fb6:	eef0 7a40 	vmov.f32	s15, s0
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <audioTickL+0x2a0>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
	sampleL = a0 * audioIn + a1 * x1L - b1 * y1L;
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <audioTickL+0x28c>)
 8001fc2:	ed93 7a00 	vldr	s14, [r3]
 8001fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <audioTickL+0x290>)
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <audioTickL+0x2a0>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <audioTickL+0x294>)
 8001fe4:	edd3 6a00 	vldr	s13, [r3]
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <audioTickL+0x2a4>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <audioTickL+0x2a8>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
	y1L = tTapeDelay_tick(&delT[1], sampleL);
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <audioTickL+0x2a8>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	481d      	ldr	r0, [pc, #116]	; (800207c <audioTickL+0x29c>)
 8002008:	f7fe fbb9 	bl	800077e <tTapeDelay_tick>
 800200c:	eef0 7a40 	vmov.f32	s15, s0
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <audioTickL+0x2a4>)
 8002012:	edc3 7a00 	vstr	s15, [r3]

	/*>-<*/

	return sampleL;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <audioTickL+0x2a8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	ee07 3a90 	vmov	s15, r3
}
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200002c8 	.word	0x200002c8
 800202c:	44c1c000 	.word	0x44c1c000
 8002030:	42480000 	.word	0x42480000
 8002034:	20001880 	.word	0x20001880
 8002038:	40490fdb 	.word	0x40490fdb
 800203c:	473b8000 	.word	0x473b8000
 8002040:	20001884 	.word	0x20001884
 8002044:	20001888 	.word	0x20001888
 8002048:	200002cc 	.word	0x200002cc
 800204c:	20000004 	.word	0x20000004
 8002050:	200002d0 	.word	0x200002d0
 8002054:	2000000c 	.word	0x2000000c
 8002058:	200002c0 	.word	0x200002c0
 800205c:	200002dc 	.word	0x200002dc
 8002060:	20000010 	.word	0x20000010
 8002064:	200002d4 	.word	0x200002d4
 8002068:	20000008 	.word	0x20000008
 800206c:	2000188c 	.word	0x2000188c
 8002070:	20001890 	.word	0x20001890
 8002074:	20001894 	.word	0x20001894
 8002078:	200002fc 	.word	0x200002fc
 800207c:	20000300 	.word	0x20000300
 8002080:	20001878 	.word	0x20001878
 8002084:	20001874 	.word	0x20001874
 8002088:	20001870 	.word	0x20001870

0800208c <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <audioTickR+0x28>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
	return sampleR;
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <audioTickR+0x28>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	ee07 3a90 	vmov	s15, r3
}
 80020a6:	eeb0 0a67 	vmov.f32	s0, s15
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	2000187c 	.word	0x2000187c

080020b8 <buttonCheck>:

void buttonCheck(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 80020be:	2140      	movs	r1, #64	; 0x40
 80020c0:	489b      	ldr	r0, [pc, #620]	; (8002330 <buttonCheck+0x278>)
 80020c2:	f007 fabd 	bl	8009640 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b97      	ldr	r3, [pc, #604]	; (8002334 <buttonCheck+0x27c>)
 80020d6:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	4895      	ldr	r0, [pc, #596]	; (8002330 <buttonCheck+0x278>)
 80020dc:	f007 fab0 	bl	8009640 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b91      	ldr	r3, [pc, #580]	; (8002334 <buttonCheck+0x27c>)
 80020f0:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 80020f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f6:	4890      	ldr	r0, [pc, #576]	; (8002338 <buttonCheck+0x280>)
 80020f8:	f007 faa2 	bl	8009640 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4b8a      	ldr	r3, [pc, #552]	; (8002334 <buttonCheck+0x27c>)
 800210c:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	e09e      	b.n	8002252 <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8002114:	4a87      	ldr	r2, [pc, #540]	; (8002334 <buttonCheck+0x27c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4987      	ldr	r1, [pc, #540]	; (800233c <buttonCheck+0x284>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	440b      	add	r3, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d00e      	beq.n	8002146 <buttonCheck+0x8e>
 8002128:	4a85      	ldr	r2, [pc, #532]	; (8002340 <buttonCheck+0x288>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	2b09      	cmp	r3, #9
 8002132:	d808      	bhi.n	8002146 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8002134:	4a82      	ldr	r2, [pc, #520]	; (8002340 <buttonCheck+0x288>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4980      	ldr	r1, [pc, #512]	; (8002340 <buttonCheck+0x288>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8002146:	4a7b      	ldr	r2, [pc, #492]	; (8002334 <buttonCheck+0x27c>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	497b      	ldr	r1, [pc, #492]	; (800233c <buttonCheck+0x284>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	440b      	add	r3, r1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d01e      	beq.n	8002198 <buttonCheck+0xe0>
 800215a:	4a79      	ldr	r2, [pc, #484]	; (8002340 <buttonCheck+0x288>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	2b09      	cmp	r3, #9
 8002164:	d918      	bls.n	8002198 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8002166:	4a73      	ldr	r2, [pc, #460]	; (8002334 <buttonCheck+0x27c>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d104      	bne.n	800217c <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8002172:	4a74      	ldr	r2, [pc, #464]	; (8002344 <buttonCheck+0x28c>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2101      	movs	r1, #1
 8002178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 800217c:	4a6d      	ldr	r2, [pc, #436]	; (8002334 <buttonCheck+0x27c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	7819      	ldrb	r1, [r3, #0]
 8002184:	4a6d      	ldr	r2, [pc, #436]	; (800233c <buttonCheck+0x284>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	460a      	mov	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 800218e:	4a6c      	ldr	r2, [pc, #432]	; (8002340 <buttonCheck+0x288>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2100      	movs	r1, #0
 8002194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <buttonCheck+0x290>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12d      	bne.n	8002200 <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <buttonCheck+0x27c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00f      	beq.n	80021d0 <buttonCheck+0x118>
 80021b0:	4a66      	ldr	r2, [pc, #408]	; (800234c <buttonCheck+0x294>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021bc:	d208      	bcs.n	80021d0 <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 80021be:	4a63      	ldr	r2, [pc, #396]	; (800234c <buttonCheck+0x294>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4960      	ldr	r1, [pc, #384]	; (800234c <buttonCheck+0x294>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <buttonCheck+0x27c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d037      	beq.n	800224c <buttonCheck+0x194>
 80021dc:	4a5b      	ldr	r2, [pc, #364]	; (800234c <buttonCheck+0x294>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e8:	d330      	bcc.n	800224c <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 80021ea:	4a57      	ldr	r2, [pc, #348]	; (8002348 <buttonCheck+0x290>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2101      	movs	r1, #1
 80021f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 80021f4:	4a55      	ldr	r2, [pc, #340]	; (800234c <buttonCheck+0x294>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2100      	movs	r1, #0
 80021fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80021fe:	e025      	b.n	800224c <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <buttonCheck+0x27c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <buttonCheck+0x174>
 800220c:	4a4f      	ldr	r2, [pc, #316]	; (800234c <buttonCheck+0x294>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	2b31      	cmp	r3, #49	; 0x31
 8002216:	d809      	bhi.n	800222c <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <buttonCheck+0x294>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	494a      	ldr	r1, [pc, #296]	; (800234c <buttonCheck+0x294>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800222a:	e00f      	b.n	800224c <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 800222c:	4a41      	ldr	r2, [pc, #260]	; (8002334 <buttonCheck+0x27c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 8002238:	4a43      	ldr	r2, [pc, #268]	; (8002348 <buttonCheck+0x290>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2100      	movs	r1, #0
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 8002242:	4a42      	ldr	r2, [pc, #264]	; (800234c <buttonCheck+0x294>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2100      	movs	r1, #0
 8002248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3301      	adds	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	f77f af5d 	ble.w	8002114 <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <buttonCheck+0x28c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d119      	bne.n	8002296 <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <buttonCheck+0x298>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002270:	4838      	ldr	r0, [pc, #224]	; (8002354 <buttonCheck+0x29c>)
 8002272:	f007 f9fd 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <buttonCheck+0x298>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e008      	b.n	8002290 <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002284:	4833      	ldr	r0, [pc, #204]	; (8002354 <buttonCheck+0x29c>)
 8002286:	f007 f9f3 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <buttonCheck+0x298>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <buttonCheck+0x28c>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <buttonCheck+0x28c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d116      	bne.n	80022cc <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <buttonCheck+0x298>)
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	4829      	ldr	r0, [pc, #164]	; (8002354 <buttonCheck+0x29c>)
 80022ae:	f007 f9df 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 80022b2:	4b27      	ldr	r3, [pc, #156]	; (8002350 <buttonCheck+0x298>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	705a      	strb	r2, [r3, #1]
 80022b8:	e008      	b.n	80022cc <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c0:	4824      	ldr	r0, [pc, #144]	; (8002354 <buttonCheck+0x29c>)
 80022c2:	f007 f9d5 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <buttonCheck+0x298>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <buttonCheck+0x28c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d119      	bne.n	8002308 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <buttonCheck+0x298>)
 80022d6:	789b      	ldrb	r3, [r3, #2]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e2:	4815      	ldr	r0, [pc, #84]	; (8002338 <buttonCheck+0x280>)
 80022e4:	f007 f9c4 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <buttonCheck+0x298>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	709a      	strb	r2, [r3, #2]
 80022ee:	e008      	b.n	8002302 <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f6:	4810      	ldr	r0, [pc, #64]	; (8002338 <buttonCheck+0x280>)
 80022f8:	f007 f9ba 	bl	8009670 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <buttonCheck+0x298>)
 80022fe:	2200      	movs	r2, #0
 8002300:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <buttonCheck+0x28c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <buttonCheck+0x290>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <buttonCheck+0x2a0>)
 8002316:	f007 f9ab 	bl	8009670 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 800231a:	e004      	b.n	8002326 <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	2140      	movs	r1, #64	; 0x40
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <buttonCheck+0x2a0>)
 8002322:	f007 f9a5 	bl	8009670 <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	58021800 	.word	0x58021800
 8002334:	20000288 	.word	0x20000288
 8002338:	58020c00 	.word	0x58020c00
 800233c:	2000028c 	.word	0x2000028c
 8002340:	20000290 	.word	0x20000290
 8002344:	2000029c 	.word	0x2000029c
 8002348:	200002b4 	.word	0x200002b4
 800234c:	200002a8 	.word	0x200002a8
 8002350:	200002c0 	.word	0x200002c0
 8002354:	58020000 	.word	0x58020000
 8002358:	58020800 	.word	0x58020800

0800235c <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	;
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	;
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  ;
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 80023a0:	2040      	movs	r0, #64	; 0x40
 80023a2:	f7ff fbd1 	bl	8001b48 <audioFrame>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fbc6 	bl	8001b48 <audioFrame>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80023ce:	f000 f879 	bl	80024c4 <BSP_SD_IsDetected>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80023d8:	2302      	movs	r3, #2
 80023da:	e012      	b.n	8002402 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <BSP_SD_Init+0x48>)
 80023de:	f00d fefe 	bl	80101de <HAL_SD_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80023ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <BSP_SD_Init+0x48>)
 80023f2:	f00e fdb9 	bl	8010f68 <HAL_SD_ConfigWideBusOperation>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8002400:	79fb      	ldrb	r3, [r7, #7]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20001b64 	.word	0x20001b64

08002410 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <BSP_SD_ReadBlocks+0x38>)
 800242e:	f00d fff5 	bl	801041c <HAL_SD_ReadBlocks>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20001b64 	.word	0x20001b64

0800244c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <BSP_SD_WriteBlocks+0x38>)
 800246a:	f00e f961 	bl	8010730 <HAL_SD_WriteBlocks>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002478:	7dfb      	ldrb	r3, [r7, #23]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20001b64 	.word	0x20001b64

08002488 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800248c:	4805      	ldr	r0, [pc, #20]	; (80024a4 <BSP_SD_GetCardState+0x1c>)
 800248e:	f00e fe7d 	bl	801118c <HAL_SD_GetCardState>
 8002492:	4603      	mov	r3, r0
 8002494:	2b04      	cmp	r3, #4
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001b64 	.word	0x20001b64

080024a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <BSP_SD_GetCardInfo+0x18>)
 80024b4:	f00e fd2c 	bl	8010f10 <HAL_SD_GetCardInfo>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001b64 	.word	0x20001b64

080024c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80024ca:	2301      	movs	r3, #1
 80024cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80024ce:	f000 f911 	bl	80026f4 <BSP_PlatformIsDetected>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80024d8:	2300      	movs	r3, #0
 80024da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	b2db      	uxtb	r3, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f6:	4858      	ldr	r0, [pc, #352]	; (8002658 <AudioCodec_init+0x170>)
 80024f8:	f007 f8ba 	bl	8009670 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f002 fec5 	bl	800528c <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8002502:	4b56      	ldr	r3, [pc, #344]	; (800265c <AudioCodec_init+0x174>)
 8002504:	2207      	movs	r2, #7
 8002506:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8002508:	4b54      	ldr	r3, [pc, #336]	; (800265c <AudioCodec_init+0x174>)
 800250a:	2203      	movs	r2, #3
 800250c:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <AudioCodec_init+0x178>)
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <AudioCodec_init+0x17c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	4a50      	ldr	r2, [pc, #320]	; (800265c <AudioCodec_init+0x174>)
 800251c:	2120      	movs	r1, #32
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f008 fe64 	bl	800b1ec <HAL_I2C_Master_Transmit>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <AudioCodec_init+0x180>)
 800252a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <AudioCodec_init+0x174>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <AudioCodec_init+0x174>)
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <AudioCodec_init+0x178>)
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <AudioCodec_init+0x17c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	4a45      	ldr	r2, [pc, #276]	; (800265c <AudioCodec_init+0x174>)
 8002546:	2120      	movs	r1, #32
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f008 fe4f 	bl	800b1ec <HAL_I2C_Master_Transmit>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <AudioCodec_init+0x180>)
 8002554:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <AudioCodec_init+0x174>)
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <AudioCodec_init+0x174>)
 800255e:	2200      	movs	r2, #0
 8002560:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <AudioCodec_init+0x178>)
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <AudioCodec_init+0x17c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	4a3b      	ldr	r2, [pc, #236]	; (800265c <AudioCodec_init+0x174>)
 8002570:	2120      	movs	r1, #32
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f008 fe3a 	bl	800b1ec <HAL_I2C_Master_Transmit>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <AudioCodec_init+0x180>)
 800257e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <AudioCodec_init+0x174>)
 8002582:	2203      	movs	r2, #3
 8002584:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <AudioCodec_init+0x174>)
 8002588:	2279      	movs	r2, #121	; 0x79
 800258a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <AudioCodec_init+0x178>)
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <AudioCodec_init+0x17c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <AudioCodec_init+0x174>)
 800259a:	2120      	movs	r1, #32
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f008 fe25 	bl	800b1ec <HAL_I2C_Master_Transmit>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <AudioCodec_init+0x180>)
 80025a8:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <AudioCodec_init+0x174>)
 80025ac:	2204      	movs	r2, #4
 80025ae:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <AudioCodec_init+0x174>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <AudioCodec_init+0x178>)
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <AudioCodec_init+0x17c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	4a26      	ldr	r2, [pc, #152]	; (800265c <AudioCodec_init+0x174>)
 80025c4:	2120      	movs	r1, #32
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f008 fe10 	bl	800b1ec <HAL_I2C_Master_Transmit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <AudioCodec_init+0x180>)
 80025d2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <AudioCodec_init+0x174>)
 80025d6:	2205      	movs	r2, #5
 80025d8:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <AudioCodec_init+0x174>)
 80025dc:	2201      	movs	r2, #1
 80025de:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <AudioCodec_init+0x178>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <AudioCodec_init+0x17c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <AudioCodec_init+0x174>)
 80025ee:	2120      	movs	r1, #32
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f008 fdfb 	bl	800b1ec <HAL_I2C_Master_Transmit>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <AudioCodec_init+0x180>)
 80025fc:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <AudioCodec_init+0x174>)
 8002600:	2206      	movs	r2, #6
 8002602:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <AudioCodec_init+0x174>)
 8002606:	2210      	movs	r2, #16
 8002608:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <AudioCodec_init+0x178>)
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <AudioCodec_init+0x17c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	4a11      	ldr	r2, [pc, #68]	; (800265c <AudioCodec_init+0x174>)
 8002618:	2120      	movs	r1, #32
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f008 fde6 	bl	800b1ec <HAL_I2C_Master_Transmit>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <AudioCodec_init+0x180>)
 8002626:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <AudioCodec_init+0x174>)
 800262a:	2207      	movs	r2, #7
 800262c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <AudioCodec_init+0x174>)
 8002630:	2202      	movs	r2, #2
 8002632:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <AudioCodec_init+0x178>)
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <AudioCodec_init+0x17c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <AudioCodec_init+0x174>)
 8002642:	2120      	movs	r1, #32
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f008 fdd1 	bl	800b1ec <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <AudioCodec_init+0x184>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	58020800 	.word	0x58020800
 800265c:	20001898 	.word	0x20001898
 8002660:	20000014 	.word	0x20000014
 8002664:	20000018 	.word	0x20000018
 8002668:	2000189a 	.word	0x2000189a
 800266c:	20000286 	.word	0x20000286

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_DMA_Init+0x5c>)
 8002678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <MX_DMA_Init+0x5c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_DMA_Init+0x5c>)
 8002688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	200b      	movs	r0, #11
 800269a:	f004 fc8c 	bl	8006fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800269e:	200b      	movs	r0, #11
 80026a0:	f004 fca3 	bl	8006fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	200c      	movs	r0, #12
 80026aa:	f004 fc84 	bl	8006fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026ae:	200c      	movs	r0, #12
 80026b0:	f004 fc9b 	bl	8006fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	200d      	movs	r0, #13
 80026ba:	f004 fc7c 	bl	8006fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026be:	200d      	movs	r0, #13
 80026c0:	f004 fc93 	bl	8006fea <HAL_NVIC_EnableIRQ>

}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	58024400 	.word	0x58024400

080026d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <MX_FATFS_Init+0x18>)
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_FATFS_Init+0x1c>)
 80026d8:	f014 ffec 	bl	80176b4 <FATFS_LinkDriver>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <MX_FATFS_Init+0x20>)
 80026e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000189c 	.word	0x2000189c
 80026ec:	08018bd0 	.word	0x08018bd0
 80026f0:	2000189b 	.word	0x2000189b

080026f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80026fa:	2301      	movs	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80026fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002702:	4806      	ldr	r0, [pc, #24]	; (800271c <BSP_PlatformIsDetected+0x28>)
 8002704:	f006 ff9c 	bl	8009640 <HAL_GPIO_ReadPin>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8002712:	79fb      	ldrb	r3, [r7, #7]
}  
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	58020800 	.word	0x58020800

08002720 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_FMC_Init+0xa0>)
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <MX_FMC_Init+0xa4>)
 800273c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002746:	2201      	movs	r2, #1
 8002748:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_FMC_Init+0xa0>)
 800274c:	2208      	movs	r2, #8
 800274e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002752:	2210      	movs	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_FMC_Init+0xa0>)
 800275e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002762:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_FMC_Init+0xa0>)
 800276c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002770:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_FMC_Init+0xa0>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002780:	2302      	movs	r3, #2
 8002782:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002784:	2306      	movs	r3, #6
 8002786:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002788:	2304      	movs	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800278c:	2306      	movs	r3, #6
 800278e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002790:	2302      	movs	r3, #2
 8002792:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002798:	2302      	movs	r3, #2
 800279a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	; (80027c0 <MX_FMC_Init+0xa0>)
 80027a2:	f00f f8cd 	bl	8011940 <HAL_SDRAM_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80027ac:	f000 fd4c 	bl	8003248 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80027b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80027b4:	f002 fd9a 	bl	80052ec <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200018a0 	.word	0x200018a0
 80027c4:	52004140 	.word	0x52004140

080027c8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b8      	sub	sp, #224	; 0xe0
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_FMC_MspInit+0x15c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8099 	bne.w	800291a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80027e8:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_FMC_MspInit+0x15c>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	22c0      	movs	r2, #192	; 0xc0
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f015 f828 	bl	801784c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80027fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002808:	2300      	movs	r3, #0
 800280a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4618      	mov	r0, r3
 8002812:	f00a f8b7 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800281c:	f000 fd14 	bl	8003248 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_FMC_MspInit+0x160>)
 8002822:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <HAL_FMC_MspInit+0x160>)
 8002828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800282c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_FMC_MspInit+0x160>)
 8002832:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800283e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002858:	230c      	movs	r3, #12
 800285a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800285e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002862:	4619      	mov	r1, r3
 8002864:	4831      	ldr	r0, [pc, #196]	; (800292c <HAL_FMC_MspInit+0x164>)
 8002866:	f006 fd3b 	bl	80092e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800286a:	230d      	movs	r3, #13
 800286c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002882:	230c      	movs	r3, #12
 8002884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800288c:	4619      	mov	r1, r3
 800288e:	4828      	ldr	r0, [pc, #160]	; (8002930 <HAL_FMC_MspInit+0x168>)
 8002890:	f006 fd26 	bl	80092e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002894:	f248 1337 	movw	r3, #33079	; 0x8137
 8002898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028ae:	230c      	movs	r3, #12
 80028b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028b8:	4619      	mov	r1, r3
 80028ba:	481e      	ldr	r0, [pc, #120]	; (8002934 <HAL_FMC_MspInit+0x16c>)
 80028bc:	f006 fd10 	bl	80092e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80028c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80028c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028da:	230c      	movs	r3, #12
 80028dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028e4:	4619      	mov	r1, r3
 80028e6:	4814      	ldr	r0, [pc, #80]	; (8002938 <HAL_FMC_MspInit+0x170>)
 80028e8:	f006 fcfa 	bl	80092e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80028ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002906:	230c      	movs	r3, #12
 8002908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800290c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002910:	4619      	mov	r1, r3
 8002912:	480a      	ldr	r0, [pc, #40]	; (800293c <HAL_FMC_MspInit+0x174>)
 8002914:	f006 fce4 	bl	80092e0 <HAL_GPIO_Init>
 8002918:	e000      	b.n	800291c <HAL_FMC_MspInit+0x154>
    return;
 800291a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800291c:	37e0      	adds	r7, #224	; 0xe0
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200018d4 	.word	0x200018d4
 8002928:	58024400 	.word	0x58024400
 800292c:	58021400 	.word	0x58021400
 8002930:	58020800 	.word	0x58020800
 8002934:	58021800 	.word	0x58021800
 8002938:	58021000 	.word	0x58021000
 800293c:	58020c00 	.word	0x58020c00

08002940 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002948:	f7ff ff3e 	bl	80027c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	; 0x38
 8002958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800296a:	4b9b      	ldr	r3, [pc, #620]	; (8002bd8 <MX_GPIO_Init+0x284>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002970:	4a99      	ldr	r2, [pc, #612]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800297a:	4b97      	ldr	r3, [pc, #604]	; (8002bd8 <MX_GPIO_Init+0x284>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002988:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <MX_GPIO_Init+0x284>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298e:	4a92      	ldr	r2, [pc, #584]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002998:	4b8f      	ldr	r3, [pc, #572]	; (8002bd8 <MX_GPIO_Init+0x284>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029a6:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029ae:	f043 0320 	orr.w	r3, r3, #32
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	4a83      	ldr	r2, [pc, #524]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d4:	4b80      	ldr	r3, [pc, #512]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a7b      	ldr	r2, [pc, #492]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <MX_GPIO_Init+0x284>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b75      	ldr	r3, [pc, #468]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	4a74      	ldr	r2, [pc, #464]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a10:	4b71      	ldr	r3, [pc, #452]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a42:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4c:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <MX_GPIO_Init+0x284>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f244 0140 	movw	r1, #16448	; 0x4040
 8002a60:	485e      	ldr	r0, [pc, #376]	; (8002bdc <MX_GPIO_Init+0x288>)
 8002a62:	f006 fe05 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002a66:	2200      	movs	r2, #0
 8002a68:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002a6c:	485c      	ldr	r0, [pc, #368]	; (8002be0 <MX_GPIO_Init+0x28c>)
 8002a6e:	f006 fdff 	bl	8009670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a78:	485a      	ldr	r0, [pc, #360]	; (8002be4 <MX_GPIO_Init+0x290>)
 8002a7a:	f006 fdf9 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002a84:	4858      	ldr	r0, [pc, #352]	; (8002be8 <MX_GPIO_Init+0x294>)
 8002a86:	f006 fdf3 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	484f      	ldr	r0, [pc, #316]	; (8002bdc <MX_GPIO_Init+0x288>)
 8002aa0:	f006 fc1e 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002aa4:	f244 0340 	movw	r3, #16448	; 0x4040
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aba:	4619      	mov	r1, r3
 8002abc:	4847      	ldr	r0, [pc, #284]	; (8002bdc <MX_GPIO_Init+0x288>)
 8002abe:	f006 fc0f 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4840      	ldr	r0, [pc, #256]	; (8002bdc <MX_GPIO_Init+0x288>)
 8002ada:	f006 fc01 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aee:	4619      	mov	r1, r3
 8002af0:	483b      	ldr	r0, [pc, #236]	; (8002be0 <MX_GPIO_Init+0x28c>)
 8002af2:	f006 fbf5 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002af6:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4834      	ldr	r0, [pc, #208]	; (8002be0 <MX_GPIO_Init+0x28c>)
 8002b10:	f006 fbe6 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	482e      	ldr	r0, [pc, #184]	; (8002be4 <MX_GPIO_Init+0x290>)
 8002b2a:	f006 fbd9 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b34:	2301      	movs	r3, #1
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b44:	4619      	mov	r1, r3
 8002b46:	4827      	ldr	r0, [pc, #156]	; (8002be4 <MX_GPIO_Init+0x290>)
 8002b48:	f006 fbca 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002b4c:	f242 0378 	movw	r3, #8312	; 0x2078
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b52:	2303      	movs	r3, #3
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4820      	ldr	r0, [pc, #128]	; (8002be4 <MX_GPIO_Init+0x290>)
 8002b62:	f006 fbbd 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 8002b66:	f243 0308 	movw	r3, #12296	; 0x3008
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	481c      	ldr	r0, [pc, #112]	; (8002bec <MX_GPIO_Init+0x298>)
 8002b7c:	f006 fbb0 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b80:	23c0      	movs	r3, #192	; 0xc0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4816      	ldr	r0, [pc, #88]	; (8002bec <MX_GPIO_Init+0x298>)
 8002b94:	f006 fba4 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <MX_GPIO_Init+0x294>)
 8002bb2:	f006 fb95 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4807      	ldr	r0, [pc, #28]	; (8002be8 <MX_GPIO_Init+0x294>)
 8002bcc:	f006 fb88 	bl	80092e0 <HAL_GPIO_Init>

}
 8002bd0:	bf00      	nop
 8002bd2:	3738      	adds	r7, #56	; 0x38
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	58020800 	.word	0x58020800
 8002be0:	58020400 	.word	0x58020400
 8002be4:	58020c00 	.word	0x58020c00
 8002be8:	58020000 	.word	0x58020000
 8002bec:	58021800 	.word	0x58021800

08002bf0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <MX_I2C2_Init+0x78>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <MX_I2C2_Init+0x7c>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c2a:	480e      	ldr	r0, [pc, #56]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c2c:	f008 fa4e 	bl	800b0cc <HAL_I2C_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c36:	f000 fb07 	bl	8003248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c3e:	f008 fdd9 	bl	800b7f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c48:	f000 fafe 	bl	8003248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c50:	f008 fe1b 	bl	800b88a <HAL_I2CEx_ConfigDigitalFilter>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c5a:	f000 faf5 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200018d8 	.word	0x200018d8
 8002c68:	40005800 	.word	0x40005800
 8002c6c:	505097f4 	.word	0x505097f4

08002c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b0ba      	sub	sp, #232	; 0xe8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	22c0      	movs	r2, #192	; 0xc0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f014 fddb 	bl	801784c <memset>
  if(i2cHandle->Instance==I2C2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_I2C_MspInit+0xc8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d146      	bne.n	8002d2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ca0:	f04f 0208 	mov.w	r2, #8
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f009 fe64 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002cc2:	f000 fac1 	bl	8003248 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ce4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cec:	2312      	movs	r3, #18
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <HAL_I2C_MspInit+0xd0>)
 8002d0c:	f006 fae8 	bl	80092e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_I2C_MspInit+0xcc>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002d2e:	bf00      	nop
 8002d30:	37e8      	adds	r7, #232	; 0xe8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40005800 	.word	0x40005800
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	58020400 	.word	0x58020400

08002d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8002d4a:	f000 fa3b 	bl	80031c4 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <main+0x17c>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11b      	bne.n	8002d92 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d5a:	f3bf 8f4f 	dsb	sy
}
 8002d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d60:	f3bf 8f6f 	isb	sy
}
 8002d64:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002d66:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <main+0x17c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002d6e:	f3bf 8f4f 	dsb	sy
}
 8002d72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d74:	f3bf 8f6f 	isb	sy
}
 8002d78:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <main+0x17c>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4a50      	ldr	r2, [pc, #320]	; (8002ec0 <main+0x17c>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d86:	f3bf 8f4f 	dsb	sy
}
 8002d8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d8c:	f3bf 8f6f 	isb	sy
}
 8002d90:	e000      	b.n	8002d94 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002d92:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <main+0x17c>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d138      	bne.n	8002e12 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <main+0x17c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002da8:	f3bf 8f4f 	dsb	sy
}
 8002dac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <main+0x17c>)
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	0b5b      	lsrs	r3, r3, #13
 8002dba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dbe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002dd2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dd8:	4939      	ldr	r1, [pc, #228]	; (8002ec0 <main+0x17c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <main+0x86>
    } while(sets-- != 0U);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1e5a      	subs	r2, r3, #1
 8002dee:	60ba      	str	r2, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e5      	bne.n	8002dc0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002df4:	f3bf 8f4f 	dsb	sy
}
 8002df8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <main+0x17c>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <main+0x17c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e06:	f3bf 8f4f 	dsb	sy
}
 8002e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e0c:	f3bf 8f6f 	isb	sy
}
 8002e10:	e000      	b.n	8002e14 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002e12:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e14:	f002 f9a8 	bl	8005168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e18:	f000 f860 	bl	8002edc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002e1c:	f000 f90e 	bl	800303c <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e20:	f7ff fd98 	bl	8002954 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e24:	f7ff fc24 	bl	8002670 <MX_DMA_Init>
  MX_FMC_Init();
 8002e28:	f7ff fc7a 	bl	8002720 <MX_FMC_Init>
  MX_ADC1_Init();
 8002e2c:	f7fe fae0 	bl	80013f0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002e30:	f7fe fc00 	bl	8001634 <MX_ADC3_Init>
  MX_I2C2_Init();
 8002e34:	f7ff fedc 	bl	8002bf0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002e38:	f000 fca6 	bl	8003788 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002e3c:	f000 fd3e 	bl	80038bc <MX_SPI1_Init>
  MX_FATFS_Init();
 8002e40:	f7ff fc46 	bl	80026d0 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002e44:	f000 fa54 	bl	80032f0 <MX_SAI1_Init>
  MX_TIM3_Init();
 8002e48:	f000 ffc8 	bl	8003ddc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e4c:	f001 f83e 	bl	8003ecc <MX_TIM4_Init>
  MX_TIM7_Init();
 8002e50:	f001 f8ca 	bl	8003fe8 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002e54:	f000 ff32 	bl	8003cbc <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002e58:	f001 fa7c 	bl	8004354 <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002e5c:	f000 f9f8 	bl	8003250 <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002e60:	f001 fb54 	bl	800450c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e6a:	4816      	ldr	r0, [pc, #88]	; (8002ec4 <main+0x180>)
 8002e6c:	f006 fc00 	bl	8009670 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002e70:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8002e74:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	eee1 3a10 	vmsr	fpscr, r3
}
 8002e88:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8002e8a:	220a      	movs	r2, #10
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <main+0x184>)
 8002e8e:	480f      	ldr	r0, [pc, #60]	; (8002ecc <main+0x188>)
 8002e90:	f002 fdea 	bl	8005a68 <HAL_ADC_Start_DMA>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <main+0x15a>
	{
	  Error_Handler();
 8002e9a:	f000 f9d5 	bl	8003248 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f002 f9f4 	bl	800528c <HAL_Delay>

  SDRAM_Initialization_sequence();
 8002ea4:	f000 f90a 	bl	80030bc <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8002ea8:	2064      	movs	r0, #100	; 0x64
 8002eaa:	f002 f9ef 	bl	800528c <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <main+0x18c>)
 8002eb0:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <main+0x190>)
 8002eb2:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <main+0x194>)
 8002eb4:	f7fe fd52 	bl	800195c <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002eb8:	f001 fb50 	bl	800455c <MX_USB_HOST_Process>
 8002ebc:	e7fc      	b.n	8002eb8 <main+0x174>
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00
 8002ec4:	58020800 	.word	0x58020800
 8002ec8:	30000440 	.word	0x30000440
 8002ecc:	20000144 	.word	0x20000144
 8002ed0:	200019d8 	.word	0x200019d8
 8002ed4:	20001940 	.word	0x20001940
 8002ed8:	200018d8 	.word	0x200018d8

08002edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b09e      	sub	sp, #120	; 0x78
 8002ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee6:	224c      	movs	r2, #76	; 0x4c
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f014 fcae 	bl	801784c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f014 fca7 	bl	801784c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f008 fd10 	bl	800b924 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	4b49      	ldr	r3, [pc, #292]	; (8003030 <SystemClock_Config+0x154>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	4a48      	ldr	r2, [pc, #288]	; (8003030 <SystemClock_Config+0x154>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <SystemClock_Config+0x154>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b45      	ldr	r3, [pc, #276]	; (8003034 <SystemClock_Config+0x158>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4a44      	ldr	r2, [pc, #272]	; (8003034 <SystemClock_Config+0x158>)
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	6193      	str	r3, [r2, #24]
 8002f2a:	4b42      	ldr	r3, [pc, #264]	; (8003034 <SystemClock_Config+0x158>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f36:	bf00      	nop
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <SystemClock_Config+0x158>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f44:	d1f8      	bne.n	8002f38 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <SystemClock_Config+0x15c>)
 8002f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <SystemClock_Config+0x15c>)
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <SystemClock_Config+0x15c>)
 8002f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f64:	2300      	movs	r3, #0
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4b32      	ldr	r3, [pc, #200]	; (8003034 <SystemClock_Config+0x158>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a31      	ldr	r2, [pc, #196]	; (8003034 <SystemClock_Config+0x158>)
 8002f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <SystemClock_Config+0x158>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <SystemClock_Config+0x154>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <SystemClock_Config+0x154>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <SystemClock_Config+0x154>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f96:	bf00      	nop
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <SystemClock_Config+0x158>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa4:	d1f8      	bne.n	8002f98 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002fa6:	2321      	movs	r3, #33	; 0x21
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002fbc:	2305      	movs	r3, #5
 8002fbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002fc0:	23c0      	movs	r3, #192	; 0xc0
 8002fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f008 fce9 	bl	800b9b8 <HAL_RCC_OscConfig>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002fec:	f000 f92c 	bl	8003248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ff0:	233f      	movs	r3, #63	; 0x3f
 8002ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003000:	2340      	movs	r3, #64	; 0x40
 8003002:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800300e:	2340      	movs	r3, #64	; 0x40
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2104      	movs	r1, #4
 8003018:	4618      	mov	r0, r3
 800301a:	f009 f927 	bl	800c26c <HAL_RCC_ClockConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8003024:	f000 f910 	bl	8003248 <Error_Handler>
  }
}
 8003028:	bf00      	nop
 800302a:	3778      	adds	r7, #120	; 0x78
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	58000400 	.word	0x58000400
 8003034:	58024800 	.word	0x58024800
 8003038:	58024400 	.word	0x58024400

0800303c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0b0      	sub	sp, #192	; 0xc0
 8003040:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003042:	463b      	mov	r3, r7
 8003044:	22c0      	movs	r2, #192	; 0xc0
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f014 fbff 	bl	801784c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <PeriphCommonClock_Config+0x68>)
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8003058:	2319      	movs	r3, #25
 800305a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800305c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8003060:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8003062:	2307      	movs	r3, #7
 8003064:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003066:	2302      	movs	r3, #2
 8003068:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800306a:	2302      	movs	r3, #2
 800306c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800307a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8003080:	2301      	movs	r3, #1
 8003082:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308a:	463b      	mov	r3, r7
 800308c:	4618      	mov	r0, r3
 800308e:	f009 fc79 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003098:	f000 f8d6 	bl	8003248 <Error_Handler>
  }
}
 800309c:	bf00      	nop
 800309e:	37c0      	adds	r7, #192	; 0xc0
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	00090100 	.word	0x00090100

080030a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	;
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80030ca:	2310      	movs	r3, #16
 80030cc:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030dc:	4619      	mov	r1, r3
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 80030e0:	f00e fc6a 	bl	80119b8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f002 f8d1 	bl	800528c <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80030ea:	2302      	movs	r3, #2
 80030ec:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80030ee:	2310      	movs	r3, #16
 80030f0:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003100:	4619      	mov	r1, r3
 8003102:	481f      	ldr	r0, [pc, #124]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 8003104:	f00e fc58 	bl	80119b8 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8003108:	f240 2322 	movw	r3, #546	; 0x222
 800310c:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800310e:	2304      	movs	r3, #4
 8003110:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003112:	2310      	movs	r3, #16
 8003114:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003124:	4619      	mov	r1, r3
 8003126:	4816      	ldr	r0, [pc, #88]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 8003128:	f00e fc46 	bl	80119b8 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800312c:	2303      	movs	r3, #3
 800312e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003130:	2310      	movs	r3, #16
 8003132:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003134:	2308      	movs	r3, #8
 8003136:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003142:	4619      	mov	r1, r3
 8003144:	480e      	ldr	r0, [pc, #56]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 8003146:	f00e fc37 	bl	80119b8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f002 f89e 	bl	800528c <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003150:	2303      	movs	r3, #3
 8003152:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003154:	2310      	movs	r3, #16
 8003156:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8003158:	2308      	movs	r3, #8
 800315a:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 800316a:	f00e fc25 	bl	80119b8 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800316e:	f240 5169 	movw	r1, #1385	; 0x569
 8003172:	4803      	ldr	r0, [pc, #12]	; (8003180 <SDRAM_Initialization_sequence+0xc4>)
 8003174:	f00e fc55 	bl	8011a22 <HAL_SDRAM_ProgramRefreshRate>
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200018a0 	.word	0x200018a0

08003184 <randomNumber>:


float randomNumber(void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800318a:	463b      	mov	r3, r7
 800318c:	4619      	mov	r1, r3
 800318e:	480b      	ldr	r0, [pc, #44]	; (80031bc <randomNumber+0x38>)
 8003190:	f00c f958 	bl	800f444 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80031c0 <randomNumber+0x3c>
 80031a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a6:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
}
 80031b0:	eeb0 0a67 	vmov.f32	s0, s15
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000192c 	.word	0x2000192c
 80031c0:	2f80000d 	.word	0x2f80000d

080031c4 <MPU_Conf>:


void MPU_Conf(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 80031ca:	f003 ff29 	bl	8007020 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80031d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031d6:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80031d8:	2311      	movs	r3, #17
 80031da:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80031dc:	2303      	movs	r3, #3
 80031de:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80031e0:	2301      	movs	r3, #1
 80031e2:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 80031f4:	2300      	movs	r3, #0
 80031f6:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80031fc:	463b      	mov	r3, r7
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 ff46 	bl	8007090 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003204:	2301      	movs	r3, #1
 8003206:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8003208:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800320c:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800320e:	230f      	movs	r3, #15
 8003210:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003212:	2303      	movs	r3, #3
 8003214:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003216:	2301      	movs	r3, #1
 8003218:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003222:	2301      	movs	r3, #1
 8003224:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003226:	2301      	movs	r3, #1
 8003228:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800322e:	2300      	movs	r3, #0
 8003230:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003232:	463b      	mov	r3, r7
 8003234:	4618      	mov	r0, r3
 8003236:	f003 ff2b 	bl	8007090 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800323a:	2004      	movs	r0, #4
 800323c:	f003 ff08 	bl	8007050 <HAL_MPU_Enable>
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 800324c:	e7fe      	b.n	800324c <Error_Handler+0x4>
	...

08003250 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <MX_RNG_Init+0x24>)
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <MX_RNG_Init+0x28>)
 8003258:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <MX_RNG_Init+0x24>)
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003260:	4804      	ldr	r0, [pc, #16]	; (8003274 <MX_RNG_Init+0x24>)
 8003262:	f00c f88d 	bl	800f380 <HAL_RNG_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800326c:	f7ff ffec 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000192c 	.word	0x2000192c
 8003278:	48021800 	.word	0x48021800

0800327c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0b4      	sub	sp, #208	; 0xd0
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	22c0      	movs	r2, #192	; 0xc0
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f014 fadd 	bl	801784c <memset>
  if(rngHandle->Instance==RNG)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <HAL_RNG_MspInit+0x6c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d121      	bne.n	80032e0 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800329c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	4618      	mov	r0, r3
 80032b4:	f009 fb66 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80032be:	f7ff ffc3 	bl	8003248 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RNG_MspInit+0x70>)
 80032c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_RNG_MspInit+0x70>)
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RNG_MspInit+0x70>)
 80032d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80032e0:	bf00      	nop
 80032e2:	37d0      	adds	r7, #208	; 0xd0
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	48021800 	.word	0x48021800
 80032ec:	58024400 	.word	0x58024400

080032f0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <MX_SAI1_Init+0xb0>)
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <MX_SAI1_Init+0xb4>)
 80032f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <MX_SAI1_Init+0xb0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <MX_SAI1_Init+0xb0>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003314:	2201      	movs	r2, #1
 8003316:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <MX_SAI1_Init+0xb0>)
 800331a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800331e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003320:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003328:	2200      	movs	r2, #0
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <MX_SAI1_Init+0xb0>)
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003334:	2200      	movs	r2, #0
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003338:	2302      	movs	r3, #2
 800333a:	2202      	movs	r2, #2
 800333c:	2100      	movs	r1, #0
 800333e:	4818      	ldr	r0, [pc, #96]	; (80033a0 <MX_SAI1_Init+0xb0>)
 8003340:	f00c f8d6 	bl	800f4f0 <HAL_SAI_InitProtocol>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800334a:	f7ff ff7d 	bl	8003248 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <MX_SAI1_Init+0xbc>)
 8003352:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003356:	2203      	movs	r2, #3
 8003358:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <MX_SAI1_Init+0xb8>)
 800335c:	2201      	movs	r2, #1
 800335e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003362:	2200      	movs	r2, #0
 8003364:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003368:	2201      	movs	r2, #1
 800336a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <MX_SAI1_Init+0xb8>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003374:	2200      	movs	r2, #0
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <MX_SAI1_Init+0xb8>)
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <MX_SAI1_Init+0xb8>)
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003384:	2302      	movs	r3, #2
 8003386:	2202      	movs	r2, #2
 8003388:	2100      	movs	r1, #0
 800338a:	4807      	ldr	r0, [pc, #28]	; (80033a8 <MX_SAI1_Init+0xb8>)
 800338c:	f00c f8b0 	bl	800f4f0 <HAL_SAI_InitProtocol>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8003396:	f7ff ff57 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20001940 	.word	0x20001940
 80033a4:	40015804 	.word	0x40015804
 80033a8:	200019d8 	.word	0x200019d8
 80033ac:	40015824 	.word	0x40015824

080033b0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_SAI_MspInit+0x1ec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d179      	bne.n	80034b6 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80033cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d0:	4a74      	ldr	r2, [pc, #464]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80033d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80033dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80033e8:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a6c      	ldr	r2, [pc, #432]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80033f0:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80033f2:	2324      	movs	r3, #36	; 0x24
 80033f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003402:	2306      	movs	r3, #6
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4866      	ldr	r0, [pc, #408]	; (80035a8 <HAL_SAI_MspInit+0x1f8>)
 800340e:	f005 ff67 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003412:	2350      	movs	r3, #80	; 0x50
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341e:	2302      	movs	r3, #2
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003422:	2306      	movs	r3, #6
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	485e      	ldr	r0, [pc, #376]	; (80035a8 <HAL_SAI_MspInit+0x1f8>)
 800342e:	f005 ff57 	bl	80092e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8003432:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003434:	4a5e      	ldr	r2, [pc, #376]	; (80035b0 <HAL_SAI_MspInit+0x200>)
 8003436:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003438:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800343a:	2257      	movs	r2, #87	; 0x57
 800343c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800343e:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003458:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800345c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003460:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003468:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800346a:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800346c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003470:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003474:	2204      	movs	r2, #4
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003480:	2200      	movs	r2, #0
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800348a:	4848      	ldr	r0, [pc, #288]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800348c:	f003 fe44 	bl	8007118 <HAL_DMA_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8003496:	f7ff fed7 	bl	8003248 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a43      	ldr	r2, [pc, #268]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 800349e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80034a2:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a40      	ldr	r2, [pc, #256]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80034b0:	4a3e      	ldr	r2, [pc, #248]	; (80035ac <HAL_SAI_MspInit+0x1fc>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <HAL_SAI_MspInit+0x204>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d169      	bne.n	8003594 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10e      	bne.n	80034e6 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80034ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ce:	4a35      	ldr	r2, [pc, #212]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80034d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_SAI_MspInit+0x1f4>)
 80034da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80034e6:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <HAL_SAI_MspInit+0x1f0>)
 80034ee:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034f0:	2308      	movs	r3, #8
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034fc:	2302      	movs	r3, #2
 80034fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003500:	2306      	movs	r3, #6
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4619      	mov	r1, r3
 800350a:	4827      	ldr	r0, [pc, #156]	; (80035a8 <HAL_SAI_MspInit+0x1f8>)
 800350c:	f005 fee8 	bl	80092e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003512:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_SAI_MspInit+0x20c>)
 8003514:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003516:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003518:	2258      	movs	r2, #88	; 0x58
 800351a:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351c:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800352a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800352e:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003536:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800353a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800353e:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003546:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800354a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800354e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003552:	2204      	movs	r2, #4
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003558:	2200      	movs	r2, #0
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800355e:	2200      	movs	r2, #0
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003568:	4813      	ldr	r0, [pc, #76]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800356a:	f003 fdd5 	bl	8007118 <HAL_DMA_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 8003574:	f7ff fe68 	bl	8003248 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 800358a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_SAI_MspInit+0x208>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40015804 	.word	0x40015804
 80035a0:	20001b60 	.word	0x20001b60
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58021000 	.word	0x58021000
 80035ac:	20001a70 	.word	0x20001a70
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40015824 	.word	0x40015824
 80035b8:	20001ae8 	.word	0x20001ae8
 80035bc:	40020040 	.word	0x40020040

080035c0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <SD_CheckStatus+0x38>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80035d0:	f7fe ff5a 	bl	8002488 <BSP_SD_GetCardState>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <SD_CheckStatus+0x38>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <SD_CheckStatus+0x38>)
 80035e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80035ea:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <SD_CheckStatus+0x38>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000001c 	.word	0x2000001c

080035fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <SD_initialize+0x38>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800360c:	f7fe feda 	bl	80023c4 <BSP_SD_Init>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ffd1 	bl	80035c0 <SD_CheckStatus>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SD_initialize+0x38>)
 8003624:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003626:	4b03      	ldr	r3, [pc, #12]	; (8003634 <SD_initialize+0x38>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	2000001c 	.word	0x2000001c

08003638 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ffbb 	bl	80035c0 <SD_CheckStatus>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f7fe fecd 	bl	8002410 <BSP_SD_ReadBlocks>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800367c:	bf00      	nop
 800367e:	f7fe ff03 	bl	8002488 <BSP_SD_GetCardState>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1fa      	bne.n	800367e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800368c:	7dfb      	ldrb	r3, [r7, #23]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68b8      	ldr	r0, [r7, #8]
 80036b4:	f7fe feca 	bl	800244c <BSP_SD_WriteBlocks>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80036be:	bf00      	nop
 80036c0:	f7fe fee2 	bl	8002488 <BSP_SD_GetCardState>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1fa      	bne.n	80036c0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	603a      	str	r2, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	460b      	mov	r3, r1
 80036e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80036ee:	4b25      	ldr	r3, [pc, #148]	; (8003784 <SD_ioctl+0xac>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <SD_ioctl+0x28>
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03c      	b.n	800377a <SD_ioctl+0xa2>

  switch (cmd)
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d834      	bhi.n	8003770 <SD_ioctl+0x98>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <SD_ioctl+0x34>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003725 	.word	0x08003725
 8003714:	0800373d 	.word	0x0800373d
 8003718:	08003757 	.word	0x08003757
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003722:	e028      	b.n	8003776 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe febd 	bl	80024a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800373a:	e01c      	b.n	8003776 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe feb1 	bl	80024a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	b29a      	uxth	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003754:	e00f      	b.n	8003776 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fea4 	bl	80024a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	0a5a      	lsrs	r2, r3, #9
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800376e:	e002      	b.n	8003776 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003770:	2304      	movs	r3, #4
 8003772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800377a:	4618      	mov	r0, r3
 800377c:	3730      	adds	r7, #48	; 0x30
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000001c 	.word	0x2000001c

08003788 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <MX_SDMMC1_SD_Init+0x38>)
 8003790:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 80037a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <MX_SDMMC1_SD_Init+0x34>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20001b64 	.word	0x20001b64
 80037c0:	52007000 	.word	0x52007000

080037c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a32      	ldr	r2, [pc, #200]	; (80038ac <HAL_SD_MspInit+0xe8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d15e      	bne.n	80038a4 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80037e6:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <HAL_SD_MspInit+0xec>)
 80037e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037ec:	4a30      	ldr	r2, [pc, #192]	; (80038b0 <HAL_SD_MspInit+0xec>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80037f6:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <HAL_SD_MspInit+0xec>)
 80037f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_SD_MspInit+0xec>)
 8003806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800380a:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <HAL_SD_MspInit+0xec>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <HAL_SD_MspInit+0xec>)
 8003816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_SD_MspInit+0xec>)
 8003824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003828:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <HAL_SD_MspInit+0xec>)
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_SD_MspInit+0xec>)
 8003834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003840:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384a:	2301      	movs	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003852:	230c      	movs	r3, #12
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	4619      	mov	r1, r3
 800385c:	4815      	ldr	r0, [pc, #84]	; (80038b4 <HAL_SD_MspInit+0xf0>)
 800385e:	f005 fd3f 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003874:	230c      	movs	r3, #12
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	480d      	ldr	r0, [pc, #52]	; (80038b4 <HAL_SD_MspInit+0xf0>)
 8003880:	f005 fd2e 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003884:	2304      	movs	r3, #4
 8003886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003894:	230c      	movs	r3, #12
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4619      	mov	r1, r3
 800389e:	4806      	ldr	r0, [pc, #24]	; (80038b8 <HAL_SD_MspInit+0xf4>)
 80038a0:	f005 fd1e 	bl	80092e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80038a4:	bf00      	nop
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	52007000 	.word	0x52007000
 80038b0:	58024400 	.word	0x58024400
 80038b4:	58020800 	.word	0x58020800
 80038b8:	58020c00 	.word	0x58020c00

080038bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038c2:	4a28      	ldr	r2, [pc, #160]	; (8003964 <MX_SPI1_Init+0xa8>)
 80038c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80038cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038d6:	2207      	movs	r2, #7
 80038d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80038ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <MX_SPI1_Init+0xa4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003904:	2200      	movs	r2, #0
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <MX_SPI1_Init+0xa4>)
 800390a:	2200      	movs	r2, #0
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003914:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003918:	2200      	movs	r2, #0
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <MX_SPI1_Init+0xa4>)
 800391e:	2200      	movs	r2, #0
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003924:	2200      	movs	r2, #0
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <MX_SPI1_Init+0xa4>)
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003930:	2200      	movs	r2, #0
 8003932:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003936:	2200      	movs	r2, #0
 8003938:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <MX_SPI1_Init+0xa4>)
 800393c:	2200      	movs	r2, #0
 800393e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003942:	2200      	movs	r2, #0
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <MX_SPI1_Init+0xa4>)
 8003948:	2200      	movs	r2, #0
 800394a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <MX_SPI1_Init+0xa4>)
 800394e:	f00e f891 	bl	8011a74 <HAL_SPI_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003958:	f7ff fc76 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20001be0 	.word	0x20001be0
 8003964:	40013000 	.word	0x40013000

08003968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b0bc      	sub	sp, #240	; 0xf0
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003980:	f107 0318 	add.w	r3, r7, #24
 8003984:	22c0      	movs	r2, #192	; 0xc0
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f013 ff5f 	bl	801784c <memset>
  if(spiHandle->Instance==SPI1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a38      	ldr	r2, [pc, #224]	; (8003a74 <HAL_SPI_MspInit+0x10c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d169      	bne.n	8003a6c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a8:	f107 0318 	add.w	r3, r7, #24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f008 ffe9 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80039b8:	f7ff fc46 	bl	8003248 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039bc:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039da:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e0:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f8:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 8003a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_SPI_MspInit+0x110>)
 8003a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a2e:	2305      	movs	r3, #5
 8003a30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4810      	ldr	r0, [pc, #64]	; (8003a7c <HAL_SPI_MspInit+0x114>)
 8003a3c:	f005 fc50 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003a40:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a64:	4619      	mov	r1, r3
 8003a66:	4806      	ldr	r0, [pc, #24]	; (8003a80 <HAL_SPI_MspInit+0x118>)
 8003a68:	f005 fc3a 	bl	80092e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	37f0      	adds	r7, #240	; 0xf0
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013000 	.word	0x40013000
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58020c00 	.word	0x58020c00
 8003a80:	58021800 	.word	0x58021800

08003a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_MspInit+0x30>)
 8003a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_MspInit+0x30>)
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_MspInit+0x30>)
 8003a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	58024400 	.word	0x58024400

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aca:	e7fe      	b.n	8003aca <HardFault_Handler+0x4>

08003acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <MemManage_Handler+0x4>

08003ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad6:	e7fe      	b.n	8003ad6 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <UsageFault_Handler+0x4>

08003ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0c:	f001 fb9e 	bl	800524c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA1_Stream0_IRQHandler+0x10>)
 8003b1a:	f004 f8c3 	bl	8007ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000020c 	.word	0x2000020c

08003b28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA1_Stream1_IRQHandler+0x10>)
 8003b2e:	f004 f8b9 	bl	8007ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20001a70 	.word	0x20001a70

08003b3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <DMA1_Stream2_IRQHandler+0x10>)
 8003b42:	f004 f8af 	bl	8007ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20001ae8 	.word	0x20001ae8

08003b50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <ADC_IRQHandler+0x10>)
 8003b56:	f002 f84b 	bl	8005bf0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000144 	.word	0x20000144

08003b64 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003b6a:	f006 f805 	bl	8009b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20001e38 	.word	0x20001e38

08003b78 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8003b7e:	f005 fffb 	bl	8009b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20001e38 	.word	0x20001e38

08003b8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <OTG_FS_IRQHandler+0x10>)
 8003b92:	f005 fff1 	bl	8009b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20001e38 	.word	0x20001e38

08003ba0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <_sbrk+0x50>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <_sbrk+0x16>
		heap_end = &end;
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <_sbrk+0x50>)
 8003bb2:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <_sbrk+0x54>)
 8003bb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <_sbrk+0x50>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <_sbrk+0x50>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	466a      	mov	r2, sp
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d907      	bls.n	8003bda <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003bca:	f013 fe57 	bl	801787c <__errno>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd8:	e006      	b.n	8003be8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_sbrk+0x50>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <_sbrk+0x50>)
 8003be4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20001c68 	.word	0x20001c68
 8003bf4:	20002298 	.word	0x20002298

08003bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bfc:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <SystemInit+0xac>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <SystemInit+0xac>)
 8003c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <SystemInit+0xb0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <SystemInit+0xb0>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <SystemInit+0xb0>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <SystemInit+0xb0>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <SystemInit+0xb0>)
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <SystemInit+0xb4>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <SystemInit+0xb0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <SystemInit+0xb0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <SystemInit+0xb0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <SystemInit+0xb0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <SystemInit+0xb0>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <SystemInit+0xb0>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003c4e:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <SystemInit+0xb0>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <SystemInit+0xb0>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <SystemInit+0xb0>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <SystemInit+0xb0>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <SystemInit+0xb0>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <SystemInit+0xb0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <SystemInit+0xb0>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <SystemInit+0xb0>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <SystemInit+0xb8>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <SystemInit+0xbc>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8a:	d202      	bcs.n	8003c92 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <SystemInit+0xc0>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <SystemInit+0xac>)
 8003c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c98:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8003cb0:	5c001000 	.word	0x5c001000
 8003cb4:	ffff0000 	.word	0xffff0000
 8003cb8:	51008108 	.word	0x51008108

08003cbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	; 0x58
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	222c      	movs	r2, #44	; 0x2c
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f013 fdaf 	bl	801784c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003cf0:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <MX_TIM1_Init+0x11c>)
 8003cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d1a:	482e      	ldr	r0, [pc, #184]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d1c:	f00e f840 	bl	8011da0 <HAL_TIM_PWM_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003d26:	f7ff fa8f 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d3e:	f00e fea1 	bl	8012a84 <HAL_TIMEx_MasterConfigSynchronization>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003d48:	f7ff fa7e 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4c:	2360      	movs	r3, #96	; 0x60
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d54:	2300      	movs	r3, #0
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4818      	ldr	r0, [pc, #96]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003d72:	f00e f86d 	bl	8011e50 <HAL_TIM_PWM_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003d7c:	f7ff fa64 	bl	8003248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4807      	ldr	r0, [pc, #28]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003db6:	f00e fef3 	bl	8012ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003dc0:	f7ff fa42 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003dc4:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <MX_TIM1_Init+0x118>)
 8003dc6:	f000 f9b7 	bl	8004138 <HAL_TIM_MspPostInit>

}
 8003dca:	bf00      	nop
 8003dcc:	3758      	adds	r7, #88	; 0x58
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20001c6c 	.word	0x20001c6c
 8003dd8:	40010000 	.word	0x40010000

08003ddc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	615a      	str	r2, [r3, #20]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e10:	4a2d      	ldr	r2, [pc, #180]	; (8003ec8 <MX_TIM3_Init+0xec>)
 8003e12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e14:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2e:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e34:	4823      	ldr	r0, [pc, #140]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e36:	f00d ff5c 	bl	8011cf2 <HAL_TIM_Base_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003e40:	f7ff fa02 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4e:	4619      	mov	r1, r3
 8003e50:	481c      	ldr	r0, [pc, #112]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e52:	f00e f911 	bl	8012078 <HAL_TIM_ConfigClockSource>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003e5c:	f7ff f9f4 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e60:	4818      	ldr	r0, [pc, #96]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e62:	f00d ff9d 	bl	8011da0 <HAL_TIM_PWM_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003e6c:	f7ff f9ec 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003e80:	f00e fe00 	bl	8012a84 <HAL_TIMEx_MasterConfigSynchronization>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003e8a:	f7ff f9dd 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e8e:	2360      	movs	r3, #96	; 0x60
 8003e90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003ea6:	f00d ffd3 	bl	8011e50 <HAL_TIM_PWM_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003eb0:	f7ff f9ca 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003eb4:	4803      	ldr	r0, [pc, #12]	; (8003ec4 <MX_TIM3_Init+0xe8>)
 8003eb6:	f000 f93f 	bl	8004138 <HAL_TIM_MspPostInit>

}
 8003eba:	bf00      	nop
 8003ebc:	3738      	adds	r7, #56	; 0x38
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001cb8 	.word	0x20001cb8
 8003ec8:	40000400 	.word	0x40000400

08003ecc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	; 0x38
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eec:	463b      	mov	r3, r7
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f00:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <MX_TIM4_Init+0x118>)
 8003f02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f10:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f24:	482e      	ldr	r0, [pc, #184]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f26:	f00d fee4 	bl	8011cf2 <HAL_TIM_Base_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003f30:	f7ff f98a 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f42:	f00e f899 	bl	8012078 <HAL_TIM_ConfigClockSource>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003f4c:	f7ff f97c 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003f50:	4823      	ldr	r0, [pc, #140]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f52:	f00d ff25 	bl	8011da0 <HAL_TIM_PWM_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003f5c:	f7ff f974 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	481c      	ldr	r0, [pc, #112]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f70:	f00e fd88 	bl	8012a84 <HAL_TIMEx_MasterConfigSynchronization>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003f7a:	f7ff f965 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f7e:	2360      	movs	r3, #96	; 0x60
 8003f80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f8e:	463b      	mov	r3, r7
 8003f90:	2200      	movs	r2, #0
 8003f92:	4619      	mov	r1, r3
 8003f94:	4812      	ldr	r0, [pc, #72]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003f96:	f00d ff5b 	bl	8011e50 <HAL_TIM_PWM_ConfigChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003fa0:	f7ff f952 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	480d      	ldr	r0, [pc, #52]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003fac:	f00d ff50 	bl	8011e50 <HAL_TIM_PWM_ConfigChannel>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003fb6:	f7ff f947 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fba:	463b      	mov	r3, r7
 8003fbc:	220c      	movs	r2, #12
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003fc2:	f00d ff45 	bl	8011e50 <HAL_TIM_PWM_ConfigChannel>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003fcc:	f7ff f93c 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003fd0:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <MX_TIM4_Init+0x114>)
 8003fd2:	f000 f8b1 	bl	8004138 <HAL_TIM_MspPostInit>

}
 8003fd6:	bf00      	nop
 8003fd8:	3738      	adds	r7, #56	; 0x38
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20001d04 	.word	0x20001d04
 8003fe4:	40000800 	.word	0x40000800

08003fe8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <MX_TIM7_Init+0x64>)
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <MX_TIM7_Init+0x68>)
 8003ffc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <MX_TIM7_Init+0x64>)
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <MX_TIM7_Init+0x64>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <MX_TIM7_Init+0x64>)
 800400c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004010:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <MX_TIM7_Init+0x64>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <MX_TIM7_Init+0x64>)
 800401a:	f00d fe6a 	bl	8011cf2 <HAL_TIM_Base_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004024:	f7ff f910 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <MX_TIM7_Init+0x64>)
 8004036:	f00e fd25 	bl	8012a84 <HAL_TIMEx_MasterConfigSynchronization>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004040:	f7ff f902 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20001d50 	.word	0x20001d50
 8004050:	40001400 	.word	0x40001400

08004054 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_TIM_PWM_MspInit+0x3c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_TIM_PWM_MspInit+0x40>)
 8004068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800406c:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_TIM_PWM_MspInit+0x40>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_TIM_PWM_MspInit+0x40>)
 8004078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40010000 	.word	0x40010000
 8004094:	58024400 	.word	0x58024400

08004098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a20      	ldr	r2, [pc, #128]	; (8004128 <HAL_TIM_Base_MspInit+0x90>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10f      	bne.n	80040ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80040c8:	e028      	b.n	800411c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_Base_MspInit+0x98>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10f      	bne.n	80040f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 80040e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
}
 80040f2:	e013      	b.n	800411c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <HAL_TIM_Base_MspInit+0x9c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 8004100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 8004106:	f043 0320 	orr.w	r3, r3, #32
 800410a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_TIM_Base_MspInit+0x94>)
 8004110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40000400 	.word	0x40000400
 800412c:	58024400 	.word	0x58024400
 8004130:	40000800 	.word	0x40000800
 8004134:	40001400 	.word	0x40001400

08004138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a38      	ldr	r2, [pc, #224]	; (8004238 <HAL_TIM_MspPostInit+0x100>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d120      	bne.n	800419c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415a:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 800415c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004160:	4a36      	ldr	r2, [pc, #216]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 800416c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800417c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2302      	movs	r3, #2
 8004180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800418a:	2301      	movs	r3, #1
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	4619      	mov	r1, r3
 8004194:	482a      	ldr	r0, [pc, #168]	; (8004240 <HAL_TIM_MspPostInit+0x108>)
 8004196:	f005 f8a3 	bl	80092e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800419a:	e049      	b.n	8004230 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a28      	ldr	r2, [pc, #160]	; (8004244 <HAL_TIM_MspPostInit+0x10c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d11f      	bne.n	80041e6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 80041a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b6:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 80041b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041c4:	2320      	movs	r3, #32
 80041c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	2302      	movs	r3, #2
 80041ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d0:	2300      	movs	r3, #0
 80041d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041d4:	2302      	movs	r3, #2
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4619      	mov	r1, r3
 80041de:	481a      	ldr	r0, [pc, #104]	; (8004248 <HAL_TIM_MspPostInit+0x110>)
 80041e0:	f005 f87e 	bl	80092e0 <HAL_GPIO_Init>
}
 80041e4:	e024      	b.n	8004230 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIM_MspPostInit+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d11f      	bne.n	8004230 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 80041f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_TIM_MspPostInit+0x104>)
 8004202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800420e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421c:	2300      	movs	r3, #0
 800421e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004220:	2302      	movs	r3, #2
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4619      	mov	r1, r3
 800422a:	4807      	ldr	r0, [pc, #28]	; (8004248 <HAL_TIM_MspPostInit+0x110>)
 800422c:	f005 f858 	bl	80092e0 <HAL_GPIO_Init>
}
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40010000 	.word	0x40010000
 800423c:	58024400 	.word	0x58024400
 8004240:	58020000 	.word	0x58020000
 8004244:	40000400 	.word	0x40000400
 8004248:	58020400 	.word	0x58020400
 800424c:	40000800 	.word	0x40000800

08004250 <mux_select_pin>:
uint16_t ADC_values[NUM_ADC_CHANNELS] __ATTR_RAM_D2;

const int mux_sel_pin[3] = {MUX_SEL_PIN_A, MUX_SEL_PIN_B, MUX_SEL_PIN_C};

void mux_select_pin(int pin)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++){
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e01f      	b.n	800429e <mux_select_pin+0x4e>
		if(pin & (1 << i)){
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	fa42 f303 	asr.w	r3, r2, r3
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <mux_select_pin+0x34>
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_SET);
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <mux_select_pin+0x74>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	b29b      	uxth	r3, r3
 8004278:	2201      	movs	r2, #1
 800427a:	4619      	mov	r1, r3
 800427c:	4812      	ldr	r0, [pc, #72]	; (80042c8 <mux_select_pin+0x78>)
 800427e:	f005 f9f7 	bl	8009670 <HAL_GPIO_WritePin>
 8004282:	e009      	b.n	8004298 <mux_select_pin+0x48>
		}
		else{
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_RESET);
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <mux_select_pin+0x74>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428c:	b29b      	uxth	r3, r3
 800428e:	2200      	movs	r2, #0
 8004290:	4619      	mov	r1, r3
 8004292:	480d      	ldr	r0, [pc, #52]	; (80042c8 <mux_select_pin+0x78>)
 8004294:	f005 f9ec 	bl	8009670 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++){
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	dddc      	ble.n	800425e <mux_select_pin+0xe>
		}
	}

	for(int i=0; i < 30000; i++){}
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	e002      	b.n	80042b0 <mux_select_pin+0x60>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80042b6:	4293      	cmp	r3, r2
 80042b8:	ddf7      	ble.n	80042aa <mux_select_pin+0x5a>
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	08018bf4 	.word	0x08018bf4
 80042c8:	58020400 	.word	0x58020400

080042cc <mux_pull_values>:


void mux_pull_values(float *randomness, float *halls, float *fc, float *vari, int i){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]

	mux_select_pin(i);
 80042da:	69b8      	ldr	r0, [r7, #24]
 80042dc:	f7ff ffb8 	bl	8004250 <mux_select_pin>
//	fc[0] = ADC_values[0]; fc[1] = ADC_values[1]; fc[2] = ADC_values[2];
//	vari[0] = ADC_values[3]; vari[1] = ADC_values[4]; vari[2] = ADC_values[5];
	/////////////////

	//test with halls
	fc[i] = ADC_values[6];
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <mux_pull_values+0x84>)
 80042e2:	8999      	ldrh	r1, [r3, #12]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	ee07 1a90 	vmov	s15, r1
 80042f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f4:	edc3 7a00 	vstr	s15, [r3]
	vari[i] = ADC_values[7];
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <mux_pull_values+0x84>)
 80042fa:	89d9      	ldrh	r1, [r3, #14]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	ee07 1a90 	vmov	s15, r1
 8004308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430c:	edc3 7a00 	vstr	s15, [r3]
	halls[i] = ADC_values[8];
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <mux_pull_values+0x84>)
 8004312:	8a19      	ldrh	r1, [r3, #16]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	4413      	add	r3, r2
 800431c:	ee07 1a90 	vmov	s15, r1
 8004320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004324:	edc3 7a00 	vstr	s15, [r3]
	halls[i + 8] = ADC_values[9];
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <mux_pull_values+0x84>)
 800432a:	8a59      	ldrh	r1, [r3, #18]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3308      	adds	r3, #8
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	ee07 1a90 	vmov	s15, r1
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	edc3 7a00 	vstr	s15, [r3]
	/////////////////

	randomness = ADC_values[0];
 8004342:	4b03      	ldr	r3, [pc, #12]	; (8004350 <mux_pull_values+0x84>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	30000440 	.word	0x30000440

08004354 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004358:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 800435a:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <MX_USART6_UART_Init+0x94>)
 800435c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800435e:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004364:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 800436e:	2200      	movs	r2, #0
 8004370:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004374:	2200      	movs	r2, #0
 8004376:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 800437a:	2204      	movs	r2, #4
 800437c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004384:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004386:	2200      	movs	r2, #0
 8004388:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 800438c:	2200      	movs	r2, #0
 800438e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004392:	2200      	movs	r2, #0
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800439c:	4811      	ldr	r0, [pc, #68]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 800439e:	f00e fc7d 	bl	8012c9c <HAL_UART_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80043a8:	f7fe ff4e 	bl	8003248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ac:	2100      	movs	r1, #0
 80043ae:	480d      	ldr	r0, [pc, #52]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 80043b0:	f00f fc7f 	bl	8013cb2 <HAL_UARTEx_SetTxFifoThreshold>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80043ba:	f7fe ff45 	bl	8003248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043be:	2100      	movs	r1, #0
 80043c0:	4808      	ldr	r0, [pc, #32]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 80043c2:	f00f fcb4 	bl	8013d2e <HAL_UARTEx_SetRxFifoThreshold>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80043cc:	f7fe ff3c 	bl	8003248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80043d0:	4804      	ldr	r0, [pc, #16]	; (80043e4 <MX_USART6_UART_Init+0x90>)
 80043d2:	f00f fc35 	bl	8013c40 <HAL_UARTEx_DisableFifoMode>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80043dc:	f7fe ff34 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20001d9c 	.word	0x20001d9c
 80043e8:	40011400 	.word	0x40011400

080043ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b0bc      	sub	sp, #240	; 0xf0
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004404:	f107 0318 	add.w	r3, r7, #24
 8004408:	22c0      	movs	r2, #192	; 0xc0
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f013 fa1d 	bl	801784c <memset>
  if(uartHandle->Instance==USART6)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a39      	ldr	r2, [pc, #228]	; (80044fc <HAL_UART_MspInit+0x110>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d16a      	bne.n	80044f2 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800441c:	f04f 0201 	mov.w	r2, #1
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800442e:	f107 0318 	add.w	r3, r7, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f008 faa6 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800443e:	f7fe ff03 	bl	8003248 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004448:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <HAL_UART_MspInit+0x114>)
 800444a:	f043 0320 	orr.w	r3, r3, #32
 800444e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004466:	4a26      	ldr	r2, [pc, #152]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800448e:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <HAL_UART_MspInit+0x114>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	2302      	movs	r3, #2
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80044b4:	2307      	movs	r3, #7
 80044b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044be:	4619      	mov	r1, r3
 80044c0:	4810      	ldr	r0, [pc, #64]	; (8004504 <HAL_UART_MspInit+0x118>)
 80044c2:	f004 ff0d 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80044e0:	2307      	movs	r3, #7
 80044e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044ea:	4619      	mov	r1, r3
 80044ec:	4806      	ldr	r0, [pc, #24]	; (8004508 <HAL_UART_MspInit+0x11c>)
 80044ee:	f004 fef7 	bl	80092e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80044f2:	bf00      	nop
 80044f4:	37f0      	adds	r7, #240	; 0xf0
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40011400 	.word	0x40011400
 8004500:	58024400 	.word	0x58024400
 8004504:	58020800 	.word	0x58020800
 8004508:	58021800 	.word	0x58021800

0800450c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004510:	2201      	movs	r2, #1
 8004512:	490f      	ldr	r1, [pc, #60]	; (8004550 <MX_USB_HOST_Init+0x44>)
 8004514:	480f      	ldr	r0, [pc, #60]	; (8004554 <MX_USB_HOST_Init+0x48>)
 8004516:	f011 fb73 	bl	8015c00 <USBH_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8004520:	f7fe fe92 	bl	8003248 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <MX_USB_HOST_Init+0x4c>)
 8004526:	480b      	ldr	r0, [pc, #44]	; (8004554 <MX_USB_HOST_Init+0x48>)
 8004528:	f011 fc19 	bl	8015d5e <USBH_RegisterClass>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8004532:	f7fe fe89 	bl	8003248 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004536:	4807      	ldr	r0, [pc, #28]	; (8004554 <MX_USB_HOST_Init+0x48>)
 8004538:	f011 fc9e 	bl	8015e78 <USBH_Start>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8004542:	f7fe fe81 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004546:	f007 fa27 	bl	800b998 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	08004575 	.word	0x08004575
 8004554:	30000460 	.word	0x30000460
 8004558:	20000028 	.word	0x20000028

0800455c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8004560:	4803      	ldr	r0, [pc, #12]	; (8004570 <MX_USB_HOST_Process+0x14>)
 8004562:	f011 fcb5 	bl	8015ed0 <USBH_Process>
  MIDI_Application();
 8004566:	f7fc fd8d 	bl	8001084 <MIDI_Application>
}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	30000460 	.word	0x30000460

08004574 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	3b01      	subs	r3, #1
 8004584:	2b04      	cmp	r3, #4
 8004586:	d839      	bhi.n	80045fc <USBH_UserProcess+0x88>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <USBH_UserProcess+0x1c>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045fd 	.word	0x080045fd
 8004594:	080045e7 	.word	0x080045e7
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	080045a5 	.word	0x080045a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <USBH_UserProcess+0x94>)
 80045a6:	2203      	movs	r2, #3
 80045a8:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 80045aa:	4818      	ldr	r0, [pc, #96]	; (800460c <USBH_UserProcess+0x98>)
 80045ac:	f011 fc74 	bl	8015e98 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e007      	b.n	80045c6 <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 80045b6:	4a16      	ldr	r2, [pc, #88]	; (8004610 <USBH_UserProcess+0x9c>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b3f      	cmp	r3, #63	; 0x3f
 80045ca:	ddf4      	ble.n	80045b6 <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80045cc:	2201      	movs	r2, #1
 80045ce:	4911      	ldr	r1, [pc, #68]	; (8004614 <USBH_UserProcess+0xa0>)
 80045d0:	480e      	ldr	r0, [pc, #56]	; (800460c <USBH_UserProcess+0x98>)
 80045d2:	f011 fb15 	bl	8015c00 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 80045d6:	4910      	ldr	r1, [pc, #64]	; (8004618 <USBH_UserProcess+0xa4>)
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <USBH_UserProcess+0x98>)
 80045da:	f011 fbc0 	bl	8015d5e <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 80045de:	480b      	ldr	r0, [pc, #44]	; (800460c <USBH_UserProcess+0x98>)
 80045e0:	f011 fc4a 	bl	8015e78 <USBH_Start>
	break;
 80045e4:	e00b      	b.n	80045fe <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <USBH_UserProcess+0x94>)
 80045e8:	2202      	movs	r2, #2
 80045ea:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <USBH_UserProcess+0xa8>)
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
  break;
 80045f2:	e004      	b.n	80045fe <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <USBH_UserProcess+0x94>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
  break;
 80045fa:	e000      	b.n	80045fe <USBH_UserProcess+0x8a>

  default:
  break;
 80045fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20001e30 	.word	0x20001e30
 800460c:	30000460 	.word	0x30000460
 8004610:	30000000 	.word	0x30000000
 8004614:	08004575 	.word	0x08004575
 8004618:	20000028 	.word	0x20000028
 800461c:	20000000 	.word	0x20000000

08004620 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af04      	add	r7, sp, #16
 8004626:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004628:	2302      	movs	r3, #2
 800462a:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8004630:	23ff      	movs	r3, #255	; 0xff
 8004632:	2203      	movs	r2, #3
 8004634:	2101      	movs	r1, #1
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f011 fbd8 	bl	8015dec <USBH_FindInterface>
 800463c:	4603      	mov	r3, r0
 800463e:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8004640:	7bbb      	ldrb	r3, [r7, #14]
 8004642:	2bff      	cmp	r3, #255	; 0xff
 8004644:	d102      	bne.n	800464c <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8004646:	2302      	movs	r3, #2
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e0f2      	b.n	8004832 <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f011 fbaf 	bl	8015db4 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 800465c:	201c      	movs	r0, #28
 800465e:	f013 f839 	bl	80176d4 <malloc>
 8004662:	4603      	mov	r3, r0
 8004664:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004676:	4619      	mov	r1, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	231a      	movs	r3, #26
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b25b      	sxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	da1c      	bge.n	80046c8 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004694:	4619      	mov	r1, r3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	231a      	movs	r3, #26
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046b0:	4619      	mov	r1, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	231a      	movs	r3, #26
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	811a      	strh	r2, [r3, #8]
 80046c6:	e01b      	b.n	8004700 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046ce:	4619      	mov	r1, r3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	231a      	movs	r3, #26
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80046ea:	4619      	mov	r1, r3
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	231a      	movs	r3, #26
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004706:	4619      	mov	r1, r3
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	231a      	movs	r3, #26
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	b25b      	sxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	da1c      	bge.n	8004758 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004724:	4619      	mov	r1, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	231a      	movs	r3, #26
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004740:	4619      	mov	r1, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	231a      	movs	r3, #26
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	811a      	strh	r2, [r3, #8]
 8004756:	e01b      	b.n	8004790 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800475e:	4619      	mov	r1, r3
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	231a      	movs	r3, #26
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800477a:	4619      	mov	r1, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	231a      	movs	r3, #26
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f012 fed9 	bl	801754e <USBH_AllocPipe>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	791b      	ldrb	r3, [r3, #4]
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f012 fecf 	bl	801754e <USBH_AllocPipe>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	7899      	ldrb	r1, [r3, #2]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	78d8      	ldrb	r0, [r3, #3]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	88d2      	ldrh	r2, [r2, #6]
 80047d0:	9202      	str	r2, [sp, #8]
 80047d2:	2202      	movs	r2, #2
 80047d4:	9201      	str	r2, [sp, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4623      	mov	r3, r4
 80047da:	4602      	mov	r2, r0
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f012 fe87 	bl	80174f0 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	7859      	ldrb	r1, [r3, #1]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	7918      	ldrb	r0, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	8912      	ldrh	r2, [r2, #8]
 80047fa:	9202      	str	r2, [sp, #8]
 80047fc:	2202      	movs	r2, #2
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	4623      	mov	r3, r4
 8004804:	4602      	mov	r2, r0
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f012 fe72 	bl	80174f0 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2200      	movs	r2, #0
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fbf6 	bl	800500c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	789b      	ldrb	r3, [r3, #2]
 8004824:	2200      	movs	r2, #0
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fbef 	bl	800500c <USBH_LL_SetToggle>
		status = USBH_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}

0800483c <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	789b      	ldrb	r3, [r3, #2]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	789b      	ldrb	r3, [r3, #2]
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f012 fe66 	bl	801752e <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	789b      	ldrb	r3, [r3, #2]
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f012 fe92 	bl	8017592 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f012 fe53 	bl	801752e <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f012 fe7f 	bl	8017592 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f012 ff18 	bl	80176e4 <free>
		phost->pActiveClass->pData = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80048d6:	2102      	movs	r1, #2
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3

	return USBH_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b0b      	cmp	r3, #11
 8004900:	d10e      	bne.n	8004920 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f012 fe0d 	bl	801752e <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	789b      	ldrb	r3, [r3, #2]
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f012 fe07 	bl	801752e <USBH_ClosePipe>
  }
  return USBH_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d012      	beq.n	8004972 <USBH_MIDI_Process+0x48>
 800494c:	2b02      	cmp	r3, #2
 800494e:	dc1d      	bgt.n	800498c <USBH_MIDI_Process+0x62>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <USBH_MIDI_Process+0x30>
 8004954:	2b01      	cmp	r3, #1
 8004956:	d003      	beq.n	8004960 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8004958:	e018      	b.n	800498c <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
		break;
 800495e:	e018      	b.n	8004992 <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f851 	bl	8004a08 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f8c0 	bl	8004aec <MIDI_ProcessReception>
		status = USBH_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
		break;
 8004970:	e00f      	b.n	8004992 <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 8004972:	2100      	movs	r1, #0
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f012 f837 	bl	80169e8 <USBH_ClrFeature>
 800497a:	4603      	mov	r3, r0
 800497c:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 800497e:	7bbb      	ldrb	r3, [r7, #14]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
		break;
 800498a:	e001      	b.n	8004990 <USBH_MIDI_Process+0x66>
		break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <USBH_MIDI_Process+0x68>
		break;
 8004990:	bf00      	nop

	}

	return status;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b087      	sub	sp, #28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <USBH_MIDI_Receive+0x2c>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10d      	bne.n	80049fa <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2203      	movs	r2, #3
 80049f4:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	7e1b      	ldrb	r3, [r3, #24]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <MIDI_ProcessTransmission+0x24>
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d021      	beq.n	8004a6e <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8004a2a:	e05a      	b.n	8004ae2 <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8a9a      	ldrh	r2, [r3, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88db      	ldrh	r3, [r3, #6]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d90b      	bls.n	8004a50 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68d9      	ldr	r1, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88da      	ldrh	r2, [r3, #6]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	789b      	ldrb	r3, [r3, #2]
 8004a44:	2001      	movs	r0, #1
 8004a46:	9000      	str	r0, [sp, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f012 fd0e 	bl	801746a <USBH_BulkSendData>
 8004a4e:	e00a      	b.n	8004a66 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68d9      	ldr	r1, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8a9a      	ldrh	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	789b      	ldrb	r3, [r3, #2]
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	9000      	str	r0, [sp, #0]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f012 fd02 	bl	801746a <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	761a      	strb	r2, [r3, #24]
		break;
 8004a6c:	e039      	b.n	8004ae2 <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa9f 	bl	8004fb8 <USBH_LL_GetURBState>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d127      	bne.n	8004ad4 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8a9a      	ldrh	r2, [r3, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88db      	ldrh	r3, [r3, #6]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d90f      	bls.n	8004ab0 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8a9a      	ldrh	r2, [r3, #20]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88db      	ldrh	r3, [r3, #6]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	88d2      	ldrh	r2, [r2, #6]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e002      	b.n	8004ab6 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8a9b      	ldrh	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	761a      	strb	r2, [r3, #24]
		break;
 8004ac4:	e00c      	b.n	8004ae0 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f86d 	bl	8004bac <USBH_MIDI_TransmitCallback>
		break;
 8004ad2:	e005      	b.n	8004ae0 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d102      	bne.n	8004ae0 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	761a      	strb	r2, [r3, #24]
		break;
 8004ae0:	bf00      	nop
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	7e5b      	ldrb	r3, [r3, #25]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d002      	beq.n	8004b10 <MIDI_ProcessReception+0x24>
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00d      	beq.n	8004b2a <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8004b0e:	e047      	b.n	8004ba0 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2204      	movs	r2, #4
 8004b14:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6919      	ldr	r1, [r3, #16]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	891a      	ldrh	r2, [r3, #8]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f012 fcc6 	bl	80174b4 <USBH_BulkReceiveData>
		break;
 8004b28:	e03a      	b.n	8004ba0 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa41 	bl	8004fb8 <USBH_LL_GetURBState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d12e      	bne.n	8004b9e <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <MIDI_ProcessReception+0xbc>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9a1 	bl	8004e94 <USBH_LL_GetLastXferSize>
 8004b52:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	8adb      	ldrh	r3, [r3, #22]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d017      	beq.n	8004b90 <MIDI_ProcessReception+0xa4>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	891b      	ldrh	r3, [r3, #8]
 8004b64:	461a      	mov	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d911      	bls.n	8004b90 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	8ada      	ldrh	r2, [r3, #22]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	441a      	add	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	765a      	strb	r2, [r3, #25]
		break;
 8004b8e:	e006      	b.n	8004b9e <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc fc13 	bl	80013c4 <USBH_MIDI_ReceiveCallback>
		break;
 8004b9e:	bf00      	nop
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20001e34 	.word	0x20001e34

08004bac <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <HAL_HCD_MspInit+0xb8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d146      	bne.n	8004c70 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004c00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c06:	2302      	movs	r3, #2
 8004c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004c12:	230a      	movs	r3, #10
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4818      	ldr	r0, [pc, #96]	; (8004c80 <HAL_HCD_MspInit+0xc0>)
 8004c1e:	f004 fb5f 	bl	80092e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_HCD_MspInit+0xbc>)
 8004c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 8004c40:	2200      	movs	r2, #0
 8004c42:	2106      	movs	r1, #6
 8004c44:	2062      	movs	r0, #98	; 0x62
 8004c46:	f002 f9b6 	bl	8006fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004c4a:	2062      	movs	r0, #98	; 0x62
 8004c4c:	f002 f9cd 	bl	8006fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2106      	movs	r1, #6
 8004c54:	2063      	movs	r0, #99	; 0x63
 8004c56:	f002 f9ae 	bl	8006fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8004c5a:	2063      	movs	r0, #99	; 0x63
 8004c5c:	f002 f9c5 	bl	8006fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2065      	movs	r0, #101	; 0x65
 8004c66:	f002 f9a6 	bl	8006fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004c6a:	2065      	movs	r0, #101	; 0x65
 8004c6c:	f002 f9bd 	bl	8006fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004c70:	bf00      	nop
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40080000 	.word	0x40080000
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	58020000 	.word	0x58020000

08004c84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004c92:	4618      	mov	r0, r3
 8004c94:	f011 fcfd 	bl	8016692 <USBH_LL_IncTimer>
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f011 fd35 	bl	801671e <USBH_LL_Connect>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f011 fd3e 	bl	801674c <USBH_LL_Disconnect>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d02:	4618      	mov	r0, r3
 8004d04:	f011 fcef 	bl	80166e6 <USBH_LL_PortEnabled>
} 
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f011 fcef 	bl	8016702 <USBH_LL_PortDisabled>
} 
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d129      	bne.n	8004d92 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d4a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d50:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <USBH_LL_Init+0x74>)
 8004d52:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d56:	2210      	movs	r2, #16
 8004d58:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d68:	2202      	movs	r2, #2
 8004d6a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d72:	480a      	ldr	r0, [pc, #40]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d74:	f004 fc95 	bl	80096a2 <HAL_HCD_Init>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004d7e:	f7fe fa63 	bl	8003248 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004d82:	4806      	ldr	r0, [pc, #24]	; (8004d9c <USBH_LL_Init+0x70>)
 8004d84:	f005 f87d 	bl	8009e82 <HAL_HCD_GetCurrentFrame>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f011 fc71 	bl	8016674 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20001e38 	.word	0x20001e38
 8004da0:	40080000 	.word	0x40080000

08004da4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 ffeb 	bl	8009d96 <HAL_HCD_Start>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f95c 	bl	8005084 <USBH_Get_USB_Status>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f004 fff3 	bl	8009ddc <HAL_HCD_Stop>
 8004df6:	4603      	mov	r3, r0
 8004df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f941 	bl	8005084 <USBH_Get_USB_Status>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f005 f83b 	bl	8009e9e <HAL_HCD_GetCurrentSpeed>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d00c      	beq.n	8004e48 <USBH_LL_GetSpeed+0x38>
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d80d      	bhi.n	8004e4e <USBH_LL_GetSpeed+0x3e>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <USBH_LL_GetSpeed+0x2c>
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d003      	beq.n	8004e42 <USBH_LL_GetSpeed+0x32>
 8004e3a:	e008      	b.n	8004e4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e40:	e008      	b.n	8004e54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
    break;
 8004e46:	e005      	b.n	8004e54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e4c:	e002      	b.n	8004e54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
    break;
 8004e52:	bf00      	nop
  }
  return  speed;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f004 ffce 	bl	8009e16 <HAL_HCD_ResetPort>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f8ff 	bl	8005084 <USBH_Get_USB_Status>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 ffd5 	bl	8009e5a <HAL_HCD_HC_GetXferCount>
 8004eb0:	4603      	mov	r3, r0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004eba:	b590      	push	{r4, r7, lr}
 8004ebc:	b089      	sub	sp, #36	; 0x24
 8004ebe:	af04      	add	r7, sp, #16
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4603      	mov	r3, r0
 8004eca:	70fb      	strb	r3, [r7, #3]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70bb      	strb	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004ee2:	787c      	ldrb	r4, [r7, #1]
 8004ee4:	78ba      	ldrb	r2, [r7, #2]
 8004ee6:	78f9      	ldrb	r1, [r7, #3]
 8004ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eea:	9302      	str	r3, [sp, #8]
 8004eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4623      	mov	r3, r4
 8004efa:	f004 fc34 	bl	8009766 <HAL_HCD_HC_Init>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f8bd 	bl	8005084 <USBH_Get_USB_Status>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd90      	pop	{r4, r7, pc}

08004f18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f004 fca4 	bl	8009884 <HAL_HCD_HC_Halt>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f89e 	bl	8005084 <USBH_Get_USB_Status>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004f56:	b590      	push	{r4, r7, lr}
 8004f58:	b089      	sub	sp, #36	; 0x24
 8004f5a:	af04      	add	r7, sp, #16
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	461a      	mov	r2, r3
 8004f64:	4603      	mov	r3, r0
 8004f66:	70fb      	strb	r3, [r7, #3]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70bb      	strb	r3, [r7, #2]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004f7e:	787c      	ldrb	r4, [r7, #1]
 8004f80:	78ba      	ldrb	r2, [r7, #2]
 8004f82:	78f9      	ldrb	r1, [r7, #3]
 8004f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f8c:	9302      	str	r3, [sp, #8]
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f004 fc97 	bl	80098cc <HAL_HCD_HC_SubmitRequest>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f86d 	bl	8005084 <USBH_Get_USB_Status>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd90      	pop	{r4, r7, pc}

08004fb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 ff2f 	bl	8009e32 <HAL_HCD_HC_GetURBState>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d103      	bne.n	8004ffc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f870 	bl	80050dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004ffc:	20c8      	movs	r0, #200	; 0xc8
 8004ffe:	f000 f945 	bl	800528c <HAL_Delay>
  return USBH_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
 8005018:	4613      	mov	r3, r2
 800501a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8005022:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	333b      	adds	r3, #59	; 0x3b
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3354      	adds	r3, #84	; 0x54
 8005046:	78ba      	ldrb	r2, [r7, #2]
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e008      	b.n	800505e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3355      	adds	r3, #85	; 0x55
 800505a:	78ba      	ldrb	r2, [r7, #2]
 800505c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f909 	bl	800528c <HAL_Delay>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d817      	bhi.n	80050c8 <USBH_Get_USB_Status+0x44>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <USBH_Get_USB_Status+0x1c>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b7 	.word	0x080050b7
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050c3 	.word	0x080050c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	73fb      	strb	r3, [r7, #15]
    break;
 80050b4:	e00b      	b.n	80050ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80050b6:	2302      	movs	r3, #2
 80050b8:	73fb      	strb	r3, [r7, #15]
    break;
 80050ba:	e008      	b.n	80050ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
    break;
 80050c0:	e005      	b.n	80050ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80050c2:	2302      	movs	r3, #2
 80050c4:	73fb      	strb	r3, [r7, #15]
    break;
 80050c6:	e002      	b.n	80050ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80050c8:	2302      	movs	r3, #2
 80050ca:	73fb      	strb	r3, [r7, #15]
    break;
 80050cc:	bf00      	nop
  }
  return usb_status;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	e001      	b.n	80050fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005102:	4803      	ldr	r0, [pc, #12]	; (8005110 <MX_DriverVbusFS+0x34>)
 8005104:	f004 fab4 	bl	8009670 <HAL_GPIO_WritePin>
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	58020400 	.word	0x58020400

08005114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800514c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800511a:	e003      	b.n	8005124 <LoopCopyDataInit>

0800511c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800511e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005122:	3104      	adds	r1, #4

08005124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005124:	480b      	ldr	r0, [pc, #44]	; (8005154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800512a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800512c:	d3f6      	bcc.n	800511c <CopyDataInit>
  ldr  r2, =_sbss
 800512e:	4a0b      	ldr	r2, [pc, #44]	; (800515c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005130:	e002      	b.n	8005138 <LoopFillZerobss>

08005132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005134:	f842 3b04 	str.w	r3, [r2], #4

08005138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800513a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800513c:	d3f9      	bcc.n	8005132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800513e:	f7fe fd5b 	bl	8003bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005142:	f012 fba1 	bl	8017888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005146:	f7fd fdfd 	bl	8002d44 <main>
  bx  lr    
 800514a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800514c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005150:	0801a6d0 	.word	0x0801a6d0
  ldr  r0, =_sdata
 8005154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005158:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 800515c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8005160:	20002294 	.word	0x20002294

08005164 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005164:	e7fe      	b.n	8005164 <ADC3_IRQHandler>
	...

08005168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800516e:	2003      	movs	r0, #3
 8005170:	f001 ff16 	bl	8006fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005174:	f007 fa30 	bl	800c5d8 <HAL_RCC_GetSysClockFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <HAL_Init+0x68>)
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	4913      	ldr	r1, [pc, #76]	; (80051d4 <HAL_Init+0x6c>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_Init+0x68>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <HAL_Init+0x6c>)
 800519c:	5cd3      	ldrb	r3, [r2, r3]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	4a0b      	ldr	r2, [pc, #44]	; (80051d8 <HAL_Init+0x70>)
 80051aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051ac:	4a0b      	ldr	r2, [pc, #44]	; (80051dc <HAL_Init+0x74>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051b2:	2000      	movs	r0, #0
 80051b4:	f000 f814 	bl	80051e0 <HAL_InitTick>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e002      	b.n	80051c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80051c2:	f7fe fc5f 	bl	8003a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	58024400 	.word	0x58024400
 80051d4:	08018be4 	.word	0x08018be4
 80051d8:	20000024 	.word	0x20000024
 80051dc:	20000020 	.word	0x20000020

080051e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <HAL_InitTick+0x60>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e021      	b.n	8005238 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <HAL_InitTick+0x64>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <HAL_InitTick+0x60>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005202:	fbb3 f3f1 	udiv	r3, r3, r1
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	4618      	mov	r0, r3
 800520c:	f001 fefb 	bl	8007006 <HAL_SYSTICK_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e00e      	b.n	8005238 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d80a      	bhi.n	8005236 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005220:	2200      	movs	r2, #0
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005228:	f001 fec5 	bl	8006fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800522c:	4a06      	ldr	r2, [pc, #24]	; (8005248 <HAL_InitTick+0x68>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	2000004c 	.word	0x2000004c
 8005244:	20000020 	.word	0x20000020
 8005248:	20000048 	.word	0x20000048

0800524c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_IncTick+0x20>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_IncTick+0x24>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4413      	add	r3, r2
 800525c:	4a04      	ldr	r2, [pc, #16]	; (8005270 <HAL_IncTick+0x24>)
 800525e:	6013      	str	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000004c 	.word	0x2000004c
 8005270:	2000213c 	.word	0x2000213c

08005274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  return uwTick;
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <HAL_GetTick+0x14>)
 800527a:	681b      	ldr	r3, [r3, #0]
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	2000213c 	.word	0x2000213c

0800528c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005294:	f7ff ffee 	bl	8005274 <HAL_GetTick>
 8005298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a4:	d005      	beq.n	80052b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_Delay+0x44>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052b2:	bf00      	nop
 80052b4:	f7ff ffde 	bl	8005274 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d8f7      	bhi.n	80052b4 <HAL_Delay+0x28>
  {
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	2000004c 	.word	0x2000004c

080052d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_GetREVID+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0c1b      	lsrs	r3, r3, #16
}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	5c001000 	.word	0x5c001000

080052ec <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	52004000 	.word	0x52004000

08005314 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	609a      	str	r2, [r3, #8]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3360      	adds	r3, #96	; 0x60
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	431a      	orrs	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	fa01 f303 	lsl.w	r3, r1, r3
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3360      	adds	r3, #96	; 0x60
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	431a      	orrs	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	601a      	str	r2, [r3, #0]
  }
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3330      	adds	r3, #48	; 0x30
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	f003 030c 	and.w	r3, r3, #12
 8005466:	4413      	add	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	211f      	movs	r1, #31
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0e9b      	lsrs	r3, r3, #26
 8005482:	f003 011f 	and.w	r1, r3, #31
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f023 0203 	bic.w	r2, r3, #3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60da      	str	r2, [r3, #12]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3314      	adds	r3, #20
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	0e5b      	lsrs	r3, r3, #25
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	4413      	add	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0d1b      	lsrs	r3, r3, #20
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	2107      	movs	r1, #7
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	401a      	ands	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	0d1b      	lsrs	r3, r3, #20
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	431a      	orrs	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0318 	and.w	r3, r3, #24
 8005566:	4908      	ldr	r1, [pc, #32]	; (8005588 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005568:	40d9      	lsrs	r1, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	400b      	ands	r3, r1
 800556e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	000fffff 	.word	0x000fffff

0800558c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 031f 	and.w	r3, r3, #31
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6093      	str	r3, [r2, #8]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	5fffffc0 	.word	0x5fffffc0

080055e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fc:	d101      	bne.n	8005602 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <LL_ADC_EnableInternalRegulator+0x24>)
 800561e:	4013      	ands	r3, r2
 8005620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	6fffffc0 	.word	0x6fffffc0

08005638 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564c:	d101      	bne.n	8005652 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <LL_ADC_Enable+0x24>)
 800566e:	4013      	ands	r3, r2
 8005670:	f043 0201 	orr.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	7fffffc0 	.word	0x7fffffc0

08005688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <LL_ADC_IsEnabled+0x18>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <LL_ADC_IsEnabled+0x1a>
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <LL_ADC_REG_StartConversion+0x24>)
 80056be:	4013      	ands	r3, r2
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	7fffffc0 	.word	0x7fffffc0

080056d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d101      	bne.n	80056f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d101      	bne.n	8005716 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e18f      	b.n	8005a5e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fc f809 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff3f 	bl	80055e8 <LL_ADC_IsDeepPowerDownEnabled>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ff25 	bl	80055c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff5a 	bl	8005638 <LL_ADC_IsInternalRegulatorEnabled>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d114      	bne.n	80057b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff3e 	bl	8005610 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005794:	4b87      	ldr	r3, [pc, #540]	; (80059b4 <HAL_ADC_Init+0x290>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	099b      	lsrs	r3, r3, #6
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <HAL_ADC_Init+0x294>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	099b      	lsrs	r3, r3, #6
 80057a2:	3301      	adds	r3, #1
 80057a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80057a6:	e002      	b.n	80057ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f9      	bne.n	80057a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ff3d 	bl	8005638 <LL_ADC_IsInternalRegulatorEnabled>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f043 0210 	orr.w	r2, r3, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff77 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 80057ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 8129 	bne.w	8005a4c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8125 	bne.w	8005a4c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800580a:	f043 0202 	orr.w	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ff36 	bl	8005688 <LL_ADC_IsEnabled>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d136      	bne.n	8005890 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a65      	ldr	r2, [pc, #404]	; (80059bc <HAL_ADC_Init+0x298>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_ADC_Init+0x112>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a63      	ldr	r2, [pc, #396]	; (80059c0 <HAL_ADC_Init+0x29c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10e      	bne.n	8005854 <HAL_ADC_Init+0x130>
 8005836:	4861      	ldr	r0, [pc, #388]	; (80059bc <HAL_ADC_Init+0x298>)
 8005838:	f7ff ff26 	bl	8005688 <LL_ADC_IsEnabled>
 800583c:	4604      	mov	r4, r0
 800583e:	4860      	ldr	r0, [pc, #384]	; (80059c0 <HAL_ADC_Init+0x29c>)
 8005840:	f7ff ff22 	bl	8005688 <LL_ADC_IsEnabled>
 8005844:	4603      	mov	r3, r0
 8005846:	4323      	orrs	r3, r4
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e008      	b.n	8005866 <HAL_ADC_Init+0x142>
 8005854:	485b      	ldr	r0, [pc, #364]	; (80059c4 <HAL_ADC_Init+0x2a0>)
 8005856:	f7ff ff17 	bl	8005688 <LL_ADC_IsEnabled>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d012      	beq.n	8005890 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a53      	ldr	r2, [pc, #332]	; (80059bc <HAL_ADC_Init+0x298>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_ADC_Init+0x15a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a51      	ldr	r2, [pc, #324]	; (80059c0 <HAL_ADC_Init+0x29c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d101      	bne.n	8005882 <HAL_ADC_Init+0x15e>
 800587e:	4a52      	ldr	r2, [pc, #328]	; (80059c8 <HAL_ADC_Init+0x2a4>)
 8005880:	e000      	b.n	8005884 <HAL_ADC_Init+0x160>
 8005882:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_ADC_Init+0x2a8>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7ff fd42 	bl	8005314 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005890:	f7ff fd20 	bl	80052d4 <HAL_GetREVID>
 8005894:	4603      	mov	r3, r0
 8005896:	f241 0203 	movw	r2, #4099	; 0x1003
 800589a:	4293      	cmp	r3, r2
 800589c:	d914      	bls.n	80058c8 <HAL_ADC_Init+0x1a4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d110      	bne.n	80058c8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7d5b      	ldrb	r3, [r3, #21]
 80058aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80058b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7f1b      	ldrb	r3, [r3, #28]
 80058bc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80058be:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058c0:	f043 030c 	orr.w	r3, r3, #12
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e00d      	b.n	80058e4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7d5b      	ldrb	r3, [r3, #21]
 80058cc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058d2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80058d8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f1b      	ldrb	r3, [r3, #28]
 80058de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	7f1b      	ldrb	r3, [r3, #28]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d106      	bne.n	80058fa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	045b      	lsls	r3, r3, #17
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <HAL_ADC_Init+0x2ac>)
 800591e:	4013      	ands	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	430b      	orrs	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fed2 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 8005934:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fedf 	bl	80056fe <LL_ADC_INJ_IsConversionOngoing>
 8005940:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d15f      	bne.n	8005a08 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d15c      	bne.n	8005a08 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7d1b      	ldrb	r3, [r3, #20]
 8005952:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005958:	4313      	orrs	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <HAL_ADC_Init+0x2b0>)
 8005964:	4013      	ands	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	430b      	orrs	r3, r1
 800596e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005976:	2b01      	cmp	r3, #1
 8005978:	d130      	bne.n	80059dc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <HAL_ADC_Init+0x2b4>)
 8005988:	4013      	ands	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800598e:	3a01      	subs	r2, #1
 8005990:	0411      	lsls	r1, r2, #16
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059a2:	430a      	orrs	r2, r1
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	e01c      	b.n	80059ec <HAL_ADC_Init+0x2c8>
 80059b2:	bf00      	nop
 80059b4:	20000020 	.word	0x20000020
 80059b8:	053e2d63 	.word	0x053e2d63
 80059bc:	40022000 	.word	0x40022000
 80059c0:	40022100 	.word	0x40022100
 80059c4:	58026000 	.word	0x58026000
 80059c8:	40022300 	.word	0x40022300
 80059cc:	58026300 	.word	0x58026300
 80059d0:	fff0c003 	.word	0xfff0c003
 80059d4:	ffffbffc 	.word	0xffffbffc
 80059d8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 ffba 	bl	800697c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10c      	bne.n	8005a2a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f023 010f 	bic.w	r1, r3, #15
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
 8005a28:	e007      	b.n	8005a3a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020f 	bic.w	r2, r2, #15
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
 8005a4a:	e007      	b.n	8005a5c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	f043 0210 	orr.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3724      	adds	r7, #36	; 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}
 8005a66:	bf00      	nop

08005a68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a55      	ldr	r2, [pc, #340]	; (8005bd0 <HAL_ADC_Start_DMA+0x168>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_ADC_Start_DMA+0x20>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a54      	ldr	r2, [pc, #336]	; (8005bd4 <HAL_ADC_Start_DMA+0x16c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_ADC_Start_DMA+0x24>
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_ADC_Start_DMA+0x170>)
 8005a8a:	e000      	b.n	8005a8e <HAL_ADC_Start_DMA+0x26>
 8005a8c:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <HAL_ADC_Start_DMA+0x174>)
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fd7c 	bl	800558c <LL_ADC_GetMultimode>
 8005a94:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fe1c 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 808c 	bne.w	8005bc0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_Start_DMA+0x4e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e087      	b.n	8005bc6 <HAL_ADC_Start_DMA+0x15e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d002      	beq.n	8005ad0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d170      	bne.n	8005bb2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fe35 	bl	8006740 <ADC_Enable>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d163      	bne.n	8005ba8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <HAL_ADC_Start_DMA+0x178>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <HAL_ADC_Start_DMA+0x16c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d002      	beq.n	8005b00 <HAL_ADC_Start_DMA+0x98>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	e000      	b.n	8005b02 <HAL_ADC_Start_DMA+0x9a>
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <HAL_ADC_Start_DMA+0x168>)
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d002      	beq.n	8005b10 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	f023 0206 	bic.w	r2, r3, #6
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	659a      	str	r2, [r3, #88]	; 0x58
 8005b34:	e002      	b.n	8005b3c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b40:	4a28      	ldr	r2, [pc, #160]	; (8005be4 <HAL_ADC_Start_DMA+0x17c>)
 8005b42:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <HAL_ADC_Start_DMA+0x180>)
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <HAL_ADC_Start_DMA+0x184>)
 8005b52:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	221c      	movs	r2, #28
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0210 	orr.w	r2, r2, #16
 8005b72:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7ff fc8f 	bl	80054a2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3340      	adds	r3, #64	; 0x40
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f001 fe1c 	bl	80077d0 <HAL_DMA_Start_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fd85 	bl	80056b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005ba6:	e00d      	b.n	8005bc4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005bb0:	e008      	b.n	8005bc4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005bbe:	e001      	b.n	8005bc4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40022000 	.word	0x40022000
 8005bd4:	40022100 	.word	0x40022100
 8005bd8:	40022300 	.word	0x40022300
 8005bdc:	58026300 	.word	0x58026300
 8005be0:	fffff0fe 	.word	0xfffff0fe
 8005be4:	08006855 	.word	0x08006855
 8005be8:	0800692d 	.word	0x0800692d
 8005bec:	08006949 	.word	0x08006949

08005bf0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a87      	ldr	r2, [pc, #540]	; (8005e30 <HAL_ADC_IRQHandler+0x240>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_ADC_IRQHandler+0x30>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a86      	ldr	r2, [pc, #536]	; (8005e34 <HAL_ADC_IRQHandler+0x244>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_IRQHandler+0x34>
 8005c20:	4b85      	ldr	r3, [pc, #532]	; (8005e38 <HAL_ADC_IRQHandler+0x248>)
 8005c22:	e000      	b.n	8005c26 <HAL_ADC_IRQHandler+0x36>
 8005c24:	4b85      	ldr	r3, [pc, #532]	; (8005e3c <HAL_ADC_IRQHandler+0x24c>)
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fcb0 	bl	800558c <LL_ADC_GetMultimode>
 8005c2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d017      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x78>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ffe8 	bl	8006c30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2202      	movs	r2, #2
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_ADC_IRQHandler+0x8c>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8083 	beq.w	8005d8e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d07d      	beq.n	8005d8e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d105      	bne.n	8005caa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fbb8 	bl	8005424 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d062      	beq.n	8005d80 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a5d      	ldr	r2, [pc, #372]	; (8005e34 <HAL_ADC_IRQHandler+0x244>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d002      	beq.n	8005cca <HAL_ADC_IRQHandler+0xda>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	e000      	b.n	8005ccc <HAL_ADC_IRQHandler+0xdc>
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_ADC_IRQHandler+0x240>)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d008      	beq.n	8005ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b05      	cmp	r3, #5
 8005cde:	d002      	beq.n	8005ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d104      	bne.n	8005cf0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	e00c      	b.n	8005d0a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a4f      	ldr	r2, [pc, #316]	; (8005e34 <HAL_ADC_IRQHandler+0x244>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d002      	beq.n	8005d00 <HAL_ADC_IRQHandler+0x110>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	e000      	b.n	8005d02 <HAL_ADC_IRQHandler+0x112>
 8005d00:	4b4b      	ldr	r3, [pc, #300]	; (8005e30 <HAL_ADC_IRQHandler+0x240>)
 8005d02:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d135      	bne.n	8005d80 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d12e      	bne.n	8005d80 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fcd6 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d11a      	bne.n	8005d68 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 020c 	bic.w	r2, r2, #12
 8005d40:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d112      	bne.n	8005d80 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54
 8005d66:	e00b      	b.n	8005d80 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	f043 0210 	orr.w	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fd f991 	bl	80030a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	220c      	movs	r2, #12
 8005d8c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <HAL_ADC_IRQHandler+0x1b2>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a0 	beq.w	8005eee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 809a 	beq.w	8005eee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fb76 	bl	80054c8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005ddc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fb1e 	bl	8005424 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005de8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <HAL_ADC_IRQHandler+0x244>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d002      	beq.n	8005dfa <HAL_ADC_IRQHandler+0x20a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	e000      	b.n	8005dfc <HAL_ADC_IRQHandler+0x20c>
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <HAL_ADC_IRQHandler+0x240>)
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d008      	beq.n	8005e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b06      	cmp	r3, #6
 8005e0e:	d002      	beq.n	8005e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	d104      	bne.n	8005e20 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	e014      	b.n	8005e4a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a03      	ldr	r2, [pc, #12]	; (8005e34 <HAL_ADC_IRQHandler+0x244>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00a      	beq.n	8005e40 <HAL_ADC_IRQHandler+0x250>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	e008      	b.n	8005e42 <HAL_ADC_IRQHandler+0x252>
 8005e30:	40022000 	.word	0x40022000
 8005e34:	40022100 	.word	0x40022100
 8005e38:	40022300 	.word	0x40022300
 8005e3c:	58026300 	.word	0x58026300
 8005e40:	4b84      	ldr	r3, [pc, #528]	; (8006054 <HAL_ADC_IRQHandler+0x464>)
 8005e42:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d047      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_ADC_IRQHandler+0x27a>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d03f      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13a      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d133      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d12e      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fc39 	bl	80056fe <LL_ADC_INJ_IsConversionOngoing>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d11a      	bne.n	8005ec8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ea0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d112      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	f043 0201 	orr.w	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8005ec6:	e00b      	b.n	8005ee0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ecc:	f043 0210 	orr.w	r2, r3, #16
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fe7d 	bl	8006be0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2260      	movs	r2, #96	; 0x60
 8005eec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_ADC_IRQHandler+0x32c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f8b2 	bl	8006078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d012      	beq.n	8005f4c <HAL_ADC_IRQHandler+0x35c>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fe63 	bl	8006c08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d012      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x38c>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fe55 	bl	8006c1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d043      	beq.n	800600e <HAL_ADC_IRQHandler+0x41e>
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d03e      	beq.n	800600e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	e021      	b.n	8005fe2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2a      	ldr	r2, [pc, #168]	; (8006054 <HAL_ADC_IRQHandler+0x464>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_ADC_IRQHandler+0x3c8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a29      	ldr	r2, [pc, #164]	; (8006058 <HAL_ADC_IRQHandler+0x468>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_ADC_IRQHandler+0x3cc>
 8005fb8:	4b28      	ldr	r3, [pc, #160]	; (800605c <HAL_ADC_IRQHandler+0x46c>)
 8005fba:	e000      	b.n	8005fbe <HAL_ADC_IRQHandler+0x3ce>
 8005fbc:	4b28      	ldr	r3, [pc, #160]	; (8006060 <HAL_ADC_IRQHandler+0x470>)
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff faf2 	bl	80055a8 <LL_ADC_GetMultiDMATransfer>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	e008      	b.n	8005fe2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10e      	bne.n	8006006 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	f043 0202 	orr.w	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f843 	bl	800608c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2210      	movs	r2, #16
 800600c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	2b00      	cmp	r3, #0
 8006016:	d018      	beq.n	800604a <HAL_ADC_IRQHandler+0x45a>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601e:	2b00      	cmp	r3, #0
 8006020:	d013      	beq.n	800604a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f043 0208 	orr.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006042:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fdd5 	bl	8006bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800604a:	bf00      	nop
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40022000 	.word	0x40022000
 8006058:	40022100 	.word	0x40022100
 800605c:	40022300 	.word	0x40022300
 8006060:	58026300 	.word	0x58026300

08006064 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b0a1      	sub	sp, #132	; 0x84
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a9d      	ldr	r2, [pc, #628]	; (8006330 <HAL_ADC_ConfigChannel+0x290>)
 80060ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x2a>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e321      	b.n	800670e <HAL_ADC_ConfigChannel+0x66e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fafe 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f040 8306 	bne.w	80066f0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x62>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	0e9b      	lsrs	r3, r3, #26
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	e016      	b.n	8006130 <HAL_ADC_ConfigChannel+0x90>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610a:	fa93 f3a3 	rbit	r3, r3
 800610e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006112:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800611a:	2320      	movs	r3, #32
 800611c:	e003      	b.n	8006126 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800611e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2201      	movs	r2, #1
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	69d1      	ldr	r1, [r2, #28]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	430b      	orrs	r3, r1
 800613c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f7ff f97d 	bl	800544a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fabf 	bl	80056d8 <LL_ADC_REG_IsConversionOngoing>
 800615a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff facc 	bl	80056fe <LL_ADC_INJ_IsConversionOngoing>
 8006166:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 80b3 	bne.w	80062d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 80af 	bne.w	80062d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	461a      	mov	r2, r3
 8006186:	f7ff f9b2 	bl	80054ee <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800618a:	4b6a      	ldr	r3, [pc, #424]	; (8006334 <HAL_ADC_ConfigChannel+0x294>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006196:	d10b      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x110>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	e01d      	b.n	80061ec <HAL_ADC_ConfigChannel+0x14c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <HAL_ADC_ConfigChannel+0x136>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	089b      	lsrs	r3, r3, #2
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	e00a      	b.n	80061ec <HAL_ADC_ConfigChannel+0x14c>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d027      	beq.n	8006246 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6919      	ldr	r1, [r3, #16]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006204:	f7ff f8ba 	bl	800537c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6919      	ldr	r1, [r3, #16]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	7e5b      	ldrb	r3, [r3, #25]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d102      	bne.n	800621e <HAL_ADC_ConfigChannel+0x17e>
 8006218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800621c:	e000      	b.n	8006220 <HAL_ADC_ConfigChannel+0x180>
 800621e:	2300      	movs	r3, #0
 8006220:	461a      	mov	r2, r3
 8006222:	f7ff f8e4 	bl	80053ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6919      	ldr	r1, [r3, #16]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	7e1b      	ldrb	r3, [r3, #24]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_ADC_ConfigChannel+0x19c>
 8006236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623a:	e000      	b.n	800623e <HAL_ADC_ConfigChannel+0x19e>
 800623c:	2300      	movs	r3, #0
 800623e:	461a      	mov	r2, r3
 8006240:	f7ff f8bc 	bl	80053bc <LL_ADC_SetDataRightShift>
 8006244:	e047      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	069b      	lsls	r3, r3, #26
 8006256:	429a      	cmp	r2, r3
 8006258:	d107      	bne.n	800626a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006268:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006270:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	069b      	lsls	r3, r3, #26
 800627a:	429a      	cmp	r2, r3
 800627c:	d107      	bne.n	800628e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800628c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006294:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	069b      	lsls	r3, r3, #26
 800629e:	429a      	cmp	r2, r3
 80062a0:	d107      	bne.n	80062b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062b0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	069b      	lsls	r3, r3, #26
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d107      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f9d4 	bl	8005688 <LL_ADC_IsEnabled>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 820d 	bne.w	8006702 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f7ff f925 	bl	8005544 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4a0c      	ldr	r2, [pc, #48]	; (8006330 <HAL_ADC_ConfigChannel+0x290>)
 8006300:	4293      	cmp	r3, r2
 8006302:	f040 8133 	bne.w	800656c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x298>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	0e9b      	lsrs	r3, r3, #26
 800631c:	3301      	adds	r3, #1
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b09      	cmp	r3, #9
 8006324:	bf94      	ite	ls
 8006326:	2301      	movls	r3, #1
 8006328:	2300      	movhi	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e01e      	b.n	800636c <HAL_ADC_ConfigChannel+0x2cc>
 800632e:	bf00      	nop
 8006330:	47ff0000 	.word	0x47ff0000
 8006334:	5c001000 	.word	0x5c001000
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006348:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800634a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006350:	2320      	movs	r3, #32
 8006352:	e003      	b.n	800635c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006356:	fab3 f383 	clz	r3, r3
 800635a:	b2db      	uxtb	r3, r3
 800635c:	3301      	adds	r3, #1
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2b09      	cmp	r3, #9
 8006364:	bf94      	ite	ls
 8006366:	2301      	movls	r3, #1
 8006368:	2300      	movhi	r3, #0
 800636a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800636c:	2b00      	cmp	r3, #0
 800636e:	d079      	beq.n	8006464 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <HAL_ADC_ConfigChannel+0x2ec>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	0e9b      	lsrs	r3, r3, #26
 8006382:	3301      	adds	r3, #1
 8006384:	069b      	lsls	r3, r3, #26
 8006386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800638a:	e015      	b.n	80063b8 <HAL_ADC_ConfigChannel+0x318>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	fa93 f3a3 	rbit	r3, r3
 8006398:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800639a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800639e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80063a4:	2320      	movs	r3, #32
 80063a6:	e003      	b.n	80063b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80063a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063aa:	fab3 f383 	clz	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	3301      	adds	r3, #1
 80063b2:	069b      	lsls	r3, r3, #26
 80063b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_ADC_ConfigChannel+0x338>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0e9b      	lsrs	r3, r3, #26
 80063ca:	3301      	adds	r3, #1
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f303 	lsl.w	r3, r1, r3
 80063d6:	e017      	b.n	8006408 <HAL_ADC_ConfigChannel+0x368>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e0:	fa93 f3a3 	rbit	r3, r3
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80063f0:	2320      	movs	r3, #32
 80063f2:	e003      	b.n	80063fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80063f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f6:	fab3 f383 	clz	r3, r3
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	3301      	adds	r3, #1
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2101      	movs	r1, #1
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	ea42 0103 	orr.w	r1, r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <HAL_ADC_ConfigChannel+0x38e>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	0e9b      	lsrs	r3, r3, #26
 800641e:	3301      	adds	r3, #1
 8006420:	f003 021f 	and.w	r2, r3, #31
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	051b      	lsls	r3, r3, #20
 800642c:	e018      	b.n	8006460 <HAL_ADC_ConfigChannel+0x3c0>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	fa93 f3a3 	rbit	r3, r3
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8006446:	2320      	movs	r3, #32
 8006448:	e003      	b.n	8006452 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	fab3 f383 	clz	r3, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	3301      	adds	r3, #1
 8006454:	f003 021f 	and.w	r2, r3, #31
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006460:	430b      	orrs	r3, r1
 8006462:	e07e      	b.n	8006562 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <HAL_ADC_ConfigChannel+0x3e0>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	0e9b      	lsrs	r3, r3, #26
 8006476:	3301      	adds	r3, #1
 8006478:	069b      	lsls	r3, r3, #26
 800647a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800647e:	e015      	b.n	80064ac <HAL_ADC_ConfigChannel+0x40c>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	fa93 f3a3 	rbit	r3, r3
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006498:	2320      	movs	r3, #32
 800649a:	e003      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	fab3 f383 	clz	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	3301      	adds	r3, #1
 80064a6:	069b      	lsls	r3, r3, #26
 80064a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x42c>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	0e9b      	lsrs	r3, r3, #26
 80064be:	3301      	adds	r3, #1
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	e017      	b.n	80064fc <HAL_ADC_ConfigChannel+0x45c>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	fa93 f3a3 	rbit	r3, r3
 80064d8:	61bb      	str	r3, [r7, #24]
  return result;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e003      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	fab3 f383 	clz	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	3301      	adds	r3, #1
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2101      	movs	r1, #1
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	ea42 0103 	orr.w	r1, r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10d      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x488>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	0e9b      	lsrs	r3, r3, #26
 8006512:	3301      	adds	r3, #1
 8006514:	f003 021f 	and.w	r2, r3, #31
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	3b1e      	subs	r3, #30
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006526:	e01b      	b.n	8006560 <HAL_ADC_ConfigChannel+0x4c0>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	fa93 f3a3 	rbit	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
  return result;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006540:	2320      	movs	r3, #32
 8006542:	e003      	b.n	800654c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	fab3 f383 	clz	r3, r3
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3301      	adds	r3, #1
 800654e:	f003 021f 	and.w	r2, r3, #31
 8006552:	4613      	mov	r3, r2
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	4413      	add	r3, r2
 8006558:	3b1e      	subs	r3, #30
 800655a:	051b      	lsls	r3, r3, #20
 800655c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006560:	430b      	orrs	r3, r1
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	6892      	ldr	r2, [r2, #8]
 8006566:	4619      	mov	r1, r3
 8006568:	f7fe ffc1 	bl	80054ee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f280 80c6 	bge.w	8006702 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a67      	ldr	r2, [pc, #412]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_ADC_ConfigChannel+0x4ea>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a65      	ldr	r2, [pc, #404]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_ADC_ConfigChannel+0x4ee>
 800658a:	4b65      	ldr	r3, [pc, #404]	; (8006720 <HAL_ADC_ConfigChannel+0x680>)
 800658c:	e000      	b.n	8006590 <HAL_ADC_ConfigChannel+0x4f0>
 800658e:	4b65      	ldr	r3, [pc, #404]	; (8006724 <HAL_ADC_ConfigChannel+0x684>)
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fee5 	bl	8005360 <LL_ADC_GetCommonPathInternalCh>
 8006596:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5e      	ldr	r2, [pc, #376]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_ADC_ConfigChannel+0x50c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a5d      	ldr	r2, [pc, #372]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10e      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x52a>
 80065ac:	485a      	ldr	r0, [pc, #360]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 80065ae:	f7ff f86b 	bl	8005688 <LL_ADC_IsEnabled>
 80065b2:	4604      	mov	r4, r0
 80065b4:	4859      	ldr	r0, [pc, #356]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 80065b6:	f7ff f867 	bl	8005688 <LL_ADC_IsEnabled>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4323      	orrs	r3, r4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	e008      	b.n	80065dc <HAL_ADC_ConfigChannel+0x53c>
 80065ca:	4857      	ldr	r0, [pc, #348]	; (8006728 <HAL_ADC_ConfigChannel+0x688>)
 80065cc:	f7ff f85c 	bl	8005688 <LL_ADC_IsEnabled>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d07d      	beq.n	80066dc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a51      	ldr	r2, [pc, #324]	; (800672c <HAL_ADC_ConfigChannel+0x68c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d130      	bne.n	800664c <HAL_ADC_ConfigChannel+0x5ac>
 80065ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d12b      	bne.n	800664c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a4b      	ldr	r2, [pc, #300]	; (8006728 <HAL_ADC_ConfigChannel+0x688>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f040 8081 	bne.w	8006702 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a44      	ldr	r2, [pc, #272]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_ADC_ConfigChannel+0x574>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a43      	ldr	r2, [pc, #268]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x578>
 8006614:	4a42      	ldr	r2, [pc, #264]	; (8006720 <HAL_ADC_ConfigChannel+0x680>)
 8006616:	e000      	b.n	800661a <HAL_ADC_ConfigChannel+0x57a>
 8006618:	4a42      	ldr	r2, [pc, #264]	; (8006724 <HAL_ADC_ConfigChannel+0x684>)
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f7fe fe89 	bl	800533a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006628:	4b41      	ldr	r3, [pc, #260]	; (8006730 <HAL_ADC_ConfigChannel+0x690>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	4a41      	ldr	r2, [pc, #260]	; (8006734 <HAL_ADC_ConfigChannel+0x694>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	099b      	lsrs	r3, r3, #6
 8006636:	3301      	adds	r3, #1
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800663c:	e002      	b.n	8006644 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f9      	bne.n	800663e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800664a:	e05a      	b.n	8006702 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a39      	ldr	r2, [pc, #228]	; (8006738 <HAL_ADC_ConfigChannel+0x698>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d11e      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x5f4>
 8006656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d119      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a30      	ldr	r2, [pc, #192]	; (8006728 <HAL_ADC_ConfigChannel+0x688>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d14b      	bne.n	8006702 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2a      	ldr	r2, [pc, #168]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_ADC_ConfigChannel+0x5de>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_ADC_ConfigChannel+0x5e2>
 800667e:	4a28      	ldr	r2, [pc, #160]	; (8006720 <HAL_ADC_ConfigChannel+0x680>)
 8006680:	e000      	b.n	8006684 <HAL_ADC_ConfigChannel+0x5e4>
 8006682:	4a28      	ldr	r2, [pc, #160]	; (8006724 <HAL_ADC_ConfigChannel+0x684>)
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7fe fe54 	bl	800533a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006692:	e036      	b.n	8006702 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a28      	ldr	r2, [pc, #160]	; (800673c <HAL_ADC_ConfigChannel+0x69c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d131      	bne.n	8006702 <HAL_ADC_ConfigChannel+0x662>
 800669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d12c      	bne.n	8006702 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <HAL_ADC_ConfigChannel+0x688>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d127      	bne.n	8006702 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a18      	ldr	r2, [pc, #96]	; (8006718 <HAL_ADC_ConfigChannel+0x678>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_ADC_ConfigChannel+0x626>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <HAL_ADC_ConfigChannel+0x67c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d101      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x62a>
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_ADC_ConfigChannel+0x680>)
 80066c8:	e000      	b.n	80066cc <HAL_ADC_ConfigChannel+0x62c>
 80066ca:	4a16      	ldr	r2, [pc, #88]	; (8006724 <HAL_ADC_ConfigChannel+0x684>)
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe fe30 	bl	800533a <LL_ADC_SetCommonPathInternalCh>
 80066da:	e012      	b.n	8006702 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066ee:	e008      	b.n	8006702 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800670a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800670e:	4618      	mov	r0, r3
 8006710:	3784      	adds	r7, #132	; 0x84
 8006712:	46bd      	mov	sp, r7
 8006714:	bd90      	pop	{r4, r7, pc}
 8006716:	bf00      	nop
 8006718:	40022000 	.word	0x40022000
 800671c:	40022100 	.word	0x40022100
 8006720:	40022300 	.word	0x40022300
 8006724:	58026300 	.word	0x58026300
 8006728:	58026000 	.word	0x58026000
 800672c:	cb840000 	.word	0xcb840000
 8006730:	20000020 	.word	0x20000020
 8006734:	053e2d63 	.word	0x053e2d63
 8006738:	c7520000 	.word	0xc7520000
 800673c:	cfb80000 	.word	0xcfb80000

08006740 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe ff9b 	bl	8005688 <LL_ADC_IsEnabled>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d16e      	bne.n	8006836 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	4b38      	ldr	r3, [pc, #224]	; (8006840 <ADC_Enable+0x100>)
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	f043 0210 	orr.w	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006776:	f043 0201 	orr.w	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e05a      	b.n	8006838 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe ff6a 	bl	8005660 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800678c:	f7fe fd72 	bl	8005274 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <ADC_Enable+0x104>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <ADC_Enable+0x66>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a29      	ldr	r2, [pc, #164]	; (8006848 <ADC_Enable+0x108>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <ADC_Enable+0x6a>
 80067a6:	4b29      	ldr	r3, [pc, #164]	; (800684c <ADC_Enable+0x10c>)
 80067a8:	e000      	b.n	80067ac <ADC_Enable+0x6c>
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <ADC_Enable+0x110>)
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe feed 	bl	800558c <LL_ADC_GetMultimode>
 80067b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a23      	ldr	r2, [pc, #140]	; (8006848 <ADC_Enable+0x108>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d002      	beq.n	80067c4 <ADC_Enable+0x84>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	e000      	b.n	80067c6 <ADC_Enable+0x86>
 80067c4:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <ADC_Enable+0x104>)
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02c      	beq.n	8006828 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d130      	bne.n	8006836 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d4:	e028      	b.n	8006828 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe ff54 	bl	8005688 <LL_ADC_IsEnabled>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe ff38 	bl	8005660 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067f0:	f7fe fd40 	bl	8005274 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d914      	bls.n	8006828 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d00d      	beq.n	8006828 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f043 0210 	orr.w	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f043 0201 	orr.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e007      	b.n	8006838 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d1cf      	bne.n	80067d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	8000003f 	.word	0x8000003f
 8006844:	40022000 	.word	0x40022000
 8006848:	40022100 	.word	0x40022100
 800684c:	40022300 	.word	0x40022300
 8006850:	58026300 	.word	0x58026300

08006854 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800686a:	2b00      	cmp	r3, #0
 800686c:	d14b      	bne.n	8006906 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d021      	beq.n	80068cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe fdc9 	bl	8005424 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d032      	beq.n	80068fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d12b      	bne.n	80068fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11f      	bne.n	80068fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	f043 0201 	orr.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	655a      	str	r2, [r3, #84]	; 0x54
 80068ca:	e018      	b.n	80068fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d111      	bne.n	80068fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f043 0201 	orr.w	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7fc fbd2 	bl	80030a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006904:	e00e      	b.n	8006924 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fbba 	bl	800608c <HAL_ADC_ErrorCallback>
}
 8006918:	e004      	b.n	8006924 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff fb92 	bl	8006064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff fb8c 	bl	800608c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7a      	ldr	r2, [pc, #488]	; (8006b74 <ADC_ConfigureBoostMode+0x1f8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <ADC_ConfigureBoostMode+0x1c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a79      	ldr	r2, [pc, #484]	; (8006b78 <ADC_ConfigureBoostMode+0x1fc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <ADC_ConfigureBoostMode+0x30>
 8006998:	4b78      	ldr	r3, [pc, #480]	; (8006b7c <ADC_ConfigureBoostMode+0x200>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e008      	b.n	80069be <ADC_ConfigureBoostMode+0x42>
 80069ac:	4b74      	ldr	r3, [pc, #464]	; (8006b80 <ADC_ConfigureBoostMode+0x204>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01c      	beq.n	80069fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80069c2:	f005 ff83 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 80069c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d0:	d010      	beq.n	80069f4 <ADC_ConfigureBoostMode+0x78>
 80069d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d6:	d873      	bhi.n	8006ac0 <ADC_ConfigureBoostMode+0x144>
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d002      	beq.n	80069e4 <ADC_ConfigureBoostMode+0x68>
 80069de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e2:	d16d      	bne.n	8006ac0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f0:	60fb      	str	r3, [r7, #12]
        break;
 80069f2:	e068      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	60fb      	str	r3, [r7, #12]
        break;
 80069fa:	e064      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80069fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f007 f9c8 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a12:	d051      	beq.n	8006ab8 <ADC_ConfigureBoostMode+0x13c>
 8006a14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a18:	d854      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a1e:	d047      	beq.n	8006ab0 <ADC_ConfigureBoostMode+0x134>
 8006a20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a24:	d84e      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a2a:	d03d      	beq.n	8006aa8 <ADC_ConfigureBoostMode+0x12c>
 8006a2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a30:	d848      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a36:	d033      	beq.n	8006aa0 <ADC_ConfigureBoostMode+0x124>
 8006a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a3c:	d842      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a42:	d029      	beq.n	8006a98 <ADC_ConfigureBoostMode+0x11c>
 8006a44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a48:	d83c      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a4e:	d01a      	beq.n	8006a86 <ADC_ConfigureBoostMode+0x10a>
 8006a50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a54:	d836      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006a5a:	d014      	beq.n	8006a86 <ADC_ConfigureBoostMode+0x10a>
 8006a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006a60:	d830      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a66:	d00e      	beq.n	8006a86 <ADC_ConfigureBoostMode+0x10a>
 8006a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6c:	d82a      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a72:	d008      	beq.n	8006a86 <ADC_ConfigureBoostMode+0x10a>
 8006a74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a78:	d824      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
 8006a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a7e:	d002      	beq.n	8006a86 <ADC_ConfigureBoostMode+0x10a>
 8006a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a84:	d11e      	bne.n	8006ac4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	0c9b      	lsrs	r3, r3, #18
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	60fb      	str	r3, [r7, #12]
        break;
 8006a96:	e016      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	60fb      	str	r3, [r7, #12]
        break;
 8006a9e:	e012      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	60fb      	str	r3, [r7, #12]
        break;
 8006aa6:	e00e      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	099b      	lsrs	r3, r3, #6
 8006aac:	60fb      	str	r3, [r7, #12]
        break;
 8006aae:	e00a      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	09db      	lsrs	r3, r3, #7
 8006ab4:	60fb      	str	r3, [r7, #12]
        break;
 8006ab6:	e006      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	60fb      	str	r3, [r7, #12]
        break;
 8006abe:	e002      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006ac4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006ac6:	f7fe fc05 	bl	80052d4 <HAL_GetREVID>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d815      	bhi.n	8006b00 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a2b      	ldr	r2, [pc, #172]	; (8006b84 <ADC_ConfigureBoostMode+0x208>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d908      	bls.n	8006aee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006aec:	e03e      	b.n	8006b6c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006afc:	609a      	str	r2, [r3, #8]
}
 8006afe:	e035      	b.n	8006b6c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <ADC_ConfigureBoostMode+0x20c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d808      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b1c:	609a      	str	r2, [r3, #8]
}
 8006b1e:	e025      	b.n	8006b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <ADC_ConfigureBoostMode+0x210>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d80a      	bhi.n	8006b3e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b3a:	609a      	str	r2, [r3, #8]
}
 8006b3c:	e016      	b.n	8006b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <ADC_ConfigureBoostMode+0x214>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d80a      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b58:	609a      	str	r2, [r3, #8]
}
 8006b5a:	e007      	b.n	8006b6c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006b6a:	609a      	str	r2, [r3, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40022000 	.word	0x40022000
 8006b78:	40022100 	.word	0x40022100
 8006b7c:	40022300 	.word	0x40022300
 8006b80:	58026300 	.word	0x58026300
 8006b84:	01312d00 	.word	0x01312d00
 8006b88:	005f5e10 	.word	0x005f5e10
 8006b8c:	00bebc20 	.word	0x00bebc20
 8006b90:	017d7840 	.word	0x017d7840

08006b94 <LL_ADC_IsEnabled>:
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <LL_ADC_IsEnabled+0x18>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <LL_ADC_IsEnabled+0x1a>
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_ADC_REG_IsConversionOngoing>:
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d101      	bne.n	8006bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b09f      	sub	sp, #124	; 0x7c
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e0be      	b.n	8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a5c      	ldr	r2, [pc, #368]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d102      	bne.n	8006c82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c7c:	4b5b      	ldr	r3, [pc, #364]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	e001      	b.n	8006c86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e09d      	b.n	8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff ff87 	bl	8006bba <LL_ADC_REG_IsConversionOngoing>
 8006cac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff ff81 	bl	8006bba <LL_ADC_REG_IsConversionOngoing>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d17f      	bne.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d17c      	bne.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a47      	ldr	r2, [pc, #284]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a46      	ldr	r2, [pc, #280]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d101      	bne.n	8006cdc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006cd8:	4b45      	ldr	r3, [pc, #276]	; (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006cda:	e000      	b.n	8006cde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006cdc:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006cde:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d039      	beq.n	8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a38      	ldr	r2, [pc, #224]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d10e      	bne.n	8006d2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006d0e:	4836      	ldr	r0, [pc, #216]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d10:	f7ff ff40 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d14:	4604      	mov	r4, r0
 8006d16:	4835      	ldr	r0, [pc, #212]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d18:	f7ff ff3c 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4323      	orrs	r3, r4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	e008      	b.n	8006d3e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006d2c:	4832      	ldr	r0, [pc, #200]	; (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d2e:	f7ff ff31 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d047      	beq.n	8006dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	6892      	ldr	r2, [r2, #8]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	431a      	orrs	r2, r3
 8006d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d5a:	e03a      	b.n	8006dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10e      	bne.n	8006d9a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006d7c:	481a      	ldr	r0, [pc, #104]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d7e:	f7ff ff09 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d82:	4604      	mov	r4, r0
 8006d84:	4819      	ldr	r0, [pc, #100]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d86:	f7ff ff05 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4323      	orrs	r3, r4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e008      	b.n	8006dac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006d9a:	4817      	ldr	r0, [pc, #92]	; (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d9c:	f7ff fefa 	bl	8006b94 <LL_ADC_IsEnabled>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf0c      	ite	eq
 8006da6:	2301      	moveq	r3, #1
 8006da8:	2300      	movne	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d010      	beq.n	8006dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dbc:	e009      	b.n	8006dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006dd0:	e000      	b.n	8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dd2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006ddc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	377c      	adds	r7, #124	; 0x7c
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	40022000 	.word	0x40022000
 8006dec:	40022100 	.word	0x40022100
 8006df0:	40022300 	.word	0x40022300
 8006df4:	58026300 	.word	0x58026300
 8006df8:	58026000 	.word	0x58026000
 8006dfc:	fffff0e0 	.word	0xfffff0e0

08006e00 <__NVIC_SetPriorityGrouping>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <__NVIC_SetPriorityGrouping+0x40>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <__NVIC_SetPriorityGrouping+0x44>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e2e:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <__NVIC_SetPriorityGrouping+0x40>)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	60d3      	str	r3, [r2, #12]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	e000ed00 	.word	0xe000ed00
 8006e44:	05fa0000 	.word	0x05fa0000

08006e48 <__NVIC_GetPriorityGrouping>:
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <__NVIC_GetPriorityGrouping+0x18>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	f003 0307 	and.w	r3, r3, #7
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <__NVIC_EnableIRQ>:
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	db0b      	blt.n	8006e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	f003 021f 	and.w	r2, r3, #31
 8006e7c:	4907      	ldr	r1, [pc, #28]	; (8006e9c <__NVIC_EnableIRQ+0x38>)
 8006e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2001      	movs	r0, #1
 8006e86:	fa00 f202 	lsl.w	r2, r0, r2
 8006e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000e100 	.word	0xe000e100

08006ea0 <__NVIC_SetPriority>:
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db0a      	blt.n	8006eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	490c      	ldr	r1, [pc, #48]	; (8006eec <__NVIC_SetPriority+0x4c>)
 8006eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ebe:	0112      	lsls	r2, r2, #4
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ec8:	e00a      	b.n	8006ee0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	4908      	ldr	r1, [pc, #32]	; (8006ef0 <__NVIC_SetPriority+0x50>)
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	3b04      	subs	r3, #4
 8006ed8:	0112      	lsls	r2, r2, #4
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	440b      	add	r3, r1
 8006ede:	761a      	strb	r2, [r3, #24]
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	e000e100 	.word	0xe000e100
 8006ef0:	e000ed00 	.word	0xe000ed00

08006ef4 <NVIC_EncodePriority>:
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b089      	sub	sp, #36	; 0x24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f1c3 0307 	rsb	r3, r3, #7
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	bf28      	it	cs
 8006f12:	2304      	movcs	r3, #4
 8006f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	2b06      	cmp	r3, #6
 8006f1c:	d902      	bls.n	8006f24 <NVIC_EncodePriority+0x30>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3b03      	subs	r3, #3
 8006f22:	e000      	b.n	8006f26 <NVIC_EncodePriority+0x32>
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	43da      	mvns	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	401a      	ands	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	43d9      	mvns	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f4c:	4313      	orrs	r3, r2
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f6c:	d301      	bcc.n	8006f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00f      	b.n	8006f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f72:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <SysTick_Config+0x40>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f7a:	210f      	movs	r1, #15
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f80:	f7ff ff8e 	bl	8006ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <SysTick_Config+0x40>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f8a:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <SysTick_Config+0x40>)
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	e000e010 	.word	0xe000e010

08006fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff29 	bl	8006e00 <__NVIC_SetPriorityGrouping>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fc4:	f7ff ff40 	bl	8006e48 <__NVIC_GetPriorityGrouping>
 8006fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	6978      	ldr	r0, [r7, #20]
 8006fd0:	f7ff ff90 	bl	8006ef4 <NVIC_EncodePriority>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff5f 	bl	8006ea0 <__NVIC_SetPriority>
}
 8006fe2:	bf00      	nop
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff ff33 	bl	8006e64 <__NVIC_EnableIRQ>
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ffa4 	bl	8006f5c <SysTick_Config>
 8007014:	4603      	mov	r3, r0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007024:	f3bf 8f5f 	dmb	sy
}
 8007028:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <HAL_MPU_Disable+0x28>)
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	4a06      	ldr	r2, [pc, #24]	; (8007048 <HAL_MPU_Disable+0x28>)
 8007030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007034:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_MPU_Disable+0x2c>)
 8007038:	2200      	movs	r2, #0
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000ed00 	.word	0xe000ed00
 800704c:	e000ed90 	.word	0xe000ed90

08007050 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007058:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <HAL_MPU_Enable+0x38>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <HAL_MPU_Enable+0x3c>)
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <HAL_MPU_Enable+0x3c>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800706e:	f3bf 8f4f 	dsb	sy
}
 8007072:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007074:	f3bf 8f6f 	isb	sy
}
 8007078:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	e000ed90 	.word	0xe000ed90
 800708c:	e000ed00 	.word	0xe000ed00

08007090 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	785a      	ldrb	r2, [r3, #1]
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_MPU_ConfigRegion+0x84>)
 800709e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d029      	beq.n	80070fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <HAL_MPU_ConfigRegion+0x84>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7b1b      	ldrb	r3, [r3, #12]
 80070b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7adb      	ldrb	r3, [r3, #11]
 80070ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7a9b      	ldrb	r3, [r3, #10]
 80070c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7b5b      	ldrb	r3, [r3, #13]
 80070ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7b9b      	ldrb	r3, [r3, #14]
 80070d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7bdb      	ldrb	r3, [r3, #15]
 80070da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7a5b      	ldrb	r3, [r3, #9]
 80070e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7a1b      	ldrb	r3, [r3, #8]
 80070ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070f4:	4a07      	ldr	r2, [pc, #28]	; (8007114 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80070fa:	e005      	b.n	8007108 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <HAL_MPU_ConfigRegion+0x84>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <HAL_MPU_ConfigRegion+0x84>)
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	e000ed90 	.word	0xe000ed90

08007118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007120:	f7fe f8a8 	bl	8005274 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e316      	b.n	800775e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a66      	ldr	r2, [pc, #408]	; (80072d0 <HAL_DMA_Init+0x1b8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d04a      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a65      	ldr	r2, [pc, #404]	; (80072d4 <HAL_DMA_Init+0x1bc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d045      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a63      	ldr	r2, [pc, #396]	; (80072d8 <HAL_DMA_Init+0x1c0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d040      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a62      	ldr	r2, [pc, #392]	; (80072dc <HAL_DMA_Init+0x1c4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d03b      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a60      	ldr	r2, [pc, #384]	; (80072e0 <HAL_DMA_Init+0x1c8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d036      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a5f      	ldr	r2, [pc, #380]	; (80072e4 <HAL_DMA_Init+0x1cc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d031      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5d      	ldr	r2, [pc, #372]	; (80072e8 <HAL_DMA_Init+0x1d0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d02c      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a5c      	ldr	r2, [pc, #368]	; (80072ec <HAL_DMA_Init+0x1d4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d027      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5a      	ldr	r2, [pc, #360]	; (80072f0 <HAL_DMA_Init+0x1d8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d022      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a59      	ldr	r2, [pc, #356]	; (80072f4 <HAL_DMA_Init+0x1dc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d01d      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a57      	ldr	r2, [pc, #348]	; (80072f8 <HAL_DMA_Init+0x1e0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d018      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a56      	ldr	r2, [pc, #344]	; (80072fc <HAL_DMA_Init+0x1e4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a54      	ldr	r2, [pc, #336]	; (8007300 <HAL_DMA_Init+0x1e8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00e      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a53      	ldr	r2, [pc, #332]	; (8007304 <HAL_DMA_Init+0x1ec>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d009      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a51      	ldr	r2, [pc, #324]	; (8007308 <HAL_DMA_Init+0x1f0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <HAL_DMA_Init+0xb8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a50      	ldr	r2, [pc, #320]	; (800730c <HAL_DMA_Init+0x1f4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d101      	bne.n	80071d4 <HAL_DMA_Init+0xbc>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <HAL_DMA_Init+0xbe>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 813b 	beq.w	8007452 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a37      	ldr	r2, [pc, #220]	; (80072d0 <HAL_DMA_Init+0x1b8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d04a      	beq.n	800728c <HAL_DMA_Init+0x174>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a36      	ldr	r2, [pc, #216]	; (80072d4 <HAL_DMA_Init+0x1bc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d045      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <HAL_DMA_Init+0x1c0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d040      	beq.n	800728c <HAL_DMA_Init+0x174>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a33      	ldr	r2, [pc, #204]	; (80072dc <HAL_DMA_Init+0x1c4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d03b      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <HAL_DMA_Init+0x1c8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d036      	beq.n	800728c <HAL_DMA_Init+0x174>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a30      	ldr	r2, [pc, #192]	; (80072e4 <HAL_DMA_Init+0x1cc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d031      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <HAL_DMA_Init+0x1d0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d02c      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <HAL_DMA_Init+0x1d4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d027      	beq.n	800728c <HAL_DMA_Init+0x174>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2b      	ldr	r2, [pc, #172]	; (80072f0 <HAL_DMA_Init+0x1d8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <HAL_DMA_Init+0x1dc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d01d      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <HAL_DMA_Init+0x1e0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <HAL_DMA_Init+0x174>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a27      	ldr	r2, [pc, #156]	; (80072fc <HAL_DMA_Init+0x1e4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a25      	ldr	r2, [pc, #148]	; (8007300 <HAL_DMA_Init+0x1e8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <HAL_DMA_Init+0x174>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a24      	ldr	r2, [pc, #144]	; (8007304 <HAL_DMA_Init+0x1ec>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a22      	ldr	r2, [pc, #136]	; (8007308 <HAL_DMA_Init+0x1f0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_DMA_Init+0x174>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a21      	ldr	r2, [pc, #132]	; (800730c <HAL_DMA_Init+0x1f4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d108      	bne.n	800729e <HAL_DMA_Init+0x186>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e007      	b.n	80072ae <HAL_DMA_Init+0x196>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072ae:	e02f      	b.n	8007310 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072b0:	f7fd ffe0 	bl	8005274 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d928      	bls.n	8007310 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e246      	b.n	800775e <HAL_DMA_Init+0x646>
 80072d0:	40020010 	.word	0x40020010
 80072d4:	40020028 	.word	0x40020028
 80072d8:	40020040 	.word	0x40020040
 80072dc:	40020058 	.word	0x40020058
 80072e0:	40020070 	.word	0x40020070
 80072e4:	40020088 	.word	0x40020088
 80072e8:	400200a0 	.word	0x400200a0
 80072ec:	400200b8 	.word	0x400200b8
 80072f0:	40020410 	.word	0x40020410
 80072f4:	40020428 	.word	0x40020428
 80072f8:	40020440 	.word	0x40020440
 80072fc:	40020458 	.word	0x40020458
 8007300:	40020470 	.word	0x40020470
 8007304:	40020488 	.word	0x40020488
 8007308:	400204a0 	.word	0x400204a0
 800730c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1c8      	bne.n	80072b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4b83      	ldr	r3, [pc, #524]	; (8007538 <HAL_DMA_Init+0x420>)
 800732a:	4013      	ands	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007336:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007342:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800734e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b04      	cmp	r3, #4
 8007362:	d107      	bne.n	8007374 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	4313      	orrs	r3, r2
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007374:	4b71      	ldr	r3, [pc, #452]	; (800753c <HAL_DMA_Init+0x424>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b71      	ldr	r3, [pc, #452]	; (8007540 <HAL_DMA_Init+0x428>)
 800737a:	4013      	ands	r3, r2
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007380:	d328      	bcc.n	80073d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b28      	cmp	r3, #40	; 0x28
 8007388:	d903      	bls.n	8007392 <HAL_DMA_Init+0x27a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b2e      	cmp	r3, #46	; 0x2e
 8007390:	d917      	bls.n	80073c2 <HAL_DMA_Init+0x2aa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b3e      	cmp	r3, #62	; 0x3e
 8007398:	d903      	bls.n	80073a2 <HAL_DMA_Init+0x28a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b42      	cmp	r3, #66	; 0x42
 80073a0:	d90f      	bls.n	80073c2 <HAL_DMA_Init+0x2aa>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b46      	cmp	r3, #70	; 0x46
 80073a8:	d903      	bls.n	80073b2 <HAL_DMA_Init+0x29a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b48      	cmp	r3, #72	; 0x48
 80073b0:	d907      	bls.n	80073c2 <HAL_DMA_Init+0x2aa>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b4e      	cmp	r3, #78	; 0x4e
 80073b8:	d905      	bls.n	80073c6 <HAL_DMA_Init+0x2ae>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b52      	cmp	r3, #82	; 0x52
 80073c0:	d801      	bhi.n	80073c6 <HAL_DMA_Init+0x2ae>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_DMA_Init+0x2b0>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d117      	bne.n	800742e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fddb 	bl	8008fcc <DMA_CheckFifoParam>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2240      	movs	r2, #64	; 0x40
 8007420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e197      	b.n	800775e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fd16 	bl	8008e68 <DMA_CalcBaseAndBitshift>
 800743c:	4603      	mov	r3, r0
 800743e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	223f      	movs	r2, #63	; 0x3f
 800744a:	409a      	lsls	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	609a      	str	r2, [r3, #8]
 8007450:	e0cd      	b.n	80075ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3b      	ldr	r2, [pc, #236]	; (8007544 <HAL_DMA_Init+0x42c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a39      	ldr	r2, [pc, #228]	; (8007548 <HAL_DMA_Init+0x430>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a38      	ldr	r2, [pc, #224]	; (800754c <HAL_DMA_Init+0x434>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a36      	ldr	r2, [pc, #216]	; (8007550 <HAL_DMA_Init+0x438>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a35      	ldr	r2, [pc, #212]	; (8007554 <HAL_DMA_Init+0x43c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a33      	ldr	r2, [pc, #204]	; (8007558 <HAL_DMA_Init+0x440>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a32      	ldr	r2, [pc, #200]	; (800755c <HAL_DMA_Init+0x444>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_Init+0x38a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a30      	ldr	r2, [pc, #192]	; (8007560 <HAL_DMA_Init+0x448>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <HAL_DMA_Init+0x38e>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <HAL_DMA_Init+0x390>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8097 	beq.w	80075dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a24      	ldr	r2, [pc, #144]	; (8007544 <HAL_DMA_Init+0x42c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d021      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a22      	ldr	r2, [pc, #136]	; (8007548 <HAL_DMA_Init+0x430>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01c      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_DMA_Init+0x434>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d017      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <HAL_DMA_Init+0x438>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d012      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <HAL_DMA_Init+0x43c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00d      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <HAL_DMA_Init+0x440>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d008      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1b      	ldr	r2, [pc, #108]	; (800755c <HAL_DMA_Init+0x444>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <HAL_DMA_Init+0x3e4>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_DMA_Init+0x448>)
 80074fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4b13      	ldr	r3, [pc, #76]	; (8007564 <HAL_DMA_Init+0x44c>)
 8007518:	4013      	ands	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d021      	beq.n	8007568 <HAL_DMA_Init+0x450>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d102      	bne.n	8007532 <HAL_DMA_Init+0x41a>
 800752c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007530:	e01b      	b.n	800756a <HAL_DMA_Init+0x452>
 8007532:	2300      	movs	r3, #0
 8007534:	e019      	b.n	800756a <HAL_DMA_Init+0x452>
 8007536:	bf00      	nop
 8007538:	fe10803f 	.word	0xfe10803f
 800753c:	5c001000 	.word	0x5c001000
 8007540:	ffff0000 	.word	0xffff0000
 8007544:	58025408 	.word	0x58025408
 8007548:	5802541c 	.word	0x5802541c
 800754c:	58025430 	.word	0x58025430
 8007550:	58025444 	.word	0x58025444
 8007554:	58025458 	.word	0x58025458
 8007558:	5802546c 	.word	0x5802546c
 800755c:	58025480 	.word	0x58025480
 8007560:	58025494 	.word	0x58025494
 8007564:	fffe000f 	.word	0xfffe000f
 8007568:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	68d2      	ldr	r2, [r2, #12]
 800756e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007598:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	4b6e      	ldr	r3, [pc, #440]	; (8007768 <HAL_DMA_Init+0x650>)
 80075b0:	4413      	add	r3, r2
 80075b2:	4a6e      	ldr	r2, [pc, #440]	; (800776c <HAL_DMA_Init+0x654>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	009a      	lsls	r2, r3, #2
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fc51 	bl	8008e68 <DMA_CalcBaseAndBitshift>
 80075c6:	4603      	mov	r3, r0
 80075c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2201      	movs	r2, #1
 80075d4:	409a      	lsls	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	e008      	b.n	80075ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2240      	movs	r2, #64	; 0x40
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2203      	movs	r2, #3
 80075e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e0b7      	b.n	800775e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a5f      	ldr	r2, [pc, #380]	; (8007770 <HAL_DMA_Init+0x658>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d072      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5d      	ldr	r2, [pc, #372]	; (8007774 <HAL_DMA_Init+0x65c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d06d      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a5c      	ldr	r2, [pc, #368]	; (8007778 <HAL_DMA_Init+0x660>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d068      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a5a      	ldr	r2, [pc, #360]	; (800777c <HAL_DMA_Init+0x664>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d063      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a59      	ldr	r2, [pc, #356]	; (8007780 <HAL_DMA_Init+0x668>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d05e      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a57      	ldr	r2, [pc, #348]	; (8007784 <HAL_DMA_Init+0x66c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d059      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a56      	ldr	r2, [pc, #344]	; (8007788 <HAL_DMA_Init+0x670>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d054      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a54      	ldr	r2, [pc, #336]	; (800778c <HAL_DMA_Init+0x674>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d04f      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a53      	ldr	r2, [pc, #332]	; (8007790 <HAL_DMA_Init+0x678>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d04a      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a51      	ldr	r2, [pc, #324]	; (8007794 <HAL_DMA_Init+0x67c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d045      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a50      	ldr	r2, [pc, #320]	; (8007798 <HAL_DMA_Init+0x680>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d040      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a4e      	ldr	r2, [pc, #312]	; (800779c <HAL_DMA_Init+0x684>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d03b      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4d      	ldr	r2, [pc, #308]	; (80077a0 <HAL_DMA_Init+0x688>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d036      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a4b      	ldr	r2, [pc, #300]	; (80077a4 <HAL_DMA_Init+0x68c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d031      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a4a      	ldr	r2, [pc, #296]	; (80077a8 <HAL_DMA_Init+0x690>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d02c      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a48      	ldr	r2, [pc, #288]	; (80077ac <HAL_DMA_Init+0x694>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d027      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a47      	ldr	r2, [pc, #284]	; (80077b0 <HAL_DMA_Init+0x698>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d022      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a45      	ldr	r2, [pc, #276]	; (80077b4 <HAL_DMA_Init+0x69c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01d      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a44      	ldr	r2, [pc, #272]	; (80077b8 <HAL_DMA_Init+0x6a0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d018      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a42      	ldr	r2, [pc, #264]	; (80077bc <HAL_DMA_Init+0x6a4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d013      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a41      	ldr	r2, [pc, #260]	; (80077c0 <HAL_DMA_Init+0x6a8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00e      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a3f      	ldr	r2, [pc, #252]	; (80077c4 <HAL_DMA_Init+0x6ac>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d009      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a3e      	ldr	r2, [pc, #248]	; (80077c8 <HAL_DMA_Init+0x6b0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d004      	beq.n	80076de <HAL_DMA_Init+0x5c6>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a3c      	ldr	r2, [pc, #240]	; (80077cc <HAL_DMA_Init+0x6b4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d101      	bne.n	80076e2 <HAL_DMA_Init+0x5ca>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <HAL_DMA_Init+0x5cc>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d032      	beq.n	800774e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fceb 	bl	80090c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d102      	bne.n	80076fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007710:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d010      	beq.n	800773c <HAL_DMA_Init+0x624>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b08      	cmp	r3, #8
 8007720:	d80c      	bhi.n	800773c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fd68 	bl	80091f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	e008      	b.n	800774e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	a7fdabf8 	.word	0xa7fdabf8
 800776c:	cccccccd 	.word	0xcccccccd
 8007770:	40020010 	.word	0x40020010
 8007774:	40020028 	.word	0x40020028
 8007778:	40020040 	.word	0x40020040
 800777c:	40020058 	.word	0x40020058
 8007780:	40020070 	.word	0x40020070
 8007784:	40020088 	.word	0x40020088
 8007788:	400200a0 	.word	0x400200a0
 800778c:	400200b8 	.word	0x400200b8
 8007790:	40020410 	.word	0x40020410
 8007794:	40020428 	.word	0x40020428
 8007798:	40020440 	.word	0x40020440
 800779c:	40020458 	.word	0x40020458
 80077a0:	40020470 	.word	0x40020470
 80077a4:	40020488 	.word	0x40020488
 80077a8:	400204a0 	.word	0x400204a0
 80077ac:	400204b8 	.word	0x400204b8
 80077b0:	58025408 	.word	0x58025408
 80077b4:	5802541c 	.word	0x5802541c
 80077b8:	58025430 	.word	0x58025430
 80077bc:	58025444 	.word	0x58025444
 80077c0:	58025458 	.word	0x58025458
 80077c4:	5802546c 	.word	0x5802546c
 80077c8:	58025480 	.word	0x58025480
 80077cc:	58025494 	.word	0x58025494

080077d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e226      	b.n	8007c3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_DMA_Start_IT+0x2a>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e21f      	b.n	8007c3a <HAL_DMA_Start_IT+0x46a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 820a 	bne.w	8007c24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a68      	ldr	r2, [pc, #416]	; (80079c4 <HAL_DMA_Start_IT+0x1f4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d04a      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a66      	ldr	r2, [pc, #408]	; (80079c8 <HAL_DMA_Start_IT+0x1f8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d045      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a65      	ldr	r2, [pc, #404]	; (80079cc <HAL_DMA_Start_IT+0x1fc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d040      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a63      	ldr	r2, [pc, #396]	; (80079d0 <HAL_DMA_Start_IT+0x200>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d03b      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a62      	ldr	r2, [pc, #392]	; (80079d4 <HAL_DMA_Start_IT+0x204>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d036      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a60      	ldr	r2, [pc, #384]	; (80079d8 <HAL_DMA_Start_IT+0x208>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d031      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a5f      	ldr	r2, [pc, #380]	; (80079dc <HAL_DMA_Start_IT+0x20c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d02c      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a5d      	ldr	r2, [pc, #372]	; (80079e0 <HAL_DMA_Start_IT+0x210>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a5c      	ldr	r2, [pc, #368]	; (80079e4 <HAL_DMA_Start_IT+0x214>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d022      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5a      	ldr	r2, [pc, #360]	; (80079e8 <HAL_DMA_Start_IT+0x218>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01d      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a59      	ldr	r2, [pc, #356]	; (80079ec <HAL_DMA_Start_IT+0x21c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a57      	ldr	r2, [pc, #348]	; (80079f0 <HAL_DMA_Start_IT+0x220>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a56      	ldr	r2, [pc, #344]	; (80079f4 <HAL_DMA_Start_IT+0x224>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a54      	ldr	r2, [pc, #336]	; (80079f8 <HAL_DMA_Start_IT+0x228>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a53      	ldr	r2, [pc, #332]	; (80079fc <HAL_DMA_Start_IT+0x22c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_DMA_Start_IT+0xee>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a51      	ldr	r2, [pc, #324]	; (8007a00 <HAL_DMA_Start_IT+0x230>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d108      	bne.n	80078d0 <HAL_DMA_Start_IT+0x100>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0201 	bic.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e007      	b.n	80078e0 <HAL_DMA_Start_IT+0x110>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 f912 	bl	8008b10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a34      	ldr	r2, [pc, #208]	; (80079c4 <HAL_DMA_Start_IT+0x1f4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04a      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a33      	ldr	r2, [pc, #204]	; (80079c8 <HAL_DMA_Start_IT+0x1f8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d045      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a31      	ldr	r2, [pc, #196]	; (80079cc <HAL_DMA_Start_IT+0x1fc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d040      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a30      	ldr	r2, [pc, #192]	; (80079d0 <HAL_DMA_Start_IT+0x200>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d03b      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2e      	ldr	r2, [pc, #184]	; (80079d4 <HAL_DMA_Start_IT+0x204>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d036      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2d      	ldr	r2, [pc, #180]	; (80079d8 <HAL_DMA_Start_IT+0x208>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d031      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2b      	ldr	r2, [pc, #172]	; (80079dc <HAL_DMA_Start_IT+0x20c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02c      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <HAL_DMA_Start_IT+0x210>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d027      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a28      	ldr	r2, [pc, #160]	; (80079e4 <HAL_DMA_Start_IT+0x214>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a27      	ldr	r2, [pc, #156]	; (80079e8 <HAL_DMA_Start_IT+0x218>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a25      	ldr	r2, [pc, #148]	; (80079ec <HAL_DMA_Start_IT+0x21c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a24      	ldr	r2, [pc, #144]	; (80079f0 <HAL_DMA_Start_IT+0x220>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a22      	ldr	r2, [pc, #136]	; (80079f4 <HAL_DMA_Start_IT+0x224>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a21      	ldr	r2, [pc, #132]	; (80079f8 <HAL_DMA_Start_IT+0x228>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <HAL_DMA_Start_IT+0x22c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_DMA_Start_IT+0x1bc>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1e      	ldr	r2, [pc, #120]	; (8007a00 <HAL_DMA_Start_IT+0x230>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d101      	bne.n	8007990 <HAL_DMA_Start_IT+0x1c0>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_DMA_Start_IT+0x1c2>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d036      	beq.n	8007a04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f023 021e 	bic.w	r2, r3, #30
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0216 	orr.w	r2, r2, #22
 80079a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d03e      	beq.n	8007a30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0208 	orr.w	r2, r2, #8
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e035      	b.n	8007a30 <HAL_DMA_Start_IT+0x260>
 80079c4:	40020010 	.word	0x40020010
 80079c8:	40020028 	.word	0x40020028
 80079cc:	40020040 	.word	0x40020040
 80079d0:	40020058 	.word	0x40020058
 80079d4:	40020070 	.word	0x40020070
 80079d8:	40020088 	.word	0x40020088
 80079dc:	400200a0 	.word	0x400200a0
 80079e0:	400200b8 	.word	0x400200b8
 80079e4:	40020410 	.word	0x40020410
 80079e8:	40020428 	.word	0x40020428
 80079ec:	40020440 	.word	0x40020440
 80079f0:	40020458 	.word	0x40020458
 80079f4:	40020470 	.word	0x40020470
 80079f8:	40020488 	.word	0x40020488
 80079fc:	400204a0 	.word	0x400204a0
 8007a00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f023 020e 	bic.w	r2, r3, #14
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 020a 	orr.w	r2, r2, #10
 8007a16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0204 	orr.w	r2, r2, #4
 8007a2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a83      	ldr	r2, [pc, #524]	; (8007c44 <HAL_DMA_Start_IT+0x474>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d072      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a82      	ldr	r2, [pc, #520]	; (8007c48 <HAL_DMA_Start_IT+0x478>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d06d      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a80      	ldr	r2, [pc, #512]	; (8007c4c <HAL_DMA_Start_IT+0x47c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d068      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7f      	ldr	r2, [pc, #508]	; (8007c50 <HAL_DMA_Start_IT+0x480>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d063      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7d      	ldr	r2, [pc, #500]	; (8007c54 <HAL_DMA_Start_IT+0x484>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d05e      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a7c      	ldr	r2, [pc, #496]	; (8007c58 <HAL_DMA_Start_IT+0x488>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d059      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a7a      	ldr	r2, [pc, #488]	; (8007c5c <HAL_DMA_Start_IT+0x48c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d054      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a79      	ldr	r2, [pc, #484]	; (8007c60 <HAL_DMA_Start_IT+0x490>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d04f      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a77      	ldr	r2, [pc, #476]	; (8007c64 <HAL_DMA_Start_IT+0x494>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d04a      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a76      	ldr	r2, [pc, #472]	; (8007c68 <HAL_DMA_Start_IT+0x498>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d045      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a74      	ldr	r2, [pc, #464]	; (8007c6c <HAL_DMA_Start_IT+0x49c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d040      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a73      	ldr	r2, [pc, #460]	; (8007c70 <HAL_DMA_Start_IT+0x4a0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d03b      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a71      	ldr	r2, [pc, #452]	; (8007c74 <HAL_DMA_Start_IT+0x4a4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d036      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a70      	ldr	r2, [pc, #448]	; (8007c78 <HAL_DMA_Start_IT+0x4a8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d031      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6e      	ldr	r2, [pc, #440]	; (8007c7c <HAL_DMA_Start_IT+0x4ac>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02c      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6d      	ldr	r2, [pc, #436]	; (8007c80 <HAL_DMA_Start_IT+0x4b0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d027      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a6b      	ldr	r2, [pc, #428]	; (8007c84 <HAL_DMA_Start_IT+0x4b4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d022      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a6a      	ldr	r2, [pc, #424]	; (8007c88 <HAL_DMA_Start_IT+0x4b8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d01d      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a68      	ldr	r2, [pc, #416]	; (8007c8c <HAL_DMA_Start_IT+0x4bc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d018      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a67      	ldr	r2, [pc, #412]	; (8007c90 <HAL_DMA_Start_IT+0x4c0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d013      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a65      	ldr	r2, [pc, #404]	; (8007c94 <HAL_DMA_Start_IT+0x4c4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00e      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a64      	ldr	r2, [pc, #400]	; (8007c98 <HAL_DMA_Start_IT+0x4c8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d009      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a62      	ldr	r2, [pc, #392]	; (8007c9c <HAL_DMA_Start_IT+0x4cc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <HAL_DMA_Start_IT+0x350>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a61      	ldr	r2, [pc, #388]	; (8007ca0 <HAL_DMA_Start_IT+0x4d0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d101      	bne.n	8007b24 <HAL_DMA_Start_IT+0x354>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <HAL_DMA_Start_IT+0x356>
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01a      	beq.n	8007b60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d007      	beq.n	8007b60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a37      	ldr	r2, [pc, #220]	; (8007c44 <HAL_DMA_Start_IT+0x474>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d04a      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a36      	ldr	r2, [pc, #216]	; (8007c48 <HAL_DMA_Start_IT+0x478>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d045      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a34      	ldr	r2, [pc, #208]	; (8007c4c <HAL_DMA_Start_IT+0x47c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d040      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a33      	ldr	r2, [pc, #204]	; (8007c50 <HAL_DMA_Start_IT+0x480>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d03b      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a31      	ldr	r2, [pc, #196]	; (8007c54 <HAL_DMA_Start_IT+0x484>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d036      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a30      	ldr	r2, [pc, #192]	; (8007c58 <HAL_DMA_Start_IT+0x488>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d031      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a2e      	ldr	r2, [pc, #184]	; (8007c5c <HAL_DMA_Start_IT+0x48c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d02c      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2d      	ldr	r2, [pc, #180]	; (8007c60 <HAL_DMA_Start_IT+0x490>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d027      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a2b      	ldr	r2, [pc, #172]	; (8007c64 <HAL_DMA_Start_IT+0x494>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d022      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <HAL_DMA_Start_IT+0x498>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d01d      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a28      	ldr	r2, [pc, #160]	; (8007c6c <HAL_DMA_Start_IT+0x49c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d018      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a27      	ldr	r2, [pc, #156]	; (8007c70 <HAL_DMA_Start_IT+0x4a0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a25      	ldr	r2, [pc, #148]	; (8007c74 <HAL_DMA_Start_IT+0x4a4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00e      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a24      	ldr	r2, [pc, #144]	; (8007c78 <HAL_DMA_Start_IT+0x4a8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a22      	ldr	r2, [pc, #136]	; (8007c7c <HAL_DMA_Start_IT+0x4ac>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_DMA_Start_IT+0x430>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a21      	ldr	r2, [pc, #132]	; (8007c80 <HAL_DMA_Start_IT+0x4b0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d108      	bne.n	8007c12 <HAL_DMA_Start_IT+0x442>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e012      	b.n	8007c38 <HAL_DMA_Start_IT+0x468>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e009      	b.n	8007c38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
 8007c84:	58025408 	.word	0x58025408
 8007c88:	5802541c 	.word	0x5802541c
 8007c8c:	58025430 	.word	0x58025430
 8007c90:	58025444 	.word	0x58025444
 8007c94:	58025458 	.word	0x58025458
 8007c98:	5802546c 	.word	0x5802546c
 8007c9c:	58025480 	.word	0x58025480
 8007ca0:	58025494 	.word	0x58025494

08007ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cb0:	4b67      	ldr	r3, [pc, #412]	; (8007e50 <HAL_DMA_IRQHandler+0x1ac>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a67      	ldr	r2, [pc, #412]	; (8007e54 <HAL_DMA_IRQHandler+0x1b0>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	0a9b      	lsrs	r3, r3, #10
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a5f      	ldr	r2, [pc, #380]	; (8007e58 <HAL_DMA_IRQHandler+0x1b4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d04a      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a5d      	ldr	r2, [pc, #372]	; (8007e5c <HAL_DMA_IRQHandler+0x1b8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d045      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a5c      	ldr	r2, [pc, #368]	; (8007e60 <HAL_DMA_IRQHandler+0x1bc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d040      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a5a      	ldr	r2, [pc, #360]	; (8007e64 <HAL_DMA_IRQHandler+0x1c0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d03b      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a59      	ldr	r2, [pc, #356]	; (8007e68 <HAL_DMA_IRQHandler+0x1c4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d036      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a57      	ldr	r2, [pc, #348]	; (8007e6c <HAL_DMA_IRQHandler+0x1c8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d031      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a56      	ldr	r2, [pc, #344]	; (8007e70 <HAL_DMA_IRQHandler+0x1cc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d02c      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a54      	ldr	r2, [pc, #336]	; (8007e74 <HAL_DMA_IRQHandler+0x1d0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d027      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a53      	ldr	r2, [pc, #332]	; (8007e78 <HAL_DMA_IRQHandler+0x1d4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d022      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a51      	ldr	r2, [pc, #324]	; (8007e7c <HAL_DMA_IRQHandler+0x1d8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d01d      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a50      	ldr	r2, [pc, #320]	; (8007e80 <HAL_DMA_IRQHandler+0x1dc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d018      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a4e      	ldr	r2, [pc, #312]	; (8007e84 <HAL_DMA_IRQHandler+0x1e0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a4d      	ldr	r2, [pc, #308]	; (8007e88 <HAL_DMA_IRQHandler+0x1e4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a4b      	ldr	r2, [pc, #300]	; (8007e8c <HAL_DMA_IRQHandler+0x1e8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a4a      	ldr	r2, [pc, #296]	; (8007e90 <HAL_DMA_IRQHandler+0x1ec>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_DMA_IRQHandler+0xd2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a48      	ldr	r2, [pc, #288]	; (8007e94 <HAL_DMA_IRQHandler+0x1f0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d101      	bne.n	8007d7a <HAL_DMA_IRQHandler+0xd6>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <HAL_DMA_IRQHandler+0xd8>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 842b 	beq.w	80085d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80a2 	beq.w	8007edc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2e      	ldr	r2, [pc, #184]	; (8007e58 <HAL_DMA_IRQHandler+0x1b4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d04a      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2d      	ldr	r2, [pc, #180]	; (8007e5c <HAL_DMA_IRQHandler+0x1b8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d045      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a2b      	ldr	r2, [pc, #172]	; (8007e60 <HAL_DMA_IRQHandler+0x1bc>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d040      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a2a      	ldr	r2, [pc, #168]	; (8007e64 <HAL_DMA_IRQHandler+0x1c0>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d03b      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a28      	ldr	r2, [pc, #160]	; (8007e68 <HAL_DMA_IRQHandler+0x1c4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d036      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <HAL_DMA_IRQHandler+0x1c8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d031      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <HAL_DMA_IRQHandler+0x1cc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d02c      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a24      	ldr	r2, [pc, #144]	; (8007e74 <HAL_DMA_IRQHandler+0x1d0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d027      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <HAL_DMA_IRQHandler+0x1d4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d022      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a21      	ldr	r2, [pc, #132]	; (8007e7c <HAL_DMA_IRQHandler+0x1d8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d01d      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <HAL_DMA_IRQHandler+0x1dc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d018      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <HAL_DMA_IRQHandler+0x1e0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <HAL_DMA_IRQHandler+0x1e4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00e      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1b      	ldr	r2, [pc, #108]	; (8007e8c <HAL_DMA_IRQHandler+0x1e8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a19      	ldr	r2, [pc, #100]	; (8007e90 <HAL_DMA_IRQHandler+0x1ec>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x194>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <HAL_DMA_IRQHandler+0x1f0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d12f      	bne.n	8007e98 <HAL_DMA_IRQHandler+0x1f4>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bf14      	ite	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	2300      	moveq	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	e02e      	b.n	8007eac <HAL_DMA_IRQHandler+0x208>
 8007e4e:	bf00      	nop
 8007e50:	20000020 	.word	0x20000020
 8007e54:	1b4e81b5 	.word	0x1b4e81b5
 8007e58:	40020010 	.word	0x40020010
 8007e5c:	40020028 	.word	0x40020028
 8007e60:	40020040 	.word	0x40020040
 8007e64:	40020058 	.word	0x40020058
 8007e68:	40020070 	.word	0x40020070
 8007e6c:	40020088 	.word	0x40020088
 8007e70:	400200a0 	.word	0x400200a0
 8007e74:	400200b8 	.word	0x400200b8
 8007e78:	40020410 	.word	0x40020410
 8007e7c:	40020428 	.word	0x40020428
 8007e80:	40020440 	.word	0x40020440
 8007e84:	40020458 	.word	0x40020458
 8007e88:	40020470 	.word	0x40020470
 8007e8c:	40020488 	.word	0x40020488
 8007e90:	400204a0 	.word	0x400204a0
 8007e94:	400204b8 	.word	0x400204b8
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bf14      	ite	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0204 	bic.w	r2, r2, #4
 8007ebe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	2208      	movs	r2, #8
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed4:	f043 0201 	orr.w	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d06e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a69      	ldr	r2, [pc, #420]	; (800809c <HAL_DMA_IRQHandler+0x3f8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d04a      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a67      	ldr	r2, [pc, #412]	; (80080a0 <HAL_DMA_IRQHandler+0x3fc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d045      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a66      	ldr	r2, [pc, #408]	; (80080a4 <HAL_DMA_IRQHandler+0x400>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d040      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a64      	ldr	r2, [pc, #400]	; (80080a8 <HAL_DMA_IRQHandler+0x404>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d03b      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a63      	ldr	r2, [pc, #396]	; (80080ac <HAL_DMA_IRQHandler+0x408>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d036      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a61      	ldr	r2, [pc, #388]	; (80080b0 <HAL_DMA_IRQHandler+0x40c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d031      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a60      	ldr	r2, [pc, #384]	; (80080b4 <HAL_DMA_IRQHandler+0x410>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d02c      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a5e      	ldr	r2, [pc, #376]	; (80080b8 <HAL_DMA_IRQHandler+0x414>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d027      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a5d      	ldr	r2, [pc, #372]	; (80080bc <HAL_DMA_IRQHandler+0x418>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d022      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a5b      	ldr	r2, [pc, #364]	; (80080c0 <HAL_DMA_IRQHandler+0x41c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01d      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a5a      	ldr	r2, [pc, #360]	; (80080c4 <HAL_DMA_IRQHandler+0x420>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d018      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a58      	ldr	r2, [pc, #352]	; (80080c8 <HAL_DMA_IRQHandler+0x424>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a57      	ldr	r2, [pc, #348]	; (80080cc <HAL_DMA_IRQHandler+0x428>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00e      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a55      	ldr	r2, [pc, #340]	; (80080d0 <HAL_DMA_IRQHandler+0x42c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d009      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a54      	ldr	r2, [pc, #336]	; (80080d4 <HAL_DMA_IRQHandler+0x430>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x2ee>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a52      	ldr	r2, [pc, #328]	; (80080d8 <HAL_DMA_IRQHandler+0x434>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10a      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0x304>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	e003      	b.n	8007fb0 <HAL_DMA_IRQHandler+0x30c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	f043 0202 	orr.w	r2, r3, #2
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	2204      	movs	r2, #4
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 808f 	beq.w	8008104 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a2c      	ldr	r2, [pc, #176]	; (800809c <HAL_DMA_IRQHandler+0x3f8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d04a      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <HAL_DMA_IRQHandler+0x3fc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d045      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <HAL_DMA_IRQHandler+0x400>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d040      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a27      	ldr	r2, [pc, #156]	; (80080a8 <HAL_DMA_IRQHandler+0x404>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d03b      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a26      	ldr	r2, [pc, #152]	; (80080ac <HAL_DMA_IRQHandler+0x408>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d036      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a24      	ldr	r2, [pc, #144]	; (80080b0 <HAL_DMA_IRQHandler+0x40c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d031      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <HAL_DMA_IRQHandler+0x410>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d02c      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a21      	ldr	r2, [pc, #132]	; (80080b8 <HAL_DMA_IRQHandler+0x414>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d027      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a20      	ldr	r2, [pc, #128]	; (80080bc <HAL_DMA_IRQHandler+0x418>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d022      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <HAL_DMA_IRQHandler+0x41c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01d      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <HAL_DMA_IRQHandler+0x420>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d018      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1b      	ldr	r2, [pc, #108]	; (80080c8 <HAL_DMA_IRQHandler+0x424>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1a      	ldr	r2, [pc, #104]	; (80080cc <HAL_DMA_IRQHandler+0x428>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00e      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_DMA_IRQHandler+0x42c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d009      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a17      	ldr	r2, [pc, #92]	; (80080d4 <HAL_DMA_IRQHandler+0x430>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d004      	beq.n	8008086 <HAL_DMA_IRQHandler+0x3e2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <HAL_DMA_IRQHandler+0x434>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d12a      	bne.n	80080dc <HAL_DMA_IRQHandler+0x438>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	bf14      	ite	ne
 8008094:	2301      	movne	r3, #1
 8008096:	2300      	moveq	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	e023      	b.n	80080e4 <HAL_DMA_IRQHandler+0x440>
 800809c:	40020010 	.word	0x40020010
 80080a0:	40020028 	.word	0x40020028
 80080a4:	40020040 	.word	0x40020040
 80080a8:	40020058 	.word	0x40020058
 80080ac:	40020070 	.word	0x40020070
 80080b0:	40020088 	.word	0x40020088
 80080b4:	400200a0 	.word	0x400200a0
 80080b8:	400200b8 	.word	0x400200b8
 80080bc:	40020410 	.word	0x40020410
 80080c0:	40020428 	.word	0x40020428
 80080c4:	40020440 	.word	0x40020440
 80080c8:	40020458 	.word	0x40020458
 80080cc:	40020470 	.word	0x40020470
 80080d0:	40020488 	.word	0x40020488
 80080d4:	400204a0 	.word	0x400204a0
 80080d8:	400204b8 	.word	0x400204b8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00d      	beq.n	8008104 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2204      	movs	r2, #4
 80080f2:	409a      	lsls	r2, r3
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fc:	f043 0204 	orr.w	r2, r3, #4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2210      	movs	r2, #16
 800810e:	409a      	lsls	r2, r3
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80a6 	beq.w	8008266 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a85      	ldr	r2, [pc, #532]	; (8008334 <HAL_DMA_IRQHandler+0x690>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d04a      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a83      	ldr	r2, [pc, #524]	; (8008338 <HAL_DMA_IRQHandler+0x694>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d045      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a82      	ldr	r2, [pc, #520]	; (800833c <HAL_DMA_IRQHandler+0x698>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d040      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a80      	ldr	r2, [pc, #512]	; (8008340 <HAL_DMA_IRQHandler+0x69c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d03b      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a7f      	ldr	r2, [pc, #508]	; (8008344 <HAL_DMA_IRQHandler+0x6a0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d036      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a7d      	ldr	r2, [pc, #500]	; (8008348 <HAL_DMA_IRQHandler+0x6a4>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d031      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a7c      	ldr	r2, [pc, #496]	; (800834c <HAL_DMA_IRQHandler+0x6a8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d02c      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a7a      	ldr	r2, [pc, #488]	; (8008350 <HAL_DMA_IRQHandler+0x6ac>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d027      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a79      	ldr	r2, [pc, #484]	; (8008354 <HAL_DMA_IRQHandler+0x6b0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d022      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a77      	ldr	r2, [pc, #476]	; (8008358 <HAL_DMA_IRQHandler+0x6b4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01d      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a76      	ldr	r2, [pc, #472]	; (800835c <HAL_DMA_IRQHandler+0x6b8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d018      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a74      	ldr	r2, [pc, #464]	; (8008360 <HAL_DMA_IRQHandler+0x6bc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a73      	ldr	r2, [pc, #460]	; (8008364 <HAL_DMA_IRQHandler+0x6c0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00e      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a71      	ldr	r2, [pc, #452]	; (8008368 <HAL_DMA_IRQHandler+0x6c4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d009      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a70      	ldr	r2, [pc, #448]	; (800836c <HAL_DMA_IRQHandler+0x6c8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <HAL_DMA_IRQHandler+0x516>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a6e      	ldr	r2, [pc, #440]	; (8008370 <HAL_DMA_IRQHandler+0x6cc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d10a      	bne.n	80081d0 <HAL_DMA_IRQHandler+0x52c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e009      	b.n	80081e4 <HAL_DMA_IRQHandler+0x540>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bf14      	ite	ne
 80081de:	2301      	movne	r3, #1
 80081e0:	2300      	moveq	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d03e      	beq.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ec:	f003 031f 	and.w	r3, r3, #31
 80081f0:	2210      	movs	r2, #16
 80081f2:	409a      	lsls	r2, r3
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d018      	beq.n	8008238 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d108      	bne.n	8008226 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d024      	beq.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
 8008224:	e01f      	b.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01b      	beq.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	e016      	b.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d107      	bne.n	8008256 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0208 	bic.w	r2, r2, #8
 8008254:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2220      	movs	r2, #32
 8008270:	409a      	lsls	r2, r3
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	4013      	ands	r3, r2
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8110 	beq.w	800849c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <HAL_DMA_IRQHandler+0x690>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d04a      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <HAL_DMA_IRQHandler+0x694>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d045      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a29      	ldr	r2, [pc, #164]	; (800833c <HAL_DMA_IRQHandler+0x698>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d040      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a28      	ldr	r2, [pc, #160]	; (8008340 <HAL_DMA_IRQHandler+0x69c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d03b      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a26      	ldr	r2, [pc, #152]	; (8008344 <HAL_DMA_IRQHandler+0x6a0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d036      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a25      	ldr	r2, [pc, #148]	; (8008348 <HAL_DMA_IRQHandler+0x6a4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d031      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a23      	ldr	r2, [pc, #140]	; (800834c <HAL_DMA_IRQHandler+0x6a8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d02c      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a22      	ldr	r2, [pc, #136]	; (8008350 <HAL_DMA_IRQHandler+0x6ac>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d027      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a20      	ldr	r2, [pc, #128]	; (8008354 <HAL_DMA_IRQHandler+0x6b0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d022      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <HAL_DMA_IRQHandler+0x6b4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d01d      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1d      	ldr	r2, [pc, #116]	; (800835c <HAL_DMA_IRQHandler+0x6b8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d018      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_DMA_IRQHandler+0x6bc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_DMA_IRQHandler+0x6c0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_DMA_IRQHandler+0x6c4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <HAL_DMA_IRQHandler+0x6c8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_DMA_IRQHandler+0x678>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a16      	ldr	r2, [pc, #88]	; (8008370 <HAL_DMA_IRQHandler+0x6cc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d12b      	bne.n	8008374 <HAL_DMA_IRQHandler+0x6d0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b00      	cmp	r3, #0
 8008328:	bf14      	ite	ne
 800832a:	2301      	movne	r3, #1
 800832c:	2300      	moveq	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	e02a      	b.n	8008388 <HAL_DMA_IRQHandler+0x6e4>
 8008332:	bf00      	nop
 8008334:	40020010 	.word	0x40020010
 8008338:	40020028 	.word	0x40020028
 800833c:	40020040 	.word	0x40020040
 8008340:	40020058 	.word	0x40020058
 8008344:	40020070 	.word	0x40020070
 8008348:	40020088 	.word	0x40020088
 800834c:	400200a0 	.word	0x400200a0
 8008350:	400200b8 	.word	0x400200b8
 8008354:	40020410 	.word	0x40020410
 8008358:	40020428 	.word	0x40020428
 800835c:	40020440 	.word	0x40020440
 8008360:	40020458 	.word	0x40020458
 8008364:	40020470 	.word	0x40020470
 8008368:	40020488 	.word	0x40020488
 800836c:	400204a0 	.word	0x400204a0
 8008370:	400204b8 	.word	0x400204b8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8087 	beq.w	800849c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	2220      	movs	r2, #32
 8008398:	409a      	lsls	r2, r3
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d139      	bne.n	800841e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0216 	bic.w	r2, r2, #22
 80083b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695a      	ldr	r2, [r3, #20]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <HAL_DMA_IRQHandler+0x736>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0208 	bic.w	r2, r2, #8
 80083e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	223f      	movs	r2, #63	; 0x3f
 80083f4:	409a      	lsls	r2, r3
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 834a 	beq.w	8008aa8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
          }
          return;
 800841c:	e344      	b.n	8008aa8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d018      	beq.n	800845e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d108      	bne.n	800844c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843e:	2b00      	cmp	r3, #0
 8008440:	d02c      	beq.n	800849c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	e027      	b.n	800849c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d023      	beq.n	800849c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	e01e      	b.n	800849c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10f      	bne.n	800848c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0210 	bic.w	r2, r2, #16
 800847a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8306 	beq.w	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8088 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2204      	movs	r2, #4
 80084b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a7a      	ldr	r2, [pc, #488]	; (80086ac <HAL_DMA_IRQHandler+0xa08>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d04a      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a79      	ldr	r2, [pc, #484]	; (80086b0 <HAL_DMA_IRQHandler+0xa0c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d045      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a77      	ldr	r2, [pc, #476]	; (80086b4 <HAL_DMA_IRQHandler+0xa10>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d040      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a76      	ldr	r2, [pc, #472]	; (80086b8 <HAL_DMA_IRQHandler+0xa14>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d03b      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a74      	ldr	r2, [pc, #464]	; (80086bc <HAL_DMA_IRQHandler+0xa18>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d036      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a73      	ldr	r2, [pc, #460]	; (80086c0 <HAL_DMA_IRQHandler+0xa1c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d031      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a71      	ldr	r2, [pc, #452]	; (80086c4 <HAL_DMA_IRQHandler+0xa20>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d02c      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a70      	ldr	r2, [pc, #448]	; (80086c8 <HAL_DMA_IRQHandler+0xa24>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d027      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a6e      	ldr	r2, [pc, #440]	; (80086cc <HAL_DMA_IRQHandler+0xa28>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d022      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a6d      	ldr	r2, [pc, #436]	; (80086d0 <HAL_DMA_IRQHandler+0xa2c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d01d      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a6b      	ldr	r2, [pc, #428]	; (80086d4 <HAL_DMA_IRQHandler+0xa30>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d018      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6a      	ldr	r2, [pc, #424]	; (80086d8 <HAL_DMA_IRQHandler+0xa34>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d013      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a68      	ldr	r2, [pc, #416]	; (80086dc <HAL_DMA_IRQHandler+0xa38>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00e      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a67      	ldr	r2, [pc, #412]	; (80086e0 <HAL_DMA_IRQHandler+0xa3c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d009      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a65      	ldr	r2, [pc, #404]	; (80086e4 <HAL_DMA_IRQHandler+0xa40>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d004      	beq.n	800855c <HAL_DMA_IRQHandler+0x8b8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a64      	ldr	r2, [pc, #400]	; (80086e8 <HAL_DMA_IRQHandler+0xa44>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d108      	bne.n	800856e <HAL_DMA_IRQHandler+0x8ca>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e007      	b.n	800857e <HAL_DMA_IRQHandler+0x8da>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0201 	bic.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	429a      	cmp	r2, r3
 8008588:	d307      	bcc.n	800859a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f2      	bne.n	800857e <HAL_DMA_IRQHandler+0x8da>
 8008598:	e000      	b.n	800859c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800859a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2203      	movs	r2, #3
 80085ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80085b2:	e003      	b.n	80085bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8272 	beq.w	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
 80085d6:	e26c      	b.n	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a43      	ldr	r2, [pc, #268]	; (80086ec <HAL_DMA_IRQHandler+0xa48>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d022      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a42      	ldr	r2, [pc, #264]	; (80086f0 <HAL_DMA_IRQHandler+0xa4c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d01d      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a40      	ldr	r2, [pc, #256]	; (80086f4 <HAL_DMA_IRQHandler+0xa50>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d018      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3f      	ldr	r2, [pc, #252]	; (80086f8 <HAL_DMA_IRQHandler+0xa54>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d013      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <HAL_DMA_IRQHandler+0xa58>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00e      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a3c      	ldr	r2, [pc, #240]	; (8008700 <HAL_DMA_IRQHandler+0xa5c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3a      	ldr	r2, [pc, #232]	; (8008704 <HAL_DMA_IRQHandler+0xa60>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d004      	beq.n	8008628 <HAL_DMA_IRQHandler+0x984>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a39      	ldr	r2, [pc, #228]	; (8008708 <HAL_DMA_IRQHandler+0xa64>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d101      	bne.n	800862c <HAL_DMA_IRQHandler+0x988>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <HAL_DMA_IRQHandler+0x98a>
 800862c:	2300      	movs	r3, #0
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 823f 	beq.w	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008640:	f003 031f 	and.w	r3, r3, #31
 8008644:	2204      	movs	r2, #4
 8008646:	409a      	lsls	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80cd 	beq.w	80087ec <HAL_DMA_IRQHandler+0xb48>
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80c7 	beq.w	80087ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2204      	movs	r2, #4
 8008668:	409a      	lsls	r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d049      	beq.n	800870c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 8210 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008694:	e20a      	b.n	8008aac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 8206 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086a8:	e200      	b.n	8008aac <HAL_DMA_IRQHandler+0xe08>
 80086aa:	bf00      	nop
 80086ac:	40020010 	.word	0x40020010
 80086b0:	40020028 	.word	0x40020028
 80086b4:	40020040 	.word	0x40020040
 80086b8:	40020058 	.word	0x40020058
 80086bc:	40020070 	.word	0x40020070
 80086c0:	40020088 	.word	0x40020088
 80086c4:	400200a0 	.word	0x400200a0
 80086c8:	400200b8 	.word	0x400200b8
 80086cc:	40020410 	.word	0x40020410
 80086d0:	40020428 	.word	0x40020428
 80086d4:	40020440 	.word	0x40020440
 80086d8:	40020458 	.word	0x40020458
 80086dc:	40020470 	.word	0x40020470
 80086e0:	40020488 	.word	0x40020488
 80086e4:	400204a0 	.word	0x400204a0
 80086e8:	400204b8 	.word	0x400204b8
 80086ec:	58025408 	.word	0x58025408
 80086f0:	5802541c 	.word	0x5802541c
 80086f4:	58025430 	.word	0x58025430
 80086f8:	58025444 	.word	0x58025444
 80086fc:	58025458 	.word	0x58025458
 8008700:	5802546c 	.word	0x5802546c
 8008704:	58025480 	.word	0x58025480
 8008708:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d160      	bne.n	80087d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7f      	ldr	r2, [pc, #508]	; (8008918 <HAL_DMA_IRQHandler+0xc74>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d04a      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7d      	ldr	r2, [pc, #500]	; (800891c <HAL_DMA_IRQHandler+0xc78>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d045      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a7c      	ldr	r2, [pc, #496]	; (8008920 <HAL_DMA_IRQHandler+0xc7c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d040      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a7a      	ldr	r2, [pc, #488]	; (8008924 <HAL_DMA_IRQHandler+0xc80>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d03b      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a79      	ldr	r2, [pc, #484]	; (8008928 <HAL_DMA_IRQHandler+0xc84>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d036      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a77      	ldr	r2, [pc, #476]	; (800892c <HAL_DMA_IRQHandler+0xc88>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d031      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a76      	ldr	r2, [pc, #472]	; (8008930 <HAL_DMA_IRQHandler+0xc8c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d02c      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a74      	ldr	r2, [pc, #464]	; (8008934 <HAL_DMA_IRQHandler+0xc90>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d027      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a73      	ldr	r2, [pc, #460]	; (8008938 <HAL_DMA_IRQHandler+0xc94>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d022      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a71      	ldr	r2, [pc, #452]	; (800893c <HAL_DMA_IRQHandler+0xc98>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01d      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a70      	ldr	r2, [pc, #448]	; (8008940 <HAL_DMA_IRQHandler+0xc9c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d018      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a6e      	ldr	r2, [pc, #440]	; (8008944 <HAL_DMA_IRQHandler+0xca0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6d      	ldr	r2, [pc, #436]	; (8008948 <HAL_DMA_IRQHandler+0xca4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00e      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a6b      	ldr	r2, [pc, #428]	; (800894c <HAL_DMA_IRQHandler+0xca8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a6a      	ldr	r2, [pc, #424]	; (8008950 <HAL_DMA_IRQHandler+0xcac>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xb12>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a68      	ldr	r2, [pc, #416]	; (8008954 <HAL_DMA_IRQHandler+0xcb0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <HAL_DMA_IRQHandler+0xb24>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0208 	bic.w	r2, r2, #8
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <HAL_DMA_IRQHandler+0xb34>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0204 	bic.w	r2, r2, #4
 80087d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8165 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087ea:	e15f      	b.n	8008aac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2202      	movs	r2, #2
 80087f6:	409a      	lsls	r2, r3
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80c5 	beq.w	800898c <HAL_DMA_IRQHandler+0xce8>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80bf 	beq.w	800898c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	2202      	movs	r2, #2
 8008818:	409a      	lsls	r2, r3
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d018      	beq.n	800885a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 813a 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008844:	e134      	b.n	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8130 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008858:	e12a      	b.n	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 8089 	bne.w	8008978 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a2b      	ldr	r2, [pc, #172]	; (8008918 <HAL_DMA_IRQHandler+0xc74>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d04a      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a29      	ldr	r2, [pc, #164]	; (800891c <HAL_DMA_IRQHandler+0xc78>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d045      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a28      	ldr	r2, [pc, #160]	; (8008920 <HAL_DMA_IRQHandler+0xc7c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d040      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a26      	ldr	r2, [pc, #152]	; (8008924 <HAL_DMA_IRQHandler+0xc80>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d03b      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a25      	ldr	r2, [pc, #148]	; (8008928 <HAL_DMA_IRQHandler+0xc84>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d036      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a23      	ldr	r2, [pc, #140]	; (800892c <HAL_DMA_IRQHandler+0xc88>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d031      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a22      	ldr	r2, [pc, #136]	; (8008930 <HAL_DMA_IRQHandler+0xc8c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d02c      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a20      	ldr	r2, [pc, #128]	; (8008934 <HAL_DMA_IRQHandler+0xc90>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d027      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <HAL_DMA_IRQHandler+0xc94>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1d      	ldr	r2, [pc, #116]	; (800893c <HAL_DMA_IRQHandler+0xc98>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d01d      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <HAL_DMA_IRQHandler+0xc9c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d018      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <HAL_DMA_IRQHandler+0xca0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a19      	ldr	r2, [pc, #100]	; (8008948 <HAL_DMA_IRQHandler+0xca4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a17      	ldr	r2, [pc, #92]	; (800894c <HAL_DMA_IRQHandler+0xca8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <HAL_DMA_IRQHandler+0xcac>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_DMA_IRQHandler+0xc62>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a14      	ldr	r2, [pc, #80]	; (8008954 <HAL_DMA_IRQHandler+0xcb0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d128      	bne.n	8008958 <HAL_DMA_IRQHandler+0xcb4>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0214 	bic.w	r2, r2, #20
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e027      	b.n	8008968 <HAL_DMA_IRQHandler+0xcc4>
 8008918:	40020010 	.word	0x40020010
 800891c:	40020028 	.word	0x40020028
 8008920:	40020040 	.word	0x40020040
 8008924:	40020058 	.word	0x40020058
 8008928:	40020070 	.word	0x40020070
 800892c:	40020088 	.word	0x40020088
 8008930:	400200a0 	.word	0x400200a0
 8008934:	400200b8 	.word	0x400200b8
 8008938:	40020410 	.word	0x40020410
 800893c:	40020428 	.word	0x40020428
 8008940:	40020440 	.word	0x40020440
 8008944:	40020458 	.word	0x40020458
 8008948:	40020470 	.word	0x40020470
 800894c:	40020488 	.word	0x40020488
 8008950:	400204a0 	.word	0x400204a0
 8008954:	400204b8 	.word	0x400204b8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 020a 	bic.w	r2, r2, #10
 8008966:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8097 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800898a:	e091      	b.n	8008ab0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2208      	movs	r2, #8
 8008996:	409a      	lsls	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8088 	beq.w	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8082 	beq.w	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a41      	ldr	r2, [pc, #260]	; (8008ab8 <HAL_DMA_IRQHandler+0xe14>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d04a      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3f      	ldr	r2, [pc, #252]	; (8008abc <HAL_DMA_IRQHandler+0xe18>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d045      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a3e      	ldr	r2, [pc, #248]	; (8008ac0 <HAL_DMA_IRQHandler+0xe1c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d040      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a3c      	ldr	r2, [pc, #240]	; (8008ac4 <HAL_DMA_IRQHandler+0xe20>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d03b      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3b      	ldr	r2, [pc, #236]	; (8008ac8 <HAL_DMA_IRQHandler+0xe24>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d036      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a39      	ldr	r2, [pc, #228]	; (8008acc <HAL_DMA_IRQHandler+0xe28>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d031      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a38      	ldr	r2, [pc, #224]	; (8008ad0 <HAL_DMA_IRQHandler+0xe2c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d02c      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a36      	ldr	r2, [pc, #216]	; (8008ad4 <HAL_DMA_IRQHandler+0xe30>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d027      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a35      	ldr	r2, [pc, #212]	; (8008ad8 <HAL_DMA_IRQHandler+0xe34>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d022      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a33      	ldr	r2, [pc, #204]	; (8008adc <HAL_DMA_IRQHandler+0xe38>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d01d      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a32      	ldr	r2, [pc, #200]	; (8008ae0 <HAL_DMA_IRQHandler+0xe3c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d018      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a30      	ldr	r2, [pc, #192]	; (8008ae4 <HAL_DMA_IRQHandler+0xe40>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d013      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a2f      	ldr	r2, [pc, #188]	; (8008ae8 <HAL_DMA_IRQHandler+0xe44>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a2d      	ldr	r2, [pc, #180]	; (8008aec <HAL_DMA_IRQHandler+0xe48>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d009      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a2c      	ldr	r2, [pc, #176]	; (8008af0 <HAL_DMA_IRQHandler+0xe4c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_DMA_IRQHandler+0xdaa>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <HAL_DMA_IRQHandler+0xe50>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d108      	bne.n	8008a60 <HAL_DMA_IRQHandler+0xdbc>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 021c 	bic.w	r2, r2, #28
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e007      	b.n	8008a70 <HAL_DMA_IRQHandler+0xdcc>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 020e 	bic.w	r2, r2, #14
 8008a6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	2201      	movs	r2, #1
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
 8008aa6:	e004      	b.n	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ab0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ab2:	3728      	adds	r7, #40	; 0x28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40020010 	.word	0x40020010
 8008abc:	40020028 	.word	0x40020028
 8008ac0:	40020040 	.word	0x40020040
 8008ac4:	40020058 	.word	0x40020058
 8008ac8:	40020070 	.word	0x40020070
 8008acc:	40020088 	.word	0x40020088
 8008ad0:	400200a0 	.word	0x400200a0
 8008ad4:	400200b8 	.word	0x400200b8
 8008ad8:	40020410 	.word	0x40020410
 8008adc:	40020428 	.word	0x40020428
 8008ae0:	40020440 	.word	0x40020440
 8008ae4:	40020458 	.word	0x40020458
 8008ae8:	40020470 	.word	0x40020470
 8008aec:	40020488 	.word	0x40020488
 8008af0:	400204a0 	.word	0x400204a0
 8008af4:	400204b8 	.word	0x400204b8

08008af8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a7f      	ldr	r2, [pc, #508]	; (8008d2c <DMA_SetConfig+0x21c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d072      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a7d      	ldr	r2, [pc, #500]	; (8008d30 <DMA_SetConfig+0x220>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d06d      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a7c      	ldr	r2, [pc, #496]	; (8008d34 <DMA_SetConfig+0x224>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d068      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a7a      	ldr	r2, [pc, #488]	; (8008d38 <DMA_SetConfig+0x228>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d063      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a79      	ldr	r2, [pc, #484]	; (8008d3c <DMA_SetConfig+0x22c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d05e      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a77      	ldr	r2, [pc, #476]	; (8008d40 <DMA_SetConfig+0x230>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d059      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a76      	ldr	r2, [pc, #472]	; (8008d44 <DMA_SetConfig+0x234>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d054      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a74      	ldr	r2, [pc, #464]	; (8008d48 <DMA_SetConfig+0x238>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d04f      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a73      	ldr	r2, [pc, #460]	; (8008d4c <DMA_SetConfig+0x23c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d04a      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a71      	ldr	r2, [pc, #452]	; (8008d50 <DMA_SetConfig+0x240>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d045      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a70      	ldr	r2, [pc, #448]	; (8008d54 <DMA_SetConfig+0x244>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d040      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a6e      	ldr	r2, [pc, #440]	; (8008d58 <DMA_SetConfig+0x248>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d03b      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a6d      	ldr	r2, [pc, #436]	; (8008d5c <DMA_SetConfig+0x24c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d036      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a6b      	ldr	r2, [pc, #428]	; (8008d60 <DMA_SetConfig+0x250>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d031      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a6a      	ldr	r2, [pc, #424]	; (8008d64 <DMA_SetConfig+0x254>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d02c      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a68      	ldr	r2, [pc, #416]	; (8008d68 <DMA_SetConfig+0x258>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d027      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a67      	ldr	r2, [pc, #412]	; (8008d6c <DMA_SetConfig+0x25c>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d022      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a65      	ldr	r2, [pc, #404]	; (8008d70 <DMA_SetConfig+0x260>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d01d      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a64      	ldr	r2, [pc, #400]	; (8008d74 <DMA_SetConfig+0x264>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d018      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a62      	ldr	r2, [pc, #392]	; (8008d78 <DMA_SetConfig+0x268>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a61      	ldr	r2, [pc, #388]	; (8008d7c <DMA_SetConfig+0x26c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00e      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a5f      	ldr	r2, [pc, #380]	; (8008d80 <DMA_SetConfig+0x270>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d009      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a5e      	ldr	r2, [pc, #376]	; (8008d84 <DMA_SetConfig+0x274>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d004      	beq.n	8008c1a <DMA_SetConfig+0x10a>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a5c      	ldr	r2, [pc, #368]	; (8008d88 <DMA_SetConfig+0x278>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d101      	bne.n	8008c1e <DMA_SetConfig+0x10e>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <DMA_SetConfig+0x110>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00d      	beq.n	8008c40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a39      	ldr	r2, [pc, #228]	; (8008d2c <DMA_SetConfig+0x21c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d04a      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a38      	ldr	r2, [pc, #224]	; (8008d30 <DMA_SetConfig+0x220>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d045      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a36      	ldr	r2, [pc, #216]	; (8008d34 <DMA_SetConfig+0x224>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d040      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a35      	ldr	r2, [pc, #212]	; (8008d38 <DMA_SetConfig+0x228>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d03b      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a33      	ldr	r2, [pc, #204]	; (8008d3c <DMA_SetConfig+0x22c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d036      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a32      	ldr	r2, [pc, #200]	; (8008d40 <DMA_SetConfig+0x230>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d031      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a30      	ldr	r2, [pc, #192]	; (8008d44 <DMA_SetConfig+0x234>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d02c      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a2f      	ldr	r2, [pc, #188]	; (8008d48 <DMA_SetConfig+0x238>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d027      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a2d      	ldr	r2, [pc, #180]	; (8008d4c <DMA_SetConfig+0x23c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d022      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a2c      	ldr	r2, [pc, #176]	; (8008d50 <DMA_SetConfig+0x240>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d01d      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a2a      	ldr	r2, [pc, #168]	; (8008d54 <DMA_SetConfig+0x244>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a29      	ldr	r2, [pc, #164]	; (8008d58 <DMA_SetConfig+0x248>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d013      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a27      	ldr	r2, [pc, #156]	; (8008d5c <DMA_SetConfig+0x24c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a26      	ldr	r2, [pc, #152]	; (8008d60 <DMA_SetConfig+0x250>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <DMA_SetConfig+0x254>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <DMA_SetConfig+0x1d0>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a23      	ldr	r2, [pc, #140]	; (8008d68 <DMA_SetConfig+0x258>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d101      	bne.n	8008ce4 <DMA_SetConfig+0x1d4>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <DMA_SetConfig+0x1d6>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d059      	beq.n	8008d9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	223f      	movs	r2, #63	; 0x3f
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d138      	bne.n	8008d8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d2a:	e086      	b.n	8008e3a <DMA_SetConfig+0x32a>
 8008d2c:	40020010 	.word	0x40020010
 8008d30:	40020028 	.word	0x40020028
 8008d34:	40020040 	.word	0x40020040
 8008d38:	40020058 	.word	0x40020058
 8008d3c:	40020070 	.word	0x40020070
 8008d40:	40020088 	.word	0x40020088
 8008d44:	400200a0 	.word	0x400200a0
 8008d48:	400200b8 	.word	0x400200b8
 8008d4c:	40020410 	.word	0x40020410
 8008d50:	40020428 	.word	0x40020428
 8008d54:	40020440 	.word	0x40020440
 8008d58:	40020458 	.word	0x40020458
 8008d5c:	40020470 	.word	0x40020470
 8008d60:	40020488 	.word	0x40020488
 8008d64:	400204a0 	.word	0x400204a0
 8008d68:	400204b8 	.word	0x400204b8
 8008d6c:	58025408 	.word	0x58025408
 8008d70:	5802541c 	.word	0x5802541c
 8008d74:	58025430 	.word	0x58025430
 8008d78:	58025444 	.word	0x58025444
 8008d7c:	58025458 	.word	0x58025458
 8008d80:	5802546c 	.word	0x5802546c
 8008d84:	58025480 	.word	0x58025480
 8008d88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]
}
 8008d9c:	e04d      	b.n	8008e3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a29      	ldr	r2, [pc, #164]	; (8008e48 <DMA_SetConfig+0x338>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d022      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a27      	ldr	r2, [pc, #156]	; (8008e4c <DMA_SetConfig+0x33c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01d      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a26      	ldr	r2, [pc, #152]	; (8008e50 <DMA_SetConfig+0x340>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d018      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a24      	ldr	r2, [pc, #144]	; (8008e54 <DMA_SetConfig+0x344>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d013      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a23      	ldr	r2, [pc, #140]	; (8008e58 <DMA_SetConfig+0x348>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00e      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a21      	ldr	r2, [pc, #132]	; (8008e5c <DMA_SetConfig+0x34c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d009      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a20      	ldr	r2, [pc, #128]	; (8008e60 <DMA_SetConfig+0x350>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d004      	beq.n	8008dee <DMA_SetConfig+0x2de>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <DMA_SetConfig+0x354>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d101      	bne.n	8008df2 <DMA_SetConfig+0x2e2>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <DMA_SetConfig+0x2e4>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d020      	beq.n	8008e3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	2201      	movs	r2, #1
 8008e02:	409a      	lsls	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d108      	bne.n	8008e2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	60da      	str	r2, [r3, #12]
}
 8008e28:	e007      	b.n	8008e3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	60da      	str	r2, [r3, #12]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	58025408 	.word	0x58025408
 8008e4c:	5802541c 	.word	0x5802541c
 8008e50:	58025430 	.word	0x58025430
 8008e54:	58025444 	.word	0x58025444
 8008e58:	58025458 	.word	0x58025458
 8008e5c:	5802546c 	.word	0x5802546c
 8008e60:	58025480 	.word	0x58025480
 8008e64:	58025494 	.word	0x58025494

08008e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a42      	ldr	r2, [pc, #264]	; (8008f80 <DMA_CalcBaseAndBitshift+0x118>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d04a      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a41      	ldr	r2, [pc, #260]	; (8008f84 <DMA_CalcBaseAndBitshift+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d045      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <DMA_CalcBaseAndBitshift+0x120>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d040      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a3e      	ldr	r2, [pc, #248]	; (8008f8c <DMA_CalcBaseAndBitshift+0x124>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d03b      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a3c      	ldr	r2, [pc, #240]	; (8008f90 <DMA_CalcBaseAndBitshift+0x128>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d036      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a3b      	ldr	r2, [pc, #236]	; (8008f94 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d031      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a39      	ldr	r2, [pc, #228]	; (8008f98 <DMA_CalcBaseAndBitshift+0x130>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d02c      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a38      	ldr	r2, [pc, #224]	; (8008f9c <DMA_CalcBaseAndBitshift+0x134>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d027      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a36      	ldr	r2, [pc, #216]	; (8008fa0 <DMA_CalcBaseAndBitshift+0x138>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d022      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a35      	ldr	r2, [pc, #212]	; (8008fa4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d01d      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a33      	ldr	r2, [pc, #204]	; (8008fa8 <DMA_CalcBaseAndBitshift+0x140>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d018      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a32      	ldr	r2, [pc, #200]	; (8008fac <DMA_CalcBaseAndBitshift+0x144>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a30      	ldr	r2, [pc, #192]	; (8008fb0 <DMA_CalcBaseAndBitshift+0x148>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00e      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2f      	ldr	r2, [pc, #188]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d009      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2d      	ldr	r2, [pc, #180]	; (8008fb8 <DMA_CalcBaseAndBitshift+0x150>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a2c      	ldr	r2, [pc, #176]	; (8008fbc <DMA_CalcBaseAndBitshift+0x154>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d101      	bne.n	8008f14 <DMA_CalcBaseAndBitshift+0xac>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <DMA_CalcBaseAndBitshift+0xae>
 8008f14:	2300      	movs	r3, #0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d024      	beq.n	8008f64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	3b10      	subs	r3, #16
 8008f22:	4a27      	ldr	r2, [pc, #156]	; (8008fc0 <DMA_CalcBaseAndBitshift+0x158>)
 8008f24:	fba2 2303 	umull	r2, r3, r2, r3
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	4a24      	ldr	r2, [pc, #144]	; (8008fc4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f34:	5cd3      	ldrb	r3, [r2, r3]
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d908      	bls.n	8008f54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b1f      	ldr	r3, [pc, #124]	; (8008fc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	1d1a      	adds	r2, r3, #4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	659a      	str	r2, [r3, #88]	; 0x58
 8008f52:	e00d      	b.n	8008f70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6593      	str	r3, [r2, #88]	; 0x58
 8008f62:	e005      	b.n	8008f70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	40020010 	.word	0x40020010
 8008f84:	40020028 	.word	0x40020028
 8008f88:	40020040 	.word	0x40020040
 8008f8c:	40020058 	.word	0x40020058
 8008f90:	40020070 	.word	0x40020070
 8008f94:	40020088 	.word	0x40020088
 8008f98:	400200a0 	.word	0x400200a0
 8008f9c:	400200b8 	.word	0x400200b8
 8008fa0:	40020410 	.word	0x40020410
 8008fa4:	40020428 	.word	0x40020428
 8008fa8:	40020440 	.word	0x40020440
 8008fac:	40020458 	.word	0x40020458
 8008fb0:	40020470 	.word	0x40020470
 8008fb4:	40020488 	.word	0x40020488
 8008fb8:	400204a0 	.word	0x400204a0
 8008fbc:	400204b8 	.word	0x400204b8
 8008fc0:	aaaaaaab 	.word	0xaaaaaaab
 8008fc4:	08018c00 	.word	0x08018c00
 8008fc8:	fffffc00 	.word	0xfffffc00

08008fcc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d120      	bne.n	8009022 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d858      	bhi.n	800909a <DMA_CheckFifoParam+0xce>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <DMA_CheckFifoParam+0x24>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009013 	.word	0x08009013
 8008ff8:	08009001 	.word	0x08009001
 8008ffc:	0800909b 	.word	0x0800909b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d048      	beq.n	800909e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009010:	e045      	b.n	800909e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800901a:	d142      	bne.n	80090a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009020:	e03f      	b.n	80090a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902a:	d123      	bne.n	8009074 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	2b03      	cmp	r3, #3
 8009032:	d838      	bhi.n	80090a6 <DMA_CheckFifoParam+0xda>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <DMA_CheckFifoParam+0x70>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	0800904d 	.word	0x0800904d
 8009040:	08009053 	.word	0x08009053
 8009044:	0800904d 	.word	0x0800904d
 8009048:	08009065 	.word	0x08009065
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
        break;
 8009050:	e030      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d025      	beq.n	80090aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009062:	e022      	b.n	80090aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800906c:	d11f      	bne.n	80090ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009072:	e01c      	b.n	80090ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	2b02      	cmp	r3, #2
 800907a:	d902      	bls.n	8009082 <DMA_CheckFifoParam+0xb6>
 800907c:	2b03      	cmp	r3, #3
 800907e:	d003      	beq.n	8009088 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009080:	e018      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
        break;
 8009086:	e015      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00e      	beq.n	80090b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    break;
 8009098:	e00b      	b.n	80090b2 <DMA_CheckFifoParam+0xe6>
        break;
 800909a:	bf00      	nop
 800909c:	e00a      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 800909e:	bf00      	nop
 80090a0:	e008      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090a2:	bf00      	nop
 80090a4:	e006      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
    break;
 80090b2:	bf00      	nop
    }
  }

  return status;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a38      	ldr	r2, [pc, #224]	; (80091b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d022      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a36      	ldr	r2, [pc, #216]	; (80091bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d01d      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a35      	ldr	r2, [pc, #212]	; (80091c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d018      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a33      	ldr	r2, [pc, #204]	; (80091c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a32      	ldr	r2, [pc, #200]	; (80091c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00e      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a30      	ldr	r2, [pc, #192]	; (80091cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d009      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2f      	ldr	r2, [pc, #188]	; (80091d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a2d      	ldr	r2, [pc, #180]	; (80091d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01a      	beq.n	8009162 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	3b08      	subs	r3, #8
 8009134:	4a28      	ldr	r2, [pc, #160]	; (80091d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009136:	fba2 2303 	umull	r2, r3, r2, r3
 800913a:	091b      	lsrs	r3, r3, #4
 800913c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	4b26      	ldr	r3, [pc, #152]	; (80091dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	461a      	mov	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a24      	ldr	r2, [pc, #144]	; (80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009150:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	2201      	movs	r2, #1
 800915a:	409a      	lsls	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009160:	e024      	b.n	80091ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	3b10      	subs	r3, #16
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800916c:	fba2 2303 	umull	r2, r3, r2, r3
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d806      	bhi.n	800918a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d902      	bls.n	800918a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3308      	adds	r3, #8
 8009188:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4b18      	ldr	r3, [pc, #96]	; (80091f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800919c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2201      	movs	r2, #1
 80091a6:	409a      	lsls	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80091ac:	bf00      	nop
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	58025408 	.word	0x58025408
 80091bc:	5802541c 	.word	0x5802541c
 80091c0:	58025430 	.word	0x58025430
 80091c4:	58025444 	.word	0x58025444
 80091c8:	58025458 	.word	0x58025458
 80091cc:	5802546c 	.word	0x5802546c
 80091d0:	58025480 	.word	0x58025480
 80091d4:	58025494 	.word	0x58025494
 80091d8:	cccccccd 	.word	0xcccccccd
 80091dc:	16009600 	.word	0x16009600
 80091e0:	58025880 	.word	0x58025880
 80091e4:	aaaaaaab 	.word	0xaaaaaaab
 80091e8:	400204b8 	.word	0x400204b8
 80091ec:	4002040f 	.word	0x4002040f
 80091f0:	10008200 	.word	0x10008200
 80091f4:	40020880 	.word	0x40020880

080091f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d04a      	beq.n	80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b08      	cmp	r3, #8
 8009212:	d847      	bhi.n	80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d022      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a24      	ldr	r2, [pc, #144]	; (80092b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d01d      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d018      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a21      	ldr	r2, [pc, #132]	; (80092bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d013      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00e      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1e      	ldr	r2, [pc, #120]	; (80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d101      	bne.n	8009268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009268:	2300      	movs	r3, #0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a15      	ldr	r2, [pc, #84]	; (80092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009280:	671a      	str	r2, [r3, #112]	; 0x70
 8009282:	e009      	b.n	8009298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a11      	ldr	r2, [pc, #68]	; (80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009296:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3b01      	subs	r3, #1
 800929c:	2201      	movs	r2, #1
 800929e:	409a      	lsls	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	58025408 	.word	0x58025408
 80092b4:	5802541c 	.word	0x5802541c
 80092b8:	58025430 	.word	0x58025430
 80092bc:	58025444 	.word	0x58025444
 80092c0:	58025458 	.word	0x58025458
 80092c4:	5802546c 	.word	0x5802546c
 80092c8:	58025480 	.word	0x58025480
 80092cc:	58025494 	.word	0x58025494
 80092d0:	1600963f 	.word	0x1600963f
 80092d4:	58025940 	.word	0x58025940
 80092d8:	1000823f 	.word	0x1000823f
 80092dc:	40020940 	.word	0x40020940

080092e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b089      	sub	sp, #36	; 0x24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80092ee:	4b89      	ldr	r3, [pc, #548]	; (8009514 <HAL_GPIO_Init+0x234>)
 80092f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092f2:	e194      	b.n	800961e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	2101      	movs	r1, #1
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	4013      	ands	r3, r2
 8009302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8186 	beq.w	8009618 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	2b01      	cmp	r3, #1
 8009316:	d005      	beq.n	8009324 <HAL_GPIO_Init+0x44>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d130      	bne.n	8009386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	2203      	movs	r2, #3
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	43db      	mvns	r3, r3
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	4013      	ands	r3, r2
 800933a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	4313      	orrs	r3, r2
 800934c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800935a:	2201      	movs	r2, #1
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	43db      	mvns	r3, r3
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	4013      	ands	r3, r2
 8009368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	091b      	lsrs	r3, r3, #4
 8009370:	f003 0201 	and.w	r2, r3, #1
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	fa02 f303 	lsl.w	r3, r2, r3
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	4313      	orrs	r3, r2
 800937e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d017      	beq.n	80093c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	2203      	movs	r2, #3
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	43db      	mvns	r3, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4013      	ands	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d123      	bne.n	8009416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	08da      	lsrs	r2, r3, #3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3208      	adds	r2, #8
 80093d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	220f      	movs	r2, #15
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43db      	mvns	r3, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4013      	ands	r3, r2
 80093f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	4313      	orrs	r3, r2
 8009406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	08da      	lsrs	r2, r3, #3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3208      	adds	r2, #8
 8009410:	69b9      	ldr	r1, [r7, #24]
 8009412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	2203      	movs	r2, #3
 8009422:	fa02 f303 	lsl.w	r3, r2, r3
 8009426:	43db      	mvns	r3, r3
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4013      	ands	r3, r2
 800942c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f003 0203 	and.w	r2, r3, #3
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	4313      	orrs	r3, r2
 8009442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80e0 	beq.w	8009618 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009458:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <HAL_GPIO_Init+0x238>)
 800945a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800945e:	4a2e      	ldr	r2, [pc, #184]	; (8009518 <HAL_GPIO_Init+0x238>)
 8009460:	f043 0302 	orr.w	r3, r3, #2
 8009464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <HAL_GPIO_Init+0x238>)
 800946a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009476:	4a29      	ldr	r2, [pc, #164]	; (800951c <HAL_GPIO_Init+0x23c>)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	3302      	adds	r3, #2
 800947e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	220f      	movs	r2, #15
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43db      	mvns	r3, r3
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	4013      	ands	r3, r2
 8009498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a20      	ldr	r2, [pc, #128]	; (8009520 <HAL_GPIO_Init+0x240>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d052      	beq.n	8009548 <HAL_GPIO_Init+0x268>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1f      	ldr	r2, [pc, #124]	; (8009524 <HAL_GPIO_Init+0x244>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d031      	beq.n	800950e <HAL_GPIO_Init+0x22e>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <HAL_GPIO_Init+0x248>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d02b      	beq.n	800950a <HAL_GPIO_Init+0x22a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a1d      	ldr	r2, [pc, #116]	; (800952c <HAL_GPIO_Init+0x24c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d025      	beq.n	8009506 <HAL_GPIO_Init+0x226>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <HAL_GPIO_Init+0x250>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01f      	beq.n	8009502 <HAL_GPIO_Init+0x222>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <HAL_GPIO_Init+0x254>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d019      	beq.n	80094fe <HAL_GPIO_Init+0x21e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <HAL_GPIO_Init+0x258>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_GPIO_Init+0x21a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a19      	ldr	r2, [pc, #100]	; (800953c <HAL_GPIO_Init+0x25c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00d      	beq.n	80094f6 <HAL_GPIO_Init+0x216>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a18      	ldr	r2, [pc, #96]	; (8009540 <HAL_GPIO_Init+0x260>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d007      	beq.n	80094f2 <HAL_GPIO_Init+0x212>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a17      	ldr	r2, [pc, #92]	; (8009544 <HAL_GPIO_Init+0x264>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d101      	bne.n	80094ee <HAL_GPIO_Init+0x20e>
 80094ea:	2309      	movs	r3, #9
 80094ec:	e02d      	b.n	800954a <HAL_GPIO_Init+0x26a>
 80094ee:	230a      	movs	r3, #10
 80094f0:	e02b      	b.n	800954a <HAL_GPIO_Init+0x26a>
 80094f2:	2308      	movs	r3, #8
 80094f4:	e029      	b.n	800954a <HAL_GPIO_Init+0x26a>
 80094f6:	2307      	movs	r3, #7
 80094f8:	e027      	b.n	800954a <HAL_GPIO_Init+0x26a>
 80094fa:	2306      	movs	r3, #6
 80094fc:	e025      	b.n	800954a <HAL_GPIO_Init+0x26a>
 80094fe:	2305      	movs	r3, #5
 8009500:	e023      	b.n	800954a <HAL_GPIO_Init+0x26a>
 8009502:	2304      	movs	r3, #4
 8009504:	e021      	b.n	800954a <HAL_GPIO_Init+0x26a>
 8009506:	2303      	movs	r3, #3
 8009508:	e01f      	b.n	800954a <HAL_GPIO_Init+0x26a>
 800950a:	2302      	movs	r3, #2
 800950c:	e01d      	b.n	800954a <HAL_GPIO_Init+0x26a>
 800950e:	2301      	movs	r3, #1
 8009510:	e01b      	b.n	800954a <HAL_GPIO_Init+0x26a>
 8009512:	bf00      	nop
 8009514:	58000080 	.word	0x58000080
 8009518:	58024400 	.word	0x58024400
 800951c:	58000400 	.word	0x58000400
 8009520:	58020000 	.word	0x58020000
 8009524:	58020400 	.word	0x58020400
 8009528:	58020800 	.word	0x58020800
 800952c:	58020c00 	.word	0x58020c00
 8009530:	58021000 	.word	0x58021000
 8009534:	58021400 	.word	0x58021400
 8009538:	58021800 	.word	0x58021800
 800953c:	58021c00 	.word	0x58021c00
 8009540:	58022000 	.word	0x58022000
 8009544:	58022400 	.word	0x58022400
 8009548:	2300      	movs	r3, #0
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	f002 0203 	and.w	r2, r2, #3
 8009550:	0092      	lsls	r2, r2, #2
 8009552:	4093      	lsls	r3, r2
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	4313      	orrs	r3, r2
 8009558:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800955a:	4938      	ldr	r1, [pc, #224]	; (800963c <HAL_GPIO_Init+0x35c>)
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	089b      	lsrs	r3, r3, #2
 8009560:	3302      	adds	r3, #2
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	43db      	mvns	r3, r3
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	4013      	ands	r3, r2
 8009578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800958e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	43db      	mvns	r3, r3
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4013      	ands	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80095bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	4013      	ands	r3, r2
 80095d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	43db      	mvns	r3, r3
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	4013      	ands	r3, r2
 80095fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	3301      	adds	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f ae63 	bne.w	80092f4 <HAL_GPIO_Init+0x14>
  }
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	3724      	adds	r7, #36	; 0x24
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	58000400 	.word	0x58000400

08009640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e001      	b.n	8009662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
 800967c:	4613      	mov	r3, r2
 800967e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009680:	787b      	ldrb	r3, [r7, #1]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800968c:	e003      	b.n	8009696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800968e:	887b      	ldrh	r3, [r7, #2]
 8009690:	041a      	lsls	r2, r3, #16
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	619a      	str	r2, [r3, #24]
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80096a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a4:	b08f      	sub	sp, #60	; 0x3c
 80096a6:	af0a      	add	r7, sp, #40	; 0x28
 80096a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e054      	b.n	800975e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fb fa76 	bl	8004bc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2203      	movs	r2, #3
 80096d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f00b faf3 	bl	8014cde <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	687e      	ldr	r6, [r7, #4]
 8009700:	466d      	mov	r5, sp
 8009702:	f106 0410 	add.w	r4, r6, #16
 8009706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800970c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009712:	e885 0003 	stmia.w	r5, {r0, r1}
 8009716:	1d33      	adds	r3, r6, #4
 8009718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800971a:	6838      	ldr	r0, [r7, #0]
 800971c:	f00b fa60 	bl	8014be0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f00b faea 	bl	8014d00 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	687e      	ldr	r6, [r7, #4]
 8009734:	466d      	mov	r5, sp
 8009736:	f106 0410 	add.w	r4, r6, #16
 800973a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800973c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800973e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009746:	e885 0003 	stmia.w	r5, {r0, r1}
 800974a:	1d33      	adds	r3, r6, #4
 800974c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800974e:	6838      	ldr	r0, [r7, #0]
 8009750:	f00b fc92 	bl	8015078 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009766 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009766:	b590      	push	{r4, r7, lr}
 8009768:	b089      	sub	sp, #36	; 0x24
 800976a:	af04      	add	r7, sp, #16
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	4608      	mov	r0, r1
 8009770:	4611      	mov	r1, r2
 8009772:	461a      	mov	r2, r3
 8009774:	4603      	mov	r3, r0
 8009776:	70fb      	strb	r3, [r7, #3]
 8009778:	460b      	mov	r3, r1
 800977a:	70bb      	strb	r3, [r7, #2]
 800977c:	4613      	mov	r3, r2
 800977e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_HCD_HC_Init+0x28>
 800978a:	2302      	movs	r3, #2
 800978c:	e076      	b.n	800987c <HAL_HCD_HC_Init+0x116>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	212c      	movs	r1, #44	; 0x2c
 800979c:	fb01 f303 	mul.w	r3, r1, r3
 80097a0:	4413      	add	r3, r2
 80097a2:	333d      	adds	r3, #61	; 0x3d
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	212c      	movs	r1, #44	; 0x2c
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	4413      	add	r3, r2
 80097b4:	3338      	adds	r3, #56	; 0x38
 80097b6:	787a      	ldrb	r2, [r7, #1]
 80097b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	212c      	movs	r1, #44	; 0x2c
 80097c0:	fb01 f303 	mul.w	r3, r1, r3
 80097c4:	4413      	add	r3, r2
 80097c6:	3340      	adds	r3, #64	; 0x40
 80097c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80097ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	212c      	movs	r1, #44	; 0x2c
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3339      	adds	r3, #57	; 0x39
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	212c      	movs	r1, #44	; 0x2c
 80097e4:	fb01 f303 	mul.w	r3, r1, r3
 80097e8:	4413      	add	r3, r2
 80097ea:	333f      	adds	r3, #63	; 0x3f
 80097ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80097f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	78ba      	ldrb	r2, [r7, #2]
 80097f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097fa:	b2d0      	uxtb	r0, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	212c      	movs	r1, #44	; 0x2c
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	4413      	add	r3, r2
 8009806:	333a      	adds	r3, #58	; 0x3a
 8009808:	4602      	mov	r2, r0
 800980a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800980c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009810:	2b00      	cmp	r3, #0
 8009812:	da09      	bge.n	8009828 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	212c      	movs	r1, #44	; 0x2c
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	333b      	adds	r3, #59	; 0x3b
 8009822:	2201      	movs	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e008      	b.n	800983a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	212c      	movs	r1, #44	; 0x2c
 800982e:	fb01 f303 	mul.w	r3, r1, r3
 8009832:	4413      	add	r3, r2
 8009834:	333b      	adds	r3, #59	; 0x3b
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	212c      	movs	r1, #44	; 0x2c
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	4413      	add	r3, r2
 8009846:	333c      	adds	r3, #60	; 0x3c
 8009848:	f897 2020 	ldrb.w	r2, [r7, #32]
 800984c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	787c      	ldrb	r4, [r7, #1]
 8009854:	78ba      	ldrb	r2, [r7, #2]
 8009856:	78f9      	ldrb	r1, [r7, #3]
 8009858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4623      	mov	r3, r4
 800986a:	f00b fd87 	bl	801537c <USB_HC_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	bd90      	pop	{r4, r7, pc}

08009884 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_HCD_HC_Halt+0x1e>
 800989e:	2302      	movs	r3, #2
 80098a0:	e00f      	b.n	80098c2 <HAL_HCD_HC_Halt+0x3e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f00b ffd9 	bl	801586a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	4608      	mov	r0, r1
 80098d6:	4611      	mov	r1, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	4603      	mov	r3, r0
 80098dc:	70fb      	strb	r3, [r7, #3]
 80098de:	460b      	mov	r3, r1
 80098e0:	70bb      	strb	r3, [r7, #2]
 80098e2:	4613      	mov	r3, r2
 80098e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	212c      	movs	r1, #44	; 0x2c
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	333b      	adds	r3, #59	; 0x3b
 80098f4:	78ba      	ldrb	r2, [r7, #2]
 80098f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	212c      	movs	r1, #44	; 0x2c
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	333f      	adds	r3, #63	; 0x3f
 8009906:	787a      	ldrb	r2, [r7, #1]
 8009908:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800990a:	7c3b      	ldrb	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d112      	bne.n	8009936 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	212c      	movs	r1, #44	; 0x2c
 8009916:	fb01 f303 	mul.w	r3, r1, r3
 800991a:	4413      	add	r3, r2
 800991c:	3342      	adds	r3, #66	; 0x42
 800991e:	2203      	movs	r2, #3
 8009920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	212c      	movs	r1, #44	; 0x2c
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	333d      	adds	r3, #61	; 0x3d
 8009930:	7f3a      	ldrb	r2, [r7, #28]
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e008      	b.n	8009948 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	212c      	movs	r1, #44	; 0x2c
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	4413      	add	r3, r2
 8009942:	3342      	adds	r3, #66	; 0x42
 8009944:	2202      	movs	r2, #2
 8009946:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009948:	787b      	ldrb	r3, [r7, #1]
 800994a:	2b03      	cmp	r3, #3
 800994c:	f200 80c6 	bhi.w	8009adc <HAL_HCD_HC_SubmitRequest+0x210>
 8009950:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	08009969 	.word	0x08009969
 800995c:	08009ac9 	.word	0x08009ac9
 8009960:	080099cd 	.word	0x080099cd
 8009964:	08009a4b 	.word	0x08009a4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009968:	7c3b      	ldrb	r3, [r7, #16]
 800996a:	2b01      	cmp	r3, #1
 800996c:	f040 80b8 	bne.w	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
 8009970:	78bb      	ldrb	r3, [r7, #2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f040 80b4 	bne.w	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009978:	8b3b      	ldrh	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d108      	bne.n	8009990 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	212c      	movs	r1, #44	; 0x2c
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	3355      	adds	r3, #85	; 0x55
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	212c      	movs	r1, #44	; 0x2c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3355      	adds	r3, #85	; 0x55
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	212c      	movs	r1, #44	; 0x2c
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	3342      	adds	r3, #66	; 0x42
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80099b6:	e093      	b.n	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	212c      	movs	r1, #44	; 0x2c
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	3342      	adds	r3, #66	; 0x42
 80099c6:	2202      	movs	r2, #2
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e089      	b.n	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80099cc:	78bb      	ldrb	r3, [r7, #2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11d      	bne.n	8009a0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	212c      	movs	r1, #44	; 0x2c
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	4413      	add	r3, r2
 80099de:	3355      	adds	r3, #85	; 0x55
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	212c      	movs	r1, #44	; 0x2c
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	3342      	adds	r3, #66	; 0x42
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80099f8:	e073      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	212c      	movs	r1, #44	; 0x2c
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	3342      	adds	r3, #66	; 0x42
 8009a08:	2202      	movs	r2, #2
 8009a0a:	701a      	strb	r2, [r3, #0]
      break;
 8009a0c:	e069      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	212c      	movs	r1, #44	; 0x2c
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	3354      	adds	r3, #84	; 0x54
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	212c      	movs	r1, #44	; 0x2c
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3342      	adds	r3, #66	; 0x42
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
      break;
 8009a34:	e055      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	212c      	movs	r1, #44	; 0x2c
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	3342      	adds	r3, #66	; 0x42
 8009a44:	2202      	movs	r2, #2
 8009a46:	701a      	strb	r2, [r3, #0]
      break;
 8009a48:	e04b      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11d      	bne.n	8009a8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	212c      	movs	r1, #44	; 0x2c
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3355      	adds	r3, #85	; 0x55
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	212c      	movs	r1, #44	; 0x2c
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	3342      	adds	r3, #66	; 0x42
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009a76:	e034      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3342      	adds	r3, #66	; 0x42
 8009a86:	2202      	movs	r2, #2
 8009a88:	701a      	strb	r2, [r3, #0]
      break;
 8009a8a:	e02a      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	212c      	movs	r1, #44	; 0x2c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	3354      	adds	r3, #84	; 0x54
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d109      	bne.n	8009ab4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	3342      	adds	r3, #66	; 0x42
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
      break;
 8009ab2:	e016      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	212c      	movs	r1, #44	; 0x2c
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	3342      	adds	r3, #66	; 0x42
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	701a      	strb	r2, [r3, #0]
      break;
 8009ac6:	e00c      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	212c      	movs	r1, #44	; 0x2c
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3342      	adds	r3, #66	; 0x42
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
      break;
 8009ada:	e002      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009ae0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	212c      	movs	r1, #44	; 0x2c
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	4413      	add	r3, r2
 8009aee:	3344      	adds	r3, #68	; 0x44
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	8b3a      	ldrh	r2, [r7, #24]
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	202c      	movs	r0, #44	; 0x2c
 8009afc:	fb00 f303 	mul.w	r3, r0, r3
 8009b00:	440b      	add	r3, r1
 8009b02:	334c      	adds	r3, #76	; 0x4c
 8009b04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	212c      	movs	r1, #44	; 0x2c
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	3360      	adds	r3, #96	; 0x60
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	212c      	movs	r1, #44	; 0x2c
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	3350      	adds	r3, #80	; 0x50
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	212c      	movs	r1, #44	; 0x2c
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	3339      	adds	r3, #57	; 0x39
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	212c      	movs	r1, #44	; 0x2c
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	3361      	adds	r3, #97	; 0x61
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	222c      	movs	r2, #44	; 0x2c
 8009b56:	fb02 f303 	mul.w	r3, r2, r3
 8009b5a:	3338      	adds	r3, #56	; 0x38
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	18d1      	adds	r1, r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	f00b fd2c 	bl	80155c4 <USB_HC_StartXfer>
 8009b6c:	4603      	mov	r3, r0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f00b fa30 	bl	8014ff4 <USB_GetMode>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	f040 80fa 	bne.w	8009d90 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f00b f9f3 	bl	8014f8c <USB_ReadInterrupts>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80f0 	beq.w	8009d8e <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f00b f9ea 	bl	8014f8c <USB_ReadInterrupts>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc2:	d104      	bne.n	8009bce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f00b f9da 	bl	8014f8c <USB_ReadInterrupts>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009be2:	d104      	bne.n	8009bee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f00b f9ca 	bl	8014f8c <USB_ReadInterrupts>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c02:	d104      	bne.n	8009c0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f00b f9ba 	bl	8014f8c <USB_ReadInterrupts>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2202      	movs	r2, #2
 8009c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f00b f9ac 	bl	8014f8c <USB_ReadInterrupts>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c3e:	d120      	bne.n	8009c82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009c48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d113      	bne.n	8009c82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c5a:	2110      	movs	r1, #16
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	f00b f89b 	bl	8014d98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f00b f8cc 	bl	8014e00 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d105      	bne.n	8009c7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2101      	movs	r1, #1
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00b fab8 	bl	80151ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7fb f81d 	bl	8004cbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f00b f980 	bl	8014f8c <USB_ReadInterrupts>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c96:	d102      	bne.n	8009c9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f9a3 	bl	800afe4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f00b f972 	bl	8014f8c <USB_ReadInterrupts>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f003 0308 	and.w	r3, r3, #8
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	d106      	bne.n	8009cc0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7fa ffe6 	bl	8004c84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f00b f961 	bl	8014f8c <USB_ReadInterrupts>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b10      	cmp	r3, #16
 8009cd2:	d101      	bne.n	8009cd8 <HAL_HCD_IRQHandler+0x160>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <HAL_HCD_IRQHandler+0x162>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d012      	beq.n	8009d04 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	699a      	ldr	r2, [r3, #24]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0210 	bic.w	r2, r2, #16
 8009cec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f8a6 	bl	800ae40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0210 	orr.w	r2, r2, #16
 8009d02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f00b f93f 	bl	8014f8c <USB_ReadInterrupts>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d18:	d13a      	bne.n	8009d90 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f00b fd92 	bl	8015848 <USB_HC_ReadInterrupt>
 8009d24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e025      	b.n	8009d78 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d018      	beq.n	8009d72 <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d56:	d106      	bne.n	8009d66 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f8ab 	bl	8009eba <HCD_HC_IN_IRQHandler>
 8009d64:	e005      	b.n	8009d72 <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fcb5 	bl	800a6dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	3301      	adds	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d3d4      	bcc.n	8009d2c <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d8a:	615a      	str	r2, [r3, #20]
 8009d8c:	e000      	b.n	8009d90 <HAL_HCD_IRQHandler+0x218>
      return;
 8009d8e:	bf00      	nop
    }
  }
}
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_HCD_Start+0x16>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e013      	b.n	8009dd4 <HAL_HCD_Start+0x3e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2101      	movs	r1, #1
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f00b fa7d 	bl	80152ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00a ff79 	bl	8014cbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_HCD_Stop+0x16>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e00d      	b.n	8009e0e <HAL_HCD_Stop+0x32>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f00b fe6c 	bl	8015adc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f00b fa1f 	bl	8015266 <USB_ResetPort>
 8009e28:	4603      	mov	r3, r0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	212c      	movs	r1, #44	; 0x2c
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
 8009e48:	4413      	add	r3, r2
 8009e4a:	3360      	adds	r3, #96	; 0x60
 8009e4c:	781b      	ldrb	r3, [r3, #0]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	212c      	movs	r1, #44	; 0x2c
 8009e6c:	fb01 f303 	mul.w	r3, r1, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	3350      	adds	r3, #80	; 0x50
 8009e74:	681b      	ldr	r3, [r3, #0]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b082      	sub	sp, #8
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f00b fa63 	bl	801535a <USB_GetCurrentFrame>
 8009e94:	4603      	mov	r3, r0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f00b fa3e 	bl	801532c <USB_GetHostSpeed>
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b086      	sub	sp, #24
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f00b f86a 	bl	8014fb2 <USB_ReadChInterrupts>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d119      	bne.n	8009f1c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	212c      	movs	r1, #44	; 0x2c
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	4413      	add	r3, r2
 8009f06:	3361      	adds	r3, #97	; 0x61
 8009f08:	2207      	movs	r2, #7
 8009f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f00b fca8 	bl	801586a <USB_HC_Halt>
 8009f1a:	e09a      	b.n	800a052 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f00b f844 	bl	8014fb2 <USB_ReadChInterrupts>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f34:	d11a      	bne.n	8009f6c <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f42:	461a      	mov	r2, r3
 8009f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	212c      	movs	r1, #44	; 0x2c
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	3361      	adds	r3, #97	; 0x61
 8009f58:	2208      	movs	r2, #8
 8009f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	78fa      	ldrb	r2, [r7, #3]
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f00b fc80 	bl	801586a <USB_HC_Halt>
 8009f6a:	e072      	b.n	800a052 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f00b f81c 	bl	8014fb2 <USB_ReadChInterrupts>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f003 0308 	and.w	r3, r3, #8
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d119      	bne.n	8009fb8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f90:	461a      	mov	r2, r3
 8009f92:	2308      	movs	r3, #8
 8009f94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	212c      	movs	r1, #44	; 0x2c
 8009f9c:	fb01 f303 	mul.w	r3, r1, r3
 8009fa0:	4413      	add	r3, r2
 8009fa2:	3361      	adds	r3, #97	; 0x61
 8009fa4:	2206      	movs	r2, #6
 8009fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f00b fc5a 	bl	801586a <USB_HC_Halt>
 8009fb6:	e04c      	b.n	800a052 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	78fa      	ldrb	r2, [r7, #3]
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f00a fff6 	bl	8014fb2 <USB_ReadChInterrupts>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fd0:	d11a      	bne.n	800a008 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	212c      	movs	r1, #44	; 0x2c
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	3361      	adds	r3, #97	; 0x61
 8009ff4:	2209      	movs	r2, #9
 8009ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	78fa      	ldrb	r2, [r7, #3]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f00b fc32 	bl	801586a <USB_HC_Halt>
 800a006:	e024      	b.n	800a052 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f00a ffce 	bl	8014fb2 <USB_ReadChInterrupts>
 800a016:	4603      	mov	r3, r0
 800a018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01c:	2b80      	cmp	r3, #128	; 0x80
 800a01e:	d118      	bne.n	800a052 <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	4413      	add	r3, r2
 800a028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a02c:	461a      	mov	r2, r3
 800a02e:	2380      	movs	r3, #128	; 0x80
 800a030:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	212c      	movs	r1, #44	; 0x2c
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	4413      	add	r3, r2
 800a03e:	3361      	adds	r3, #97	; 0x61
 800a040:	2207      	movs	r2, #7
 800a042:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f00b fc0c 	bl	801586a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	78fa      	ldrb	r2, [r7, #3]
 800a058:	4611      	mov	r1, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f00a ffa9 	bl	8014fb2 <USB_ReadChInterrupts>
 800a060:	4603      	mov	r3, r0
 800a062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06a:	d111      	bne.n	800a090 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f00b fbf8 	bl	801586a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	4413      	add	r3, r2
 800a082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a086:	461a      	mov	r2, r3
 800a088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a08c:	6093      	str	r3, [r2, #8]
 800a08e:	e322      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	4611      	mov	r1, r2
 800a098:	4618      	mov	r0, r3
 800a09a:	f00a ff8a 	bl	8014fb2 <USB_ReadChInterrupts>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	f040 80f0 	bne.w	800a28a <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d019      	beq.n	800a0f8 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	212c      	movs	r1, #44	; 0x2c
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	3348      	adds	r3, #72	; 0x48
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	1a8a      	subs	r2, r1, r2
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	202c      	movs	r0, #44	; 0x2c
 800a0ee:	fb00 f303 	mul.w	r3, r0, r3
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3350      	adds	r3, #80	; 0x50
 800a0f6:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	212c      	movs	r1, #44	; 0x2c
 800a0fe:	fb01 f303 	mul.w	r3, r1, r3
 800a102:	4413      	add	r3, r2
 800a104:	3361      	adds	r3, #97	; 0x61
 800a106:	2201      	movs	r2, #1
 800a108:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	212c      	movs	r1, #44	; 0x2c
 800a110:	fb01 f303 	mul.w	r3, r1, r3
 800a114:	4413      	add	r3, r2
 800a116:	335c      	adds	r3, #92	; 0x5c
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a128:	461a      	mov	r2, r3
 800a12a:	2301      	movs	r3, #1
 800a12c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	212c      	movs	r1, #44	; 0x2c
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	4413      	add	r3, r2
 800a13a:	333f      	adds	r3, #63	; 0x3f
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	212c      	movs	r1, #44	; 0x2c
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	4413      	add	r3, r2
 800a14e:	333f      	adds	r3, #63	; 0x3f
 800a150:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a152:	2b02      	cmp	r3, #2
 800a154:	d110      	bne.n	800a178 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f00b fb83 	bl	801586a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a170:	461a      	mov	r2, r3
 800a172:	2310      	movs	r3, #16
 800a174:	6093      	str	r3, [r2, #8]
 800a176:	e039      	b.n	800a1ec <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	212c      	movs	r1, #44	; 0x2c
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	333f      	adds	r3, #63	; 0x3f
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d009      	beq.n	800a1a0 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	212c      	movs	r1, #44	; 0x2c
 800a192:	fb01 f303 	mul.w	r3, r1, r3
 800a196:	4413      	add	r3, r2
 800a198:	333f      	adds	r3, #63	; 0x3f
 800a19a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d125      	bne.n	800a1ec <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	78fa      	ldrb	r2, [r7, #3]
 800a1b0:	0151      	lsls	r1, r2, #5
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1be:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	212c      	movs	r1, #44	; 0x2c
 800a1c6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3360      	adds	r3, #96	; 0x60
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	212c      	movs	r1, #44	; 0x2c
 800a1d8:	fb01 f303 	mul.w	r3, r1, r3
 800a1dc:	4413      	add	r3, r2
 800a1de:	3360      	adds	r3, #96	; 0x60
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7fa fd76 	bl	8004cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d135      	bne.n	800a260 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	212c      	movs	r1, #44	; 0x2c
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	4413      	add	r3, r2
 800a200:	3350      	adds	r3, #80	; 0x50
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	202c      	movs	r0, #44	; 0x2c
 800a20a:	fb00 f202 	mul.w	r2, r0, r2
 800a20e:	440a      	add	r2, r1
 800a210:	3240      	adds	r2, #64	; 0x40
 800a212:	8812      	ldrh	r2, [r2, #0]
 800a214:	4413      	add	r3, r2
 800a216:	3b01      	subs	r3, #1
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	202c      	movs	r0, #44	; 0x2c
 800a21e:	fb00 f202 	mul.w	r2, r0, r2
 800a222:	440a      	add	r2, r1
 800a224:	3240      	adds	r2, #64	; 0x40
 800a226:	8812      	ldrh	r2, [r2, #0]
 800a228:	fbb3 f3f2 	udiv	r3, r3, r2
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 8250 	beq.w	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	212c      	movs	r1, #44	; 0x2c
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	4413      	add	r3, r2
 800a242:	3354      	adds	r3, #84	; 0x54
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	f082 0201 	eor.w	r2, r2, #1
 800a24c:	b2d0      	uxtb	r0, r2
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	212c      	movs	r1, #44	; 0x2c
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3354      	adds	r3, #84	; 0x54
 800a25a:	4602      	mov	r2, r0
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	e23a      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	212c      	movs	r1, #44	; 0x2c
 800a266:	fb01 f303 	mul.w	r3, r1, r3
 800a26a:	4413      	add	r3, r2
 800a26c:	3354      	adds	r3, #84	; 0x54
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	f082 0201 	eor.w	r2, r2, #1
 800a276:	b2d0      	uxtb	r0, r2
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	212c      	movs	r1, #44	; 0x2c
 800a27c:	fb01 f303 	mul.w	r3, r1, r3
 800a280:	4413      	add	r3, r2
 800a282:	3354      	adds	r3, #84	; 0x54
 800a284:	4602      	mov	r2, r0
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e225      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f00a fe8d 	bl	8014fb2 <USB_ReadChInterrupts>
 800a298:	4603      	mov	r3, r0
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d109      	bne.n	800a2b6 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	6093      	str	r3, [r2, #8]
 800a2b4:	e20f      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f00a fe77 	bl	8014fb2 <USB_ReadChInterrupts>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	f040 8168 	bne.w	800a5a0 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2dc:	461a      	mov	r2, r3
 800a2de:	2302      	movs	r3, #2
 800a2e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	212c      	movs	r1, #44	; 0x2c
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3361      	adds	r3, #97	; 0x61
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d112      	bne.n	800a31c <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	212c      	movs	r1, #44	; 0x2c
 800a2fc:	fb01 f303 	mul.w	r3, r1, r3
 800a300:	4413      	add	r3, r2
 800a302:	3361      	adds	r3, #97	; 0x61
 800a304:	2202      	movs	r2, #2
 800a306:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	212c      	movs	r1, #44	; 0x2c
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	3360      	adds	r3, #96	; 0x60
 800a316:	2201      	movs	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	e133      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	212c      	movs	r1, #44	; 0x2c
 800a322:	fb01 f303 	mul.w	r3, r1, r3
 800a326:	4413      	add	r3, r2
 800a328:	3361      	adds	r3, #97	; 0x61
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b06      	cmp	r3, #6
 800a32e:	d112      	bne.n	800a356 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	212c      	movs	r1, #44	; 0x2c
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	4413      	add	r3, r2
 800a33c:	3361      	adds	r3, #97	; 0x61
 800a33e:	2202      	movs	r2, #2
 800a340:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	212c      	movs	r1, #44	; 0x2c
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	3360      	adds	r3, #96	; 0x60
 800a350:	2205      	movs	r2, #5
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e116      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	212c      	movs	r1, #44	; 0x2c
 800a35c:	fb01 f303 	mul.w	r3, r1, r3
 800a360:	4413      	add	r3, r2
 800a362:	3361      	adds	r3, #97	; 0x61
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b07      	cmp	r3, #7
 800a368:	d009      	beq.n	800a37e <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	212c      	movs	r1, #44	; 0x2c
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	4413      	add	r3, r2
 800a376:	3361      	adds	r3, #97	; 0x61
 800a378:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d158      	bne.n	800a430 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	212c      	movs	r1, #44	; 0x2c
 800a384:	fb01 f303 	mul.w	r3, r1, r3
 800a388:	4413      	add	r3, r2
 800a38a:	3361      	adds	r3, #97	; 0x61
 800a38c:	2202      	movs	r2, #2
 800a38e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	222c      	movs	r2, #44	; 0x2c
 800a396:	fb03 f202 	mul.w	r2, r3, r2
 800a39a:	440a      	add	r2, r1
 800a39c:	325c      	adds	r2, #92	; 0x5c
 800a39e:	6812      	ldr	r2, [r2, #0]
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	202c      	movs	r0, #44	; 0x2c
 800a3a6:	fb00 f303 	mul.w	r3, r0, r3
 800a3aa:	440b      	add	r3, r1
 800a3ac:	335c      	adds	r3, #92	; 0x5c
 800a3ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	212c      	movs	r1, #44	; 0x2c
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	335c      	adds	r3, #92	; 0x5c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d912      	bls.n	800a3ea <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	212c      	movs	r1, #44	; 0x2c
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	335c      	adds	r3, #92	; 0x5c
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	212c      	movs	r1, #44	; 0x2c
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3360      	adds	r3, #96	; 0x60
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a3e8:	e0cc      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	212c      	movs	r1, #44	; 0x2c
 800a3f0:	fb01 f303 	mul.w	r3, r1, r3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3360      	adds	r3, #96	; 0x60
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	4413      	add	r3, r2
 800a404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a412:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a41a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a428:	461a      	mov	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a42e:	e0a9      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	212c      	movs	r1, #44	; 0x2c
 800a436:	fb01 f303 	mul.w	r3, r1, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	3361      	adds	r3, #97	; 0x61
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b05      	cmp	r3, #5
 800a442:	d109      	bne.n	800a458 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	212c      	movs	r1, #44	; 0x2c
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	4413      	add	r3, r2
 800a450:	3361      	adds	r3, #97	; 0x61
 800a452:	2202      	movs	r2, #2
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e095      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	212c      	movs	r1, #44	; 0x2c
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	3361      	adds	r3, #97	; 0x61
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d109      	bne.n	800a480 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	212c      	movs	r1, #44	; 0x2c
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	4413      	add	r3, r2
 800a478:	3361      	adds	r3, #97	; 0x61
 800a47a:	2202      	movs	r2, #2
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	e081      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	212c      	movs	r1, #44	; 0x2c
 800a486:	fb01 f303 	mul.w	r3, r1, r3
 800a48a:	4413      	add	r3, r2
 800a48c:	3361      	adds	r3, #97	; 0x61
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b04      	cmp	r3, #4
 800a492:	d13f      	bne.n	800a514 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	212c      	movs	r1, #44	; 0x2c
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	4413      	add	r3, r2
 800a4a0:	3361      	adds	r3, #97	; 0x61
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	212c      	movs	r1, #44	; 0x2c
 800a4ac:	fb01 f303 	mul.w	r3, r1, r3
 800a4b0:	4413      	add	r3, r2
 800a4b2:	3360      	adds	r3, #96	; 0x60
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	212c      	movs	r1, #44	; 0x2c
 800a4be:	fb01 f303 	mul.w	r3, r1, r3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	333f      	adds	r3, #63	; 0x3f
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d009      	beq.n	800a4e0 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	212c      	movs	r1, #44	; 0x2c
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	333f      	adds	r3, #63	; 0x3f
 800a4da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d151      	bne.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	4413      	add	r3, r2
 800a508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50c:	461a      	mov	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e037      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	212c      	movs	r1, #44	; 0x2c
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	3361      	adds	r3, #97	; 0x61
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b08      	cmp	r3, #8
 800a526:	d122      	bne.n	800a56e <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3361      	adds	r3, #97	; 0x61
 800a536:	2202      	movs	r2, #2
 800a538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	222c      	movs	r2, #44	; 0x2c
 800a540:	fb03 f202 	mul.w	r2, r3, r2
 800a544:	440a      	add	r2, r1
 800a546:	325c      	adds	r2, #92	; 0x5c
 800a548:	6812      	ldr	r2, [r2, #0]
 800a54a:	3201      	adds	r2, #1
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	202c      	movs	r0, #44	; 0x2c
 800a550:	fb00 f303 	mul.w	r3, r0, r3
 800a554:	440b      	add	r3, r1
 800a556:	335c      	adds	r3, #92	; 0x5c
 800a558:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	212c      	movs	r1, #44	; 0x2c
 800a560:	fb01 f303 	mul.w	r3, r1, r3
 800a564:	4413      	add	r3, r2
 800a566:	3360      	adds	r3, #96	; 0x60
 800a568:	2204      	movs	r2, #4
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e00a      	b.n	800a584 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	212c      	movs	r1, #44	; 0x2c
 800a574:	fb01 f303 	mul.w	r3, r1, r3
 800a578:	4413      	add	r3, r2
 800a57a:	3361      	adds	r3, #97	; 0x61
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	f000 80a8 	beq.w	800a6d4 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	212c      	movs	r1, #44	; 0x2c
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
 800a58e:	4413      	add	r3, r2
 800a590:	3360      	adds	r3, #96	; 0x60
 800a592:	781a      	ldrb	r2, [r3, #0]
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7fa fb9d 	bl	8004cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a59e:	e09a      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	78fa      	ldrb	r2, [r7, #3]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f00a fd02 	bl	8014fb2 <USB_ReadChInterrupts>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b4:	2b40      	cmp	r3, #64	; 0x40
 800a5b6:	d122      	bne.n	800a5fe <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2340      	movs	r3, #64	; 0x40
 800a5c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	212c      	movs	r1, #44	; 0x2c
 800a5d0:	fb01 f303 	mul.w	r3, r1, r3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3361      	adds	r3, #97	; 0x61
 800a5d8:	2205      	movs	r2, #5
 800a5da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	212c      	movs	r1, #44	; 0x2c
 800a5e2:	fb01 f303 	mul.w	r3, r1, r3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	335c      	adds	r3, #92	; 0x5c
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	78fa      	ldrb	r2, [r7, #3]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f00b f937 	bl	801586a <USB_HC_Halt>
 800a5fc:	e06b      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f00a fcd3 	bl	8014fb2 <USB_ReadChInterrupts>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b10      	cmp	r3, #16
 800a614:	d15f      	bne.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	212c      	movs	r1, #44	; 0x2c
 800a61c:	fb01 f303 	mul.w	r3, r1, r3
 800a620:	4413      	add	r3, r2
 800a622:	333f      	adds	r3, #63	; 0x3f
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b03      	cmp	r3, #3
 800a628:	d119      	bne.n	800a65e <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	212c      	movs	r1, #44	; 0x2c
 800a630:	fb01 f303 	mul.w	r3, r1, r3
 800a634:	4413      	add	r3, r2
 800a636:	335c      	adds	r3, #92	; 0x5c
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	212c      	movs	r1, #44	; 0x2c
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	4413      	add	r3, r2
 800a648:	3361      	adds	r3, #97	; 0x61
 800a64a:	2204      	movs	r2, #4
 800a64c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f00b f907 	bl	801586a <USB_HC_Halt>
 800a65c:	e030      	b.n	800a6c0 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	212c      	movs	r1, #44	; 0x2c
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	4413      	add	r3, r2
 800a66a:	333f      	adds	r3, #63	; 0x3f
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	212c      	movs	r1, #44	; 0x2c
 800a678:	fb01 f303 	mul.w	r3, r1, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	333f      	adds	r3, #63	; 0x3f
 800a680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a682:	2b02      	cmp	r3, #2
 800a684:	d11c      	bne.n	800a6c0 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a686:	78fb      	ldrb	r3, [r7, #3]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	212c      	movs	r1, #44	; 0x2c
 800a68c:	fb01 f303 	mul.w	r3, r1, r3
 800a690:	4413      	add	r3, r2
 800a692:	335c      	adds	r3, #92	; 0x5c
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10f      	bne.n	800a6c0 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	212c      	movs	r1, #44	; 0x2c
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3361      	adds	r3, #97	; 0x61
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f00b f8d5 	bl	801586a <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	6093      	str	r3, [r2, #8]
 800a6d2:	e000      	b.n	800a6d6 <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a6d4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f00a fc59 	bl	8014fb2 <USB_ReadChInterrupts>
 800a700:	4603      	mov	r3, r0
 800a702:	f003 0304 	and.w	r3, r3, #4
 800a706:	2b04      	cmp	r3, #4
 800a708:	d119      	bne.n	800a73e <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	461a      	mov	r2, r3
 800a718:	2304      	movs	r3, #4
 800a71a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	212c      	movs	r1, #44	; 0x2c
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	3361      	adds	r3, #97	; 0x61
 800a72a:	2207      	movs	r2, #7
 800a72c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	78fa      	ldrb	r2, [r7, #3]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f00b f897 	bl	801586a <USB_HC_Halt>
 800a73c:	e37d      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f00a fc33 	bl	8014fb2 <USB_ReadChInterrupts>
 800a74c:	4603      	mov	r3, r0
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b20      	cmp	r3, #32
 800a754:	d136      	bne.n	800a7c4 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a762:	461a      	mov	r2, r3
 800a764:	2320      	movs	r3, #32
 800a766:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	212c      	movs	r1, #44	; 0x2c
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	4413      	add	r3, r2
 800a774:	333d      	adds	r3, #61	; 0x3d
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	f040 835e 	bne.w	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	212c      	movs	r1, #44	; 0x2c
 800a784:	fb01 f303 	mul.w	r3, r1, r3
 800a788:	4413      	add	r3, r2
 800a78a:	333d      	adds	r3, #61	; 0x3d
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	212c      	movs	r1, #44	; 0x2c
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3360      	adds	r3, #96	; 0x60
 800a79e:	2202      	movs	r2, #2
 800a7a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	212c      	movs	r1, #44	; 0x2c
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3361      	adds	r3, #97	; 0x61
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f00b f854 	bl	801586a <USB_HC_Halt>
 800a7c2:	e33a      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f00a fbf0 	bl	8014fb2 <USB_ReadChInterrupts>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7dc:	d111      	bne.n	800a802 <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f00b f835 	bl	801586a <USB_HC_Halt>
 800a800:	e31b      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	4611      	mov	r1, r2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f00a fbd1 	bl	8014fb2 <USB_ReadChInterrupts>
 800a810:	4603      	mov	r3, r0
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b01      	cmp	r3, #1
 800a818:	d140      	bne.n	800a89c <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	212c      	movs	r1, #44	; 0x2c
 800a820:	fb01 f303 	mul.w	r3, r1, r3
 800a824:	4413      	add	r3, r2
 800a826:	335c      	adds	r3, #92	; 0x5c
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f00a fbbc 	bl	8014fb2 <USB_ReadChInterrupts>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a840:	2b40      	cmp	r3, #64	; 0x40
 800a842:	d111      	bne.n	800a868 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	212c      	movs	r1, #44	; 0x2c
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	4413      	add	r3, r2
 800a850:	333d      	adds	r3, #61	; 0x3d
 800a852:	2201      	movs	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a862:	461a      	mov	r2, r3
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a874:	461a      	mov	r2, r3
 800a876:	2301      	movs	r3, #1
 800a878:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	212c      	movs	r1, #44	; 0x2c
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	4413      	add	r3, r2
 800a886:	3361      	adds	r3, #97	; 0x61
 800a888:	2201      	movs	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f00a ffe8 	bl	801586a <USB_HC_Halt>
 800a89a:	e2ce      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	78fa      	ldrb	r2, [r7, #3]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f00a fb84 	bl	8014fb2 <USB_ReadChInterrupts>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b0:	2b40      	cmp	r3, #64	; 0x40
 800a8b2:	d12b      	bne.n	800a90c <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	212c      	movs	r1, #44	; 0x2c
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	4413      	add	r3, r2
 800a8c0:	3361      	adds	r3, #97	; 0x61
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	212c      	movs	r1, #44	; 0x2c
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	4413      	add	r3, r2
 800a8d2:	333d      	adds	r3, #61	; 0x3d
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	212c      	movs	r1, #44	; 0x2c
 800a8de:	fb01 f303 	mul.w	r3, r1, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	335c      	adds	r3, #92	; 0x5c
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	78fa      	ldrb	r2, [r7, #3]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f00a ffb9 	bl	801586a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a904:	461a      	mov	r2, r3
 800a906:	2340      	movs	r3, #64	; 0x40
 800a908:	6093      	str	r3, [r2, #8]
 800a90a:	e296      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	78fa      	ldrb	r2, [r7, #3]
 800a912:	4611      	mov	r1, r2
 800a914:	4618      	mov	r0, r3
 800a916:	f00a fb4c 	bl	8014fb2 <USB_ReadChInterrupts>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b08      	cmp	r3, #8
 800a922:	d119      	bne.n	800a958 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a930:	461a      	mov	r2, r3
 800a932:	2308      	movs	r3, #8
 800a934:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	212c      	movs	r1, #44	; 0x2c
 800a93c:	fb01 f303 	mul.w	r3, r1, r3
 800a940:	4413      	add	r3, r2
 800a942:	3361      	adds	r3, #97	; 0x61
 800a944:	2206      	movs	r2, #6
 800a946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	78fa      	ldrb	r2, [r7, #3]
 800a94e:	4611      	mov	r1, r2
 800a950:	4618      	mov	r0, r3
 800a952:	f00a ff8a 	bl	801586a <USB_HC_Halt>
 800a956:	e270      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	78fa      	ldrb	r2, [r7, #3]
 800a95e:	4611      	mov	r1, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f00a fb26 	bl	8014fb2 <USB_ReadChInterrupts>
 800a966:	4603      	mov	r3, r0
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d13f      	bne.n	800a9f0 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	212c      	movs	r1, #44	; 0x2c
 800a976:	fb01 f303 	mul.w	r3, r1, r3
 800a97a:	4413      	add	r3, r2
 800a97c:	335c      	adds	r3, #92	; 0x5c
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	212c      	movs	r1, #44	; 0x2c
 800a988:	fb01 f303 	mul.w	r3, r1, r3
 800a98c:	4413      	add	r3, r2
 800a98e:	3361      	adds	r3, #97	; 0x61
 800a990:	2204      	movs	r2, #4
 800a992:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	212c      	movs	r1, #44	; 0x2c
 800a99a:	fb01 f303 	mul.w	r3, r1, r3
 800a99e:	4413      	add	r3, r2
 800a9a0:	333d      	adds	r3, #61	; 0x3d
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d112      	bne.n	800a9ce <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	212c      	movs	r1, #44	; 0x2c
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	333c      	adds	r3, #60	; 0x3c
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	212c      	movs	r1, #44	; 0x2c
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	333d      	adds	r3, #61	; 0x3d
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f00a ff47 	bl	801586a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	6093      	str	r3, [r2, #8]
 800a9ee:	e224      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f00a fada 	bl	8014fb2 <USB_ReadChInterrupts>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa04:	2b80      	cmp	r3, #128	; 0x80
 800aa06:	d161      	bne.n	800aacc <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d110      	bne.n	800aa32 <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	212c      	movs	r1, #44	; 0x2c
 800aa16:	fb01 f303 	mul.w	r3, r1, r3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	3361      	adds	r3, #97	; 0x61
 800aa1e:	2207      	movs	r2, #7
 800aa20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	78fa      	ldrb	r2, [r7, #3]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f00a ff1d 	bl	801586a <USB_HC_Halt>
 800aa30:	e042      	b.n	800aab8 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	222c      	movs	r2, #44	; 0x2c
 800aa38:	fb03 f202 	mul.w	r2, r3, r2
 800aa3c:	440a      	add	r2, r1
 800aa3e:	325c      	adds	r2, #92	; 0x5c
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	3201      	adds	r2, #1
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	202c      	movs	r0, #44	; 0x2c
 800aa48:	fb00 f303 	mul.w	r3, r0, r3
 800aa4c:	440b      	add	r3, r1
 800aa4e:	335c      	adds	r3, #92	; 0x5c
 800aa50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	212c      	movs	r1, #44	; 0x2c
 800aa58:	fb01 f303 	mul.w	r3, r1, r3
 800aa5c:	4413      	add	r3, r2
 800aa5e:	335c      	adds	r3, #92	; 0x5c
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d91f      	bls.n	800aaa6 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	212c      	movs	r1, #44	; 0x2c
 800aa6c:	fb01 f303 	mul.w	r3, r1, r3
 800aa70:	4413      	add	r3, r2
 800aa72:	335c      	adds	r3, #92	; 0x5c
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	212c      	movs	r1, #44	; 0x2c
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	4413      	add	r3, r2
 800aa84:	3360      	adds	r3, #96	; 0x60
 800aa86:	2204      	movs	r2, #4
 800aa88:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	212c      	movs	r1, #44	; 0x2c
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	4413      	add	r3, r2
 800aa96:	3360      	adds	r3, #96	; 0x60
 800aa98:	781a      	ldrb	r2, [r3, #0]
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fa f91a 	bl	8004cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aaa4:	e008      	b.n	800aab8 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	212c      	movs	r1, #44	; 0x2c
 800aaac:	fb01 f303 	mul.w	r3, r1, r3
 800aab0:	4413      	add	r3, r2
 800aab2:	3360      	adds	r3, #96	; 0x60
 800aab4:	2202      	movs	r2, #2
 800aab6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac4:	461a      	mov	r2, r3
 800aac6:	2380      	movs	r3, #128	; 0x80
 800aac8:	6093      	str	r3, [r2, #8]
 800aaca:	e1b6      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f00a fa6c 	bl	8014fb2 <USB_ReadChInterrupts>
 800aada:	4603      	mov	r3, r0
 800aadc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aae4:	d11a      	bne.n	800ab1c <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	212c      	movs	r1, #44	; 0x2c
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3361      	adds	r3, #97	; 0x61
 800aaf4:	2209      	movs	r2, #9
 800aaf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f00a feb2 	bl	801586a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ab06:	78fb      	ldrb	r3, [r7, #3]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab12:	461a      	mov	r2, r3
 800ab14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab18:	6093      	str	r3, [r2, #8]
 800ab1a:	e18e      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	4611      	mov	r1, r2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f00a fa44 	bl	8014fb2 <USB_ReadChInterrupts>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	f040 8182 	bne.w	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ab36:	78fb      	ldrb	r3, [r7, #3]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab42:	461a      	mov	r2, r3
 800ab44:	2302      	movs	r3, #2
 800ab46:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	212c      	movs	r1, #44	; 0x2c
 800ab4e:	fb01 f303 	mul.w	r3, r1, r3
 800ab52:	4413      	add	r3, r2
 800ab54:	3361      	adds	r3, #97	; 0x61
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	f040 8087 	bne.w	800ac6c <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	212c      	movs	r1, #44	; 0x2c
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	4413      	add	r3, r2
 800ab6a:	3361      	adds	r3, #97	; 0x61
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	212c      	movs	r1, #44	; 0x2c
 800ab76:	fb01 f303 	mul.w	r3, r1, r3
 800ab7a:	4413      	add	r3, r2
 800ab7c:	3360      	adds	r3, #96	; 0x60
 800ab7e:	2201      	movs	r2, #1
 800ab80:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	212c      	movs	r1, #44	; 0x2c
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	333f      	adds	r3, #63	; 0x3f
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d00a      	beq.n	800abac <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	212c      	movs	r1, #44	; 0x2c
 800ab9c:	fb01 f303 	mul.w	r3, r1, r3
 800aba0:	4413      	add	r3, r2
 800aba2:	333f      	adds	r3, #63	; 0x3f
 800aba4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	f040 8138 	bne.w	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d113      	bne.n	800abdc <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	212c      	movs	r1, #44	; 0x2c
 800abba:	fb01 f303 	mul.w	r3, r1, r3
 800abbe:	4413      	add	r3, r2
 800abc0:	3355      	adds	r3, #85	; 0x55
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	f082 0201 	eor.w	r2, r2, #1
 800abca:	b2d0      	uxtb	r0, r2
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	212c      	movs	r1, #44	; 0x2c
 800abd0:	fb01 f303 	mul.w	r3, r1, r3
 800abd4:	4413      	add	r3, r2
 800abd6:	3355      	adds	r3, #85	; 0x55
 800abd8:	4602      	mov	r2, r0
 800abda:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	f040 811b 	bne.w	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	212c      	movs	r1, #44	; 0x2c
 800abec:	fb01 f303 	mul.w	r3, r1, r3
 800abf0:	4413      	add	r3, r2
 800abf2:	334c      	adds	r3, #76	; 0x4c
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 8110 	beq.w	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	212c      	movs	r1, #44	; 0x2c
 800ac02:	fb01 f303 	mul.w	r3, r1, r3
 800ac06:	4413      	add	r3, r2
 800ac08:	334c      	adds	r3, #76	; 0x4c
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	202c      	movs	r0, #44	; 0x2c
 800ac12:	fb00 f202 	mul.w	r2, r0, r2
 800ac16:	440a      	add	r2, r1
 800ac18:	3240      	adds	r2, #64	; 0x40
 800ac1a:	8812      	ldrh	r2, [r2, #0]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	78fa      	ldrb	r2, [r7, #3]
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	202c      	movs	r0, #44	; 0x2c
 800ac26:	fb00 f202 	mul.w	r2, r0, r2
 800ac2a:	440a      	add	r2, r1
 800ac2c:	3240      	adds	r2, #64	; 0x40
 800ac2e:	8812      	ldrh	r2, [r2, #0]
 800ac30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac34:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 80ed 	beq.w	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	212c      	movs	r1, #44	; 0x2c
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3355      	adds	r3, #85	; 0x55
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	78fb      	ldrb	r3, [r7, #3]
 800ac54:	f082 0201 	eor.w	r2, r2, #1
 800ac58:	b2d0      	uxtb	r0, r2
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	212c      	movs	r1, #44	; 0x2c
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	3355      	adds	r3, #85	; 0x55
 800ac66:	4602      	mov	r2, r0
 800ac68:	701a      	strb	r2, [r3, #0]
 800ac6a:	e0d7      	b.n	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	212c      	movs	r1, #44	; 0x2c
 800ac72:	fb01 f303 	mul.w	r3, r1, r3
 800ac76:	4413      	add	r3, r2
 800ac78:	3361      	adds	r3, #97	; 0x61
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d109      	bne.n	800ac94 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	212c      	movs	r1, #44	; 0x2c
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3361      	adds	r3, #97	; 0x61
 800ac8e:	2202      	movs	r2, #2
 800ac90:	701a      	strb	r2, [r3, #0]
 800ac92:	e0c3      	b.n	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	212c      	movs	r1, #44	; 0x2c
 800ac9a:	fb01 f303 	mul.w	r3, r1, r3
 800ac9e:	4413      	add	r3, r2
 800aca0:	3361      	adds	r3, #97	; 0x61
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d112      	bne.n	800acce <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	212c      	movs	r1, #44	; 0x2c
 800acae:	fb01 f303 	mul.w	r3, r1, r3
 800acb2:	4413      	add	r3, r2
 800acb4:	3361      	adds	r3, #97	; 0x61
 800acb6:	2202      	movs	r2, #2
 800acb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	212c      	movs	r1, #44	; 0x2c
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	3360      	adds	r3, #96	; 0x60
 800acc8:	2202      	movs	r2, #2
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	e0a6      	b.n	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	212c      	movs	r1, #44	; 0x2c
 800acd4:	fb01 f303 	mul.w	r3, r1, r3
 800acd8:	4413      	add	r3, r2
 800acda:	3361      	adds	r3, #97	; 0x61
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b05      	cmp	r3, #5
 800ace0:	d112      	bne.n	800ad08 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ace2:	78fb      	ldrb	r3, [r7, #3]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	212c      	movs	r1, #44	; 0x2c
 800ace8:	fb01 f303 	mul.w	r3, r1, r3
 800acec:	4413      	add	r3, r2
 800acee:	3361      	adds	r3, #97	; 0x61
 800acf0:	2202      	movs	r2, #2
 800acf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	212c      	movs	r1, #44	; 0x2c
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	4413      	add	r3, r2
 800ad00:	3360      	adds	r3, #96	; 0x60
 800ad02:	2202      	movs	r2, #2
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	e089      	b.n	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	212c      	movs	r1, #44	; 0x2c
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	3361      	adds	r3, #97	; 0x61
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b06      	cmp	r3, #6
 800ad1a:	d112      	bne.n	800ad42 <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	212c      	movs	r1, #44	; 0x2c
 800ad22:	fb01 f303 	mul.w	r3, r1, r3
 800ad26:	4413      	add	r3, r2
 800ad28:	3361      	adds	r3, #97	; 0x61
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	212c      	movs	r1, #44	; 0x2c
 800ad34:	fb01 f303 	mul.w	r3, r1, r3
 800ad38:	4413      	add	r3, r2
 800ad3a:	3360      	adds	r3, #96	; 0x60
 800ad3c:	2205      	movs	r2, #5
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e06c      	b.n	800ae1c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	212c      	movs	r1, #44	; 0x2c
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3361      	adds	r3, #97	; 0x61
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b07      	cmp	r3, #7
 800ad54:	d009      	beq.n	800ad6a <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	212c      	movs	r1, #44	; 0x2c
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	3361      	adds	r3, #97	; 0x61
 800ad64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d166      	bne.n	800ae38 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	212c      	movs	r1, #44	; 0x2c
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	3361      	adds	r3, #97	; 0x61
 800ad78:	2202      	movs	r2, #2
 800ad7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	222c      	movs	r2, #44	; 0x2c
 800ad82:	fb03 f202 	mul.w	r2, r3, r2
 800ad86:	440a      	add	r2, r1
 800ad88:	325c      	adds	r2, #92	; 0x5c
 800ad8a:	6812      	ldr	r2, [r2, #0]
 800ad8c:	3201      	adds	r2, #1
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	202c      	movs	r0, #44	; 0x2c
 800ad92:	fb00 f303 	mul.w	r3, r0, r3
 800ad96:	440b      	add	r3, r1
 800ad98:	335c      	adds	r3, #92	; 0x5c
 800ad9a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	212c      	movs	r1, #44	; 0x2c
 800ada2:	fb01 f303 	mul.w	r3, r1, r3
 800ada6:	4413      	add	r3, r2
 800ada8:	335c      	adds	r3, #92	; 0x5c
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b02      	cmp	r3, #2
 800adae:	d912      	bls.n	800add6 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	212c      	movs	r1, #44	; 0x2c
 800adb6:	fb01 f303 	mul.w	r3, r1, r3
 800adba:	4413      	add	r3, r2
 800adbc:	335c      	adds	r3, #92	; 0x5c
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	212c      	movs	r1, #44	; 0x2c
 800adc8:	fb01 f303 	mul.w	r3, r1, r3
 800adcc:	4413      	add	r3, r2
 800adce:	3360      	adds	r3, #96	; 0x60
 800add0:	2204      	movs	r2, #4
 800add2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800add4:	e021      	b.n	800ae1a <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	212c      	movs	r1, #44	; 0x2c
 800addc:	fb01 f303 	mul.w	r3, r1, r3
 800ade0:	4413      	add	r3, r2
 800ade2:	3360      	adds	r3, #96	; 0x60
 800ade4:	2202      	movs	r2, #2
 800ade6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adfe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae14:	461a      	mov	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ae1a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	212c      	movs	r1, #44	; 0x2c
 800ae22:	fb01 f303 	mul.w	r3, r1, r3
 800ae26:	4413      	add	r3, r2
 800ae28:	3360      	adds	r3, #96	; 0x60
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7f9 ff51 	bl	8004cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ae36:	e000      	b.n	800ae3a <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800ae38:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08a      	sub	sp, #40	; 0x28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	0c5b      	lsrs	r3, r3, #17
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	091b      	lsrs	r3, r3, #4
 800ae70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d004      	beq.n	800ae86 <HCD_RXQLVL_IRQHandler+0x46>
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b05      	cmp	r3, #5
 800ae80:	f000 80a9 	beq.w	800afd6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ae84:	e0aa      	b.n	800afdc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80a6 	beq.w	800afda <HCD_RXQLVL_IRQHandler+0x19a>
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	212c      	movs	r1, #44	; 0x2c
 800ae94:	fb01 f303 	mul.w	r3, r1, r3
 800ae98:	4413      	add	r3, r2
 800ae9a:	3344      	adds	r3, #68	; 0x44
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 809b 	beq.w	800afda <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	212c      	movs	r1, #44	; 0x2c
 800aeaa:	fb01 f303 	mul.w	r3, r1, r3
 800aeae:	4413      	add	r3, r2
 800aeb0:	3350      	adds	r3, #80	; 0x50
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	441a      	add	r2, r3
 800aeb8:	6879      	ldr	r1, [r7, #4]
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	202c      	movs	r0, #44	; 0x2c
 800aebe:	fb00 f303 	mul.w	r3, r0, r3
 800aec2:	440b      	add	r3, r1
 800aec4:	334c      	adds	r3, #76	; 0x4c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d87a      	bhi.n	800afc2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	212c      	movs	r1, #44	; 0x2c
 800aed6:	fb01 f303 	mul.w	r3, r1, r3
 800aeda:	4413      	add	r3, r2
 800aedc:	3344      	adds	r3, #68	; 0x44
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	b292      	uxth	r2, r2
 800aee4:	4619      	mov	r1, r3
 800aee6:	f009 fff9 	bl	8014edc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	212c      	movs	r1, #44	; 0x2c
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	4413      	add	r3, r2
 800aef6:	3344      	adds	r3, #68	; 0x44
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	441a      	add	r2, r3
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	202c      	movs	r0, #44	; 0x2c
 800af04:	fb00 f303 	mul.w	r3, r0, r3
 800af08:	440b      	add	r3, r1
 800af0a:	3344      	adds	r3, #68	; 0x44
 800af0c:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	212c      	movs	r1, #44	; 0x2c
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	4413      	add	r3, r2
 800af1a:	3350      	adds	r3, #80	; 0x50
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	441a      	add	r2, r3
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	202c      	movs	r0, #44	; 0x2c
 800af28:	fb00 f303 	mul.w	r3, r0, r3
 800af2c:	440b      	add	r3, r1
 800af2e:	3350      	adds	r3, #80	; 0x50
 800af30:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	0cdb      	lsrs	r3, r3, #19
 800af42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af46:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	212c      	movs	r1, #44	; 0x2c
 800af4e:	fb01 f303 	mul.w	r3, r1, r3
 800af52:	4413      	add	r3, r2
 800af54:	3340      	adds	r3, #64	; 0x40
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	461a      	mov	r2, r3
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d13c      	bne.n	800afda <HCD_RXQLVL_IRQHandler+0x19a>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d039      	beq.n	800afda <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af7c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af84:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af92:	461a      	mov	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	212c      	movs	r1, #44	; 0x2c
 800af9e:	fb01 f303 	mul.w	r3, r1, r3
 800afa2:	4413      	add	r3, r2
 800afa4:	3354      	adds	r3, #84	; 0x54
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f083 0301 	eor.w	r3, r3, #1
 800afac:	b2d8      	uxtb	r0, r3
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	212c      	movs	r1, #44	; 0x2c
 800afb4:	fb01 f303 	mul.w	r3, r1, r3
 800afb8:	4413      	add	r3, r2
 800afba:	3354      	adds	r3, #84	; 0x54
 800afbc:	4602      	mov	r2, r0
 800afbe:	701a      	strb	r2, [r3, #0]
      break;
 800afc0:	e00b      	b.n	800afda <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	212c      	movs	r1, #44	; 0x2c
 800afc8:	fb01 f303 	mul.w	r3, r1, r3
 800afcc:	4413      	add	r3, r2
 800afce:	3360      	adds	r3, #96	; 0x60
 800afd0:	2204      	movs	r2, #4
 800afd2:	701a      	strb	r2, [r3, #0]
      break;
 800afd4:	e001      	b.n	800afda <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800afda:	bf00      	nop
  }
}
 800afdc:	bf00      	nop
 800afde:	3728      	adds	r7, #40	; 0x28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b010:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d10b      	bne.n	800b034 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b01      	cmp	r3, #1
 800b024:	d102      	bne.n	800b02c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7f9 fe3a 	bl	8004ca0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f043 0302 	orr.w	r3, r3, #2
 800b032:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d132      	bne.n	800b0a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f043 0308 	orr.w	r3, r3, #8
 800b044:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d126      	bne.n	800b09e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d113      	bne.n	800b080 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b05e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b062:	d106      	bne.n	800b072 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2102      	movs	r1, #2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f00a f8be 	bl	80151ec <USB_InitFSLSPClkSel>
 800b070:	e011      	b.n	800b096 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2101      	movs	r1, #1
 800b078:	4618      	mov	r0, r3
 800b07a:	f00a f8b7 	bl	80151ec <USB_InitFSLSPClkSel>
 800b07e:	e00a      	b.n	800b096 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d106      	bne.n	800b096 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b08e:	461a      	mov	r2, r3
 800b090:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b094:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f9 fe2c 	bl	8004cf4 <HAL_HCD_PortEnabled_Callback>
 800b09c:	e002      	b.n	800b0a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7f9 fe36 	bl	8004d10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d103      	bne.n	800b0b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f043 0320 	orr.w	r3, r3, #32
 800b0b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6013      	str	r3, [r2, #0]
}
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e07f      	b.n	800b1de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7f7 fdbc 	bl	8002c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2224      	movs	r2, #36	; 0x24
 800b0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0201 	bic.w	r2, r2, #1
 800b10e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b11c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	689a      	ldr	r2, [r3, #8]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b12c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d107      	bne.n	800b146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689a      	ldr	r2, [r3, #8]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b142:	609a      	str	r2, [r3, #8]
 800b144:	e006      	b.n	800b154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	689a      	ldr	r2, [r3, #8]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d104      	bne.n	800b166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6859      	ldr	r1, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b1d      	ldr	r3, [pc, #116]	; (800b1e8 <HAL_I2C_Init+0x11c>)
 800b172:	430b      	orrs	r3, r1
 800b174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	430a      	orrs	r2, r1
 800b19e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69d9      	ldr	r1, [r3, #28]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a1a      	ldr	r2, [r3, #32]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0201 	orr.w	r2, r2, #1
 800b1be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	02008000 	.word	0x02008000

0800b1ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	817b      	strh	r3, [r7, #10]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b20      	cmp	r3, #32
 800b20a:	f040 80da 	bne.w	800b3c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <HAL_I2C_Master_Transmit+0x30>
 800b218:	2302      	movs	r3, #2
 800b21a:	e0d3      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b224:	f7fa f826 	bl	8005274 <HAL_GetTick>
 800b228:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	2319      	movs	r3, #25
 800b230:	2201      	movs	r2, #1
 800b232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 f8f0 	bl	800b41c <I2C_WaitOnFlagUntilTimeout>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e0be      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2221      	movs	r2, #33	; 0x21
 800b24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2210      	movs	r2, #16
 800b252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	893a      	ldrh	r2, [r7, #8]
 800b266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b272:	b29b      	uxth	r3, r3
 800b274:	2bff      	cmp	r3, #255	; 0xff
 800b276:	d90e      	bls.n	800b296 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	22ff      	movs	r2, #255	; 0xff
 800b27c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b282:	b2da      	uxtb	r2, r3
 800b284:	8979      	ldrh	r1, [r7, #10]
 800b286:	4b51      	ldr	r3, [pc, #324]	; (800b3cc <HAL_I2C_Master_Transmit+0x1e0>)
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fa7e 	bl	800b790 <I2C_TransferConfig>
 800b294:	e06c      	b.n	800b370 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	8979      	ldrh	r1, [r7, #10]
 800b2a8:	4b48      	ldr	r3, [pc, #288]	; (800b3cc <HAL_I2C_Master_Transmit+0x1e0>)
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fa6d 	bl	800b790 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b2b6:	e05b      	b.n	800b370 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	6a39      	ldr	r1, [r7, #32]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 f8fc 	bl	800b4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e07b      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	781a      	ldrb	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b300:	b29b      	uxth	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d034      	beq.n	800b370 <HAL_I2C_Master_Transmit+0x184>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d130      	bne.n	800b370 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	2200      	movs	r2, #0
 800b316:	2180      	movs	r1, #128	; 0x80
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f87f 	bl	800b41c <I2C_WaitOnFlagUntilTimeout>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e04d      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2bff      	cmp	r3, #255	; 0xff
 800b330:	d90e      	bls.n	800b350 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	22ff      	movs	r2, #255	; 0xff
 800b336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	8979      	ldrh	r1, [r7, #10]
 800b340:	2300      	movs	r3, #0
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fa21 	bl	800b790 <I2C_TransferConfig>
 800b34e:	e00f      	b.n	800b370 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b354:	b29a      	uxth	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	8979      	ldrh	r1, [r7, #10]
 800b362:	2300      	movs	r3, #0
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fa10 	bl	800b790 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b374:	b29b      	uxth	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d19e      	bne.n	800b2b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	6a39      	ldr	r1, [r7, #32]
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 f8e2 	bl	800b548 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e01a      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2220      	movs	r2, #32
 800b394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6859      	ldr	r1, [r3, #4]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <HAL_I2C_Master_Transmit+0x1e4>)
 800b3a2:	400b      	ands	r3, r1
 800b3a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	80002000 	.word	0x80002000
 800b3d0:	fe00e800 	.word	0xfe00e800

0800b3d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d103      	bne.n	800b3f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d007      	beq.n	800b410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	699a      	ldr	r2, [r3, #24]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0201 	orr.w	r2, r2, #1
 800b40e:	619a      	str	r2, [r3, #24]
  }
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	4613      	mov	r3, r2
 800b42a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b42c:	e031      	b.n	800b492 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b434:	d02d      	beq.n	800b492 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b436:	f7f9 ff1d 	bl	8005274 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d302      	bcc.n	800b44c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d122      	bne.n	800b492 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	4013      	ands	r3, r2
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	429a      	cmp	r2, r3
 800b45a:	bf0c      	ite	eq
 800b45c:	2301      	moveq	r3, #1
 800b45e:	2300      	movne	r3, #0
 800b460:	b2db      	uxtb	r3, r3
 800b462:	461a      	mov	r2, r3
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	429a      	cmp	r2, r3
 800b468:	d113      	bne.n	800b492 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46e:	f043 0220 	orr.w	r2, r3, #32
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2220      	movs	r2, #32
 800b47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e00f      	b.n	800b4b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	699a      	ldr	r2, [r3, #24]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	4013      	ands	r3, r2
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	bf0c      	ite	eq
 800b4a2:	2301      	moveq	r3, #1
 800b4a4:	2300      	movne	r3, #0
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d0be      	beq.n	800b42e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4c6:	e033      	b.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 f87f 	bl	800b5d0 <I2C_IsErrorOccurred>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e031      	b.n	800b540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e2:	d025      	beq.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4e4:	f7f9 fec6 	bl	8005274 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d302      	bcc.n	800b4fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d11a      	bne.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b02      	cmp	r3, #2
 800b506:	d013      	beq.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50c:	f043 0220 	orr.w	r2, r3, #32
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e007      	b.n	800b540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d1c4      	bne.n	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b554:	e02f      	b.n	800b5b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f838 	bl	800b5d0 <I2C_IsErrorOccurred>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e02d      	b.n	800b5c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b56a:	f7f9 fe83 	bl	8005274 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	429a      	cmp	r2, r3
 800b578:	d302      	bcc.n	800b580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11a      	bne.n	800b5b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b20      	cmp	r3, #32
 800b58c:	d013      	beq.n	800b5b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f043 0220 	orr.w	r2, r3, #32
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e007      	b.n	800b5c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	f003 0320 	and.w	r3, r3, #32
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	d1c8      	bne.n	800b556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	; 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f003 0310 	and.w	r3, r3, #16
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d068      	beq.n	800b6ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2210      	movs	r2, #16
 800b602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b604:	e049      	b.n	800b69a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b60c:	d045      	beq.n	800b69a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b60e:	f7f9 fe31 	bl	8005274 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d302      	bcc.n	800b624 <I2C_IsErrorOccurred+0x54>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d13a      	bne.n	800b69a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b62e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b646:	d121      	bne.n	800b68c <I2C_IsErrorOccurred+0xbc>
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b64e:	d01d      	beq.n	800b68c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b650:	7cfb      	ldrb	r3, [r7, #19]
 800b652:	2b20      	cmp	r3, #32
 800b654:	d01a      	beq.n	800b68c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b666:	f7f9 fe05 	bl	8005274 <HAL_GetTick>
 800b66a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b66c:	e00e      	b.n	800b68c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b66e:	f7f9 fe01 	bl	8005274 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b19      	cmp	r3, #25
 800b67a:	d907      	bls.n	800b68c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	f043 0320 	orr.w	r3, r3, #32
 800b682:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b68a:	e006      	b.n	800b69a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b20      	cmp	r3, #32
 800b698:	d1e9      	bne.n	800b66e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	f003 0320 	and.w	r3, r3, #32
 800b6a4:	2b20      	cmp	r3, #32
 800b6a6:	d003      	beq.n	800b6b0 <I2C_IsErrorOccurred+0xe0>
 800b6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0aa      	beq.n	800b606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d103      	bne.n	800b6c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	f043 0304 	orr.w	r3, r3, #4
 800b6c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	f043 0301 	orr.w	r3, r3, #1
 800b6e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00b      	beq.n	800b71a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	f043 0308 	orr.w	r3, r3, #8
 800b708:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00b      	beq.n	800b73c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	f043 0302 	orr.w	r3, r3, #2
 800b72a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01c      	beq.n	800b77e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fe45 	bl	800b3d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6859      	ldr	r1, [r3, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <I2C_IsErrorOccurred+0x1bc>)
 800b756:	400b      	ands	r3, r1
 800b758:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	431a      	orrs	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2220      	movs	r2, #32
 800b76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b782:	4618      	mov	r0, r3
 800b784:	3728      	adds	r7, #40	; 0x28
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	fe00e800 	.word	0xfe00e800

0800b790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607b      	str	r3, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	817b      	strh	r3, [r7, #10]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7a2:	897b      	ldrh	r3, [r7, #10]
 800b7a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7a8:	7a7b      	ldrb	r3, [r7, #9]
 800b7aa:	041b      	lsls	r3, r3, #16
 800b7ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	0d5b      	lsrs	r3, r3, #21
 800b7ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b7ce:	4b08      	ldr	r3, [pc, #32]	; (800b7f0 <I2C_TransferConfig+0x60>)
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	43db      	mvns	r3, r3
 800b7d4:	ea02 0103 	and.w	r1, r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b7e2:	bf00      	nop
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	03ff63ff 	.word	0x03ff63ff

0800b7f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b20      	cmp	r3, #32
 800b808:	d138      	bne.n	800b87c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b810:	2b01      	cmp	r3, #1
 800b812:	d101      	bne.n	800b818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b814:	2302      	movs	r3, #2
 800b816:	e032      	b.n	800b87e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2224      	movs	r2, #36	; 0x24
 800b824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0201 	bic.w	r2, r2, #1
 800b836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6819      	ldr	r1, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f042 0201 	orr.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2220      	movs	r2, #32
 800b86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e000      	b.n	800b87e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b87c:	2302      	movs	r3, #2
  }
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b085      	sub	sp, #20
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d139      	bne.n	800b914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d101      	bne.n	800b8ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e033      	b.n	800b916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2224      	movs	r2, #36	; 0x24
 800b8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0201 	bic.w	r2, r2, #1
 800b8cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b8dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	e000      	b.n	800b916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b914:	2302      	movs	r3, #2
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b92c:	4b19      	ldr	r3, [pc, #100]	; (800b994 <HAL_PWREx_ConfigSupply+0x70>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	2b04      	cmp	r3, #4
 800b936:	d00a      	beq.n	800b94e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b938:	4b16      	ldr	r3, [pc, #88]	; (800b994 <HAL_PWREx_ConfigSupply+0x70>)
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f003 0307 	and.w	r3, r3, #7
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	429a      	cmp	r2, r3
 800b944:	d001      	beq.n	800b94a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e01f      	b.n	800b98a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	e01d      	b.n	800b98a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b94e:	4b11      	ldr	r3, [pc, #68]	; (800b994 <HAL_PWREx_ConfigSupply+0x70>)
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	f023 0207 	bic.w	r2, r3, #7
 800b956:	490f      	ldr	r1, [pc, #60]	; (800b994 <HAL_PWREx_ConfigSupply+0x70>)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b95e:	f7f9 fc89 	bl	8005274 <HAL_GetTick>
 800b962:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b964:	e009      	b.n	800b97a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b966:	f7f9 fc85 	bl	8005274 <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b974:	d901      	bls.n	800b97a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e007      	b.n	800b98a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b97a:	4b06      	ldr	r3, [pc, #24]	; (800b994 <HAL_PWREx_ConfigSupply+0x70>)
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b986:	d1ee      	bne.n	800b966 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	58024800 	.word	0x58024800

0800b998 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	4a04      	ldr	r2, [pc, #16]	; (800b9b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b9a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9a6:	60d3      	str	r3, [r2, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	58024800 	.word	0x58024800

0800b9b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08c      	sub	sp, #48	; 0x30
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d102      	bne.n	800b9cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	f000 bc48 	b.w	800c25c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8088 	beq.w	800baea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9da:	4b99      	ldr	r3, [pc, #612]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b9e4:	4b96      	ldr	r3, [pc, #600]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	2b10      	cmp	r3, #16
 800b9ee:	d007      	beq.n	800ba00 <HAL_RCC_OscConfig+0x48>
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	2b18      	cmp	r3, #24
 800b9f4:	d111      	bne.n	800ba1a <HAL_RCC_OscConfig+0x62>
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	f003 0303 	and.w	r3, r3, #3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d10c      	bne.n	800ba1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba00:	4b8f      	ldr	r3, [pc, #572]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d06d      	beq.n	800bae8 <HAL_RCC_OscConfig+0x130>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d169      	bne.n	800bae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f000 bc21 	b.w	800c25c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba22:	d106      	bne.n	800ba32 <HAL_RCC_OscConfig+0x7a>
 800ba24:	4b86      	ldr	r3, [pc, #536]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a85      	ldr	r2, [pc, #532]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	e02e      	b.n	800ba90 <HAL_RCC_OscConfig+0xd8>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10c      	bne.n	800ba54 <HAL_RCC_OscConfig+0x9c>
 800ba3a:	4b81      	ldr	r3, [pc, #516]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a80      	ldr	r2, [pc, #512]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	4b7e      	ldr	r3, [pc, #504]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a7d      	ldr	r2, [pc, #500]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	e01d      	b.n	800ba90 <HAL_RCC_OscConfig+0xd8>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba5c:	d10c      	bne.n	800ba78 <HAL_RCC_OscConfig+0xc0>
 800ba5e:	4b78      	ldr	r3, [pc, #480]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a77      	ldr	r2, [pc, #476]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba68:	6013      	str	r3, [r2, #0]
 800ba6a:	4b75      	ldr	r3, [pc, #468]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a74      	ldr	r2, [pc, #464]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	e00b      	b.n	800ba90 <HAL_RCC_OscConfig+0xd8>
 800ba78:	4b71      	ldr	r3, [pc, #452]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a70      	ldr	r2, [pc, #448]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	4b6e      	ldr	r3, [pc, #440]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a6d      	ldr	r2, [pc, #436]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800ba8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d013      	beq.n	800bac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba98:	f7f9 fbec 	bl	8005274 <HAL_GetTick>
 800ba9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba9e:	e008      	b.n	800bab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baa0:	f7f9 fbe8 	bl	8005274 <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b64      	cmp	r3, #100	; 0x64
 800baac:	d901      	bls.n	800bab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e3d4      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bab2:	4b63      	ldr	r3, [pc, #396]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0f0      	beq.n	800baa0 <HAL_RCC_OscConfig+0xe8>
 800babe:	e014      	b.n	800baea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac0:	f7f9 fbd8 	bl	8005274 <HAL_GetTick>
 800bac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bac6:	e008      	b.n	800bada <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bac8:	f7f9 fbd4 	bl	8005274 <HAL_GetTick>
 800bacc:	4602      	mov	r2, r0
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	2b64      	cmp	r3, #100	; 0x64
 800bad4:	d901      	bls.n	800bada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bad6:	2303      	movs	r3, #3
 800bad8:	e3c0      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bada:	4b59      	ldr	r3, [pc, #356]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f0      	bne.n	800bac8 <HAL_RCC_OscConfig+0x110>
 800bae6:	e000      	b.n	800baea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 80ca 	beq.w	800bc8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baf8:	4b51      	ldr	r3, [pc, #324]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bb02:	4b4f      	ldr	r3, [pc, #316]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d007      	beq.n	800bb1e <HAL_RCC_OscConfig+0x166>
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	2b18      	cmp	r3, #24
 800bb12:	d156      	bne.n	800bbc2 <HAL_RCC_OscConfig+0x20a>
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d151      	bne.n	800bbc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb1e:	4b48      	ldr	r3, [pc, #288]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0304 	and.w	r3, r3, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <HAL_RCC_OscConfig+0x17e>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e392      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bb36:	4b42      	ldr	r3, [pc, #264]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f023 0219 	bic.w	r2, r3, #25
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	493f      	ldr	r1, [pc, #252]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb48:	f7f9 fb94 	bl	8005274 <HAL_GetTick>
 800bb4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb4e:	e008      	b.n	800bb62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb50:	f7f9 fb90 	bl	8005274 <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d901      	bls.n	800bb62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e37c      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb62:	4b37      	ldr	r3, [pc, #220]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0304 	and.w	r3, r3, #4
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0f0      	beq.n	800bb50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb6e:	f7f9 fbb1 	bl	80052d4 <HAL_GetREVID>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f241 0203 	movw	r2, #4099	; 0x1003
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d817      	bhi.n	800bbac <HAL_RCC_OscConfig+0x1f4>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	2b40      	cmp	r3, #64	; 0x40
 800bb82:	d108      	bne.n	800bb96 <HAL_RCC_OscConfig+0x1de>
 800bb84:	4b2e      	ldr	r3, [pc, #184]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb8c:	4a2c      	ldr	r2, [pc, #176]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb94:	e07a      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb96:	4b2a      	ldr	r3, [pc, #168]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	031b      	lsls	r3, r3, #12
 800bba4:	4926      	ldr	r1, [pc, #152]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbaa:	e06f      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbac:	4b24      	ldr	r3, [pc, #144]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	061b      	lsls	r3, r3, #24
 800bbba:	4921      	ldr	r1, [pc, #132]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbc0:	e064      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d047      	beq.n	800bc5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bbca:	4b1d      	ldr	r3, [pc, #116]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f023 0219 	bic.w	r2, r3, #25
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	491a      	ldr	r1, [pc, #104]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbdc:	f7f9 fb4a 	bl	8005274 <HAL_GetTick>
 800bbe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbe2:	e008      	b.n	800bbf6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbe4:	f7f9 fb46 	bl	8005274 <HAL_GetTick>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d901      	bls.n	800bbf6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e332      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbf6:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0f0      	beq.n	800bbe4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc02:	f7f9 fb67 	bl	80052d4 <HAL_GetREVID>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d819      	bhi.n	800bc44 <HAL_RCC_OscConfig+0x28c>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	d108      	bne.n	800bc2a <HAL_RCC_OscConfig+0x272>
 800bc18:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bc20:	4a07      	ldr	r2, [pc, #28]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bc22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc26:	6053      	str	r3, [r2, #4]
 800bc28:	e030      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	031b      	lsls	r3, r3, #12
 800bc38:	4901      	ldr	r1, [pc, #4]	; (800bc40 <HAL_RCC_OscConfig+0x288>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	604b      	str	r3, [r1, #4]
 800bc3e:	e025      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
 800bc40:	58024400 	.word	0x58024400
 800bc44:	4b9a      	ldr	r3, [pc, #616]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	061b      	lsls	r3, r3, #24
 800bc52:	4997      	ldr	r1, [pc, #604]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	604b      	str	r3, [r1, #4]
 800bc58:	e018      	b.n	800bc8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc5a:	4b95      	ldr	r3, [pc, #596]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a94      	ldr	r2, [pc, #592]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc60:	f023 0301 	bic.w	r3, r3, #1
 800bc64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc66:	f7f9 fb05 	bl	8005274 <HAL_GetTick>
 800bc6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bc6c:	e008      	b.n	800bc80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc6e:	f7f9 fb01 	bl	8005274 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d901      	bls.n	800bc80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e2ed      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bc80:	4b8b      	ldr	r3, [pc, #556]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f0      	bne.n	800bc6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 0310 	and.w	r3, r3, #16
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 80a9 	beq.w	800bdec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc9a:	4b85      	ldr	r3, [pc, #532]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bca2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bca4:	4b82      	ldr	r3, [pc, #520]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	d007      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x308>
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b18      	cmp	r3, #24
 800bcb4:	d13a      	bne.n	800bd2c <HAL_RCC_OscConfig+0x374>
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d135      	bne.n	800bd2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcc0:	4b7b      	ldr	r3, [pc, #492]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x320>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	2b80      	cmp	r3, #128	; 0x80
 800bcd2:	d001      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e2c1      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcd8:	f7f9 fafc 	bl	80052d4 <HAL_GetREVID>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f241 0203 	movw	r2, #4099	; 0x1003
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d817      	bhi.n	800bd16 <HAL_RCC_OscConfig+0x35e>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	d108      	bne.n	800bd00 <HAL_RCC_OscConfig+0x348>
 800bcee:	4b70      	ldr	r3, [pc, #448]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bcf6:	4a6e      	ldr	r2, [pc, #440]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bcf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcfc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcfe:	e075      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd00:	4b6b      	ldr	r3, [pc, #428]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a1b      	ldr	r3, [r3, #32]
 800bd0c:	069b      	lsls	r3, r3, #26
 800bd0e:	4968      	ldr	r1, [pc, #416]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd10:	4313      	orrs	r3, r2
 800bd12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd14:	e06a      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd16:	4b66      	ldr	r3, [pc, #408]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	061b      	lsls	r3, r3, #24
 800bd24:	4962      	ldr	r1, [pc, #392]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd2a:	e05f      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d042      	beq.n	800bdba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bd34:	4b5e      	ldr	r3, [pc, #376]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a5d      	ldr	r2, [pc, #372]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd40:	f7f9 fa98 	bl	8005274 <HAL_GetTick>
 800bd44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd46:	e008      	b.n	800bd5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd48:	f7f9 fa94 	bl	8005274 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d901      	bls.n	800bd5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e280      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd5a:	4b55      	ldr	r3, [pc, #340]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f0      	beq.n	800bd48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd66:	f7f9 fab5 	bl	80052d4 <HAL_GetREVID>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f241 0203 	movw	r2, #4099	; 0x1003
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d817      	bhi.n	800bda4 <HAL_RCC_OscConfig+0x3ec>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d108      	bne.n	800bd8e <HAL_RCC_OscConfig+0x3d6>
 800bd7c:	4b4c      	ldr	r3, [pc, #304]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bd84:	4a4a      	ldr	r2, [pc, #296]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd8a:	6053      	str	r3, [r2, #4]
 800bd8c:	e02e      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
 800bd8e:	4b48      	ldr	r3, [pc, #288]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	069b      	lsls	r3, r3, #26
 800bd9c:	4944      	ldr	r1, [pc, #272]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	604b      	str	r3, [r1, #4]
 800bda2:	e023      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
 800bda4:	4b42      	ldr	r3, [pc, #264]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	061b      	lsls	r3, r3, #24
 800bdb2:	493f      	ldr	r1, [pc, #252]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	60cb      	str	r3, [r1, #12]
 800bdb8:	e018      	b.n	800bdec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bdba:	4b3d      	ldr	r3, [pc, #244]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a3c      	ldr	r2, [pc, #240]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdc6:	f7f9 fa55 	bl	8005274 <HAL_GetTick>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bdcc:	e008      	b.n	800bde0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bdce:	f7f9 fa51 	bl	8005274 <HAL_GetTick>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d901      	bls.n	800bde0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bddc:	2303      	movs	r3, #3
 800bdde:	e23d      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bde0:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1f0      	bne.n	800bdce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0308 	and.w	r3, r3, #8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d036      	beq.n	800be66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d019      	beq.n	800be34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be00:	4b2b      	ldr	r3, [pc, #172]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be04:	4a2a      	ldr	r2, [pc, #168]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be06:	f043 0301 	orr.w	r3, r3, #1
 800be0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be0c:	f7f9 fa32 	bl	8005274 <HAL_GetTick>
 800be10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800be12:	e008      	b.n	800be26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be14:	f7f9 fa2e 	bl	8005274 <HAL_GetTick>
 800be18:	4602      	mov	r2, r0
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d901      	bls.n	800be26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e21a      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800be26:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0f0      	beq.n	800be14 <HAL_RCC_OscConfig+0x45c>
 800be32:	e018      	b.n	800be66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be34:	4b1e      	ldr	r3, [pc, #120]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be38:	4a1d      	ldr	r2, [pc, #116]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be40:	f7f9 fa18 	bl	8005274 <HAL_GetTick>
 800be44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be48:	f7f9 fa14 	bl	8005274 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e200      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f0      	bne.n	800be48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 0320 	and.w	r3, r3, #32
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d039      	beq.n	800bee6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d01c      	beq.n	800beb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800be7a:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a0c      	ldr	r2, [pc, #48]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800be80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be86:	f7f9 f9f5 	bl	8005274 <HAL_GetTick>
 800be8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be8c:	e008      	b.n	800bea0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be8e:	f7f9 f9f1 	bl	8005274 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d901      	bls.n	800bea0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e1dd      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bea0:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <HAL_RCC_OscConfig+0x4f8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0f0      	beq.n	800be8e <HAL_RCC_OscConfig+0x4d6>
 800beac:	e01b      	b.n	800bee6 <HAL_RCC_OscConfig+0x52e>
 800beae:	bf00      	nop
 800beb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800beb4:	4b9b      	ldr	r3, [pc, #620]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a9a      	ldr	r2, [pc, #616]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800beba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bebe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bec0:	f7f9 f9d8 	bl	8005274 <HAL_GetTick>
 800bec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bec6:	e008      	b.n	800beda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bec8:	f7f9 f9d4 	bl	8005274 <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d901      	bls.n	800beda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e1c0      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800beda:	4b92      	ldr	r3, [pc, #584]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f0      	bne.n	800bec8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0304 	and.w	r3, r3, #4
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8081 	beq.w	800bff6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bef4:	4b8c      	ldr	r3, [pc, #560]	; (800c128 <HAL_RCC_OscConfig+0x770>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a8b      	ldr	r2, [pc, #556]	; (800c128 <HAL_RCC_OscConfig+0x770>)
 800befa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800befe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf00:	f7f9 f9b8 	bl	8005274 <HAL_GetTick>
 800bf04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf06:	e008      	b.n	800bf1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf08:	f7f9 f9b4 	bl	8005274 <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	2b64      	cmp	r3, #100	; 0x64
 800bf14:	d901      	bls.n	800bf1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e1a0      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf1a:	4b83      	ldr	r3, [pc, #524]	; (800c128 <HAL_RCC_OscConfig+0x770>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f0      	beq.n	800bf08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d106      	bne.n	800bf3c <HAL_RCC_OscConfig+0x584>
 800bf2e:	4b7d      	ldr	r3, [pc, #500]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf32:	4a7c      	ldr	r2, [pc, #496]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf34:	f043 0301 	orr.w	r3, r3, #1
 800bf38:	6713      	str	r3, [r2, #112]	; 0x70
 800bf3a:	e02d      	b.n	800bf98 <HAL_RCC_OscConfig+0x5e0>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10c      	bne.n	800bf5e <HAL_RCC_OscConfig+0x5a6>
 800bf44:	4b77      	ldr	r3, [pc, #476]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf48:	4a76      	ldr	r2, [pc, #472]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf4a:	f023 0301 	bic.w	r3, r3, #1
 800bf4e:	6713      	str	r3, [r2, #112]	; 0x70
 800bf50:	4b74      	ldr	r3, [pc, #464]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf54:	4a73      	ldr	r2, [pc, #460]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf56:	f023 0304 	bic.w	r3, r3, #4
 800bf5a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf5c:	e01c      	b.n	800bf98 <HAL_RCC_OscConfig+0x5e0>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	2b05      	cmp	r3, #5
 800bf64:	d10c      	bne.n	800bf80 <HAL_RCC_OscConfig+0x5c8>
 800bf66:	4b6f      	ldr	r3, [pc, #444]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6a:	4a6e      	ldr	r2, [pc, #440]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf6c:	f043 0304 	orr.w	r3, r3, #4
 800bf70:	6713      	str	r3, [r2, #112]	; 0x70
 800bf72:	4b6c      	ldr	r3, [pc, #432]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf76:	4a6b      	ldr	r2, [pc, #428]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf78:	f043 0301 	orr.w	r3, r3, #1
 800bf7c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf7e:	e00b      	b.n	800bf98 <HAL_RCC_OscConfig+0x5e0>
 800bf80:	4b68      	ldr	r3, [pc, #416]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf84:	4a67      	ldr	r2, [pc, #412]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf86:	f023 0301 	bic.w	r3, r3, #1
 800bf8a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf8c:	4b65      	ldr	r3, [pc, #404]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf90:	4a64      	ldr	r2, [pc, #400]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bf92:	f023 0304 	bic.w	r3, r3, #4
 800bf96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d015      	beq.n	800bfcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfa0:	f7f9 f968 	bl	8005274 <HAL_GetTick>
 800bfa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfa6:	e00a      	b.n	800bfbe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfa8:	f7f9 f964 	bl	8005274 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e14e      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfbe:	4b59      	ldr	r3, [pc, #356]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0ee      	beq.n	800bfa8 <HAL_RCC_OscConfig+0x5f0>
 800bfca:	e014      	b.n	800bff6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfcc:	f7f9 f952 	bl	8005274 <HAL_GetTick>
 800bfd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfd2:	e00a      	b.n	800bfea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfd4:	f7f9 f94e 	bl	8005274 <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d901      	bls.n	800bfea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e138      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfea:	4b4e      	ldr	r3, [pc, #312]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800bfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1ee      	bne.n	800bfd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 812d 	beq.w	800c25a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c000:	4b48      	ldr	r3, [pc, #288]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c008:	2b18      	cmp	r3, #24
 800c00a:	f000 80bd 	beq.w	800c188 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c012:	2b02      	cmp	r3, #2
 800c014:	f040 809e 	bne.w	800c154 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c018:	4b42      	ldr	r3, [pc, #264]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a41      	ldr	r2, [pc, #260]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c01e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c024:	f7f9 f926 	bl	8005274 <HAL_GetTick>
 800c028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c02a:	e008      	b.n	800c03e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c02c:	f7f9 f922 	bl	8005274 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b02      	cmp	r3, #2
 800c038:	d901      	bls.n	800c03e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e10e      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c03e:	4b39      	ldr	r3, [pc, #228]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1f0      	bne.n	800c02c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c04a:	4b36      	ldr	r3, [pc, #216]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c04e:	4b37      	ldr	r3, [pc, #220]	; (800c12c <HAL_RCC_OscConfig+0x774>)
 800c050:	4013      	ands	r3, r2
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c05a:	0112      	lsls	r2, r2, #4
 800c05c:	430a      	orrs	r2, r1
 800c05e:	4931      	ldr	r1, [pc, #196]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c060:	4313      	orrs	r3, r2
 800c062:	628b      	str	r3, [r1, #40]	; 0x28
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c068:	3b01      	subs	r3, #1
 800c06a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	3b01      	subs	r3, #1
 800c074:	025b      	lsls	r3, r3, #9
 800c076:	b29b      	uxth	r3, r3
 800c078:	431a      	orrs	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07e:	3b01      	subs	r3, #1
 800c080:	041b      	lsls	r3, r3, #16
 800c082:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c08c:	3b01      	subs	r3, #1
 800c08e:	061b      	lsls	r3, r3, #24
 800c090:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c094:	4923      	ldr	r1, [pc, #140]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c096:	4313      	orrs	r3, r2
 800c098:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c09a:	4b22      	ldr	r3, [pc, #136]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	4a21      	ldr	r2, [pc, #132]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0a0:	f023 0301 	bic.w	r3, r3, #1
 800c0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c0a6:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0aa:	4b21      	ldr	r3, [pc, #132]	; (800c130 <HAL_RCC_OscConfig+0x778>)
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c0b2:	00d2      	lsls	r2, r2, #3
 800c0b4:	491b      	ldr	r1, [pc, #108]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c0ba:	4b1a      	ldr	r3, [pc, #104]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	f023 020c 	bic.w	r2, r3, #12
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	4917      	ldr	r1, [pc, #92]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c0cc:	4b15      	ldr	r3, [pc, #84]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	f023 0202 	bic.w	r2, r3, #2
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d8:	4912      	ldr	r1, [pc, #72]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c0de:	4b11      	ldr	r3, [pc, #68]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e2:	4a10      	ldr	r2, [pc, #64]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0ea:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	4a0d      	ldr	r2, [pc, #52]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fa:	4a0a      	ldr	r2, [pc, #40]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c0fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c100:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c102:	4b08      	ldr	r3, [pc, #32]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c106:	4a07      	ldr	r2, [pc, #28]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c108:	f043 0301 	orr.w	r3, r3, #1
 800c10c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a04      	ldr	r2, [pc, #16]	; (800c124 <HAL_RCC_OscConfig+0x76c>)
 800c114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c11a:	f7f9 f8ab 	bl	8005274 <HAL_GetTick>
 800c11e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c120:	e011      	b.n	800c146 <HAL_RCC_OscConfig+0x78e>
 800c122:	bf00      	nop
 800c124:	58024400 	.word	0x58024400
 800c128:	58024800 	.word	0x58024800
 800c12c:	fffffc0c 	.word	0xfffffc0c
 800c130:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c134:	f7f9 f89e 	bl	8005274 <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d901      	bls.n	800c146 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e08a      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c146:	4b47      	ldr	r3, [pc, #284]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0f0      	beq.n	800c134 <HAL_RCC_OscConfig+0x77c>
 800c152:	e082      	b.n	800c25a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c154:	4b43      	ldr	r3, [pc, #268]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a42      	ldr	r2, [pc, #264]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c15a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c15e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c160:	f7f9 f888 	bl	8005274 <HAL_GetTick>
 800c164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c166:	e008      	b.n	800c17a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c168:	f7f9 f884 	bl	8005274 <HAL_GetTick>
 800c16c:	4602      	mov	r2, r0
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	2b02      	cmp	r3, #2
 800c174:	d901      	bls.n	800c17a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e070      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c17a:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1f0      	bne.n	800c168 <HAL_RCC_OscConfig+0x7b0>
 800c186:	e068      	b.n	800c25a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c188:	4b36      	ldr	r3, [pc, #216]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c18e:	4b35      	ldr	r3, [pc, #212]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d031      	beq.n	800c200 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	f003 0203 	and.w	r2, r3, #3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d12a      	bne.n	800c200 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	091b      	lsrs	r3, r3, #4
 800c1ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d122      	bne.n	800c200 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d11a      	bne.n	800c200 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	0a5b      	lsrs	r3, r3, #9
 800c1ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d111      	bne.n	800c200 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	0c1b      	lsrs	r3, r3, #16
 800c1e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d108      	bne.n	800c200 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	0e1b      	lsrs	r3, r3, #24
 800c1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d001      	beq.n	800c204 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e02b      	b.n	800c25c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c204:	4b17      	ldr	r3, [pc, #92]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c208:	08db      	lsrs	r3, r3, #3
 800c20a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c20e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	429a      	cmp	r2, r3
 800c218:	d01f      	beq.n	800c25a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c21a:	4b12      	ldr	r3, [pc, #72]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21e:	4a11      	ldr	r2, [pc, #68]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c220:	f023 0301 	bic.w	r3, r3, #1
 800c224:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c226:	f7f9 f825 	bl	8005274 <HAL_GetTick>
 800c22a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c22c:	bf00      	nop
 800c22e:	f7f9 f821 	bl	8005274 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	4293      	cmp	r3, r2
 800c238:	d0f9      	beq.n	800c22e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c23a:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c23e:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <HAL_RCC_OscConfig+0x8b0>)
 800c240:	4013      	ands	r3, r2
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c246:	00d2      	lsls	r2, r2, #3
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	4a04      	ldr	r2, [pc, #16]	; (800c264 <HAL_RCC_OscConfig+0x8ac>)
 800c254:	f043 0301 	orr.w	r3, r3, #1
 800c258:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3730      	adds	r7, #48	; 0x30
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	58024400 	.word	0x58024400
 800c268:	ffff0007 	.word	0xffff0007

0800c26c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e19c      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c280:	4b8a      	ldr	r3, [pc, #552]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 030f 	and.w	r3, r3, #15
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d910      	bls.n	800c2b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c28e:	4b87      	ldr	r3, [pc, #540]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f023 020f 	bic.w	r2, r3, #15
 800c296:	4985      	ldr	r1, [pc, #532]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c29e:	4b83      	ldr	r3, [pc, #524]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 030f 	and.w	r3, r3, #15
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d001      	beq.n	800c2b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e184      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d010      	beq.n	800c2de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	691a      	ldr	r2, [r3, #16]
 800c2c0:	4b7b      	ldr	r3, [pc, #492]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d908      	bls.n	800c2de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c2cc:	4b78      	ldr	r3, [pc, #480]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	4975      	ldr	r1, [pc, #468]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0308 	and.w	r3, r3, #8
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d010      	beq.n	800c30c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695a      	ldr	r2, [r3, #20]
 800c2ee:	4b70      	ldr	r3, [pc, #448]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d908      	bls.n	800c30c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c2fa:	4b6d      	ldr	r3, [pc, #436]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	496a      	ldr	r1, [pc, #424]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b00      	cmp	r3, #0
 800c316:	d010      	beq.n	800c33a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699a      	ldr	r2, [r3, #24]
 800c31c:	4b64      	ldr	r3, [pc, #400]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c324:	429a      	cmp	r2, r3
 800c326:	d908      	bls.n	800c33a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c328:	4b61      	ldr	r3, [pc, #388]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	495e      	ldr	r1, [pc, #376]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c336:	4313      	orrs	r3, r2
 800c338:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d010      	beq.n	800c368 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	69da      	ldr	r2, [r3, #28]
 800c34a:	4b59      	ldr	r3, [pc, #356]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c352:	429a      	cmp	r2, r3
 800c354:	d908      	bls.n	800c368 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c356:	4b56      	ldr	r3, [pc, #344]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	4953      	ldr	r1, [pc, #332]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c364:	4313      	orrs	r3, r2
 800c366:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d010      	beq.n	800c396 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	4b4d      	ldr	r3, [pc, #308]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	f003 030f 	and.w	r3, r3, #15
 800c380:	429a      	cmp	r2, r3
 800c382:	d908      	bls.n	800c396 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c384:	4b4a      	ldr	r3, [pc, #296]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	f023 020f 	bic.w	r2, r3, #15
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	4947      	ldr	r1, [pc, #284]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c392:	4313      	orrs	r3, r2
 800c394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 0301 	and.w	r3, r3, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d055      	beq.n	800c44e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c3a2:	4b43      	ldr	r3, [pc, #268]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	4940      	ldr	r1, [pc, #256]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d107      	bne.n	800c3cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3bc:	4b3c      	ldr	r3, [pc, #240]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d121      	bne.n	800c40c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e0f6      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d107      	bne.n	800c3e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3d4:	4b36      	ldr	r3, [pc, #216]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d115      	bne.n	800c40c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e0ea      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d107      	bne.n	800c3fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c3ec:	4b30      	ldr	r3, [pc, #192]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e0de      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3fc:	4b2c      	ldr	r3, [pc, #176]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e0d6      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c40c:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	f023 0207 	bic.w	r2, r3, #7
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	4925      	ldr	r1, [pc, #148]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c41e:	f7f8 ff29 	bl	8005274 <HAL_GetTick>
 800c422:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c424:	e00a      	b.n	800c43c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c426:	f7f8 ff25 	bl	8005274 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	f241 3288 	movw	r2, #5000	; 0x1388
 800c434:	4293      	cmp	r3, r2
 800c436:	d901      	bls.n	800c43c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	e0be      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c43c:	4b1c      	ldr	r3, [pc, #112]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d1eb      	bne.n	800c426 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 0302 	and.w	r3, r3, #2
 800c456:	2b00      	cmp	r3, #0
 800c458:	d010      	beq.n	800c47c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	4b14      	ldr	r3, [pc, #80]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	429a      	cmp	r2, r3
 800c468:	d208      	bcs.n	800c47c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c46a:	4b11      	ldr	r3, [pc, #68]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	f023 020f 	bic.w	r2, r3, #15
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	490e      	ldr	r1, [pc, #56]	; (800c4b0 <HAL_RCC_ClockConfig+0x244>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c47c:	4b0b      	ldr	r3, [pc, #44]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 030f 	and.w	r3, r3, #15
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d214      	bcs.n	800c4b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c48a:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f023 020f 	bic.w	r2, r3, #15
 800c492:	4906      	ldr	r1, [pc, #24]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	4313      	orrs	r3, r2
 800c498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c49a:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <HAL_RCC_ClockConfig+0x240>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d005      	beq.n	800c4b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e086      	b.n	800c5ba <HAL_RCC_ClockConfig+0x34e>
 800c4ac:	52002000 	.word	0x52002000
 800c4b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d010      	beq.n	800c4e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	691a      	ldr	r2, [r3, #16]
 800c4c4:	4b3f      	ldr	r3, [pc, #252]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d208      	bcs.n	800c4e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c4d0:	4b3c      	ldr	r3, [pc, #240]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	4939      	ldr	r1, [pc, #228]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 0308 	and.w	r3, r3, #8
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d010      	beq.n	800c510 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	695a      	ldr	r2, [r3, #20]
 800c4f2:	4b34      	ldr	r3, [pc, #208]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d208      	bcs.n	800c510 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c4fe:	4b31      	ldr	r3, [pc, #196]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	492e      	ldr	r1, [pc, #184]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c50c:	4313      	orrs	r3, r2
 800c50e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0310 	and.w	r3, r3, #16
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d010      	beq.n	800c53e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	699a      	ldr	r2, [r3, #24]
 800c520:	4b28      	ldr	r3, [pc, #160]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c528:	429a      	cmp	r2, r3
 800c52a:	d208      	bcs.n	800c53e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c52c:	4b25      	ldr	r3, [pc, #148]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	4922      	ldr	r1, [pc, #136]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0320 	and.w	r3, r3, #32
 800c546:	2b00      	cmp	r3, #0
 800c548:	d010      	beq.n	800c56c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69da      	ldr	r2, [r3, #28]
 800c54e:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c556:	429a      	cmp	r2, r3
 800c558:	d208      	bcs.n	800c56c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c55a:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	4917      	ldr	r1, [pc, #92]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c56c:	f000 f834 	bl	800c5d8 <HAL_RCC_GetSysClockFreq>
 800c570:	4602      	mov	r2, r0
 800c572:	4b14      	ldr	r3, [pc, #80]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	0a1b      	lsrs	r3, r3, #8
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	4912      	ldr	r1, [pc, #72]	; (800c5c8 <HAL_RCC_ClockConfig+0x35c>)
 800c57e:	5ccb      	ldrb	r3, [r1, r3]
 800c580:	f003 031f 	and.w	r3, r3, #31
 800c584:	fa22 f303 	lsr.w	r3, r2, r3
 800c588:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c58a:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <HAL_RCC_ClockConfig+0x358>)
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	4a0d      	ldr	r2, [pc, #52]	; (800c5c8 <HAL_RCC_ClockConfig+0x35c>)
 800c594:	5cd3      	ldrb	r3, [r2, r3]
 800c596:	f003 031f 	and.w	r3, r3, #31
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <HAL_RCC_ClockConfig+0x360>)
 800c5a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c5a4:	4a0a      	ldr	r2, [pc, #40]	; (800c5d0 <HAL_RCC_ClockConfig+0x364>)
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <HAL_RCC_ClockConfig+0x368>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f8 fe16 	bl	80051e0 <HAL_InitTick>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	58024400 	.word	0x58024400
 800c5c8:	08018be4 	.word	0x08018be4
 800c5cc:	20000024 	.word	0x20000024
 800c5d0:	20000020 	.word	0x20000020
 800c5d4:	20000048 	.word	0x20000048

0800c5d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b089      	sub	sp, #36	; 0x24
 800c5dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5de:	4bb3      	ldr	r3, [pc, #716]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5e6:	2b18      	cmp	r3, #24
 800c5e8:	f200 8155 	bhi.w	800c896 <HAL_RCC_GetSysClockFreq+0x2be>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c659 	.word	0x0800c659
 800c5f8:	0800c897 	.word	0x0800c897
 800c5fc:	0800c897 	.word	0x0800c897
 800c600:	0800c897 	.word	0x0800c897
 800c604:	0800c897 	.word	0x0800c897
 800c608:	0800c897 	.word	0x0800c897
 800c60c:	0800c897 	.word	0x0800c897
 800c610:	0800c897 	.word	0x0800c897
 800c614:	0800c67f 	.word	0x0800c67f
 800c618:	0800c897 	.word	0x0800c897
 800c61c:	0800c897 	.word	0x0800c897
 800c620:	0800c897 	.word	0x0800c897
 800c624:	0800c897 	.word	0x0800c897
 800c628:	0800c897 	.word	0x0800c897
 800c62c:	0800c897 	.word	0x0800c897
 800c630:	0800c897 	.word	0x0800c897
 800c634:	0800c685 	.word	0x0800c685
 800c638:	0800c897 	.word	0x0800c897
 800c63c:	0800c897 	.word	0x0800c897
 800c640:	0800c897 	.word	0x0800c897
 800c644:	0800c897 	.word	0x0800c897
 800c648:	0800c897 	.word	0x0800c897
 800c64c:	0800c897 	.word	0x0800c897
 800c650:	0800c897 	.word	0x0800c897
 800c654:	0800c68b 	.word	0x0800c68b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c658:	4b94      	ldr	r3, [pc, #592]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0320 	and.w	r3, r3, #32
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c664:	4b91      	ldr	r3, [pc, #580]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	08db      	lsrs	r3, r3, #3
 800c66a:	f003 0303 	and.w	r3, r3, #3
 800c66e:	4a90      	ldr	r2, [pc, #576]	; (800c8b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c670:	fa22 f303 	lsr.w	r3, r2, r3
 800c674:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c676:	e111      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c678:	4b8d      	ldr	r3, [pc, #564]	; (800c8b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c67a:	61bb      	str	r3, [r7, #24]
      break;
 800c67c:	e10e      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c67e:	4b8d      	ldr	r3, [pc, #564]	; (800c8b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c680:	61bb      	str	r3, [r7, #24]
      break;
 800c682:	e10b      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c684:	4b8c      	ldr	r3, [pc, #560]	; (800c8b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c686:	61bb      	str	r3, [r7, #24]
      break;
 800c688:	e108      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c68a:	4b88      	ldr	r3, [pc, #544]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68e:	f003 0303 	and.w	r3, r3, #3
 800c692:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c694:	4b85      	ldr	r3, [pc, #532]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c698:	091b      	lsrs	r3, r3, #4
 800c69a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c69e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c6a0:	4b82      	ldr	r3, [pc, #520]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6aa:	4b80      	ldr	r3, [pc, #512]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ae:	08db      	lsrs	r3, r3, #3
 800c6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80e1 	beq.w	800c890 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	f000 8083 	beq.w	800c7dc <HAL_RCC_GetSysClockFreq+0x204>
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	f200 80a1 	bhi.w	800c820 <HAL_RCC_GetSysClockFreq+0x248>
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_RCC_GetSysClockFreq+0x114>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d056      	beq.n	800c798 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c6ea:	e099      	b.n	800c820 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ec:	4b6f      	ldr	r3, [pc, #444]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 0320 	and.w	r3, r3, #32
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d02d      	beq.n	800c754 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6f8:	4b6c      	ldr	r3, [pc, #432]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	08db      	lsrs	r3, r3, #3
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	4a6b      	ldr	r2, [pc, #428]	; (800c8b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c704:	fa22 f303 	lsr.w	r3, r2, r3
 800c708:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	ee07 3a90 	vmov	s15, r3
 800c710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c722:	4b62      	ldr	r3, [pc, #392]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c732:	ed97 6a02 	vldr	s12, [r7, #8]
 800c736:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c8bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c752:	e087      	b.n	800c864 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	ee07 3a90 	vmov	s15, r3
 800c75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c8c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c766:	4b51      	ldr	r3, [pc, #324]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c776:	ed97 6a02 	vldr	s12, [r7, #8]
 800c77a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c8bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c796:	e065      	b.n	800c864 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c8c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7aa:	4b40      	ldr	r3, [pc, #256]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c8bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c7da:	e043      	b.n	800c864 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	ee07 3a90 	vmov	s15, r3
 800c7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c8c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ee:	4b2f      	ldr	r3, [pc, #188]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c802:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c8bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c81e:	e021      	b.n	800c864 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c8c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c832:	4b1e      	ldr	r3, [pc, #120]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c842:	ed97 6a02 	vldr	s12, [r7, #8]
 800c846:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c8bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c85e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c862:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c864:	4b11      	ldr	r3, [pc, #68]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c868:	0a5b      	lsrs	r3, r3, #9
 800c86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c86e:	3301      	adds	r3, #1
 800c870:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c87c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c888:	ee17 3a90 	vmov	r3, s15
 800c88c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c88e:	e005      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	61bb      	str	r3, [r7, #24]
      break;
 800c894:	e002      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c896:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c898:	61bb      	str	r3, [r7, #24]
      break;
 800c89a:	bf00      	nop
  }

  return sysclockfreq;
 800c89c:	69bb      	ldr	r3, [r7, #24]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3724      	adds	r7, #36	; 0x24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	58024400 	.word	0x58024400
 800c8b0:	03d09000 	.word	0x03d09000
 800c8b4:	003d0900 	.word	0x003d0900
 800c8b8:	017d7840 	.word	0x017d7840
 800c8bc:	46000000 	.word	0x46000000
 800c8c0:	4c742400 	.word	0x4c742400
 800c8c4:	4a742400 	.word	0x4a742400
 800c8c8:	4bbebc20 	.word	0x4bbebc20

0800c8cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c8d2:	f7ff fe81 	bl	800c5d8 <HAL_RCC_GetSysClockFreq>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	4b10      	ldr	r3, [pc, #64]	; (800c91c <HAL_RCC_GetHCLKFreq+0x50>)
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	0a1b      	lsrs	r3, r3, #8
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	490f      	ldr	r1, [pc, #60]	; (800c920 <HAL_RCC_GetHCLKFreq+0x54>)
 800c8e4:	5ccb      	ldrb	r3, [r1, r3]
 800c8e6:	f003 031f 	and.w	r3, r3, #31
 800c8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c8f0:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <HAL_RCC_GetHCLKFreq+0x50>)
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	f003 030f 	and.w	r3, r3, #15
 800c8f8:	4a09      	ldr	r2, [pc, #36]	; (800c920 <HAL_RCC_GetHCLKFreq+0x54>)
 800c8fa:	5cd3      	ldrb	r3, [r2, r3]
 800c8fc:	f003 031f 	and.w	r3, r3, #31
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	fa22 f303 	lsr.w	r3, r2, r3
 800c906:	4a07      	ldr	r2, [pc, #28]	; (800c924 <HAL_RCC_GetHCLKFreq+0x58>)
 800c908:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c90a:	4a07      	ldr	r2, [pc, #28]	; (800c928 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c910:	4b04      	ldr	r3, [pc, #16]	; (800c924 <HAL_RCC_GetHCLKFreq+0x58>)
 800c912:	681b      	ldr	r3, [r3, #0]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	58024400 	.word	0x58024400
 800c920:	08018be4 	.word	0x08018be4
 800c924:	20000024 	.word	0x20000024
 800c928:	20000020 	.word	0x20000020

0800c92c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c930:	f7ff ffcc 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 800c934:	4602      	mov	r2, r0
 800c936:	4b06      	ldr	r3, [pc, #24]	; (800c950 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	091b      	lsrs	r3, r3, #4
 800c93c:	f003 0307 	and.w	r3, r3, #7
 800c940:	4904      	ldr	r1, [pc, #16]	; (800c954 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c942:	5ccb      	ldrb	r3, [r1, r3]
 800c944:	f003 031f 	and.w	r3, r3, #31
 800c948:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	58024400 	.word	0x58024400
 800c954:	08018be4 	.word	0x08018be4

0800c958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c95c:	f7ff ffb6 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 800c960:	4602      	mov	r2, r0
 800c962:	4b06      	ldr	r3, [pc, #24]	; (800c97c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	f003 0307 	and.w	r3, r3, #7
 800c96c:	4904      	ldr	r1, [pc, #16]	; (800c980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c96e:	5ccb      	ldrb	r3, [r1, r3]
 800c970:	f003 031f 	and.w	r3, r3, #31
 800c974:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c978:	4618      	mov	r0, r3
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	58024400 	.word	0x58024400
 800c980:	08018be4 	.word	0x08018be4

0800c984 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c988:	b0ca      	sub	sp, #296	; 0x128
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c990:	2300      	movs	r3, #0
 800c992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c996:	2300      	movs	r3, #0
 800c998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c9a8:	2500      	movs	r5, #0
 800c9aa:	ea54 0305 	orrs.w	r3, r4, r5
 800c9ae:	d049      	beq.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9ba:	d02f      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c9bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9c0:	d828      	bhi.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9c6:	d01a      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c9c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9cc:	d822      	bhi.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9d6:	d007      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c9d8:	e01c      	b.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9da:	4bb8      	ldr	r3, [pc, #736]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9de:	4ab7      	ldr	r2, [pc, #732]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9e6:	e01a      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ec:	3308      	adds	r3, #8
 800c9ee:	2102      	movs	r1, #2
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f002 fb61 	bl	800f0b8 <RCCEx_PLL2_Config>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9fc:	e00f      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca02:	3328      	adds	r3, #40	; 0x28
 800ca04:	2102      	movs	r1, #2
 800ca06:	4618      	mov	r0, r3
 800ca08:	f002 fc08 	bl	800f21c <RCCEx_PLL3_Config>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ca12:	e004      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca1a:	e000      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ca1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10a      	bne.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ca26:	4ba5      	ldr	r3, [pc, #660]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca34:	4aa1      	ldr	r2, [pc, #644]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca36:	430b      	orrs	r3, r1
 800ca38:	6513      	str	r3, [r2, #80]	; 0x50
 800ca3a:	e003      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ca44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ca50:	f04f 0900 	mov.w	r9, #0
 800ca54:	ea58 0309 	orrs.w	r3, r8, r9
 800ca58:	d047      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ca5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d82a      	bhi.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ca64:	a201      	add	r2, pc, #4	; (adr r2, 800ca6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ca66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6a:	bf00      	nop
 800ca6c:	0800ca81 	.word	0x0800ca81
 800ca70:	0800ca8f 	.word	0x0800ca8f
 800ca74:	0800caa5 	.word	0x0800caa5
 800ca78:	0800cac3 	.word	0x0800cac3
 800ca7c:	0800cac3 	.word	0x0800cac3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca80:	4b8e      	ldr	r3, [pc, #568]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	4a8d      	ldr	r2, [pc, #564]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca8c:	e01a      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca92:	3308      	adds	r3, #8
 800ca94:	2100      	movs	r1, #0
 800ca96:	4618      	mov	r0, r3
 800ca98:	f002 fb0e 	bl	800f0b8 <RCCEx_PLL2_Config>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800caa2:	e00f      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800caa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caa8:	3328      	adds	r3, #40	; 0x28
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f002 fbb5 	bl	800f21c <RCCEx_PLL3_Config>
 800cab2:	4603      	mov	r3, r0
 800cab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cab8:	e004      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cac0:	e000      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cacc:	4b7b      	ldr	r3, [pc, #492]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cad0:	f023 0107 	bic.w	r1, r3, #7
 800cad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cada:	4a78      	ldr	r2, [pc, #480]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cadc:	430b      	orrs	r3, r1
 800cade:	6513      	str	r3, [r2, #80]	; 0x50
 800cae0:	e003      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800caea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800caf6:	f04f 0b00 	mov.w	fp, #0
 800cafa:	ea5a 030b 	orrs.w	r3, sl, fp
 800cafe:	d04c      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb0a:	d030      	beq.n	800cb6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cb0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb10:	d829      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb12:	2bc0      	cmp	r3, #192	; 0xc0
 800cb14:	d02d      	beq.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cb16:	2bc0      	cmp	r3, #192	; 0xc0
 800cb18:	d825      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb1a:	2b80      	cmp	r3, #128	; 0x80
 800cb1c:	d018      	beq.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cb1e:	2b80      	cmp	r3, #128	; 0x80
 800cb20:	d821      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cb26:	2b40      	cmp	r3, #64	; 0x40
 800cb28:	d007      	beq.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cb2a:	e01c      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb2c:	4b63      	ldr	r3, [pc, #396]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb30:	4a62      	ldr	r2, [pc, #392]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb38:	e01c      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb3e:	3308      	adds	r3, #8
 800cb40:	2100      	movs	r1, #0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f002 fab8 	bl	800f0b8 <RCCEx_PLL2_Config>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb4e:	e011      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb54:	3328      	adds	r3, #40	; 0x28
 800cb56:	2100      	movs	r1, #0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f002 fb5f 	bl	800f21c <RCCEx_PLL3_Config>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb64:	e006      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb6c:	e002      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb6e:	bf00      	nop
 800cb70:	e000      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cb7c:	4b4f      	ldr	r3, [pc, #316]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800cb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb8a:	4a4c      	ldr	r2, [pc, #304]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb8c:	430b      	orrs	r3, r1
 800cb8e:	6513      	str	r3, [r2, #80]	; 0x50
 800cb90:	e003      	b.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cba6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cbb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	d053      	beq.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cbc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbc6:	d035      	beq.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cbc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbcc:	d82e      	bhi.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cbd2:	d031      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cbd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cbd8:	d828      	bhi.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbde:	d01a      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cbe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbe4:	d822      	bhi.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cbea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbee:	d007      	beq.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cbf0:	e01c      	b.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbf2:	4b32      	ldr	r3, [pc, #200]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	4a31      	ldr	r2, [pc, #196]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbfe:	e01c      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc04:	3308      	adds	r3, #8
 800cc06:	2100      	movs	r1, #0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f002 fa55 	bl	800f0b8 <RCCEx_PLL2_Config>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cc14:	e011      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc1a:	3328      	adds	r3, #40	; 0x28
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f002 fafc 	bl	800f21c <RCCEx_PLL3_Config>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc2a:	e006      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc32:	e002      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc34:	bf00      	nop
 800cc36:	e000      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10b      	bne.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cc42:	4b1e      	ldr	r3, [pc, #120]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800cc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc52:	4a1a      	ldr	r2, [pc, #104]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc54:	430b      	orrs	r3, r1
 800cc56:	6593      	str	r3, [r2, #88]	; 0x58
 800cc58:	e003      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cc6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc72:	2300      	movs	r3, #0
 800cc74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cc78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	d056      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cc8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc8e:	d038      	beq.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cc90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc94:	d831      	bhi.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc9a:	d034      	beq.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cc9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cca0:	d82b      	bhi.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cca6:	d01d      	beq.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccac:	d825      	bhi.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ccb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccb6:	d00a      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ccb8:	e01f      	b.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ccba:	bf00      	nop
 800ccbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccc0:	4ba2      	ldr	r3, [pc, #648]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc4:	4aa1      	ldr	r2, [pc, #644]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cccc:	e01c      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f002 f9ee 	bl	800f0b8 <RCCEx_PLL2_Config>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cce2:	e011      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce8:	3328      	adds	r3, #40	; 0x28
 800ccea:	2100      	movs	r1, #0
 800ccec:	4618      	mov	r0, r3
 800ccee:	f002 fa95 	bl	800f21c <RCCEx_PLL3_Config>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccf8:	e006      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd00:	e002      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cd02:	bf00      	nop
 800cd04:	e000      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cd06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10b      	bne.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cd10:	4b8e      	ldr	r3, [pc, #568]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd20:	4a8a      	ldr	r2, [pc, #552]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd22:	430b      	orrs	r3, r1
 800cd24:	6593      	str	r3, [r2, #88]	; 0x58
 800cd26:	e003      	b.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cd3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd40:	2300      	movs	r3, #0
 800cd42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cd46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	d03a      	beq.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd56:	2b30      	cmp	r3, #48	; 0x30
 800cd58:	d01f      	beq.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cd5a:	2b30      	cmp	r3, #48	; 0x30
 800cd5c:	d819      	bhi.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd5e:	2b20      	cmp	r3, #32
 800cd60:	d00c      	beq.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	d815      	bhi.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d019      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cd6a:	2b10      	cmp	r3, #16
 800cd6c:	d111      	bne.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd6e:	4b77      	ldr	r3, [pc, #476]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	4a76      	ldr	r2, [pc, #472]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd7a:	e011      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd80:	3308      	adds	r3, #8
 800cd82:	2102      	movs	r1, #2
 800cd84:	4618      	mov	r0, r3
 800cd86:	f002 f997 	bl	800f0b8 <RCCEx_PLL2_Config>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd90:	e006      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd98:	e002      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd9a:	bf00      	nop
 800cd9c:	e000      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cda0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10a      	bne.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cda8:	4b68      	ldr	r3, [pc, #416]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cdaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdb6:	4a65      	ldr	r2, [pc, #404]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cdbc:	e003      	b.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cdd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cddc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cde0:	460b      	mov	r3, r1
 800cde2:	4313      	orrs	r3, r2
 800cde4:	d051      	beq.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdf0:	d035      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cdf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdf6:	d82e      	bhi.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cdf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdfc:	d031      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cdfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce02:	d828      	bhi.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ce04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce08:	d01a      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ce0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce0e:	d822      	bhi.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d003      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ce14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce18:	d007      	beq.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ce1a:	e01c      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce1c:	4b4b      	ldr	r3, [pc, #300]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce20:	4a4a      	ldr	r2, [pc, #296]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce28:	e01c      	b.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce2e:	3308      	adds	r3, #8
 800ce30:	2100      	movs	r1, #0
 800ce32:	4618      	mov	r0, r3
 800ce34:	f002 f940 	bl	800f0b8 <RCCEx_PLL2_Config>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce3e:	e011      	b.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce44:	3328      	adds	r3, #40	; 0x28
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f002 f9e7 	bl	800f21c <RCCEx_PLL3_Config>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce54:	e006      	b.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce5c:	e002      	b.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce5e:	bf00      	nop
 800ce60:	e000      	b.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce6c:	4b37      	ldr	r3, [pc, #220]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ce74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce7a:	4a34      	ldr	r2, [pc, #208]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce7c:	430b      	orrs	r3, r1
 800ce7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ce80:	e003      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ce96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cea0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cea4:	460b      	mov	r3, r1
 800cea6:	4313      	orrs	r3, r2
 800cea8:	d056      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ceaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ceb4:	d033      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ceb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ceba:	d82c      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cec0:	d02f      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cec6:	d826      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cecc:	d02b      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ced2:	d820      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ced4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ced8:	d012      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ceda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cede:	d81a      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d022      	beq.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cee8:	d115      	bne.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ceea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceee:	3308      	adds	r3, #8
 800cef0:	2101      	movs	r1, #1
 800cef2:	4618      	mov	r0, r3
 800cef4:	f002 f8e0 	bl	800f0b8 <RCCEx_PLL2_Config>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cefe:	e015      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf04:	3328      	adds	r3, #40	; 0x28
 800cf06:	2101      	movs	r1, #1
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f002 f987 	bl	800f21c <RCCEx_PLL3_Config>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cf14:	e00a      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf1c:	e006      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf1e:	bf00      	nop
 800cf20:	e004      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf22:	bf00      	nop
 800cf24:	e002      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf26:	bf00      	nop
 800cf28:	e000      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10d      	bne.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cf34:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cf3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf42:	4a02      	ldr	r2, [pc, #8]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf44:	430b      	orrs	r3, r1
 800cf46:	6513      	str	r3, [r2, #80]	; 0x50
 800cf48:	e006      	b.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cf4a:	bf00      	nop
 800cf4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cf64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cf72:	460b      	mov	r3, r1
 800cf74:	4313      	orrs	r3, r2
 800cf76:	d055      	beq.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf84:	d033      	beq.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cf86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf8a:	d82c      	bhi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf90:	d02f      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cf92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf96:	d826      	bhi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf9c:	d02b      	beq.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cf9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfa2:	d820      	bhi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cfa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa8:	d012      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cfaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfae:	d81a      	bhi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d022      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cfb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb8:	d115      	bne.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f002 f878 	bl	800f0b8 <RCCEx_PLL2_Config>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfce:	e015      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfd4:	3328      	adds	r3, #40	; 0x28
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f002 f91f 	bl	800f21c <RCCEx_PLL3_Config>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfe4:	e00a      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfec:	e006      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfee:	bf00      	nop
 800cff0:	e004      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cff2:	bf00      	nop
 800cff4:	e002      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cff6:	bf00      	nop
 800cff8:	e000      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10b      	bne.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d004:	4ba3      	ldr	r3, [pc, #652]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d008:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d014:	4a9f      	ldr	r2, [pc, #636]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d016:	430b      	orrs	r3, r1
 800d018:	6593      	str	r3, [r2, #88]	; 0x58
 800d01a:	e003      	b.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d034:	2300      	movs	r3, #0
 800d036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d03a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d03e:	460b      	mov	r3, r1
 800d040:	4313      	orrs	r3, r2
 800d042:	d037      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d04e:	d00e      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d054:	d816      	bhi.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d056:	2b00      	cmp	r3, #0
 800d058:	d018      	beq.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d05e:	d111      	bne.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d060:	4b8c      	ldr	r3, [pc, #560]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	4a8b      	ldr	r2, [pc, #556]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d06a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d06c:	e00f      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d072:	3308      	adds	r3, #8
 800d074:	2101      	movs	r1, #1
 800d076:	4618      	mov	r0, r3
 800d078:	f002 f81e 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d082:	e004      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d08a:	e000      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d096:	4b7f      	ldr	r3, [pc, #508]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d09a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a4:	4a7b      	ldr	r2, [pc, #492]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0a6:	430b      	orrs	r3, r1
 800d0a8:	6513      	str	r3, [r2, #80]	; 0x50
 800d0aa:	e003      	b.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d0c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d0ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	d039      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d81c      	bhi.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d0de:	a201      	add	r2, pc, #4	; (adr r2, 800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e4:	0800d121 	.word	0x0800d121
 800d0e8:	0800d0f5 	.word	0x0800d0f5
 800d0ec:	0800d103 	.word	0x0800d103
 800d0f0:	0800d121 	.word	0x0800d121
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0f4:	4b67      	ldr	r3, [pc, #412]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f8:	4a66      	ldr	r2, [pc, #408]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d100:	e00f      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d106:	3308      	adds	r3, #8
 800d108:	2102      	movs	r1, #2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f001 ffd4 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d116:	e004      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d11e:	e000      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d120:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10a      	bne.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d12a:	4b5a      	ldr	r3, [pc, #360]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d12e:	f023 0103 	bic.w	r1, r3, #3
 800d132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d138:	4a56      	ldr	r2, [pc, #344]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d13a:	430b      	orrs	r3, r1
 800d13c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d13e:	e003      	b.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d158:	2300      	movs	r3, #0
 800d15a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d15e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d162:	460b      	mov	r3, r1
 800d164:	4313      	orrs	r3, r2
 800d166:	f000 809f 	beq.w	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d16a:	4b4b      	ldr	r3, [pc, #300]	; (800d298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a4a      	ldr	r2, [pc, #296]	; (800d298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d176:	f7f8 f87d 	bl	8005274 <HAL_GetTick>
 800d17a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d17e:	e00b      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d180:	f7f8 f878 	bl	8005274 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b64      	cmp	r3, #100	; 0x64
 800d18e:	d903      	bls.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d196:	e005      	b.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d198:	4b3f      	ldr	r3, [pc, #252]	; (800d298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0ed      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d179      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d1ac:	4b39      	ldr	r3, [pc, #228]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1b8:	4053      	eors	r3, r2
 800d1ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d015      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d1c2:	4b34      	ldr	r3, [pc, #208]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1ce:	4b31      	ldr	r3, [pc, #196]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d2:	4a30      	ldr	r2, [pc, #192]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1da:	4b2e      	ldr	r3, [pc, #184]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1de:	4a2d      	ldr	r2, [pc, #180]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d1e6:	4a2b      	ldr	r2, [pc, #172]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d1ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1fa:	d118      	bne.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1fc:	f7f8 f83a 	bl	8005274 <HAL_GetTick>
 800d200:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d204:	e00d      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d206:	f7f8 f835 	bl	8005274 <HAL_GetTick>
 800d20a:	4602      	mov	r2, r0
 800d20c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d210:	1ad2      	subs	r2, r2, r3
 800d212:	f241 3388 	movw	r3, #5000	; 0x1388
 800d216:	429a      	cmp	r2, r3
 800d218:	d903      	bls.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d220:	e005      	b.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d226:	f003 0302 	and.w	r3, r3, #2
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0eb      	beq.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d232:	2b00      	cmp	r3, #0
 800d234:	d129      	bne.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d23a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d23e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d246:	d10e      	bne.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d248:	4b12      	ldr	r3, [pc, #72]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d258:	091a      	lsrs	r2, r3, #4
 800d25a:	4b10      	ldr	r3, [pc, #64]	; (800d29c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d25c:	4013      	ands	r3, r2
 800d25e:	4a0d      	ldr	r2, [pc, #52]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d260:	430b      	orrs	r3, r1
 800d262:	6113      	str	r3, [r2, #16]
 800d264:	e005      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d266:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	4a0a      	ldr	r2, [pc, #40]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d26c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d270:	6113      	str	r3, [r2, #16]
 800d272:	4b08      	ldr	r3, [pc, #32]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d274:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d27a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d27e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d282:	4a04      	ldr	r2, [pc, #16]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d284:	430b      	orrs	r3, r1
 800d286:	6713      	str	r3, [r2, #112]	; 0x70
 800d288:	e00e      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d28e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d292:	e009      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d294:	58024400 	.word	0x58024400
 800d298:	58024800 	.word	0x58024800
 800d29c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f002 0301 	and.w	r3, r2, #1
 800d2b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	f000 8089 	beq.w	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d0:	2b28      	cmp	r3, #40	; 0x28
 800d2d2:	d86b      	bhi.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d2d4:	a201      	add	r2, pc, #4	; (adr r2, 800d2dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2da:	bf00      	nop
 800d2dc:	0800d3b5 	.word	0x0800d3b5
 800d2e0:	0800d3ad 	.word	0x0800d3ad
 800d2e4:	0800d3ad 	.word	0x0800d3ad
 800d2e8:	0800d3ad 	.word	0x0800d3ad
 800d2ec:	0800d3ad 	.word	0x0800d3ad
 800d2f0:	0800d3ad 	.word	0x0800d3ad
 800d2f4:	0800d3ad 	.word	0x0800d3ad
 800d2f8:	0800d3ad 	.word	0x0800d3ad
 800d2fc:	0800d381 	.word	0x0800d381
 800d300:	0800d3ad 	.word	0x0800d3ad
 800d304:	0800d3ad 	.word	0x0800d3ad
 800d308:	0800d3ad 	.word	0x0800d3ad
 800d30c:	0800d3ad 	.word	0x0800d3ad
 800d310:	0800d3ad 	.word	0x0800d3ad
 800d314:	0800d3ad 	.word	0x0800d3ad
 800d318:	0800d3ad 	.word	0x0800d3ad
 800d31c:	0800d397 	.word	0x0800d397
 800d320:	0800d3ad 	.word	0x0800d3ad
 800d324:	0800d3ad 	.word	0x0800d3ad
 800d328:	0800d3ad 	.word	0x0800d3ad
 800d32c:	0800d3ad 	.word	0x0800d3ad
 800d330:	0800d3ad 	.word	0x0800d3ad
 800d334:	0800d3ad 	.word	0x0800d3ad
 800d338:	0800d3ad 	.word	0x0800d3ad
 800d33c:	0800d3b5 	.word	0x0800d3b5
 800d340:	0800d3ad 	.word	0x0800d3ad
 800d344:	0800d3ad 	.word	0x0800d3ad
 800d348:	0800d3ad 	.word	0x0800d3ad
 800d34c:	0800d3ad 	.word	0x0800d3ad
 800d350:	0800d3ad 	.word	0x0800d3ad
 800d354:	0800d3ad 	.word	0x0800d3ad
 800d358:	0800d3ad 	.word	0x0800d3ad
 800d35c:	0800d3b5 	.word	0x0800d3b5
 800d360:	0800d3ad 	.word	0x0800d3ad
 800d364:	0800d3ad 	.word	0x0800d3ad
 800d368:	0800d3ad 	.word	0x0800d3ad
 800d36c:	0800d3ad 	.word	0x0800d3ad
 800d370:	0800d3ad 	.word	0x0800d3ad
 800d374:	0800d3ad 	.word	0x0800d3ad
 800d378:	0800d3ad 	.word	0x0800d3ad
 800d37c:	0800d3b5 	.word	0x0800d3b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d384:	3308      	adds	r3, #8
 800d386:	2101      	movs	r1, #1
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 fe95 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d394:	e00f      	b.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d39a:	3328      	adds	r3, #40	; 0x28
 800d39c:	2101      	movs	r1, #1
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f001 ff3c 	bl	800f21c <RCCEx_PLL3_Config>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d3aa:	e004      	b.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3b2:	e000      	b.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10a      	bne.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d3be:	4bbf      	ldr	r3, [pc, #764]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3cc:	4abb      	ldr	r2, [pc, #748]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3ce:	430b      	orrs	r3, r1
 800d3d0:	6553      	str	r3, [r2, #84]	; 0x54
 800d3d2:	e003      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	f002 0302 	and.w	r3, r2, #2
 800d3e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d3f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	d041      	beq.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d402:	2b05      	cmp	r3, #5
 800d404:	d824      	bhi.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d406:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40c:	0800d459 	.word	0x0800d459
 800d410:	0800d425 	.word	0x0800d425
 800d414:	0800d43b 	.word	0x0800d43b
 800d418:	0800d459 	.word	0x0800d459
 800d41c:	0800d459 	.word	0x0800d459
 800d420:	0800d459 	.word	0x0800d459
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d428:	3308      	adds	r3, #8
 800d42a:	2101      	movs	r1, #1
 800d42c:	4618      	mov	r0, r3
 800d42e:	f001 fe43 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d432:	4603      	mov	r3, r0
 800d434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d438:	e00f      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d43e:	3328      	adds	r3, #40	; 0x28
 800d440:	2101      	movs	r1, #1
 800d442:	4618      	mov	r0, r3
 800d444:	f001 feea 	bl	800f21c <RCCEx_PLL3_Config>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d44e:	e004      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d456:	e000      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10a      	bne.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d462:	4b96      	ldr	r3, [pc, #600]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d466:	f023 0107 	bic.w	r1, r3, #7
 800d46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d46e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d470:	4a92      	ldr	r2, [pc, #584]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d472:	430b      	orrs	r3, r1
 800d474:	6553      	str	r3, [r2, #84]	; 0x54
 800d476:	e003      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d47c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	f002 0304 	and.w	r3, r2, #4
 800d48c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d490:	2300      	movs	r3, #0
 800d492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d496:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4313      	orrs	r3, r2
 800d49e:	d044      	beq.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d4a8:	2b05      	cmp	r3, #5
 800d4aa:	d825      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d4ac:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b2:	bf00      	nop
 800d4b4:	0800d501 	.word	0x0800d501
 800d4b8:	0800d4cd 	.word	0x0800d4cd
 800d4bc:	0800d4e3 	.word	0x0800d4e3
 800d4c0:	0800d501 	.word	0x0800d501
 800d4c4:	0800d501 	.word	0x0800d501
 800d4c8:	0800d501 	.word	0x0800d501
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f001 fdef 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4e0:	e00f      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4e6:	3328      	adds	r3, #40	; 0x28
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f001 fe96 	bl	800f21c <RCCEx_PLL3_Config>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4f6:	e004      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d4fe:	e000      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10b      	bne.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d50a:	4b6c      	ldr	r3, [pc, #432]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d50e:	f023 0107 	bic.w	r1, r3, #7
 800d512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d51a:	4a68      	ldr	r2, [pc, #416]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d51c:	430b      	orrs	r3, r1
 800d51e:	6593      	str	r3, [r2, #88]	; 0x58
 800d520:	e003      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f002 0320 	and.w	r3, r2, #32
 800d536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d53a:	2300      	movs	r3, #0
 800d53c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d544:	460b      	mov	r3, r1
 800d546:	4313      	orrs	r3, r2
 800d548:	d055      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d556:	d033      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d55c:	d82c      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d562:	d02f      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d568:	d826      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d56a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d56e:	d02b      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d574:	d820      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d57a:	d012      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d580:	d81a      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d022      	beq.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d58a:	d115      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d590:	3308      	adds	r3, #8
 800d592:	2100      	movs	r1, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f001 fd8f 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d59a:	4603      	mov	r3, r0
 800d59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5a0:	e015      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5a6:	3328      	adds	r3, #40	; 0x28
 800d5a8:	2102      	movs	r1, #2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fe36 	bl	800f21c <RCCEx_PLL3_Config>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5b6:	e00a      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5be:	e006      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e004      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5c4:	bf00      	nop
 800d5c6:	e002      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5c8:	bf00      	nop
 800d5ca:	e000      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10b      	bne.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d5d6:	4b39      	ldr	r3, [pc, #228]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5e6:	4a35      	ldr	r2, [pc, #212]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5e8:	430b      	orrs	r3, r1
 800d5ea:	6553      	str	r3, [r2, #84]	; 0x54
 800d5ec:	e003      	b.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d606:	2300      	movs	r3, #0
 800d608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d60c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d610:	460b      	mov	r3, r1
 800d612:	4313      	orrs	r3, r2
 800d614:	d058      	beq.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d61a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d61e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d622:	d033      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d624:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d628:	d82c      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d62e:	d02f      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d634:	d826      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d63a:	d02b      	beq.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d63c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d640:	d820      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d646:	d012      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d64c:	d81a      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d022      	beq.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d656:	d115      	bne.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d65c:	3308      	adds	r3, #8
 800d65e:	2100      	movs	r1, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f001 fd29 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d66c:	e015      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d672:	3328      	adds	r3, #40	; 0x28
 800d674:	2102      	movs	r1, #2
 800d676:	4618      	mov	r0, r3
 800d678:	f001 fdd0 	bl	800f21c <RCCEx_PLL3_Config>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d682:	e00a      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d68a:	e006      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d68c:	bf00      	nop
 800d68e:	e004      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d690:	bf00      	nop
 800d692:	e002      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d69a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10e      	bne.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d6a2:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6b2:	4a02      	ldr	r2, [pc, #8]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6b4:	430b      	orrs	r3, r1
 800d6b6:	6593      	str	r3, [r2, #88]	; 0x58
 800d6b8:	e006      	b.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d6ba:	bf00      	nop
 800d6bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d055      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d6f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6f4:	d033      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d6f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6fa:	d82c      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d700:	d02f      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d706:	d826      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d70c:	d02b      	beq.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d70e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d712:	d820      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d718:	d012      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d71a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d71e:	d81a      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d720:	2b00      	cmp	r3, #0
 800d722:	d022      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d728:	d115      	bne.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d72e:	3308      	adds	r3, #8
 800d730:	2100      	movs	r1, #0
 800d732:	4618      	mov	r0, r3
 800d734:	f001 fcc0 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d73e:	e015      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d744:	3328      	adds	r3, #40	; 0x28
 800d746:	2102      	movs	r1, #2
 800d748:	4618      	mov	r0, r3
 800d74a:	f001 fd67 	bl	800f21c <RCCEx_PLL3_Config>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d754:	e00a      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d75c:	e006      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d75e:	bf00      	nop
 800d760:	e004      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d762:	bf00      	nop
 800d764:	e002      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d766:	bf00      	nop
 800d768:	e000      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d76c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10b      	bne.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d774:	4ba1      	ldr	r3, [pc, #644]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d778:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d784:	4a9d      	ldr	r2, [pc, #628]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d786:	430b      	orrs	r3, r1
 800d788:	6593      	str	r3, [r2, #88]	; 0x58
 800d78a:	e003      	b.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d78c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f002 0308 	and.w	r3, r2, #8
 800d7a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d7aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	d01e      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7c0:	d10c      	bne.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7c6:	3328      	adds	r3, #40	; 0x28
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f001 fd26 	bl	800f21c <RCCEx_PLL3_Config>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d7dc:	4b87      	ldr	r3, [pc, #540]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ec:	4a83      	ldr	r2, [pc, #524]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7ee:	430b      	orrs	r3, r1
 800d7f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f002 0310 	and.w	r3, r2, #16
 800d7fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d802:	2300      	movs	r3, #0
 800d804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d808:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d80c:	460b      	mov	r3, r1
 800d80e:	4313      	orrs	r3, r2
 800d810:	d01e      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d81e:	d10c      	bne.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d824:	3328      	adds	r3, #40	; 0x28
 800d826:	2102      	movs	r1, #2
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 fcf7 	bl	800f21c <RCCEx_PLL3_Config>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d83a:	4b70      	ldr	r3, [pc, #448]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d83e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d84a:	4a6c      	ldr	r2, [pc, #432]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d84c:	430b      	orrs	r3, r1
 800d84e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d85c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d860:	2300      	movs	r3, #0
 800d862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d866:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d86a:	460b      	mov	r3, r1
 800d86c:	4313      	orrs	r3, r2
 800d86e:	d03e      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d87c:	d022      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d882:	d81b      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d88c:	d00b      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d88e:	e015      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d894:	3308      	adds	r3, #8
 800d896:	2100      	movs	r1, #0
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 fc0d 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8a4:	e00f      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8aa:	3328      	adds	r3, #40	; 0x28
 800d8ac:	2102      	movs	r1, #2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f001 fcb4 	bl	800f21c <RCCEx_PLL3_Config>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8ba:	e004      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d8c2:	e000      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8ce:	4b4b      	ldr	r3, [pc, #300]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8de:	4a47      	ldr	r2, [pc, #284]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8e0:	430b      	orrs	r3, r1
 800d8e2:	6593      	str	r3, [r2, #88]	; 0x58
 800d8e4:	e003      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d8fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d900:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d904:	460b      	mov	r3, r1
 800d906:	4313      	orrs	r3, r2
 800d908:	d03b      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d916:	d01f      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d91c:	d818      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d922:	d003      	beq.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d928:	d007      	beq.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d92a:	e011      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d92c:	4b33      	ldr	r3, [pc, #204]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d930:	4a32      	ldr	r2, [pc, #200]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d938:	e00f      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d93e:	3328      	adds	r3, #40	; 0x28
 800d940:	2101      	movs	r1, #1
 800d942:	4618      	mov	r0, r3
 800d944:	f001 fc6a 	bl	800f21c <RCCEx_PLL3_Config>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d94e:	e004      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d956:	e000      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d95a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10b      	bne.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d962:	4b26      	ldr	r3, [pc, #152]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d966:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d972:	4a22      	ldr	r2, [pc, #136]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d974:	430b      	orrs	r3, r1
 800d976:	6553      	str	r3, [r2, #84]	; 0x54
 800d978:	e003      	b.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d97e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d98e:	673b      	str	r3, [r7, #112]	; 0x70
 800d990:	2300      	movs	r3, #0
 800d992:	677b      	str	r3, [r7, #116]	; 0x74
 800d994:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d998:	460b      	mov	r3, r1
 800d99a:	4313      	orrs	r3, r2
 800d99c:	d034      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d003      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ac:	d007      	beq.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d9ae:	e011      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9b0:	4b12      	ldr	r3, [pc, #72]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	4a11      	ldr	r2, [pc, #68]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9bc:	e00e      	b.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	2102      	movs	r1, #2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f001 fb76 	bl	800f0b8 <RCCEx_PLL2_Config>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9d2:	e003      	b.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10d      	bne.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f2:	4a02      	ldr	r2, [pc, #8]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9f4:	430b      	orrs	r3, r1
 800d9f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d9f8:	e006      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d9fa:	bf00      	nop
 800d9fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800da08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800da14:	66bb      	str	r3, [r7, #104]	; 0x68
 800da16:	2300      	movs	r3, #0
 800da18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800da1e:	460b      	mov	r3, r1
 800da20:	4313      	orrs	r3, r2
 800da22:	d00c      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da28:	3328      	adds	r3, #40	; 0x28
 800da2a:	2102      	movs	r1, #2
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 fbf5 	bl	800f21c <RCCEx_PLL3_Config>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800da3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800da4a:	663b      	str	r3, [r7, #96]	; 0x60
 800da4c:	2300      	movs	r3, #0
 800da4e:	667b      	str	r3, [r7, #100]	; 0x64
 800da50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800da54:	460b      	mov	r3, r1
 800da56:	4313      	orrs	r3, r2
 800da58:	d038      	beq.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da66:	d018      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800da68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da6c:	d811      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da72:	d014      	beq.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800da74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da78:	d80b      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d011      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800da7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da82:	d106      	bne.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da84:	4bc3      	ldr	r3, [pc, #780]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da88:	4ac2      	ldr	r2, [pc, #776]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800da90:	e008      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da98:	e004      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da9a:	bf00      	nop
 800da9c:	e002      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da9e:	bf00      	nop
 800daa0:	e000      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800daa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800daa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10b      	bne.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800daac:	4bb9      	ldr	r3, [pc, #740]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dabc:	4ab5      	ldr	r2, [pc, #724]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dabe:	430b      	orrs	r3, r1
 800dac0:	6553      	str	r3, [r2, #84]	; 0x54
 800dac2:	e003      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dad8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dada:	2300      	movs	r3, #0
 800dadc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dade:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dae2:	460b      	mov	r3, r1
 800dae4:	4313      	orrs	r3, r2
 800dae6:	d009      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dae8:	4baa      	ldr	r3, [pc, #680]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf6:	4aa7      	ldr	r2, [pc, #668]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daf8:	430b      	orrs	r3, r1
 800dafa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800db08:	653b      	str	r3, [r7, #80]	; 0x50
 800db0a:	2300      	movs	r3, #0
 800db0c:	657b      	str	r3, [r7, #84]	; 0x54
 800db0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800db12:	460b      	mov	r3, r1
 800db14:	4313      	orrs	r3, r2
 800db16:	d00a      	beq.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800db18:	4b9e      	ldr	r3, [pc, #632]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800db20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800db28:	4a9a      	ldr	r2, [pc, #616]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db2a:	430b      	orrs	r3, r1
 800db2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800db3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800db3c:	2300      	movs	r3, #0
 800db3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800db44:	460b      	mov	r3, r1
 800db46:	4313      	orrs	r3, r2
 800db48:	d009      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db4a:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800db52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db58:	4a8e      	ldr	r2, [pc, #568]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db5a:	430b      	orrs	r3, r1
 800db5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800db5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800db6a:	643b      	str	r3, [r7, #64]	; 0x40
 800db6c:	2300      	movs	r3, #0
 800db6e:	647b      	str	r3, [r7, #68]	; 0x44
 800db70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800db74:	460b      	mov	r3, r1
 800db76:	4313      	orrs	r3, r2
 800db78:	d00e      	beq.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800db7a:	4b86      	ldr	r3, [pc, #536]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	4a85      	ldr	r2, [pc, #532]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db84:	6113      	str	r3, [r2, #16]
 800db86:	4b83      	ldr	r3, [pc, #524]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db88:	6919      	ldr	r1, [r3, #16]
 800db8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db92:	4a80      	ldr	r2, [pc, #512]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db94:	430b      	orrs	r3, r1
 800db96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800db98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800dba4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dba6:	2300      	movs	r3, #0
 800dba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	d009      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dbb4:	4b77      	ldr	r3, [pc, #476]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc2:	4a74      	ldr	r2, [pc, #464]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbc4:	430b      	orrs	r3, r1
 800dbc6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dbd4:	633b      	str	r3, [r7, #48]	; 0x30
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	d00a      	beq.n	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dbe4:	4b6b      	ldr	r3, [pc, #428]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800dbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbf4:	4a67      	ldr	r2, [pc, #412]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	2100      	movs	r1, #0
 800dc04:	62b9      	str	r1, [r7, #40]	; 0x28
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dc10:	460b      	mov	r3, r1
 800dc12:	4313      	orrs	r3, r2
 800dc14:	d011      	beq.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 fa4a 	bl	800f0b8 <RCCEx_PLL2_Config>
 800dc24:	4603      	mov	r3, r0
 800dc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	2100      	movs	r1, #0
 800dc44:	6239      	str	r1, [r7, #32]
 800dc46:	f003 0302 	and.w	r3, r3, #2
 800dc4a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc50:	460b      	mov	r3, r1
 800dc52:	4313      	orrs	r3, r2
 800dc54:	d011      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc5a:	3308      	adds	r3, #8
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f001 fa2a 	bl	800f0b8 <RCCEx_PLL2_Config>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	2100      	movs	r1, #0
 800dc84:	61b9      	str	r1, [r7, #24]
 800dc86:	f003 0304 	and.w	r3, r3, #4
 800dc8a:	61fb      	str	r3, [r7, #28]
 800dc8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dc90:	460b      	mov	r3, r1
 800dc92:	4313      	orrs	r3, r2
 800dc94:	d011      	beq.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc9a:	3308      	adds	r3, #8
 800dc9c:	2102      	movs	r1, #2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f001 fa0a 	bl	800f0b8 <RCCEx_PLL2_Config>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	6139      	str	r1, [r7, #16]
 800dcc6:	f003 0308 	and.w	r3, r3, #8
 800dcca:	617b      	str	r3, [r7, #20]
 800dccc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	d011      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcda:	3328      	adds	r3, #40	; 0x28
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 fa9c 	bl	800f21c <RCCEx_PLL3_Config>
 800dce4:	4603      	mov	r3, r0
 800dce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800dcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d003      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	2100      	movs	r1, #0
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	f003 0310 	and.w	r3, r3, #16
 800dd0a:	60fb      	str	r3, [r7, #12]
 800dd0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dd10:	460b      	mov	r3, r1
 800dd12:	4313      	orrs	r3, r2
 800dd14:	d011      	beq.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd1a:	3328      	adds	r3, #40	; 0x28
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 fa7c 	bl	800f21c <RCCEx_PLL3_Config>
 800dd24:	4603      	mov	r3, r0
 800dd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	2100      	movs	r1, #0
 800dd44:	6039      	str	r1, [r7, #0]
 800dd46:	f003 0320 	and.w	r3, r3, #32
 800dd4a:	607b      	str	r3, [r7, #4]
 800dd4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dd50:	460b      	mov	r3, r1
 800dd52:	4313      	orrs	r3, r2
 800dd54:	d011      	beq.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd5a:	3328      	adds	r3, #40	; 0x28
 800dd5c:	2102      	movs	r1, #2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f001 fa5c 	bl	800f21c <RCCEx_PLL3_Config>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800dd7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	e000      	b.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd94:	58024400 	.word	0x58024400

0800dd98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b090      	sub	sp, #64	; 0x40
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800dda2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dda6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	f040 8094 	bne.w	800ded8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ddb0:	4b9e      	ldr	r3, [pc, #632]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb4:	f003 0307 	and.w	r3, r3, #7
 800ddb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	2b04      	cmp	r3, #4
 800ddbe:	f200 8087 	bhi.w	800ded0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ddc2:	a201      	add	r2, pc, #4	; (adr r2, 800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ddc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc8:	0800dddd 	.word	0x0800dddd
 800ddcc:	0800de05 	.word	0x0800de05
 800ddd0:	0800de2d 	.word	0x0800de2d
 800ddd4:	0800dec9 	.word	0x0800dec9
 800ddd8:	0800de55 	.word	0x0800de55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dddc:	4b93      	ldr	r3, [pc, #588]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dde4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dde8:	d108      	bne.n	800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f001 f810 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddf8:	f000 bd45 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de00:	f000 bd41 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de04:	4b89      	ldr	r3, [pc, #548]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de10:	d108      	bne.n	800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de12:	f107 0318 	add.w	r3, r7, #24
 800de16:	4618      	mov	r0, r3
 800de18:	f000 fd54 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de20:	f000 bd31 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de24:	2300      	movs	r3, #0
 800de26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de28:	f000 bd2d 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de2c:	4b7f      	ldr	r3, [pc, #508]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de38:	d108      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de3a:	f107 030c 	add.w	r3, r7, #12
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 fe94 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de48:	f000 bd1d 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de50:	f000 bd19 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de54:	4b75      	ldr	r3, [pc, #468]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de5e:	4b73      	ldr	r3, [pc, #460]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f003 0304 	and.w	r3, r3, #4
 800de66:	2b04      	cmp	r3, #4
 800de68:	d10c      	bne.n	800de84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800de6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d109      	bne.n	800de84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de70:	4b6e      	ldr	r3, [pc, #440]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	08db      	lsrs	r3, r3, #3
 800de76:	f003 0303 	and.w	r3, r3, #3
 800de7a:	4a6d      	ldr	r2, [pc, #436]	; (800e030 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800de7c:	fa22 f303 	lsr.w	r3, r2, r3
 800de80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de82:	e01f      	b.n	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de84:	4b69      	ldr	r3, [pc, #420]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de90:	d106      	bne.n	800dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800de92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de98:	d102      	bne.n	800dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800de9a:	4b66      	ldr	r3, [pc, #408]	; (800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800de9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de9e:	e011      	b.n	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dea0:	4b62      	ldr	r3, [pc, #392]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800deac:	d106      	bne.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800deae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deb4:	d102      	bne.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800deb6:	4b60      	ldr	r3, [pc, #384]	; (800e038 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800deb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deba:	e003      	b.n	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dec0:	f000 bce1 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dec4:	f000 bcdf 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dec8:	4b5c      	ldr	r3, [pc, #368]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800deca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800decc:	f000 bcdb 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ded0:	2300      	movs	r3, #0
 800ded2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ded4:	f000 bcd7 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ded8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dedc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800dee0:	430b      	orrs	r3, r1
 800dee2:	f040 80ad 	bne.w	800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800dee6:	4b51      	ldr	r3, [pc, #324]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800deee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800def6:	d056      	beq.n	800dfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800defe:	f200 8090 	bhi.w	800e022 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	2bc0      	cmp	r3, #192	; 0xc0
 800df06:	f000 8088 	beq.w	800e01a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800df0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0c:	2bc0      	cmp	r3, #192	; 0xc0
 800df0e:	f200 8088 	bhi.w	800e022 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	2b80      	cmp	r3, #128	; 0x80
 800df16:	d032      	beq.n	800df7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2b80      	cmp	r3, #128	; 0x80
 800df1c:	f200 8081 	bhi.w	800e022 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	2b00      	cmp	r3, #0
 800df24:	d003      	beq.n	800df2e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	2b40      	cmp	r3, #64	; 0x40
 800df2a:	d014      	beq.n	800df56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800df2c:	e079      	b.n	800e022 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df2e:	4b3f      	ldr	r3, [pc, #252]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df3a:	d108      	bne.n	800df4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df40:	4618      	mov	r0, r3
 800df42:	f000 ff67 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df4a:	f000 bc9c 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df52:	f000 bc98 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df56:	4b35      	ldr	r3, [pc, #212]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df62:	d108      	bne.n	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df64:	f107 0318 	add.w	r3, r7, #24
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 fcab 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df72:	f000 bc88 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df76:	2300      	movs	r3, #0
 800df78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df7a:	f000 bc84 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df7e:	4b2b      	ldr	r3, [pc, #172]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df8a:	d108      	bne.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df8c:	f107 030c 	add.w	r3, r7, #12
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fdeb 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df9a:	f000 bc74 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfa2:	f000 bc70 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dfa6:	4b21      	ldr	r3, [pc, #132]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dfae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dfb0:	4b1e      	ldr	r3, [pc, #120]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b04      	cmp	r3, #4
 800dfba:	d10c      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800dfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d109      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfc2:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	08db      	lsrs	r3, r3, #3
 800dfc8:	f003 0303 	and.w	r3, r3, #3
 800dfcc:	4a18      	ldr	r2, [pc, #96]	; (800e030 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dfce:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfd4:	e01f      	b.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfd6:	4b15      	ldr	r3, [pc, #84]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfe2:	d106      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800dfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfea:	d102      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dfec:	4b11      	ldr	r3, [pc, #68]	; (800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800dfee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dff0:	e011      	b.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dff2:	4b0e      	ldr	r3, [pc, #56]	; (800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dffe:	d106      	bne.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e006:	d102      	bne.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e008:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e00c:	e003      	b.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e012:	f000 bc38 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e016:	f000 bc36 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e01a:	4b08      	ldr	r3, [pc, #32]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e01e:	f000 bc32 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e026:	f000 bc2e 	b.w	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e02a:	bf00      	nop
 800e02c:	58024400 	.word	0x58024400
 800e030:	03d09000 	.word	0x03d09000
 800e034:	003d0900 	.word	0x003d0900
 800e038:	017d7840 	.word	0x017d7840
 800e03c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e044:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e048:	430b      	orrs	r3, r1
 800e04a:	f040 809c 	bne.w	800e186 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e04e:	4b9e      	ldr	r3, [pc, #632]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e052:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e056:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e05e:	d054      	beq.n	800e10a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e066:	f200 808b 	bhi.w	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e070:	f000 8083 	beq.w	800e17a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e07a:	f200 8081 	bhi.w	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e084:	d02f      	beq.n	800e0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e08c:	d878      	bhi.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	2b00      	cmp	r3, #0
 800e092:	d004      	beq.n	800e09e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e09a:	d012      	beq.n	800e0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e09c:	e070      	b.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e09e:	4b8a      	ldr	r3, [pc, #552]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0aa:	d107      	bne.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f000 feaf 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0ba:	e3e4      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c0:	e3e1      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0c2:	4b81      	ldr	r3, [pc, #516]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0ce:	d107      	bne.n	800e0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0d0:	f107 0318 	add.w	r3, r7, #24
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 fbf5 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0de:	e3d2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e4:	e3cf      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0e6:	4b78      	ldr	r3, [pc, #480]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0f2:	d107      	bne.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0f4:	f107 030c 	add.w	r3, r7, #12
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 fd37 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e102:	e3c0      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e104:	2300      	movs	r3, #0
 800e106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e108:	e3bd      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e10a:	4b6f      	ldr	r3, [pc, #444]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e10e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e112:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e114:	4b6c      	ldr	r3, [pc, #432]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	2b04      	cmp	r3, #4
 800e11e:	d10c      	bne.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e122:	2b00      	cmp	r3, #0
 800e124:	d109      	bne.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e126:	4b68      	ldr	r3, [pc, #416]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	08db      	lsrs	r3, r3, #3
 800e12c:	f003 0303 	and.w	r3, r3, #3
 800e130:	4a66      	ldr	r2, [pc, #408]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e132:	fa22 f303 	lsr.w	r3, r2, r3
 800e136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e138:	e01e      	b.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e13a:	4b63      	ldr	r3, [pc, #396]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e146:	d106      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e14e:	d102      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e150:	4b5f      	ldr	r3, [pc, #380]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e154:	e010      	b.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e156:	4b5c      	ldr	r3, [pc, #368]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e15e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e162:	d106      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e16a:	d102      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e16c:	4b59      	ldr	r3, [pc, #356]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e170:	e002      	b.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e176:	e386      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e178:	e385      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e17a:	4b57      	ldr	r3, [pc, #348]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e17e:	e382      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e184:	e37f      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e18a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e18e:	430b      	orrs	r3, r1
 800e190:	f040 80a7 	bne.w	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e194:	4b4c      	ldr	r3, [pc, #304]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e198:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e19c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1a4:	d055      	beq.n	800e252 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1ac:	f200 8096 	bhi.w	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1b6:	f000 8084 	beq.w	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1c0:	f200 808c 	bhi.w	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1ca:	d030      	beq.n	800e22e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1d2:	f200 8083 	bhi.w	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d004      	beq.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1e2:	d012      	beq.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e1e4:	e07a      	b.n	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1e6:	4b38      	ldr	r3, [pc, #224]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1f2:	d107      	bne.n	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 fe0b 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e202:	e340      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e208:	e33d      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e20a:	4b2f      	ldr	r3, [pc, #188]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e216:	d107      	bne.n	800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e218:	f107 0318 	add.w	r3, r7, #24
 800e21c:	4618      	mov	r0, r3
 800e21e:	f000 fb51 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e226:	e32e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e22c:	e32b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e22e:	4b26      	ldr	r3, [pc, #152]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e23a:	d107      	bne.n	800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e23c:	f107 030c 	add.w	r3, r7, #12
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fc93 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e24a:	e31c      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e250:	e319      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e252:	4b1d      	ldr	r3, [pc, #116]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e25a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e25c:	4b1a      	ldr	r3, [pc, #104]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 0304 	and.w	r3, r3, #4
 800e264:	2b04      	cmp	r3, #4
 800e266:	d10c      	bne.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d109      	bne.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e26e:	4b16      	ldr	r3, [pc, #88]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	08db      	lsrs	r3, r3, #3
 800e274:	f003 0303 	and.w	r3, r3, #3
 800e278:	4a14      	ldr	r2, [pc, #80]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e27a:	fa22 f303 	lsr.w	r3, r2, r3
 800e27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e280:	e01e      	b.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e282:	4b11      	ldr	r3, [pc, #68]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e28e:	d106      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e296:	d102      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e298:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e29c:	e010      	b.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e29e:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2aa:	d106      	bne.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2b2:	d102      	bne.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b8:	e002      	b.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e2be:	e2e2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2c0:	e2e1      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2c2:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c6:	e2de      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2c8:	58024400 	.word	0x58024400
 800e2cc:	03d09000 	.word	0x03d09000
 800e2d0:	003d0900 	.word	0x003d0900
 800e2d4:	017d7840 	.word	0x017d7840
 800e2d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2e0:	e2d1      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e2ea:	430b      	orrs	r3, r1
 800e2ec:	f040 809c 	bne.w	800e428 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e2f0:	4b93      	ldr	r3, [pc, #588]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e2f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e300:	d054      	beq.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e308:	f200 808b 	bhi.w	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e312:	f000 8083 	beq.w	800e41c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e31c:	f200 8081 	bhi.w	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e326:	d02f      	beq.n	800e388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e32e:	d878      	bhi.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	2b00      	cmp	r3, #0
 800e334:	d004      	beq.n	800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e33c:	d012      	beq.n	800e364 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e33e:	e070      	b.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e340:	4b7f      	ldr	r3, [pc, #508]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e34c:	d107      	bne.n	800e35e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e34e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e352:	4618      	mov	r0, r3
 800e354:	f000 fd5e 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e35c:	e293      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e35e:	2300      	movs	r3, #0
 800e360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e362:	e290      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e364:	4b76      	ldr	r3, [pc, #472]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e36c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e370:	d107      	bne.n	800e382 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e372:	f107 0318 	add.w	r3, r7, #24
 800e376:	4618      	mov	r0, r3
 800e378:	f000 faa4 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e380:	e281      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e386:	e27e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e388:	4b6d      	ldr	r3, [pc, #436]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e394:	d107      	bne.n	800e3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e396:	f107 030c 	add.w	r3, r7, #12
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 fbe6 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3a4:	e26f      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3aa:	e26c      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e3ac:	4b64      	ldr	r3, [pc, #400]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e3b6:	4b62      	ldr	r3, [pc, #392]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 0304 	and.w	r3, r3, #4
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d10c      	bne.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d109      	bne.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3c8:	4b5d      	ldr	r3, [pc, #372]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	08db      	lsrs	r3, r3, #3
 800e3ce:	f003 0303 	and.w	r3, r3, #3
 800e3d2:	4a5c      	ldr	r2, [pc, #368]	; (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800e3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3da:	e01e      	b.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e3dc:	4b58      	ldr	r3, [pc, #352]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e8:	d106      	bne.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3f0:	d102      	bne.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3f2:	4b55      	ldr	r3, [pc, #340]	; (800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3f6:	e010      	b.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3f8:	4b51      	ldr	r3, [pc, #324]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e404:	d106      	bne.n	800e414 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e40c:	d102      	bne.n	800e414 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e40e:	4b4f      	ldr	r3, [pc, #316]	; (800e54c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e412:	e002      	b.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e418:	e235      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e41a:	e234      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e41c:	4b4c      	ldr	r3, [pc, #304]	; (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e420:	e231      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e426:	e22e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e42c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e430:	430b      	orrs	r3, r1
 800e432:	f040 808f 	bne.w	800e554 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e436:	4b42      	ldr	r3, [pc, #264]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e43a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e43e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e446:	d06b      	beq.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e44e:	d874      	bhi.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e456:	d056      	beq.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e45e:	d86c      	bhi.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e466:	d03b      	beq.n	800e4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e46e:	d864      	bhi.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e476:	d021      	beq.n	800e4bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e47e:	d85c      	bhi.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	2b00      	cmp	r3, #0
 800e484:	d004      	beq.n	800e490 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48c:	d004      	beq.n	800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e48e:	e054      	b.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e490:	f7fe fa4c 	bl	800c92c <HAL_RCC_GetPCLK1Freq>
 800e494:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e496:	e1f6      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e498:	4b29      	ldr	r3, [pc, #164]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4a4:	d107      	bne.n	800e4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4a6:	f107 0318 	add.w	r3, r7, #24
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 fa0a 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4b4:	e1e7      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ba:	e1e4      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4bc:	4b20      	ldr	r3, [pc, #128]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4c8:	d107      	bne.n	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4ca:	f107 030c 	add.w	r3, r7, #12
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fb4c 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4d8:	e1d5      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4de:	e1d2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e4e0:	4b17      	ldr	r3, [pc, #92]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f003 0304 	and.w	r3, r3, #4
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d109      	bne.n	800e500 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4ec:	4b14      	ldr	r3, [pc, #80]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	08db      	lsrs	r3, r3, #3
 800e4f2:	f003 0303 	and.w	r3, r3, #3
 800e4f6:	4a13      	ldr	r2, [pc, #76]	; (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4fe:	e1c2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e500:	2300      	movs	r3, #0
 800e502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e504:	e1bf      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e506:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e512:	d102      	bne.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e514:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e518:	e1b5      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e51e:	e1b2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e520:	4b07      	ldr	r3, [pc, #28]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e52c:	d102      	bne.n	800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e52e:	4b07      	ldr	r3, [pc, #28]	; (800e54c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e532:	e1a8      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e538:	e1a5      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e53e:	e1a2      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e540:	58024400 	.word	0x58024400
 800e544:	03d09000 	.word	0x03d09000
 800e548:	003d0900 	.word	0x003d0900
 800e54c:	017d7840 	.word	0x017d7840
 800e550:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e558:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e55c:	430b      	orrs	r3, r1
 800e55e:	d173      	bne.n	800e648 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e560:	4b9c      	ldr	r3, [pc, #624]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e568:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e570:	d02f      	beq.n	800e5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e578:	d863      	bhi.n	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d004      	beq.n	800e58a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e586:	d012      	beq.n	800e5ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e588:	e05b      	b.n	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e58a:	4b92      	ldr	r3, [pc, #584]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e596:	d107      	bne.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e598:	f107 0318 	add.w	r3, r7, #24
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f991 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5a6:	e16e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ac:	e16b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e5ae:	4b89      	ldr	r3, [pc, #548]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ba:	d107      	bne.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5bc:	f107 030c 	add.w	r3, r7, #12
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 fad3 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5ca:	e15c      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5d0:	e159      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e5d2:	4b80      	ldr	r3, [pc, #512]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e5dc:	4b7d      	ldr	r3, [pc, #500]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 0304 	and.w	r3, r3, #4
 800e5e4:	2b04      	cmp	r3, #4
 800e5e6:	d10c      	bne.n	800e602 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d109      	bne.n	800e602 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5ee:	4b79      	ldr	r3, [pc, #484]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	08db      	lsrs	r3, r3, #3
 800e5f4:	f003 0303 	and.w	r3, r3, #3
 800e5f8:	4a77      	ldr	r2, [pc, #476]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e600:	e01e      	b.n	800e640 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e602:	4b74      	ldr	r3, [pc, #464]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e60e:	d106      	bne.n	800e61e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e616:	d102      	bne.n	800e61e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e618:	4b70      	ldr	r3, [pc, #448]	; (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e61c:	e010      	b.n	800e640 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e61e:	4b6d      	ldr	r3, [pc, #436]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e62a:	d106      	bne.n	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e632:	d102      	bne.n	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e634:	4b6a      	ldr	r3, [pc, #424]	; (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e638:	e002      	b.n	800e640 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e63e:	e122      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e640:	e121      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e646:	e11e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e64c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e650:	430b      	orrs	r3, r1
 800e652:	d133      	bne.n	800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e654:	4b5f      	ldr	r3, [pc, #380]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e65c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	2b00      	cmp	r3, #0
 800e662:	d004      	beq.n	800e66e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66a:	d012      	beq.n	800e692 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e66c:	e023      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e66e:	4b59      	ldr	r3, [pc, #356]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e67a:	d107      	bne.n	800e68c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e680:	4618      	mov	r0, r3
 800e682:	f000 fbc7 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e68a:	e0fc      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e68c:	2300      	movs	r3, #0
 800e68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e690:	e0f9      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e692:	4b50      	ldr	r3, [pc, #320]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e69a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e69e:	d107      	bne.n	800e6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6a0:	f107 0318 	add.w	r3, r7, #24
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 f90d 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e6aa:	6a3b      	ldr	r3, [r7, #32]
 800e6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6ae:	e0ea      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6b4:	e0e7      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6ba:	e0e4      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e6bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e6c4:	430b      	orrs	r3, r1
 800e6c6:	f040 808d 	bne.w	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e6ca:	4b42      	ldr	r3, [pc, #264]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e6d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6da:	d06b      	beq.n	800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6e2:	d874      	bhi.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ea:	d056      	beq.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6f2:	d86c      	bhi.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6fa:	d03b      	beq.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e702:	d864      	bhi.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e70a:	d021      	beq.n	800e750 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e712:	d85c      	bhi.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e716:	2b00      	cmp	r3, #0
 800e718:	d004      	beq.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e720:	d004      	beq.n	800e72c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e722:	e054      	b.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e724:	f000 f8b8 	bl	800e898 <HAL_RCCEx_GetD3PCLK1Freq>
 800e728:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e72a:	e0ac      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e72c:	4b29      	ldr	r3, [pc, #164]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e738:	d107      	bne.n	800e74a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e73a:	f107 0318 	add.w	r3, r7, #24
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f8c0 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e748:	e09d      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e74e:	e09a      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e750:	4b20      	ldr	r3, [pc, #128]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e75c:	d107      	bne.n	800e76e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e75e:	f107 030c 	add.w	r3, r7, #12
 800e762:	4618      	mov	r0, r3
 800e764:	f000 fa02 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e76c:	e08b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e772:	e088      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e774:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f003 0304 	and.w	r3, r3, #4
 800e77c:	2b04      	cmp	r3, #4
 800e77e:	d109      	bne.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e780:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	08db      	lsrs	r3, r3, #3
 800e786:	f003 0303 	and.w	r3, r3, #3
 800e78a:	4a13      	ldr	r2, [pc, #76]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e78c:	fa22 f303 	lsr.w	r3, r2, r3
 800e790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e792:	e078      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e798:	e075      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e79a:	4b0e      	ldr	r3, [pc, #56]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7a6:	d102      	bne.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e7a8:	4b0c      	ldr	r3, [pc, #48]	; (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ac:	e06b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b2:	e068      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7c0:	d102      	bne.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e7c2:	4b07      	ldr	r3, [pc, #28]	; (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7c6:	e05e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7cc:	e05b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7d2:	e058      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7d4:	58024400 	.word	0x58024400
 800e7d8:	03d09000 	.word	0x03d09000
 800e7dc:	003d0900 	.word	0x003d0900
 800e7e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e7ec:	430b      	orrs	r3, r1
 800e7ee:	d148      	bne.n	800e882 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e7f0:	4b27      	ldr	r3, [pc, #156]	; (800e890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e800:	d02a      	beq.n	800e858 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e808:	d838      	bhi.n	800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d004      	beq.n	800e81a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e816:	d00d      	beq.n	800e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e818:	e030      	b.n	800e87c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e81a:	4b1d      	ldr	r3, [pc, #116]	; (800e890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e826:	d102      	bne.n	800e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e828:	4b1a      	ldr	r3, [pc, #104]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e82c:	e02b      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e832:	e028      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e834:	4b16      	ldr	r3, [pc, #88]	; (800e890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e83c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e840:	d107      	bne.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e846:	4618      	mov	r0, r3
 800e848:	f000 fae4 	bl	800ee14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e850:	e019      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e856:	e016      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e858:	4b0d      	ldr	r3, [pc, #52]	; (800e890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e864:	d107      	bne.n	800e876 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e866:	f107 0318 	add.w	r3, r7, #24
 800e86a:	4618      	mov	r0, r3
 800e86c:	f000 f82a 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e874:	e007      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e87a:	e004      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e880:	e001      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3740      	adds	r7, #64	; 0x40
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	58024400 	.word	0x58024400
 800e894:	017d7840 	.word	0x017d7840

0800e898 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e89c:	f7fe f816 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	4b06      	ldr	r3, [pc, #24]	; (800e8bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	091b      	lsrs	r3, r3, #4
 800e8a8:	f003 0307 	and.w	r3, r3, #7
 800e8ac:	4904      	ldr	r1, [pc, #16]	; (800e8c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e8ae:	5ccb      	ldrb	r3, [r1, r3]
 800e8b0:	f003 031f 	and.w	r3, r3, #31
 800e8b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	58024400 	.word	0x58024400
 800e8c0:	08018be4 	.word	0x08018be4

0800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b089      	sub	sp, #36	; 0x24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8cc:	4ba1      	ldr	r3, [pc, #644]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d0:	f003 0303 	and.w	r3, r3, #3
 800e8d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e8d6:	4b9f      	ldr	r3, [pc, #636]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8da:	0b1b      	lsrs	r3, r3, #12
 800e8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e8e2:	4b9c      	ldr	r3, [pc, #624]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e6:	091b      	lsrs	r3, r3, #4
 800e8e8:	f003 0301 	and.w	r3, r3, #1
 800e8ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e8ee:	4b99      	ldr	r3, [pc, #612]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f2:	08db      	lsrs	r3, r3, #3
 800e8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	fb02 f303 	mul.w	r3, r2, r3
 800e8fe:	ee07 3a90 	vmov	s15, r3
 800e902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 8111 	beq.w	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	2b02      	cmp	r3, #2
 800e916:	f000 8083 	beq.w	800ea20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	f200 80a1 	bhi.w	800ea64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d056      	beq.n	800e9dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e92e:	e099      	b.n	800ea64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e930:	4b88      	ldr	r3, [pc, #544]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f003 0320 	and.w	r3, r3, #32
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d02d      	beq.n	800e998 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e93c:	4b85      	ldr	r3, [pc, #532]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	08db      	lsrs	r3, r3, #3
 800e942:	f003 0303 	and.w	r3, r3, #3
 800e946:	4a84      	ldr	r2, [pc, #528]	; (800eb58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e948:	fa22 f303 	lsr.w	r3, r2, r3
 800e94c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	ee07 3a90 	vmov	s15, r3
 800e954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	ee07 3a90 	vmov	s15, r3
 800e95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e966:	4b7b      	ldr	r3, [pc, #492]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e96e:	ee07 3a90 	vmov	s15, r3
 800e972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e976:	ed97 6a03 	vldr	s12, [r7, #12]
 800e97a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800eb5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e992:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e996:	e087      	b.n	800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	ee07 3a90 	vmov	s15, r3
 800e99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eb60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9aa:	4b6a      	ldr	r3, [pc, #424]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9b2:	ee07 3a90 	vmov	s15, r3
 800e9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800eb5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9da:	e065      	b.n	800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	ee07 3a90 	vmov	s15, r3
 800e9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800eb64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9ee:	4b59      	ldr	r3, [pc, #356]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f6:	ee07 3a90 	vmov	s15, r3
 800e9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800eb5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea1e:	e043      	b.n	800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	ee07 3a90 	vmov	s15, r3
 800ea26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800eb68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ea2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea32:	4b48      	ldr	r3, [pc, #288]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea3a:	ee07 3a90 	vmov	s15, r3
 800ea3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800eb5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea62:	e021      	b.n	800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	ee07 3a90 	vmov	s15, r3
 800ea6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eb64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ea72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea76:	4b37      	ldr	r3, [pc, #220]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea7e:	ee07 3a90 	vmov	s15, r3
 800ea82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800eb5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eaa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800eaa8:	4b2a      	ldr	r3, [pc, #168]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	0a5b      	lsrs	r3, r3, #9
 800eaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eab2:	ee07 3a90 	vmov	s15, r3
 800eab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eabe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800eac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eace:	ee17 2a90 	vmov	r2, s15
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ead6:	4b1f      	ldr	r3, [pc, #124]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ead8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eada:	0c1b      	lsrs	r3, r3, #16
 800eadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae0:	ee07 3a90 	vmov	s15, r3
 800eae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eaf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eafc:	ee17 2a90 	vmov	r2, s15
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800eb04:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb08:	0e1b      	lsrs	r3, r3, #24
 800eb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb0e:	ee07 3a90 	vmov	s15, r3
 800eb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb2a:	ee17 2a90 	vmov	r2, s15
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800eb32:	e008      	b.n	800eb46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	609a      	str	r2, [r3, #8]
}
 800eb46:	bf00      	nop
 800eb48:	3724      	adds	r7, #36	; 0x24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	58024400 	.word	0x58024400
 800eb58:	03d09000 	.word	0x03d09000
 800eb5c:	46000000 	.word	0x46000000
 800eb60:	4c742400 	.word	0x4c742400
 800eb64:	4a742400 	.word	0x4a742400
 800eb68:	4bbebc20 	.word	0x4bbebc20

0800eb6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b089      	sub	sp, #36	; 0x24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb74:	4ba1      	ldr	r3, [pc, #644]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb78:	f003 0303 	and.w	r3, r3, #3
 800eb7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800eb7e:	4b9f      	ldr	r3, [pc, #636]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb82:	0d1b      	lsrs	r3, r3, #20
 800eb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800eb8a:	4b9c      	ldr	r3, [pc, #624]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8e:	0a1b      	lsrs	r3, r3, #8
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800eb96:	4b99      	ldr	r3, [pc, #612]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb9a:	08db      	lsrs	r3, r3, #3
 800eb9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eba0:	693a      	ldr	r2, [r7, #16]
 800eba2:	fb02 f303 	mul.w	r3, r2, r3
 800eba6:	ee07 3a90 	vmov	s15, r3
 800ebaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 8111 	beq.w	800eddc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	f000 8083 	beq.w	800ecc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	f200 80a1 	bhi.w	800ed0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d003      	beq.n	800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d056      	beq.n	800ec84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ebd6:	e099      	b.n	800ed0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebd8:	4b88      	ldr	r3, [pc, #544]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 0320 	and.w	r3, r3, #32
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d02d      	beq.n	800ec40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebe4:	4b85      	ldr	r3, [pc, #532]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	08db      	lsrs	r3, r3, #3
 800ebea:	f003 0303 	and.w	r3, r3, #3
 800ebee:	4a84      	ldr	r2, [pc, #528]	; (800ee00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ebf0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	ee07 3a90 	vmov	s15, r3
 800ebfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	ee07 3a90 	vmov	s15, r3
 800ec06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec0e:	4b7b      	ldr	r3, [pc, #492]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ee04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec3e:	e087      	b.n	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	ee07 3a90 	vmov	s15, r3
 800ec46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ee08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ec4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec52:	4b6a      	ldr	r3, [pc, #424]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec5a:	ee07 3a90 	vmov	s15, r3
 800ec5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ee04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec82:	e065      	b.n	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	ee07 3a90 	vmov	s15, r3
 800ec8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ee0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ec92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec96:	4b59      	ldr	r3, [pc, #356]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec9e:	ee07 3a90 	vmov	s15, r3
 800eca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ee04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecc6:	e043      	b.n	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	ee07 3a90 	vmov	s15, r3
 800ecce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ee10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ecd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecda:	4b48      	ldr	r3, [pc, #288]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ecdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece2:	ee07 3a90 	vmov	s15, r3
 800ece6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecea:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ee04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed0a:	e021      	b.n	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	ee07 3a90 	vmov	s15, r3
 800ed12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ee0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ed1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed1e:	4b37      	ldr	r3, [pc, #220]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed26:	ee07 3a90 	vmov	s15, r3
 800ed2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ee04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ed50:	4b2a      	ldr	r3, [pc, #168]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed54:	0a5b      	lsrs	r3, r3, #9
 800ed56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed5a:	ee07 3a90 	vmov	s15, r3
 800ed5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed76:	ee17 2a90 	vmov	r2, s15
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ed7e:	4b1f      	ldr	r3, [pc, #124]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed82:	0c1b      	lsrs	r3, r3, #16
 800ed84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed88:	ee07 3a90 	vmov	s15, r3
 800ed8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eda4:	ee17 2a90 	vmov	r2, s15
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800edac:	4b13      	ldr	r3, [pc, #76]	; (800edfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb0:	0e1b      	lsrs	r3, r3, #24
 800edb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb6:	ee07 3a90 	vmov	s15, r3
 800edba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edd2:	ee17 2a90 	vmov	r2, s15
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800edda:	e008      	b.n	800edee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	609a      	str	r2, [r3, #8]
}
 800edee:	bf00      	nop
 800edf0:	3724      	adds	r7, #36	; 0x24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	58024400 	.word	0x58024400
 800ee00:	03d09000 	.word	0x03d09000
 800ee04:	46000000 	.word	0x46000000
 800ee08:	4c742400 	.word	0x4c742400
 800ee0c:	4a742400 	.word	0x4a742400
 800ee10:	4bbebc20 	.word	0x4bbebc20

0800ee14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b089      	sub	sp, #36	; 0x24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee1c:	4ba0      	ldr	r3, [pc, #640]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ee26:	4b9e      	ldr	r3, [pc, #632]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	091b      	lsrs	r3, r3, #4
 800ee2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ee32:	4b9b      	ldr	r3, [pc, #620]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee3c:	4b98      	ldr	r3, [pc, #608]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee40:	08db      	lsrs	r3, r3, #3
 800ee42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	fb02 f303 	mul.w	r3, r2, r3
 800ee4c:	ee07 3a90 	vmov	s15, r3
 800ee50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f000 8111 	beq.w	800f082 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	f000 8083 	beq.w	800ef6e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	f200 80a1 	bhi.w	800efb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d003      	beq.n	800ee7e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d056      	beq.n	800ef2a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ee7c:	e099      	b.n	800efb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee7e:	4b88      	ldr	r3, [pc, #544]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 0320 	and.w	r3, r3, #32
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d02d      	beq.n	800eee6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee8a:	4b85      	ldr	r3, [pc, #532]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	08db      	lsrs	r3, r3, #3
 800ee90:	f003 0303 	and.w	r3, r3, #3
 800ee94:	4a83      	ldr	r2, [pc, #524]	; (800f0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ee96:	fa22 f303 	lsr.w	r3, r2, r3
 800ee9a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	ee07 3a90 	vmov	s15, r3
 800eea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	ee07 3a90 	vmov	s15, r3
 800eeac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeb4:	4b7a      	ldr	r3, [pc, #488]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eebc:	ee07 3a90 	vmov	s15, r3
 800eec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eec4:	ed97 6a03 	vldr	s12, [r7, #12]
 800eec8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eee0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eee4:	e087      	b.n	800eff6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	ee07 3a90 	vmov	s15, r3
 800eeec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eef0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f0ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eef8:	4b69      	ldr	r3, [pc, #420]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef00:	ee07 3a90 	vmov	s15, r3
 800ef04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef28:	e065      	b.n	800eff6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	ee07 3a90 	vmov	s15, r3
 800ef30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ef38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef3c:	4b58      	ldr	r3, [pc, #352]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef44:	ee07 3a90 	vmov	s15, r3
 800ef48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef50:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef6c:	e043      	b.n	800eff6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	ee07 3a90 	vmov	s15, r3
 800ef74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ef7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef80:	4b47      	ldr	r3, [pc, #284]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef88:	ee07 3a90 	vmov	s15, r3
 800ef8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef94:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efb0:	e021      	b.n	800eff6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	ee07 3a90 	vmov	s15, r3
 800efb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efbc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f0ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800efc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efc4:	4b36      	ldr	r3, [pc, #216]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800efc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efcc:	ee07 3a90 	vmov	s15, r3
 800efd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800efd8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800efdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eff4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800eff6:	4b2a      	ldr	r3, [pc, #168]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800effa:	0a5b      	lsrs	r3, r3, #9
 800effc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f000:	ee07 3a90 	vmov	s15, r3
 800f004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f00c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f010:	edd7 6a07 	vldr	s13, [r7, #28]
 800f014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f01c:	ee17 2a90 	vmov	r2, s15
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f024:	4b1e      	ldr	r3, [pc, #120]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f028:	0c1b      	lsrs	r3, r3, #16
 800f02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02e:	ee07 3a90 	vmov	s15, r3
 800f032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f03a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f03e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f04a:	ee17 2a90 	vmov	r2, s15
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f052:	4b13      	ldr	r3, [pc, #76]	; (800f0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f056:	0e1b      	lsrs	r3, r3, #24
 800f058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f05c:	ee07 3a90 	vmov	s15, r3
 800f060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f06c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f078:	ee17 2a90 	vmov	r2, s15
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f080:	e008      	b.n	800f094 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	609a      	str	r2, [r3, #8]
}
 800f094:	bf00      	nop
 800f096:	3724      	adds	r7, #36	; 0x24
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr
 800f0a0:	58024400 	.word	0x58024400
 800f0a4:	03d09000 	.word	0x03d09000
 800f0a8:	46000000 	.word	0x46000000
 800f0ac:	4c742400 	.word	0x4c742400
 800f0b0:	4a742400 	.word	0x4a742400
 800f0b4:	4bbebc20 	.word	0x4bbebc20

0800f0b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f0c6:	4b53      	ldr	r3, [pc, #332]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ca:	f003 0303 	and.w	r3, r3, #3
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d101      	bne.n	800f0d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e099      	b.n	800f20a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f0d6:	4b4f      	ldr	r3, [pc, #316]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a4e      	ldr	r2, [pc, #312]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f0dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0e2:	f7f6 f8c7 	bl	8005274 <HAL_GetTick>
 800f0e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f0e8:	e008      	b.n	800f0fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f0ea:	f7f6 f8c3 	bl	8005274 <HAL_GetTick>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d901      	bls.n	800f0fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	e086      	b.n	800f20a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f0fc:	4b45      	ldr	r3, [pc, #276]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1f0      	bne.n	800f0ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f108:	4b42      	ldr	r3, [pc, #264]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	031b      	lsls	r3, r3, #12
 800f116:	493f      	ldr	r1, [pc, #252]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f118:	4313      	orrs	r3, r2
 800f11a:	628b      	str	r3, [r1, #40]	; 0x28
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	3b01      	subs	r3, #1
 800f122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	025b      	lsls	r3, r3, #9
 800f12e:	b29b      	uxth	r3, r3
 800f130:	431a      	orrs	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	3b01      	subs	r3, #1
 800f138:	041b      	lsls	r3, r3, #16
 800f13a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f13e:	431a      	orrs	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	3b01      	subs	r3, #1
 800f146:	061b      	lsls	r3, r3, #24
 800f148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f14c:	4931      	ldr	r1, [pc, #196]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f14e:	4313      	orrs	r3, r2
 800f150:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f152:	4b30      	ldr	r3, [pc, #192]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	695b      	ldr	r3, [r3, #20]
 800f15e:	492d      	ldr	r1, [pc, #180]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f160:	4313      	orrs	r3, r2
 800f162:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f164:	4b2b      	ldr	r3, [pc, #172]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f168:	f023 0220 	bic.w	r2, r3, #32
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	4928      	ldr	r1, [pc, #160]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f172:	4313      	orrs	r3, r2
 800f174:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f176:	4b27      	ldr	r3, [pc, #156]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f17a:	4a26      	ldr	r2, [pc, #152]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f17c:	f023 0310 	bic.w	r3, r3, #16
 800f180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f182:	4b24      	ldr	r3, [pc, #144]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f186:	4b24      	ldr	r3, [pc, #144]	; (800f218 <RCCEx_PLL2_Config+0x160>)
 800f188:	4013      	ands	r3, r2
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	69d2      	ldr	r2, [r2, #28]
 800f18e:	00d2      	lsls	r2, r2, #3
 800f190:	4920      	ldr	r1, [pc, #128]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f192:	4313      	orrs	r3, r2
 800f194:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f196:	4b1f      	ldr	r3, [pc, #124]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19a:	4a1e      	ldr	r2, [pc, #120]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f19c:	f043 0310 	orr.w	r3, r3, #16
 800f1a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d106      	bne.n	800f1b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f1a8:	4b1a      	ldr	r3, [pc, #104]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ac:	4a19      	ldr	r2, [pc, #100]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f1b4:	e00f      	b.n	800f1d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d106      	bne.n	800f1ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f1bc:	4b15      	ldr	r3, [pc, #84]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c0:	4a14      	ldr	r2, [pc, #80]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f1c8:	e005      	b.n	800f1d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f1ca:	4b12      	ldr	r3, [pc, #72]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ce:	4a11      	ldr	r2, [pc, #68]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4a0e      	ldr	r2, [pc, #56]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1e2:	f7f6 f847 	bl	8005274 <HAL_GetTick>
 800f1e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f1e8:	e008      	b.n	800f1fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f1ea:	f7f6 f843 	bl	8005274 <HAL_GetTick>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	2b02      	cmp	r3, #2
 800f1f6:	d901      	bls.n	800f1fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e006      	b.n	800f20a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f1fc:	4b05      	ldr	r3, [pc, #20]	; (800f214 <RCCEx_PLL2_Config+0x15c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0f0      	beq.n	800f1ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	58024400 	.word	0x58024400
 800f218:	ffff0007 	.word	0xffff0007

0800f21c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f22a:	4b53      	ldr	r3, [pc, #332]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22e:	f003 0303 	and.w	r3, r3, #3
 800f232:	2b03      	cmp	r3, #3
 800f234:	d101      	bne.n	800f23a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	e099      	b.n	800f36e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f23a:	4b4f      	ldr	r3, [pc, #316]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a4e      	ldr	r2, [pc, #312]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f246:	f7f6 f815 	bl	8005274 <HAL_GetTick>
 800f24a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f24c:	e008      	b.n	800f260 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f24e:	f7f6 f811 	bl	8005274 <HAL_GetTick>
 800f252:	4602      	mov	r2, r0
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	2b02      	cmp	r3, #2
 800f25a:	d901      	bls.n	800f260 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f25c:	2303      	movs	r3, #3
 800f25e:	e086      	b.n	800f36e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f260:	4b45      	ldr	r3, [pc, #276]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1f0      	bne.n	800f24e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f26c:	4b42      	ldr	r3, [pc, #264]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f270:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	051b      	lsls	r3, r3, #20
 800f27a:	493f      	ldr	r1, [pc, #252]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f27c:	4313      	orrs	r3, r2
 800f27e:	628b      	str	r3, [r1, #40]	; 0x28
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	3b01      	subs	r3, #1
 800f286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	3b01      	subs	r3, #1
 800f290:	025b      	lsls	r3, r3, #9
 800f292:	b29b      	uxth	r3, r3
 800f294:	431a      	orrs	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	041b      	lsls	r3, r3, #16
 800f29e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	061b      	lsls	r3, r3, #24
 800f2ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f2b0:	4931      	ldr	r1, [pc, #196]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f2b6:	4b30      	ldr	r3, [pc, #192]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	492d      	ldr	r1, [pc, #180]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f2c8:	4b2b      	ldr	r3, [pc, #172]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	4928      	ldr	r1, [pc, #160]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f2da:	4b27      	ldr	r3, [pc, #156]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2de:	4a26      	ldr	r2, [pc, #152]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f2e6:	4b24      	ldr	r3, [pc, #144]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ea:	4b24      	ldr	r3, [pc, #144]	; (800f37c <RCCEx_PLL3_Config+0x160>)
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	69d2      	ldr	r2, [r2, #28]
 800f2f2:	00d2      	lsls	r2, r2, #3
 800f2f4:	4920      	ldr	r1, [pc, #128]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f2fa:	4b1f      	ldr	r3, [pc, #124]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fe:	4a1e      	ldr	r2, [pc, #120]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d106      	bne.n	800f31a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f30c:	4b1a      	ldr	r3, [pc, #104]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f310:	4a19      	ldr	r2, [pc, #100]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f316:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f318:	e00f      	b.n	800f33a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d106      	bne.n	800f32e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f320:	4b15      	ldr	r3, [pc, #84]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f324:	4a14      	ldr	r2, [pc, #80]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f32a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f32c:	e005      	b.n	800f33a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f32e:	4b12      	ldr	r3, [pc, #72]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f332:	4a11      	ldr	r2, [pc, #68]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f338:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f33a:	4b0f      	ldr	r3, [pc, #60]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a0e      	ldr	r2, [pc, #56]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f346:	f7f5 ff95 	bl	8005274 <HAL_GetTick>
 800f34a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f34c:	e008      	b.n	800f360 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f34e:	f7f5 ff91 	bl	8005274 <HAL_GetTick>
 800f352:	4602      	mov	r2, r0
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d901      	bls.n	800f360 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e006      	b.n	800f36e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f360:	4b05      	ldr	r3, [pc, #20]	; (800f378 <RCCEx_PLL3_Config+0x15c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d0f0      	beq.n	800f34e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	58024400 	.word	0x58024400
 800f37c:	ffff0007 	.word	0xffff0007

0800f380 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d101      	bne.n	800f392 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e054      	b.n	800f43c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7a5b      	ldrb	r3, [r3, #9]
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d105      	bne.n	800f3a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7f3 ff6a 	bl	800327c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2202      	movs	r2, #2
 800f3ac:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f023 0120 	bic.w	r1, r3, #32
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	430a      	orrs	r2, r1
 800f3c2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f042 0204 	orr.w	r2, r2, #4
 800f3d2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3de:	2b40      	cmp	r3, #64	; 0x40
 800f3e0:	d104      	bne.n	800f3ec <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e027      	b.n	800f43c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f3ec:	f7f5 ff42 	bl	8005274 <HAL_GetTick>
 800f3f0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f3f2:	e015      	b.n	800f420 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f3f4:	f7f5 ff3e 	bl	8005274 <HAL_GetTick>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d90e      	bls.n	800f420 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b04      	cmp	r3, #4
 800f40e:	d107      	bne.n	800f420 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2204      	movs	r2, #4
 800f414:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2202      	movs	r2, #2
 800f41a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e00d      	b.n	800f43c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	f003 0304 	and.w	r3, r3, #4
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d0e2      	beq.n	800f3f4 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	7a1b      	ldrb	r3, [r3, #8]
 800f456:	2b01      	cmp	r3, #1
 800f458:	d101      	bne.n	800f45e <HAL_RNG_GenerateRandomNumber+0x1a>
 800f45a:	2302      	movs	r3, #2
 800f45c:	e044      	b.n	800f4e8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2201      	movs	r2, #1
 800f462:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7a5b      	ldrb	r3, [r3, #9]
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d133      	bne.n	800f4d6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2202      	movs	r2, #2
 800f472:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f474:	f7f5 fefe 	bl	8005274 <HAL_GetTick>
 800f478:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f47a:	e018      	b.n	800f4ae <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f47c:	f7f5 fefa 	bl	8005274 <HAL_GetTick>
 800f480:	4602      	mov	r2, r0
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	2b02      	cmp	r3, #2
 800f488:	d911      	bls.n	800f4ae <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b01      	cmp	r3, #1
 800f496:	d00a      	beq.n	800f4ae <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2202      	movs	r2, #2
 800f4a2:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e01c      	b.n	800f4e8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	f003 0301 	and.w	r3, r3, #1
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d1df      	bne.n	800f47c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	691a      	ldr	r2, [r3, #16]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	725a      	strb	r2, [r3, #9]
 800f4d4:	e004      	b.n	800f4e0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	721a      	strb	r2, [r3, #8]

  return status;
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
 800f4fc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	2b02      	cmp	r3, #2
 800f502:	d904      	bls.n	800f50e <HAL_SAI_InitProtocol+0x1e>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	3b03      	subs	r3, #3
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d812      	bhi.n	800f532 <HAL_SAI_InitProtocol+0x42>
 800f50c:	e008      	b.n	800f520 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	68b9      	ldr	r1, [r7, #8]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 fc11 	bl	800fd3c <SAI_InitI2S>
 800f51a:	4603      	mov	r3, r0
 800f51c:	75fb      	strb	r3, [r7, #23]
      break;
 800f51e:	e00b      	b.n	800f538 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	68b9      	ldr	r1, [r7, #8]
 800f526:	68f8      	ldr	r0, [r7, #12]
 800f528:	f000 fcba 	bl	800fea0 <SAI_InitPCM>
 800f52c:	4603      	mov	r3, r0
 800f52e:	75fb      	strb	r3, [r7, #23]
      break;
 800f530:	e002      	b.n	800f538 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f532:	2301      	movs	r3, #1
 800f534:	75fb      	strb	r3, [r7, #23]
      break;
 800f536:	bf00      	nop
  }

  if (status == HAL_OK)
 800f538:	7dfb      	ldrb	r3, [r7, #23]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d104      	bne.n	800f548 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f000 f808 	bl	800f554 <HAL_SAI_Init>
 800f544:	4603      	mov	r3, r0
 800f546:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f548:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08a      	sub	sp, #40	; 0x28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e28e      	b.n	800fa84 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f566:	f7f5 feb5 	bl	80052d4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f570:	2b01      	cmp	r3, #1
 800f572:	d113      	bne.n	800f59c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a96      	ldr	r2, [pc, #600]	; (800f7d4 <HAL_SAI_Init+0x280>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d004      	beq.n	800f588 <HAL_SAI_Init+0x34>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a95      	ldr	r2, [pc, #596]	; (800f7d8 <HAL_SAI_Init+0x284>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d107      	bne.n	800f598 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d103      	bne.n	800f598 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	e273      	b.n	800fa84 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a8c      	ldr	r2, [pc, #560]	; (800f7d4 <HAL_SAI_Init+0x280>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d004      	beq.n	800f5b0 <HAL_SAI_Init+0x5c>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a8c      	ldr	r2, [pc, #560]	; (800f7dc <HAL_SAI_Init+0x288>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d102      	bne.n	800f5b6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f5b0:	4b8b      	ldr	r3, [pc, #556]	; (800f7e0 <HAL_SAI_Init+0x28c>)
 800f5b2:	61bb      	str	r3, [r7, #24]
 800f5b4:	e028      	b.n	800f608 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a8a      	ldr	r2, [pc, #552]	; (800f7e4 <HAL_SAI_Init+0x290>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d004      	beq.n	800f5ca <HAL_SAI_Init+0x76>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a88      	ldr	r2, [pc, #544]	; (800f7e8 <HAL_SAI_Init+0x294>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d102      	bne.n	800f5d0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f5ca:	4b88      	ldr	r3, [pc, #544]	; (800f7ec <HAL_SAI_Init+0x298>)
 800f5cc:	61bb      	str	r3, [r7, #24]
 800f5ce:	e01b      	b.n	800f608 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a86      	ldr	r2, [pc, #536]	; (800f7f0 <HAL_SAI_Init+0x29c>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d004      	beq.n	800f5e4 <HAL_SAI_Init+0x90>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a85      	ldr	r2, [pc, #532]	; (800f7f4 <HAL_SAI_Init+0x2a0>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d102      	bne.n	800f5ea <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f5e4:	4b84      	ldr	r3, [pc, #528]	; (800f7f8 <HAL_SAI_Init+0x2a4>)
 800f5e6:	61bb      	str	r3, [r7, #24]
 800f5e8:	e00e      	b.n	800f608 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4a7a      	ldr	r2, [pc, #488]	; (800f7d8 <HAL_SAI_Init+0x284>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d004      	beq.n	800f5fe <HAL_SAI_Init+0xaa>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a80      	ldr	r2, [pc, #512]	; (800f7fc <HAL_SAI_Init+0x2a8>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d102      	bne.n	800f604 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f5fe:	4b80      	ldr	r3, [pc, #512]	; (800f800 <HAL_SAI_Init+0x2ac>)
 800f600:	61bb      	str	r3, [r7, #24]
 800f602:	e001      	b.n	800f608 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f604:	2301      	movs	r3, #1
 800f606:	e23d      	b.n	800fa84 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7f3 fec7 	bl	80033b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 fcf6 	bl	8010014 <SAI_Disable>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d001      	beq.n	800f632 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f62e:	2301      	movs	r3, #1
 800f630:	e228      	b.n	800fa84 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2202      	movs	r2, #2
 800f636:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	2b02      	cmp	r3, #2
 800f640:	d00c      	beq.n	800f65c <HAL_SAI_Init+0x108>
 800f642:	2b02      	cmp	r3, #2
 800f644:	d80d      	bhi.n	800f662 <HAL_SAI_Init+0x10e>
 800f646:	2b00      	cmp	r3, #0
 800f648:	d002      	beq.n	800f650 <HAL_SAI_Init+0xfc>
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d003      	beq.n	800f656 <HAL_SAI_Init+0x102>
 800f64e:	e008      	b.n	800f662 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f654:	e008      	b.n	800f668 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f656:	2310      	movs	r3, #16
 800f658:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f65a:	e005      	b.n	800f668 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f65c:	2320      	movs	r3, #32
 800f65e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f660:	e002      	b.n	800f668 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f666:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	2b05      	cmp	r3, #5
 800f66e:	d832      	bhi.n	800f6d6 <HAL_SAI_Init+0x182>
 800f670:	a201      	add	r2, pc, #4	; (adr r2, 800f678 <HAL_SAI_Init+0x124>)
 800f672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f676:	bf00      	nop
 800f678:	0800f691 	.word	0x0800f691
 800f67c:	0800f697 	.word	0x0800f697
 800f680:	0800f69f 	.word	0x0800f69f
 800f684:	0800f6a7 	.word	0x0800f6a7
 800f688:	0800f6b7 	.word	0x0800f6b7
 800f68c:	0800f6c7 	.word	0x0800f6c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	61fb      	str	r3, [r7, #28]
      break;
 800f694:	e022      	b.n	800f6dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f69a:	61fb      	str	r3, [r7, #28]
      break;
 800f69c:	e01e      	b.n	800f6dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f69e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6a2:	61fb      	str	r3, [r7, #28]
      break;
 800f6a4:	e01a      	b.n	800f6dc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6aa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	f043 0301 	orr.w	r3, r3, #1
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6b4:	e012      	b.n	800f6dc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6ba:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	f043 0302 	orr.w	r3, r3, #2
 800f6c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6c4:	e00a      	b.n	800f6dc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	f043 0303 	orr.w	r3, r3, #3
 800f6d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6d4:	e002      	b.n	800f6dc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	61fb      	str	r3, [r7, #28]
      break;
 800f6da:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6e0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 80c5 	beq.w	800f876 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a37      	ldr	r2, [pc, #220]	; (800f7d4 <HAL_SAI_Init+0x280>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d004      	beq.n	800f704 <HAL_SAI_Init+0x1b0>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a37      	ldr	r2, [pc, #220]	; (800f7dc <HAL_SAI_Init+0x288>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d106      	bne.n	800f712 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f704:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f708:	f04f 0100 	mov.w	r1, #0
 800f70c:	f7fe fb44 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 800f710:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a33      	ldr	r2, [pc, #204]	; (800f7e4 <HAL_SAI_Init+0x290>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d004      	beq.n	800f726 <HAL_SAI_Init+0x1d2>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a31      	ldr	r2, [pc, #196]	; (800f7e8 <HAL_SAI_Init+0x294>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d106      	bne.n	800f734 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f72a:	f04f 0100 	mov.w	r1, #0
 800f72e:	f7fe fb33 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 800f732:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a2d      	ldr	r2, [pc, #180]	; (800f7f0 <HAL_SAI_Init+0x29c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d004      	beq.n	800f748 <HAL_SAI_Init+0x1f4>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a2c      	ldr	r2, [pc, #176]	; (800f7f4 <HAL_SAI_Init+0x2a0>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d106      	bne.n	800f756 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f74c:	f04f 0100 	mov.w	r1, #0
 800f750:	f7fe fb22 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 800f754:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a1f      	ldr	r2, [pc, #124]	; (800f7d8 <HAL_SAI_Init+0x284>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d106      	bne.n	800f76e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f760:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f764:	f04f 0100 	mov.w	r1, #0
 800f768:	f7fe fb16 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 800f76c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a22      	ldr	r2, [pc, #136]	; (800f7fc <HAL_SAI_Init+0x2a8>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d106      	bne.n	800f786 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f778:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f77c:	f04f 0100 	mov.w	r1, #0
 800f780:	f7fe fb0a 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 800f784:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	699b      	ldr	r3, [r3, #24]
 800f78a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f78e:	d139      	bne.n	800f804 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f794:	2b04      	cmp	r3, #4
 800f796:	d102      	bne.n	800f79e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f798:	2340      	movs	r3, #64	; 0x40
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	e00a      	b.n	800f7b4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a2:	2b08      	cmp	r3, #8
 800f7a4:	d103      	bne.n	800f7ae <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f7a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7aa:	60fb      	str	r3, [r7, #12]
 800f7ac:	e002      	b.n	800f7b4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7b2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f7b4:	697a      	ldr	r2, [r7, #20]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	4619      	mov	r1, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	fb02 f303 	mul.w	r3, r2, r3
 800f7ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7ce:	613b      	str	r3, [r7, #16]
 800f7d0:	e030      	b.n	800f834 <HAL_SAI_Init+0x2e0>
 800f7d2:	bf00      	nop
 800f7d4:	40015804 	.word	0x40015804
 800f7d8:	58005404 	.word	0x58005404
 800f7dc:	40015824 	.word	0x40015824
 800f7e0:	40015800 	.word	0x40015800
 800f7e4:	40015c04 	.word	0x40015c04
 800f7e8:	40015c24 	.word	0x40015c24
 800f7ec:	40015c00 	.word	0x40015c00
 800f7f0:	40016004 	.word	0x40016004
 800f7f4:	40016024 	.word	0x40016024
 800f7f8:	40016000 	.word	0x40016000
 800f7fc:	58005424 	.word	0x58005424
 800f800:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f80c:	d101      	bne.n	800f812 <HAL_SAI_Init+0x2be>
 800f80e:	2302      	movs	r3, #2
 800f810:	e000      	b.n	800f814 <HAL_SAI_Init+0x2c0>
 800f812:	2301      	movs	r3, #1
 800f814:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	4613      	mov	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	4413      	add	r3, r2
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	4619      	mov	r1, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	fb02 f303 	mul.w	r3, r2, r3
 800f82c:	021b      	lsls	r3, r3, #8
 800f82e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f832:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	4a95      	ldr	r2, [pc, #596]	; (800fa8c <HAL_SAI_Init+0x538>)
 800f838:	fba2 2303 	umull	r2, r3, r2, r3
 800f83c:	08da      	lsrs	r2, r3, #3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f842:	6939      	ldr	r1, [r7, #16]
 800f844:	4b91      	ldr	r3, [pc, #580]	; (800fa8c <HAL_SAI_Init+0x538>)
 800f846:	fba3 2301 	umull	r2, r3, r3, r1
 800f84a:	08da      	lsrs	r2, r3, #3
 800f84c:	4613      	mov	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4413      	add	r3, r2
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	1aca      	subs	r2, r1, r3
 800f856:	2a08      	cmp	r2, #8
 800f858:	d904      	bls.n	800f864 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	1c5a      	adds	r2, r3, #1
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f868:	2b04      	cmp	r3, #4
 800f86a:	d104      	bne.n	800f876 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f870:	085a      	lsrs	r2, r3, #1
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d003      	beq.n	800f886 <HAL_SAI_Init+0x332>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	2b02      	cmp	r3, #2
 800f884:	d109      	bne.n	800f89a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d101      	bne.n	800f892 <HAL_SAI_Init+0x33e>
 800f88e:	2300      	movs	r3, #0
 800f890:	e001      	b.n	800f896 <HAL_SAI_Init+0x342>
 800f892:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f896:	623b      	str	r3, [r7, #32]
 800f898:	e008      	b.n	800f8ac <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d102      	bne.n	800f8a8 <HAL_SAI_Init+0x354>
 800f8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8a6:	e000      	b.n	800f8aa <HAL_SAI_Init+0x356>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f8ac:	f7f5 fd12 	bl	80052d4 <HAL_GetREVID>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8b6:	d331      	bcc.n	800f91c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6819      	ldr	r1, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	4b73      	ldr	r3, [pc, #460]	; (800fa90 <HAL_SAI_Init+0x53c>)
 800f8c4:	400b      	ands	r3, r1
 800f8c6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	6819      	ldr	r1, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8dc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8e2:	431a      	orrs	r2, r3
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f8f0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	695b      	ldr	r3, [r3, #20]
 800f8f6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8fc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f902:	051b      	lsls	r3, r3, #20
 800f904:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f90a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	430a      	orrs	r2, r1
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	e02d      	b.n	800f978 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6819      	ldr	r1, [r3, #0]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	4b5b      	ldr	r3, [pc, #364]	; (800fa94 <HAL_SAI_Init+0x540>)
 800f928:	400b      	ands	r3, r1
 800f92a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	6819      	ldr	r1, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f93a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f940:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f946:	431a      	orrs	r2, r3
 800f948:	6a3b      	ldr	r3, [r7, #32]
 800f94a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f954:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	695b      	ldr	r3, [r3, #20]
 800f95a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f960:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f966:	051b      	lsls	r3, r3, #20
 800f968:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f96e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	430a      	orrs	r2, r1
 800f976:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6859      	ldr	r1, [r3, #4]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	4b45      	ldr	r3, [pc, #276]	; (800fa98 <HAL_SAI_Init+0x544>)
 800f984:	400b      	ands	r3, r1
 800f986:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6859      	ldr	r1, [r3, #4]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	69da      	ldr	r2, [r3, #28]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f996:	431a      	orrs	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f99c:	431a      	orrs	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	430a      	orrs	r2, r1
 800f9a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6899      	ldr	r1, [r3, #8]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	4b3a      	ldr	r3, [pc, #232]	; (800fa9c <HAL_SAI_Init+0x548>)
 800f9b2:	400b      	ands	r3, r1
 800f9b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6899      	ldr	r1, [r3, #8]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9c0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f9cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f9d2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f9dc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	430a      	orrs	r2, r1
 800f9e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68d9      	ldr	r1, [r3, #12]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f9f4:	400b      	ands	r3, r1
 800f9f6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68d9      	ldr	r1, [r3, #12]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa0c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fa0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa14:	3b01      	subs	r3, #1
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	430a      	orrs	r2, r1
 800fa20:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a1e      	ldr	r2, [pc, #120]	; (800faa0 <HAL_SAI_Init+0x54c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d004      	beq.n	800fa36 <HAL_SAI_Init+0x4e2>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a1c      	ldr	r2, [pc, #112]	; (800faa4 <HAL_SAI_Init+0x550>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d119      	bne.n	800fa6a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa3a:	f023 0201 	bic.w	r2, r3, #1
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d10e      	bne.n	800fa6a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa54:	3b01      	subs	r3, #1
 800fa56:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa58:	431a      	orrs	r2, r3
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa62:	f043 0201 	orr.w	r2, r3, #1
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800fa82:	2300      	movs	r3, #0
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3728      	adds	r7, #40	; 0x28
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	cccccccd 	.word	0xcccccccd
 800fa90:	f005c010 	.word	0xf005c010
 800fa94:	f805c010 	.word	0xf805c010
 800fa98:	ffff1ff0 	.word	0xffff1ff0
 800fa9c:	fff88000 	.word	0xfff88000
 800faa0:	40015804 	.word	0x40015804
 800faa4:	58005404 	.word	0x58005404

0800faa8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	4613      	mov	r3, r2
 800fab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fab6:	f7f5 fbdd 	bl	8005274 <HAL_GetTick>
 800faba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d002      	beq.n	800fac8 <HAL_SAI_Transmit_DMA+0x20>
 800fac2:	88fb      	ldrh	r3, [r7, #6]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d101      	bne.n	800facc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fac8:	2301      	movs	r3, #1
 800faca:	e098      	b.n	800fbfe <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	f040 8091 	bne.w	800fbfc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d101      	bne.n	800fae8 <HAL_SAI_Transmit_DMA+0x40>
 800fae4:	2302      	movs	r3, #2
 800fae6:	e08a      	b.n	800fbfe <HAL_SAI_Transmit_DMA+0x156>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	88fa      	ldrh	r2, [r7, #6]
 800fafa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	88fa      	ldrh	r2, [r7, #6]
 800fb02:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2212      	movs	r2, #18
 800fb12:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb1c:	4a3a      	ldr	r2, [pc, #232]	; (800fc08 <HAL_SAI_Transmit_DMA+0x160>)
 800fb1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb26:	4a39      	ldr	r2, [pc, #228]	; (800fc0c <HAL_SAI_Transmit_DMA+0x164>)
 800fb28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb30:	4a37      	ldr	r2, [pc, #220]	; (800fc10 <HAL_SAI_Transmit_DMA+0x168>)
 800fb32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb48:	4619      	mov	r1, r3
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	331c      	adds	r3, #28
 800fb50:	461a      	mov	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fb58:	f7f7 fe3a 	bl	80077d0 <HAL_DMA_Start_IT>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d005      	beq.n	800fb6e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e047      	b.n	800fbfe <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fb6e:	2100      	movs	r1, #0
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 fa17 	bl	800ffa4 <SAI_InterruptFlag>
 800fb76:	4601      	mov	r1, r0
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	691a      	ldr	r2, [r3, #16]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	430a      	orrs	r2, r1
 800fb84:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb94:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fb96:	e015      	b.n	800fbc4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fb98:	f7f5 fb6c 	bl	8005274 <HAL_GetTick>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fba6:	d90d      	bls.n	800fbc4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	e01c      	b.n	800fbfe <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	695b      	ldr	r3, [r3, #20]
 800fbca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0e2      	beq.n	800fb98 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d107      	bne.n	800fbf0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fbee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	e000      	b.n	800fbfe <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fbfc:	2302      	movs	r3, #2
  }
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3718      	adds	r7, #24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	080100e9 	.word	0x080100e9
 800fc0c:	08010089 	.word	0x08010089
 800fc10:	08010181 	.word	0x08010181

0800fc14 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d002      	beq.n	800fc2e <HAL_SAI_Receive_DMA+0x1a>
 800fc28:	88fb      	ldrh	r3, [r7, #6]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d101      	bne.n	800fc32 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e079      	b.n	800fd26 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d172      	bne.n	800fd24 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d101      	bne.n	800fc4c <HAL_SAI_Receive_DMA+0x38>
 800fc48:	2302      	movs	r3, #2
 800fc4a:	e06c      	b.n	800fd26 <HAL_SAI_Receive_DMA+0x112>
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	68ba      	ldr	r2, [r7, #8]
 800fc58:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	88fa      	ldrh	r2, [r7, #6]
 800fc5e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	88fa      	ldrh	r2, [r7, #6]
 800fc66:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2222      	movs	r2, #34	; 0x22
 800fc76:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc80:	4a2b      	ldr	r2, [pc, #172]	; (800fd30 <HAL_SAI_Receive_DMA+0x11c>)
 800fc82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc8a:	4a2a      	ldr	r2, [pc, #168]	; (800fd34 <HAL_SAI_Receive_DMA+0x120>)
 800fc8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc94:	4a28      	ldr	r2, [pc, #160]	; (800fd38 <HAL_SAI_Receive_DMA+0x124>)
 800fc96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc9e:	2200      	movs	r2, #0
 800fca0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	331c      	adds	r3, #28
 800fcae:	4619      	mov	r1, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fcbc:	f7f7 fd88 	bl	80077d0 <HAL_DMA_Start_IT>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d005      	beq.n	800fcd2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e029      	b.n	800fd26 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f000 f965 	bl	800ffa4 <SAI_InterruptFlag>
 800fcda:	4601      	mov	r1, r0
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	691a      	ldr	r2, [r3, #16]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fcf8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d107      	bne.n	800fd18 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fd16:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e000      	b.n	800fd26 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800fd24:	2302      	movs	r3, #2
  }
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	08010165 	.word	0x08010165
 800fd34:	08010105 	.word	0x08010105
 800fd38:	08010181 	.word	0x08010181

0800fd3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2200      	movs	r2, #0
 800fd52:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2200      	movs	r2, #0
 800fd58:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <SAI_InitI2S+0x2e>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d103      	bne.n	800fd72 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	651a      	str	r2, [r3, #80]	; 0x50
 800fd70:	e002      	b.n	800fd78 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2201      	movs	r2, #1
 800fd76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fd7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd86:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e077      	b.n	800fe92 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d107      	bne.n	800fdb8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fdb4:	665a      	str	r2, [r3, #100]	; 0x64
 800fdb6:	e006      	b.n	800fdc6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fdbe:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b03      	cmp	r3, #3
 800fdca:	d84f      	bhi.n	800fe6c <SAI_InitI2S+0x130>
 800fdcc:	a201      	add	r2, pc, #4	; (adr r2, 800fdd4 <SAI_InitI2S+0x98>)
 800fdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd2:	bf00      	nop
 800fdd4:	0800fde5 	.word	0x0800fde5
 800fdd8:	0800fe07 	.word	0x0800fe07
 800fddc:	0800fe29 	.word	0x0800fe29
 800fde0:	0800fe4b 	.word	0x0800fe4b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2280      	movs	r2, #128	; 0x80
 800fde8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	085b      	lsrs	r3, r3, #1
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	085b      	lsrs	r3, r3, #1
 800fdf8:	011a      	lsls	r2, r3, #4
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2240      	movs	r2, #64	; 0x40
 800fe02:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe04:	e035      	b.n	800fe72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2280      	movs	r2, #128	; 0x80
 800fe0a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	085b      	lsrs	r3, r3, #1
 800fe10:	019a      	lsls	r2, r3, #6
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	085b      	lsrs	r3, r3, #1
 800fe1a:	015a      	lsls	r2, r3, #5
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2280      	movs	r2, #128	; 0x80
 800fe24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe26:	e024      	b.n	800fe72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	22c0      	movs	r2, #192	; 0xc0
 800fe2c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	085b      	lsrs	r3, r3, #1
 800fe32:	019a      	lsls	r2, r3, #6
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	085b      	lsrs	r3, r3, #1
 800fe3c:	015a      	lsls	r2, r3, #5
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2280      	movs	r2, #128	; 0x80
 800fe46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe48:	e013      	b.n	800fe72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	22e0      	movs	r2, #224	; 0xe0
 800fe4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	085b      	lsrs	r3, r3, #1
 800fe54:	019a      	lsls	r2, r3, #6
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	085b      	lsrs	r3, r3, #1
 800fe5e:	015a      	lsls	r2, r3, #5
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2280      	movs	r2, #128	; 0x80
 800fe68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fe6a:	e002      	b.n	800fe72 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	75fb      	strb	r3, [r7, #23]
      break;
 800fe70:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d10b      	bne.n	800fe90 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d102      	bne.n	800fe84 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2210      	movs	r2, #16
 800fe82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d102      	bne.n	800fe90 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2208      	movs	r2, #8
 800fe8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop

0800fea0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b087      	sub	sp, #28
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
 800feac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800feae:	2300      	movs	r3, #0
 800feb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2200      	movs	r2, #0
 800feb6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d003      	beq.n	800fece <SAI_InitPCM+0x2e>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d103      	bne.n	800fed6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2201      	movs	r2, #1
 800fed2:	651a      	str	r2, [r3, #80]	; 0x50
 800fed4:	e002      	b.n	800fedc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fee8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fef0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2200      	movs	r2, #0
 800fef6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff04:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d103      	bne.n	800ff14 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	659a      	str	r2, [r3, #88]	; 0x58
 800ff12:	e002      	b.n	800ff1a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	220d      	movs	r2, #13
 800ff18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b03      	cmp	r3, #3
 800ff1e:	d837      	bhi.n	800ff90 <SAI_InitPCM+0xf0>
 800ff20:	a201      	add	r2, pc, #4	; (adr r2, 800ff28 <SAI_InitPCM+0x88>)
 800ff22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff26:	bf00      	nop
 800ff28:	0800ff39 	.word	0x0800ff39
 800ff2c:	0800ff4f 	.word	0x0800ff4f
 800ff30:	0800ff65 	.word	0x0800ff65
 800ff34:	0800ff7b 	.word	0x0800ff7b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2280      	movs	r2, #128	; 0x80
 800ff3c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	011a      	lsls	r2, r3, #4
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2240      	movs	r2, #64	; 0x40
 800ff4a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff4c:	e023      	b.n	800ff96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2280      	movs	r2, #128	; 0x80
 800ff52:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	015a      	lsls	r2, r3, #5
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2280      	movs	r2, #128	; 0x80
 800ff60:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff62:	e018      	b.n	800ff96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	22c0      	movs	r2, #192	; 0xc0
 800ff68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2280      	movs	r2, #128	; 0x80
 800ff76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff78:	e00d      	b.n	800ff96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	22e0      	movs	r2, #224	; 0xe0
 800ff7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2280      	movs	r2, #128	; 0x80
 800ff8c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ff8e:	e002      	b.n	800ff96 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ff90:	2301      	movs	r3, #1
 800ff92:	75fb      	strb	r3, [r7, #23]
      break;
 800ff94:	bf00      	nop
  }

  return status;
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	371c      	adds	r7, #28
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr

0800ffa4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	460b      	mov	r3, r1
 800ffae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ffb4:	78fb      	ldrb	r3, [r7, #3]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d103      	bne.n	800ffc2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f043 0308 	orr.w	r3, r3, #8
 800ffc0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffc6:	2b08      	cmp	r3, #8
 800ffc8:	d10b      	bne.n	800ffe2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d003      	beq.n	800ffda <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d103      	bne.n	800ffe2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f043 0310 	orr.w	r3, r3, #16
 800ffe0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	d003      	beq.n	800fff2 <SAI_InterruptFlag+0x4e>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d104      	bne.n	800fffc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	e003      	b.n	8010004 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f043 0304 	orr.w	r3, r3, #4
 8010002:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8010004:	68fb      	ldr	r3, [r7, #12]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3714      	adds	r7, #20
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
	...

08010014 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010014:	b480      	push	{r7}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801001c:	4b18      	ldr	r3, [pc, #96]	; (8010080 <SAI_Disable+0x6c>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a18      	ldr	r2, [pc, #96]	; (8010084 <SAI_Disable+0x70>)
 8010022:	fba2 2303 	umull	r2, r3, r2, r3
 8010026:	0b1b      	lsrs	r3, r3, #12
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801002c:	2300      	movs	r3, #0
 801002e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801003e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10a      	bne.n	801005c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801004c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8010056:	2303      	movs	r3, #3
 8010058:	72fb      	strb	r3, [r7, #11]
      break;
 801005a:	e009      	b.n	8010070 <SAI_Disable+0x5c>
    }
    count--;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3b01      	subs	r3, #1
 8010060:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e7      	bne.n	8010040 <SAI_Disable+0x2c>

  return status;
 8010070:	7afb      	ldrb	r3, [r7, #11]
}
 8010072:	4618      	mov	r0, r3
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	20000020 	.word	0x20000020
 8010084:	95cbec1b 	.word	0x95cbec1b

08010088 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010094:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801009e:	d01c      	beq.n	80100da <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80100b6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80100b8:	2100      	movs	r1, #0
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff ff72 	bl	800ffa4 <SAI_InterruptFlag>
 80100c0:	4603      	mov	r3, r0
 80100c2:	43d9      	mvns	r1, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	691a      	ldr	r2, [r3, #16]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	400a      	ands	r2, r1
 80100d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7f2 f948 	bl	8002370 <HAL_SAI_TxCpltCallback>
#endif
}
 80100e0:	bf00      	nop
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f7f2 f944 	bl	8002384 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80100fc:	bf00      	nop
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010110:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801011a:	d01c      	beq.n	8010156 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801012a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010134:	2100      	movs	r1, #0
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7ff ff34 	bl	800ffa4 <SAI_InterruptFlag>
 801013c:	4603      	mov	r3, r0
 801013e:	43d9      	mvns	r1, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	691a      	ldr	r2, [r3, #16]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	400a      	ands	r2, r1
 801014c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2201      	movs	r2, #1
 8010152:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f7f2 f91e 	bl	8002398 <HAL_SAI_RxCpltCallback>
#endif
}
 801015c:	bf00      	nop
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7f2 f91b 	bl	80023ae <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8010178:	bf00      	nop
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7f8 fcb2 	bl	8008af8 <HAL_DMA_GetError>
 8010194:	4603      	mov	r3, r0
 8010196:	2b02      	cmp	r3, #2
 8010198:	d01d      	beq.n	80101d6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80101a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80101b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7ff ff2a 	bl	8010014 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2201      	movs	r2, #1
 80101c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f7f2 f8c3 	bl	800235c <HAL_SAI_ErrorCallback>
#endif
  }
}
 80101d6:	bf00      	nop
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b08a      	sub	sp, #40	; 0x28
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	e075      	b.n	80102dc <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d105      	bne.n	8010208 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7f3 fade 	bl	80037c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2204      	movs	r2, #4
 801020c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f867 	bl	80102e4 <HAL_SD_InitCard>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d001      	beq.n	8010220 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801021c:	2301      	movs	r3, #1
 801021e:	e05d      	b.n	80102dc <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8010220:	f107 0308 	add.w	r3, r7, #8
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fdb4 	bl	8010d94 <HAL_SD_GetCardStatus>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	e052      	b.n	80102dc <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8010236:	7e3b      	ldrb	r3, [r7, #24]
 8010238:	b2db      	uxtb	r3, r3
 801023a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801023c:	7e7b      	ldrb	r3, [r7, #25]
 801023e:	b2db      	uxtb	r3, r3
 8010240:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010246:	2b01      	cmp	r3, #1
 8010248:	d10a      	bne.n	8010260 <HAL_SD_Init+0x82>
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	2b00      	cmp	r3, #0
 801024e:	d102      	bne.n	8010256 <HAL_SD_Init+0x78>
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f44f 7200 	mov.w	r2, #512	; 0x200
 801025c:	659a      	str	r2, [r3, #88]	; 0x58
 801025e:	e00b      	b.n	8010278 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010264:	2b01      	cmp	r3, #1
 8010266:	d104      	bne.n	8010272 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801026e:	659a      	str	r2, [r3, #88]	; 0x58
 8010270:	e002      	b.n	8010278 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	68db      	ldr	r3, [r3, #12]
 801027c:	4619      	mov	r1, r3
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 fe72 	bl	8010f68 <HAL_SD_ConfigWideBusOperation>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e026      	b.n	80102dc <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801028e:	f7f4 fff1 	bl	8005274 <HAL_GetTick>
 8010292:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8010294:	e011      	b.n	80102ba <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010296:	f7f4 ffed 	bl	8005274 <HAL_GetTick>
 801029a:	4602      	mov	r2, r0
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102a4:	d109      	bne.n	80102ba <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80102ac:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2201      	movs	r2, #1
 80102b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80102b6:	2303      	movs	r3, #3
 80102b8:	e010      	b.n	80102dc <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 ff66 	bl	801118c <HAL_SD_GetCardState>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b04      	cmp	r3, #4
 80102c4:	d1e7      	bne.n	8010296 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80102da:	2300      	movs	r3, #0
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3728      	adds	r7, #40	; 0x28
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80102e4:	b590      	push	{r4, r7, lr}
 80102e6:	b08d      	sub	sp, #52	; 0x34
 80102e8:	af02      	add	r7, sp, #8
 80102ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80102ec:	2300      	movs	r3, #0
 80102ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80102f0:	2300      	movs	r3, #0
 80102f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80102f8:	2300      	movs	r3, #0
 80102fa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80102fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010300:	f04f 0100 	mov.w	r1, #0
 8010304:	f7fd fd48 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 8010308:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	2b00      	cmp	r3, #0
 801030e:	d109      	bne.n	8010324 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801031e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010320:	2301      	movs	r3, #1
 8010322:	e070      	b.n	8010406 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	0a1b      	lsrs	r3, r3, #8
 8010328:	4a39      	ldr	r2, [pc, #228]	; (8010410 <HAL_SD_InitCard+0x12c>)
 801032a:	fba2 2303 	umull	r2, r3, r2, r3
 801032e:	091b      	lsrs	r3, r3, #4
 8010330:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681c      	ldr	r4, [r3, #0]
 8010336:	466a      	mov	r2, sp
 8010338:	f107 0318 	add.w	r3, r7, #24
 801033c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010340:	e882 0003 	stmia.w	r2, {r0, r1}
 8010344:	f107 030c 	add.w	r3, r7, #12
 8010348:	cb0e      	ldmia	r3, {r1, r2, r3}
 801034a:	4620      	mov	r0, r4
 801034c:	f003 fe7e 	bl	801404c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4618      	mov	r0, r3
 8010356:	f003 fec1 	bl	80140dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d005      	beq.n	801036c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010366:	fbb2 f3f3 	udiv	r3, r2, r3
 801036a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	2b00      	cmp	r3, #0
 8010370:	d007      	beq.n	8010382 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8010372:	4a28      	ldr	r2, [pc, #160]	; (8010414 <HAL_SD_InitCard+0x130>)
 8010374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010376:	fbb2 f3f3 	udiv	r3, r2, r3
 801037a:	3301      	adds	r3, #1
 801037c:	4618      	mov	r0, r3
 801037e:	f7f4 ff85 	bl	800528c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 fff0 	bl	8011368 <SD_PowerON>
 8010388:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	431a      	orrs	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80103a4:	2301      	movs	r3, #1
 80103a6:	e02e      	b.n	8010406 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 ff0f 	bl	80111cc <SD_InitCard>
 80103ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80103b0:	6a3b      	ldr	r3, [r7, #32]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00b      	beq.n	80103ce <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103c2:	6a3b      	ldr	r3, [r7, #32]
 80103c4:	431a      	orrs	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80103ca:	2301      	movs	r3, #1
 80103cc:	e01b      	b.n	8010406 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103d6:	4618      	mov	r0, r3
 80103d8:	f003 ff16 	bl	8014208 <SDMMC_CmdBlockLength>
 80103dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00f      	beq.n	8010404 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a0b      	ldr	r2, [pc, #44]	; (8010418 <HAL_SD_InitCard+0x134>)
 80103ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	431a      	orrs	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2201      	movs	r2, #1
 80103fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010400:	2301      	movs	r3, #1
 8010402:	e000      	b.n	8010406 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	372c      	adds	r7, #44	; 0x2c
 801040a:	46bd      	mov	sp, r7
 801040c:	bd90      	pop	{r4, r7, pc}
 801040e:	bf00      	nop
 8010410:	014f8b59 	.word	0x014f8b59
 8010414:	00012110 	.word	0x00012110
 8010418:	1fe00fff 	.word	0x1fe00fff

0801041c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b092      	sub	sp, #72	; 0x48
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
 8010428:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801042a:	f7f4 ff23 	bl	8005274 <HAL_GetTick>
 801042e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d107      	bne.n	801044e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	e167      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010454:	b2db      	uxtb	r3, r3
 8010456:	2b01      	cmp	r3, #1
 8010458:	f040 815a 	bne.w	8010710 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	441a      	add	r2, r3
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801046c:	429a      	cmp	r2, r3
 801046e:	d907      	bls.n	8010480 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010474:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801047c:	2301      	movs	r3, #1
 801047e:	e14e      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2203      	movs	r2, #3
 8010484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2200      	movs	r2, #0
 801048e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010494:	2b01      	cmp	r3, #1
 8010496:	d002      	beq.n	801049e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	025b      	lsls	r3, r3, #9
 801049c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801049e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	025b      	lsls	r3, r3, #9
 80104a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80104aa:	2390      	movs	r3, #144	; 0x90
 80104ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80104ae:	2302      	movs	r3, #2
 80104b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80104b2:	2300      	movs	r3, #0
 80104b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80104b6:	2300      	movs	r3, #0
 80104b8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f107 0214 	add.w	r2, r7, #20
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f003 fe73 	bl	80141b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68da      	ldr	r2, [r3, #12]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80104d8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d90a      	bls.n	80104f6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2202      	movs	r2, #2
 80104e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104ec:	4618      	mov	r0, r3
 80104ee:	f003 fed1 	bl	8014294 <SDMMC_CmdReadMultiBlock>
 80104f2:	6478      	str	r0, [r7, #68]	; 0x44
 80104f4:	e009      	b.n	801050a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2201      	movs	r2, #1
 80104fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010502:	4618      	mov	r0, r3
 8010504:	f003 fea3 	bl	801424e <SDMMC_CmdReadSingleBlock>
 8010508:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801050a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801050c:	2b00      	cmp	r3, #0
 801050e:	d012      	beq.n	8010536 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a84      	ldr	r2, [pc, #528]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 8010516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801051c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801051e:	431a      	orrs	r2, r3
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	e0f3      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801053a:	e058      	b.n	80105ee <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010546:	2b00      	cmp	r3, #0
 8010548:	d033      	beq.n	80105b2 <HAL_SD_ReadBlocks+0x196>
 801054a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054c:	2b1f      	cmp	r3, #31
 801054e:	d930      	bls.n	80105b2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8010550:	2300      	movs	r3, #0
 8010552:	643b      	str	r3, [r7, #64]	; 0x40
 8010554:	e027      	b.n	80105a6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4618      	mov	r0, r3
 801055c:	f003 fda0 	bl	80140a0 <SDMMC_ReadFIFO>
 8010560:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	b2da      	uxtb	r2, r3
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801056a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056c:	3301      	adds	r3, #1
 801056e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	0a1b      	lsrs	r3, r3, #8
 8010574:	b2da      	uxtb	r2, r3
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057c:	3301      	adds	r3, #1
 801057e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	0c1b      	lsrs	r3, r3, #16
 8010584:	b2da      	uxtb	r2, r3
 8010586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010588:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801058a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058c:	3301      	adds	r3, #1
 801058e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	0e1b      	lsrs	r3, r3, #24
 8010594:	b2da      	uxtb	r2, r3
 8010596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010598:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801059a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059c:	3301      	adds	r3, #1
 801059e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80105a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a2:	3301      	adds	r3, #1
 80105a4:	643b      	str	r3, [r7, #64]	; 0x40
 80105a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a8:	2b07      	cmp	r3, #7
 80105aa:	d9d4      	bls.n	8010556 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80105ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ae:	3b20      	subs	r3, #32
 80105b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80105b2:	f7f4 fe5f 	bl	8005274 <HAL_GetTick>
 80105b6:	4602      	mov	r2, r0
 80105b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105be:	429a      	cmp	r2, r3
 80105c0:	d902      	bls.n	80105c8 <HAL_SD_ReadBlocks+0x1ac>
 80105c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d112      	bne.n	80105ee <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a56      	ldr	r2, [pc, #344]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 80105ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80105ea:	2303      	movs	r3, #3
 80105ec:	e097      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105f4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d09f      	beq.n	801053c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68da      	ldr	r2, [r3, #12]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801060a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010616:	2b00      	cmp	r3, #0
 8010618:	d022      	beq.n	8010660 <HAL_SD_ReadBlocks+0x244>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d91f      	bls.n	8010660 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010624:	2b03      	cmp	r3, #3
 8010626:	d01b      	beq.n	8010660 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f003 fe9b 	bl	8014368 <SDMMC_CmdStopTransfer>
 8010632:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010636:	2b00      	cmp	r3, #0
 8010638:	d012      	beq.n	8010660 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4a3a      	ldr	r2, [pc, #232]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 8010640:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010648:	431a      	orrs	r2, r3
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2201      	movs	r2, #1
 8010652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2200      	movs	r2, #0
 801065a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 801065c:	2301      	movs	r3, #1
 801065e:	e05e      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010666:	f003 0308 	and.w	r3, r3, #8
 801066a:	2b00      	cmp	r3, #0
 801066c:	d012      	beq.n	8010694 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a2d      	ldr	r2, [pc, #180]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 8010674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801067a:	f043 0208 	orr.w	r2, r3, #8
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2201      	movs	r2, #1
 8010686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e044      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801069a:	f003 0302 	and.w	r3, r3, #2
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d012      	beq.n	80106c8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a20      	ldr	r2, [pc, #128]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 80106a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ae:	f043 0202 	orr.w	r2, r3, #2
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2200      	movs	r2, #0
 80106c2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80106c4:	2301      	movs	r3, #1
 80106c6:	e02a      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	f003 0320 	and.w	r3, r3, #32
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d012      	beq.n	80106fc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a13      	ldr	r2, [pc, #76]	; (8010728 <HAL_SD_ReadBlocks+0x30c>)
 80106dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e2:	f043 0220 	orr.w	r2, r3, #32
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80106f8:	2301      	movs	r3, #1
 80106fa:	e010      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4a0a      	ldr	r2, [pc, #40]	; (801072c <HAL_SD_ReadBlocks+0x310>)
 8010702:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	e006      	b.n	801071e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010714:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801071c:	2301      	movs	r3, #1
  }
}
 801071e:	4618      	mov	r0, r3
 8010720:	3748      	adds	r7, #72	; 0x48
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	1fe00fff 	.word	0x1fe00fff
 801072c:	18000f3a 	.word	0x18000f3a

08010730 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b092      	sub	sp, #72	; 0x48
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801073e:	f7f4 fd99 	bl	8005274 <HAL_GetTick>
 8010742:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d107      	bne.n	8010762 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	e16b      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010768:	b2db      	uxtb	r3, r3
 801076a:	2b01      	cmp	r3, #1
 801076c:	f040 815e 	bne.w	8010a2c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2200      	movs	r2, #0
 8010774:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	441a      	add	r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010780:	429a      	cmp	r2, r3
 8010782:	d907      	bls.n	8010794 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010788:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010790:	2301      	movs	r3, #1
 8010792:	e152      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2203      	movs	r2, #3
 8010798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2200      	movs	r2, #0
 80107a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d002      	beq.n	80107b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80107ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ae:	025b      	lsls	r3, r3, #9
 80107b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80107b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	025b      	lsls	r3, r3, #9
 80107bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80107be:	2390      	movs	r3, #144	; 0x90
 80107c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80107c2:	2300      	movs	r3, #0
 80107c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f107 0218 	add.w	r2, r7, #24
 80107d6:	4611      	mov	r1, r2
 80107d8:	4618      	mov	r0, r3
 80107da:	f003 fce9 	bl	80141b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68da      	ldr	r2, [r3, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107ec:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d90a      	bls.n	801080a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2220      	movs	r2, #32
 80107f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010800:	4618      	mov	r0, r3
 8010802:	f003 fd8d 	bl	8014320 <SDMMC_CmdWriteMultiBlock>
 8010806:	6478      	str	r0, [r7, #68]	; 0x44
 8010808:	e009      	b.n	801081e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2210      	movs	r2, #16
 801080e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010816:	4618      	mov	r0, r3
 8010818:	f003 fd5f 	bl	80142da <SDMMC_CmdWriteSingleBlock>
 801081c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801081e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010820:	2b00      	cmp	r3, #0
 8010822:	d012      	beq.n	801084a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a86      	ldr	r2, [pc, #536]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 801082a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010832:	431a      	orrs	r2, r3
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010846:	2301      	movs	r3, #1
 8010848:	e0f7      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801084e:	e05c      	b.n	801090a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801085a:	2b00      	cmp	r3, #0
 801085c:	d037      	beq.n	80108ce <HAL_SD_WriteBlocks+0x19e>
 801085e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010860:	2b1f      	cmp	r3, #31
 8010862:	d934      	bls.n	80108ce <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8010864:	2300      	movs	r3, #0
 8010866:	643b      	str	r3, [r7, #64]	; 0x40
 8010868:	e02b      	b.n	80108c2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 801086a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010872:	3301      	adds	r3, #1
 8010874:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8010876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	021a      	lsls	r2, r3, #8
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	4313      	orrs	r3, r2
 8010880:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	3301      	adds	r3, #1
 8010886:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	041a      	lsls	r2, r3, #16
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	4313      	orrs	r3, r2
 8010892:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010896:	3301      	adds	r3, #1
 8010898:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 801089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	061a      	lsls	r2, r3, #24
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80108a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a8:	3301      	adds	r3, #1
 80108aa:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f107 0214 	add.w	r2, r7, #20
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f003 fbff 	bl	80140ba <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80108bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108be:	3301      	adds	r3, #1
 80108c0:	643b      	str	r3, [r7, #64]	; 0x40
 80108c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108c4:	2b07      	cmp	r3, #7
 80108c6:	d9d0      	bls.n	801086a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80108c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ca:	3b20      	subs	r3, #32
 80108cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80108ce:	f7f4 fcd1 	bl	8005274 <HAL_GetTick>
 80108d2:	4602      	mov	r2, r0
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108da:	429a      	cmp	r2, r3
 80108dc:	d902      	bls.n	80108e4 <HAL_SD_WriteBlocks+0x1b4>
 80108de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d112      	bne.n	801090a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a56      	ldr	r2, [pc, #344]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 80108ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108f2:	431a      	orrs	r2, r3
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2201      	movs	r2, #1
 80108fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2200      	movs	r2, #0
 8010904:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010906:	2303      	movs	r3, #3
 8010908:	e097      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010910:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8010914:	2b00      	cmp	r3, #0
 8010916:	d09b      	beq.n	8010850 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	68da      	ldr	r2, [r3, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010926:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801092e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010932:	2b00      	cmp	r3, #0
 8010934:	d022      	beq.n	801097c <HAL_SD_WriteBlocks+0x24c>
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d91f      	bls.n	801097c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010940:	2b03      	cmp	r3, #3
 8010942:	d01b      	beq.n	801097c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4618      	mov	r0, r3
 801094a:	f003 fd0d 	bl	8014368 <SDMMC_CmdStopTransfer>
 801094e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010952:	2b00      	cmp	r3, #0
 8010954:	d012      	beq.n	801097c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a3a      	ldr	r2, [pc, #232]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 801095c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010964:	431a      	orrs	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2201      	movs	r2, #1
 801096e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010978:	2301      	movs	r3, #1
 801097a:	e05e      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010982:	f003 0308 	and.w	r3, r3, #8
 8010986:	2b00      	cmp	r3, #0
 8010988:	d012      	beq.n	80109b0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a2d      	ldr	r2, [pc, #180]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 8010990:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010996:	f043 0208 	orr.w	r2, r3, #8
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2201      	movs	r2, #1
 80109a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e044      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d012      	beq.n	80109e4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	4a20      	ldr	r2, [pc, #128]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 80109c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ca:	f043 0202 	orr.w	r2, r3, #2
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e02a      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ea:	f003 0310 	and.w	r3, r3, #16
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d012      	beq.n	8010a18 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4a13      	ldr	r2, [pc, #76]	; (8010a44 <HAL_SD_WriteBlocks+0x314>)
 80109f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109fe:	f043 0210 	orr.w	r2, r3, #16
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2200      	movs	r2, #0
 8010a12:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010a14:	2301      	movs	r3, #1
 8010a16:	e010      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a0a      	ldr	r2, [pc, #40]	; (8010a48 <HAL_SD_WriteBlocks+0x318>)
 8010a1e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2201      	movs	r2, #1
 8010a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	e006      	b.n	8010a3a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
  }
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3748      	adds	r7, #72	; 0x48
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	1fe00fff 	.word	0x1fe00fff
 8010a48:	18000f3a 	.word	0x18000f3a

08010a4c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a5a:	0f9b      	lsrs	r3, r3, #30
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a66:	0e9b      	lsrs	r3, r3, #26
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	f003 030f 	and.w	r3, r3, #15
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a78:	0e1b      	lsrs	r3, r3, #24
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	f003 0303 	and.w	r3, r3, #3
 8010a80:	b2da      	uxtb	r2, r3
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a8a:	0c1b      	lsrs	r3, r3, #16
 8010a8c:	b2da      	uxtb	r2, r3
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a96:	0a1b      	lsrs	r3, r3, #8
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aac:	0d1b      	lsrs	r3, r3, #20
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ab8:	0c1b      	lsrs	r3, r3, #16
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	f003 030f 	and.w	r3, r3, #15
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aca:	0bdb      	lsrs	r3, r3, #15
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010adc:	0b9b      	lsrs	r3, r3, #14
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	f003 0301 	and.w	r3, r3, #1
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aee:	0b5b      	lsrs	r3, r3, #13
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	f003 0301 	and.w	r3, r3, #1
 8010af6:	b2da      	uxtb	r2, r3
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b00:	0b1b      	lsrs	r3, r3, #12
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	f003 0301 	and.w	r3, r3, #1
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2200      	movs	r2, #0
 8010b12:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d163      	bne.n	8010be4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b20:	009a      	lsls	r2, r3, #2
 8010b22:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010b26:	4013      	ands	r3, r2
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010b2c:	0f92      	lsrs	r2, r2, #30
 8010b2e:	431a      	orrs	r2, r3
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b38:	0edb      	lsrs	r3, r3, #27
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	f003 0307 	and.w	r3, r3, #7
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b4a:	0e1b      	lsrs	r3, r3, #24
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b5c:	0d5b      	lsrs	r3, r3, #21
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	f003 0307 	and.w	r3, r3, #7
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b6e:	0c9b      	lsrs	r3, r3, #18
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	f003 0307 	and.w	r3, r3, #7
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b80:	0bdb      	lsrs	r3, r3, #15
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	f003 0307 	and.w	r3, r3, #7
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	1c5a      	adds	r2, r3, #1
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	7e1b      	ldrb	r3, [r3, #24]
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	f003 0307 	and.w	r3, r3, #7
 8010ba2:	3302      	adds	r3, #2
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010bae:	fb03 f202 	mul.w	r2, r3, r2
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	7a1b      	ldrb	r3, [r3, #8]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	f003 030f 	and.w	r3, r3, #15
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	409a      	lsls	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010bd0:	0a52      	lsrs	r2, r2, #9
 8010bd2:	fb03 f202 	mul.w	r2, r3, r2
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010be0:	655a      	str	r2, [r3, #84]	; 0x54
 8010be2:	e031      	b.n	8010c48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d11d      	bne.n	8010c28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bf0:	041b      	lsls	r3, r3, #16
 8010bf2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bfa:	0c1b      	lsrs	r3, r3, #16
 8010bfc:	431a      	orrs	r2, r3
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	691b      	ldr	r3, [r3, #16]
 8010c06:	3301      	adds	r3, #1
 8010c08:	029a      	lsls	r2, r3, #10
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	655a      	str	r2, [r3, #84]	; 0x54
 8010c26:	e00f      	b.n	8010c48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a58      	ldr	r2, [pc, #352]	; (8010d90 <HAL_SD_GetCardCSD+0x344>)
 8010c2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010c44:	2301      	movs	r3, #1
 8010c46:	e09d      	b.n	8010d84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c4c:	0b9b      	lsrs	r3, r3, #14
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	f003 0301 	and.w	r3, r3, #1
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c5e:	09db      	lsrs	r3, r3, #7
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c80:	0fdb      	lsrs	r3, r3, #31
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c8c:	0f5b      	lsrs	r3, r3, #29
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	f003 0303 	and.w	r3, r3, #3
 8010c94:	b2da      	uxtb	r2, r3
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c9e:	0e9b      	lsrs	r3, r3, #26
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	f003 0307 	and.w	r3, r3, #7
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cb0:	0d9b      	lsrs	r3, r3, #22
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f003 030f 	and.w	r3, r3, #15
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cc2:	0d5b      	lsrs	r3, r3, #21
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cde:	0c1b      	lsrs	r3, r3, #16
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cf2:	0bdb      	lsrs	r3, r3, #15
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d06:	0b9b      	lsrs	r3, r3, #14
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	f003 0301 	and.w	r3, r3, #1
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d1a:	0b5b      	lsrs	r3, r3, #13
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	f003 0301 	and.w	r3, r3, #1
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d2e:	0b1b      	lsrs	r3, r3, #12
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	f003 0301 	and.w	r3, r3, #1
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d42:	0a9b      	lsrs	r3, r3, #10
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f003 0303 	and.w	r3, r3, #3
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d56:	0a1b      	lsrs	r3, r3, #8
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d6a:	085b      	lsrs	r3, r3, #1
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	1fe00fff 	.word	0x1fe00fff

08010d94 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b094      	sub	sp, #80	; 0x50
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b03      	cmp	r3, #3
 8010dae:	d101      	bne.n	8010db4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	e0a7      	b.n	8010f04 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010db4:	f107 0308 	add.w	r3, r7, #8
 8010db8:	4619      	mov	r1, r3
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fb62 	bl	8011484 <SD_SendSDStatus>
 8010dc0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d011      	beq.n	8010dec <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a4f      	ldr	r2, [pc, #316]	; (8010f0c <HAL_SD_GetCardStatus+0x178>)
 8010dce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dd6:	431a      	orrs	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010de4:	2301      	movs	r3, #1
 8010de6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010dea:	e070      	b.n	8010ece <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	099b      	lsrs	r3, r3, #6
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	f003 0303 	and.w	r3, r3, #3
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	095b      	lsrs	r3, r3, #5
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	b2da      	uxtb	r2, r3
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	0a1b      	lsrs	r3, r3, #8
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	0e1b      	lsrs	r3, r3, #24
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	4313      	orrs	r3, r2
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	061a      	lsls	r2, r3, #24
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	021b      	lsls	r3, r3, #8
 8010e2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e32:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	0a1b      	lsrs	r3, r3, #8
 8010e38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e3c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	0e1b      	lsrs	r3, r3, #24
 8010e42:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	0a1b      	lsrs	r3, r3, #8
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	0d1b      	lsrs	r3, r3, #20
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	f003 030f 	and.w	r3, r3, #15
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	0c1b      	lsrs	r3, r3, #16
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	0a9b      	lsrs	r3, r3, #10
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	0a1b      	lsrs	r3, r3, #8
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f003 0303 	and.w	r3, r3, #3
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	091b      	lsrs	r3, r3, #4
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	f003 030f 	and.w	r3, r3, #15
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	f003 030f 	and.w	r3, r3, #15
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	0e1b      	lsrs	r3, r3, #24
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f003 f996 	bl	8014208 <SDMMC_CmdBlockLength>
 8010edc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00d      	beq.n	8010f00 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a08      	ldr	r2, [pc, #32]	; (8010f0c <HAL_SD_GetCardStatus+0x178>)
 8010eea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ef0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010efa:	2301      	movs	r3, #1
 8010efc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8010f00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3750      	adds	r7, #80	; 0x50
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	1fe00fff 	.word	0x1fe00fff

08010f10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b08d      	sub	sp, #52	; 0x34
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2203      	movs	r2, #3
 8010f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f84:	2b03      	cmp	r3, #3
 8010f86:	d02e      	beq.n	8010fe6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f8e:	d106      	bne.n	8010f9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8010f9c:	e029      	b.n	8010ff2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010fa4:	d10a      	bne.n	8010fbc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 fb64 	bl	8011674 <SD_WideBus_Enable>
 8010fac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	431a      	orrs	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8010fba:	e01a      	b.n	8010ff2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10a      	bne.n	8010fd8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 fba1 	bl	801170a <SD_WideBus_Disable>
 8010fc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fce:	6a3b      	ldr	r3, [r7, #32]
 8010fd0:	431a      	orrs	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8010fd6:	e00c      	b.n	8010ff2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8010fe4:	e005      	b.n	8010ff2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d007      	beq.n	801100a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a5f      	ldr	r2, [pc, #380]	; (801117c <HAL_SD_ConfigWideBusOperation+0x214>)
 8011000:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011002:	2301      	movs	r3, #1
 8011004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011008:	e096      	b.n	8011138 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801100a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801100e:	f04f 0100 	mov.w	r1, #0
 8011012:	f7fc fec1 	bl	800dd98 <HAL_RCCEx_GetPeriphCLKFreq>
 8011016:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	2b00      	cmp	r3, #0
 801101c:	f000 8083 	beq.w	8011126 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	695a      	ldr	r2, [r3, #20]
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	4950      	ldr	r1, [pc, #320]	; (8011180 <HAL_SD_ConfigWideBusOperation+0x218>)
 801103e:	fba1 1303 	umull	r1, r3, r1, r3
 8011042:	0e1b      	lsrs	r3, r3, #24
 8011044:	429a      	cmp	r2, r3
 8011046:	d303      	bcc.n	8011050 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	695b      	ldr	r3, [r3, #20]
 801104c:	61bb      	str	r3, [r7, #24]
 801104e:	e05a      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011058:	d103      	bne.n	8011062 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	695b      	ldr	r3, [r3, #20]
 801105e:	61bb      	str	r3, [r7, #24]
 8011060:	e051      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801106a:	d126      	bne.n	80110ba <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10e      	bne.n	8011092 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8011074:	69fb      	ldr	r3, [r7, #28]
 8011076:	4a43      	ldr	r2, [pc, #268]	; (8011184 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d906      	bls.n	801108a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	4a40      	ldr	r2, [pc, #256]	; (8011180 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011080:	fba2 2303 	umull	r2, r3, r2, r3
 8011084:	0e5b      	lsrs	r3, r3, #25
 8011086:	61bb      	str	r3, [r7, #24]
 8011088:	e03d      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	695b      	ldr	r3, [r3, #20]
 801108e:	61bb      	str	r3, [r7, #24]
 8011090:	e039      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	005b      	lsls	r3, r3, #1
 8011098:	69fa      	ldr	r2, [r7, #28]
 801109a:	fbb2 f3f3 	udiv	r3, r2, r3
 801109e:	4a39      	ldr	r2, [pc, #228]	; (8011184 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d906      	bls.n	80110b2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	4a36      	ldr	r2, [pc, #216]	; (8011180 <HAL_SD_ConfigWideBusOperation+0x218>)
 80110a8:	fba2 2303 	umull	r2, r3, r2, r3
 80110ac:	0e5b      	lsrs	r3, r3, #25
 80110ae:	61bb      	str	r3, [r7, #24]
 80110b0:	e029      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	695b      	ldr	r3, [r3, #20]
 80110b6:	61bb      	str	r3, [r7, #24]
 80110b8:	e025      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10e      	bne.n	80110e0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	4a30      	ldr	r2, [pc, #192]	; (8011188 <HAL_SD_ConfigWideBusOperation+0x220>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d906      	bls.n	80110d8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80110ca:	69fb      	ldr	r3, [r7, #28]
 80110cc:	4a2c      	ldr	r2, [pc, #176]	; (8011180 <HAL_SD_ConfigWideBusOperation+0x218>)
 80110ce:	fba2 2303 	umull	r2, r3, r2, r3
 80110d2:	0e1b      	lsrs	r3, r3, #24
 80110d4:	61bb      	str	r3, [r7, #24]
 80110d6:	e016      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	695b      	ldr	r3, [r3, #20]
 80110dc:	61bb      	str	r3, [r7, #24]
 80110de:	e012      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	695b      	ldr	r3, [r3, #20]
 80110e4:	005b      	lsls	r3, r3, #1
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80110ec:	4a26      	ldr	r2, [pc, #152]	; (8011188 <HAL_SD_ConfigWideBusOperation+0x220>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d906      	bls.n	8011100 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	4a22      	ldr	r2, [pc, #136]	; (8011180 <HAL_SD_ConfigWideBusOperation+0x218>)
 80110f6:	fba2 2303 	umull	r2, r3, r2, r3
 80110fa:	0e1b      	lsrs	r3, r3, #24
 80110fc:	61bb      	str	r3, [r7, #24]
 80110fe:	e002      	b.n	8011106 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681c      	ldr	r4, [r3, #0]
 801110a:	466a      	mov	r2, sp
 801110c:	f107 0314 	add.w	r3, r7, #20
 8011110:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011114:	e882 0003 	stmia.w	r2, {r0, r1}
 8011118:	f107 0308 	add.w	r3, r7, #8
 801111c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801111e:	4620      	mov	r0, r4
 8011120:	f002 ff94 	bl	801404c <SDMMC_Init>
 8011124:	e008      	b.n	8011138 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8011132:	2301      	movs	r3, #1
 8011134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011140:	4618      	mov	r0, r3
 8011142:	f003 f861 	bl	8014208 <SDMMC_CmdBlockLength>
 8011146:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011148:	6a3b      	ldr	r3, [r7, #32]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00c      	beq.n	8011168 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a0a      	ldr	r2, [pc, #40]	; (801117c <HAL_SD_ConfigWideBusOperation+0x214>)
 8011154:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	431a      	orrs	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8011162:	2301      	movs	r3, #1
 8011164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2201      	movs	r2, #1
 801116c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8011170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011174:	4618      	mov	r0, r3
 8011176:	372c      	adds	r7, #44	; 0x2c
 8011178:	46bd      	mov	sp, r7
 801117a:	bd90      	pop	{r4, r7, pc}
 801117c:	1fe00fff 	.word	0x1fe00fff
 8011180:	55e63b89 	.word	0x55e63b89
 8011184:	02faf080 	.word	0x02faf080
 8011188:	017d7840 	.word	0x017d7840

0801118c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011194:	2300      	movs	r3, #0
 8011196:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011198:	f107 030c 	add.w	r3, r7, #12
 801119c:	4619      	mov	r1, r3
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fa40 	bl	8011624 <SD_SendStatus>
 80111a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d005      	beq.n	80111b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	431a      	orrs	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	0a5b      	lsrs	r3, r3, #9
 80111bc:	f003 030f 	and.w	r3, r3, #15
 80111c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80111c2:	693b      	ldr	r3, [r7, #16]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3718      	adds	r7, #24
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b090      	sub	sp, #64	; 0x40
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80111d4:	2300      	movs	r3, #0
 80111d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80111d8:	f7f4 f84c 	bl	8005274 <HAL_GetTick>
 80111dc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f002 ff8b 	bl	80140fe <SDMMC_GetPowerState>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d102      	bne.n	80111f4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80111ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80111f2:	e0b5      	b.n	8011360 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d02e      	beq.n	801125a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4618      	mov	r0, r3
 8011202:	f003 f9d6 	bl	80145b2 <SDMMC_CmdSendCID>
 8011206:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <SD_InitCard+0x46>
    {
      return errorstate;
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	e0a6      	b.n	8011360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2100      	movs	r1, #0
 8011218:	4618      	mov	r0, r3
 801121a:	f002 ffb6 	bl	801418a <SDMMC_GetResponse>
 801121e:	4602      	mov	r2, r0
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2104      	movs	r1, #4
 801122a:	4618      	mov	r0, r3
 801122c:	f002 ffad 	bl	801418a <SDMMC_GetResponse>
 8011230:	4602      	mov	r2, r0
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2108      	movs	r1, #8
 801123c:	4618      	mov	r0, r3
 801123e:	f002 ffa4 	bl	801418a <SDMMC_GetResponse>
 8011242:	4602      	mov	r2, r0
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	210c      	movs	r1, #12
 801124e:	4618      	mov	r0, r3
 8011250:	f002 ff9b 	bl	801418a <SDMMC_GetResponse>
 8011254:	4602      	mov	r2, r0
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801125e:	2b03      	cmp	r3, #3
 8011260:	d01d      	beq.n	801129e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8011262:	e019      	b.n	8011298 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f107 020a 	add.w	r2, r7, #10
 801126c:	4611      	mov	r1, r2
 801126e:	4618      	mov	r0, r3
 8011270:	f003 f9de 	bl	8014630 <SDMMC_CmdSetRelAdd>
 8011274:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8011276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011278:	2b00      	cmp	r3, #0
 801127a:	d001      	beq.n	8011280 <SD_InitCard+0xb4>
      {
        return errorstate;
 801127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127e:	e06f      	b.n	8011360 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8011280:	f7f3 fff8 	bl	8005274 <HAL_GetTick>
 8011284:	4602      	mov	r2, r0
 8011286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	f241 3287 	movw	r2, #4999	; 0x1387
 801128e:	4293      	cmp	r3, r2
 8011290:	d902      	bls.n	8011298 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8011292:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011296:	e063      	b.n	8011360 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8011298:	897b      	ldrh	r3, [r7, #10]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d0e2      	beq.n	8011264 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a2:	2b03      	cmp	r3, #3
 80112a4:	d036      	beq.n	8011314 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80112a6:	897b      	ldrh	r3, [r7, #10]
 80112a8:	461a      	mov	r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112b6:	041b      	lsls	r3, r3, #16
 80112b8:	4619      	mov	r1, r3
 80112ba:	4610      	mov	r0, r2
 80112bc:	f003 f998 	bl	80145f0 <SDMMC_CmdSendCSD>
 80112c0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80112c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d001      	beq.n	80112cc <SD_InitCard+0x100>
    {
      return errorstate;
 80112c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ca:	e049      	b.n	8011360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2100      	movs	r1, #0
 80112d2:	4618      	mov	r0, r3
 80112d4:	f002 ff59 	bl	801418a <SDMMC_GetResponse>
 80112d8:	4602      	mov	r2, r0
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2104      	movs	r1, #4
 80112e4:	4618      	mov	r0, r3
 80112e6:	f002 ff50 	bl	801418a <SDMMC_GetResponse>
 80112ea:	4602      	mov	r2, r0
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2108      	movs	r1, #8
 80112f6:	4618      	mov	r0, r3
 80112f8:	f002 ff47 	bl	801418a <SDMMC_GetResponse>
 80112fc:	4602      	mov	r2, r0
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	210c      	movs	r1, #12
 8011308:	4618      	mov	r0, r3
 801130a:	f002 ff3e 	bl	801418a <SDMMC_GetResponse>
 801130e:	4602      	mov	r2, r0
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2104      	movs	r1, #4
 801131a:	4618      	mov	r0, r3
 801131c:	f002 ff35 	bl	801418a <SDMMC_GetResponse>
 8011320:	4603      	mov	r3, r0
 8011322:	0d1a      	lsrs	r2, r3, #20
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011328:	f107 030c 	add.w	r3, r7, #12
 801132c:	4619      	mov	r1, r3
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7ff fb8c 	bl	8010a4c <HAL_SD_GetCardCSD>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d002      	beq.n	8011340 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801133a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801133e:	e00f      	b.n	8011360 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011348:	041b      	lsls	r3, r3, #16
 801134a:	4619      	mov	r1, r3
 801134c:	4610      	mov	r0, r2
 801134e:	f003 f847 	bl	80143e0 <SDMMC_CmdSelDesel>
 8011352:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	2b00      	cmp	r3, #0
 8011358:	d001      	beq.n	801135e <SD_InitCard+0x192>
  {
    return errorstate;
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	e000      	b.n	8011360 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801135e:	2300      	movs	r3, #0
}
 8011360:	4618      	mov	r0, r3
 8011362:	3740      	adds	r7, #64	; 0x40
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b086      	sub	sp, #24
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011370:	2300      	movs	r3, #0
 8011372:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8011374:	2300      	movs	r3, #0
 8011376:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011378:	2300      	movs	r3, #0
 801137a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4618      	mov	r0, r3
 8011382:	f003 f850 	bl	8014426 <SDMMC_CmdGoIdleState>
 8011386:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <SD_PowerON+0x2a>
  {
    return errorstate;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	e072      	b.n	8011478 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4618      	mov	r0, r3
 8011398:	f003 f863 	bl	8014462 <SDMMC_CmdOperCond>
 801139c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113a4:	d10d      	bne.n	80113c2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4618      	mov	r0, r3
 80113b2:	f003 f838 	bl	8014426 <SDMMC_CmdGoIdleState>
 80113b6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d004      	beq.n	80113c8 <SD_PowerON+0x60>
    {
      return errorstate;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	e05a      	b.n	8011478 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2201      	movs	r2, #1
 80113c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d137      	bne.n	8011440 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2100      	movs	r1, #0
 80113d6:	4618      	mov	r0, r3
 80113d8:	f003 f863 	bl	80144a2 <SDMMC_CmdAppCommand>
 80113dc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d02d      	beq.n	8011440 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80113e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80113e8:	e046      	b.n	8011478 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2100      	movs	r1, #0
 80113f0:	4618      	mov	r0, r3
 80113f2:	f003 f856 	bl	80144a2 <SDMMC_CmdAppCommand>
 80113f6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <SD_PowerON+0x9a>
    {
      return errorstate;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	e03a      	b.n	8011478 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	491e      	ldr	r1, [pc, #120]	; (8011480 <SD_PowerON+0x118>)
 8011408:	4618      	mov	r0, r3
 801140a:	f003 f86d 	bl	80144e8 <SDMMC_CmdAppOperCommand>
 801140e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d002      	beq.n	801141c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801141a:	e02d      	b.n	8011478 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2100      	movs	r1, #0
 8011422:	4618      	mov	r0, r3
 8011424:	f002 feb1 	bl	801418a <SDMMC_GetResponse>
 8011428:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	0fdb      	lsrs	r3, r3, #31
 801142e:	2b01      	cmp	r3, #1
 8011430:	d101      	bne.n	8011436 <SD_PowerON+0xce>
 8011432:	2301      	movs	r3, #1
 8011434:	e000      	b.n	8011438 <SD_PowerON+0xd0>
 8011436:	2300      	movs	r3, #0
 8011438:	613b      	str	r3, [r7, #16]

    count++;
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	3301      	adds	r3, #1
 801143e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011446:	4293      	cmp	r3, r2
 8011448:	d802      	bhi.n	8011450 <SD_PowerON+0xe8>
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d0cc      	beq.n	80113ea <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011456:	4293      	cmp	r3, r2
 8011458:	d902      	bls.n	8011460 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801145a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801145e:	e00b      	b.n	8011478 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801146c:	2b00      	cmp	r3, #0
 801146e:	d002      	beq.n	8011476 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2201      	movs	r2, #1
 8011474:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3718      	adds	r7, #24
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	c1100000 	.word	0xc1100000

08011484 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08c      	sub	sp, #48	; 0x30
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801148e:	f7f3 fef1 	bl	8005274 <HAL_GetTick>
 8011492:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f002 fe73 	bl	801418a <SDMMC_GetResponse>
 80114a4:	4603      	mov	r3, r0
 80114a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80114ae:	d102      	bne.n	80114b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80114b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114b4:	e0b0      	b.n	8011618 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2140      	movs	r1, #64	; 0x40
 80114bc:	4618      	mov	r0, r3
 80114be:	f002 fea3 	bl	8014208 <SDMMC_CmdBlockLength>
 80114c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d005      	beq.n	80114d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	e0a0      	b.n	8011618 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	4619      	mov	r1, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	f002 ffdd 	bl	80144a2 <SDMMC_CmdAppCommand>
 80114e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80114ea:	6a3b      	ldr	r3, [r7, #32]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d005      	beq.n	80114fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80114f8:	6a3b      	ldr	r3, [r7, #32]
 80114fa:	e08d      	b.n	8011618 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80114fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011500:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8011502:	2340      	movs	r3, #64	; 0x40
 8011504:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8011506:	2360      	movs	r3, #96	; 0x60
 8011508:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801150a:	2302      	movs	r3, #2
 801150c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801150e:	2300      	movs	r3, #0
 8011510:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011512:	2301      	movs	r3, #1
 8011514:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f107 0208 	add.w	r2, r7, #8
 801151e:	4611      	mov	r1, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f002 fe45 	bl	80141b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4618      	mov	r0, r3
 801152c:	f003 f8c5 	bl	80146ba <SDMMC_CmdStatusRegister>
 8011530:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d02b      	beq.n	8011590 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011540:	6a3b      	ldr	r3, [r7, #32]
 8011542:	e069      	b.n	8011618 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801154a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801154e:	2b00      	cmp	r3, #0
 8011550:	d013      	beq.n	801157a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8011552:	2300      	movs	r3, #0
 8011554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011556:	e00d      	b.n	8011574 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4618      	mov	r0, r3
 801155e:	f002 fd9f 	bl	80140a0 <SDMMC_ReadFIFO>
 8011562:	4602      	mov	r2, r0
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	601a      	str	r2, [r3, #0]
        pData++;
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	3304      	adds	r3, #4
 801156c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	3301      	adds	r3, #1
 8011572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	2b07      	cmp	r3, #7
 8011578:	d9ee      	bls.n	8011558 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801157a:	f7f3 fe7b 	bl	8005274 <HAL_GetTick>
 801157e:	4602      	mov	r2, r0
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011588:	d102      	bne.n	8011590 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801158a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801158e:	e043      	b.n	8011618 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011596:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801159a:	2b00      	cmp	r3, #0
 801159c:	d0d2      	beq.n	8011544 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a4:	f003 0308 	and.w	r3, r3, #8
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80115ac:	2308      	movs	r3, #8
 80115ae:	e033      	b.n	8011618 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115b6:	f003 0302 	and.w	r3, r3, #2
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d001      	beq.n	80115c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80115be:	2302      	movs	r3, #2
 80115c0:	e02a      	b.n	8011618 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c8:	f003 0320 	and.w	r3, r3, #32
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d017      	beq.n	8011600 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80115d0:	2320      	movs	r3, #32
 80115d2:	e021      	b.n	8011618 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4618      	mov	r0, r3
 80115da:	f002 fd61 	bl	80140a0 <SDMMC_ReadFIFO>
 80115de:	4602      	mov	r2, r0
 80115e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e2:	601a      	str	r2, [r3, #0]
    pData++;
 80115e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e6:	3304      	adds	r3, #4
 80115e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80115ea:	f7f3 fe43 	bl	8005274 <HAL_GetTick>
 80115ee:	4602      	mov	r2, r0
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115f8:	d102      	bne.n	8011600 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80115fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115fe:	e00b      	b.n	8011618 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1e2      	bne.n	80115d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a03      	ldr	r2, [pc, #12]	; (8011620 <SD_SendSDStatus+0x19c>)
 8011614:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3730      	adds	r7, #48	; 0x30
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	18000f3a 	.word	0x18000f3a

08011624 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d102      	bne.n	801163a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011638:	e018      	b.n	801166c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011642:	041b      	lsls	r3, r3, #16
 8011644:	4619      	mov	r1, r3
 8011646:	4610      	mov	r0, r2
 8011648:	f003 f814 	bl	8014674 <SDMMC_CmdSendStatus>
 801164c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <SD_SendStatus+0x34>
  {
    return errorstate;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	e009      	b.n	801166c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2100      	movs	r1, #0
 801165e:	4618      	mov	r0, r3
 8011660:	f002 fd93 	bl	801418a <SDMMC_GetResponse>
 8011664:	4602      	mov	r2, r0
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801166a:	2300      	movs	r3, #0
}
 801166c:	4618      	mov	r0, r3
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b086      	sub	sp, #24
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801167c:	2300      	movs	r3, #0
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	2300      	movs	r3, #0
 8011682:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2100      	movs	r1, #0
 801168a:	4618      	mov	r0, r3
 801168c:	f002 fd7d 	bl	801418a <SDMMC_GetResponse>
 8011690:	4603      	mov	r3, r0
 8011692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801169a:	d102      	bne.n	80116a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801169c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80116a0:	e02f      	b.n	8011702 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80116a2:	f107 030c 	add.w	r3, r7, #12
 80116a6:	4619      	mov	r1, r3
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 f879 	bl	80117a0 <SD_FindSCR>
 80116ae:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d001      	beq.n	80116ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	e023      	b.n	8011702 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d01c      	beq.n	80116fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116cc:	041b      	lsls	r3, r3, #16
 80116ce:	4619      	mov	r1, r3
 80116d0:	4610      	mov	r0, r2
 80116d2:	f002 fee6 	bl	80144a2 <SDMMC_CmdAppCommand>
 80116d6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	e00f      	b.n	8011702 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	2102      	movs	r1, #2
 80116e8:	4618      	mov	r0, r3
 80116ea:	f002 ff1d 	bl	8014528 <SDMMC_CmdBusWidth>
 80116ee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d001      	beq.n	80116fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	e003      	b.n	8011702 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80116fa:	2300      	movs	r3, #0
 80116fc:	e001      	b.n	8011702 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80116fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011702:	4618      	mov	r0, r3
 8011704:	3718      	adds	r7, #24
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b086      	sub	sp, #24
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011712:	2300      	movs	r3, #0
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	2300      	movs	r3, #0
 8011718:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2100      	movs	r1, #0
 8011720:	4618      	mov	r0, r3
 8011722:	f002 fd32 	bl	801418a <SDMMC_GetResponse>
 8011726:	4603      	mov	r3, r0
 8011728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801172c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011730:	d102      	bne.n	8011738 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011736:	e02f      	b.n	8011798 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011738:	f107 030c 	add.w	r3, r7, #12
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 f82e 	bl	80117a0 <SD_FindSCR>
 8011744:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d001      	beq.n	8011750 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	e023      	b.n	8011798 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011756:	2b00      	cmp	r3, #0
 8011758:	d01c      	beq.n	8011794 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011762:	041b      	lsls	r3, r3, #16
 8011764:	4619      	mov	r1, r3
 8011766:	4610      	mov	r0, r2
 8011768:	f002 fe9b 	bl	80144a2 <SDMMC_CmdAppCommand>
 801176c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	e00f      	b.n	8011798 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2100      	movs	r1, #0
 801177e:	4618      	mov	r0, r3
 8011780:	f002 fed2 	bl	8014528 <SDMMC_CmdBusWidth>
 8011784:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d001      	beq.n	8011790 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	e003      	b.n	8011798 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011790:	2300      	movs	r3, #0
 8011792:	e001      	b.n	8011798 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011798:	4618      	mov	r0, r3
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b08e      	sub	sp, #56	; 0x38
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80117aa:	f7f3 fd63 	bl	8005274 <HAL_GetTick>
 80117ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80117b0:	2300      	movs	r3, #0
 80117b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80117b4:	2300      	movs	r3, #0
 80117b6:	60bb      	str	r3, [r7, #8]
 80117b8:	2300      	movs	r3, #0
 80117ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2108      	movs	r1, #8
 80117c6:	4618      	mov	r0, r3
 80117c8:	f002 fd1e 	bl	8014208 <SDMMC_CmdBlockLength>
 80117cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80117ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d001      	beq.n	80117d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80117d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d6:	e0ad      	b.n	8011934 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117e0:	041b      	lsls	r3, r3, #16
 80117e2:	4619      	mov	r1, r3
 80117e4:	4610      	mov	r0, r2
 80117e6:	f002 fe5c 	bl	80144a2 <SDMMC_CmdAppCommand>
 80117ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80117ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80117f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f4:	e09e      	b.n	8011934 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80117f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80117fc:	2308      	movs	r3, #8
 80117fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011800:	2330      	movs	r3, #48	; 0x30
 8011802:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011804:	2302      	movs	r3, #2
 8011806:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011808:	2300      	movs	r3, #0
 801180a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801180c:	2301      	movs	r3, #1
 801180e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f107 0210 	add.w	r2, r7, #16
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f002 fcc8 	bl	80141b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4618      	mov	r0, r3
 8011826:	f002 fea2 	bl	801456e <SDMMC_CmdSendSCR>
 801182a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	2b00      	cmp	r3, #0
 8011830:	d027      	beq.n	8011882 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	e07e      	b.n	8011934 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801183c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011840:	2b00      	cmp	r3, #0
 8011842:	d113      	bne.n	801186c <SD_FindSCR+0xcc>
 8011844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011846:	2b00      	cmp	r3, #0
 8011848:	d110      	bne.n	801186c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4618      	mov	r0, r3
 8011850:	f002 fc26 	bl	80140a0 <SDMMC_ReadFIFO>
 8011854:	4603      	mov	r3, r0
 8011856:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4618      	mov	r0, r3
 801185e:	f002 fc1f 	bl	80140a0 <SDMMC_ReadFIFO>
 8011862:	4603      	mov	r3, r0
 8011864:	60fb      	str	r3, [r7, #12]
      index++;
 8011866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011868:	3301      	adds	r3, #1
 801186a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801186c:	f7f3 fd02 	bl	8005274 <HAL_GetTick>
 8011870:	4602      	mov	r2, r0
 8011872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801187a:	d102      	bne.n	8011882 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801187c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011880:	e058      	b.n	8011934 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011888:	f240 532a 	movw	r3, #1322	; 0x52a
 801188c:	4013      	ands	r3, r2
 801188e:	2b00      	cmp	r3, #0
 8011890:	d0d1      	beq.n	8011836 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011898:	f003 0308 	and.w	r3, r3, #8
 801189c:	2b00      	cmp	r3, #0
 801189e:	d005      	beq.n	80118ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2208      	movs	r2, #8
 80118a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80118a8:	2308      	movs	r3, #8
 80118aa:	e043      	b.n	8011934 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b2:	f003 0302 	and.w	r3, r3, #2
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d005      	beq.n	80118c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2202      	movs	r2, #2
 80118c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80118c2:	2302      	movs	r3, #2
 80118c4:	e036      	b.n	8011934 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118cc:	f003 0320 	and.w	r3, r3, #32
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d005      	beq.n	80118e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2220      	movs	r2, #32
 80118da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80118dc:	2320      	movs	r3, #32
 80118de:	e029      	b.n	8011934 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4a15      	ldr	r2, [pc, #84]	; (801193c <SD_FindSCR+0x19c>)
 80118e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	061a      	lsls	r2, r3, #24
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	021b      	lsls	r3, r3, #8
 80118f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80118f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	0a1b      	lsrs	r3, r3, #8
 80118fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80118fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	0e1b      	lsrs	r3, r3, #24
 8011904:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	601a      	str	r2, [r3, #0]
    scr++;
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	3304      	adds	r3, #4
 801190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	061a      	lsls	r2, r3, #24
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	021b      	lsls	r3, r3, #8
 8011918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801191c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	0a1b      	lsrs	r3, r3, #8
 8011922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011926:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	0e1b      	lsrs	r3, r3, #24
 801192c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011930:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3738      	adds	r7, #56	; 0x38
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	18000f3a 	.word	0x18000f3a

08011940 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d101      	bne.n	8011954 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011950:	2301      	movs	r3, #1
 8011952:	e02b      	b.n	80119ac <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b00      	cmp	r3, #0
 801195e:	d106      	bne.n	801196e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7f0 ffe9 	bl	8002940 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2202      	movs	r2, #2
 8011972:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3304      	adds	r3, #4
 801197e:	4619      	mov	r1, r3
 8011980:	4610      	mov	r0, r2
 8011982:	f002 fa61 	bl	8013e48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	461a      	mov	r2, r3
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	f002 fab5 	bl	8013f00 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011996:	4b07      	ldr	r3, [pc, #28]	; (80119b4 <HAL_SDRAM_Init+0x74>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4a06      	ldr	r2, [pc, #24]	; (80119b4 <HAL_SDRAM_Init+0x74>)
 801199c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80119a0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2201      	movs	r2, #1
 80119a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80119aa:	2300      	movs	r3, #0
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	52004000 	.word	0x52004000

080119b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80119ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
 80119ce:	2b02      	cmp	r3, #2
 80119d0:	d101      	bne.n	80119d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80119d2:	2302      	movs	r3, #2
 80119d4:	e021      	b.n	8011a1a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80119d6:	7dfb      	ldrb	r3, [r7, #23]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d002      	beq.n	80119e2 <HAL_SDRAM_SendCommand+0x2a>
 80119dc:	7dfb      	ldrb	r3, [r7, #23]
 80119de:	2b05      	cmp	r3, #5
 80119e0:	d118      	bne.n	8011a14 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2202      	movs	r2, #2
 80119e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	68b9      	ldr	r1, [r7, #8]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f002 faee 	bl	8013fd4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d104      	bne.n	8011a0a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2205      	movs	r2, #5
 8011a04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011a08:	e006      	b.n	8011a18 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011a12:	e001      	b.n	8011a18 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011a14:	2301      	movs	r3, #1
 8011a16:	e000      	b.n	8011a1a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b082      	sub	sp, #8
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d101      	bne.n	8011a3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011a38:	2302      	movs	r3, #2
 8011a3a:	e016      	b.n	8011a6a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d10f      	bne.n	8011a68 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	6839      	ldr	r1, [r7, #0]
 8011a56:	4618      	mov	r0, r3
 8011a58:	f002 fae0 	bl	801401c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011a64:	2300      	movs	r3, #0
 8011a66:	e000      	b.n	8011a6a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011a68:	2301      	movs	r3, #1
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
	...

08011a74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d101      	bne.n	8011a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011a82:	2301      	movs	r3, #1
 8011a84:	e10f      	b.n	8011ca6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	4a87      	ldr	r2, [pc, #540]	; (8011cb0 <HAL_SPI_Init+0x23c>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d00f      	beq.n	8011ab6 <HAL_SPI_Init+0x42>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4a86      	ldr	r2, [pc, #536]	; (8011cb4 <HAL_SPI_Init+0x240>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d00a      	beq.n	8011ab6 <HAL_SPI_Init+0x42>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4a84      	ldr	r2, [pc, #528]	; (8011cb8 <HAL_SPI_Init+0x244>)
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d005      	beq.n	8011ab6 <HAL_SPI_Init+0x42>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	2b0f      	cmp	r3, #15
 8011ab0:	d901      	bls.n	8011ab6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e0f7      	b.n	8011ca6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 f900 	bl	8011cbc <SPI_GetPacketSize>
 8011abc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a7b      	ldr	r2, [pc, #492]	; (8011cb0 <HAL_SPI_Init+0x23c>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d00c      	beq.n	8011ae2 <HAL_SPI_Init+0x6e>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a79      	ldr	r2, [pc, #484]	; (8011cb4 <HAL_SPI_Init+0x240>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d007      	beq.n	8011ae2 <HAL_SPI_Init+0x6e>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a78      	ldr	r2, [pc, #480]	; (8011cb8 <HAL_SPI_Init+0x244>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d002      	beq.n	8011ae2 <HAL_SPI_Init+0x6e>
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2b08      	cmp	r3, #8
 8011ae0:	d811      	bhi.n	8011b06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011ae6:	4a72      	ldr	r2, [pc, #456]	; (8011cb0 <HAL_SPI_Init+0x23c>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d009      	beq.n	8011b00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4a70      	ldr	r2, [pc, #448]	; (8011cb4 <HAL_SPI_Init+0x240>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d004      	beq.n	8011b00 <HAL_SPI_Init+0x8c>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4a6f      	ldr	r2, [pc, #444]	; (8011cb8 <HAL_SPI_Init+0x244>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d104      	bne.n	8011b0a <HAL_SPI_Init+0x96>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2b10      	cmp	r3, #16
 8011b04:	d901      	bls.n	8011b0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011b06:	2301      	movs	r3, #1
 8011b08:	e0cd      	b.n	8011ca6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d106      	bne.n	8011b24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f7f1 ff22 	bl	8003968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2202      	movs	r2, #2
 8011b28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	681a      	ldr	r2, [r3, #0]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f022 0201 	bic.w	r2, r2, #1
 8011b3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	689b      	ldr	r3, [r3, #8]
 8011b42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011b46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	699b      	ldr	r3, [r3, #24]
 8011b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011b50:	d119      	bne.n	8011b86 <HAL_SPI_Init+0x112>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b5a:	d103      	bne.n	8011b64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d008      	beq.n	8011b76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10c      	bne.n	8011b86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011b74:	d107      	bne.n	8011b86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011b84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00f      	beq.n	8011bb2 <HAL_SPI_Init+0x13e>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	2b06      	cmp	r3, #6
 8011b98:	d90b      	bls.n	8011bb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	430a      	orrs	r2, r1
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	e007      	b.n	8011bc2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011bc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	69da      	ldr	r2, [r3, #28]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bca:	431a      	orrs	r2, r3
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	431a      	orrs	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd4:	ea42 0103 	orr.w	r1, r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68da      	ldr	r2, [r3, #12]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	430a      	orrs	r2, r1
 8011be2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	431a      	orrs	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bf2:	431a      	orrs	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	431a      	orrs	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	431a      	orrs	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	695b      	ldr	r3, [r3, #20]
 8011c04:	431a      	orrs	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6a1b      	ldr	r3, [r3, #32]
 8011c0a:	431a      	orrs	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	431a      	orrs	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c16:	431a      	orrs	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	431a      	orrs	r2, r3
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c22:	ea42 0103 	orr.w	r1, r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	430a      	orrs	r2, r1
 8011c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d113      	bne.n	8011c62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	689b      	ldr	r3, [r3, #8]
 8011c54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f022 0201 	bic.w	r2, r2, #1
 8011c70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00a      	beq.n	8011c94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	430a      	orrs	r2, r1
 8011c92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	40013000 	.word	0x40013000
 8011cb4:	40003800 	.word	0x40003800
 8011cb8:	40003c00 	.word	0x40003c00

08011cbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cc8:	095b      	lsrs	r3, r3, #5
 8011cca:	3301      	adds	r3, #1
 8011ccc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	3307      	adds	r3, #7
 8011cda:	08db      	lsrs	r3, r3, #3
 8011cdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	fb02 f303 	mul.w	r3, r2, r3
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b082      	sub	sp, #8
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d101      	bne.n	8011d04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011d00:	2301      	movs	r3, #1
 8011d02:	e049      	b.n	8011d98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d106      	bne.n	8011d1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7f2 f9bd 	bl	8004098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2202      	movs	r2, #2
 8011d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681a      	ldr	r2, [r3, #0]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	4619      	mov	r1, r3
 8011d30:	4610      	mov	r0, r2
 8011d32:	f000 fa99 	bl	8012268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2201      	movs	r2, #1
 8011d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2201      	movs	r2, #1
 8011d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2201      	movs	r2, #1
 8011d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2201      	movs	r2, #1
 8011d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2201      	movs	r2, #1
 8011d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d101      	bne.n	8011db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011dae:	2301      	movs	r3, #1
 8011db0:	e049      	b.n	8011e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d106      	bne.n	8011dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7f2 f944 	bl	8004054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	4619      	mov	r1, r3
 8011dde:	4610      	mov	r0, r2
 8011de0:	f000 fa42 	bl	8012268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2201      	movs	r2, #1
 8011df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2201      	movs	r2, #1
 8011e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2201      	movs	r2, #1
 8011e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
	...

08011e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d101      	bne.n	8011e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011e6a:	2302      	movs	r3, #2
 8011e6c:	e0ff      	b.n	801206e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2201      	movs	r2, #1
 8011e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2b14      	cmp	r3, #20
 8011e7a:	f200 80f0 	bhi.w	801205e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011e7e:	a201      	add	r2, pc, #4	; (adr r2, 8011e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e84:	08011ed9 	.word	0x08011ed9
 8011e88:	0801205f 	.word	0x0801205f
 8011e8c:	0801205f 	.word	0x0801205f
 8011e90:	0801205f 	.word	0x0801205f
 8011e94:	08011f19 	.word	0x08011f19
 8011e98:	0801205f 	.word	0x0801205f
 8011e9c:	0801205f 	.word	0x0801205f
 8011ea0:	0801205f 	.word	0x0801205f
 8011ea4:	08011f5b 	.word	0x08011f5b
 8011ea8:	0801205f 	.word	0x0801205f
 8011eac:	0801205f 	.word	0x0801205f
 8011eb0:	0801205f 	.word	0x0801205f
 8011eb4:	08011f9b 	.word	0x08011f9b
 8011eb8:	0801205f 	.word	0x0801205f
 8011ebc:	0801205f 	.word	0x0801205f
 8011ec0:	0801205f 	.word	0x0801205f
 8011ec4:	08011fdd 	.word	0x08011fdd
 8011ec8:	0801205f 	.word	0x0801205f
 8011ecc:	0801205f 	.word	0x0801205f
 8011ed0:	0801205f 	.word	0x0801205f
 8011ed4:	0801201d 	.word	0x0801201d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	68b9      	ldr	r1, [r7, #8]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 fa5c 	bl	801239c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	699a      	ldr	r2, [r3, #24]
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f042 0208 	orr.w	r2, r2, #8
 8011ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	699a      	ldr	r2, [r3, #24]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f022 0204 	bic.w	r2, r2, #4
 8011f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	6999      	ldr	r1, [r3, #24]
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	691a      	ldr	r2, [r3, #16]
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	430a      	orrs	r2, r1
 8011f14:	619a      	str	r2, [r3, #24]
      break;
 8011f16:	e0a5      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	68b9      	ldr	r1, [r7, #8]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f000 facc 	bl	80124bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	699a      	ldr	r2, [r3, #24]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	699a      	ldr	r2, [r3, #24]
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	6999      	ldr	r1, [r3, #24]
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	021a      	lsls	r2, r3, #8
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	430a      	orrs	r2, r1
 8011f56:	619a      	str	r2, [r3, #24]
      break;
 8011f58:	e084      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	68b9      	ldr	r1, [r7, #8]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f000 fb35 	bl	80125d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	69da      	ldr	r2, [r3, #28]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f042 0208 	orr.w	r2, r2, #8
 8011f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	69da      	ldr	r2, [r3, #28]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f022 0204 	bic.w	r2, r2, #4
 8011f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	69d9      	ldr	r1, [r3, #28]
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	691a      	ldr	r2, [r3, #16]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	430a      	orrs	r2, r1
 8011f96:	61da      	str	r2, [r3, #28]
      break;
 8011f98:	e064      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	68b9      	ldr	r1, [r7, #8]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f000 fb9d 	bl	80126e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	69da      	ldr	r2, [r3, #28]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	69da      	ldr	r2, [r3, #28]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	69d9      	ldr	r1, [r3, #28]
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	021a      	lsls	r2, r3, #8
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	430a      	orrs	r2, r1
 8011fd8:	61da      	str	r2, [r3, #28]
      break;
 8011fda:	e043      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	68b9      	ldr	r1, [r7, #8]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f000 fbe6 	bl	80127b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f042 0208 	orr.w	r2, r2, #8
 8011ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f022 0204 	bic.w	r2, r2, #4
 8012006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	691a      	ldr	r2, [r3, #16]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	430a      	orrs	r2, r1
 8012018:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801201a:	e023      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	68b9      	ldr	r1, [r7, #8]
 8012022:	4618      	mov	r0, r3
 8012024:	f000 fc2a 	bl	801287c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	021a      	lsls	r2, r3, #8
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	430a      	orrs	r2, r1
 801205a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801205c:	e002      	b.n	8012064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801205e:	2301      	movs	r3, #1
 8012060:	75fb      	strb	r3, [r7, #23]
      break;
 8012062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801206c:	7dfb      	ldrb	r3, [r7, #23]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3718      	adds	r7, #24
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop

08012078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012082:	2300      	movs	r3, #0
 8012084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801208c:	2b01      	cmp	r3, #1
 801208e:	d101      	bne.n	8012094 <HAL_TIM_ConfigClockSource+0x1c>
 8012090:	2302      	movs	r3, #2
 8012092:	e0dc      	b.n	801224e <HAL_TIM_ConfigClockSource+0x1d6>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2202      	movs	r2, #2
 80120a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80120ac:	68ba      	ldr	r2, [r7, #8]
 80120ae:	4b6a      	ldr	r3, [pc, #424]	; (8012258 <HAL_TIM_ConfigClockSource+0x1e0>)
 80120b0:	4013      	ands	r3, r2
 80120b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80120ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a64      	ldr	r2, [pc, #400]	; (801225c <HAL_TIM_ConfigClockSource+0x1e4>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	f000 80a9 	beq.w	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 80120d0:	4a62      	ldr	r2, [pc, #392]	; (801225c <HAL_TIM_ConfigClockSource+0x1e4>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	f200 80ae 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 80120d8:	4a61      	ldr	r2, [pc, #388]	; (8012260 <HAL_TIM_ConfigClockSource+0x1e8>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	f000 80a1 	beq.w	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 80120e0:	4a5f      	ldr	r2, [pc, #380]	; (8012260 <HAL_TIM_ConfigClockSource+0x1e8>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	f200 80a6 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 80120e8:	4a5e      	ldr	r2, [pc, #376]	; (8012264 <HAL_TIM_ConfigClockSource+0x1ec>)
 80120ea:	4293      	cmp	r3, r2
 80120ec:	f000 8099 	beq.w	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 80120f0:	4a5c      	ldr	r2, [pc, #368]	; (8012264 <HAL_TIM_ConfigClockSource+0x1ec>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	f200 809e 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 80120f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80120fc:	f000 8091 	beq.w	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 8012100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012104:	f200 8096 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801210c:	f000 8089 	beq.w	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 8012110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012114:	f200 808e 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801211c:	d03e      	beq.n	801219c <HAL_TIM_ConfigClockSource+0x124>
 801211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012122:	f200 8087 	bhi.w	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801212a:	f000 8086 	beq.w	801223a <HAL_TIM_ConfigClockSource+0x1c2>
 801212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012132:	d87f      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012134:	2b70      	cmp	r3, #112	; 0x70
 8012136:	d01a      	beq.n	801216e <HAL_TIM_ConfigClockSource+0xf6>
 8012138:	2b70      	cmp	r3, #112	; 0x70
 801213a:	d87b      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 801213c:	2b60      	cmp	r3, #96	; 0x60
 801213e:	d050      	beq.n	80121e2 <HAL_TIM_ConfigClockSource+0x16a>
 8012140:	2b60      	cmp	r3, #96	; 0x60
 8012142:	d877      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012144:	2b50      	cmp	r3, #80	; 0x50
 8012146:	d03c      	beq.n	80121c2 <HAL_TIM_ConfigClockSource+0x14a>
 8012148:	2b50      	cmp	r3, #80	; 0x50
 801214a:	d873      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 801214c:	2b40      	cmp	r3, #64	; 0x40
 801214e:	d058      	beq.n	8012202 <HAL_TIM_ConfigClockSource+0x18a>
 8012150:	2b40      	cmp	r3, #64	; 0x40
 8012152:	d86f      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012154:	2b30      	cmp	r3, #48	; 0x30
 8012156:	d064      	beq.n	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 8012158:	2b30      	cmp	r3, #48	; 0x30
 801215a:	d86b      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 801215c:	2b20      	cmp	r3, #32
 801215e:	d060      	beq.n	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 8012160:	2b20      	cmp	r3, #32
 8012162:	d867      	bhi.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
 8012164:	2b00      	cmp	r3, #0
 8012166:	d05c      	beq.n	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 8012168:	2b10      	cmp	r3, #16
 801216a:	d05a      	beq.n	8012222 <HAL_TIM_ConfigClockSource+0x1aa>
 801216c:	e062      	b.n	8012234 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801217e:	f000 fc61 	bl	8012a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	609a      	str	r2, [r3, #8]
      break;
 801219a:	e04f      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80121ac:	f000 fc4a 	bl	8012a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	689a      	ldr	r2, [r3, #8]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80121be:	609a      	str	r2, [r3, #8]
      break;
 80121c0:	e03c      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80121ce:	461a      	mov	r2, r3
 80121d0:	f000 fbba 	bl	8012948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2150      	movs	r1, #80	; 0x50
 80121da:	4618      	mov	r0, r3
 80121dc:	f000 fc14 	bl	8012a08 <TIM_ITRx_SetConfig>
      break;
 80121e0:	e02c      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80121ee:	461a      	mov	r2, r3
 80121f0:	f000 fbd9 	bl	80129a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2160      	movs	r1, #96	; 0x60
 80121fa:	4618      	mov	r0, r3
 80121fc:	f000 fc04 	bl	8012a08 <TIM_ITRx_SetConfig>
      break;
 8012200:	e01c      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801220e:	461a      	mov	r2, r3
 8012210:	f000 fb9a 	bl	8012948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2140      	movs	r1, #64	; 0x40
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fbf4 	bl	8012a08 <TIM_ITRx_SetConfig>
      break;
 8012220:	e00c      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	4619      	mov	r1, r3
 801222c:	4610      	mov	r0, r2
 801222e:	f000 fbeb 	bl	8012a08 <TIM_ITRx_SetConfig>
      break;
 8012232:	e003      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012234:	2301      	movs	r3, #1
 8012236:	73fb      	strb	r3, [r7, #15]
      break;
 8012238:	e000      	b.n	801223c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801223a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801224c:	7bfb      	ldrb	r3, [r7, #15]
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	ffceff88 	.word	0xffceff88
 801225c:	00100040 	.word	0x00100040
 8012260:	00100030 	.word	0x00100030
 8012264:	00100020 	.word	0x00100020

08012268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012268:	b480      	push	{r7}
 801226a:	b085      	sub	sp, #20
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	4a40      	ldr	r2, [pc, #256]	; (801237c <TIM_Base_SetConfig+0x114>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d013      	beq.n	80122a8 <TIM_Base_SetConfig+0x40>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012286:	d00f      	beq.n	80122a8 <TIM_Base_SetConfig+0x40>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	4a3d      	ldr	r2, [pc, #244]	; (8012380 <TIM_Base_SetConfig+0x118>)
 801228c:	4293      	cmp	r3, r2
 801228e:	d00b      	beq.n	80122a8 <TIM_Base_SetConfig+0x40>
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	4a3c      	ldr	r2, [pc, #240]	; (8012384 <TIM_Base_SetConfig+0x11c>)
 8012294:	4293      	cmp	r3, r2
 8012296:	d007      	beq.n	80122a8 <TIM_Base_SetConfig+0x40>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4a3b      	ldr	r2, [pc, #236]	; (8012388 <TIM_Base_SetConfig+0x120>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d003      	beq.n	80122a8 <TIM_Base_SetConfig+0x40>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4a3a      	ldr	r2, [pc, #232]	; (801238c <TIM_Base_SetConfig+0x124>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d108      	bne.n	80122ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	4313      	orrs	r3, r2
 80122b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4a2f      	ldr	r2, [pc, #188]	; (801237c <TIM_Base_SetConfig+0x114>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d01f      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122c8:	d01b      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	4a2c      	ldr	r2, [pc, #176]	; (8012380 <TIM_Base_SetConfig+0x118>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d017      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	4a2b      	ldr	r2, [pc, #172]	; (8012384 <TIM_Base_SetConfig+0x11c>)
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d013      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4a2a      	ldr	r2, [pc, #168]	; (8012388 <TIM_Base_SetConfig+0x120>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d00f      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4a29      	ldr	r2, [pc, #164]	; (801238c <TIM_Base_SetConfig+0x124>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d00b      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	4a28      	ldr	r2, [pc, #160]	; (8012390 <TIM_Base_SetConfig+0x128>)
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d007      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4a27      	ldr	r2, [pc, #156]	; (8012394 <TIM_Base_SetConfig+0x12c>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d003      	beq.n	8012302 <TIM_Base_SetConfig+0x9a>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4a26      	ldr	r2, [pc, #152]	; (8012398 <TIM_Base_SetConfig+0x130>)
 80122fe:	4293      	cmp	r3, r2
 8012300:	d108      	bne.n	8012314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	68fa      	ldr	r2, [r7, #12]
 8012310:	4313      	orrs	r3, r2
 8012312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	695b      	ldr	r3, [r3, #20]
 801231e:	4313      	orrs	r3, r2
 8012320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	689a      	ldr	r2, [r3, #8]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	4a10      	ldr	r2, [pc, #64]	; (801237c <TIM_Base_SetConfig+0x114>)
 801233c:	4293      	cmp	r3, r2
 801233e:	d00f      	beq.n	8012360 <TIM_Base_SetConfig+0xf8>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	4a12      	ldr	r2, [pc, #72]	; (801238c <TIM_Base_SetConfig+0x124>)
 8012344:	4293      	cmp	r3, r2
 8012346:	d00b      	beq.n	8012360 <TIM_Base_SetConfig+0xf8>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4a11      	ldr	r2, [pc, #68]	; (8012390 <TIM_Base_SetConfig+0x128>)
 801234c:	4293      	cmp	r3, r2
 801234e:	d007      	beq.n	8012360 <TIM_Base_SetConfig+0xf8>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	4a10      	ldr	r2, [pc, #64]	; (8012394 <TIM_Base_SetConfig+0x12c>)
 8012354:	4293      	cmp	r3, r2
 8012356:	d003      	beq.n	8012360 <TIM_Base_SetConfig+0xf8>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	4a0f      	ldr	r2, [pc, #60]	; (8012398 <TIM_Base_SetConfig+0x130>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d103      	bne.n	8012368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	691a      	ldr	r2, [r3, #16]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2201      	movs	r2, #1
 801236c:	615a      	str	r2, [r3, #20]
}
 801236e:	bf00      	nop
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	40010000 	.word	0x40010000
 8012380:	40000400 	.word	0x40000400
 8012384:	40000800 	.word	0x40000800
 8012388:	40000c00 	.word	0x40000c00
 801238c:	40010400 	.word	0x40010400
 8012390:	40014000 	.word	0x40014000
 8012394:	40014400 	.word	0x40014400
 8012398:	40014800 	.word	0x40014800

0801239c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801239c:	b480      	push	{r7}
 801239e:	b087      	sub	sp, #28
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a1b      	ldr	r3, [r3, #32]
 80123aa:	f023 0201 	bic.w	r2, r3, #1
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6a1b      	ldr	r3, [r3, #32]
 80123b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	699b      	ldr	r3, [r3, #24]
 80123c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	4b37      	ldr	r3, [pc, #220]	; (80124a4 <TIM_OC1_SetConfig+0x108>)
 80123c8:	4013      	ands	r3, r2
 80123ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f023 0303 	bic.w	r3, r3, #3
 80123d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	4313      	orrs	r3, r2
 80123dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	f023 0302 	bic.w	r3, r3, #2
 80123e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	689b      	ldr	r3, [r3, #8]
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	4313      	orrs	r3, r2
 80123ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4a2d      	ldr	r2, [pc, #180]	; (80124a8 <TIM_OC1_SetConfig+0x10c>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d00f      	beq.n	8012418 <TIM_OC1_SetConfig+0x7c>
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	4a2c      	ldr	r2, [pc, #176]	; (80124ac <TIM_OC1_SetConfig+0x110>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d00b      	beq.n	8012418 <TIM_OC1_SetConfig+0x7c>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	4a2b      	ldr	r2, [pc, #172]	; (80124b0 <TIM_OC1_SetConfig+0x114>)
 8012404:	4293      	cmp	r3, r2
 8012406:	d007      	beq.n	8012418 <TIM_OC1_SetConfig+0x7c>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4a2a      	ldr	r2, [pc, #168]	; (80124b4 <TIM_OC1_SetConfig+0x118>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d003      	beq.n	8012418 <TIM_OC1_SetConfig+0x7c>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	4a29      	ldr	r2, [pc, #164]	; (80124b8 <TIM_OC1_SetConfig+0x11c>)
 8012414:	4293      	cmp	r3, r2
 8012416:	d10c      	bne.n	8012432 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	f023 0308 	bic.w	r3, r3, #8
 801241e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	697a      	ldr	r2, [r7, #20]
 8012426:	4313      	orrs	r3, r2
 8012428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	f023 0304 	bic.w	r3, r3, #4
 8012430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4a1c      	ldr	r2, [pc, #112]	; (80124a8 <TIM_OC1_SetConfig+0x10c>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d00f      	beq.n	801245a <TIM_OC1_SetConfig+0xbe>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4a1b      	ldr	r2, [pc, #108]	; (80124ac <TIM_OC1_SetConfig+0x110>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d00b      	beq.n	801245a <TIM_OC1_SetConfig+0xbe>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a1a      	ldr	r2, [pc, #104]	; (80124b0 <TIM_OC1_SetConfig+0x114>)
 8012446:	4293      	cmp	r3, r2
 8012448:	d007      	beq.n	801245a <TIM_OC1_SetConfig+0xbe>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4a19      	ldr	r2, [pc, #100]	; (80124b4 <TIM_OC1_SetConfig+0x118>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d003      	beq.n	801245a <TIM_OC1_SetConfig+0xbe>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4a18      	ldr	r2, [pc, #96]	; (80124b8 <TIM_OC1_SetConfig+0x11c>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d111      	bne.n	801247e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	695b      	ldr	r3, [r3, #20]
 801246e:	693a      	ldr	r2, [r7, #16]
 8012470:	4313      	orrs	r3, r2
 8012472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	699b      	ldr	r3, [r3, #24]
 8012478:	693a      	ldr	r2, [r7, #16]
 801247a:	4313      	orrs	r3, r2
 801247c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	693a      	ldr	r2, [r7, #16]
 8012482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	697a      	ldr	r2, [r7, #20]
 8012496:	621a      	str	r2, [r3, #32]
}
 8012498:	bf00      	nop
 801249a:	371c      	adds	r7, #28
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	fffeff8f 	.word	0xfffeff8f
 80124a8:	40010000 	.word	0x40010000
 80124ac:	40010400 	.word	0x40010400
 80124b0:	40014000 	.word	0x40014000
 80124b4:	40014400 	.word	0x40014400
 80124b8:	40014800 	.word	0x40014800

080124bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80124bc:	b480      	push	{r7}
 80124be:	b087      	sub	sp, #28
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a1b      	ldr	r3, [r3, #32]
 80124ca:	f023 0210 	bic.w	r2, r3, #16
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	699b      	ldr	r3, [r3, #24]
 80124e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80124e4:	68fa      	ldr	r2, [r7, #12]
 80124e6:	4b34      	ldr	r3, [pc, #208]	; (80125b8 <TIM_OC2_SetConfig+0xfc>)
 80124e8:	4013      	ands	r3, r2
 80124ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	021b      	lsls	r3, r3, #8
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	4313      	orrs	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	f023 0320 	bic.w	r3, r3, #32
 8012506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	689b      	ldr	r3, [r3, #8]
 801250c:	011b      	lsls	r3, r3, #4
 801250e:	697a      	ldr	r2, [r7, #20]
 8012510:	4313      	orrs	r3, r2
 8012512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	4a29      	ldr	r2, [pc, #164]	; (80125bc <TIM_OC2_SetConfig+0x100>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d003      	beq.n	8012524 <TIM_OC2_SetConfig+0x68>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a28      	ldr	r2, [pc, #160]	; (80125c0 <TIM_OC2_SetConfig+0x104>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d10d      	bne.n	8012540 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801252a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	011b      	lsls	r3, r3, #4
 8012532:	697a      	ldr	r2, [r7, #20]
 8012534:	4313      	orrs	r3, r2
 8012536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801253e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a1e      	ldr	r2, [pc, #120]	; (80125bc <TIM_OC2_SetConfig+0x100>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d00f      	beq.n	8012568 <TIM_OC2_SetConfig+0xac>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a1d      	ldr	r2, [pc, #116]	; (80125c0 <TIM_OC2_SetConfig+0x104>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d00b      	beq.n	8012568 <TIM_OC2_SetConfig+0xac>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4a1c      	ldr	r2, [pc, #112]	; (80125c4 <TIM_OC2_SetConfig+0x108>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d007      	beq.n	8012568 <TIM_OC2_SetConfig+0xac>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a1b      	ldr	r2, [pc, #108]	; (80125c8 <TIM_OC2_SetConfig+0x10c>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d003      	beq.n	8012568 <TIM_OC2_SetConfig+0xac>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a1a      	ldr	r2, [pc, #104]	; (80125cc <TIM_OC2_SetConfig+0x110>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d113      	bne.n	8012590 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801256e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	695b      	ldr	r3, [r3, #20]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	4313      	orrs	r3, r2
 8012582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	699b      	ldr	r3, [r3, #24]
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	693a      	ldr	r2, [r7, #16]
 801258c:	4313      	orrs	r3, r2
 801258e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	685a      	ldr	r2, [r3, #4]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	621a      	str	r2, [r3, #32]
}
 80125aa:	bf00      	nop
 80125ac:	371c      	adds	r7, #28
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	feff8fff 	.word	0xfeff8fff
 80125bc:	40010000 	.word	0x40010000
 80125c0:	40010400 	.word	0x40010400
 80125c4:	40014000 	.word	0x40014000
 80125c8:	40014400 	.word	0x40014400
 80125cc:	40014800 	.word	0x40014800

080125d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80125d0:	b480      	push	{r7}
 80125d2:	b087      	sub	sp, #28
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6a1b      	ldr	r3, [r3, #32]
 80125de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	69db      	ldr	r3, [r3, #28]
 80125f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	4b33      	ldr	r3, [pc, #204]	; (80126c8 <TIM_OC3_SetConfig+0xf8>)
 80125fc:	4013      	ands	r3, r2
 80125fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f023 0303 	bic.w	r3, r3, #3
 8012606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	4313      	orrs	r3, r2
 8012610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	021b      	lsls	r3, r3, #8
 8012620:	697a      	ldr	r2, [r7, #20]
 8012622:	4313      	orrs	r3, r2
 8012624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	4a28      	ldr	r2, [pc, #160]	; (80126cc <TIM_OC3_SetConfig+0xfc>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d003      	beq.n	8012636 <TIM_OC3_SetConfig+0x66>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4a27      	ldr	r2, [pc, #156]	; (80126d0 <TIM_OC3_SetConfig+0x100>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d10d      	bne.n	8012652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801263c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	021b      	lsls	r3, r3, #8
 8012644:	697a      	ldr	r2, [r7, #20]
 8012646:	4313      	orrs	r3, r2
 8012648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4a1d      	ldr	r2, [pc, #116]	; (80126cc <TIM_OC3_SetConfig+0xfc>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d00f      	beq.n	801267a <TIM_OC3_SetConfig+0xaa>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4a1c      	ldr	r2, [pc, #112]	; (80126d0 <TIM_OC3_SetConfig+0x100>)
 801265e:	4293      	cmp	r3, r2
 8012660:	d00b      	beq.n	801267a <TIM_OC3_SetConfig+0xaa>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4a1b      	ldr	r2, [pc, #108]	; (80126d4 <TIM_OC3_SetConfig+0x104>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d007      	beq.n	801267a <TIM_OC3_SetConfig+0xaa>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4a1a      	ldr	r2, [pc, #104]	; (80126d8 <TIM_OC3_SetConfig+0x108>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d003      	beq.n	801267a <TIM_OC3_SetConfig+0xaa>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4a19      	ldr	r2, [pc, #100]	; (80126dc <TIM_OC3_SetConfig+0x10c>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d113      	bne.n	80126a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	695b      	ldr	r3, [r3, #20]
 801268e:	011b      	lsls	r3, r3, #4
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	4313      	orrs	r3, r2
 8012694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	699b      	ldr	r3, [r3, #24]
 801269a:	011b      	lsls	r3, r3, #4
 801269c:	693a      	ldr	r2, [r7, #16]
 801269e:	4313      	orrs	r3, r2
 80126a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	693a      	ldr	r2, [r7, #16]
 80126a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	685a      	ldr	r2, [r3, #4]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	697a      	ldr	r2, [r7, #20]
 80126ba:	621a      	str	r2, [r3, #32]
}
 80126bc:	bf00      	nop
 80126be:	371c      	adds	r7, #28
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr
 80126c8:	fffeff8f 	.word	0xfffeff8f
 80126cc:	40010000 	.word	0x40010000
 80126d0:	40010400 	.word	0x40010400
 80126d4:	40014000 	.word	0x40014000
 80126d8:	40014400 	.word	0x40014400
 80126dc:	40014800 	.word	0x40014800

080126e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b087      	sub	sp, #28
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a1b      	ldr	r3, [r3, #32]
 80126fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	69db      	ldr	r3, [r3, #28]
 8012706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	4b24      	ldr	r3, [pc, #144]	; (801279c <TIM_OC4_SetConfig+0xbc>)
 801270c:	4013      	ands	r3, r2
 801270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	021b      	lsls	r3, r3, #8
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	4313      	orrs	r3, r2
 8012722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801272a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	689b      	ldr	r3, [r3, #8]
 8012730:	031b      	lsls	r3, r3, #12
 8012732:	693a      	ldr	r2, [r7, #16]
 8012734:	4313      	orrs	r3, r2
 8012736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a19      	ldr	r2, [pc, #100]	; (80127a0 <TIM_OC4_SetConfig+0xc0>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d00f      	beq.n	8012760 <TIM_OC4_SetConfig+0x80>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a18      	ldr	r2, [pc, #96]	; (80127a4 <TIM_OC4_SetConfig+0xc4>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d00b      	beq.n	8012760 <TIM_OC4_SetConfig+0x80>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a17      	ldr	r2, [pc, #92]	; (80127a8 <TIM_OC4_SetConfig+0xc8>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d007      	beq.n	8012760 <TIM_OC4_SetConfig+0x80>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a16      	ldr	r2, [pc, #88]	; (80127ac <TIM_OC4_SetConfig+0xcc>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d003      	beq.n	8012760 <TIM_OC4_SetConfig+0x80>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a15      	ldr	r2, [pc, #84]	; (80127b0 <TIM_OC4_SetConfig+0xd0>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d109      	bne.n	8012774 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	695b      	ldr	r3, [r3, #20]
 801276c:	019b      	lsls	r3, r3, #6
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	4313      	orrs	r3, r2
 8012772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	685a      	ldr	r2, [r3, #4]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	693a      	ldr	r2, [r7, #16]
 801278c:	621a      	str	r2, [r3, #32]
}
 801278e:	bf00      	nop
 8012790:	371c      	adds	r7, #28
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	feff8fff 	.word	0xfeff8fff
 80127a0:	40010000 	.word	0x40010000
 80127a4:	40010400 	.word	0x40010400
 80127a8:	40014000 	.word	0x40014000
 80127ac:	40014400 	.word	0x40014400
 80127b0:	40014800 	.word	0x40014800

080127b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b087      	sub	sp, #28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a1b      	ldr	r3, [r3, #32]
 80127c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6a1b      	ldr	r3, [r3, #32]
 80127ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80127dc:	68fa      	ldr	r2, [r7, #12]
 80127de:	4b21      	ldr	r3, [pc, #132]	; (8012864 <TIM_OC5_SetConfig+0xb0>)
 80127e0:	4013      	ands	r3, r2
 80127e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	4313      	orrs	r3, r2
 80127ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80127f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	041b      	lsls	r3, r3, #16
 80127fc:	693a      	ldr	r2, [r7, #16]
 80127fe:	4313      	orrs	r3, r2
 8012800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4a18      	ldr	r2, [pc, #96]	; (8012868 <TIM_OC5_SetConfig+0xb4>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d00f      	beq.n	801282a <TIM_OC5_SetConfig+0x76>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4a17      	ldr	r2, [pc, #92]	; (801286c <TIM_OC5_SetConfig+0xb8>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d00b      	beq.n	801282a <TIM_OC5_SetConfig+0x76>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4a16      	ldr	r2, [pc, #88]	; (8012870 <TIM_OC5_SetConfig+0xbc>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d007      	beq.n	801282a <TIM_OC5_SetConfig+0x76>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4a15      	ldr	r2, [pc, #84]	; (8012874 <TIM_OC5_SetConfig+0xc0>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d003      	beq.n	801282a <TIM_OC5_SetConfig+0x76>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4a14      	ldr	r2, [pc, #80]	; (8012878 <TIM_OC5_SetConfig+0xc4>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d109      	bne.n	801283e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012830:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	695b      	ldr	r3, [r3, #20]
 8012836:	021b      	lsls	r3, r3, #8
 8012838:	697a      	ldr	r2, [r7, #20]
 801283a:	4313      	orrs	r3, r2
 801283c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	697a      	ldr	r2, [r7, #20]
 8012842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	685a      	ldr	r2, [r3, #4]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	693a      	ldr	r2, [r7, #16]
 8012856:	621a      	str	r2, [r3, #32]
}
 8012858:	bf00      	nop
 801285a:	371c      	adds	r7, #28
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr
 8012864:	fffeff8f 	.word	0xfffeff8f
 8012868:	40010000 	.word	0x40010000
 801286c:	40010400 	.word	0x40010400
 8012870:	40014000 	.word	0x40014000
 8012874:	40014400 	.word	0x40014400
 8012878:	40014800 	.word	0x40014800

0801287c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801287c:	b480      	push	{r7}
 801287e:	b087      	sub	sp, #28
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6a1b      	ldr	r3, [r3, #32]
 801288a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6a1b      	ldr	r3, [r3, #32]
 8012896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	4b22      	ldr	r3, [pc, #136]	; (8012930 <TIM_OC6_SetConfig+0xb4>)
 80128a8:	4013      	ands	r3, r2
 80128aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	021b      	lsls	r3, r3, #8
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	4313      	orrs	r3, r2
 80128b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80128be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	689b      	ldr	r3, [r3, #8]
 80128c4:	051b      	lsls	r3, r3, #20
 80128c6:	693a      	ldr	r2, [r7, #16]
 80128c8:	4313      	orrs	r3, r2
 80128ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4a19      	ldr	r2, [pc, #100]	; (8012934 <TIM_OC6_SetConfig+0xb8>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d00f      	beq.n	80128f4 <TIM_OC6_SetConfig+0x78>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4a18      	ldr	r2, [pc, #96]	; (8012938 <TIM_OC6_SetConfig+0xbc>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d00b      	beq.n	80128f4 <TIM_OC6_SetConfig+0x78>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4a17      	ldr	r2, [pc, #92]	; (801293c <TIM_OC6_SetConfig+0xc0>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d007      	beq.n	80128f4 <TIM_OC6_SetConfig+0x78>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4a16      	ldr	r2, [pc, #88]	; (8012940 <TIM_OC6_SetConfig+0xc4>)
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d003      	beq.n	80128f4 <TIM_OC6_SetConfig+0x78>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4a15      	ldr	r2, [pc, #84]	; (8012944 <TIM_OC6_SetConfig+0xc8>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d109      	bne.n	8012908 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80128fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	695b      	ldr	r3, [r3, #20]
 8012900:	029b      	lsls	r3, r3, #10
 8012902:	697a      	ldr	r2, [r7, #20]
 8012904:	4313      	orrs	r3, r2
 8012906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	697a      	ldr	r2, [r7, #20]
 801290c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	68fa      	ldr	r2, [r7, #12]
 8012912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	685a      	ldr	r2, [r3, #4]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	693a      	ldr	r2, [r7, #16]
 8012920:	621a      	str	r2, [r3, #32]
}
 8012922:	bf00      	nop
 8012924:	371c      	adds	r7, #28
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop
 8012930:	feff8fff 	.word	0xfeff8fff
 8012934:	40010000 	.word	0x40010000
 8012938:	40010400 	.word	0x40010400
 801293c:	40014000 	.word	0x40014000
 8012940:	40014400 	.word	0x40014400
 8012944:	40014800 	.word	0x40014800

08012948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012948:	b480      	push	{r7}
 801294a:	b087      	sub	sp, #28
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6a1b      	ldr	r3, [r3, #32]
 8012958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	6a1b      	ldr	r3, [r3, #32]
 801295e:	f023 0201 	bic.w	r2, r3, #1
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	699b      	ldr	r3, [r3, #24]
 801296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	011b      	lsls	r3, r3, #4
 8012978:	693a      	ldr	r2, [r7, #16]
 801297a:	4313      	orrs	r3, r2
 801297c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	f023 030a 	bic.w	r3, r3, #10
 8012984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012986:	697a      	ldr	r2, [r7, #20]
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	4313      	orrs	r3, r2
 801298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	693a      	ldr	r2, [r7, #16]
 8012992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	697a      	ldr	r2, [r7, #20]
 8012998:	621a      	str	r2, [r3, #32]
}
 801299a:	bf00      	nop
 801299c:	371c      	adds	r7, #28
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b087      	sub	sp, #28
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	60f8      	str	r0, [r7, #12]
 80129ae:	60b9      	str	r1, [r7, #8]
 80129b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	f023 0210 	bic.w	r2, r3, #16
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	699b      	ldr	r3, [r3, #24]
 80129c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	6a1b      	ldr	r3, [r3, #32]
 80129c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80129d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	031b      	lsls	r3, r3, #12
 80129d6:	697a      	ldr	r2, [r7, #20]
 80129d8:	4313      	orrs	r3, r2
 80129da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80129e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	011b      	lsls	r3, r3, #4
 80129e8:	693a      	ldr	r2, [r7, #16]
 80129ea:	4313      	orrs	r3, r2
 80129ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	693a      	ldr	r2, [r7, #16]
 80129f8:	621a      	str	r2, [r3, #32]
}
 80129fa:	bf00      	nop
 80129fc:	371c      	adds	r7, #28
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr
	...

08012a08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	689b      	ldr	r3, [r3, #8]
 8012a16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	4b09      	ldr	r3, [pc, #36]	; (8012a40 <TIM_ITRx_SetConfig+0x38>)
 8012a1c:	4013      	ands	r3, r2
 8012a1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	f043 0307 	orr.w	r3, r3, #7
 8012a2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	609a      	str	r2, [r3, #8]
}
 8012a32:	bf00      	nop
 8012a34:	3714      	adds	r7, #20
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	ffcfff8f 	.word	0xffcfff8f

08012a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b087      	sub	sp, #28
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
 8012a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	689b      	ldr	r3, [r3, #8]
 8012a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	021a      	lsls	r2, r3, #8
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	431a      	orrs	r2, r3
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	697a      	ldr	r2, [r7, #20]
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	697a      	ldr	r2, [r7, #20]
 8012a76:	609a      	str	r2, [r3, #8]
}
 8012a78:	bf00      	nop
 8012a7a:	371c      	adds	r7, #28
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b085      	sub	sp, #20
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d101      	bne.n	8012a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012a98:	2302      	movs	r3, #2
 8012a9a:	e06d      	b.n	8012b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2202      	movs	r2, #2
 8012aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a30      	ldr	r2, [pc, #192]	; (8012b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d004      	beq.n	8012ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	4a2f      	ldr	r2, [pc, #188]	; (8012b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d108      	bne.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	4313      	orrs	r3, r2
 8012af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a20      	ldr	r2, [pc, #128]	; (8012b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d022      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b0e:	d01d      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a1d      	ldr	r2, [pc, #116]	; (8012b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d018      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a1c      	ldr	r2, [pc, #112]	; (8012b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d013      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a1a      	ldr	r2, [pc, #104]	; (8012b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d00e      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a15      	ldr	r2, [pc, #84]	; (8012b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d009      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a16      	ldr	r2, [pc, #88]	; (8012b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d004      	beq.n	8012b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a15      	ldr	r2, [pc, #84]	; (8012b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d10c      	bne.n	8012b66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	68ba      	ldr	r2, [r7, #8]
 8012b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012b76:	2300      	movs	r3, #0
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr
 8012b84:	40010000 	.word	0x40010000
 8012b88:	40010400 	.word	0x40010400
 8012b8c:	40000400 	.word	0x40000400
 8012b90:	40000800 	.word	0x40000800
 8012b94:	40000c00 	.word	0x40000c00
 8012b98:	40001800 	.word	0x40001800
 8012b9c:	40014000 	.word	0x40014000

08012ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012baa:	2300      	movs	r3, #0
 8012bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d101      	bne.n	8012bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012bb8:	2302      	movs	r3, #2
 8012bba:	e065      	b.n	8012c88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	4313      	orrs	r3, r2
 8012bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	4313      	orrs	r3, r2
 8012c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	695b      	ldr	r3, [r3, #20]
 8012c14:	4313      	orrs	r3, r2
 8012c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c22:	4313      	orrs	r3, r2
 8012c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	699b      	ldr	r3, [r3, #24]
 8012c30:	041b      	lsls	r3, r3, #16
 8012c32:	4313      	orrs	r3, r2
 8012c34:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a16      	ldr	r2, [pc, #88]	; (8012c94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d004      	beq.n	8012c4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a14      	ldr	r2, [pc, #80]	; (8012c98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d115      	bne.n	8012c76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c54:	051b      	lsls	r3, r3, #20
 8012c56:	4313      	orrs	r3, r2
 8012c58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	69db      	ldr	r3, [r3, #28]
 8012c64:	4313      	orrs	r3, r2
 8012c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	4313      	orrs	r3, r2
 8012c74:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2200      	movs	r2, #0
 8012c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3714      	adds	r7, #20
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr
 8012c94:	40010000 	.word	0x40010000
 8012c98:	40010400 	.word	0x40010400

08012c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d101      	bne.n	8012cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012caa:	2301      	movs	r3, #1
 8012cac:	e042      	b.n	8012d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d106      	bne.n	8012cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f1 fb93 	bl	80043ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2224      	movs	r2, #36	; 0x24
 8012cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f022 0201 	bic.w	r2, r2, #1
 8012cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 f82c 	bl	8012d3c <UART_SetConfig>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d101      	bne.n	8012cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012cea:	2301      	movs	r3, #1
 8012cec:	e022      	b.n	8012d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d002      	beq.n	8012cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f000 fd88 	bl	801380c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	685a      	ldr	r2, [r3, #4]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	689a      	ldr	r2, [r3, #8]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f042 0201 	orr.w	r2, r2, #1
 8012d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 fe0f 	bl	8013950 <UART_CheckIdleState>
 8012d32:	4603      	mov	r3, r0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d40:	b092      	sub	sp, #72	; 0x48
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d46:	2300      	movs	r3, #0
 8012d48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	689a      	ldr	r2, [r3, #8]
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	691b      	ldr	r3, [r3, #16]
 8012d54:	431a      	orrs	r2, r3
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	695b      	ldr	r3, [r3, #20]
 8012d5a:	431a      	orrs	r2, r3
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	69db      	ldr	r3, [r3, #28]
 8012d60:	4313      	orrs	r3, r2
 8012d62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	4bbe      	ldr	r3, [pc, #760]	; (8013064 <UART_SetConfig+0x328>)
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	697a      	ldr	r2, [r7, #20]
 8012d70:	6812      	ldr	r2, [r2, #0]
 8012d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d74:	430b      	orrs	r3, r1
 8012d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	68da      	ldr	r2, [r3, #12]
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	430a      	orrs	r2, r1
 8012d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	699b      	ldr	r3, [r3, #24]
 8012d92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4ab3      	ldr	r2, [pc, #716]	; (8013068 <UART_SetConfig+0x32c>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d004      	beq.n	8012da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	6a1b      	ldr	r3, [r3, #32]
 8012da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012da4:	4313      	orrs	r3, r2
 8012da6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	689a      	ldr	r2, [r3, #8]
 8012dae:	4baf      	ldr	r3, [pc, #700]	; (801306c <UART_SetConfig+0x330>)
 8012db0:	4013      	ands	r3, r2
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	6812      	ldr	r2, [r2, #0]
 8012db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012db8:	430b      	orrs	r3, r1
 8012dba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc2:	f023 010f 	bic.w	r1, r3, #15
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	430a      	orrs	r2, r1
 8012dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	4aa6      	ldr	r2, [pc, #664]	; (8013070 <UART_SetConfig+0x334>)
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	d177      	bne.n	8012ecc <UART_SetConfig+0x190>
 8012ddc:	4ba5      	ldr	r3, [pc, #660]	; (8013074 <UART_SetConfig+0x338>)
 8012dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012de4:	2b28      	cmp	r3, #40	; 0x28
 8012de6:	d86d      	bhi.n	8012ec4 <UART_SetConfig+0x188>
 8012de8:	a201      	add	r2, pc, #4	; (adr r2, 8012df0 <UART_SetConfig+0xb4>)
 8012dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dee:	bf00      	nop
 8012df0:	08012e95 	.word	0x08012e95
 8012df4:	08012ec5 	.word	0x08012ec5
 8012df8:	08012ec5 	.word	0x08012ec5
 8012dfc:	08012ec5 	.word	0x08012ec5
 8012e00:	08012ec5 	.word	0x08012ec5
 8012e04:	08012ec5 	.word	0x08012ec5
 8012e08:	08012ec5 	.word	0x08012ec5
 8012e0c:	08012ec5 	.word	0x08012ec5
 8012e10:	08012e9d 	.word	0x08012e9d
 8012e14:	08012ec5 	.word	0x08012ec5
 8012e18:	08012ec5 	.word	0x08012ec5
 8012e1c:	08012ec5 	.word	0x08012ec5
 8012e20:	08012ec5 	.word	0x08012ec5
 8012e24:	08012ec5 	.word	0x08012ec5
 8012e28:	08012ec5 	.word	0x08012ec5
 8012e2c:	08012ec5 	.word	0x08012ec5
 8012e30:	08012ea5 	.word	0x08012ea5
 8012e34:	08012ec5 	.word	0x08012ec5
 8012e38:	08012ec5 	.word	0x08012ec5
 8012e3c:	08012ec5 	.word	0x08012ec5
 8012e40:	08012ec5 	.word	0x08012ec5
 8012e44:	08012ec5 	.word	0x08012ec5
 8012e48:	08012ec5 	.word	0x08012ec5
 8012e4c:	08012ec5 	.word	0x08012ec5
 8012e50:	08012ead 	.word	0x08012ead
 8012e54:	08012ec5 	.word	0x08012ec5
 8012e58:	08012ec5 	.word	0x08012ec5
 8012e5c:	08012ec5 	.word	0x08012ec5
 8012e60:	08012ec5 	.word	0x08012ec5
 8012e64:	08012ec5 	.word	0x08012ec5
 8012e68:	08012ec5 	.word	0x08012ec5
 8012e6c:	08012ec5 	.word	0x08012ec5
 8012e70:	08012eb5 	.word	0x08012eb5
 8012e74:	08012ec5 	.word	0x08012ec5
 8012e78:	08012ec5 	.word	0x08012ec5
 8012e7c:	08012ec5 	.word	0x08012ec5
 8012e80:	08012ec5 	.word	0x08012ec5
 8012e84:	08012ec5 	.word	0x08012ec5
 8012e88:	08012ec5 	.word	0x08012ec5
 8012e8c:	08012ec5 	.word	0x08012ec5
 8012e90:	08012ebd 	.word	0x08012ebd
 8012e94:	2301      	movs	r3, #1
 8012e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e9a:	e222      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012e9c:	2304      	movs	r3, #4
 8012e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ea2:	e21e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ea4:	2308      	movs	r3, #8
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eaa:	e21a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012eac:	2310      	movs	r3, #16
 8012eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb2:	e216      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012eb4:	2320      	movs	r3, #32
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eba:	e212      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ebc:	2340      	movs	r3, #64	; 0x40
 8012ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ec2:	e20e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ec4:	2380      	movs	r3, #128	; 0x80
 8012ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eca:	e20a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a69      	ldr	r2, [pc, #420]	; (8013078 <UART_SetConfig+0x33c>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d130      	bne.n	8012f38 <UART_SetConfig+0x1fc>
 8012ed6:	4b67      	ldr	r3, [pc, #412]	; (8013074 <UART_SetConfig+0x338>)
 8012ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eda:	f003 0307 	and.w	r3, r3, #7
 8012ede:	2b05      	cmp	r3, #5
 8012ee0:	d826      	bhi.n	8012f30 <UART_SetConfig+0x1f4>
 8012ee2:	a201      	add	r2, pc, #4	; (adr r2, 8012ee8 <UART_SetConfig+0x1ac>)
 8012ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ee8:	08012f01 	.word	0x08012f01
 8012eec:	08012f09 	.word	0x08012f09
 8012ef0:	08012f11 	.word	0x08012f11
 8012ef4:	08012f19 	.word	0x08012f19
 8012ef8:	08012f21 	.word	0x08012f21
 8012efc:	08012f29 	.word	0x08012f29
 8012f00:	2300      	movs	r3, #0
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f06:	e1ec      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f08:	2304      	movs	r3, #4
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0e:	e1e8      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f10:	2308      	movs	r3, #8
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f16:	e1e4      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f18:	2310      	movs	r3, #16
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1e:	e1e0      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f20:	2320      	movs	r3, #32
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f26:	e1dc      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f28:	2340      	movs	r3, #64	; 0x40
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f2e:	e1d8      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f30:	2380      	movs	r3, #128	; 0x80
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f36:	e1d4      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4a4f      	ldr	r2, [pc, #316]	; (801307c <UART_SetConfig+0x340>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d130      	bne.n	8012fa4 <UART_SetConfig+0x268>
 8012f42:	4b4c      	ldr	r3, [pc, #304]	; (8013074 <UART_SetConfig+0x338>)
 8012f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f46:	f003 0307 	and.w	r3, r3, #7
 8012f4a:	2b05      	cmp	r3, #5
 8012f4c:	d826      	bhi.n	8012f9c <UART_SetConfig+0x260>
 8012f4e:	a201      	add	r2, pc, #4	; (adr r2, 8012f54 <UART_SetConfig+0x218>)
 8012f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f54:	08012f6d 	.word	0x08012f6d
 8012f58:	08012f75 	.word	0x08012f75
 8012f5c:	08012f7d 	.word	0x08012f7d
 8012f60:	08012f85 	.word	0x08012f85
 8012f64:	08012f8d 	.word	0x08012f8d
 8012f68:	08012f95 	.word	0x08012f95
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f72:	e1b6      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f74:	2304      	movs	r3, #4
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f7a:	e1b2      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f7c:	2308      	movs	r3, #8
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e1ae      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f84:	2310      	movs	r3, #16
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8a:	e1aa      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f8c:	2320      	movs	r3, #32
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f92:	e1a6      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f94:	2340      	movs	r3, #64	; 0x40
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9a:	e1a2      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012f9c:	2380      	movs	r3, #128	; 0x80
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa2:	e19e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	4a35      	ldr	r2, [pc, #212]	; (8013080 <UART_SetConfig+0x344>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d130      	bne.n	8013010 <UART_SetConfig+0x2d4>
 8012fae:	4b31      	ldr	r3, [pc, #196]	; (8013074 <UART_SetConfig+0x338>)
 8012fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fb2:	f003 0307 	and.w	r3, r3, #7
 8012fb6:	2b05      	cmp	r3, #5
 8012fb8:	d826      	bhi.n	8013008 <UART_SetConfig+0x2cc>
 8012fba:	a201      	add	r2, pc, #4	; (adr r2, 8012fc0 <UART_SetConfig+0x284>)
 8012fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc0:	08012fd9 	.word	0x08012fd9
 8012fc4:	08012fe1 	.word	0x08012fe1
 8012fc8:	08012fe9 	.word	0x08012fe9
 8012fcc:	08012ff1 	.word	0x08012ff1
 8012fd0:	08012ff9 	.word	0x08012ff9
 8012fd4:	08013001 	.word	0x08013001
 8012fd8:	2300      	movs	r3, #0
 8012fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fde:	e180      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012fe0:	2304      	movs	r3, #4
 8012fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fe6:	e17c      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012fe8:	2308      	movs	r3, #8
 8012fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fee:	e178      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ff0:	2310      	movs	r3, #16
 8012ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff6:	e174      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8012ff8:	2320      	movs	r3, #32
 8012ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ffe:	e170      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013000:	2340      	movs	r3, #64	; 0x40
 8013002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013006:	e16c      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013008:	2380      	movs	r3, #128	; 0x80
 801300a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801300e:	e168      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4a1b      	ldr	r2, [pc, #108]	; (8013084 <UART_SetConfig+0x348>)
 8013016:	4293      	cmp	r3, r2
 8013018:	d142      	bne.n	80130a0 <UART_SetConfig+0x364>
 801301a:	4b16      	ldr	r3, [pc, #88]	; (8013074 <UART_SetConfig+0x338>)
 801301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801301e:	f003 0307 	and.w	r3, r3, #7
 8013022:	2b05      	cmp	r3, #5
 8013024:	d838      	bhi.n	8013098 <UART_SetConfig+0x35c>
 8013026:	a201      	add	r2, pc, #4	; (adr r2, 801302c <UART_SetConfig+0x2f0>)
 8013028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801302c:	08013045 	.word	0x08013045
 8013030:	0801304d 	.word	0x0801304d
 8013034:	08013055 	.word	0x08013055
 8013038:	0801305d 	.word	0x0801305d
 801303c:	08013089 	.word	0x08013089
 8013040:	08013091 	.word	0x08013091
 8013044:	2300      	movs	r3, #0
 8013046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801304a:	e14a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 801304c:	2304      	movs	r3, #4
 801304e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013052:	e146      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013054:	2308      	movs	r3, #8
 8013056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801305a:	e142      	b.n	80132e2 <UART_SetConfig+0x5a6>
 801305c:	2310      	movs	r3, #16
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013062:	e13e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013064:	cfff69f3 	.word	0xcfff69f3
 8013068:	58000c00 	.word	0x58000c00
 801306c:	11fff4ff 	.word	0x11fff4ff
 8013070:	40011000 	.word	0x40011000
 8013074:	58024400 	.word	0x58024400
 8013078:	40004400 	.word	0x40004400
 801307c:	40004800 	.word	0x40004800
 8013080:	40004c00 	.word	0x40004c00
 8013084:	40005000 	.word	0x40005000
 8013088:	2320      	movs	r3, #32
 801308a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801308e:	e128      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013090:	2340      	movs	r3, #64	; 0x40
 8013092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013096:	e124      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013098:	2380      	movs	r3, #128	; 0x80
 801309a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801309e:	e120      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4acb      	ldr	r2, [pc, #812]	; (80133d4 <UART_SetConfig+0x698>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d176      	bne.n	8013198 <UART_SetConfig+0x45c>
 80130aa:	4bcb      	ldr	r3, [pc, #812]	; (80133d8 <UART_SetConfig+0x69c>)
 80130ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80130b2:	2b28      	cmp	r3, #40	; 0x28
 80130b4:	d86c      	bhi.n	8013190 <UART_SetConfig+0x454>
 80130b6:	a201      	add	r2, pc, #4	; (adr r2, 80130bc <UART_SetConfig+0x380>)
 80130b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130bc:	08013161 	.word	0x08013161
 80130c0:	08013191 	.word	0x08013191
 80130c4:	08013191 	.word	0x08013191
 80130c8:	08013191 	.word	0x08013191
 80130cc:	08013191 	.word	0x08013191
 80130d0:	08013191 	.word	0x08013191
 80130d4:	08013191 	.word	0x08013191
 80130d8:	08013191 	.word	0x08013191
 80130dc:	08013169 	.word	0x08013169
 80130e0:	08013191 	.word	0x08013191
 80130e4:	08013191 	.word	0x08013191
 80130e8:	08013191 	.word	0x08013191
 80130ec:	08013191 	.word	0x08013191
 80130f0:	08013191 	.word	0x08013191
 80130f4:	08013191 	.word	0x08013191
 80130f8:	08013191 	.word	0x08013191
 80130fc:	08013171 	.word	0x08013171
 8013100:	08013191 	.word	0x08013191
 8013104:	08013191 	.word	0x08013191
 8013108:	08013191 	.word	0x08013191
 801310c:	08013191 	.word	0x08013191
 8013110:	08013191 	.word	0x08013191
 8013114:	08013191 	.word	0x08013191
 8013118:	08013191 	.word	0x08013191
 801311c:	08013179 	.word	0x08013179
 8013120:	08013191 	.word	0x08013191
 8013124:	08013191 	.word	0x08013191
 8013128:	08013191 	.word	0x08013191
 801312c:	08013191 	.word	0x08013191
 8013130:	08013191 	.word	0x08013191
 8013134:	08013191 	.word	0x08013191
 8013138:	08013191 	.word	0x08013191
 801313c:	08013181 	.word	0x08013181
 8013140:	08013191 	.word	0x08013191
 8013144:	08013191 	.word	0x08013191
 8013148:	08013191 	.word	0x08013191
 801314c:	08013191 	.word	0x08013191
 8013150:	08013191 	.word	0x08013191
 8013154:	08013191 	.word	0x08013191
 8013158:	08013191 	.word	0x08013191
 801315c:	08013189 	.word	0x08013189
 8013160:	2301      	movs	r3, #1
 8013162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013166:	e0bc      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013168:	2304      	movs	r3, #4
 801316a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801316e:	e0b8      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013170:	2308      	movs	r3, #8
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013176:	e0b4      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013178:	2310      	movs	r3, #16
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317e:	e0b0      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013180:	2320      	movs	r3, #32
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e0ac      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013188:	2340      	movs	r3, #64	; 0x40
 801318a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318e:	e0a8      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013190:	2380      	movs	r3, #128	; 0x80
 8013192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013196:	e0a4      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4a8f      	ldr	r2, [pc, #572]	; (80133dc <UART_SetConfig+0x6a0>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d130      	bne.n	8013204 <UART_SetConfig+0x4c8>
 80131a2:	4b8d      	ldr	r3, [pc, #564]	; (80133d8 <UART_SetConfig+0x69c>)
 80131a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131a6:	f003 0307 	and.w	r3, r3, #7
 80131aa:	2b05      	cmp	r3, #5
 80131ac:	d826      	bhi.n	80131fc <UART_SetConfig+0x4c0>
 80131ae:	a201      	add	r2, pc, #4	; (adr r2, 80131b4 <UART_SetConfig+0x478>)
 80131b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b4:	080131cd 	.word	0x080131cd
 80131b8:	080131d5 	.word	0x080131d5
 80131bc:	080131dd 	.word	0x080131dd
 80131c0:	080131e5 	.word	0x080131e5
 80131c4:	080131ed 	.word	0x080131ed
 80131c8:	080131f5 	.word	0x080131f5
 80131cc:	2300      	movs	r3, #0
 80131ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131d2:	e086      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131d4:	2304      	movs	r3, #4
 80131d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131da:	e082      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131dc:	2308      	movs	r3, #8
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e2:	e07e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131e4:	2310      	movs	r3, #16
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ea:	e07a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131ec:	2320      	movs	r3, #32
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f2:	e076      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131f4:	2340      	movs	r3, #64	; 0x40
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fa:	e072      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80131fc:	2380      	movs	r3, #128	; 0x80
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013202:	e06e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4a75      	ldr	r2, [pc, #468]	; (80133e0 <UART_SetConfig+0x6a4>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d130      	bne.n	8013270 <UART_SetConfig+0x534>
 801320e:	4b72      	ldr	r3, [pc, #456]	; (80133d8 <UART_SetConfig+0x69c>)
 8013210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013212:	f003 0307 	and.w	r3, r3, #7
 8013216:	2b05      	cmp	r3, #5
 8013218:	d826      	bhi.n	8013268 <UART_SetConfig+0x52c>
 801321a:	a201      	add	r2, pc, #4	; (adr r2, 8013220 <UART_SetConfig+0x4e4>)
 801321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013220:	08013239 	.word	0x08013239
 8013224:	08013241 	.word	0x08013241
 8013228:	08013249 	.word	0x08013249
 801322c:	08013251 	.word	0x08013251
 8013230:	08013259 	.word	0x08013259
 8013234:	08013261 	.word	0x08013261
 8013238:	2300      	movs	r3, #0
 801323a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801323e:	e050      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013240:	2304      	movs	r3, #4
 8013242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013246:	e04c      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013248:	2308      	movs	r3, #8
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324e:	e048      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013250:	2310      	movs	r3, #16
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013256:	e044      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013258:	2320      	movs	r3, #32
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325e:	e040      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013260:	2340      	movs	r3, #64	; 0x40
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013266:	e03c      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013268:	2380      	movs	r3, #128	; 0x80
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326e:	e038      	b.n	80132e2 <UART_SetConfig+0x5a6>
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a5b      	ldr	r2, [pc, #364]	; (80133e4 <UART_SetConfig+0x6a8>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d130      	bne.n	80132dc <UART_SetConfig+0x5a0>
 801327a:	4b57      	ldr	r3, [pc, #348]	; (80133d8 <UART_SetConfig+0x69c>)
 801327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801327e:	f003 0307 	and.w	r3, r3, #7
 8013282:	2b05      	cmp	r3, #5
 8013284:	d826      	bhi.n	80132d4 <UART_SetConfig+0x598>
 8013286:	a201      	add	r2, pc, #4	; (adr r2, 801328c <UART_SetConfig+0x550>)
 8013288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328c:	080132a5 	.word	0x080132a5
 8013290:	080132ad 	.word	0x080132ad
 8013294:	080132b5 	.word	0x080132b5
 8013298:	080132bd 	.word	0x080132bd
 801329c:	080132c5 	.word	0x080132c5
 80132a0:	080132cd 	.word	0x080132cd
 80132a4:	2302      	movs	r3, #2
 80132a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132aa:	e01a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132ac:	2304      	movs	r3, #4
 80132ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132b2:	e016      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132b4:	2308      	movs	r3, #8
 80132b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ba:	e012      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132bc:	2310      	movs	r3, #16
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132c2:	e00e      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132c4:	2320      	movs	r3, #32
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ca:	e00a      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132cc:	2340      	movs	r3, #64	; 0x40
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132d2:	e006      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132d4:	2380      	movs	r3, #128	; 0x80
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132da:	e002      	b.n	80132e2 <UART_SetConfig+0x5a6>
 80132dc:	2380      	movs	r3, #128	; 0x80
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	4a3f      	ldr	r2, [pc, #252]	; (80133e4 <UART_SetConfig+0x6a8>)
 80132e8:	4293      	cmp	r3, r2
 80132ea:	f040 80f8 	bne.w	80134de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80132ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80132f2:	2b20      	cmp	r3, #32
 80132f4:	dc46      	bgt.n	8013384 <UART_SetConfig+0x648>
 80132f6:	2b02      	cmp	r3, #2
 80132f8:	f2c0 8082 	blt.w	8013400 <UART_SetConfig+0x6c4>
 80132fc:	3b02      	subs	r3, #2
 80132fe:	2b1e      	cmp	r3, #30
 8013300:	d87e      	bhi.n	8013400 <UART_SetConfig+0x6c4>
 8013302:	a201      	add	r2, pc, #4	; (adr r2, 8013308 <UART_SetConfig+0x5cc>)
 8013304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013308:	0801338b 	.word	0x0801338b
 801330c:	08013401 	.word	0x08013401
 8013310:	08013393 	.word	0x08013393
 8013314:	08013401 	.word	0x08013401
 8013318:	08013401 	.word	0x08013401
 801331c:	08013401 	.word	0x08013401
 8013320:	080133a3 	.word	0x080133a3
 8013324:	08013401 	.word	0x08013401
 8013328:	08013401 	.word	0x08013401
 801332c:	08013401 	.word	0x08013401
 8013330:	08013401 	.word	0x08013401
 8013334:	08013401 	.word	0x08013401
 8013338:	08013401 	.word	0x08013401
 801333c:	08013401 	.word	0x08013401
 8013340:	080133b3 	.word	0x080133b3
 8013344:	08013401 	.word	0x08013401
 8013348:	08013401 	.word	0x08013401
 801334c:	08013401 	.word	0x08013401
 8013350:	08013401 	.word	0x08013401
 8013354:	08013401 	.word	0x08013401
 8013358:	08013401 	.word	0x08013401
 801335c:	08013401 	.word	0x08013401
 8013360:	08013401 	.word	0x08013401
 8013364:	08013401 	.word	0x08013401
 8013368:	08013401 	.word	0x08013401
 801336c:	08013401 	.word	0x08013401
 8013370:	08013401 	.word	0x08013401
 8013374:	08013401 	.word	0x08013401
 8013378:	08013401 	.word	0x08013401
 801337c:	08013401 	.word	0x08013401
 8013380:	080133f3 	.word	0x080133f3
 8013384:	2b40      	cmp	r3, #64	; 0x40
 8013386:	d037      	beq.n	80133f8 <UART_SetConfig+0x6bc>
 8013388:	e03a      	b.n	8013400 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801338a:	f7fb fa85 	bl	800e898 <HAL_RCCEx_GetD3PCLK1Freq>
 801338e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013390:	e03c      	b.n	801340c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013396:	4618      	mov	r0, r3
 8013398:	f7fb fa94 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133a0:	e034      	b.n	801340c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133a2:	f107 0318 	add.w	r3, r7, #24
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fb fbe0 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133b0:	e02c      	b.n	801340c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80133b2:	4b09      	ldr	r3, [pc, #36]	; (80133d8 <UART_SetConfig+0x69c>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	f003 0320 	and.w	r3, r3, #32
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d016      	beq.n	80133ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <UART_SetConfig+0x69c>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	08db      	lsrs	r3, r3, #3
 80133c4:	f003 0303 	and.w	r3, r3, #3
 80133c8:	4a07      	ldr	r2, [pc, #28]	; (80133e8 <UART_SetConfig+0x6ac>)
 80133ca:	fa22 f303 	lsr.w	r3, r2, r3
 80133ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80133d0:	e01c      	b.n	801340c <UART_SetConfig+0x6d0>
 80133d2:	bf00      	nop
 80133d4:	40011400 	.word	0x40011400
 80133d8:	58024400 	.word	0x58024400
 80133dc:	40007800 	.word	0x40007800
 80133e0:	40007c00 	.word	0x40007c00
 80133e4:	58000c00 	.word	0x58000c00
 80133e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80133ec:	4b9d      	ldr	r3, [pc, #628]	; (8013664 <UART_SetConfig+0x928>)
 80133ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133f0:	e00c      	b.n	801340c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80133f2:	4b9d      	ldr	r3, [pc, #628]	; (8013668 <UART_SetConfig+0x92c>)
 80133f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133f6:	e009      	b.n	801340c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80133f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133fe:	e005      	b.n	801340c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013400:	2300      	movs	r3, #0
 8013402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013404:	2301      	movs	r3, #1
 8013406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801340a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801340c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801340e:	2b00      	cmp	r3, #0
 8013410:	f000 81de 	beq.w	80137d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013418:	4a94      	ldr	r2, [pc, #592]	; (801366c <UART_SetConfig+0x930>)
 801341a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801341e:	461a      	mov	r2, r3
 8013420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013422:	fbb3 f3f2 	udiv	r3, r3, r2
 8013426:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	4613      	mov	r3, r2
 801342e:	005b      	lsls	r3, r3, #1
 8013430:	4413      	add	r3, r2
 8013432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013434:	429a      	cmp	r2, r3
 8013436:	d305      	bcc.n	8013444 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013440:	429a      	cmp	r2, r3
 8013442:	d903      	bls.n	801344c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013444:	2301      	movs	r3, #1
 8013446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801344a:	e1c1      	b.n	80137d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801344e:	2200      	movs	r2, #0
 8013450:	60bb      	str	r3, [r7, #8]
 8013452:	60fa      	str	r2, [r7, #12]
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013458:	4a84      	ldr	r2, [pc, #528]	; (801366c <UART_SetConfig+0x930>)
 801345a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801345e:	b29b      	uxth	r3, r3
 8013460:	2200      	movs	r2, #0
 8013462:	603b      	str	r3, [r7, #0]
 8013464:	607a      	str	r2, [r7, #4]
 8013466:	e9d7 2300 	ldrd	r2, r3, [r7]
 801346a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801346e:	f7ec ff33 	bl	80002d8 <__aeabi_uldivmod>
 8013472:	4602      	mov	r2, r0
 8013474:	460b      	mov	r3, r1
 8013476:	4610      	mov	r0, r2
 8013478:	4619      	mov	r1, r3
 801347a:	f04f 0200 	mov.w	r2, #0
 801347e:	f04f 0300 	mov.w	r3, #0
 8013482:	020b      	lsls	r3, r1, #8
 8013484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013488:	0202      	lsls	r2, r0, #8
 801348a:	6979      	ldr	r1, [r7, #20]
 801348c:	6849      	ldr	r1, [r1, #4]
 801348e:	0849      	lsrs	r1, r1, #1
 8013490:	2000      	movs	r0, #0
 8013492:	460c      	mov	r4, r1
 8013494:	4605      	mov	r5, r0
 8013496:	eb12 0804 	adds.w	r8, r2, r4
 801349a:	eb43 0905 	adc.w	r9, r3, r5
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	2200      	movs	r2, #0
 80134a4:	469a      	mov	sl, r3
 80134a6:	4693      	mov	fp, r2
 80134a8:	4652      	mov	r2, sl
 80134aa:	465b      	mov	r3, fp
 80134ac:	4640      	mov	r0, r8
 80134ae:	4649      	mov	r1, r9
 80134b0:	f7ec ff12 	bl	80002d8 <__aeabi_uldivmod>
 80134b4:	4602      	mov	r2, r0
 80134b6:	460b      	mov	r3, r1
 80134b8:	4613      	mov	r3, r2
 80134ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80134bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80134c2:	d308      	bcc.n	80134d6 <UART_SetConfig+0x79a>
 80134c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80134ca:	d204      	bcs.n	80134d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134d2:	60da      	str	r2, [r3, #12]
 80134d4:	e17c      	b.n	80137d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80134d6:	2301      	movs	r3, #1
 80134d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80134dc:	e178      	b.n	80137d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	69db      	ldr	r3, [r3, #28]
 80134e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134e6:	f040 80c5 	bne.w	8013674 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80134ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134ee:	2b20      	cmp	r3, #32
 80134f0:	dc48      	bgt.n	8013584 <UART_SetConfig+0x848>
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	db7b      	blt.n	80135ee <UART_SetConfig+0x8b2>
 80134f6:	2b20      	cmp	r3, #32
 80134f8:	d879      	bhi.n	80135ee <UART_SetConfig+0x8b2>
 80134fa:	a201      	add	r2, pc, #4	; (adr r2, 8013500 <UART_SetConfig+0x7c4>)
 80134fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013500:	0801358b 	.word	0x0801358b
 8013504:	08013593 	.word	0x08013593
 8013508:	080135ef 	.word	0x080135ef
 801350c:	080135ef 	.word	0x080135ef
 8013510:	0801359b 	.word	0x0801359b
 8013514:	080135ef 	.word	0x080135ef
 8013518:	080135ef 	.word	0x080135ef
 801351c:	080135ef 	.word	0x080135ef
 8013520:	080135ab 	.word	0x080135ab
 8013524:	080135ef 	.word	0x080135ef
 8013528:	080135ef 	.word	0x080135ef
 801352c:	080135ef 	.word	0x080135ef
 8013530:	080135ef 	.word	0x080135ef
 8013534:	080135ef 	.word	0x080135ef
 8013538:	080135ef 	.word	0x080135ef
 801353c:	080135ef 	.word	0x080135ef
 8013540:	080135bb 	.word	0x080135bb
 8013544:	080135ef 	.word	0x080135ef
 8013548:	080135ef 	.word	0x080135ef
 801354c:	080135ef 	.word	0x080135ef
 8013550:	080135ef 	.word	0x080135ef
 8013554:	080135ef 	.word	0x080135ef
 8013558:	080135ef 	.word	0x080135ef
 801355c:	080135ef 	.word	0x080135ef
 8013560:	080135ef 	.word	0x080135ef
 8013564:	080135ef 	.word	0x080135ef
 8013568:	080135ef 	.word	0x080135ef
 801356c:	080135ef 	.word	0x080135ef
 8013570:	080135ef 	.word	0x080135ef
 8013574:	080135ef 	.word	0x080135ef
 8013578:	080135ef 	.word	0x080135ef
 801357c:	080135ef 	.word	0x080135ef
 8013580:	080135e1 	.word	0x080135e1
 8013584:	2b40      	cmp	r3, #64	; 0x40
 8013586:	d02e      	beq.n	80135e6 <UART_SetConfig+0x8aa>
 8013588:	e031      	b.n	80135ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801358a:	f7f9 f9cf 	bl	800c92c <HAL_RCC_GetPCLK1Freq>
 801358e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013590:	e033      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013592:	f7f9 f9e1 	bl	800c958 <HAL_RCC_GetPCLK2Freq>
 8013596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013598:	e02f      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801359a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fb f990 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80135a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135a8:	e027      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135aa:	f107 0318 	add.w	r3, r7, #24
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fb fadc 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135b8:	e01f      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135ba:	4b2d      	ldr	r3, [pc, #180]	; (8013670 <UART_SetConfig+0x934>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f003 0320 	and.w	r3, r3, #32
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d009      	beq.n	80135da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80135c6:	4b2a      	ldr	r3, [pc, #168]	; (8013670 <UART_SetConfig+0x934>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	08db      	lsrs	r3, r3, #3
 80135cc:	f003 0303 	and.w	r3, r3, #3
 80135d0:	4a24      	ldr	r2, [pc, #144]	; (8013664 <UART_SetConfig+0x928>)
 80135d2:	fa22 f303 	lsr.w	r3, r2, r3
 80135d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80135d8:	e00f      	b.n	80135fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80135da:	4b22      	ldr	r3, [pc, #136]	; (8013664 <UART_SetConfig+0x928>)
 80135dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135de:	e00c      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80135e0:	4b21      	ldr	r3, [pc, #132]	; (8013668 <UART_SetConfig+0x92c>)
 80135e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135e4:	e009      	b.n	80135fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80135e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80135ec:	e005      	b.n	80135fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80135ee:	2300      	movs	r3, #0
 80135f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80135f2:	2301      	movs	r3, #1
 80135f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80135f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80135fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 80e7 	beq.w	80137d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013606:	4a19      	ldr	r2, [pc, #100]	; (801366c <UART_SetConfig+0x930>)
 8013608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801360c:	461a      	mov	r2, r3
 801360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013610:	fbb3 f3f2 	udiv	r3, r3, r2
 8013614:	005a      	lsls	r2, r3, #1
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	085b      	lsrs	r3, r3, #1
 801361c:	441a      	add	r2, r3
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	fbb2 f3f3 	udiv	r3, r2, r3
 8013626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362a:	2b0f      	cmp	r3, #15
 801362c:	d916      	bls.n	801365c <UART_SetConfig+0x920>
 801362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013634:	d212      	bcs.n	801365c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013638:	b29b      	uxth	r3, r3
 801363a:	f023 030f 	bic.w	r3, r3, #15
 801363e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013642:	085b      	lsrs	r3, r3, #1
 8013644:	b29b      	uxth	r3, r3
 8013646:	f003 0307 	and.w	r3, r3, #7
 801364a:	b29a      	uxth	r2, r3
 801364c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801364e:	4313      	orrs	r3, r2
 8013650:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013658:	60da      	str	r2, [r3, #12]
 801365a:	e0b9      	b.n	80137d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801365c:	2301      	movs	r3, #1
 801365e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013662:	e0b5      	b.n	80137d0 <UART_SetConfig+0xa94>
 8013664:	03d09000 	.word	0x03d09000
 8013668:	003d0900 	.word	0x003d0900
 801366c:	08018c08 	.word	0x08018c08
 8013670:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013678:	2b20      	cmp	r3, #32
 801367a:	dc49      	bgt.n	8013710 <UART_SetConfig+0x9d4>
 801367c:	2b00      	cmp	r3, #0
 801367e:	db7c      	blt.n	801377a <UART_SetConfig+0xa3e>
 8013680:	2b20      	cmp	r3, #32
 8013682:	d87a      	bhi.n	801377a <UART_SetConfig+0xa3e>
 8013684:	a201      	add	r2, pc, #4	; (adr r2, 801368c <UART_SetConfig+0x950>)
 8013686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801368a:	bf00      	nop
 801368c:	08013717 	.word	0x08013717
 8013690:	0801371f 	.word	0x0801371f
 8013694:	0801377b 	.word	0x0801377b
 8013698:	0801377b 	.word	0x0801377b
 801369c:	08013727 	.word	0x08013727
 80136a0:	0801377b 	.word	0x0801377b
 80136a4:	0801377b 	.word	0x0801377b
 80136a8:	0801377b 	.word	0x0801377b
 80136ac:	08013737 	.word	0x08013737
 80136b0:	0801377b 	.word	0x0801377b
 80136b4:	0801377b 	.word	0x0801377b
 80136b8:	0801377b 	.word	0x0801377b
 80136bc:	0801377b 	.word	0x0801377b
 80136c0:	0801377b 	.word	0x0801377b
 80136c4:	0801377b 	.word	0x0801377b
 80136c8:	0801377b 	.word	0x0801377b
 80136cc:	08013747 	.word	0x08013747
 80136d0:	0801377b 	.word	0x0801377b
 80136d4:	0801377b 	.word	0x0801377b
 80136d8:	0801377b 	.word	0x0801377b
 80136dc:	0801377b 	.word	0x0801377b
 80136e0:	0801377b 	.word	0x0801377b
 80136e4:	0801377b 	.word	0x0801377b
 80136e8:	0801377b 	.word	0x0801377b
 80136ec:	0801377b 	.word	0x0801377b
 80136f0:	0801377b 	.word	0x0801377b
 80136f4:	0801377b 	.word	0x0801377b
 80136f8:	0801377b 	.word	0x0801377b
 80136fc:	0801377b 	.word	0x0801377b
 8013700:	0801377b 	.word	0x0801377b
 8013704:	0801377b 	.word	0x0801377b
 8013708:	0801377b 	.word	0x0801377b
 801370c:	0801376d 	.word	0x0801376d
 8013710:	2b40      	cmp	r3, #64	; 0x40
 8013712:	d02e      	beq.n	8013772 <UART_SetConfig+0xa36>
 8013714:	e031      	b.n	801377a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013716:	f7f9 f909 	bl	800c92c <HAL_RCC_GetPCLK1Freq>
 801371a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801371c:	e033      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801371e:	f7f9 f91b 	bl	800c958 <HAL_RCC_GetPCLK2Freq>
 8013722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013724:	e02f      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801372a:	4618      	mov	r0, r3
 801372c:	f7fb f8ca 	bl	800e8c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013734:	e027      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013736:	f107 0318 	add.w	r3, r7, #24
 801373a:	4618      	mov	r0, r3
 801373c:	f7fb fa16 	bl	800eb6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013744:	e01f      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013746:	4b2d      	ldr	r3, [pc, #180]	; (80137fc <UART_SetConfig+0xac0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f003 0320 	and.w	r3, r3, #32
 801374e:	2b00      	cmp	r3, #0
 8013750:	d009      	beq.n	8013766 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013752:	4b2a      	ldr	r3, [pc, #168]	; (80137fc <UART_SetConfig+0xac0>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	08db      	lsrs	r3, r3, #3
 8013758:	f003 0303 	and.w	r3, r3, #3
 801375c:	4a28      	ldr	r2, [pc, #160]	; (8013800 <UART_SetConfig+0xac4>)
 801375e:	fa22 f303 	lsr.w	r3, r2, r3
 8013762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013764:	e00f      	b.n	8013786 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013766:	4b26      	ldr	r3, [pc, #152]	; (8013800 <UART_SetConfig+0xac4>)
 8013768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801376a:	e00c      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801376c:	4b25      	ldr	r3, [pc, #148]	; (8013804 <UART_SetConfig+0xac8>)
 801376e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013770:	e009      	b.n	8013786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013778:	e005      	b.n	8013786 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801377a:	2300      	movs	r3, #0
 801377c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801377e:	2301      	movs	r3, #1
 8013780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013784:	bf00      	nop
    }

    if (pclk != 0U)
 8013786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013788:	2b00      	cmp	r3, #0
 801378a:	d021      	beq.n	80137d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013790:	4a1d      	ldr	r2, [pc, #116]	; (8013808 <UART_SetConfig+0xacc>)
 8013792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013796:	461a      	mov	r2, r3
 8013798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379a:	fbb3 f2f2 	udiv	r2, r3, r2
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	085b      	lsrs	r3, r3, #1
 80137a4:	441a      	add	r2, r3
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80137ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80137b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b2:	2b0f      	cmp	r3, #15
 80137b4:	d909      	bls.n	80137ca <UART_SetConfig+0xa8e>
 80137b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137bc:	d205      	bcs.n	80137ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	60da      	str	r2, [r3, #12]
 80137c8:	e002      	b.n	80137d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80137ca:	2301      	movs	r3, #1
 80137cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2201      	movs	r2, #1
 80137d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	2201      	movs	r2, #1
 80137dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	2200      	movs	r2, #0
 80137e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2200      	movs	r2, #0
 80137ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80137ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3748      	adds	r7, #72	; 0x48
 80137f4:	46bd      	mov	sp, r7
 80137f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80137fa:	bf00      	nop
 80137fc:	58024400 	.word	0x58024400
 8013800:	03d09000 	.word	0x03d09000
 8013804:	003d0900 	.word	0x003d0900
 8013808:	08018c08 	.word	0x08018c08

0801380c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00a      	beq.n	8013836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	430a      	orrs	r2, r1
 8013834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801383a:	f003 0302 	and.w	r3, r3, #2
 801383e:	2b00      	cmp	r3, #0
 8013840:	d00a      	beq.n	8013858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	430a      	orrs	r2, r1
 8013856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801385c:	f003 0304 	and.w	r3, r3, #4
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00a      	beq.n	801387a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	430a      	orrs	r2, r1
 8013878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801387e:	f003 0308 	and.w	r3, r3, #8
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00a      	beq.n	801389c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	430a      	orrs	r2, r1
 801389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138a0:	f003 0310 	and.w	r3, r3, #16
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00a      	beq.n	80138be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	430a      	orrs	r2, r1
 80138bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c2:	f003 0320 	and.w	r3, r3, #32
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d00a      	beq.n	80138e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	689b      	ldr	r3, [r3, #8]
 80138d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	430a      	orrs	r2, r1
 80138de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d01a      	beq.n	8013922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	430a      	orrs	r2, r1
 8013900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801390a:	d10a      	bne.n	8013922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	430a      	orrs	r2, r1
 8013920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00a      	beq.n	8013944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	430a      	orrs	r2, r1
 8013942:	605a      	str	r2, [r3, #4]
  }
}
 8013944:	bf00      	nop
 8013946:	370c      	adds	r7, #12
 8013948:	46bd      	mov	sp, r7
 801394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394e:	4770      	bx	lr

08013950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b098      	sub	sp, #96	; 0x60
 8013954:	af02      	add	r7, sp, #8
 8013956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013960:	f7f1 fc88 	bl	8005274 <HAL_GetTick>
 8013964:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f003 0308 	and.w	r3, r3, #8
 8013970:	2b08      	cmp	r3, #8
 8013972:	d12f      	bne.n	80139d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013978:	9300      	str	r3, [sp, #0]
 801397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801397c:	2200      	movs	r2, #0
 801397e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f000 f88e 	bl	8013aa4 <UART_WaitOnFlagUntilTimeout>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d022      	beq.n	80139d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013996:	e853 3f00 	ldrex	r3, [r3]
 801399a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801399e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139a2:	653b      	str	r3, [r7, #80]	; 0x50
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	461a      	mov	r2, r3
 80139aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ac:	647b      	str	r3, [r7, #68]	; 0x44
 80139ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80139b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139b4:	e841 2300 	strex	r3, r2, [r1]
 80139b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80139ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d1e6      	bne.n	801398e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2220      	movs	r2, #32
 80139c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139d0:	2303      	movs	r3, #3
 80139d2:	e063      	b.n	8013a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	f003 0304 	and.w	r3, r3, #4
 80139de:	2b04      	cmp	r3, #4
 80139e0:	d149      	bne.n	8013a76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80139e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139ea:	2200      	movs	r2, #0
 80139ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 f857 	bl	8013aa4 <UART_WaitOnFlagUntilTimeout>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d03c      	beq.n	8013a76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	e853 3f00 	ldrex	r3, [r3]
 8013a08:	623b      	str	r3, [r7, #32]
   return(result);
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	461a      	mov	r2, r3
 8013a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a22:	e841 2300 	strex	r3, r2, [r1]
 8013a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d1e6      	bne.n	80139fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	3308      	adds	r3, #8
 8013a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	e853 3f00 	ldrex	r3, [r3]
 8013a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f023 0301 	bic.w	r3, r3, #1
 8013a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	3308      	adds	r3, #8
 8013a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a4e:	61fa      	str	r2, [r7, #28]
 8013a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a52:	69b9      	ldr	r1, [r7, #24]
 8013a54:	69fa      	ldr	r2, [r7, #28]
 8013a56:	e841 2300 	strex	r3, r2, [r1]
 8013a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d1e5      	bne.n	8013a2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2220      	movs	r2, #32
 8013a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013a72:	2303      	movs	r3, #3
 8013a74:	e012      	b.n	8013a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2220      	movs	r2, #32
 8013a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2220      	movs	r2, #32
 8013a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a9a:	2300      	movs	r3, #0
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3758      	adds	r7, #88	; 0x58
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	603b      	str	r3, [r7, #0]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ab4:	e049      	b.n	8013b4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013abc:	d045      	beq.n	8013b4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013abe:	f7f1 fbd9 	bl	8005274 <HAL_GetTick>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	69ba      	ldr	r2, [r7, #24]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d302      	bcc.n	8013ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d101      	bne.n	8013ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	e048      	b.n	8013b6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f003 0304 	and.w	r3, r3, #4
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d031      	beq.n	8013b4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	69db      	ldr	r3, [r3, #28]
 8013aec:	f003 0308 	and.w	r3, r3, #8
 8013af0:	2b08      	cmp	r3, #8
 8013af2:	d110      	bne.n	8013b16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2208      	movs	r2, #8
 8013afa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f839 	bl	8013b74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2208      	movs	r2, #8
 8013b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013b12:	2301      	movs	r3, #1
 8013b14:	e029      	b.n	8013b6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	69db      	ldr	r3, [r3, #28]
 8013b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b24:	d111      	bne.n	8013b4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f000 f81f 	bl	8013b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2220      	movs	r2, #32
 8013b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2200      	movs	r2, #0
 8013b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013b46:	2303      	movs	r3, #3
 8013b48:	e00f      	b.n	8013b6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	69da      	ldr	r2, [r3, #28]
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	4013      	ands	r3, r2
 8013b54:	68ba      	ldr	r2, [r7, #8]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	bf0c      	ite	eq
 8013b5a:	2301      	moveq	r3, #1
 8013b5c:	2300      	movne	r3, #0
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	461a      	mov	r2, r3
 8013b62:	79fb      	ldrb	r3, [r7, #7]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d0a6      	beq.n	8013ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013b68:	2300      	movs	r3, #0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
	...

08013b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013b74:	b480      	push	{r7}
 8013b76:	b095      	sub	sp, #84	; 0x54
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b84:	e853 3f00 	ldrex	r3, [r3]
 8013b88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	461a      	mov	r2, r3
 8013b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ba2:	e841 2300 	strex	r3, r2, [r1]
 8013ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d1e6      	bne.n	8013b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	3308      	adds	r3, #8
 8013bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb6:	6a3b      	ldr	r3, [r7, #32]
 8013bb8:	e853 3f00 	ldrex	r3, [r3]
 8013bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8013bbe:	69fa      	ldr	r2, [r7, #28]
 8013bc0:	4b1e      	ldr	r3, [pc, #120]	; (8013c3c <UART_EndRxTransfer+0xc8>)
 8013bc2:	4013      	ands	r3, r2
 8013bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	3308      	adds	r3, #8
 8013bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd6:	e841 2300 	strex	r3, r2, [r1]
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1e5      	bne.n	8013bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d118      	bne.n	8013c1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	e853 3f00 	ldrex	r3, [r3]
 8013bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	f023 0310 	bic.w	r3, r3, #16
 8013bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	461a      	mov	r2, r3
 8013c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c08:	61bb      	str	r3, [r7, #24]
 8013c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c0c:	6979      	ldr	r1, [r7, #20]
 8013c0e:	69ba      	ldr	r2, [r7, #24]
 8013c10:	e841 2300 	strex	r3, r2, [r1]
 8013c14:	613b      	str	r3, [r7, #16]
   return(result);
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1e6      	bne.n	8013bea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2220      	movs	r2, #32
 8013c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013c30:	bf00      	nop
 8013c32:	3754      	adds	r7, #84	; 0x54
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr
 8013c3c:	effffffe 	.word	0xeffffffe

08013c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b085      	sub	sp, #20
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d101      	bne.n	8013c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8013c52:	2302      	movs	r3, #2
 8013c54:	e027      	b.n	8013ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2201      	movs	r2, #1
 8013c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2224      	movs	r2, #36	; 0x24
 8013c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f022 0201 	bic.w	r2, r2, #1
 8013c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2220      	movs	r2, #32
 8013c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3714      	adds	r7, #20
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013cb2:	b580      	push	{r7, lr}
 8013cb4:	b084      	sub	sp, #16
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
 8013cba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013cc2:	2b01      	cmp	r3, #1
 8013cc4:	d101      	bne.n	8013cca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013cc6:	2302      	movs	r3, #2
 8013cc8:	e02d      	b.n	8013d26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2201      	movs	r2, #1
 8013cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2224      	movs	r2, #36	; 0x24
 8013cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f022 0201 	bic.w	r2, r2, #1
 8013cf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	683a      	ldr	r2, [r7, #0]
 8013d02:	430a      	orrs	r2, r1
 8013d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f000 f850 	bl	8013dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	68fa      	ldr	r2, [r7, #12]
 8013d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2220      	movs	r2, #32
 8013d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013d24:	2300      	movs	r3, #0
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b084      	sub	sp, #16
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d101      	bne.n	8013d46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013d42:	2302      	movs	r3, #2
 8013d44:	e02d      	b.n	8013da2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2224      	movs	r2, #36	; 0x24
 8013d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f022 0201 	bic.w	r2, r2, #1
 8013d6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	430a      	orrs	r2, r1
 8013d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f000 f812 	bl	8013dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	68fa      	ldr	r2, [r7, #12]
 8013d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2220      	movs	r2, #32
 8013d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d108      	bne.n	8013dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013dcc:	e031      	b.n	8013e32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013dce:	2310      	movs	r3, #16
 8013dd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013dd2:	2310      	movs	r3, #16
 8013dd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	0e5b      	lsrs	r3, r3, #25
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	f003 0307 	and.w	r3, r3, #7
 8013de4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	689b      	ldr	r3, [r3, #8]
 8013dec:	0f5b      	lsrs	r3, r3, #29
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	f003 0307 	and.w	r3, r3, #7
 8013df4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013df6:	7bbb      	ldrb	r3, [r7, #14]
 8013df8:	7b3a      	ldrb	r2, [r7, #12]
 8013dfa:	4911      	ldr	r1, [pc, #68]	; (8013e40 <UARTEx_SetNbDataToProcess+0x94>)
 8013dfc:	5c8a      	ldrb	r2, [r1, r2]
 8013dfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013e02:	7b3a      	ldrb	r2, [r7, #12]
 8013e04:	490f      	ldr	r1, [pc, #60]	; (8013e44 <UARTEx_SetNbDataToProcess+0x98>)
 8013e06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
 8013e16:	7b7a      	ldrb	r2, [r7, #13]
 8013e18:	4909      	ldr	r1, [pc, #36]	; (8013e40 <UARTEx_SetNbDataToProcess+0x94>)
 8013e1a:	5c8a      	ldrb	r2, [r1, r2]
 8013e1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013e20:	7b7a      	ldrb	r2, [r7, #13]
 8013e22:	4908      	ldr	r1, [pc, #32]	; (8013e44 <UARTEx_SetNbDataToProcess+0x98>)
 8013e24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013e32:	bf00      	nop
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	08018c20 	.word	0x08018c20
 8013e44:	08018c28 	.word	0x08018c28

08013e48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d121      	bne.n	8013e9e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	4b27      	ldr	r3, [pc, #156]	; (8013efc <FMC_SDRAM_Init+0xb4>)
 8013e60:	4013      	ands	r3, r2
 8013e62:	683a      	ldr	r2, [r7, #0]
 8013e64:	6851      	ldr	r1, [r2, #4]
 8013e66:	683a      	ldr	r2, [r7, #0]
 8013e68:	6892      	ldr	r2, [r2, #8]
 8013e6a:	4311      	orrs	r1, r2
 8013e6c:	683a      	ldr	r2, [r7, #0]
 8013e6e:	68d2      	ldr	r2, [r2, #12]
 8013e70:	4311      	orrs	r1, r2
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	6912      	ldr	r2, [r2, #16]
 8013e76:	4311      	orrs	r1, r2
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	6952      	ldr	r2, [r2, #20]
 8013e7c:	4311      	orrs	r1, r2
 8013e7e:	683a      	ldr	r2, [r7, #0]
 8013e80:	6992      	ldr	r2, [r2, #24]
 8013e82:	4311      	orrs	r1, r2
 8013e84:	683a      	ldr	r2, [r7, #0]
 8013e86:	69d2      	ldr	r2, [r2, #28]
 8013e88:	4311      	orrs	r1, r2
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	6a12      	ldr	r2, [r2, #32]
 8013e8e:	4311      	orrs	r1, r2
 8013e90:	683a      	ldr	r2, [r7, #0]
 8013e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013e94:	430a      	orrs	r2, r1
 8013e96:	431a      	orrs	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	601a      	str	r2, [r3, #0]
 8013e9c:	e026      	b.n	8013eec <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	69d9      	ldr	r1, [r3, #28]
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	6a1b      	ldr	r3, [r3, #32]
 8013eae:	4319      	orrs	r1, r3
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb4:	430b      	orrs	r3, r1
 8013eb6:	431a      	orrs	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	685a      	ldr	r2, [r3, #4]
 8013ec0:	4b0e      	ldr	r3, [pc, #56]	; (8013efc <FMC_SDRAM_Init+0xb4>)
 8013ec2:	4013      	ands	r3, r2
 8013ec4:	683a      	ldr	r2, [r7, #0]
 8013ec6:	6851      	ldr	r1, [r2, #4]
 8013ec8:	683a      	ldr	r2, [r7, #0]
 8013eca:	6892      	ldr	r2, [r2, #8]
 8013ecc:	4311      	orrs	r1, r2
 8013ece:	683a      	ldr	r2, [r7, #0]
 8013ed0:	68d2      	ldr	r2, [r2, #12]
 8013ed2:	4311      	orrs	r1, r2
 8013ed4:	683a      	ldr	r2, [r7, #0]
 8013ed6:	6912      	ldr	r2, [r2, #16]
 8013ed8:	4311      	orrs	r1, r2
 8013eda:	683a      	ldr	r2, [r7, #0]
 8013edc:	6952      	ldr	r2, [r2, #20]
 8013ede:	4311      	orrs	r1, r2
 8013ee0:	683a      	ldr	r2, [r7, #0]
 8013ee2:	6992      	ldr	r2, [r2, #24]
 8013ee4:	430a      	orrs	r2, r1
 8013ee6:	431a      	orrs	r2, r3
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013eec:	2300      	movs	r3, #0
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop
 8013efc:	ffff8000 	.word	0xffff8000

08013f00 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b085      	sub	sp, #20
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d128      	bne.n	8013f64 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	689b      	ldr	r3, [r3, #8]
 8013f16:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	1e59      	subs	r1, r3, #1
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	3b01      	subs	r3, #1
 8013f26:	011b      	lsls	r3, r3, #4
 8013f28:	4319      	orrs	r1, r3
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	021b      	lsls	r3, r3, #8
 8013f32:	4319      	orrs	r1, r3
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	3b01      	subs	r3, #1
 8013f3a:	031b      	lsls	r3, r3, #12
 8013f3c:	4319      	orrs	r1, r3
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	041b      	lsls	r3, r3, #16
 8013f46:	4319      	orrs	r1, r3
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	695b      	ldr	r3, [r3, #20]
 8013f4c:	3b01      	subs	r3, #1
 8013f4e:	051b      	lsls	r3, r3, #20
 8013f50:	4319      	orrs	r1, r3
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	699b      	ldr	r3, [r3, #24]
 8013f56:	3b01      	subs	r3, #1
 8013f58:	061b      	lsls	r3, r3, #24
 8013f5a:	430b      	orrs	r3, r1
 8013f5c:	431a      	orrs	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	609a      	str	r2, [r3, #8]
 8013f62:	e02d      	b.n	8013fc0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	689a      	ldr	r2, [r3, #8]
 8013f68:	4b19      	ldr	r3, [pc, #100]	; (8013fd0 <FMC_SDRAM_Timing_Init+0xd0>)
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	68d2      	ldr	r2, [r2, #12]
 8013f70:	3a01      	subs	r2, #1
 8013f72:	0311      	lsls	r1, r2, #12
 8013f74:	68ba      	ldr	r2, [r7, #8]
 8013f76:	6952      	ldr	r2, [r2, #20]
 8013f78:	3a01      	subs	r2, #1
 8013f7a:	0512      	lsls	r2, r2, #20
 8013f7c:	430a      	orrs	r2, r1
 8013f7e:	431a      	orrs	r2, r3
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	1e59      	subs	r1, r3, #1
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	3b01      	subs	r3, #1
 8013f98:	011b      	lsls	r3, r3, #4
 8013f9a:	4319      	orrs	r1, r3
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	3b01      	subs	r3, #1
 8013fa2:	021b      	lsls	r3, r3, #8
 8013fa4:	4319      	orrs	r1, r3
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	691b      	ldr	r3, [r3, #16]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	041b      	lsls	r3, r3, #16
 8013fae:	4319      	orrs	r1, r3
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	699b      	ldr	r3, [r3, #24]
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	061b      	lsls	r3, r3, #24
 8013fb8:	430b      	orrs	r3, r1
 8013fba:	431a      	orrs	r2, r3
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013fc0:	2300      	movs	r3, #0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3714      	adds	r7, #20
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	ff0f0fff 	.word	0xff0f0fff

08013fd4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b085      	sub	sp, #20
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	691a      	ldr	r2, [r3, #16]
 8013fe4:	4b0c      	ldr	r3, [pc, #48]	; (8014018 <FMC_SDRAM_SendCommand+0x44>)
 8013fe6:	4013      	ands	r3, r2
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	6811      	ldr	r1, [r2, #0]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	6852      	ldr	r2, [r2, #4]
 8013ff0:	4311      	orrs	r1, r2
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	6892      	ldr	r2, [r2, #8]
 8013ff6:	3a01      	subs	r2, #1
 8013ff8:	0152      	lsls	r2, r2, #5
 8013ffa:	4311      	orrs	r1, r2
 8013ffc:	68ba      	ldr	r2, [r7, #8]
 8013ffe:	68d2      	ldr	r2, [r2, #12]
 8014000:	0252      	lsls	r2, r2, #9
 8014002:	430a      	orrs	r2, r1
 8014004:	431a      	orrs	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801400a:	2300      	movs	r3, #0
}
 801400c:	4618      	mov	r0, r3
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	ffc00000 	.word	0xffc00000

0801401c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	695a      	ldr	r2, [r3, #20]
 801402a:	4b07      	ldr	r3, [pc, #28]	; (8014048 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801402c:	4013      	ands	r3, r2
 801402e:	683a      	ldr	r2, [r7, #0]
 8014030:	0052      	lsls	r2, r2, #1
 8014032:	431a      	orrs	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	370c      	adds	r7, #12
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop
 8014048:	ffffc001 	.word	0xffffc001

0801404c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801404c:	b084      	sub	sp, #16
 801404e:	b480      	push	{r7}
 8014050:	b085      	sub	sp, #20
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
 8014056:	f107 001c 	add.w	r0, r7, #28
 801405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801405e:	2300      	movs	r3, #0
 8014060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8014062:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8014064:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8014066:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8014068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801406a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801406e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8014072:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8014074:	68fa      	ldr	r2, [r7, #12]
 8014076:	4313      	orrs	r3, r2
 8014078:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	685a      	ldr	r2, [r3, #4]
 801407e:	4b07      	ldr	r3, [pc, #28]	; (801409c <SDMMC_Init+0x50>)
 8014080:	4013      	ands	r3, r2
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	431a      	orrs	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3714      	adds	r7, #20
 8014090:	46bd      	mov	sp, r7
 8014092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014096:	b004      	add	sp, #16
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop
 801409c:	ffc02c00 	.word	0xffc02c00

080140a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	370c      	adds	r7, #12
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr

080140ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80140ba:	b480      	push	{r7}
 80140bc:	b083      	sub	sp, #12
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
 80140c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80140ce:	2300      	movs	r3, #0
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	370c      	adds	r7, #12
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr

080140dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80140dc:	b480      	push	{r7}
 80140de:	b083      	sub	sp, #12
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f043 0203 	orr.w	r2, r3, #3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80140fe:	b480      	push	{r7}
 8014100:	b083      	sub	sp, #12
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f003 0303 	and.w	r3, r3, #3
}
 801410e:	4618      	mov	r0, r3
 8014110:	370c      	adds	r7, #12
 8014112:	46bd      	mov	sp, r7
 8014114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014118:	4770      	bx	lr
	...

0801411c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801411c:	b480      	push	{r7}
 801411e:	b085      	sub	sp, #20
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801413a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8014140:	431a      	orrs	r2, r3
                       Command->CPSM);
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8014146:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014148:	68fa      	ldr	r2, [r7, #12]
 801414a:	4313      	orrs	r3, r2
 801414c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	4b06      	ldr	r3, [pc, #24]	; (801416c <SDMMC_SendCommand+0x50>)
 8014154:	4013      	ands	r3, r2
 8014156:	68fa      	ldr	r2, [r7, #12]
 8014158:	431a      	orrs	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3714      	adds	r7, #20
 8014164:	46bd      	mov	sp, r7
 8014166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416a:	4770      	bx	lr
 801416c:	fffee0c0 	.word	0xfffee0c0

08014170 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014170:	b480      	push	{r7}
 8014172:	b083      	sub	sp, #12
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	691b      	ldr	r3, [r3, #16]
 801417c:	b2db      	uxtb	r3, r3
}
 801417e:	4618      	mov	r0, r3
 8014180:	370c      	adds	r7, #12
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr

0801418a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801418a:	b480      	push	{r7}
 801418c:	b085      	sub	sp, #20
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
 8014192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	3314      	adds	r3, #20
 8014198:	461a      	mov	r2, r3
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	4413      	add	r3, r2
 801419e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3714      	adds	r7, #20
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b085      	sub	sp, #20
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	685a      	ldr	r2, [r3, #4]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141d6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80141dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80141e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	4313      	orrs	r3, r2
 80141e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	431a      	orrs	r2, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80141fa:	2300      	movs	r3, #0

}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3714      	adds	r7, #20
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b088      	sub	sp, #32
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8014216:	2310      	movs	r3, #16
 8014218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801421a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801421e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014220:	2300      	movs	r3, #0
 8014222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014228:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801422a:	f107 0308 	add.w	r3, r7, #8
 801422e:	4619      	mov	r1, r3
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7ff ff73 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8014236:	f241 3288 	movw	r2, #5000	; 0x1388
 801423a:	2110      	movs	r1, #16
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 fa5f 	bl	8014700 <SDMMC_GetCmdResp1>
 8014242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014244:	69fb      	ldr	r3, [r7, #28]
}
 8014246:	4618      	mov	r0, r3
 8014248:	3720      	adds	r7, #32
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}

0801424e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801424e:	b580      	push	{r7, lr}
 8014250:	b088      	sub	sp, #32
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]
 8014256:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801425c:	2311      	movs	r3, #17
 801425e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014266:	2300      	movs	r3, #0
 8014268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801426a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801426e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014270:	f107 0308 	add.w	r3, r7, #8
 8014274:	4619      	mov	r1, r3
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7ff ff50 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014280:	2111      	movs	r1, #17
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fa3c 	bl	8014700 <SDMMC_GetCmdResp1>
 8014288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801428a:	69fb      	ldr	r3, [r7, #28]
}
 801428c:	4618      	mov	r0, r3
 801428e:	3720      	adds	r7, #32
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b088      	sub	sp, #32
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80142a2:	2312      	movs	r3, #18
 80142a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142ac:	2300      	movs	r3, #0
 80142ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142b6:	f107 0308 	add.w	r3, r7, #8
 80142ba:	4619      	mov	r1, r3
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff ff2d 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80142c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80142c6:	2112      	movs	r1, #18
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fa19 	bl	8014700 <SDMMC_GetCmdResp1>
 80142ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142d0:	69fb      	ldr	r3, [r7, #28]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3720      	adds	r7, #32
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}

080142da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80142da:	b580      	push	{r7, lr}
 80142dc:	b088      	sub	sp, #32
 80142de:	af00      	add	r7, sp, #0
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80142e8:	2318      	movs	r3, #24
 80142ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142f2:	2300      	movs	r3, #0
 80142f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142fc:	f107 0308 	add.w	r3, r7, #8
 8014300:	4619      	mov	r1, r3
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ff0a 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014308:	f241 3288 	movw	r2, #5000	; 0x1388
 801430c:	2118      	movs	r1, #24
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 f9f6 	bl	8014700 <SDMMC_GetCmdResp1>
 8014314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014316:	69fb      	ldr	r3, [r7, #28]
}
 8014318:	4618      	mov	r0, r3
 801431a:	3720      	adds	r7, #32
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b088      	sub	sp, #32
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801432e:	2319      	movs	r3, #25
 8014330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014338:	2300      	movs	r3, #0
 801433a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801433c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014340:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014342:	f107 0308 	add.w	r3, r7, #8
 8014346:	4619      	mov	r1, r3
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f7ff fee7 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014352:	2119      	movs	r1, #25
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 f9d3 	bl	8014700 <SDMMC_GetCmdResp1>
 801435a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801435c:	69fb      	ldr	r3, [r7, #28]
}
 801435e:	4618      	mov	r0, r3
 8014360:	3720      	adds	r7, #32
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
	...

08014368 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b088      	sub	sp, #32
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014370:	2300      	movs	r3, #0
 8014372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014374:	230c      	movs	r3, #12
 8014376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014378:	f44f 7380 	mov.w	r3, #256	; 0x100
 801437c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801437e:	2300      	movs	r3, #0
 8014380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014386:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80143a0:	f107 0308 	add.w	r3, r7, #8
 80143a4:	4619      	mov	r1, r3
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7ff feb8 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80143ac:	4a0b      	ldr	r2, [pc, #44]	; (80143dc <SDMMC_CmdStopTransfer+0x74>)
 80143ae:	210c      	movs	r1, #12
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 f9a5 	bl	8014700 <SDMMC_GetCmdResp1>
 80143b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80143ca:	d101      	bne.n	80143d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80143cc:	2300      	movs	r3, #0
 80143ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80143d0:	69fb      	ldr	r3, [r7, #28]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3720      	adds	r7, #32
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	05f5e100 	.word	0x05f5e100

080143e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b088      	sub	sp, #32
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80143ee:	2307      	movs	r3, #7
 80143f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80143f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143f8:	2300      	movs	r3, #0
 80143fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014400:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014402:	f107 0308 	add.w	r3, r7, #8
 8014406:	4619      	mov	r1, r3
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff fe87 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014412:	2107      	movs	r1, #7
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f000 f973 	bl	8014700 <SDMMC_GetCmdResp1>
 801441a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801441c:	69fb      	ldr	r3, [r7, #28]
}
 801441e:	4618      	mov	r0, r3
 8014420:	3720      	adds	r7, #32
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}

08014426 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b088      	sub	sp, #32
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801442e:	2300      	movs	r3, #0
 8014430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014432:	2300      	movs	r3, #0
 8014434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8014436:	2300      	movs	r3, #0
 8014438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801443a:	2300      	movs	r3, #0
 801443c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801443e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014444:	f107 0308 	add.w	r3, r7, #8
 8014448:	4619      	mov	r1, r3
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f7ff fe66 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f000 fb97 	bl	8014b84 <SDMMC_GetCmdError>
 8014456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014458:	69fb      	ldr	r3, [r7, #28]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3720      	adds	r7, #32
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b088      	sub	sp, #32
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801446a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801446e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014470:	2308      	movs	r3, #8
 8014472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801447a:	2300      	movs	r3, #0
 801447c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801447e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014484:	f107 0308 	add.w	r3, r7, #8
 8014488:	4619      	mov	r1, r3
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f7ff fe46 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 fb29 	bl	8014ae8 <SDMMC_GetCmdResp7>
 8014496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014498:	69fb      	ldr	r3, [r7, #28]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3720      	adds	r7, #32
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b088      	sub	sp, #32
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80144b0:	2337      	movs	r3, #55	; 0x37
 80144b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ba:	2300      	movs	r3, #0
 80144bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144c4:	f107 0308 	add.w	r3, r7, #8
 80144c8:	4619      	mov	r1, r3
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff fe26 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80144d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80144d4:	2137      	movs	r1, #55	; 0x37
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 f912 	bl	8014700 <SDMMC_GetCmdResp1>
 80144dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144de:	69fb      	ldr	r3, [r7, #28]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3720      	adds	r7, #32
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b088      	sub	sp, #32
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80144f6:	2329      	movs	r3, #41	; 0x29
 80144f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014500:	2300      	movs	r3, #0
 8014502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801450a:	f107 0308 	add.w	r3, r7, #8
 801450e:	4619      	mov	r1, r3
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f7ff fe03 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 fa2e 	bl	8014978 <SDMMC_GetCmdResp3>
 801451c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801451e:	69fb      	ldr	r3, [r7, #28]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3720      	adds	r7, #32
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b088      	sub	sp, #32
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014536:	2306      	movs	r3, #6
 8014538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801453a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801453e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014540:	2300      	movs	r3, #0
 8014542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801454a:	f107 0308 	add.w	r3, r7, #8
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f7ff fde3 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8014556:	f241 3288 	movw	r2, #5000	; 0x1388
 801455a:	2106      	movs	r1, #6
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 f8cf 	bl	8014700 <SDMMC_GetCmdResp1>
 8014562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014564:	69fb      	ldr	r3, [r7, #28]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3720      	adds	r7, #32
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b088      	sub	sp, #32
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014576:	2300      	movs	r3, #0
 8014578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801457a:	2333      	movs	r3, #51	; 0x33
 801457c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801457e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014584:	2300      	movs	r3, #0
 8014586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801458c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801458e:	f107 0308 	add.w	r3, r7, #8
 8014592:	4619      	mov	r1, r3
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7ff fdc1 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801459a:	f241 3288 	movw	r2, #5000	; 0x1388
 801459e:	2133      	movs	r1, #51	; 0x33
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f000 f8ad 	bl	8014700 <SDMMC_GetCmdResp1>
 80145a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145a8:	69fb      	ldr	r3, [r7, #28]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3720      	adds	r7, #32
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b088      	sub	sp, #32
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80145ba:	2300      	movs	r3, #0
 80145bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80145be:	2302      	movs	r3, #2
 80145c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80145c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80145c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145c8:	2300      	movs	r3, #0
 80145ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145d2:	f107 0308 	add.w	r3, r7, #8
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff fd9f 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 f980 	bl	80148e4 <SDMMC_GetCmdResp2>
 80145e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145e6:	69fb      	ldr	r3, [r7, #28]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3720      	adds	r7, #32
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80145fe:	2309      	movs	r3, #9
 8014600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014608:	2300      	movs	r3, #0
 801460a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801460c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014610:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014612:	f107 0308 	add.w	r3, r7, #8
 8014616:	4619      	mov	r1, r3
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7ff fd7f 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 f960 	bl	80148e4 <SDMMC_GetCmdResp2>
 8014624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014626:	69fb      	ldr	r3, [r7, #28]
}
 8014628:	4618      	mov	r0, r3
 801462a:	3720      	adds	r7, #32
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b088      	sub	sp, #32
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801463a:	2300      	movs	r3, #0
 801463c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801463e:	2303      	movs	r3, #3
 8014640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014648:	2300      	movs	r3, #0
 801464a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801464c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014652:	f107 0308 	add.w	r3, r7, #8
 8014656:	4619      	mov	r1, r3
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f7ff fd5f 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801465e:	683a      	ldr	r2, [r7, #0]
 8014660:	2103      	movs	r1, #3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 f9c8 	bl	80149f8 <SDMMC_GetCmdResp6>
 8014668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801466a:	69fb      	ldr	r3, [r7, #28]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3720      	adds	r7, #32
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b088      	sub	sp, #32
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8014682:	230d      	movs	r3, #13
 8014684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014686:	f44f 7380 	mov.w	r3, #256	; 0x100
 801468a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801468c:	2300      	movs	r3, #0
 801468e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014696:	f107 0308 	add.w	r3, r7, #8
 801469a:	4619      	mov	r1, r3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff fd3d 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80146a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80146a6:	210d      	movs	r1, #13
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 f829 	bl	8014700 <SDMMC_GetCmdResp1>
 80146ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146b0:	69fb      	ldr	r3, [r7, #28]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3720      	adds	r7, #32
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b088      	sub	sp, #32
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80146c2:	2300      	movs	r3, #0
 80146c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80146c6:	230d      	movs	r3, #13
 80146c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146d0:	2300      	movs	r3, #0
 80146d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146da:	f107 0308 	add.w	r3, r7, #8
 80146de:	4619      	mov	r1, r3
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7ff fd1b 	bl	801411c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80146e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80146ea:	210d      	movs	r1, #13
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f000 f807 	bl	8014700 <SDMMC_GetCmdResp1>
 80146f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146f4:	69fb      	ldr	r3, [r7, #28]
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3720      	adds	r7, #32
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
	...

08014700 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b088      	sub	sp, #32
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	460b      	mov	r3, r1
 801470a:	607a      	str	r2, [r7, #4]
 801470c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801470e:	4b70      	ldr	r3, [pc, #448]	; (80148d0 <SDMMC_GetCmdResp1+0x1d0>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a70      	ldr	r2, [pc, #448]	; (80148d4 <SDMMC_GetCmdResp1+0x1d4>)
 8014714:	fba2 2303 	umull	r2, r3, r2, r3
 8014718:	0a5a      	lsrs	r2, r3, #9
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	fb02 f303 	mul.w	r3, r2, r3
 8014720:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	1e5a      	subs	r2, r3, #1
 8014726:	61fa      	str	r2, [r7, #28]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d102      	bne.n	8014732 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801472c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014730:	e0c9      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014736:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014738:	69ba      	ldr	r2, [r7, #24]
 801473a:	4b67      	ldr	r3, [pc, #412]	; (80148d8 <SDMMC_GetCmdResp1+0x1d8>)
 801473c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801473e:	2b00      	cmp	r3, #0
 8014740:	d0ef      	beq.n	8014722 <SDMMC_GetCmdResp1+0x22>
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014748:	2b00      	cmp	r3, #0
 801474a:	d1ea      	bne.n	8014722 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014750:	f003 0304 	and.w	r3, r3, #4
 8014754:	2b00      	cmp	r3, #0
 8014756:	d004      	beq.n	8014762 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2204      	movs	r2, #4
 801475c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801475e:	2304      	movs	r3, #4
 8014760:	e0b1      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014766:	f003 0301 	and.w	r3, r3, #1
 801476a:	2b00      	cmp	r3, #0
 801476c:	d004      	beq.n	8014778 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2201      	movs	r2, #1
 8014772:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014774:	2301      	movs	r3, #1
 8014776:	e0a6      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	4a58      	ldr	r2, [pc, #352]	; (80148dc <SDMMC_GetCmdResp1+0x1dc>)
 801477c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f7ff fcf6 	bl	8014170 <SDMMC_GetCommandResponse>
 8014784:	4603      	mov	r3, r0
 8014786:	461a      	mov	r2, r3
 8014788:	7afb      	ldrb	r3, [r7, #11]
 801478a:	4293      	cmp	r3, r2
 801478c:	d001      	beq.n	8014792 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801478e:	2301      	movs	r3, #1
 8014790:	e099      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014792:	2100      	movs	r1, #0
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f7ff fcf8 	bl	801418a <SDMMC_GetResponse>
 801479a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801479c:	697a      	ldr	r2, [r7, #20]
 801479e:	4b50      	ldr	r3, [pc, #320]	; (80148e0 <SDMMC_GetCmdResp1+0x1e0>)
 80147a0:	4013      	ands	r3, r2
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d101      	bne.n	80147aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80147a6:	2300      	movs	r3, #0
 80147a8:	e08d      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	da02      	bge.n	80147b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80147b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80147b4:	e087      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d001      	beq.n	80147c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80147c0:	2340      	movs	r3, #64	; 0x40
 80147c2:	e080      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d001      	beq.n	80147d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80147ce:	2380      	movs	r3, #128	; 0x80
 80147d0:	e079      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80147dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80147e0:	e071      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d002      	beq.n	80147f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80147ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147f0:	e069      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80147fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014800:	e061      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014808:	2b00      	cmp	r3, #0
 801480a:	d002      	beq.n	8014812 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801480c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014810:	e059      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801481c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014820:	e051      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014828:	2b00      	cmp	r3, #0
 801482a:	d002      	beq.n	8014832 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801482c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014830:	e049      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801483c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014840:	e041      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014842:	697b      	ldr	r3, [r7, #20]
 8014844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801484c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014850:	e039      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014858:	2b00      	cmp	r3, #0
 801485a:	d002      	beq.n	8014862 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801485c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014860:	e031      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014868:	2b00      	cmp	r3, #0
 801486a:	d002      	beq.n	8014872 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801486c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014870:	e029      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014878:	2b00      	cmp	r3, #0
 801487a:	d002      	beq.n	8014882 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801487c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014880:	e021      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801488c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014890:	e019      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014898:	2b00      	cmp	r3, #0
 801489a:	d002      	beq.n	80148a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801489c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80148a0:	e011      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d002      	beq.n	80148b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80148ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80148b0:	e009      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	f003 0308 	and.w	r3, r3, #8
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d002      	beq.n	80148c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80148bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80148c0:	e001      	b.n	80148c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80148c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3720      	adds	r7, #32
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	20000020 	.word	0x20000020
 80148d4:	10624dd3 	.word	0x10624dd3
 80148d8:	00200045 	.word	0x00200045
 80148dc:	002000c5 	.word	0x002000c5
 80148e0:	fdffe008 	.word	0xfdffe008

080148e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80148ec:	4b1f      	ldr	r3, [pc, #124]	; (801496c <SDMMC_GetCmdResp2+0x88>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	4a1f      	ldr	r2, [pc, #124]	; (8014970 <SDMMC_GetCmdResp2+0x8c>)
 80148f2:	fba2 2303 	umull	r2, r3, r2, r3
 80148f6:	0a5b      	lsrs	r3, r3, #9
 80148f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80148fc:	fb02 f303 	mul.w	r3, r2, r3
 8014900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	1e5a      	subs	r2, r3, #1
 8014906:	60fa      	str	r2, [r7, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d102      	bne.n	8014912 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801490c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014910:	e026      	b.n	8014960 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014916:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801491e:	2b00      	cmp	r3, #0
 8014920:	d0ef      	beq.n	8014902 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014928:	2b00      	cmp	r3, #0
 801492a:	d1ea      	bne.n	8014902 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014930:	f003 0304 	and.w	r3, r3, #4
 8014934:	2b00      	cmp	r3, #0
 8014936:	d004      	beq.n	8014942 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2204      	movs	r2, #4
 801493c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801493e:	2304      	movs	r3, #4
 8014940:	e00e      	b.n	8014960 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014946:	f003 0301 	and.w	r3, r3, #1
 801494a:	2b00      	cmp	r3, #0
 801494c:	d004      	beq.n	8014958 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2201      	movs	r2, #1
 8014952:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014954:	2301      	movs	r3, #1
 8014956:	e003      	b.n	8014960 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	4a06      	ldr	r2, [pc, #24]	; (8014974 <SDMMC_GetCmdResp2+0x90>)
 801495c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801495e:	2300      	movs	r3, #0
}
 8014960:	4618      	mov	r0, r3
 8014962:	3714      	adds	r7, #20
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr
 801496c:	20000020 	.word	0x20000020
 8014970:	10624dd3 	.word	0x10624dd3
 8014974:	002000c5 	.word	0x002000c5

08014978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014978:	b480      	push	{r7}
 801497a:	b085      	sub	sp, #20
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014980:	4b1a      	ldr	r3, [pc, #104]	; (80149ec <SDMMC_GetCmdResp3+0x74>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	4a1a      	ldr	r2, [pc, #104]	; (80149f0 <SDMMC_GetCmdResp3+0x78>)
 8014986:	fba2 2303 	umull	r2, r3, r2, r3
 801498a:	0a5b      	lsrs	r3, r3, #9
 801498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014990:	fb02 f303 	mul.w	r3, r2, r3
 8014994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	1e5a      	subs	r2, r3, #1
 801499a:	60fa      	str	r2, [r7, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d102      	bne.n	80149a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80149a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80149a4:	e01b      	b.n	80149de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d0ef      	beq.n	8014996 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1ea      	bne.n	8014996 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149c4:	f003 0304 	and.w	r3, r3, #4
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d004      	beq.n	80149d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2204      	movs	r2, #4
 80149d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149d2:	2304      	movs	r3, #4
 80149d4:	e003      	b.n	80149de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	4a06      	ldr	r2, [pc, #24]	; (80149f4 <SDMMC_GetCmdResp3+0x7c>)
 80149da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80149dc:	2300      	movs	r3, #0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3714      	adds	r7, #20
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	20000020 	.word	0x20000020
 80149f0:	10624dd3 	.word	0x10624dd3
 80149f4:	002000c5 	.word	0x002000c5

080149f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b088      	sub	sp, #32
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	460b      	mov	r3, r1
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014a06:	4b35      	ldr	r3, [pc, #212]	; (8014adc <SDMMC_GetCmdResp6+0xe4>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4a35      	ldr	r2, [pc, #212]	; (8014ae0 <SDMMC_GetCmdResp6+0xe8>)
 8014a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8014a10:	0a5b      	lsrs	r3, r3, #9
 8014a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a16:	fb02 f303 	mul.w	r3, r2, r3
 8014a1a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	1e5a      	subs	r2, r3, #1
 8014a20:	61fa      	str	r2, [r7, #28]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d102      	bne.n	8014a2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014a2a:	e052      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a30:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d0ef      	beq.n	8014a1c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d1ea      	bne.n	8014a1c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a4a:	f003 0304 	and.w	r3, r3, #4
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d004      	beq.n	8014a5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2204      	movs	r2, #4
 8014a56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a58:	2304      	movs	r3, #4
 8014a5a:	e03a      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a60:	f003 0301 	and.w	r3, r3, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d004      	beq.n	8014a72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a6e:	2301      	movs	r3, #1
 8014a70:	e02f      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014a72:	68f8      	ldr	r0, [r7, #12]
 8014a74:	f7ff fb7c 	bl	8014170 <SDMMC_GetCommandResponse>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	7afb      	ldrb	r3, [r7, #11]
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d001      	beq.n	8014a86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a82:	2301      	movs	r3, #1
 8014a84:	e025      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	4a16      	ldr	r2, [pc, #88]	; (8014ae4 <SDMMC_GetCmdResp6+0xec>)
 8014a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014a8c:	2100      	movs	r1, #0
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f7ff fb7b 	bl	801418a <SDMMC_GetResponse>
 8014a94:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d106      	bne.n	8014aae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	0c1b      	lsrs	r3, r3, #16
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	e011      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d002      	beq.n	8014abe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014abc:	e009      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014acc:	e001      	b.n	8014ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3720      	adds	r7, #32
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	20000020 	.word	0x20000020
 8014ae0:	10624dd3 	.word	0x10624dd3
 8014ae4:	002000c5 	.word	0x002000c5

08014ae8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014af0:	4b22      	ldr	r3, [pc, #136]	; (8014b7c <SDMMC_GetCmdResp7+0x94>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a22      	ldr	r2, [pc, #136]	; (8014b80 <SDMMC_GetCmdResp7+0x98>)
 8014af6:	fba2 2303 	umull	r2, r3, r2, r3
 8014afa:	0a5b      	lsrs	r3, r3, #9
 8014afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b00:	fb02 f303 	mul.w	r3, r2, r3
 8014b04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	1e5a      	subs	r2, r3, #1
 8014b0a:	60fa      	str	r2, [r7, #12]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d102      	bne.n	8014b16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b14:	e02c      	b.n	8014b70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d0ef      	beq.n	8014b06 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1ea      	bne.n	8014b06 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b34:	f003 0304 	and.w	r3, r3, #4
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d004      	beq.n	8014b46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2204      	movs	r2, #4
 8014b40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b42:	2304      	movs	r3, #4
 8014b44:	e014      	b.n	8014b70 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b4a:	f003 0301 	and.w	r3, r3, #1
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d004      	beq.n	8014b5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2201      	movs	r2, #1
 8014b56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e009      	b.n	8014b70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2240      	movs	r2, #64	; 0x40
 8014b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014b6e:	2300      	movs	r3, #0

}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3714      	adds	r7, #20
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr
 8014b7c:	20000020 	.word	0x20000020
 8014b80:	10624dd3 	.word	0x10624dd3

08014b84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014b84:	b480      	push	{r7}
 8014b86:	b085      	sub	sp, #20
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b8c:	4b11      	ldr	r3, [pc, #68]	; (8014bd4 <SDMMC_GetCmdError+0x50>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	4a11      	ldr	r2, [pc, #68]	; (8014bd8 <SDMMC_GetCmdError+0x54>)
 8014b92:	fba2 2303 	umull	r2, r3, r2, r3
 8014b96:	0a5b      	lsrs	r3, r3, #9
 8014b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b9c:	fb02 f303 	mul.w	r3, r2, r3
 8014ba0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	1e5a      	subs	r2, r3, #1
 8014ba6:	60fa      	str	r2, [r7, #12]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d102      	bne.n	8014bb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014bb0:	e009      	b.n	8014bc6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d0f1      	beq.n	8014ba2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	4a06      	ldr	r2, [pc, #24]	; (8014bdc <SDMMC_GetCmdError+0x58>)
 8014bc2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014bc4:	2300      	movs	r3, #0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3714      	adds	r7, #20
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	20000020 	.word	0x20000020
 8014bd8:	10624dd3 	.word	0x10624dd3
 8014bdc:	002000c5 	.word	0x002000c5

08014be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014be0:	b084      	sub	sp, #16
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b084      	sub	sp, #16
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
 8014bea:	f107 001c 	add.w	r0, r7, #28
 8014bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d120      	bne.n	8014c3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	68da      	ldr	r2, [r3, #12]
 8014c08:	4b2a      	ldr	r3, [pc, #168]	; (8014cb4 <USB_CoreInit+0xd4>)
 8014c0a:	4013      	ands	r3, r2
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d105      	bne.n	8014c2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f000 f9ee 	bl	8015010 <USB_CoreReset>
 8014c34:	4603      	mov	r3, r0
 8014c36:	73fb      	strb	r3, [r7, #15]
 8014c38:	e01a      	b.n	8014c70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	68db      	ldr	r3, [r3, #12]
 8014c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 f9e2 	bl	8015010 <USB_CoreReset>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d106      	bne.n	8014c64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	639a      	str	r2, [r3, #56]	; 0x38
 8014c62:	e005      	b.n	8014c70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d116      	bne.n	8014ca4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014c84:	4b0c      	ldr	r3, [pc, #48]	; (8014cb8 <USB_CoreInit+0xd8>)
 8014c86:	4313      	orrs	r3, r2
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	689b      	ldr	r3, [r3, #8]
 8014c90:	f043 0206 	orr.w	r2, r3, #6
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	689b      	ldr	r3, [r3, #8]
 8014c9c:	f043 0220 	orr.w	r2, r3, #32
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3710      	adds	r7, #16
 8014caa:	46bd      	mov	sp, r7
 8014cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014cb0:	b004      	add	sp, #16
 8014cb2:	4770      	bx	lr
 8014cb4:	ffbdffbf 	.word	0xffbdffbf
 8014cb8:	03ee0000 	.word	0x03ee0000

08014cbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	689b      	ldr	r3, [r3, #8]
 8014cc8:	f043 0201 	orr.w	r2, r3, #1
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014cd0:	2300      	movs	r3, #0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	370c      	adds	r7, #12
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr

08014cde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cde:	b480      	push	{r7}
 8014ce0:	b083      	sub	sp, #12
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	f023 0201 	bic.w	r2, r3, #1
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	370c      	adds	r7, #12
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr

08014d00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	68db      	ldr	r3, [r3, #12]
 8014d14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014d1c:	78fb      	ldrb	r3, [r7, #3]
 8014d1e:	2b01      	cmp	r3, #1
 8014d20:	d115      	bne.n	8014d4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	68db      	ldr	r3, [r3, #12]
 8014d26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014d2e:	2001      	movs	r0, #1
 8014d30:	f7f0 faac 	bl	800528c <HAL_Delay>
      ms++;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	3301      	adds	r3, #1
 8014d38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f000 f95a 	bl	8014ff4 <USB_GetMode>
 8014d40:	4603      	mov	r3, r0
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	d01e      	beq.n	8014d84 <USB_SetCurrentMode+0x84>
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2b31      	cmp	r3, #49	; 0x31
 8014d4a:	d9f0      	bls.n	8014d2e <USB_SetCurrentMode+0x2e>
 8014d4c:	e01a      	b.n	8014d84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014d4e:	78fb      	ldrb	r3, [r7, #3]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d115      	bne.n	8014d80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014d60:	2001      	movs	r0, #1
 8014d62:	f7f0 fa93 	bl	800528c <HAL_Delay>
      ms++;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f000 f941 	bl	8014ff4 <USB_GetMode>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d005      	beq.n	8014d84 <USB_SetCurrentMode+0x84>
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b31      	cmp	r3, #49	; 0x31
 8014d7c:	d9f0      	bls.n	8014d60 <USB_SetCurrentMode+0x60>
 8014d7e:	e001      	b.n	8014d84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014d80:	2301      	movs	r3, #1
 8014d82:	e005      	b.n	8014d90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2b32      	cmp	r3, #50	; 0x32
 8014d88:	d101      	bne.n	8014d8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e000      	b.n	8014d90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014d8e:	2300      	movs	r3, #0
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3710      	adds	r7, #16
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014da2:	2300      	movs	r3, #0
 8014da4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	3301      	adds	r3, #1
 8014daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	4a13      	ldr	r2, [pc, #76]	; (8014dfc <USB_FlushTxFifo+0x64>)
 8014db0:	4293      	cmp	r3, r2
 8014db2:	d901      	bls.n	8014db8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014db4:	2303      	movs	r3, #3
 8014db6:	e01b      	b.n	8014df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	691b      	ldr	r3, [r3, #16]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	daf2      	bge.n	8014da6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	019b      	lsls	r3, r3, #6
 8014dc8:	f043 0220 	orr.w	r2, r3, #32
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	4a08      	ldr	r2, [pc, #32]	; (8014dfc <USB_FlushTxFifo+0x64>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d901      	bls.n	8014de2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014dde:	2303      	movs	r3, #3
 8014de0:	e006      	b.n	8014df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	691b      	ldr	r3, [r3, #16]
 8014de6:	f003 0320 	and.w	r3, r3, #32
 8014dea:	2b20      	cmp	r3, #32
 8014dec:	d0f0      	beq.n	8014dd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014dee:	2300      	movs	r3, #0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3714      	adds	r7, #20
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr
 8014dfc:	00030d40 	.word	0x00030d40

08014e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014e00:	b480      	push	{r7}
 8014e02:	b085      	sub	sp, #20
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	4a11      	ldr	r2, [pc, #68]	; (8014e5c <USB_FlushRxFifo+0x5c>)
 8014e16:	4293      	cmp	r3, r2
 8014e18:	d901      	bls.n	8014e1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014e1a:	2303      	movs	r3, #3
 8014e1c:	e018      	b.n	8014e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	daf2      	bge.n	8014e0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014e26:	2300      	movs	r3, #0
 8014e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2210      	movs	r2, #16
 8014e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	3301      	adds	r3, #1
 8014e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	4a08      	ldr	r2, [pc, #32]	; (8014e5c <USB_FlushRxFifo+0x5c>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d901      	bls.n	8014e42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014e3e:	2303      	movs	r3, #3
 8014e40:	e006      	b.n	8014e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	691b      	ldr	r3, [r3, #16]
 8014e46:	f003 0310 	and.w	r3, r3, #16
 8014e4a:	2b10      	cmp	r3, #16
 8014e4c:	d0f0      	beq.n	8014e30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3714      	adds	r7, #20
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr
 8014e5c:	00030d40 	.word	0x00030d40

08014e60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b089      	sub	sp, #36	; 0x24
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	4611      	mov	r1, r2
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	460b      	mov	r3, r1
 8014e70:	71fb      	strb	r3, [r7, #7]
 8014e72:	4613      	mov	r3, r2
 8014e74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d123      	bne.n	8014ece <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e86:	88bb      	ldrh	r3, [r7, #4]
 8014e88:	3303      	adds	r3, #3
 8014e8a:	089b      	lsrs	r3, r3, #2
 8014e8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014e8e:	2300      	movs	r3, #0
 8014e90:	61bb      	str	r3, [r7, #24]
 8014e92:	e018      	b.n	8014ec6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e94:	79fb      	ldrb	r3, [r7, #7]
 8014e96:	031a      	lsls	r2, r3, #12
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	4413      	add	r3, r2
 8014e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014ec0:	69bb      	ldr	r3, [r7, #24]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	61bb      	str	r3, [r7, #24]
 8014ec6:	69ba      	ldr	r2, [r7, #24]
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d3e2      	bcc.n	8014e94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014ece:	2300      	movs	r3, #0
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3724      	adds	r7, #36	; 0x24
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b08b      	sub	sp, #44	; 0x2c
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014ef2:	88fb      	ldrh	r3, [r7, #6]
 8014ef4:	089b      	lsrs	r3, r3, #2
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014efa:	88fb      	ldrh	r3, [r7, #6]
 8014efc:	f003 0303 	and.w	r3, r3, #3
 8014f00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014f02:	2300      	movs	r3, #0
 8014f04:	623b      	str	r3, [r7, #32]
 8014f06:	e014      	b.n	8014f32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014f08:	69bb      	ldr	r3, [r7, #24]
 8014f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f12:	601a      	str	r2, [r3, #0]
    pDest++;
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	3301      	adds	r3, #1
 8014f18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	3301      	adds	r3, #1
 8014f24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	3301      	adds	r3, #1
 8014f2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014f2c:	6a3b      	ldr	r3, [r7, #32]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	623b      	str	r3, [r7, #32]
 8014f32:	6a3a      	ldr	r2, [r7, #32]
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d3e6      	bcc.n	8014f08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014f3a:	8bfb      	ldrh	r3, [r7, #30]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d01e      	beq.n	8014f7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014f40:	2300      	movs	r3, #0
 8014f42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	f107 0310 	add.w	r3, r7, #16
 8014f50:	6812      	ldr	r2, [r2, #0]
 8014f52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014f54:	693a      	ldr	r2, [r7, #16]
 8014f56:	6a3b      	ldr	r3, [r7, #32]
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f64:	701a      	strb	r2, [r3, #0]
      i++;
 8014f66:	6a3b      	ldr	r3, [r7, #32]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8014f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6e:	3301      	adds	r3, #1
 8014f70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014f72:	8bfb      	ldrh	r3, [r7, #30]
 8014f74:	3b01      	subs	r3, #1
 8014f76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014f78:	8bfb      	ldrh	r3, [r7, #30]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1ea      	bne.n	8014f54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	372c      	adds	r7, #44	; 0x2c
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b085      	sub	sp, #20
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	695b      	ldr	r3, [r3, #20]
 8014f98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	699b      	ldr	r3, [r3, #24]
 8014f9e:	68fa      	ldr	r2, [r7, #12]
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3714      	adds	r7, #20
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr

08014fb2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014fb2:	b480      	push	{r7}
 8014fb4:	b085      	sub	sp, #20
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
 8014fba:	460b      	mov	r3, r1
 8014fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014fc2:	78fb      	ldrb	r3, [r7, #3]
 8014fc4:	015a      	lsls	r2, r3, #5
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fce:	689b      	ldr	r3, [r3, #8]
 8014fd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014fd2:	78fb      	ldrb	r3, [r7, #3]
 8014fd4:	015a      	lsls	r2, r3, #5
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	4413      	add	r3, r2
 8014fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	68ba      	ldr	r2, [r7, #8]
 8014fe2:	4013      	ands	r3, r2
 8014fe4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014fe6:	68bb      	ldr	r3, [r7, #8]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3714      	adds	r7, #20
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	695b      	ldr	r3, [r3, #20]
 8015000:	f003 0301 	and.w	r3, r3, #1
}
 8015004:	4618      	mov	r0, r3
 8015006:	370c      	adds	r7, #12
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015010:	b480      	push	{r7}
 8015012:	b085      	sub	sp, #20
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015018:	2300      	movs	r3, #0
 801501a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	3301      	adds	r3, #1
 8015020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	4a13      	ldr	r2, [pc, #76]	; (8015074 <USB_CoreReset+0x64>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d901      	bls.n	801502e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801502a:	2303      	movs	r3, #3
 801502c:	e01b      	b.n	8015066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	691b      	ldr	r3, [r3, #16]
 8015032:	2b00      	cmp	r3, #0
 8015034:	daf2      	bge.n	801501c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015036:	2300      	movs	r3, #0
 8015038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	f043 0201 	orr.w	r2, r3, #1
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	3301      	adds	r3, #1
 801504a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	4a09      	ldr	r2, [pc, #36]	; (8015074 <USB_CoreReset+0x64>)
 8015050:	4293      	cmp	r3, r2
 8015052:	d901      	bls.n	8015058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015054:	2303      	movs	r3, #3
 8015056:	e006      	b.n	8015066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	691b      	ldr	r3, [r3, #16]
 801505c:	f003 0301 	and.w	r3, r3, #1
 8015060:	2b01      	cmp	r3, #1
 8015062:	d0f0      	beq.n	8015046 <USB_CoreReset+0x36>

  return HAL_OK;
 8015064:	2300      	movs	r3, #0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3714      	adds	r7, #20
 801506a:	46bd      	mov	sp, r7
 801506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	00030d40 	.word	0x00030d40

08015078 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015078:	b084      	sub	sp, #16
 801507a:	b580      	push	{r7, lr}
 801507c:	b086      	sub	sp, #24
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801508a:	2300      	movs	r3, #0
 801508c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015098:	461a      	mov	r2, r3
 801509a:	2300      	movs	r3, #0
 801509c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d018      	beq.n	80150f4 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80150c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d10a      	bne.n	80150de <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	68fa      	ldr	r2, [r7, #12]
 80150d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80150d6:	f043 0304 	orr.w	r3, r3, #4
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	e014      	b.n	8015108 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80150ec:	f023 0304 	bic.w	r3, r3, #4
 80150f0:	6013      	str	r3, [r2, #0]
 80150f2:	e009      	b.n	8015108 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015102:	f023 0304 	bic.w	r3, r3, #4
 8015106:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015108:	2110      	movs	r1, #16
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff fe44 	bl	8014d98 <USB_FlushTxFifo>
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d001      	beq.n	801511a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8015116:	2301      	movs	r3, #1
 8015118:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f7ff fe70 	bl	8014e00 <USB_FlushRxFifo>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	d001      	beq.n	801512a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8015126:	2301      	movs	r3, #1
 8015128:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801512a:	2300      	movs	r3, #0
 801512c:	613b      	str	r3, [r7, #16]
 801512e:	e015      	b.n	801515c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	015a      	lsls	r2, r3, #5
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	4413      	add	r3, r2
 8015138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801513c:	461a      	mov	r2, r3
 801513e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015142:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	015a      	lsls	r2, r3, #5
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	4413      	add	r3, r2
 801514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015150:	461a      	mov	r2, r3
 8015152:	2300      	movs	r3, #0
 8015154:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	3301      	adds	r3, #1
 801515a:	613b      	str	r3, [r7, #16]
 801515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515e:	693a      	ldr	r2, [r7, #16]
 8015160:	429a      	cmp	r2, r3
 8015162:	d3e5      	bcc.n	8015130 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2200      	movs	r2, #0
 8015168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015170:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00b      	beq.n	8015196 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015184:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	4a13      	ldr	r2, [pc, #76]	; (80151d8 <USB_HostInit+0x160>)
 801518a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	4a13      	ldr	r2, [pc, #76]	; (80151dc <USB_HostInit+0x164>)
 8015190:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8015194:	e009      	b.n	80151aa <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2280      	movs	r2, #128	; 0x80
 801519a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4a10      	ldr	r2, [pc, #64]	; (80151e0 <USB_HostInit+0x168>)
 80151a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4a0f      	ldr	r2, [pc, #60]	; (80151e4 <USB_HostInit+0x16c>)
 80151a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80151aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d105      	bne.n	80151bc <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	699b      	ldr	r3, [r3, #24]
 80151b4:	f043 0210 	orr.w	r2, r3, #16
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	699a      	ldr	r2, [r3, #24]
 80151c0:	4b09      	ldr	r3, [pc, #36]	; (80151e8 <USB_HostInit+0x170>)
 80151c2:	4313      	orrs	r3, r2
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80151c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3718      	adds	r7, #24
 80151ce:	46bd      	mov	sp, r7
 80151d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80151d4:	b004      	add	sp, #16
 80151d6:	4770      	bx	lr
 80151d8:	01000200 	.word	0x01000200
 80151dc:	00e00300 	.word	0x00e00300
 80151e0:	00600080 	.word	0x00600080
 80151e4:	004000e0 	.word	0x004000e0
 80151e8:	a3200008 	.word	0xa3200008

080151ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b085      	sub	sp, #20
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	460b      	mov	r3, r1
 80151f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	68fa      	ldr	r2, [r7, #12]
 8015206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801520a:	f023 0303 	bic.w	r3, r3, #3
 801520e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	78fb      	ldrb	r3, [r7, #3]
 801521a:	f003 0303 	and.w	r3, r3, #3
 801521e:	68f9      	ldr	r1, [r7, #12]
 8015220:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8015224:	4313      	orrs	r3, r2
 8015226:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8015228:	78fb      	ldrb	r3, [r7, #3]
 801522a:	2b01      	cmp	r3, #1
 801522c:	d107      	bne.n	801523e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015234:	461a      	mov	r2, r3
 8015236:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801523a:	6053      	str	r3, [r2, #4]
 801523c:	e00c      	b.n	8015258 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801523e:	78fb      	ldrb	r3, [r7, #3]
 8015240:	2b02      	cmp	r3, #2
 8015242:	d107      	bne.n	8015254 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801524a:	461a      	mov	r2, r3
 801524c:	f241 7370 	movw	r3, #6000	; 0x1770
 8015250:	6053      	str	r3, [r2, #4]
 8015252:	e001      	b.n	8015258 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8015254:	2301      	movs	r3, #1
 8015256:	e000      	b.n	801525a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3714      	adds	r7, #20
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr

08015266 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8015272:	2300      	movs	r3, #0
 8015274:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015286:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	68fa      	ldr	r2, [r7, #12]
 801528c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015294:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8015296:	2064      	movs	r0, #100	; 0x64
 8015298:	f7ef fff8 	bl	800528c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80152a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80152aa:	200a      	movs	r0, #10
 80152ac:	f7ef ffee 	bl	800528c <HAL_Delay>

  return HAL_OK;
 80152b0:	2300      	movs	r3, #0
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3710      	adds	r7, #16
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}

080152ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80152ba:	b480      	push	{r7}
 80152bc:	b085      	sub	sp, #20
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
 80152c2:	460b      	mov	r3, r1
 80152c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80152ca:	2300      	movs	r3, #0
 80152cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80152de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d109      	bne.n	80152fe <USB_DriveVbus+0x44>
 80152ea:	78fb      	ldrb	r3, [r7, #3]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d106      	bne.n	80152fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	68fa      	ldr	r2, [r7, #12]
 80152f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80152f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80152fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015308:	d109      	bne.n	801531e <USB_DriveVbus+0x64>
 801530a:	78fb      	ldrb	r3, [r7, #3]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d106      	bne.n	801531e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	68fa      	ldr	r2, [r7, #12]
 8015314:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801531c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801531e:	2300      	movs	r3, #0
}
 8015320:	4618      	mov	r0, r3
 8015322:	3714      	adds	r7, #20
 8015324:	46bd      	mov	sp, r7
 8015326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532a:	4770      	bx	lr

0801532c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801532c:	b480      	push	{r7}
 801532e:	b085      	sub	sp, #20
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8015338:	2300      	movs	r3, #0
 801533a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	0c5b      	lsrs	r3, r3, #17
 801534a:	f003 0303 	and.w	r3, r3, #3
}
 801534e:	4618      	mov	r0, r3
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr

0801535a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 801535a:	b480      	push	{r7}
 801535c:	b085      	sub	sp, #20
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801536c:	689b      	ldr	r3, [r3, #8]
 801536e:	b29b      	uxth	r3, r3
}
 8015370:	4618      	mov	r0, r3
 8015372:	3714      	adds	r7, #20
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b088      	sub	sp, #32
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	4608      	mov	r0, r1
 8015386:	4611      	mov	r1, r2
 8015388:	461a      	mov	r2, r3
 801538a:	4603      	mov	r3, r0
 801538c:	70fb      	strb	r3, [r7, #3]
 801538e:	460b      	mov	r3, r1
 8015390:	70bb      	strb	r3, [r7, #2]
 8015392:	4613      	mov	r3, r2
 8015394:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8015396:	2300      	movs	r3, #0
 8015398:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801539e:	78fb      	ldrb	r3, [r7, #3]
 80153a0:	015a      	lsls	r2, r3, #5
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	4413      	add	r3, r2
 80153a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153aa:	461a      	mov	r2, r3
 80153ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80153b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80153b6:	2b03      	cmp	r3, #3
 80153b8:	d87e      	bhi.n	80154b8 <USB_HC_Init+0x13c>
 80153ba:	a201      	add	r2, pc, #4	; (adr r2, 80153c0 <USB_HC_Init+0x44>)
 80153bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c0:	080153d1 	.word	0x080153d1
 80153c4:	0801547b 	.word	0x0801547b
 80153c8:	080153d1 	.word	0x080153d1
 80153cc:	0801543d 	.word	0x0801543d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80153d0:	78fb      	ldrb	r3, [r7, #3]
 80153d2:	015a      	lsls	r2, r3, #5
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	4413      	add	r3, r2
 80153d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153dc:	461a      	mov	r2, r3
 80153de:	f240 439d 	movw	r3, #1181	; 0x49d
 80153e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80153e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	da10      	bge.n	801540e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80153ec:	78fb      	ldrb	r3, [r7, #3]
 80153ee:	015a      	lsls	r2, r3, #5
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	4413      	add	r3, r2
 80153f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	78fa      	ldrb	r2, [r7, #3]
 80153fc:	0151      	lsls	r1, r2, #5
 80153fe:	693a      	ldr	r2, [r7, #16]
 8015400:	440a      	add	r2, r1
 8015402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801540a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 801540c:	e057      	b.n	80154be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015416:	2b00      	cmp	r3, #0
 8015418:	d051      	beq.n	80154be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 801541a:	78fb      	ldrb	r3, [r7, #3]
 801541c:	015a      	lsls	r2, r3, #5
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	4413      	add	r3, r2
 8015422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	78fa      	ldrb	r2, [r7, #3]
 801542a:	0151      	lsls	r1, r2, #5
 801542c:	693a      	ldr	r2, [r7, #16]
 801542e:	440a      	add	r2, r1
 8015430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015434:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8015438:	60d3      	str	r3, [r2, #12]
      break;
 801543a:	e040      	b.n	80154be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801543c:	78fb      	ldrb	r3, [r7, #3]
 801543e:	015a      	lsls	r2, r3, #5
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	4413      	add	r3, r2
 8015444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015448:	461a      	mov	r2, r3
 801544a:	f240 639d 	movw	r3, #1693	; 0x69d
 801544e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015450:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015454:	2b00      	cmp	r3, #0
 8015456:	da34      	bge.n	80154c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015458:	78fb      	ldrb	r3, [r7, #3]
 801545a:	015a      	lsls	r2, r3, #5
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	4413      	add	r3, r2
 8015460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	78fa      	ldrb	r2, [r7, #3]
 8015468:	0151      	lsls	r1, r2, #5
 801546a:	693a      	ldr	r2, [r7, #16]
 801546c:	440a      	add	r2, r1
 801546e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015476:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015478:	e023      	b.n	80154c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801547a:	78fb      	ldrb	r3, [r7, #3]
 801547c:	015a      	lsls	r2, r3, #5
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	4413      	add	r3, r2
 8015482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015486:	461a      	mov	r2, r3
 8015488:	f240 2325 	movw	r3, #549	; 0x225
 801548c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801548e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015492:	2b00      	cmp	r3, #0
 8015494:	da17      	bge.n	80154c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8015496:	78fb      	ldrb	r3, [r7, #3]
 8015498:	015a      	lsls	r2, r3, #5
 801549a:	693b      	ldr	r3, [r7, #16]
 801549c:	4413      	add	r3, r2
 801549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	78fa      	ldrb	r2, [r7, #3]
 80154a6:	0151      	lsls	r1, r2, #5
 80154a8:	693a      	ldr	r2, [r7, #16]
 80154aa:	440a      	add	r2, r1
 80154ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80154b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80154b6:	e006      	b.n	80154c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80154b8:	2301      	movs	r3, #1
 80154ba:	77fb      	strb	r3, [r7, #31]
      break;
 80154bc:	e004      	b.n	80154c8 <USB_HC_Init+0x14c>
      break;
 80154be:	bf00      	nop
 80154c0:	e002      	b.n	80154c8 <USB_HC_Init+0x14c>
      break;
 80154c2:	bf00      	nop
 80154c4:	e000      	b.n	80154c8 <USB_HC_Init+0x14c>
      break;
 80154c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80154c8:	78fb      	ldrb	r3, [r7, #3]
 80154ca:	015a      	lsls	r2, r3, #5
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	4413      	add	r3, r2
 80154d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	78fa      	ldrb	r2, [r7, #3]
 80154d8:	0151      	lsls	r1, r2, #5
 80154da:	693a      	ldr	r2, [r7, #16]
 80154dc:	440a      	add	r2, r1
 80154de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154e2:	f043 0302 	orr.w	r3, r3, #2
 80154e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80154ee:	699a      	ldr	r2, [r3, #24]
 80154f0:	78fb      	ldrb	r3, [r7, #3]
 80154f2:	f003 030f 	and.w	r3, r3, #15
 80154f6:	2101      	movs	r1, #1
 80154f8:	fa01 f303 	lsl.w	r3, r1, r3
 80154fc:	6939      	ldr	r1, [r7, #16]
 80154fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8015502:	4313      	orrs	r3, r2
 8015504:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	699b      	ldr	r3, [r3, #24]
 801550a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8015512:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015516:	2b00      	cmp	r3, #0
 8015518:	da03      	bge.n	8015522 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801551e:	61bb      	str	r3, [r7, #24]
 8015520:	e001      	b.n	8015526 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8015522:	2300      	movs	r3, #0
 8015524:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7ff ff00 	bl	801532c <USB_GetHostSpeed>
 801552c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801552e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015532:	2b02      	cmp	r3, #2
 8015534:	d106      	bne.n	8015544 <USB_HC_Init+0x1c8>
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	2b02      	cmp	r3, #2
 801553a:	d003      	beq.n	8015544 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801553c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015540:	617b      	str	r3, [r7, #20]
 8015542:	e001      	b.n	8015548 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8015544:	2300      	movs	r3, #0
 8015546:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015548:	787b      	ldrb	r3, [r7, #1]
 801554a:	059b      	lsls	r3, r3, #22
 801554c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015550:	78bb      	ldrb	r3, [r7, #2]
 8015552:	02db      	lsls	r3, r3, #11
 8015554:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015558:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801555a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801555e:	049b      	lsls	r3, r3, #18
 8015560:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015564:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8015566:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015568:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801556c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	431a      	orrs	r2, r3
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015576:	78fa      	ldrb	r2, [r7, #3]
 8015578:	0151      	lsls	r1, r2, #5
 801557a:	693a      	ldr	r2, [r7, #16]
 801557c:	440a      	add	r2, r1
 801557e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8015582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015586:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8015588:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801558c:	2b03      	cmp	r3, #3
 801558e:	d003      	beq.n	8015598 <USB_HC_Init+0x21c>
 8015590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015594:	2b01      	cmp	r3, #1
 8015596:	d10f      	bne.n	80155b8 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015598:	78fb      	ldrb	r3, [r7, #3]
 801559a:	015a      	lsls	r2, r3, #5
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	4413      	add	r3, r2
 80155a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	78fa      	ldrb	r2, [r7, #3]
 80155a8:	0151      	lsls	r1, r2, #5
 80155aa:	693a      	ldr	r2, [r7, #16]
 80155ac:	440a      	add	r2, r1
 80155ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80155b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80155b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3720      	adds	r7, #32
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop

080155c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b08c      	sub	sp, #48	; 0x30
 80155c8:	af02      	add	r7, sp, #8
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	4613      	mov	r3, r2
 80155d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	785b      	ldrb	r3, [r3, #1]
 80155da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80155dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d02d      	beq.n	801564a <USB_HC_StartXfer+0x86>
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	791b      	ldrb	r3, [r3, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d129      	bne.n	801564a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80155f6:	79fb      	ldrb	r3, [r7, #7]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d117      	bne.n	801562c <USB_HC_StartXfer+0x68>
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	79db      	ldrb	r3, [r3, #7]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d003      	beq.n	801560c <USB_HC_StartXfer+0x48>
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	79db      	ldrb	r3, [r3, #7]
 8015608:	2b02      	cmp	r3, #2
 801560a:	d10f      	bne.n	801562c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	015a      	lsls	r2, r3, #5
 8015610:	6a3b      	ldr	r3, [r7, #32]
 8015612:	4413      	add	r3, r2
 8015614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	69fa      	ldr	r2, [r7, #28]
 801561c:	0151      	lsls	r1, r2, #5
 801561e:	6a3a      	ldr	r2, [r7, #32]
 8015620:	440a      	add	r2, r1
 8015622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801562a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 801562c:	79fb      	ldrb	r3, [r7, #7]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d10b      	bne.n	801564a <USB_HC_StartXfer+0x86>
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	795b      	ldrb	r3, [r3, #5]
 8015636:	2b01      	cmp	r3, #1
 8015638:	d107      	bne.n	801564a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	785b      	ldrb	r3, [r3, #1]
 801563e:	4619      	mov	r1, r3
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f000 fa0f 	bl	8015a64 <USB_DoPing>
      return HAL_OK;
 8015646:	2300      	movs	r3, #0
 8015648:	e0f8      	b.n	801583c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	695b      	ldr	r3, [r3, #20]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d018      	beq.n	8015684 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	695b      	ldr	r3, [r3, #20]
 8015656:	68ba      	ldr	r2, [r7, #8]
 8015658:	8912      	ldrh	r2, [r2, #8]
 801565a:	4413      	add	r3, r2
 801565c:	3b01      	subs	r3, #1
 801565e:	68ba      	ldr	r2, [r7, #8]
 8015660:	8912      	ldrh	r2, [r2, #8]
 8015662:	fbb3 f3f2 	udiv	r3, r3, r2
 8015666:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8015668:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801566a:	8b7b      	ldrh	r3, [r7, #26]
 801566c:	429a      	cmp	r2, r3
 801566e:	d90b      	bls.n	8015688 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8015670:	8b7b      	ldrh	r3, [r7, #26]
 8015672:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	8912      	ldrh	r2, [r2, #8]
 801567a:	fb03 f202 	mul.w	r2, r3, r2
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	611a      	str	r2, [r3, #16]
 8015682:	e001      	b.n	8015688 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8015684:	2301      	movs	r3, #1
 8015686:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	78db      	ldrb	r3, [r3, #3]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d007      	beq.n	80156a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015692:	68ba      	ldr	r2, [r7, #8]
 8015694:	8912      	ldrh	r2, [r2, #8]
 8015696:	fb03 f202 	mul.w	r2, r3, r2
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	611a      	str	r2, [r3, #16]
 801569e:	e003      	b.n	80156a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	695a      	ldr	r2, [r3, #20]
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	691b      	ldr	r3, [r3, #16]
 80156ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80156b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80156b2:	04d9      	lsls	r1, r3, #19
 80156b4:	4b63      	ldr	r3, [pc, #396]	; (8015844 <USB_HC_StartXfer+0x280>)
 80156b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	7a9b      	ldrb	r3, [r3, #10]
 80156be:	075b      	lsls	r3, r3, #29
 80156c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156c4:	69f9      	ldr	r1, [r7, #28]
 80156c6:	0148      	lsls	r0, r1, #5
 80156c8:	6a39      	ldr	r1, [r7, #32]
 80156ca:	4401      	add	r1, r0
 80156cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80156d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80156d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80156d4:	79fb      	ldrb	r3, [r7, #7]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d009      	beq.n	80156ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	68d9      	ldr	r1, [r3, #12]
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	015a      	lsls	r2, r3, #5
 80156e2:	6a3b      	ldr	r3, [r7, #32]
 80156e4:	4413      	add	r3, r2
 80156e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156ea:	460a      	mov	r2, r1
 80156ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80156ee:	6a3b      	ldr	r3, [r7, #32]
 80156f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80156f4:	689b      	ldr	r3, [r3, #8]
 80156f6:	f003 0301 	and.w	r3, r3, #1
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	bf0c      	ite	eq
 80156fe:	2301      	moveq	r3, #1
 8015700:	2300      	movne	r3, #0
 8015702:	b2db      	uxtb	r3, r3
 8015704:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	015a      	lsls	r2, r3, #5
 801570a:	6a3b      	ldr	r3, [r7, #32]
 801570c:	4413      	add	r3, r2
 801570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	69fa      	ldr	r2, [r7, #28]
 8015716:	0151      	lsls	r1, r2, #5
 8015718:	6a3a      	ldr	r2, [r7, #32]
 801571a:	440a      	add	r2, r1
 801571c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015720:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015724:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	015a      	lsls	r2, r3, #5
 801572a:	6a3b      	ldr	r3, [r7, #32]
 801572c:	4413      	add	r3, r2
 801572e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015732:	681a      	ldr	r2, [r3, #0]
 8015734:	7e7b      	ldrb	r3, [r7, #25]
 8015736:	075b      	lsls	r3, r3, #29
 8015738:	69f9      	ldr	r1, [r7, #28]
 801573a:	0148      	lsls	r0, r1, #5
 801573c:	6a39      	ldr	r1, [r7, #32]
 801573e:	4401      	add	r1, r0
 8015740:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8015744:	4313      	orrs	r3, r2
 8015746:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	015a      	lsls	r2, r3, #5
 801574c:	6a3b      	ldr	r3, [r7, #32]
 801574e:	4413      	add	r3, r2
 8015750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801575e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	78db      	ldrb	r3, [r3, #3]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d004      	beq.n	8015772 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801576e:	613b      	str	r3, [r7, #16]
 8015770:	e003      	b.n	801577a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015778:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015780:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	015a      	lsls	r2, r3, #5
 8015786:	6a3b      	ldr	r3, [r7, #32]
 8015788:	4413      	add	r3, r2
 801578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801578e:	461a      	mov	r2, r3
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8015794:	79fb      	ldrb	r3, [r7, #7]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d001      	beq.n	801579e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801579a:	2300      	movs	r3, #0
 801579c:	e04e      	b.n	801583c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	78db      	ldrb	r3, [r3, #3]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d149      	bne.n	801583a <USB_HC_StartXfer+0x276>
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	695b      	ldr	r3, [r3, #20]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d045      	beq.n	801583a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	79db      	ldrb	r3, [r3, #7]
 80157b2:	2b03      	cmp	r3, #3
 80157b4:	d830      	bhi.n	8015818 <USB_HC_StartXfer+0x254>
 80157b6:	a201      	add	r2, pc, #4	; (adr r2, 80157bc <USB_HC_StartXfer+0x1f8>)
 80157b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157bc:	080157cd 	.word	0x080157cd
 80157c0:	080157f1 	.word	0x080157f1
 80157c4:	080157cd 	.word	0x080157cd
 80157c8:	080157f1 	.word	0x080157f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	695b      	ldr	r3, [r3, #20]
 80157d0:	3303      	adds	r3, #3
 80157d2:	089b      	lsrs	r3, r3, #2
 80157d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80157d6:	8afa      	ldrh	r2, [r7, #22]
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157dc:	b29b      	uxth	r3, r3
 80157de:	429a      	cmp	r2, r3
 80157e0:	d91c      	bls.n	801581c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	699b      	ldr	r3, [r3, #24]
 80157e6:	f043 0220 	orr.w	r2, r3, #32
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80157ee:	e015      	b.n	801581c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	695b      	ldr	r3, [r3, #20]
 80157f4:	3303      	adds	r3, #3
 80157f6:	089b      	lsrs	r3, r3, #2
 80157f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80157fa:	8afa      	ldrh	r2, [r7, #22]
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015802:	691b      	ldr	r3, [r3, #16]
 8015804:	b29b      	uxth	r3, r3
 8015806:	429a      	cmp	r2, r3
 8015808:	d90a      	bls.n	8015820 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	699b      	ldr	r3, [r3, #24]
 801580e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	619a      	str	r2, [r3, #24]
        }
        break;
 8015816:	e003      	b.n	8015820 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015818:	bf00      	nop
 801581a:	e002      	b.n	8015822 <USB_HC_StartXfer+0x25e>
        break;
 801581c:	bf00      	nop
 801581e:	e000      	b.n	8015822 <USB_HC_StartXfer+0x25e>
        break;
 8015820:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	68d9      	ldr	r1, [r3, #12]
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	785a      	ldrb	r2, [r3, #1]
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	695b      	ldr	r3, [r3, #20]
 801582e:	b29b      	uxth	r3, r3
 8015830:	2000      	movs	r0, #0
 8015832:	9000      	str	r0, [sp, #0]
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f7ff fb13 	bl	8014e60 <USB_WritePacket>
  }

  return HAL_OK;
 801583a:	2300      	movs	r3, #0
}
 801583c:	4618      	mov	r0, r3
 801583e:	3728      	adds	r7, #40	; 0x28
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	1ff80000 	.word	0x1ff80000

08015848 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015848:	b480      	push	{r7}
 801584a:	b085      	sub	sp, #20
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801585a:	695b      	ldr	r3, [r3, #20]
 801585c:	b29b      	uxth	r3, r3
}
 801585e:	4618      	mov	r0, r3
 8015860:	3714      	adds	r7, #20
 8015862:	46bd      	mov	sp, r7
 8015864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015868:	4770      	bx	lr

0801586a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801586a:	b480      	push	{r7}
 801586c:	b089      	sub	sp, #36	; 0x24
 801586e:	af00      	add	r7, sp, #0
 8015870:	6078      	str	r0, [r7, #4]
 8015872:	460b      	mov	r3, r1
 8015874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801587a:	78fb      	ldrb	r3, [r7, #3]
 801587c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801587e:	2300      	movs	r3, #0
 8015880:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	015a      	lsls	r2, r3, #5
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	4413      	add	r3, r2
 801588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	0c9b      	lsrs	r3, r3, #18
 8015892:	f003 0303 	and.w	r3, r3, #3
 8015896:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	015a      	lsls	r2, r3, #5
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	4413      	add	r3, r2
 80158a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	0fdb      	lsrs	r3, r3, #31
 80158a8:	f003 0301 	and.w	r3, r3, #1
 80158ac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	f003 0320 	and.w	r3, r3, #32
 80158b6:	2b20      	cmp	r3, #32
 80158b8:	d104      	bne.n	80158c4 <USB_HC_Halt+0x5a>
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d101      	bne.n	80158c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80158c0:	2300      	movs	r3, #0
 80158c2:	e0c8      	b.n	8015a56 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d002      	beq.n	80158d0 <USB_HC_Halt+0x66>
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	2b02      	cmp	r3, #2
 80158ce:	d163      	bne.n	8015998 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	015a      	lsls	r2, r3, #5
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	4413      	add	r3, r2
 80158d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	69ba      	ldr	r2, [r7, #24]
 80158e0:	0151      	lsls	r1, r2, #5
 80158e2:	69fa      	ldr	r2, [r7, #28]
 80158e4:	440a      	add	r2, r1
 80158e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80158ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80158ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	f003 0320 	and.w	r3, r3, #32
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f040 80ab 	bne.w	8015a54 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015906:	2b00      	cmp	r3, #0
 8015908:	d133      	bne.n	8015972 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	015a      	lsls	r2, r3, #5
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	4413      	add	r3, r2
 8015912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	69ba      	ldr	r2, [r7, #24]
 801591a:	0151      	lsls	r1, r2, #5
 801591c:	69fa      	ldr	r2, [r7, #28]
 801591e:	440a      	add	r2, r1
 8015920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015928:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801592a:	69bb      	ldr	r3, [r7, #24]
 801592c:	015a      	lsls	r2, r3, #5
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	4413      	add	r3, r2
 8015932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	69ba      	ldr	r2, [r7, #24]
 801593a:	0151      	lsls	r1, r2, #5
 801593c:	69fa      	ldr	r2, [r7, #28]
 801593e:	440a      	add	r2, r1
 8015940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015948:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	3301      	adds	r3, #1
 801594e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015956:	d81d      	bhi.n	8015994 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015958:	69bb      	ldr	r3, [r7, #24]
 801595a:	015a      	lsls	r2, r3, #5
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	4413      	add	r3, r2
 8015960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801596a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801596e:	d0ec      	beq.n	801594a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015970:	e070      	b.n	8015a54 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	015a      	lsls	r2, r3, #5
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	4413      	add	r3, r2
 801597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	69ba      	ldr	r2, [r7, #24]
 8015982:	0151      	lsls	r1, r2, #5
 8015984:	69fa      	ldr	r2, [r7, #28]
 8015986:	440a      	add	r2, r1
 8015988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801598c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015990:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015992:	e05f      	b.n	8015a54 <USB_HC_Halt+0x1ea>
            break;
 8015994:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015996:	e05d      	b.n	8015a54 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015998:	69bb      	ldr	r3, [r7, #24]
 801599a:	015a      	lsls	r2, r3, #5
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	4413      	add	r3, r2
 80159a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	69ba      	ldr	r2, [r7, #24]
 80159a8:	0151      	lsls	r1, r2, #5
 80159aa:	69fa      	ldr	r2, [r7, #28]
 80159ac:	440a      	add	r2, r1
 80159ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80159b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80159b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80159be:	691b      	ldr	r3, [r3, #16]
 80159c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d133      	bne.n	8015a30 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	015a      	lsls	r2, r3, #5
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	4413      	add	r3, r2
 80159d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	69ba      	ldr	r2, [r7, #24]
 80159d8:	0151      	lsls	r1, r2, #5
 80159da:	69fa      	ldr	r2, [r7, #28]
 80159dc:	440a      	add	r2, r1
 80159de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80159e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80159e8:	69bb      	ldr	r3, [r7, #24]
 80159ea:	015a      	lsls	r2, r3, #5
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	4413      	add	r3, r2
 80159f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	69ba      	ldr	r2, [r7, #24]
 80159f8:	0151      	lsls	r1, r2, #5
 80159fa:	69fa      	ldr	r2, [r7, #28]
 80159fc:	440a      	add	r2, r1
 80159fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a06:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015a14:	d81d      	bhi.n	8015a52 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	015a      	lsls	r2, r3, #5
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a2c:	d0ec      	beq.n	8015a08 <USB_HC_Halt+0x19e>
 8015a2e:	e011      	b.n	8015a54 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015a30:	69bb      	ldr	r3, [r7, #24]
 8015a32:	015a      	lsls	r2, r3, #5
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	4413      	add	r3, r2
 8015a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	69ba      	ldr	r2, [r7, #24]
 8015a40:	0151      	lsls	r1, r2, #5
 8015a42:	69fa      	ldr	r2, [r7, #28]
 8015a44:	440a      	add	r2, r1
 8015a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a4e:	6013      	str	r3, [r2, #0]
 8015a50:	e000      	b.n	8015a54 <USB_HC_Halt+0x1ea>
          break;
 8015a52:	bf00      	nop
    }
  }

  return HAL_OK;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3724      	adds	r7, #36	; 0x24
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a60:	4770      	bx	lr
	...

08015a64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b087      	sub	sp, #28
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	460b      	mov	r3, r1
 8015a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015a74:	78fb      	ldrb	r3, [r7, #3]
 8015a76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015a78:	2301      	movs	r3, #1
 8015a7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	04da      	lsls	r2, r3, #19
 8015a80:	4b15      	ldr	r3, [pc, #84]	; (8015ad8 <USB_DoPing+0x74>)
 8015a82:	4013      	ands	r3, r2
 8015a84:	693a      	ldr	r2, [r7, #16]
 8015a86:	0151      	lsls	r1, r2, #5
 8015a88:	697a      	ldr	r2, [r7, #20]
 8015a8a:	440a      	add	r2, r1
 8015a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	015a      	lsls	r2, r3, #5
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015aac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015ab4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	015a      	lsls	r2, r3, #5
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	4413      	add	r3, r2
 8015abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015ac8:	2300      	movs	r3, #0
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	371c      	adds	r7, #28
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad4:	4770      	bx	lr
 8015ad6:	bf00      	nop
 8015ad8:	1ff80000 	.word	0x1ff80000

08015adc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b088      	sub	sp, #32
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015aec:	2300      	movs	r3, #0
 8015aee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7ff f8f4 	bl	8014cde <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015af6:	2110      	movs	r1, #16
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff f94d 	bl	8014d98 <USB_FlushTxFifo>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d001      	beq.n	8015b08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015b04:	2301      	movs	r3, #1
 8015b06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7ff f979 	bl	8014e00 <USB_FlushRxFifo>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d001      	beq.n	8015b18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015b14:	2301      	movs	r3, #1
 8015b16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015b18:	2300      	movs	r3, #0
 8015b1a:	61bb      	str	r3, [r7, #24]
 8015b1c:	e01f      	b.n	8015b5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	015a      	lsls	r2, r3, #5
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	4413      	add	r3, r2
 8015b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015b44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015b46:	69bb      	ldr	r3, [r7, #24]
 8015b48:	015a      	lsls	r2, r3, #5
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b52:	461a      	mov	r2, r3
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	61bb      	str	r3, [r7, #24]
 8015b5e:	69bb      	ldr	r3, [r7, #24]
 8015b60:	2b0f      	cmp	r3, #15
 8015b62:	d9dc      	bls.n	8015b1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015b64:	2300      	movs	r3, #0
 8015b66:	61bb      	str	r3, [r7, #24]
 8015b68:	e034      	b.n	8015bd4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	015a      	lsls	r2, r3, #5
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	4413      	add	r3, r2
 8015b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015b90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	015a      	lsls	r2, r3, #5
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	4413      	add	r3, r2
 8015b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b9e:	461a      	mov	r2, r3
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015bb0:	d80c      	bhi.n	8015bcc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015bb2:	69bb      	ldr	r3, [r7, #24]
 8015bb4:	015a      	lsls	r2, r3, #5
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	4413      	add	r3, r2
 8015bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bc8:	d0ec      	beq.n	8015ba4 <USB_StopHost+0xc8>
 8015bca:	e000      	b.n	8015bce <USB_StopHost+0xf2>
        break;
 8015bcc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	61bb      	str	r3, [r7, #24]
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	2b0f      	cmp	r3, #15
 8015bd8:	d9c7      	bls.n	8015b6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015be0:	461a      	mov	r2, r3
 8015be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015be6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015bee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f7ff f863 	bl	8014cbc <USB_EnableGlobalInt>

  return ret;
 8015bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3720      	adds	r7, #32
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	60f8      	str	r0, [r7, #12]
 8015c08:	60b9      	str	r1, [r7, #8]
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d101      	bne.n	8015c18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015c14:	2302      	movs	r3, #2
 8015c16:	e029      	b.n	8015c6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	79fa      	ldrb	r2, [r7, #7]
 8015c1c:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	2200      	movs	r2, #0
 8015c24:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015c30:	68f8      	ldr	r0, [r7, #12]
 8015c32:	f000 f81f 	bl	8015c74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2200      	movs	r2, #0
 8015c42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2200      	movs	r2, #0
 8015c52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d003      	beq.n	8015c64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	68ba      	ldr	r2, [r7, #8]
 8015c60:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015c64:	68f8      	ldr	r0, [r7, #12]
 8015c66:	f7ef f861 	bl	8004d2c <USBH_LL_Init>

  return USBH_OK;
 8015c6a:	2300      	movs	r3, #0
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3710      	adds	r7, #16
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015c80:	2300      	movs	r3, #0
 8015c82:	60fb      	str	r3, [r7, #12]
 8015c84:	e00a      	b.n	8015c9c <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	4413      	add	r3, r2
 8015c92:	2200      	movs	r2, #0
 8015c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	60fb      	str	r3, [r7, #12]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	2b0f      	cmp	r3, #15
 8015ca0:	d9f1      	bls.n	8015c86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	60fb      	str	r3, [r7, #12]
 8015ca6:	e009      	b.n	8015cbc <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	4413      	add	r3, r2
 8015cae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	60fb      	str	r3, [r7, #12]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cc2:	d3f1      	bcc.n	8015ca8 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2240      	movs	r2, #64	; 0x40
 8015ce8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	331c      	adds	r3, #28
 8015d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015d18:	2100      	movs	r1, #0
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f001 fd96 	bl	801784c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d2a:	2100      	movs	r1, #0
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f001 fd8d 	bl	801784c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015d38:	2212      	movs	r2, #18
 8015d3a:	2100      	movs	r1, #0
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f001 fd85 	bl	801784c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015d48:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015d4c:	2100      	movs	r1, #0
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f001 fd7c 	bl	801784c <memset>

  return USBH_OK;
 8015d54:	2300      	movs	r3, #0
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3710      	adds	r7, #16
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015d5e:	b480      	push	{r7}
 8015d60:	b085      	sub	sp, #20
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
 8015d66:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d017      	beq.n	8015da2 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10f      	bne.n	8015d9c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015d82:	1c59      	adds	r1, r3, #1
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015d96:	2300      	movs	r3, #0
 8015d98:	73fb      	strb	r3, [r7, #15]
 8015d9a:	e004      	b.n	8015da6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	73fb      	strb	r3, [r7, #15]
 8015da0:	e001      	b.n	8015da6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015da2:	2302      	movs	r3, #2
 8015da4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3714      	adds	r7, #20
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr

08015db4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b085      	sub	sp, #20
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	460b      	mov	r3, r1
 8015dbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015dca:	78fa      	ldrb	r2, [r7, #3]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d204      	bcs.n	8015dda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	78fa      	ldrb	r2, [r7, #3]
 8015dd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015dd8:	e001      	b.n	8015dde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015dda:	2302      	movs	r3, #2
 8015ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3714      	adds	r7, #20
 8015de4:	46bd      	mov	sp, r7
 8015de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dea:	4770      	bx	lr

08015dec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015dec:	b480      	push	{r7}
 8015dee:	b087      	sub	sp, #28
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	4608      	mov	r0, r1
 8015df6:	4611      	mov	r1, r2
 8015df8:	461a      	mov	r2, r3
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	70fb      	strb	r3, [r7, #3]
 8015dfe:	460b      	mov	r3, r1
 8015e00:	70bb      	strb	r3, [r7, #2]
 8015e02:	4613      	mov	r3, r2
 8015e04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015e06:	2300      	movs	r3, #0
 8015e08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015e14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015e16:	e025      	b.n	8015e64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015e18:	7dfb      	ldrb	r3, [r7, #23]
 8015e1a:	221a      	movs	r2, #26
 8015e1c:	fb02 f303 	mul.w	r3, r2, r3
 8015e20:	3308      	adds	r3, #8
 8015e22:	68fa      	ldr	r2, [r7, #12]
 8015e24:	4413      	add	r3, r2
 8015e26:	3302      	adds	r3, #2
 8015e28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	795b      	ldrb	r3, [r3, #5]
 8015e2e:	78fa      	ldrb	r2, [r7, #3]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d002      	beq.n	8015e3a <USBH_FindInterface+0x4e>
 8015e34:	78fb      	ldrb	r3, [r7, #3]
 8015e36:	2bff      	cmp	r3, #255	; 0xff
 8015e38:	d111      	bne.n	8015e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015e3e:	78ba      	ldrb	r2, [r7, #2]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d002      	beq.n	8015e4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e44:	78bb      	ldrb	r3, [r7, #2]
 8015e46:	2bff      	cmp	r3, #255	; 0xff
 8015e48:	d109      	bne.n	8015e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015e4e:	787a      	ldrb	r2, [r7, #1]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d002      	beq.n	8015e5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015e54:	787b      	ldrb	r3, [r7, #1]
 8015e56:	2bff      	cmp	r3, #255	; 0xff
 8015e58:	d101      	bne.n	8015e5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015e5a:	7dfb      	ldrb	r3, [r7, #23]
 8015e5c:	e006      	b.n	8015e6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015e5e:	7dfb      	ldrb	r3, [r7, #23]
 8015e60:	3301      	adds	r3, #1
 8015e62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015e64:	7dfb      	ldrb	r3, [r7, #23]
 8015e66:	2b09      	cmp	r3, #9
 8015e68:	d9d6      	bls.n	8015e18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015e6a:	23ff      	movs	r3, #255	; 0xff
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	371c      	adds	r7, #28
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f7ee ff8f 	bl	8004da4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015e86:	2101      	movs	r1, #1
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7ef f8a8 	bl	8004fde <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015e8e:	2300      	movs	r3, #0
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	3708      	adds	r7, #8
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b082      	sub	sp, #8
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8015ea0:	2100      	movs	r1, #0
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ef f89b 	bl	8004fde <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ee ff96 	bl	8004dda <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	791b      	ldrb	r3, [r3, #4]
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f001 fb6c 	bl	8017592 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	795b      	ldrb	r3, [r3, #5]
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f001 fb66 	bl	8017592 <USBH_FreePipe>

  return USBH_OK;
 8015ec6:	2300      	movs	r3, #0
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3708      	adds	r7, #8
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b088      	sub	sp, #32
 8015ed4:	af04      	add	r7, sp, #16
 8015ed6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015ed8:	2302      	movs	r3, #2
 8015eda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015edc:	2300      	movs	r3, #0
 8015ede:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	2b01      	cmp	r3, #1
 8015eea:	d102      	bne.n	8015ef2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2203      	movs	r2, #3
 8015ef0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	2b0b      	cmp	r3, #11
 8015efa:	f200 81c0 	bhi.w	801627e <USBH_Process+0x3ae>
 8015efe:	a201      	add	r2, pc, #4	; (adr r2, 8015f04 <USBH_Process+0x34>)
 8015f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f04:	08015f35 	.word	0x08015f35
 8015f08:	08015f67 	.word	0x08015f67
 8015f0c:	08015fcf 	.word	0x08015fcf
 8015f10:	08016219 	.word	0x08016219
 8015f14:	0801627f 	.word	0x0801627f
 8015f18:	08016073 	.word	0x08016073
 8015f1c:	080161bf 	.word	0x080161bf
 8015f20:	080160a9 	.word	0x080160a9
 8015f24:	080160c9 	.word	0x080160c9
 8015f28:	080160e9 	.word	0x080160e9
 8015f2c:	0801612d 	.word	0x0801612d
 8015f30:	08016201 	.word	0x08016201
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	f000 81a0 	beq.w	8016282 <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2201      	movs	r2, #1
 8015f46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015f48:	20c8      	movs	r0, #200	; 0xc8
 8015f4a:	f7ef f88f 	bl	800506c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f7ee ff85 	bl	8004e5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2200      	movs	r2, #0
 8015f58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015f64:	e18d      	b.n	8016282 <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	d107      	bne.n	8015f80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2202      	movs	r2, #2
 8015f7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015f7e:	e18f      	b.n	80162a0 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015f8a:	d914      	bls.n	8015fb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015f92:	3301      	adds	r3, #1
 8015f94:	b2da      	uxtb	r2, r3
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015fa2:	2b03      	cmp	r3, #3
 8015fa4:	d903      	bls.n	8015fae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	220d      	movs	r2, #13
 8015faa:	701a      	strb	r2, [r3, #0]
      break;
 8015fac:	e178      	b.n	80162a0 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	701a      	strb	r2, [r3, #0]
      break;
 8015fb4:	e174      	b.n	80162a0 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015fbc:	f103 020a 	add.w	r2, r3, #10
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015fc6:	200a      	movs	r0, #10
 8015fc8:	f7ef f850 	bl	800506c <USBH_Delay>
      break;
 8015fcc:	e168      	b.n	80162a0 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d005      	beq.n	8015fe4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fde:	2104      	movs	r1, #4
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015fe4:	2064      	movs	r0, #100	; 0x64
 8015fe6:	f7ef f841 	bl	800506c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7ee ff10 	bl	8004e10 <USBH_LL_GetSpeed>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2205      	movs	r2, #5
 8015ffe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8016000:	2100      	movs	r1, #0
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f001 faa3 	bl	801754e <USBH_AllocPipe>
 8016008:	4603      	mov	r3, r0
 801600a:	461a      	mov	r2, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8016010:	2180      	movs	r1, #128	; 0x80
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f001 fa9b 	bl	801754e <USBH_AllocPipe>
 8016018:	4603      	mov	r3, r0
 801601a:	461a      	mov	r2, r3
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	7919      	ldrb	r1, [r3, #4]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016030:	687a      	ldr	r2, [r7, #4]
 8016032:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016034:	b292      	uxth	r2, r2
 8016036:	9202      	str	r2, [sp, #8]
 8016038:	2200      	movs	r2, #0
 801603a:	9201      	str	r2, [sp, #4]
 801603c:	9300      	str	r3, [sp, #0]
 801603e:	4603      	mov	r3, r0
 8016040:	2280      	movs	r2, #128	; 0x80
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f001 fa54 	bl	80174f0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	7959      	ldrb	r1, [r3, #5]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016058:	687a      	ldr	r2, [r7, #4]
 801605a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801605c:	b292      	uxth	r2, r2
 801605e:	9202      	str	r2, [sp, #8]
 8016060:	2200      	movs	r2, #0
 8016062:	9201      	str	r2, [sp, #4]
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	4603      	mov	r3, r0
 8016068:	2200      	movs	r2, #0
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f001 fa40 	bl	80174f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016070:	e116      	b.n	80162a0 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 f91a 	bl	80162ac <USBH_HandleEnum>
 8016078:	4603      	mov	r3, r0
 801607a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801607c:	7bbb      	ldrb	r3, [r7, #14]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	f040 8100 	bne.w	8016286 <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2200      	movs	r2, #0
 801608a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8016094:	2b01      	cmp	r3, #1
 8016096:	d103      	bne.n	80160a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2208      	movs	r2, #8
 801609c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801609e:	e0f2      	b.n	8016286 <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2207      	movs	r2, #7
 80160a4:	701a      	strb	r2, [r3, #0]
      break;
 80160a6:	e0ee      	b.n	8016286 <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	f000 80eb 	beq.w	801628a <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80160ba:	2101      	movs	r1, #1
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2208      	movs	r2, #8
 80160c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80160c6:	e0e0      	b.n	801628a <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 fc41 	bl	801695a <USBH_SetCfg>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	f040 80d7 	bne.w	801628e <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2209      	movs	r2, #9
 80160e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80160e6:	e0d2      	b.n	801628e <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80160ee:	f003 0320 	and.w	r3, r3, #32
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d016      	beq.n	8016124 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80160f6:	2101      	movs	r1, #1
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 fc51 	bl	80169a0 <USBH_SetFeature>
 80160fe:	4603      	mov	r3, r0
 8016100:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8016102:	7bbb      	ldrb	r3, [r7, #14]
 8016104:	b2db      	uxtb	r3, r3
 8016106:	2b00      	cmp	r3, #0
 8016108:	d103      	bne.n	8016112 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	220a      	movs	r2, #10
 801610e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016110:	e0bf      	b.n	8016292 <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 8016112:	7bbb      	ldrb	r3, [r7, #14]
 8016114:	b2db      	uxtb	r3, r3
 8016116:	2b03      	cmp	r3, #3
 8016118:	f040 80bb 	bne.w	8016292 <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	220a      	movs	r2, #10
 8016120:	701a      	strb	r2, [r3, #0]
      break;
 8016122:	e0b6      	b.n	8016292 <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	220a      	movs	r2, #10
 8016128:	701a      	strb	r2, [r3, #0]
      break;
 801612a:	e0b2      	b.n	8016292 <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8016132:	2b00      	cmp	r3, #0
 8016134:	f000 80af 	beq.w	8016296 <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8016140:	2300      	movs	r3, #0
 8016142:	73fb      	strb	r3, [r7, #15]
 8016144:	e018      	b.n	8016178 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8016146:	7bfa      	ldrb	r2, [r7, #15]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f502 7289 	add.w	r2, r2, #274	; 0x112
 801614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016152:	791a      	ldrb	r2, [r3, #4]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801615a:	429a      	cmp	r2, r3
 801615c:	d109      	bne.n	8016172 <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 801615e:	7bfa      	ldrb	r2, [r7, #15]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8016166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8016170:	e005      	b.n	801617e <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8016172:	7bfb      	ldrb	r3, [r7, #15]
 8016174:	3301      	adds	r3, #1
 8016176:	73fb      	strb	r3, [r7, #15]
 8016178:	7bfb      	ldrb	r3, [r7, #15]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d0e3      	beq.n	8016146 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016184:	2b00      	cmp	r3, #0
 8016186:	d016      	beq.n	80161b6 <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801618e:	689b      	ldr	r3, [r3, #8]
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	4798      	blx	r3
 8016194:	4603      	mov	r3, r0
 8016196:	2b00      	cmp	r3, #0
 8016198:	d109      	bne.n	80161ae <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2206      	movs	r2, #6
 801619e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80161a6:	2103      	movs	r1, #3
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80161ac:	e073      	b.n	8016296 <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	220d      	movs	r2, #13
 80161b2:	701a      	strb	r2, [r3, #0]
      break;
 80161b4:	e06f      	b.n	8016296 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	220d      	movs	r2, #13
 80161ba:	701a      	strb	r2, [r3, #0]
      break;
 80161bc:	e06b      	b.n	8016296 <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d017      	beq.n	80161f8 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80161ce:	691b      	ldr	r3, [r3, #16]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	4798      	blx	r3
 80161d4:	4603      	mov	r3, r0
 80161d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80161d8:	7bbb      	ldrb	r3, [r7, #14]
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d103      	bne.n	80161e8 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	220b      	movs	r2, #11
 80161e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80161e6:	e058      	b.n	801629a <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 80161e8:	7bbb      	ldrb	r3, [r7, #14]
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	2b02      	cmp	r3, #2
 80161ee:	d154      	bne.n	801629a <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	220d      	movs	r2, #13
 80161f4:	701a      	strb	r2, [r3, #0]
      break;
 80161f6:	e050      	b.n	801629a <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	220d      	movs	r2, #13
 80161fc:	701a      	strb	r2, [r3, #0]
      break;
 80161fe:	e04c      	b.n	801629a <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016206:	2b00      	cmp	r3, #0
 8016208:	d049      	beq.n	801629e <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016210:	695b      	ldr	r3, [r3, #20]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	4798      	blx	r3
      }
      break;
 8016216:	e042      	b.n	801629e <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2200      	movs	r2, #0
 801621c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7ff fd27 	bl	8015c74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801622c:	2b00      	cmp	r3, #0
 801622e:	d009      	beq.n	8016244 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2200      	movs	r2, #0
 8016240:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801624a:	2b00      	cmp	r3, #0
 801624c:	d005      	beq.n	801625a <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016254:	2105      	movs	r1, #5
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8016260:	b2db      	uxtb	r3, r3
 8016262:	2b01      	cmp	r3, #1
 8016264:	d107      	bne.n	8016276 <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	2200      	movs	r2, #0
 801626a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f7ff fe02 	bl	8015e78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016274:	e014      	b.n	80162a0 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7ee fd94 	bl	8004da4 <USBH_LL_Start>
      break;
 801627c:	e010      	b.n	80162a0 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 801627e:	bf00      	nop
 8016280:	e00e      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 8016282:	bf00      	nop
 8016284:	e00c      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 8016286:	bf00      	nop
 8016288:	e00a      	b.n	80162a0 <USBH_Process+0x3d0>
    break;
 801628a:	bf00      	nop
 801628c:	e008      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 801628e:	bf00      	nop
 8016290:	e006      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 8016292:	bf00      	nop
 8016294:	e004      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 8016296:	bf00      	nop
 8016298:	e002      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 801629a:	bf00      	nop
 801629c:	e000      	b.n	80162a0 <USBH_Process+0x3d0>
      break;
 801629e:	bf00      	nop
  }
  return USBH_OK;
 80162a0:	2300      	movs	r3, #0
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3710      	adds	r7, #16
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop

080162ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b088      	sub	sp, #32
 80162b0:	af04      	add	r7, sp, #16
 80162b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80162b4:	2301      	movs	r3, #1
 80162b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80162b8:	2301      	movs	r3, #1
 80162ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	785b      	ldrb	r3, [r3, #1]
 80162c0:	2b07      	cmp	r3, #7
 80162c2:	f200 81c1 	bhi.w	8016648 <USBH_HandleEnum+0x39c>
 80162c6:	a201      	add	r2, pc, #4	; (adr r2, 80162cc <USBH_HandleEnum+0x20>)
 80162c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162cc:	080162ed 	.word	0x080162ed
 80162d0:	080163ab 	.word	0x080163ab
 80162d4:	08016415 	.word	0x08016415
 80162d8:	080164a3 	.word	0x080164a3
 80162dc:	0801650d 	.word	0x0801650d
 80162e0:	0801657d 	.word	0x0801657d
 80162e4:	080165c3 	.word	0x080165c3
 80162e8:	08016609 	.word	0x08016609
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80162ec:	2108      	movs	r1, #8
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 fa50 	bl	8016794 <USBH_Get_DevDesc>
 80162f4:	4603      	mov	r3, r0
 80162f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80162f8:	7bbb      	ldrb	r3, [r7, #14]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d130      	bne.n	8016360 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2201      	movs	r2, #1
 801630c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	7919      	ldrb	r1, [r3, #4]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8016322:	b292      	uxth	r2, r2
 8016324:	9202      	str	r2, [sp, #8]
 8016326:	2200      	movs	r2, #0
 8016328:	9201      	str	r2, [sp, #4]
 801632a:	9300      	str	r3, [sp, #0]
 801632c:	4603      	mov	r3, r0
 801632e:	2280      	movs	r2, #128	; 0x80
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f001 f8dd 	bl	80174f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	7959      	ldrb	r1, [r3, #5]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801634a:	b292      	uxth	r2, r2
 801634c:	9202      	str	r2, [sp, #8]
 801634e:	2200      	movs	r2, #0
 8016350:	9201      	str	r2, [sp, #4]
 8016352:	9300      	str	r3, [sp, #0]
 8016354:	4603      	mov	r3, r0
 8016356:	2200      	movs	r2, #0
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f001 f8c9 	bl	80174f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801635e:	e175      	b.n	801664c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016360:	7bbb      	ldrb	r3, [r7, #14]
 8016362:	2b03      	cmp	r3, #3
 8016364:	f040 8172 	bne.w	801664c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801636e:	3301      	adds	r3, #1
 8016370:	b2da      	uxtb	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801637e:	2b03      	cmp	r3, #3
 8016380:	d903      	bls.n	801638a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	220d      	movs	r2, #13
 8016386:	701a      	strb	r2, [r3, #0]
      break;
 8016388:	e160      	b.n	801664c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	795b      	ldrb	r3, [r3, #5]
 801638e:	4619      	mov	r1, r3
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f001 f8fe 	bl	8017592 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	791b      	ldrb	r3, [r3, #4]
 801639a:	4619      	mov	r1, r3
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f001 f8f8 	bl	8017592 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2200      	movs	r2, #0
 80163a6:	701a      	strb	r2, [r3, #0]
      break;
 80163a8:	e150      	b.n	801664c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80163aa:	2112      	movs	r1, #18
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 f9f1 	bl	8016794 <USBH_Get_DevDesc>
 80163b2:	4603      	mov	r3, r0
 80163b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80163b6:	7bbb      	ldrb	r3, [r7, #14]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d103      	bne.n	80163c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2202      	movs	r2, #2
 80163c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80163c2:	e145      	b.n	8016650 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80163c4:	7bbb      	ldrb	r3, [r7, #14]
 80163c6:	2b03      	cmp	r3, #3
 80163c8:	f040 8142 	bne.w	8016650 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80163d2:	3301      	adds	r3, #1
 80163d4:	b2da      	uxtb	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80163e2:	2b03      	cmp	r3, #3
 80163e4:	d903      	bls.n	80163ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	220d      	movs	r2, #13
 80163ea:	701a      	strb	r2, [r3, #0]
      break;
 80163ec:	e130      	b.n	8016650 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	795b      	ldrb	r3, [r3, #5]
 80163f2:	4619      	mov	r1, r3
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f001 f8cc 	bl	8017592 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	791b      	ldrb	r3, [r3, #4]
 80163fe:	4619      	mov	r1, r3
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f001 f8c6 	bl	8017592 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2200      	movs	r2, #0
 801640a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2200      	movs	r2, #0
 8016410:	701a      	strb	r2, [r3, #0]
      break;
 8016412:	e11d      	b.n	8016650 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8016414:	2101      	movs	r1, #1
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 fa7b 	bl	8016912 <USBH_SetAddress>
 801641c:	4603      	mov	r3, r0
 801641e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016420:	7bbb      	ldrb	r3, [r7, #14]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d132      	bne.n	801648c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8016426:	2002      	movs	r0, #2
 8016428:	f7ee fe20 	bl	800506c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2201      	movs	r2, #1
 8016430:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2203      	movs	r2, #3
 8016438:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	7919      	ldrb	r1, [r3, #4]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801644e:	b292      	uxth	r2, r2
 8016450:	9202      	str	r2, [sp, #8]
 8016452:	2200      	movs	r2, #0
 8016454:	9201      	str	r2, [sp, #4]
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	4603      	mov	r3, r0
 801645a:	2280      	movs	r2, #128	; 0x80
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f001 f847 	bl	80174f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	7959      	ldrb	r1, [r3, #5]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016476:	b292      	uxth	r2, r2
 8016478:	9202      	str	r2, [sp, #8]
 801647a:	2200      	movs	r2, #0
 801647c:	9201      	str	r2, [sp, #4]
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	4603      	mov	r3, r0
 8016482:	2200      	movs	r2, #0
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f001 f833 	bl	80174f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801648a:	e0e3      	b.n	8016654 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801648c:	7bbb      	ldrb	r3, [r7, #14]
 801648e:	2b03      	cmp	r3, #3
 8016490:	f040 80e0 	bne.w	8016654 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	220d      	movs	r2, #13
 8016498:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2200      	movs	r2, #0
 801649e:	705a      	strb	r2, [r3, #1]
      break;
 80164a0:	e0d8      	b.n	8016654 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80164a2:	2109      	movs	r1, #9
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 f9a1 	bl	80167ec <USBH_Get_CfgDesc>
 80164aa:	4603      	mov	r3, r0
 80164ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80164ae:	7bbb      	ldrb	r3, [r7, #14]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d103      	bne.n	80164bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2204      	movs	r2, #4
 80164b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80164ba:	e0cd      	b.n	8016658 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80164bc:	7bbb      	ldrb	r3, [r7, #14]
 80164be:	2b03      	cmp	r3, #3
 80164c0:	f040 80ca 	bne.w	8016658 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80164ca:	3301      	adds	r3, #1
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80164da:	2b03      	cmp	r3, #3
 80164dc:	d903      	bls.n	80164e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	220d      	movs	r2, #13
 80164e2:	701a      	strb	r2, [r3, #0]
      break;
 80164e4:	e0b8      	b.n	8016658 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	795b      	ldrb	r3, [r3, #5]
 80164ea:	4619      	mov	r1, r3
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f001 f850 	bl	8017592 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	791b      	ldrb	r3, [r3, #4]
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f001 f84a 	bl	8017592 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	2200      	movs	r2, #0
 8016508:	701a      	strb	r2, [r3, #0]
      break;
 801650a:	e0a5      	b.n	8016658 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8016512:	4619      	mov	r1, r3
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f000 f969 	bl	80167ec <USBH_Get_CfgDesc>
 801651a:	4603      	mov	r3, r0
 801651c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801651e:	7bbb      	ldrb	r3, [r7, #14]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d103      	bne.n	801652c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2205      	movs	r2, #5
 8016528:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801652a:	e097      	b.n	801665c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801652c:	7bbb      	ldrb	r3, [r7, #14]
 801652e:	2b03      	cmp	r3, #3
 8016530:	f040 8094 	bne.w	801665c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801653a:	3301      	adds	r3, #1
 801653c:	b2da      	uxtb	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801654a:	2b03      	cmp	r3, #3
 801654c:	d903      	bls.n	8016556 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	220d      	movs	r2, #13
 8016552:	701a      	strb	r2, [r3, #0]
      break;
 8016554:	e082      	b.n	801665c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	795b      	ldrb	r3, [r3, #5]
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f001 f818 	bl	8017592 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	791b      	ldrb	r3, [r3, #4]
 8016566:	4619      	mov	r1, r3
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f001 f812 	bl	8017592 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2200      	movs	r2, #0
 8016578:	701a      	strb	r2, [r3, #0]
      break;
 801657a:	e06f      	b.n	801665c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8016582:	2b00      	cmp	r3, #0
 8016584:	d019      	beq.n	80165ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8016592:	23ff      	movs	r3, #255	; 0xff
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f000 f953 	bl	8016840 <USBH_Get_StringDesc>
 801659a:	4603      	mov	r3, r0
 801659c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801659e:	7bbb      	ldrb	r3, [r7, #14]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d103      	bne.n	80165ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2206      	movs	r2, #6
 80165a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80165aa:	e059      	b.n	8016660 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80165ac:	7bbb      	ldrb	r3, [r7, #14]
 80165ae:	2b03      	cmp	r3, #3
 80165b0:	d156      	bne.n	8016660 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2206      	movs	r2, #6
 80165b6:	705a      	strb	r2, [r3, #1]
      break;
 80165b8:	e052      	b.n	8016660 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2206      	movs	r2, #6
 80165be:	705a      	strb	r2, [r3, #1]
      break;
 80165c0:	e04e      	b.n	8016660 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d019      	beq.n	8016600 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80165d8:	23ff      	movs	r3, #255	; 0xff
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f000 f930 	bl	8016840 <USBH_Get_StringDesc>
 80165e0:	4603      	mov	r3, r0
 80165e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80165e4:	7bbb      	ldrb	r3, [r7, #14]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d103      	bne.n	80165f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2207      	movs	r2, #7
 80165ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80165f0:	e038      	b.n	8016664 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80165f2:	7bbb      	ldrb	r3, [r7, #14]
 80165f4:	2b03      	cmp	r3, #3
 80165f6:	d135      	bne.n	8016664 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2207      	movs	r2, #7
 80165fc:	705a      	strb	r2, [r3, #1]
      break;
 80165fe:	e031      	b.n	8016664 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2207      	movs	r2, #7
 8016604:	705a      	strb	r2, [r3, #1]
      break;
 8016606:	e02d      	b.n	8016664 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801660e:	2b00      	cmp	r3, #0
 8016610:	d017      	beq.n	8016642 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801661e:	23ff      	movs	r3, #255	; 0xff
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 f90d 	bl	8016840 <USBH_Get_StringDesc>
 8016626:	4603      	mov	r3, r0
 8016628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801662a:	7bbb      	ldrb	r3, [r7, #14]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d102      	bne.n	8016636 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8016630:	2300      	movs	r3, #0
 8016632:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8016634:	e018      	b.n	8016668 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016636:	7bbb      	ldrb	r3, [r7, #14]
 8016638:	2b03      	cmp	r3, #3
 801663a:	d115      	bne.n	8016668 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 801663c:	2300      	movs	r3, #0
 801663e:	73fb      	strb	r3, [r7, #15]
      break;
 8016640:	e012      	b.n	8016668 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8016642:	2300      	movs	r3, #0
 8016644:	73fb      	strb	r3, [r7, #15]
      break;
 8016646:	e00f      	b.n	8016668 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8016648:	bf00      	nop
 801664a:	e00e      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 801664c:	bf00      	nop
 801664e:	e00c      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016650:	bf00      	nop
 8016652:	e00a      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016654:	bf00      	nop
 8016656:	e008      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016658:	bf00      	nop
 801665a:	e006      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 801665c:	bf00      	nop
 801665e:	e004      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016660:	bf00      	nop
 8016662:	e002      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016664:	bf00      	nop
 8016666:	e000      	b.n	801666a <USBH_HandleEnum+0x3be>
      break;
 8016668:	bf00      	nop
  }
  return Status;
 801666a:	7bfb      	ldrb	r3, [r7, #15]
}
 801666c:	4618      	mov	r0, r3
 801666e:	3710      	adds	r7, #16
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}

08016674 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8016674:	b480      	push	{r7}
 8016676:	b083      	sub	sp, #12
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	683a      	ldr	r2, [r7, #0]
 8016682:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8016686:	bf00      	nop
 8016688:	370c      	adds	r7, #12
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr

08016692 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8016692:	b580      	push	{r7, lr}
 8016694:	b082      	sub	sp, #8
 8016696:	af00      	add	r7, sp, #0
 8016698:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80166a0:	1c5a      	adds	r2, r3, #1
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f000 f804 	bl	80166b6 <USBH_HandleSof>
}
 80166ae:	bf00      	nop
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}

080166b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80166b6:	b580      	push	{r7, lr}
 80166b8:	b082      	sub	sp, #8
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	b2db      	uxtb	r3, r3
 80166c4:	2b0b      	cmp	r3, #11
 80166c6:	d10a      	bne.n	80166de <USBH_HandleSof+0x28>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d005      	beq.n	80166de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80166d8:	699b      	ldr	r3, [r3, #24]
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	4798      	blx	r3
  }
}
 80166de:	bf00      	nop
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80166e6:	b480      	push	{r7}
 80166e8:	b083      	sub	sp, #12
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2201      	movs	r2, #1
 80166f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80166f6:	bf00      	nop
}
 80166f8:	370c      	adds	r7, #12
 80166fa:	46bd      	mov	sp, r7
 80166fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016700:	4770      	bx	lr

08016702 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8016702:	b480      	push	{r7}
 8016704:	b083      	sub	sp, #12
 8016706:	af00      	add	r7, sp, #0
 8016708:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2200      	movs	r2, #0
 801670e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8016712:	bf00      	nop
}
 8016714:	370c      	adds	r7, #12
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr

0801671e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801671e:	b480      	push	{r7}
 8016720:	b083      	sub	sp, #12
 8016722:	af00      	add	r7, sp, #0
 8016724:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	2201      	movs	r2, #1
 801672a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2200      	movs	r2, #0
 8016732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801673e:	2300      	movs	r3, #0
}
 8016740:	4618      	mov	r0, r3
 8016742:	370c      	adds	r7, #12
 8016744:	46bd      	mov	sp, r7
 8016746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674a:	4770      	bx	lr

0801674c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b082      	sub	sp, #8
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2201      	movs	r2, #1
 8016758:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f7ee fb34 	bl	8004dda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	791b      	ldrb	r3, [r3, #4]
 8016776:	4619      	mov	r1, r3
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 ff0a 	bl	8017592 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	795b      	ldrb	r3, [r3, #5]
 8016782:	4619      	mov	r1, r3
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f000 ff04 	bl	8017592 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801678a:	2300      	movs	r3, #0
}
 801678c:	4618      	mov	r0, r3
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b086      	sub	sp, #24
 8016798:	af02      	add	r7, sp, #8
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	460b      	mov	r3, r1
 801679e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80167a0:	887b      	ldrh	r3, [r7, #2]
 80167a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167a6:	d901      	bls.n	80167ac <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80167a8:	2303      	movs	r3, #3
 80167aa:	e01b      	b.n	80167e4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80167b2:	887b      	ldrh	r3, [r7, #2]
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	4613      	mov	r3, r2
 80167b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167bc:	2100      	movs	r1, #0
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f000 f872 	bl	80168a8 <USBH_GetDescriptor>
 80167c4:	4603      	mov	r3, r0
 80167c6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80167c8:	7bfb      	ldrb	r3, [r7, #15]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d109      	bne.n	80167e2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80167d4:	887a      	ldrh	r2, [r7, #2]
 80167d6:	4619      	mov	r1, r3
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f000 f929 	bl	8016a30 <USBH_ParseDevDesc>
 80167de:	4603      	mov	r3, r0
 80167e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3710      	adds	r7, #16
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b086      	sub	sp, #24
 80167f0:	af02      	add	r7, sp, #8
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	460b      	mov	r3, r1
 80167f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	331c      	adds	r3, #28
 80167fc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80167fe:	887b      	ldrh	r3, [r7, #2]
 8016800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016804:	d901      	bls.n	801680a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016806:	2303      	movs	r3, #3
 8016808:	e016      	b.n	8016838 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801680a:	887b      	ldrh	r3, [r7, #2]
 801680c:	9300      	str	r3, [sp, #0]
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016814:	2100      	movs	r1, #0
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f000 f846 	bl	80168a8 <USBH_GetDescriptor>
 801681c:	4603      	mov	r3, r0
 801681e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8016820:	7bfb      	ldrb	r3, [r7, #15]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d107      	bne.n	8016836 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016826:	887b      	ldrh	r3, [r7, #2]
 8016828:	461a      	mov	r2, r3
 801682a:	68b9      	ldr	r1, [r7, #8]
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f000 f9b3 	bl	8016b98 <USBH_ParseCfgDesc>
 8016832:	4603      	mov	r3, r0
 8016834:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016836:	7bfb      	ldrb	r3, [r7, #15]
}
 8016838:	4618      	mov	r0, r3
 801683a:	3710      	adds	r7, #16
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b088      	sub	sp, #32
 8016844:	af02      	add	r7, sp, #8
 8016846:	60f8      	str	r0, [r7, #12]
 8016848:	607a      	str	r2, [r7, #4]
 801684a:	461a      	mov	r2, r3
 801684c:	460b      	mov	r3, r1
 801684e:	72fb      	strb	r3, [r7, #11]
 8016850:	4613      	mov	r3, r2
 8016852:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016854:	893b      	ldrh	r3, [r7, #8]
 8016856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801685a:	d802      	bhi.n	8016862 <USBH_Get_StringDesc+0x22>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d101      	bne.n	8016866 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016862:	2303      	movs	r3, #3
 8016864:	e01c      	b.n	80168a0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016866:	7afb      	ldrb	r3, [r7, #11]
 8016868:	b29b      	uxth	r3, r3
 801686a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801686e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016876:	893b      	ldrh	r3, [r7, #8]
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	460b      	mov	r3, r1
 801687c:	2100      	movs	r1, #0
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	f000 f812 	bl	80168a8 <USBH_GetDescriptor>
 8016884:	4603      	mov	r3, r0
 8016886:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016888:	7dfb      	ldrb	r3, [r7, #23]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d107      	bne.n	801689e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016894:	893a      	ldrh	r2, [r7, #8]
 8016896:	6879      	ldr	r1, [r7, #4]
 8016898:	4618      	mov	r0, r3
 801689a:	f000 fb8a 	bl	8016fb2 <USBH_ParseStringDesc>
  }

  return status;
 801689e:	7dfb      	ldrb	r3, [r7, #23]
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3718      	adds	r7, #24
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}

080168a8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b084      	sub	sp, #16
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	60f8      	str	r0, [r7, #12]
 80168b0:	607b      	str	r3, [r7, #4]
 80168b2:	460b      	mov	r3, r1
 80168b4:	72fb      	strb	r3, [r7, #11]
 80168b6:	4613      	mov	r3, r2
 80168b8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	789b      	ldrb	r3, [r3, #2]
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d11c      	bne.n	80168fc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80168c2:	7afb      	ldrb	r3, [r7, #11]
 80168c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80168c8:	b2da      	uxtb	r2, r3
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2206      	movs	r2, #6
 80168d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	893a      	ldrh	r2, [r7, #8]
 80168d8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80168da:	893b      	ldrh	r3, [r7, #8]
 80168dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80168e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80168e4:	d104      	bne.n	80168f0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	f240 4209 	movw	r2, #1033	; 0x409
 80168ec:	829a      	strh	r2, [r3, #20]
 80168ee:	e002      	b.n	80168f6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	2200      	movs	r2, #0
 80168f4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	8b3a      	ldrh	r2, [r7, #24]
 80168fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80168fc:	8b3b      	ldrh	r3, [r7, #24]
 80168fe:	461a      	mov	r2, r3
 8016900:	6879      	ldr	r1, [r7, #4]
 8016902:	68f8      	ldr	r0, [r7, #12]
 8016904:	f000 fba3 	bl	801704e <USBH_CtlReq>
 8016908:	4603      	mov	r3, r0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	460b      	mov	r3, r1
 801691c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	789b      	ldrb	r3, [r3, #2]
 8016922:	2b01      	cmp	r3, #1
 8016924:	d10f      	bne.n	8016946 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2205      	movs	r2, #5
 8016930:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016932:	78fb      	ldrb	r3, [r7, #3]
 8016934:	b29a      	uxth	r2, r3
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2200      	movs	r2, #0
 801693e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016946:	2200      	movs	r2, #0
 8016948:	2100      	movs	r1, #0
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f000 fb7f 	bl	801704e <USBH_CtlReq>
 8016950:	4603      	mov	r3, r0
}
 8016952:	4618      	mov	r0, r3
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b082      	sub	sp, #8
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
 8016962:	460b      	mov	r3, r1
 8016964:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	789b      	ldrb	r3, [r3, #2]
 801696a:	2b01      	cmp	r3, #1
 801696c:	d10e      	bne.n	801698c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	2200      	movs	r2, #0
 8016972:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2209      	movs	r2, #9
 8016978:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	887a      	ldrh	r2, [r7, #2]
 801697e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2200      	movs	r2, #0
 8016984:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	2200      	movs	r2, #0
 801698a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801698c:	2200      	movs	r2, #0
 801698e:	2100      	movs	r1, #0
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 fb5c 	bl	801704e <USBH_CtlReq>
 8016996:	4603      	mov	r3, r0
}
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}

080169a0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	460b      	mov	r3, r1
 80169aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	789b      	ldrb	r3, [r3, #2]
 80169b0:	2b01      	cmp	r3, #1
 80169b2:	d10f      	bne.n	80169d4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2200      	movs	r2, #0
 80169b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2203      	movs	r2, #3
 80169be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	b29a      	uxth	r2, r3
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2200      	movs	r2, #0
 80169d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80169d4:	2200      	movs	r2, #0
 80169d6:	2100      	movs	r1, #0
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f000 fb38 	bl	801704e <USBH_CtlReq>
 80169de:	4603      	mov	r3, r0
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3708      	adds	r7, #8
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	460b      	mov	r3, r1
 80169f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	789b      	ldrb	r3, [r3, #2]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d10f      	bne.n	8016a1c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2202      	movs	r2, #2
 8016a00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2201      	movs	r2, #1
 8016a06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8016a0e:	78fb      	ldrb	r3, [r7, #3]
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	2100      	movs	r1, #0
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fb14 	bl	801704e <USBH_CtlReq>
 8016a26:	4603      	mov	r3, r0
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}

08016a30 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b087      	sub	sp, #28
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	60b9      	str	r1, [r7, #8]
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f203 3326 	addw	r3, r3, #806	; 0x326
 8016a44:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016a46:	2300      	movs	r3, #0
 8016a48:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d101      	bne.n	8016a54 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8016a50:	2302      	movs	r3, #2
 8016a52:	e098      	b.n	8016b86 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	781a      	ldrb	r2, [r3, #0]
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	785a      	ldrb	r2, [r3, #1]
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	3302      	adds	r3, #2
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	b29a      	uxth	r2, r3
 8016a6c:	68bb      	ldr	r3, [r7, #8]
 8016a6e:	3303      	adds	r3, #3
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	021b      	lsls	r3, r3, #8
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	4313      	orrs	r3, r2
 8016a7a:	b29a      	uxth	r2, r3
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	791a      	ldrb	r2, [r3, #4]
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016a88:	68bb      	ldr	r3, [r7, #8]
 8016a8a:	795a      	ldrb	r2, [r3, #5]
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	799a      	ldrb	r2, [r3, #6]
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016a98:	68bb      	ldr	r3, [r7, #8]
 8016a9a:	79da      	ldrb	r2, [r3, #7]
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d004      	beq.n	8016ab4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d11b      	bne.n	8016aec <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	79db      	ldrb	r3, [r3, #7]
 8016ab8:	2b20      	cmp	r3, #32
 8016aba:	dc0f      	bgt.n	8016adc <USBH_ParseDevDesc+0xac>
 8016abc:	2b08      	cmp	r3, #8
 8016abe:	db0f      	blt.n	8016ae0 <USBH_ParseDevDesc+0xb0>
 8016ac0:	3b08      	subs	r3, #8
 8016ac2:	4a34      	ldr	r2, [pc, #208]	; (8016b94 <USBH_ParseDevDesc+0x164>)
 8016ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8016ac8:	f003 0301 	and.w	r3, r3, #1
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bf14      	ite	ne
 8016ad0:	2301      	movne	r3, #1
 8016ad2:	2300      	moveq	r3, #0
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d106      	bne.n	8016ae8 <USBH_ParseDevDesc+0xb8>
 8016ada:	e001      	b.n	8016ae0 <USBH_ParseDevDesc+0xb0>
 8016adc:	2b40      	cmp	r3, #64	; 0x40
 8016ade:	d003      	beq.n	8016ae8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	2208      	movs	r2, #8
 8016ae4:	71da      	strb	r2, [r3, #7]
        break;
 8016ae6:	e000      	b.n	8016aea <USBH_ParseDevDesc+0xba>
        break;
 8016ae8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016aea:	e00e      	b.n	8016b0a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	d107      	bne.n	8016b06 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	79db      	ldrb	r3, [r3, #7]
 8016afa:	2b08      	cmp	r3, #8
 8016afc:	d005      	beq.n	8016b0a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	2208      	movs	r2, #8
 8016b02:	71da      	strb	r2, [r3, #7]
 8016b04:	e001      	b.n	8016b0a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016b06:	2303      	movs	r3, #3
 8016b08:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016b0a:	88fb      	ldrh	r3, [r7, #6]
 8016b0c:	2b08      	cmp	r3, #8
 8016b0e:	d939      	bls.n	8016b84 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	3308      	adds	r3, #8
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	b29a      	uxth	r2, r3
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	3309      	adds	r3, #9
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	b29b      	uxth	r3, r3
 8016b20:	021b      	lsls	r3, r3, #8
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	4313      	orrs	r3, r2
 8016b26:	b29a      	uxth	r2, r3
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	330a      	adds	r3, #10
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	b29a      	uxth	r2, r3
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	330b      	adds	r3, #11
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	b29b      	uxth	r3, r3
 8016b3c:	021b      	lsls	r3, r3, #8
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	4313      	orrs	r3, r2
 8016b42:	b29a      	uxth	r2, r3
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	330c      	adds	r3, #12
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	b29a      	uxth	r2, r3
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	330d      	adds	r3, #13
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	021b      	lsls	r3, r3, #8
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	4313      	orrs	r3, r2
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	7b9a      	ldrb	r2, [r3, #14]
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	7bda      	ldrb	r2, [r3, #15]
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	7c1a      	ldrb	r2, [r3, #16]
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	7c5a      	ldrb	r2, [r3, #17]
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	371c      	adds	r7, #28
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b90:	4770      	bx	lr
 8016b92:	bf00      	nop
 8016b94:	01000101 	.word	0x01000101

08016b98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b08c      	sub	sp, #48	; 0x30
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	60f8      	str	r0, [r7, #12]
 8016ba0:	60b9      	str	r1, [r7, #8]
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016bac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d101      	bne.n	8016bca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016bc6:	2302      	movs	r3, #2
 8016bc8:	e0d7      	b.n	8016d7a <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	781a      	ldrb	r2, [r3, #0]
 8016bd2:	6a3b      	ldr	r3, [r7, #32]
 8016bd4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	785a      	ldrb	r2, [r3, #1]
 8016bda:	6a3b      	ldr	r3, [r7, #32]
 8016bdc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016bde:	68bb      	ldr	r3, [r7, #8]
 8016be0:	3302      	adds	r3, #2
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	b29a      	uxth	r2, r3
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	3303      	adds	r3, #3
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	021b      	lsls	r3, r3, #8
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	4313      	orrs	r3, r2
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bfa:	bf28      	it	cs
 8016bfc:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016c00:	b29a      	uxth	r2, r3
 8016c02:	6a3b      	ldr	r3, [r7, #32]
 8016c04:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	791a      	ldrb	r2, [r3, #4]
 8016c0a:	6a3b      	ldr	r3, [r7, #32]
 8016c0c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	795a      	ldrb	r2, [r3, #5]
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016c16:	68bb      	ldr	r3, [r7, #8]
 8016c18:	799a      	ldrb	r2, [r3, #6]
 8016c1a:	6a3b      	ldr	r3, [r7, #32]
 8016c1c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	79da      	ldrb	r2, [r3, #7]
 8016c22:	6a3b      	ldr	r3, [r7, #32]
 8016c24:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	7a1a      	ldrb	r2, [r3, #8]
 8016c2a:	6a3b      	ldr	r3, [r7, #32]
 8016c2c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8016c2e:	6a3b      	ldr	r3, [r7, #32]
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	2b09      	cmp	r3, #9
 8016c34:	d002      	beq.n	8016c3c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016c36:	6a3b      	ldr	r3, [r7, #32]
 8016c38:	2209      	movs	r2, #9
 8016c3a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016c3c:	88fb      	ldrh	r3, [r7, #6]
 8016c3e:	2b09      	cmp	r3, #9
 8016c40:	f240 8099 	bls.w	8016d76 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8016c44:	2309      	movs	r3, #9
 8016c46:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016c4c:	e07d      	b.n	8016d4a <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016c4e:	f107 0316 	add.w	r3, r7, #22
 8016c52:	4619      	mov	r1, r3
 8016c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c56:	f000 f9df 	bl	8017018 <USBH_GetNextDesc>
 8016c5a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c5e:	785b      	ldrb	r3, [r3, #1]
 8016c60:	2b04      	cmp	r3, #4
 8016c62:	d172      	bne.n	8016d4a <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	2b09      	cmp	r3, #9
 8016c6a:	d002      	beq.n	8016c72 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c6e:	2209      	movs	r2, #9
 8016c70:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8016c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c76:	221a      	movs	r2, #26
 8016c78:	fb02 f303 	mul.w	r3, r2, r3
 8016c7c:	3308      	adds	r3, #8
 8016c7e:	6a3a      	ldr	r2, [r7, #32]
 8016c80:	4413      	add	r3, r2
 8016c82:	3302      	adds	r3, #2
 8016c84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c88:	69f8      	ldr	r0, [r7, #28]
 8016c8a:	f000 f87a 	bl	8016d82 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016c94:	2300      	movs	r3, #0
 8016c96:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016c98:	e03f      	b.n	8016d1a <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016c9a:	f107 0316 	add.w	r3, r7, #22
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ca2:	f000 f9b9 	bl	8017018 <USBH_GetNextDesc>
 8016ca6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016caa:	785b      	ldrb	r3, [r3, #1]
 8016cac:	2b05      	cmp	r3, #5
 8016cae:	d134      	bne.n	8016d1a <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016cb0:	69fb      	ldr	r3, [r7, #28]
 8016cb2:	795b      	ldrb	r3, [r3, #5]
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	d10f      	bne.n	8016cd8 <USBH_ParseCfgDesc+0x140>
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	799b      	ldrb	r3, [r3, #6]
 8016cbc:	2b02      	cmp	r3, #2
 8016cbe:	d10b      	bne.n	8016cd8 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	79db      	ldrb	r3, [r3, #7]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d10b      	bne.n	8016ce0 <USBH_ParseCfgDesc+0x148>
 8016cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	2b09      	cmp	r3, #9
 8016cce:	d007      	beq.n	8016ce0 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd2:	2209      	movs	r2, #9
 8016cd4:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016cd6:	e003      	b.n	8016ce0 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cda:	2207      	movs	r2, #7
 8016cdc:	701a      	strb	r2, [r3, #0]
 8016cde:	e000      	b.n	8016ce2 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016ce0:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ce6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016cea:	3201      	adds	r2, #1
 8016cec:	00d2      	lsls	r2, r2, #3
 8016cee:	211a      	movs	r1, #26
 8016cf0:	fb01 f303 	mul.w	r3, r1, r3
 8016cf4:	4413      	add	r3, r2
 8016cf6:	3308      	adds	r3, #8
 8016cf8:	6a3a      	ldr	r2, [r7, #32]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	3304      	adds	r3, #4
 8016cfe:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d02:	69b9      	ldr	r1, [r7, #24]
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	f000 f86b 	bl	8016de0 <USBH_ParseEPDesc>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d14:	3301      	adds	r3, #1
 8016d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	791b      	ldrb	r3, [r3, #4]
 8016d1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d204      	bcs.n	8016d30 <USBH_ParseCfgDesc+0x198>
 8016d26:	6a3b      	ldr	r3, [r7, #32]
 8016d28:	885a      	ldrh	r2, [r3, #2]
 8016d2a:	8afb      	ldrh	r3, [r7, #22]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d8b4      	bhi.n	8016c9a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016d30:	69fb      	ldr	r3, [r7, #28]
 8016d32:	791b      	ldrb	r3, [r3, #4]
 8016d34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d201      	bcs.n	8016d40 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8016d3c:	2303      	movs	r3, #3
 8016d3e:	e01c      	b.n	8016d7a <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8016d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d44:	3301      	adds	r3, #1
 8016d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d4e:	2b09      	cmp	r3, #9
 8016d50:	d805      	bhi.n	8016d5e <USBH_ParseCfgDesc+0x1c6>
 8016d52:	6a3b      	ldr	r3, [r7, #32]
 8016d54:	885a      	ldrh	r2, [r3, #2]
 8016d56:	8afb      	ldrh	r3, [r7, #22]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	f63f af78 	bhi.w	8016c4e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8016d5e:	6a3b      	ldr	r3, [r7, #32]
 8016d60:	791b      	ldrb	r3, [r3, #4]
 8016d62:	2b0a      	cmp	r3, #10
 8016d64:	bf28      	it	cs
 8016d66:	230a      	movcs	r3, #10
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d201      	bcs.n	8016d76 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016d72:	2303      	movs	r3, #3
 8016d74:	e001      	b.n	8016d7a <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3730      	adds	r7, #48	; 0x30
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}

08016d82 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016d82:	b480      	push	{r7}
 8016d84:	b083      	sub	sp, #12
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6078      	str	r0, [r7, #4]
 8016d8a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	781a      	ldrb	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	785a      	ldrb	r2, [r3, #1]
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	789a      	ldrb	r2, [r3, #2]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	78da      	ldrb	r2, [r3, #3]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	791a      	ldrb	r2, [r3, #4]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	795a      	ldrb	r2, [r3, #5]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	799a      	ldrb	r2, [r3, #6]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	79da      	ldrb	r2, [r3, #7]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	7a1a      	ldrb	r2, [r3, #8]
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	721a      	strb	r2, [r3, #8]
}
 8016dd4:	bf00      	nop
 8016dd6:	370c      	adds	r7, #12
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr

08016de0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016de0:	b480      	push	{r7}
 8016de2:	b087      	sub	sp, #28
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8016dec:	2300      	movs	r3, #0
 8016dee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	781a      	ldrb	r2, [r3, #0]
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	785a      	ldrb	r2, [r3, #1]
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	789a      	ldrb	r2, [r3, #2]
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	78da      	ldrb	r2, [r3, #3]
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	3304      	adds	r3, #4
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	b29a      	uxth	r2, r3
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	3305      	adds	r3, #5
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	021b      	lsls	r3, r3, #8
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	4313      	orrs	r3, r2
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	799a      	ldrb	r2, [r3, #6]
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	889b      	ldrh	r3, [r3, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d009      	beq.n	8016e50 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e44:	d804      	bhi.n	8016e50 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e4e:	d901      	bls.n	8016e54 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8016e50:	2303      	movs	r3, #3
 8016e52:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d136      	bne.n	8016ecc <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	78db      	ldrb	r3, [r3, #3]
 8016e62:	f003 0303 	and.w	r3, r3, #3
 8016e66:	2b02      	cmp	r3, #2
 8016e68:	d108      	bne.n	8016e7c <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	889b      	ldrh	r3, [r3, #4]
 8016e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e72:	f240 8097 	bls.w	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016e76:	2303      	movs	r3, #3
 8016e78:	75fb      	strb	r3, [r7, #23]
 8016e7a:	e093      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	78db      	ldrb	r3, [r3, #3]
 8016e80:	f003 0303 	and.w	r3, r3, #3
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d107      	bne.n	8016e98 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	889b      	ldrh	r3, [r3, #4]
 8016e8c:	2b40      	cmp	r3, #64	; 0x40
 8016e8e:	f240 8089 	bls.w	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016e92:	2303      	movs	r3, #3
 8016e94:	75fb      	strb	r3, [r7, #23]
 8016e96:	e085      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	78db      	ldrb	r3, [r3, #3]
 8016e9c:	f003 0303 	and.w	r3, r3, #3
 8016ea0:	2b01      	cmp	r3, #1
 8016ea2:	d005      	beq.n	8016eb0 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	78db      	ldrb	r3, [r3, #3]
 8016ea8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d10a      	bne.n	8016ec6 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	799b      	ldrb	r3, [r3, #6]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d003      	beq.n	8016ec0 <USBH_ParseEPDesc+0xe0>
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	799b      	ldrb	r3, [r3, #6]
 8016ebc:	2b10      	cmp	r3, #16
 8016ebe:	d970      	bls.n	8016fa2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8016ec0:	2303      	movs	r3, #3
 8016ec2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016ec4:	e06d      	b.n	8016fa2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016ec6:	2303      	movs	r3, #3
 8016ec8:	75fb      	strb	r3, [r7, #23]
 8016eca:	e06b      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d13c      	bne.n	8016f50 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	78db      	ldrb	r3, [r3, #3]
 8016eda:	f003 0303 	and.w	r3, r3, #3
 8016ede:	2b02      	cmp	r3, #2
 8016ee0:	d005      	beq.n	8016eee <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	78db      	ldrb	r3, [r3, #3]
 8016ee6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d106      	bne.n	8016efc <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	889b      	ldrh	r3, [r3, #4]
 8016ef2:	2b40      	cmp	r3, #64	; 0x40
 8016ef4:	d956      	bls.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016ef6:	2303      	movs	r3, #3
 8016ef8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016efa:	e053      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	78db      	ldrb	r3, [r3, #3]
 8016f00:	f003 0303 	and.w	r3, r3, #3
 8016f04:	2b01      	cmp	r3, #1
 8016f06:	d10e      	bne.n	8016f26 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	799b      	ldrb	r3, [r3, #6]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d007      	beq.n	8016f20 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8016f14:	2b10      	cmp	r3, #16
 8016f16:	d803      	bhi.n	8016f20 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8016f1c:	2b40      	cmp	r3, #64	; 0x40
 8016f1e:	d941      	bls.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f20:	2303      	movs	r3, #3
 8016f22:	75fb      	strb	r3, [r7, #23]
 8016f24:	e03e      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016f26:	68bb      	ldr	r3, [r7, #8]
 8016f28:	78db      	ldrb	r3, [r3, #3]
 8016f2a:	f003 0303 	and.w	r3, r3, #3
 8016f2e:	2b03      	cmp	r3, #3
 8016f30:	d10b      	bne.n	8016f4a <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	799b      	ldrb	r3, [r3, #6]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d004      	beq.n	8016f44 <USBH_ParseEPDesc+0x164>
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	889b      	ldrh	r3, [r3, #4]
 8016f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f42:	d32f      	bcc.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f44:	2303      	movs	r3, #3
 8016f46:	75fb      	strb	r3, [r7, #23]
 8016f48:	e02c      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016f4a:	2303      	movs	r3, #3
 8016f4c:	75fb      	strb	r3, [r7, #23]
 8016f4e:	e029      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016f56:	2b02      	cmp	r3, #2
 8016f58:	d120      	bne.n	8016f9c <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016f5a:	68bb      	ldr	r3, [r7, #8]
 8016f5c:	78db      	ldrb	r3, [r3, #3]
 8016f5e:	f003 0303 	and.w	r3, r3, #3
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d106      	bne.n	8016f74 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	889b      	ldrh	r3, [r3, #4]
 8016f6a:	2b08      	cmp	r3, #8
 8016f6c:	d01a      	beq.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f6e:	2303      	movs	r3, #3
 8016f70:	75fb      	strb	r3, [r7, #23]
 8016f72:	e017      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	78db      	ldrb	r3, [r3, #3]
 8016f78:	f003 0303 	and.w	r3, r3, #3
 8016f7c:	2b03      	cmp	r3, #3
 8016f7e:	d10a      	bne.n	8016f96 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	799b      	ldrb	r3, [r3, #6]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d003      	beq.n	8016f90 <USBH_ParseEPDesc+0x1b0>
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	889b      	ldrh	r3, [r3, #4]
 8016f8c:	2b08      	cmp	r3, #8
 8016f8e:	d909      	bls.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016f90:	2303      	movs	r3, #3
 8016f92:	75fb      	strb	r3, [r7, #23]
 8016f94:	e006      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016f96:	2303      	movs	r3, #3
 8016f98:	75fb      	strb	r3, [r7, #23]
 8016f9a:	e003      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016f9c:	2303      	movs	r3, #3
 8016f9e:	75fb      	strb	r3, [r7, #23]
 8016fa0:	e000      	b.n	8016fa4 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016fa2:	bf00      	nop
  }

  return status;
 8016fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	371c      	adds	r7, #28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb0:	4770      	bx	lr

08016fb2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016fb2:	b480      	push	{r7}
 8016fb4:	b087      	sub	sp, #28
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	60f8      	str	r0, [r7, #12]
 8016fba:	60b9      	str	r1, [r7, #8]
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	2b03      	cmp	r3, #3
 8016fc8:	d120      	bne.n	801700c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	1e9a      	subs	r2, r3, #2
 8016fd0:	88fb      	ldrh	r3, [r7, #6]
 8016fd2:	4293      	cmp	r3, r2
 8016fd4:	bf28      	it	cs
 8016fd6:	4613      	movcs	r3, r2
 8016fd8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	3302      	adds	r3, #2
 8016fde:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	82fb      	strh	r3, [r7, #22]
 8016fe4:	e00b      	b.n	8016ffe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016fe6:	8afb      	ldrh	r3, [r7, #22]
 8016fe8:	68fa      	ldr	r2, [r7, #12]
 8016fea:	4413      	add	r3, r2
 8016fec:	781a      	ldrb	r2, [r3, #0]
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016ff8:	8afb      	ldrh	r3, [r7, #22]
 8016ffa:	3302      	adds	r3, #2
 8016ffc:	82fb      	strh	r3, [r7, #22]
 8016ffe:	8afa      	ldrh	r2, [r7, #22]
 8017000:	8abb      	ldrh	r3, [r7, #20]
 8017002:	429a      	cmp	r2, r3
 8017004:	d3ef      	bcc.n	8016fe6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	2200      	movs	r2, #0
 801700a:	701a      	strb	r2, [r3, #0]
  }
}
 801700c:	bf00      	nop
 801700e:	371c      	adds	r7, #28
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017018:	b480      	push	{r7}
 801701a:	b085      	sub	sp, #20
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	881a      	ldrh	r2, [r3, #0]
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	b29b      	uxth	r3, r3
 801702c:	4413      	add	r3, r2
 801702e:	b29a      	uxth	r2, r3
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	4413      	add	r3, r2
 801703e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017040:	68fb      	ldr	r3, [r7, #12]
}
 8017042:	4618      	mov	r0, r3
 8017044:	3714      	adds	r7, #20
 8017046:	46bd      	mov	sp, r7
 8017048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704c:	4770      	bx	lr

0801704e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801704e:	b580      	push	{r7, lr}
 8017050:	b086      	sub	sp, #24
 8017052:	af00      	add	r7, sp, #0
 8017054:	60f8      	str	r0, [r7, #12]
 8017056:	60b9      	str	r1, [r7, #8]
 8017058:	4613      	mov	r3, r2
 801705a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801705c:	2301      	movs	r3, #1
 801705e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	789b      	ldrb	r3, [r3, #2]
 8017064:	2b01      	cmp	r3, #1
 8017066:	d002      	beq.n	801706e <USBH_CtlReq+0x20>
 8017068:	2b02      	cmp	r3, #2
 801706a:	d00f      	beq.n	801708c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801706c:	e027      	b.n	80170be <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	68ba      	ldr	r2, [r7, #8]
 8017072:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	88fa      	ldrh	r2, [r7, #6]
 8017078:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	2201      	movs	r2, #1
 801707e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2202      	movs	r2, #2
 8017084:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8017086:	2301      	movs	r3, #1
 8017088:	75fb      	strb	r3, [r7, #23]
      break;
 801708a:	e018      	b.n	80170be <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801708c:	68f8      	ldr	r0, [r7, #12]
 801708e:	f000 f81b 	bl	80170c8 <USBH_HandleControl>
 8017092:	4603      	mov	r3, r0
 8017094:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8017096:	7dfb      	ldrb	r3, [r7, #23]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d002      	beq.n	80170a2 <USBH_CtlReq+0x54>
 801709c:	7dfb      	ldrb	r3, [r7, #23]
 801709e:	2b03      	cmp	r3, #3
 80170a0:	d106      	bne.n	80170b0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	2201      	movs	r2, #1
 80170a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	2200      	movs	r2, #0
 80170ac:	761a      	strb	r2, [r3, #24]
      break;
 80170ae:	e005      	b.n	80170bc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80170b0:	7dfb      	ldrb	r3, [r7, #23]
 80170b2:	2b02      	cmp	r3, #2
 80170b4:	d102      	bne.n	80170bc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	2201      	movs	r2, #1
 80170ba:	709a      	strb	r2, [r3, #2]
      break;
 80170bc:	bf00      	nop
  }
  return status;
 80170be:	7dfb      	ldrb	r3, [r7, #23]
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3718      	adds	r7, #24
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}

080170c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b086      	sub	sp, #24
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80170d0:	2301      	movs	r3, #1
 80170d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80170d4:	2300      	movs	r3, #0
 80170d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	7e1b      	ldrb	r3, [r3, #24]
 80170dc:	3b01      	subs	r3, #1
 80170de:	2b0a      	cmp	r3, #10
 80170e0:	f200 8156 	bhi.w	8017390 <USBH_HandleControl+0x2c8>
 80170e4:	a201      	add	r2, pc, #4	; (adr r2, 80170ec <USBH_HandleControl+0x24>)
 80170e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ea:	bf00      	nop
 80170ec:	08017119 	.word	0x08017119
 80170f0:	08017133 	.word	0x08017133
 80170f4:	0801719d 	.word	0x0801719d
 80170f8:	080171c3 	.word	0x080171c3
 80170fc:	080171fb 	.word	0x080171fb
 8017100:	08017225 	.word	0x08017225
 8017104:	08017277 	.word	0x08017277
 8017108:	08017299 	.word	0x08017299
 801710c:	080172d5 	.word	0x080172d5
 8017110:	080172fb 	.word	0x080172fb
 8017114:	08017339 	.word	0x08017339
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f103 0110 	add.w	r1, r3, #16
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	795b      	ldrb	r3, [r3, #5]
 8017122:	461a      	mov	r2, r3
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f000 f943 	bl	80173b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2202      	movs	r2, #2
 801712e:	761a      	strb	r2, [r3, #24]
      break;
 8017130:	e139      	b.n	80173a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	795b      	ldrb	r3, [r3, #5]
 8017136:	4619      	mov	r1, r3
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f7ed ff3d 	bl	8004fb8 <USBH_LL_GetURBState>
 801713e:	4603      	mov	r3, r0
 8017140:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8017142:	7bbb      	ldrb	r3, [r7, #14]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d11e      	bne.n	8017186 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	7c1b      	ldrb	r3, [r3, #16]
 801714c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017150:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	8adb      	ldrh	r3, [r3, #22]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d00a      	beq.n	8017170 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801715a:	7b7b      	ldrb	r3, [r7, #13]
 801715c:	2b80      	cmp	r3, #128	; 0x80
 801715e:	d103      	bne.n	8017168 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	2203      	movs	r2, #3
 8017164:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017166:	e115      	b.n	8017394 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2205      	movs	r2, #5
 801716c:	761a      	strb	r2, [r3, #24]
      break;
 801716e:	e111      	b.n	8017394 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8017170:	7b7b      	ldrb	r3, [r7, #13]
 8017172:	2b80      	cmp	r3, #128	; 0x80
 8017174:	d103      	bne.n	801717e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2209      	movs	r2, #9
 801717a:	761a      	strb	r2, [r3, #24]
      break;
 801717c:	e10a      	b.n	8017394 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2207      	movs	r2, #7
 8017182:	761a      	strb	r2, [r3, #24]
      break;
 8017184:	e106      	b.n	8017394 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8017186:	7bbb      	ldrb	r3, [r7, #14]
 8017188:	2b04      	cmp	r3, #4
 801718a:	d003      	beq.n	8017194 <USBH_HandleControl+0xcc>
 801718c:	7bbb      	ldrb	r3, [r7, #14]
 801718e:	2b02      	cmp	r3, #2
 8017190:	f040 8100 	bne.w	8017394 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	220b      	movs	r2, #11
 8017198:	761a      	strb	r2, [r3, #24]
      break;
 801719a:	e0fb      	b.n	8017394 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6899      	ldr	r1, [r3, #8]
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	899a      	ldrh	r2, [r3, #12]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	791b      	ldrb	r3, [r3, #4]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 f93a 	bl	801742e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2204      	movs	r2, #4
 80171be:	761a      	strb	r2, [r3, #24]
      break;
 80171c0:	e0f1      	b.n	80173a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	791b      	ldrb	r3, [r3, #4]
 80171c6:	4619      	mov	r1, r3
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f7ed fef5 	bl	8004fb8 <USBH_LL_GetURBState>
 80171ce:	4603      	mov	r3, r0
 80171d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80171d2:	7bbb      	ldrb	r3, [r7, #14]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d102      	bne.n	80171de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2209      	movs	r2, #9
 80171dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80171de:	7bbb      	ldrb	r3, [r7, #14]
 80171e0:	2b05      	cmp	r3, #5
 80171e2:	d102      	bne.n	80171ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80171e4:	2303      	movs	r3, #3
 80171e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80171e8:	e0d6      	b.n	8017398 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80171ea:	7bbb      	ldrb	r3, [r7, #14]
 80171ec:	2b04      	cmp	r3, #4
 80171ee:	f040 80d3 	bne.w	8017398 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	220b      	movs	r2, #11
 80171f6:	761a      	strb	r2, [r3, #24]
      break;
 80171f8:	e0ce      	b.n	8017398 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6899      	ldr	r1, [r3, #8]
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	899a      	ldrh	r2, [r3, #12]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	795b      	ldrb	r3, [r3, #5]
 8017206:	2001      	movs	r0, #1
 8017208:	9000      	str	r0, [sp, #0]
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f8ea 	bl	80173e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017216:	b29a      	uxth	r2, r3
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2206      	movs	r2, #6
 8017220:	761a      	strb	r2, [r3, #24]
      break;
 8017222:	e0c0      	b.n	80173a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	795b      	ldrb	r3, [r3, #5]
 8017228:	4619      	mov	r1, r3
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7ed fec4 	bl	8004fb8 <USBH_LL_GetURBState>
 8017230:	4603      	mov	r3, r0
 8017232:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8017234:	7bbb      	ldrb	r3, [r7, #14]
 8017236:	2b01      	cmp	r3, #1
 8017238:	d103      	bne.n	8017242 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2207      	movs	r2, #7
 801723e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017240:	e0ac      	b.n	801739c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8017242:	7bbb      	ldrb	r3, [r7, #14]
 8017244:	2b05      	cmp	r3, #5
 8017246:	d105      	bne.n	8017254 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	220c      	movs	r2, #12
 801724c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801724e:	2303      	movs	r3, #3
 8017250:	73fb      	strb	r3, [r7, #15]
      break;
 8017252:	e0a3      	b.n	801739c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017254:	7bbb      	ldrb	r3, [r7, #14]
 8017256:	2b02      	cmp	r3, #2
 8017258:	d103      	bne.n	8017262 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2205      	movs	r2, #5
 801725e:	761a      	strb	r2, [r3, #24]
      break;
 8017260:	e09c      	b.n	801739c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8017262:	7bbb      	ldrb	r3, [r7, #14]
 8017264:	2b04      	cmp	r3, #4
 8017266:	f040 8099 	bne.w	801739c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	220b      	movs	r2, #11
 801726e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8017270:	2302      	movs	r3, #2
 8017272:	73fb      	strb	r3, [r7, #15]
      break;
 8017274:	e092      	b.n	801739c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	791b      	ldrb	r3, [r3, #4]
 801727a:	2200      	movs	r2, #0
 801727c:	2100      	movs	r1, #0
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f000 f8d5 	bl	801742e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801728a:	b29a      	uxth	r2, r3
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2208      	movs	r2, #8
 8017294:	761a      	strb	r2, [r3, #24]

      break;
 8017296:	e086      	b.n	80173a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	791b      	ldrb	r3, [r3, #4]
 801729c:	4619      	mov	r1, r3
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7ed fe8a 	bl	8004fb8 <USBH_LL_GetURBState>
 80172a4:	4603      	mov	r3, r0
 80172a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80172a8:	7bbb      	ldrb	r3, [r7, #14]
 80172aa:	2b01      	cmp	r3, #1
 80172ac:	d105      	bne.n	80172ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	220d      	movs	r2, #13
 80172b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80172b4:	2300      	movs	r3, #0
 80172b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80172b8:	e072      	b.n	80173a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80172ba:	7bbb      	ldrb	r3, [r7, #14]
 80172bc:	2b04      	cmp	r3, #4
 80172be:	d103      	bne.n	80172c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	220b      	movs	r2, #11
 80172c4:	761a      	strb	r2, [r3, #24]
      break;
 80172c6:	e06b      	b.n	80173a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80172c8:	7bbb      	ldrb	r3, [r7, #14]
 80172ca:	2b05      	cmp	r3, #5
 80172cc:	d168      	bne.n	80173a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80172ce:	2303      	movs	r3, #3
 80172d0:	73fb      	strb	r3, [r7, #15]
      break;
 80172d2:	e065      	b.n	80173a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	795b      	ldrb	r3, [r3, #5]
 80172d8:	2201      	movs	r2, #1
 80172da:	9200      	str	r2, [sp, #0]
 80172dc:	2200      	movs	r2, #0
 80172de:	2100      	movs	r1, #0
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f000 f87f 	bl	80173e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80172ec:	b29a      	uxth	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	220a      	movs	r2, #10
 80172f6:	761a      	strb	r2, [r3, #24]
      break;
 80172f8:	e055      	b.n	80173a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	795b      	ldrb	r3, [r3, #5]
 80172fe:	4619      	mov	r1, r3
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f7ed fe59 	bl	8004fb8 <USBH_LL_GetURBState>
 8017306:	4603      	mov	r3, r0
 8017308:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801730a:	7bbb      	ldrb	r3, [r7, #14]
 801730c:	2b01      	cmp	r3, #1
 801730e:	d105      	bne.n	801731c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8017310:	2300      	movs	r3, #0
 8017312:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	220d      	movs	r2, #13
 8017318:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801731a:	e043      	b.n	80173a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801731c:	7bbb      	ldrb	r3, [r7, #14]
 801731e:	2b02      	cmp	r3, #2
 8017320:	d103      	bne.n	801732a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2209      	movs	r2, #9
 8017326:	761a      	strb	r2, [r3, #24]
      break;
 8017328:	e03c      	b.n	80173a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801732a:	7bbb      	ldrb	r3, [r7, #14]
 801732c:	2b04      	cmp	r3, #4
 801732e:	d139      	bne.n	80173a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	220b      	movs	r2, #11
 8017334:	761a      	strb	r2, [r3, #24]
      break;
 8017336:	e035      	b.n	80173a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	7e5b      	ldrb	r3, [r3, #25]
 801733c:	3301      	adds	r3, #1
 801733e:	b2da      	uxtb	r2, r3
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	765a      	strb	r2, [r3, #25]
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	7e5b      	ldrb	r3, [r3, #25]
 8017348:	2b02      	cmp	r3, #2
 801734a:	d806      	bhi.n	801735a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2201      	movs	r2, #1
 8017350:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2201      	movs	r2, #1
 8017356:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8017358:	e025      	b.n	80173a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8017360:	2106      	movs	r1, #6
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2200      	movs	r2, #0
 801736a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	795b      	ldrb	r3, [r3, #5]
 8017370:	4619      	mov	r1, r3
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 f90d 	bl	8017592 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	791b      	ldrb	r3, [r3, #4]
 801737c:	4619      	mov	r1, r3
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 f907 	bl	8017592 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801738a:	2302      	movs	r3, #2
 801738c:	73fb      	strb	r3, [r7, #15]
      break;
 801738e:	e00a      	b.n	80173a6 <USBH_HandleControl+0x2de>

    default:
      break;
 8017390:	bf00      	nop
 8017392:	e008      	b.n	80173a6 <USBH_HandleControl+0x2de>
      break;
 8017394:	bf00      	nop
 8017396:	e006      	b.n	80173a6 <USBH_HandleControl+0x2de>
      break;
 8017398:	bf00      	nop
 801739a:	e004      	b.n	80173a6 <USBH_HandleControl+0x2de>
      break;
 801739c:	bf00      	nop
 801739e:	e002      	b.n	80173a6 <USBH_HandleControl+0x2de>
      break;
 80173a0:	bf00      	nop
 80173a2:	e000      	b.n	80173a6 <USBH_HandleControl+0x2de>
      break;
 80173a4:	bf00      	nop
  }

  return status;
 80173a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3710      	adds	r7, #16
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b088      	sub	sp, #32
 80173b4:	af04      	add	r7, sp, #16
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	4613      	mov	r3, r2
 80173bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80173be:	79f9      	ldrb	r1, [r7, #7]
 80173c0:	2300      	movs	r3, #0
 80173c2:	9303      	str	r3, [sp, #12]
 80173c4:	2308      	movs	r3, #8
 80173c6:	9302      	str	r3, [sp, #8]
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	9301      	str	r3, [sp, #4]
 80173cc:	2300      	movs	r3, #0
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	2300      	movs	r3, #0
 80173d2:	2200      	movs	r2, #0
 80173d4:	68f8      	ldr	r0, [r7, #12]
 80173d6:	f7ed fdbe 	bl	8004f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3710      	adds	r7, #16
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b088      	sub	sp, #32
 80173e8:	af04      	add	r7, sp, #16
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	4611      	mov	r1, r2
 80173f0:	461a      	mov	r2, r3
 80173f2:	460b      	mov	r3, r1
 80173f4:	80fb      	strh	r3, [r7, #6]
 80173f6:	4613      	mov	r3, r2
 80173f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017400:	2b00      	cmp	r3, #0
 8017402:	d001      	beq.n	8017408 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8017404:	2300      	movs	r3, #0
 8017406:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017408:	7979      	ldrb	r1, [r7, #5]
 801740a:	7e3b      	ldrb	r3, [r7, #24]
 801740c:	9303      	str	r3, [sp, #12]
 801740e:	88fb      	ldrh	r3, [r7, #6]
 8017410:	9302      	str	r3, [sp, #8]
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	9301      	str	r3, [sp, #4]
 8017416:	2301      	movs	r3, #1
 8017418:	9300      	str	r3, [sp, #0]
 801741a:	2300      	movs	r3, #0
 801741c:	2200      	movs	r2, #0
 801741e:	68f8      	ldr	r0, [r7, #12]
 8017420:	f7ed fd99 	bl	8004f56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8017424:	2300      	movs	r3, #0
}
 8017426:	4618      	mov	r0, r3
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}

0801742e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801742e:	b580      	push	{r7, lr}
 8017430:	b088      	sub	sp, #32
 8017432:	af04      	add	r7, sp, #16
 8017434:	60f8      	str	r0, [r7, #12]
 8017436:	60b9      	str	r1, [r7, #8]
 8017438:	4611      	mov	r1, r2
 801743a:	461a      	mov	r2, r3
 801743c:	460b      	mov	r3, r1
 801743e:	80fb      	strh	r3, [r7, #6]
 8017440:	4613      	mov	r3, r2
 8017442:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017444:	7979      	ldrb	r1, [r7, #5]
 8017446:	2300      	movs	r3, #0
 8017448:	9303      	str	r3, [sp, #12]
 801744a:	88fb      	ldrh	r3, [r7, #6]
 801744c:	9302      	str	r3, [sp, #8]
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	9301      	str	r3, [sp, #4]
 8017452:	2301      	movs	r3, #1
 8017454:	9300      	str	r3, [sp, #0]
 8017456:	2300      	movs	r3, #0
 8017458:	2201      	movs	r2, #1
 801745a:	68f8      	ldr	r0, [r7, #12]
 801745c:	f7ed fd7b 	bl	8004f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8017460:	2300      	movs	r3, #0

}
 8017462:	4618      	mov	r0, r3
 8017464:	3710      	adds	r7, #16
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}

0801746a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b088      	sub	sp, #32
 801746e:	af04      	add	r7, sp, #16
 8017470:	60f8      	str	r0, [r7, #12]
 8017472:	60b9      	str	r1, [r7, #8]
 8017474:	4611      	mov	r1, r2
 8017476:	461a      	mov	r2, r3
 8017478:	460b      	mov	r3, r1
 801747a:	80fb      	strh	r3, [r7, #6]
 801747c:	4613      	mov	r3, r2
 801747e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017486:	2b00      	cmp	r3, #0
 8017488:	d001      	beq.n	801748e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801748a:	2300      	movs	r3, #0
 801748c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801748e:	7979      	ldrb	r1, [r7, #5]
 8017490:	7e3b      	ldrb	r3, [r7, #24]
 8017492:	9303      	str	r3, [sp, #12]
 8017494:	88fb      	ldrh	r3, [r7, #6]
 8017496:	9302      	str	r3, [sp, #8]
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	9301      	str	r3, [sp, #4]
 801749c:	2301      	movs	r3, #1
 801749e:	9300      	str	r3, [sp, #0]
 80174a0:	2302      	movs	r3, #2
 80174a2:	2200      	movs	r2, #0
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	f7ed fd56 	bl	8004f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80174aa:	2300      	movs	r3, #0
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	3710      	adds	r7, #16
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}

080174b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b088      	sub	sp, #32
 80174b8:	af04      	add	r7, sp, #16
 80174ba:	60f8      	str	r0, [r7, #12]
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	4611      	mov	r1, r2
 80174c0:	461a      	mov	r2, r3
 80174c2:	460b      	mov	r3, r1
 80174c4:	80fb      	strh	r3, [r7, #6]
 80174c6:	4613      	mov	r3, r2
 80174c8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80174ca:	7979      	ldrb	r1, [r7, #5]
 80174cc:	2300      	movs	r3, #0
 80174ce:	9303      	str	r3, [sp, #12]
 80174d0:	88fb      	ldrh	r3, [r7, #6]
 80174d2:	9302      	str	r3, [sp, #8]
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	9301      	str	r3, [sp, #4]
 80174d8:	2301      	movs	r3, #1
 80174da:	9300      	str	r3, [sp, #0]
 80174dc:	2302      	movs	r3, #2
 80174de:	2201      	movs	r2, #1
 80174e0:	68f8      	ldr	r0, [r7, #12]
 80174e2:	f7ed fd38 	bl	8004f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80174e6:	2300      	movs	r3, #0
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3710      	adds	r7, #16
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}

080174f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b086      	sub	sp, #24
 80174f4:	af04      	add	r7, sp, #16
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	4608      	mov	r0, r1
 80174fa:	4611      	mov	r1, r2
 80174fc:	461a      	mov	r2, r3
 80174fe:	4603      	mov	r3, r0
 8017500:	70fb      	strb	r3, [r7, #3]
 8017502:	460b      	mov	r3, r1
 8017504:	70bb      	strb	r3, [r7, #2]
 8017506:	4613      	mov	r3, r2
 8017508:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801750a:	7878      	ldrb	r0, [r7, #1]
 801750c:	78ba      	ldrb	r2, [r7, #2]
 801750e:	78f9      	ldrb	r1, [r7, #3]
 8017510:	8b3b      	ldrh	r3, [r7, #24]
 8017512:	9302      	str	r3, [sp, #8]
 8017514:	7d3b      	ldrb	r3, [r7, #20]
 8017516:	9301      	str	r3, [sp, #4]
 8017518:	7c3b      	ldrb	r3, [r7, #16]
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	4603      	mov	r3, r0
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f7ed fccb 	bl	8004eba <USBH_LL_OpenPipe>

  return USBH_OK;
 8017524:	2300      	movs	r3, #0
}
 8017526:	4618      	mov	r0, r3
 8017528:	3708      	adds	r7, #8
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801752e:	b580      	push	{r7, lr}
 8017530:	b082      	sub	sp, #8
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
 8017536:	460b      	mov	r3, r1
 8017538:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801753a:	78fb      	ldrb	r3, [r7, #3]
 801753c:	4619      	mov	r1, r3
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f7ed fcea 	bl	8004f18 <USBH_LL_ClosePipe>

  return USBH_OK;
 8017544:	2300      	movs	r3, #0
}
 8017546:	4618      	mov	r0, r3
 8017548:	3708      	adds	r7, #8
 801754a:	46bd      	mov	sp, r7
 801754c:	bd80      	pop	{r7, pc}

0801754e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801754e:	b580      	push	{r7, lr}
 8017550:	b084      	sub	sp, #16
 8017552:	af00      	add	r7, sp, #0
 8017554:	6078      	str	r0, [r7, #4]
 8017556:	460b      	mov	r3, r1
 8017558:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f000 f839 	bl	80175d2 <USBH_GetFreePipe>
 8017560:	4603      	mov	r3, r0
 8017562:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8017564:	89fb      	ldrh	r3, [r7, #14]
 8017566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801756a:	4293      	cmp	r3, r2
 801756c:	d00b      	beq.n	8017586 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801756e:	78fa      	ldrb	r2, [r7, #3]
 8017570:	89fb      	ldrh	r3, [r7, #14]
 8017572:	f003 030f 	and.w	r3, r3, #15
 8017576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801757a:	6879      	ldr	r1, [r7, #4]
 801757c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017580:	009b      	lsls	r3, r3, #2
 8017582:	440b      	add	r3, r1
 8017584:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8017586:	89fb      	ldrh	r3, [r7, #14]
 8017588:	b2db      	uxtb	r3, r3
}
 801758a:	4618      	mov	r0, r3
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8017592:	b480      	push	{r7}
 8017594:	b083      	sub	sp, #12
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
 801759a:	460b      	mov	r3, r1
 801759c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801759e:	78fb      	ldrb	r3, [r7, #3]
 80175a0:	2b0f      	cmp	r3, #15
 80175a2:	d80f      	bhi.n	80175c4 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80175a4:	78fb      	ldrb	r3, [r7, #3]
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80175ac:	009b      	lsls	r3, r3, #2
 80175ae:	4413      	add	r3, r2
 80175b0:	685a      	ldr	r2, [r3, #4]
 80175b2:	78fb      	ldrb	r3, [r7, #3]
 80175b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80175b8:	6879      	ldr	r1, [r7, #4]
 80175ba:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	440b      	add	r3, r1
 80175c2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80175c4:	2300      	movs	r3, #0
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	370c      	adds	r7, #12
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr

080175d2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80175d2:	b480      	push	{r7}
 80175d4:	b085      	sub	sp, #20
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80175da:	2300      	movs	r3, #0
 80175dc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80175de:	2300      	movs	r3, #0
 80175e0:	73fb      	strb	r3, [r7, #15]
 80175e2:	e010      	b.n	8017606 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80175e4:	7bfb      	ldrb	r3, [r7, #15]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80175ec:	009b      	lsls	r3, r3, #2
 80175ee:	4413      	add	r3, r2
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d102      	bne.n	8017600 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80175fa:	7bfb      	ldrb	r3, [r7, #15]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	e007      	b.n	8017610 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017600:	7bfb      	ldrb	r3, [r7, #15]
 8017602:	3301      	adds	r3, #1
 8017604:	73fb      	strb	r3, [r7, #15]
 8017606:	7bfb      	ldrb	r3, [r7, #15]
 8017608:	2b0f      	cmp	r3, #15
 801760a:	d9eb      	bls.n	80175e4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801760c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8017610:	4618      	mov	r0, r3
 8017612:	3714      	adds	r7, #20
 8017614:	46bd      	mov	sp, r7
 8017616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761a:	4770      	bx	lr

0801761c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801761c:	b480      	push	{r7}
 801761e:	b087      	sub	sp, #28
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	4613      	mov	r3, r2
 8017628:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801762a:	2301      	movs	r3, #1
 801762c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017632:	4b1f      	ldr	r3, [pc, #124]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 8017634:	7a5b      	ldrb	r3, [r3, #9]
 8017636:	b2db      	uxtb	r3, r3
 8017638:	2b00      	cmp	r3, #0
 801763a:	d131      	bne.n	80176a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801763c:	4b1c      	ldr	r3, [pc, #112]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 801763e:	7a5b      	ldrb	r3, [r3, #9]
 8017640:	b2db      	uxtb	r3, r3
 8017642:	461a      	mov	r2, r3
 8017644:	4b1a      	ldr	r3, [pc, #104]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 8017646:	2100      	movs	r1, #0
 8017648:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801764a:	4b19      	ldr	r3, [pc, #100]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 801764c:	7a5b      	ldrb	r3, [r3, #9]
 801764e:	b2db      	uxtb	r3, r3
 8017650:	4a17      	ldr	r2, [pc, #92]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 8017652:	009b      	lsls	r3, r3, #2
 8017654:	4413      	add	r3, r2
 8017656:	68fa      	ldr	r2, [r7, #12]
 8017658:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801765a:	4b15      	ldr	r3, [pc, #84]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 801765c:	7a5b      	ldrb	r3, [r3, #9]
 801765e:	b2db      	uxtb	r3, r3
 8017660:	461a      	mov	r2, r3
 8017662:	4b13      	ldr	r3, [pc, #76]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 8017664:	4413      	add	r3, r2
 8017666:	79fa      	ldrb	r2, [r7, #7]
 8017668:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801766a:	4b11      	ldr	r3, [pc, #68]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 801766c:	7a5b      	ldrb	r3, [r3, #9]
 801766e:	b2db      	uxtb	r3, r3
 8017670:	1c5a      	adds	r2, r3, #1
 8017672:	b2d1      	uxtb	r1, r2
 8017674:	4a0e      	ldr	r2, [pc, #56]	; (80176b0 <FATFS_LinkDriverEx+0x94>)
 8017676:	7251      	strb	r1, [r2, #9]
 8017678:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801767a:	7dbb      	ldrb	r3, [r7, #22]
 801767c:	3330      	adds	r3, #48	; 0x30
 801767e:	b2da      	uxtb	r2, r3
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017684:	68bb      	ldr	r3, [r7, #8]
 8017686:	3301      	adds	r3, #1
 8017688:	223a      	movs	r2, #58	; 0x3a
 801768a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	3302      	adds	r3, #2
 8017690:	222f      	movs	r2, #47	; 0x2f
 8017692:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	3303      	adds	r3, #3
 8017698:	2200      	movs	r2, #0
 801769a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801769c:	2300      	movs	r3, #0
 801769e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80176a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	371c      	adds	r7, #28
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop
 80176b0:	20002140 	.word	0x20002140

080176b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b082      	sub	sp, #8
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80176be:	2200      	movs	r2, #0
 80176c0:	6839      	ldr	r1, [r7, #0]
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f7ff ffaa 	bl	801761c <FATFS_LinkDriverEx>
 80176c8:	4603      	mov	r3, r0
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3708      	adds	r7, #8
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
	...

080176d4 <malloc>:
 80176d4:	4b02      	ldr	r3, [pc, #8]	; (80176e0 <malloc+0xc>)
 80176d6:	4601      	mov	r1, r0
 80176d8:	6818      	ldr	r0, [r3, #0]
 80176da:	f000 b82b 	b.w	8017734 <_malloc_r>
 80176de:	bf00      	nop
 80176e0:	2000009c 	.word	0x2000009c

080176e4 <free>:
 80176e4:	4b02      	ldr	r3, [pc, #8]	; (80176f0 <free+0xc>)
 80176e6:	4601      	mov	r1, r0
 80176e8:	6818      	ldr	r0, [r3, #0]
 80176ea:	f000 b8f3 	b.w	80178d4 <_free_r>
 80176ee:	bf00      	nop
 80176f0:	2000009c 	.word	0x2000009c

080176f4 <sbrk_aligned>:
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	4e0e      	ldr	r6, [pc, #56]	; (8017730 <sbrk_aligned+0x3c>)
 80176f8:	460c      	mov	r4, r1
 80176fa:	6831      	ldr	r1, [r6, #0]
 80176fc:	4605      	mov	r5, r0
 80176fe:	b911      	cbnz	r1, 8017706 <sbrk_aligned+0x12>
 8017700:	f000 f8ac 	bl	801785c <_sbrk_r>
 8017704:	6030      	str	r0, [r6, #0]
 8017706:	4621      	mov	r1, r4
 8017708:	4628      	mov	r0, r5
 801770a:	f000 f8a7 	bl	801785c <_sbrk_r>
 801770e:	1c43      	adds	r3, r0, #1
 8017710:	d00a      	beq.n	8017728 <sbrk_aligned+0x34>
 8017712:	1cc4      	adds	r4, r0, #3
 8017714:	f024 0403 	bic.w	r4, r4, #3
 8017718:	42a0      	cmp	r0, r4
 801771a:	d007      	beq.n	801772c <sbrk_aligned+0x38>
 801771c:	1a21      	subs	r1, r4, r0
 801771e:	4628      	mov	r0, r5
 8017720:	f000 f89c 	bl	801785c <_sbrk_r>
 8017724:	3001      	adds	r0, #1
 8017726:	d101      	bne.n	801772c <sbrk_aligned+0x38>
 8017728:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801772c:	4620      	mov	r0, r4
 801772e:	bd70      	pop	{r4, r5, r6, pc}
 8017730:	20002150 	.word	0x20002150

08017734 <_malloc_r>:
 8017734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017738:	1ccd      	adds	r5, r1, #3
 801773a:	f025 0503 	bic.w	r5, r5, #3
 801773e:	3508      	adds	r5, #8
 8017740:	2d0c      	cmp	r5, #12
 8017742:	bf38      	it	cc
 8017744:	250c      	movcc	r5, #12
 8017746:	2d00      	cmp	r5, #0
 8017748:	4607      	mov	r7, r0
 801774a:	db01      	blt.n	8017750 <_malloc_r+0x1c>
 801774c:	42a9      	cmp	r1, r5
 801774e:	d905      	bls.n	801775c <_malloc_r+0x28>
 8017750:	230c      	movs	r3, #12
 8017752:	603b      	str	r3, [r7, #0]
 8017754:	2600      	movs	r6, #0
 8017756:	4630      	mov	r0, r6
 8017758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801775c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017830 <_malloc_r+0xfc>
 8017760:	f000 f868 	bl	8017834 <__malloc_lock>
 8017764:	f8d8 3000 	ldr.w	r3, [r8]
 8017768:	461c      	mov	r4, r3
 801776a:	bb5c      	cbnz	r4, 80177c4 <_malloc_r+0x90>
 801776c:	4629      	mov	r1, r5
 801776e:	4638      	mov	r0, r7
 8017770:	f7ff ffc0 	bl	80176f4 <sbrk_aligned>
 8017774:	1c43      	adds	r3, r0, #1
 8017776:	4604      	mov	r4, r0
 8017778:	d155      	bne.n	8017826 <_malloc_r+0xf2>
 801777a:	f8d8 4000 	ldr.w	r4, [r8]
 801777e:	4626      	mov	r6, r4
 8017780:	2e00      	cmp	r6, #0
 8017782:	d145      	bne.n	8017810 <_malloc_r+0xdc>
 8017784:	2c00      	cmp	r4, #0
 8017786:	d048      	beq.n	801781a <_malloc_r+0xe6>
 8017788:	6823      	ldr	r3, [r4, #0]
 801778a:	4631      	mov	r1, r6
 801778c:	4638      	mov	r0, r7
 801778e:	eb04 0903 	add.w	r9, r4, r3
 8017792:	f000 f863 	bl	801785c <_sbrk_r>
 8017796:	4581      	cmp	r9, r0
 8017798:	d13f      	bne.n	801781a <_malloc_r+0xe6>
 801779a:	6821      	ldr	r1, [r4, #0]
 801779c:	1a6d      	subs	r5, r5, r1
 801779e:	4629      	mov	r1, r5
 80177a0:	4638      	mov	r0, r7
 80177a2:	f7ff ffa7 	bl	80176f4 <sbrk_aligned>
 80177a6:	3001      	adds	r0, #1
 80177a8:	d037      	beq.n	801781a <_malloc_r+0xe6>
 80177aa:	6823      	ldr	r3, [r4, #0]
 80177ac:	442b      	add	r3, r5
 80177ae:	6023      	str	r3, [r4, #0]
 80177b0:	f8d8 3000 	ldr.w	r3, [r8]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d038      	beq.n	801782a <_malloc_r+0xf6>
 80177b8:	685a      	ldr	r2, [r3, #4]
 80177ba:	42a2      	cmp	r2, r4
 80177bc:	d12b      	bne.n	8017816 <_malloc_r+0xe2>
 80177be:	2200      	movs	r2, #0
 80177c0:	605a      	str	r2, [r3, #4]
 80177c2:	e00f      	b.n	80177e4 <_malloc_r+0xb0>
 80177c4:	6822      	ldr	r2, [r4, #0]
 80177c6:	1b52      	subs	r2, r2, r5
 80177c8:	d41f      	bmi.n	801780a <_malloc_r+0xd6>
 80177ca:	2a0b      	cmp	r2, #11
 80177cc:	d917      	bls.n	80177fe <_malloc_r+0xca>
 80177ce:	1961      	adds	r1, r4, r5
 80177d0:	42a3      	cmp	r3, r4
 80177d2:	6025      	str	r5, [r4, #0]
 80177d4:	bf18      	it	ne
 80177d6:	6059      	strne	r1, [r3, #4]
 80177d8:	6863      	ldr	r3, [r4, #4]
 80177da:	bf08      	it	eq
 80177dc:	f8c8 1000 	streq.w	r1, [r8]
 80177e0:	5162      	str	r2, [r4, r5]
 80177e2:	604b      	str	r3, [r1, #4]
 80177e4:	4638      	mov	r0, r7
 80177e6:	f104 060b 	add.w	r6, r4, #11
 80177ea:	f000 f829 	bl	8017840 <__malloc_unlock>
 80177ee:	f026 0607 	bic.w	r6, r6, #7
 80177f2:	1d23      	adds	r3, r4, #4
 80177f4:	1af2      	subs	r2, r6, r3
 80177f6:	d0ae      	beq.n	8017756 <_malloc_r+0x22>
 80177f8:	1b9b      	subs	r3, r3, r6
 80177fa:	50a3      	str	r3, [r4, r2]
 80177fc:	e7ab      	b.n	8017756 <_malloc_r+0x22>
 80177fe:	42a3      	cmp	r3, r4
 8017800:	6862      	ldr	r2, [r4, #4]
 8017802:	d1dd      	bne.n	80177c0 <_malloc_r+0x8c>
 8017804:	f8c8 2000 	str.w	r2, [r8]
 8017808:	e7ec      	b.n	80177e4 <_malloc_r+0xb0>
 801780a:	4623      	mov	r3, r4
 801780c:	6864      	ldr	r4, [r4, #4]
 801780e:	e7ac      	b.n	801776a <_malloc_r+0x36>
 8017810:	4634      	mov	r4, r6
 8017812:	6876      	ldr	r6, [r6, #4]
 8017814:	e7b4      	b.n	8017780 <_malloc_r+0x4c>
 8017816:	4613      	mov	r3, r2
 8017818:	e7cc      	b.n	80177b4 <_malloc_r+0x80>
 801781a:	230c      	movs	r3, #12
 801781c:	603b      	str	r3, [r7, #0]
 801781e:	4638      	mov	r0, r7
 8017820:	f000 f80e 	bl	8017840 <__malloc_unlock>
 8017824:	e797      	b.n	8017756 <_malloc_r+0x22>
 8017826:	6025      	str	r5, [r4, #0]
 8017828:	e7dc      	b.n	80177e4 <_malloc_r+0xb0>
 801782a:	605b      	str	r3, [r3, #4]
 801782c:	deff      	udf	#255	; 0xff
 801782e:	bf00      	nop
 8017830:	2000214c 	.word	0x2000214c

08017834 <__malloc_lock>:
 8017834:	4801      	ldr	r0, [pc, #4]	; (801783c <__malloc_lock+0x8>)
 8017836:	f000 b84b 	b.w	80178d0 <__retarget_lock_acquire_recursive>
 801783a:	bf00      	nop
 801783c:	2000228c 	.word	0x2000228c

08017840 <__malloc_unlock>:
 8017840:	4801      	ldr	r0, [pc, #4]	; (8017848 <__malloc_unlock+0x8>)
 8017842:	f000 b846 	b.w	80178d2 <__retarget_lock_release_recursive>
 8017846:	bf00      	nop
 8017848:	2000228c 	.word	0x2000228c

0801784c <memset>:
 801784c:	4402      	add	r2, r0
 801784e:	4603      	mov	r3, r0
 8017850:	4293      	cmp	r3, r2
 8017852:	d100      	bne.n	8017856 <memset+0xa>
 8017854:	4770      	bx	lr
 8017856:	f803 1b01 	strb.w	r1, [r3], #1
 801785a:	e7f9      	b.n	8017850 <memset+0x4>

0801785c <_sbrk_r>:
 801785c:	b538      	push	{r3, r4, r5, lr}
 801785e:	4d06      	ldr	r5, [pc, #24]	; (8017878 <_sbrk_r+0x1c>)
 8017860:	2300      	movs	r3, #0
 8017862:	4604      	mov	r4, r0
 8017864:	4608      	mov	r0, r1
 8017866:	602b      	str	r3, [r5, #0]
 8017868:	f7ec f99a 	bl	8003ba0 <_sbrk>
 801786c:	1c43      	adds	r3, r0, #1
 801786e:	d102      	bne.n	8017876 <_sbrk_r+0x1a>
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	b103      	cbz	r3, 8017876 <_sbrk_r+0x1a>
 8017874:	6023      	str	r3, [r4, #0]
 8017876:	bd38      	pop	{r3, r4, r5, pc}
 8017878:	20002290 	.word	0x20002290

0801787c <__errno>:
 801787c:	4b01      	ldr	r3, [pc, #4]	; (8017884 <__errno+0x8>)
 801787e:	6818      	ldr	r0, [r3, #0]
 8017880:	4770      	bx	lr
 8017882:	bf00      	nop
 8017884:	2000009c 	.word	0x2000009c

08017888 <__libc_init_array>:
 8017888:	b570      	push	{r4, r5, r6, lr}
 801788a:	4d0d      	ldr	r5, [pc, #52]	; (80178c0 <__libc_init_array+0x38>)
 801788c:	4c0d      	ldr	r4, [pc, #52]	; (80178c4 <__libc_init_array+0x3c>)
 801788e:	1b64      	subs	r4, r4, r5
 8017890:	10a4      	asrs	r4, r4, #2
 8017892:	2600      	movs	r6, #0
 8017894:	42a6      	cmp	r6, r4
 8017896:	d109      	bne.n	80178ac <__libc_init_array+0x24>
 8017898:	4d0b      	ldr	r5, [pc, #44]	; (80178c8 <__libc_init_array+0x40>)
 801789a:	4c0c      	ldr	r4, [pc, #48]	; (80178cc <__libc_init_array+0x44>)
 801789c:	f001 f988 	bl	8018bb0 <_init>
 80178a0:	1b64      	subs	r4, r4, r5
 80178a2:	10a4      	asrs	r4, r4, #2
 80178a4:	2600      	movs	r6, #0
 80178a6:	42a6      	cmp	r6, r4
 80178a8:	d105      	bne.n	80178b6 <__libc_init_array+0x2e>
 80178aa:	bd70      	pop	{r4, r5, r6, pc}
 80178ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80178b0:	4798      	blx	r3
 80178b2:	3601      	adds	r6, #1
 80178b4:	e7ee      	b.n	8017894 <__libc_init_array+0xc>
 80178b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80178ba:	4798      	blx	r3
 80178bc:	3601      	adds	r6, #1
 80178be:	e7f2      	b.n	80178a6 <__libc_init_array+0x1e>
 80178c0:	0801a6c8 	.word	0x0801a6c8
 80178c4:	0801a6c8 	.word	0x0801a6c8
 80178c8:	0801a6c8 	.word	0x0801a6c8
 80178cc:	0801a6cc 	.word	0x0801a6cc

080178d0 <__retarget_lock_acquire_recursive>:
 80178d0:	4770      	bx	lr

080178d2 <__retarget_lock_release_recursive>:
 80178d2:	4770      	bx	lr

080178d4 <_free_r>:
 80178d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178d6:	2900      	cmp	r1, #0
 80178d8:	d044      	beq.n	8017964 <_free_r+0x90>
 80178da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178de:	9001      	str	r0, [sp, #4]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	f1a1 0404 	sub.w	r4, r1, #4
 80178e6:	bfb8      	it	lt
 80178e8:	18e4      	addlt	r4, r4, r3
 80178ea:	f7ff ffa3 	bl	8017834 <__malloc_lock>
 80178ee:	4a1e      	ldr	r2, [pc, #120]	; (8017968 <_free_r+0x94>)
 80178f0:	9801      	ldr	r0, [sp, #4]
 80178f2:	6813      	ldr	r3, [r2, #0]
 80178f4:	b933      	cbnz	r3, 8017904 <_free_r+0x30>
 80178f6:	6063      	str	r3, [r4, #4]
 80178f8:	6014      	str	r4, [r2, #0]
 80178fa:	b003      	add	sp, #12
 80178fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017900:	f7ff bf9e 	b.w	8017840 <__malloc_unlock>
 8017904:	42a3      	cmp	r3, r4
 8017906:	d908      	bls.n	801791a <_free_r+0x46>
 8017908:	6825      	ldr	r5, [r4, #0]
 801790a:	1961      	adds	r1, r4, r5
 801790c:	428b      	cmp	r3, r1
 801790e:	bf01      	itttt	eq
 8017910:	6819      	ldreq	r1, [r3, #0]
 8017912:	685b      	ldreq	r3, [r3, #4]
 8017914:	1949      	addeq	r1, r1, r5
 8017916:	6021      	streq	r1, [r4, #0]
 8017918:	e7ed      	b.n	80178f6 <_free_r+0x22>
 801791a:	461a      	mov	r2, r3
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	b10b      	cbz	r3, 8017924 <_free_r+0x50>
 8017920:	42a3      	cmp	r3, r4
 8017922:	d9fa      	bls.n	801791a <_free_r+0x46>
 8017924:	6811      	ldr	r1, [r2, #0]
 8017926:	1855      	adds	r5, r2, r1
 8017928:	42a5      	cmp	r5, r4
 801792a:	d10b      	bne.n	8017944 <_free_r+0x70>
 801792c:	6824      	ldr	r4, [r4, #0]
 801792e:	4421      	add	r1, r4
 8017930:	1854      	adds	r4, r2, r1
 8017932:	42a3      	cmp	r3, r4
 8017934:	6011      	str	r1, [r2, #0]
 8017936:	d1e0      	bne.n	80178fa <_free_r+0x26>
 8017938:	681c      	ldr	r4, [r3, #0]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	6053      	str	r3, [r2, #4]
 801793e:	440c      	add	r4, r1
 8017940:	6014      	str	r4, [r2, #0]
 8017942:	e7da      	b.n	80178fa <_free_r+0x26>
 8017944:	d902      	bls.n	801794c <_free_r+0x78>
 8017946:	230c      	movs	r3, #12
 8017948:	6003      	str	r3, [r0, #0]
 801794a:	e7d6      	b.n	80178fa <_free_r+0x26>
 801794c:	6825      	ldr	r5, [r4, #0]
 801794e:	1961      	adds	r1, r4, r5
 8017950:	428b      	cmp	r3, r1
 8017952:	bf04      	itt	eq
 8017954:	6819      	ldreq	r1, [r3, #0]
 8017956:	685b      	ldreq	r3, [r3, #4]
 8017958:	6063      	str	r3, [r4, #4]
 801795a:	bf04      	itt	eq
 801795c:	1949      	addeq	r1, r1, r5
 801795e:	6021      	streq	r1, [r4, #0]
 8017960:	6054      	str	r4, [r2, #4]
 8017962:	e7ca      	b.n	80178fa <_free_r+0x26>
 8017964:	b003      	add	sp, #12
 8017966:	bd30      	pop	{r4, r5, pc}
 8017968:	2000214c 	.word	0x2000214c

0801796c <with_errno>:
 801796c:	b513      	push	{r0, r1, r4, lr}
 801796e:	4604      	mov	r4, r0
 8017970:	ed8d 0b00 	vstr	d0, [sp]
 8017974:	f7ff ff82 	bl	801787c <__errno>
 8017978:	ed9d 0b00 	vldr	d0, [sp]
 801797c:	6004      	str	r4, [r0, #0]
 801797e:	b002      	add	sp, #8
 8017980:	bd10      	pop	{r4, pc}

08017982 <xflow>:
 8017982:	b082      	sub	sp, #8
 8017984:	b158      	cbz	r0, 801799e <xflow+0x1c>
 8017986:	eeb1 7b40 	vneg.f64	d7, d0
 801798a:	ed8d 7b00 	vstr	d7, [sp]
 801798e:	ed9d 7b00 	vldr	d7, [sp]
 8017992:	2022      	movs	r0, #34	; 0x22
 8017994:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017998:	b002      	add	sp, #8
 801799a:	f7ff bfe7 	b.w	801796c <with_errno>
 801799e:	eeb0 7b40 	vmov.f64	d7, d0
 80179a2:	e7f2      	b.n	801798a <xflow+0x8>
 80179a4:	0000      	movs	r0, r0
	...

080179a8 <__math_uflow>:
 80179a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80179b0 <__math_uflow+0x8>
 80179ac:	f7ff bfe9 	b.w	8017982 <xflow>
 80179b0:	00000000 	.word	0x00000000
 80179b4:	10000000 	.word	0x10000000

080179b8 <__math_oflow>:
 80179b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80179c0 <__math_oflow+0x8>
 80179bc:	f7ff bfe1 	b.w	8017982 <xflow>
 80179c0:	00000000 	.word	0x00000000
 80179c4:	70000000 	.word	0x70000000

080179c8 <__math_divzero>:
 80179c8:	b082      	sub	sp, #8
 80179ca:	2800      	cmp	r0, #0
 80179cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80179d0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80179d4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80179d8:	ed8d 7b00 	vstr	d7, [sp]
 80179dc:	ed9d 0b00 	vldr	d0, [sp]
 80179e0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80179f0 <__math_divzero+0x28>
 80179e4:	2022      	movs	r0, #34	; 0x22
 80179e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80179ea:	b002      	add	sp, #8
 80179ec:	f7ff bfbe 	b.w	801796c <with_errno>
	...

080179f8 <__math_invalid>:
 80179f8:	eeb0 7b40 	vmov.f64	d7, d0
 80179fc:	eeb4 7b47 	vcmp.f64	d7, d7
 8017a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a04:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017a08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017a0c:	d602      	bvs.n	8017a14 <__math_invalid+0x1c>
 8017a0e:	2021      	movs	r0, #33	; 0x21
 8017a10:	f7ff bfac 	b.w	801796c <with_errno>
 8017a14:	4770      	bx	lr

08017a16 <__math_check_uflow>:
 8017a16:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a1e:	d102      	bne.n	8017a26 <__math_check_uflow+0x10>
 8017a20:	2022      	movs	r0, #34	; 0x22
 8017a22:	f7ff bfa3 	b.w	801796c <with_errno>
 8017a26:	4770      	bx	lr

08017a28 <__math_check_oflow>:
 8017a28:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017a48 <__math_check_oflow+0x20>
 8017a2c:	eeb0 7bc0 	vabs.f64	d7, d0
 8017a30:	eeb4 7b46 	vcmp.f64	d7, d6
 8017a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a38:	dd02      	ble.n	8017a40 <__math_check_oflow+0x18>
 8017a3a:	2022      	movs	r0, #34	; 0x22
 8017a3c:	f7ff bf96 	b.w	801796c <with_errno>
 8017a40:	4770      	bx	lr
 8017a42:	bf00      	nop
 8017a44:	f3af 8000 	nop.w
 8017a48:	ffffffff 	.word	0xffffffff
 8017a4c:	7fefffff 	.word	0x7fefffff

08017a50 <checkint>:
 8017a50:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017a54:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	b570      	push	{r4, r5, r6, lr}
 8017a5c:	dd2a      	ble.n	8017ab4 <checkint+0x64>
 8017a5e:	f240 4333 	movw	r3, #1075	; 0x433
 8017a62:	429a      	cmp	r2, r3
 8017a64:	dc24      	bgt.n	8017ab0 <checkint+0x60>
 8017a66:	1a9b      	subs	r3, r3, r2
 8017a68:	f1a3 0620 	sub.w	r6, r3, #32
 8017a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a70:	fa02 f403 	lsl.w	r4, r2, r3
 8017a74:	fa02 f606 	lsl.w	r6, r2, r6
 8017a78:	f1c3 0520 	rsb	r5, r3, #32
 8017a7c:	fa22 f505 	lsr.w	r5, r2, r5
 8017a80:	4334      	orrs	r4, r6
 8017a82:	432c      	orrs	r4, r5
 8017a84:	409a      	lsls	r2, r3
 8017a86:	ea20 0202 	bic.w	r2, r0, r2
 8017a8a:	ea21 0404 	bic.w	r4, r1, r4
 8017a8e:	4322      	orrs	r2, r4
 8017a90:	f1a3 0420 	sub.w	r4, r3, #32
 8017a94:	f1c3 0220 	rsb	r2, r3, #32
 8017a98:	d10c      	bne.n	8017ab4 <checkint+0x64>
 8017a9a:	40d8      	lsrs	r0, r3
 8017a9c:	fa01 f302 	lsl.w	r3, r1, r2
 8017aa0:	4318      	orrs	r0, r3
 8017aa2:	40e1      	lsrs	r1, r4
 8017aa4:	4308      	orrs	r0, r1
 8017aa6:	f000 0001 	and.w	r0, r0, #1
 8017aaa:	f1d0 0002 	rsbs	r0, r0, #2
 8017aae:	bd70      	pop	{r4, r5, r6, pc}
 8017ab0:	2002      	movs	r0, #2
 8017ab2:	e7fc      	b.n	8017aae <checkint+0x5e>
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	e7fa      	b.n	8017aae <checkint+0x5e>

08017ab8 <pow>:
 8017ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	ee10 4a90 	vmov	r4, s1
 8017ac0:	ed2d 8b0a 	vpush	{d8-d12}
 8017ac4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017ac8:	ee11 aa90 	vmov	sl, s3
 8017acc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017ad0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	ee10 5a10 	vmov	r5, s0
 8017ada:	ee11 0a10 	vmov	r0, s2
 8017ade:	b087      	sub	sp, #28
 8017ae0:	46c4      	mov	ip, r8
 8017ae2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8017ae6:	d806      	bhi.n	8017af6 <pow+0x3e>
 8017ae8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017aec:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8017af0:	2b7f      	cmp	r3, #127	; 0x7f
 8017af2:	f240 8156 	bls.w	8017da2 <pow+0x2ea>
 8017af6:	1802      	adds	r2, r0, r0
 8017af8:	eb4a 010a 	adc.w	r1, sl, sl
 8017afc:	f06f 0b01 	mvn.w	fp, #1
 8017b00:	1e57      	subs	r7, r2, #1
 8017b02:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8017b06:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8017b0a:	45bb      	cmp	fp, r7
 8017b0c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017b10:	d242      	bcs.n	8017b98 <pow+0xe0>
 8017b12:	ea52 0301 	orrs.w	r3, r2, r1
 8017b16:	f04f 0300 	mov.w	r3, #0
 8017b1a:	d10c      	bne.n	8017b36 <pow+0x7e>
 8017b1c:	196d      	adds	r5, r5, r5
 8017b1e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8017b22:	4164      	adcs	r4, r4
 8017b24:	42ab      	cmp	r3, r5
 8017b26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017b2a:	41a3      	sbcs	r3, r4
 8017b2c:	f0c0 808f 	bcc.w	8017c4e <pow+0x196>
 8017b30:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b34:	e02b      	b.n	8017b8e <pow+0xd6>
 8017b36:	4ed4      	ldr	r6, [pc, #848]	; (8017e88 <pow+0x3d0>)
 8017b38:	42b4      	cmp	r4, r6
 8017b3a:	bf08      	it	eq
 8017b3c:	429d      	cmpeq	r5, r3
 8017b3e:	d109      	bne.n	8017b54 <pow+0x9c>
 8017b40:	1800      	adds	r0, r0, r0
 8017b42:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8017b46:	eb4a 0a0a 	adc.w	sl, sl, sl
 8017b4a:	4283      	cmp	r3, r0
 8017b4c:	4bcf      	ldr	r3, [pc, #828]	; (8017e8c <pow+0x3d4>)
 8017b4e:	eb73 030a 	sbcs.w	r3, r3, sl
 8017b52:	e7eb      	b.n	8017b2c <pow+0x74>
 8017b54:	196d      	adds	r5, r5, r5
 8017b56:	48ce      	ldr	r0, [pc, #824]	; (8017e90 <pow+0x3d8>)
 8017b58:	4164      	adcs	r4, r4
 8017b5a:	42ab      	cmp	r3, r5
 8017b5c:	eb70 0604 	sbcs.w	r6, r0, r4
 8017b60:	d375      	bcc.n	8017c4e <pow+0x196>
 8017b62:	4281      	cmp	r1, r0
 8017b64:	bf08      	it	eq
 8017b66:	429a      	cmpeq	r2, r3
 8017b68:	d171      	bne.n	8017c4e <pow+0x196>
 8017b6a:	4aca      	ldr	r2, [pc, #808]	; (8017e94 <pow+0x3dc>)
 8017b6c:	4294      	cmp	r4, r2
 8017b6e:	bf08      	it	eq
 8017b70:	429d      	cmpeq	r5, r3
 8017b72:	d0dd      	beq.n	8017b30 <pow+0x78>
 8017b74:	4294      	cmp	r4, r2
 8017b76:	ea6f 0a0a 	mvn.w	sl, sl
 8017b7a:	bf34      	ite	cc
 8017b7c:	2400      	movcc	r4, #0
 8017b7e:	2401      	movcs	r4, #1
 8017b80:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8017b84:	4554      	cmp	r4, sl
 8017b86:	f040 81dc 	bne.w	8017f42 <pow+0x48a>
 8017b8a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8017b8e:	b007      	add	sp, #28
 8017b90:	ecbd 8b0a 	vpop	{d8-d12}
 8017b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b98:	196f      	adds	r7, r5, r5
 8017b9a:	eb44 0904 	adc.w	r9, r4, r4
 8017b9e:	1e7a      	subs	r2, r7, #1
 8017ba0:	f169 0300 	sbc.w	r3, r9, #0
 8017ba4:	4593      	cmp	fp, r2
 8017ba6:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017baa:	d225      	bcs.n	8017bf8 <pow+0x140>
 8017bac:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017bb0:	2c00      	cmp	r4, #0
 8017bb2:	da13      	bge.n	8017bdc <pow+0x124>
 8017bb4:	4651      	mov	r1, sl
 8017bb6:	f7ff ff4b 	bl	8017a50 <checkint>
 8017bba:	2801      	cmp	r0, #1
 8017bbc:	d10e      	bne.n	8017bdc <pow+0x124>
 8017bbe:	eeb1 0b40 	vneg.f64	d0, d0
 8017bc2:	ea57 0909 	orrs.w	r9, r7, r9
 8017bc6:	d10b      	bne.n	8017be0 <pow+0x128>
 8017bc8:	f1ba 0f00 	cmp.w	sl, #0
 8017bcc:	dadf      	bge.n	8017b8e <pow+0xd6>
 8017bce:	b007      	add	sp, #28
 8017bd0:	ecbd 8b0a 	vpop	{d8-d12}
 8017bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd8:	f7ff bef6 	b.w	80179c8 <__math_divzero>
 8017bdc:	2000      	movs	r0, #0
 8017bde:	e7f0      	b.n	8017bc2 <pow+0x10a>
 8017be0:	f1ba 0f00 	cmp.w	sl, #0
 8017be4:	dad3      	bge.n	8017b8e <pow+0xd6>
 8017be6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017bea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017bee:	ed8d 7b00 	vstr	d7, [sp]
 8017bf2:	ed9d 0b00 	vldr	d0, [sp]
 8017bf6:	e7ca      	b.n	8017b8e <pow+0xd6>
 8017bf8:	2c00      	cmp	r4, #0
 8017bfa:	da2b      	bge.n	8017c54 <pow+0x19c>
 8017bfc:	4651      	mov	r1, sl
 8017bfe:	f7ff ff27 	bl	8017a50 <checkint>
 8017c02:	b930      	cbnz	r0, 8017c12 <pow+0x15a>
 8017c04:	b007      	add	sp, #28
 8017c06:	ecbd 8b0a 	vpop	{d8-d12}
 8017c0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0e:	f7ff bef3 	b.w	80179f8 <__math_invalid>
 8017c12:	1e41      	subs	r1, r0, #1
 8017c14:	4248      	negs	r0, r1
 8017c16:	4148      	adcs	r0, r1
 8017c18:	0480      	lsls	r0, r0, #18
 8017c1a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017c1e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8017c22:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8017c26:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8017c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8017c2c:	d92d      	bls.n	8017c8a <pow+0x1d2>
 8017c2e:	4b96      	ldr	r3, [pc, #600]	; (8017e88 <pow+0x3d0>)
 8017c30:	2000      	movs	r0, #0
 8017c32:	429c      	cmp	r4, r3
 8017c34:	bf08      	it	eq
 8017c36:	4285      	cmpeq	r5, r0
 8017c38:	f43f af7a 	beq.w	8017b30 <pow+0x78>
 8017c3c:	f240 31bd 	movw	r1, #957	; 0x3bd
 8017c40:	428a      	cmp	r2, r1
 8017c42:	d80c      	bhi.n	8017c5e <pow+0x1a6>
 8017c44:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017c48:	42a8      	cmp	r0, r5
 8017c4a:	41a3      	sbcs	r3, r4
 8017c4c:	d204      	bcs.n	8017c58 <pow+0x1a0>
 8017c4e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8017c52:	e79c      	b.n	8017b8e <pow+0xd6>
 8017c54:	2000      	movs	r0, #0
 8017c56:	e7e4      	b.n	8017c22 <pow+0x16a>
 8017c58:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017c5c:	e797      	b.n	8017b8e <pow+0xd6>
 8017c5e:	2d01      	cmp	r5, #1
 8017c60:	eb74 0303 	sbcs.w	r3, r4, r3
 8017c64:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017c68:	bf34      	ite	cc
 8017c6a:	2301      	movcc	r3, #1
 8017c6c:	2300      	movcs	r3, #0
 8017c6e:	4296      	cmp	r6, r2
 8017c70:	bf8c      	ite	hi
 8017c72:	2600      	movhi	r6, #0
 8017c74:	2601      	movls	r6, #1
 8017c76:	42b3      	cmp	r3, r6
 8017c78:	f000 809b 	beq.w	8017db2 <pow+0x2fa>
 8017c7c:	b007      	add	sp, #28
 8017c7e:	ecbd 8b0a 	vpop	{d8-d12}
 8017c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c86:	f7ff be97 	b.w	80179b8 <__math_oflow>
 8017c8a:	f1bc 0f00 	cmp.w	ip, #0
 8017c8e:	d10b      	bne.n	8017ca8 <pow+0x1f0>
 8017c90:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8017e78 <pow+0x3c0>
 8017c94:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017c98:	ec53 2b17 	vmov	r2, r3, d7
 8017c9c:	ee17 5a10 	vmov	r5, s14
 8017ca0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017ca4:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017ca8:	4b7b      	ldr	r3, [pc, #492]	; (8017e98 <pow+0x3e0>)
 8017caa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017cae:	4423      	add	r3, r4
 8017cb0:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017cb4:	1519      	asrs	r1, r3, #20
 8017cb6:	0d1b      	lsrs	r3, r3, #20
 8017cb8:	051b      	lsls	r3, r3, #20
 8017cba:	1ae7      	subs	r7, r4, r3
 8017cbc:	4b77      	ldr	r3, [pc, #476]	; (8017e9c <pow+0x3e4>)
 8017cbe:	ee03 1a10 	vmov	s6, r1
 8017cc2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017cc6:	1e2e      	subs	r6, r5, #0
 8017cc8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8017ccc:	ec47 6b15 	vmov	d5, r6, r7
 8017cd0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017cd4:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017cd8:	ed93 7b00 	vldr	d7, [r3]
 8017cdc:	ed93 5b02 	vldr	d5, [r3, #8]
 8017ce0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017ce4:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017ce8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8017cec:	ee36 4b02 	vadd.f64	d4, d6, d2
 8017cf0:	ee32 2b44 	vsub.f64	d2, d2, d4
 8017cf4:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017cf8:	ed93 5b04 	vldr	d5, [r3, #16]
 8017cfc:	ee32 2b06 	vadd.f64	d2, d2, d6
 8017d00:	ee37 7b02 	vadd.f64	d7, d7, d2
 8017d04:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017d08:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017d0c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8017d10:	eeb0 9b40 	vmov.f64	d9, d0
 8017d14:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017d18:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8017d1c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8017d20:	ed93 5b06 	vldr	d5, [r3, #24]
 8017d24:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017d28:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017d2c:	ed93 4b08 	vldr	d4, [r3, #32]
 8017d30:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8017d34:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017d38:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017d3c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8017d40:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8017d44:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017d48:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017d4c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017d50:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017d54:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017d58:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017d5c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017d60:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017d64:	ee16 3a90 	vmov	r3, s13
 8017d68:	eeb0 5b46 	vmov.f64	d5, d6
 8017d6c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017d70:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017d74:	18b2      	adds	r2, r6, r2
 8017d76:	2a3e      	cmp	r2, #62	; 0x3e
 8017d78:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017d7c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8017d80:	ee38 8b07 	vadd.f64	d8, d8, d7
 8017d84:	eea1 5b08 	vfma.f64	d5, d1, d8
 8017d88:	d91b      	bls.n	8017dc2 <pow+0x30a>
 8017d8a:	2a00      	cmp	r2, #0
 8017d8c:	da0b      	bge.n	8017da6 <pow+0x2ee>
 8017d8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d92:	ee36 0b00 	vadd.f64	d0, d6, d0
 8017d96:	2800      	cmp	r0, #0
 8017d98:	f43f aef9 	beq.w	8017b8e <pow+0xd6>
 8017d9c:	eeb1 0b40 	vneg.f64	d0, d0
 8017da0:	e6f5      	b.n	8017b8e <pow+0xd6>
 8017da2:	2000      	movs	r0, #0
 8017da4:	e780      	b.n	8017ca8 <pow+0x1f0>
 8017da6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017daa:	d909      	bls.n	8017dc0 <pow+0x308>
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	f6bf af65 	bge.w	8017c7c <pow+0x1c4>
 8017db2:	b007      	add	sp, #28
 8017db4:	ecbd 8b0a 	vpop	{d8-d12}
 8017db8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dbc:	f7ff bdf4 	b.w	80179a8 <__math_uflow>
 8017dc0:	2600      	movs	r6, #0
 8017dc2:	4937      	ldr	r1, [pc, #220]	; (8017ea0 <pow+0x3e8>)
 8017dc4:	ed91 4b02 	vldr	d4, [r1, #8]
 8017dc8:	ed91 3b00 	vldr	d3, [r1]
 8017dcc:	eeb0 7b44 	vmov.f64	d7, d4
 8017dd0:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017dd4:	ee17 5a10 	vmov	r5, s14
 8017dd8:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017ddc:	ed91 4b04 	vldr	d4, [r1, #16]
 8017de0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017de4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017de8:	ed91 4b06 	vldr	d4, [r1, #24]
 8017dec:	18dc      	adds	r4, r3, r3
 8017dee:	f104 030f 	add.w	r3, r4, #15
 8017df2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8017df6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017dfa:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8017dfe:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017e02:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017e06:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8017e0a:	ed91 4b08 	vldr	d4, [r1, #32]
 8017e0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8017e12:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017e16:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017e1a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8017e1e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017e22:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017e26:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8017e2a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8017e2e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8017e32:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017e36:	1940      	adds	r0, r0, r5
 8017e38:	2700      	movs	r7, #0
 8017e3a:	eb17 020c 	adds.w	r2, r7, ip
 8017e3e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8017e42:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017e46:	2e00      	cmp	r6, #0
 8017e48:	d176      	bne.n	8017f38 <pow+0x480>
 8017e4a:	42bd      	cmp	r5, r7
 8017e4c:	db2a      	blt.n	8017ea4 <pow+0x3ec>
 8017e4e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8017e52:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8017e56:	4610      	mov	r0, r2
 8017e58:	ec41 0b10 	vmov	d0, r0, r1
 8017e5c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017e60:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8017e80 <pow+0x3c8>
 8017e64:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e68:	b007      	add	sp, #28
 8017e6a:	ecbd 8b0a 	vpop	{d8-d12}
 8017e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e72:	f7ff bdd9 	b.w	8017a28 <__math_check_oflow>
 8017e76:	bf00      	nop
 8017e78:	00000000 	.word	0x00000000
 8017e7c:	43300000 	.word	0x43300000
 8017e80:	00000000 	.word	0x00000000
 8017e84:	7f000000 	.word	0x7f000000
 8017e88:	3ff00000 	.word	0x3ff00000
 8017e8c:	fff00000 	.word	0xfff00000
 8017e90:	ffe00000 	.word	0xffe00000
 8017e94:	7fe00000 	.word	0x7fe00000
 8017e98:	c0196aab 	.word	0xc0196aab
 8017e9c:	080194a0 	.word	0x080194a0
 8017ea0:	08018c30 	.word	0x08018c30
 8017ea4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017ea8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8017eac:	4610      	mov	r0, r2
 8017eae:	ec41 0b15 	vmov	d5, r0, r1
 8017eb2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8017eb6:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017eba:	ee35 7b06 	vadd.f64	d7, d5, d6
 8017ebe:	eeb0 4bc7 	vabs.f64	d4, d7
 8017ec2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8017ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eca:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8017f48 <pow+0x490>
 8017ece:	d52a      	bpl.n	8017f26 <pow+0x46e>
 8017ed0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017ed4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017edc:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017ee0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8017ee4:	bf58      	it	pl
 8017ee6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8017eea:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017eee:	ee34 6b43 	vsub.f64	d6, d4, d3
 8017ef2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017ef6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8017efa:	ee36 6b03 	vadd.f64	d6, d6, d3
 8017efe:	ee36 7b44 	vsub.f64	d7, d6, d4
 8017f02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0a:	d104      	bne.n	8017f16 <pow+0x45e>
 8017f0c:	4632      	mov	r2, r6
 8017f0e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017f12:	ec43 2b17 	vmov	d7, r2, r3
 8017f16:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017f1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017f1e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8017f22:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017f26:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017f2a:	b007      	add	sp, #28
 8017f2c:	ecbd 8b0a 	vpop	{d8-d12}
 8017f30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f34:	f7ff bd6f 	b.w	8017a16 <__math_check_uflow>
 8017f38:	ec43 2b10 	vmov	d0, r2, r3
 8017f3c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017f40:	e625      	b.n	8017b8e <pow+0xd6>
 8017f42:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8017f50 <pow+0x498>
 8017f46:	e622      	b.n	8017b8e <pow+0xd6>
 8017f48:	00000000 	.word	0x00000000
 8017f4c:	00100000 	.word	0x00100000
	...

08017f58 <tan>:
 8017f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f5a:	eeb0 7b40 	vmov.f64	d7, d0
 8017f5e:	ee17 3a90 	vmov	r3, s15
 8017f62:	4a15      	ldr	r2, [pc, #84]	; (8017fb8 <tan+0x60>)
 8017f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	dc07      	bgt.n	8017f7c <tan+0x24>
 8017f6c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8017fb0 <tan+0x58>
 8017f70:	2001      	movs	r0, #1
 8017f72:	b005      	add	sp, #20
 8017f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f78:	f000 bbfa 	b.w	8018770 <__kernel_tan>
 8017f7c:	4a0f      	ldr	r2, [pc, #60]	; (8017fbc <tan+0x64>)
 8017f7e:	4293      	cmp	r3, r2
 8017f80:	dd04      	ble.n	8017f8c <tan+0x34>
 8017f82:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017f86:	b005      	add	sp, #20
 8017f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f8c:	4668      	mov	r0, sp
 8017f8e:	f000 f817 	bl	8017fc0 <__ieee754_rem_pio2>
 8017f92:	0040      	lsls	r0, r0, #1
 8017f94:	f000 0002 	and.w	r0, r0, #2
 8017f98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017f9c:	ed9d 0b00 	vldr	d0, [sp]
 8017fa0:	f1c0 0001 	rsb	r0, r0, #1
 8017fa4:	f000 fbe4 	bl	8018770 <__kernel_tan>
 8017fa8:	e7ed      	b.n	8017f86 <tan+0x2e>
 8017faa:	bf00      	nop
 8017fac:	f3af 8000 	nop.w
	...
 8017fb8:	3fe921fb 	.word	0x3fe921fb
 8017fbc:	7fefffff 	.word	0x7fefffff

08017fc0 <__ieee754_rem_pio2>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8017fc6:	ee17 5a90 	vmov	r5, s15
 8017fca:	4b99      	ldr	r3, [pc, #612]	; (8018230 <__ieee754_rem_pio2+0x270>)
 8017fcc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017fd0:	429e      	cmp	r6, r3
 8017fd2:	b088      	sub	sp, #32
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	dc07      	bgt.n	8017fe8 <__ieee754_rem_pio2+0x28>
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2300      	movs	r3, #0
 8017fdc:	ed84 0b00 	vstr	d0, [r4]
 8017fe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017fe4:	2000      	movs	r0, #0
 8017fe6:	e01b      	b.n	8018020 <__ieee754_rem_pio2+0x60>
 8017fe8:	4b92      	ldr	r3, [pc, #584]	; (8018234 <__ieee754_rem_pio2+0x274>)
 8017fea:	429e      	cmp	r6, r3
 8017fec:	dc3b      	bgt.n	8018066 <__ieee754_rem_pio2+0xa6>
 8017fee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8017ff2:	2d00      	cmp	r5, #0
 8017ff4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80181f0 <__ieee754_rem_pio2+0x230>
 8017ff8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8017ffc:	dd19      	ble.n	8018032 <__ieee754_rem_pio2+0x72>
 8017ffe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018002:	429e      	cmp	r6, r3
 8018004:	d00e      	beq.n	8018024 <__ieee754_rem_pio2+0x64>
 8018006:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80181f8 <__ieee754_rem_pio2+0x238>
 801800a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801800e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018012:	ed84 5b00 	vstr	d5, [r4]
 8018016:	ee37 7b46 	vsub.f64	d7, d7, d6
 801801a:	ed84 7b02 	vstr	d7, [r4, #8]
 801801e:	2001      	movs	r0, #1
 8018020:	b008      	add	sp, #32
 8018022:	bd70      	pop	{r4, r5, r6, pc}
 8018024:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018200 <__ieee754_rem_pio2+0x240>
 8018028:	ee37 7b46 	vsub.f64	d7, d7, d6
 801802c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018208 <__ieee754_rem_pio2+0x248>
 8018030:	e7eb      	b.n	801800a <__ieee754_rem_pio2+0x4a>
 8018032:	429e      	cmp	r6, r3
 8018034:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018038:	d00e      	beq.n	8018058 <__ieee754_rem_pio2+0x98>
 801803a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80181f8 <__ieee754_rem_pio2+0x238>
 801803e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018042:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018046:	ed84 5b00 	vstr	d5, [r4]
 801804a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018052:	ed84 7b02 	vstr	d7, [r4, #8]
 8018056:	e7e3      	b.n	8018020 <__ieee754_rem_pio2+0x60>
 8018058:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018200 <__ieee754_rem_pio2+0x240>
 801805c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018060:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018208 <__ieee754_rem_pio2+0x248>
 8018064:	e7eb      	b.n	801803e <__ieee754_rem_pio2+0x7e>
 8018066:	4b74      	ldr	r3, [pc, #464]	; (8018238 <__ieee754_rem_pio2+0x278>)
 8018068:	429e      	cmp	r6, r3
 801806a:	dc70      	bgt.n	801814e <__ieee754_rem_pio2+0x18e>
 801806c:	f000 fc9c 	bl	80189a8 <fabs>
 8018070:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018074:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018210 <__ieee754_rem_pio2+0x250>
 8018078:	eea0 7b06 	vfma.f64	d7, d0, d6
 801807c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018080:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018084:	ee17 0a90 	vmov	r0, s15
 8018088:	eeb1 4b45 	vneg.f64	d4, d5
 801808c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80181f0 <__ieee754_rem_pio2+0x230>
 8018090:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018094:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80181f8 <__ieee754_rem_pio2+0x238>
 8018098:	281f      	cmp	r0, #31
 801809a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801809e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80180a2:	dc08      	bgt.n	80180b6 <__ieee754_rem_pio2+0xf6>
 80180a4:	4b65      	ldr	r3, [pc, #404]	; (801823c <__ieee754_rem_pio2+0x27c>)
 80180a6:	1e42      	subs	r2, r0, #1
 80180a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180ac:	42b3      	cmp	r3, r6
 80180ae:	d002      	beq.n	80180b6 <__ieee754_rem_pio2+0xf6>
 80180b0:	ed84 6b00 	vstr	d6, [r4]
 80180b4:	e024      	b.n	8018100 <__ieee754_rem_pio2+0x140>
 80180b6:	ee16 3a90 	vmov	r3, s13
 80180ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80180be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80180c2:	2b10      	cmp	r3, #16
 80180c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80180c8:	ddf2      	ble.n	80180b0 <__ieee754_rem_pio2+0xf0>
 80180ca:	eeb0 6b40 	vmov.f64	d6, d0
 80180ce:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8018200 <__ieee754_rem_pio2+0x240>
 80180d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80180d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80180da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80180de:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8018208 <__ieee754_rem_pio2+0x248>
 80180e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80180e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80180ea:	ee13 3a90 	vmov	r3, s7
 80180ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80180f2:	1ad3      	subs	r3, r2, r3
 80180f4:	2b31      	cmp	r3, #49	; 0x31
 80180f6:	dc17      	bgt.n	8018128 <__ieee754_rem_pio2+0x168>
 80180f8:	eeb0 0b46 	vmov.f64	d0, d6
 80180fc:	ed84 3b00 	vstr	d3, [r4]
 8018100:	ed94 6b00 	vldr	d6, [r4]
 8018104:	2d00      	cmp	r5, #0
 8018106:	ee30 0b46 	vsub.f64	d0, d0, d6
 801810a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801810e:	ed84 0b02 	vstr	d0, [r4, #8]
 8018112:	da85      	bge.n	8018020 <__ieee754_rem_pio2+0x60>
 8018114:	eeb1 6b46 	vneg.f64	d6, d6
 8018118:	eeb1 0b40 	vneg.f64	d0, d0
 801811c:	ed84 6b00 	vstr	d6, [r4]
 8018120:	ed84 0b02 	vstr	d0, [r4, #8]
 8018124:	4240      	negs	r0, r0
 8018126:	e77b      	b.n	8018020 <__ieee754_rem_pio2+0x60>
 8018128:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8018218 <__ieee754_rem_pio2+0x258>
 801812c:	eeb0 0b46 	vmov.f64	d0, d6
 8018130:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018134:	ee36 6b40 	vsub.f64	d6, d6, d0
 8018138:	eea4 6b07 	vfma.f64	d6, d4, d7
 801813c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8018220 <__ieee754_rem_pio2+0x260>
 8018140:	eeb0 7b46 	vmov.f64	d7, d6
 8018144:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8018148:	ee30 6b47 	vsub.f64	d6, d0, d7
 801814c:	e7b0      	b.n	80180b0 <__ieee754_rem_pio2+0xf0>
 801814e:	4b3c      	ldr	r3, [pc, #240]	; (8018240 <__ieee754_rem_pio2+0x280>)
 8018150:	429e      	cmp	r6, r3
 8018152:	dd06      	ble.n	8018162 <__ieee754_rem_pio2+0x1a2>
 8018154:	ee30 7b40 	vsub.f64	d7, d0, d0
 8018158:	ed80 7b02 	vstr	d7, [r0, #8]
 801815c:	ed80 7b00 	vstr	d7, [r0]
 8018160:	e740      	b.n	8017fe4 <__ieee754_rem_pio2+0x24>
 8018162:	1532      	asrs	r2, r6, #20
 8018164:	ee10 0a10 	vmov	r0, s0
 8018168:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801816c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8018170:	ec41 0b17 	vmov	d7, r0, r1
 8018174:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018178:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8018228 <__ieee754_rem_pio2+0x268>
 801817c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018180:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018184:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018188:	ee27 7b05 	vmul.f64	d7, d7, d5
 801818c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018190:	a808      	add	r0, sp, #32
 8018192:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018196:	ee37 7b46 	vsub.f64	d7, d7, d6
 801819a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801819e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80181a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80181a6:	2103      	movs	r1, #3
 80181a8:	ed30 7b02 	vldmdb	r0!, {d7}
 80181ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80181b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b4:	460b      	mov	r3, r1
 80181b6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80181ba:	d0f5      	beq.n	80181a8 <__ieee754_rem_pio2+0x1e8>
 80181bc:	4921      	ldr	r1, [pc, #132]	; (8018244 <__ieee754_rem_pio2+0x284>)
 80181be:	9101      	str	r1, [sp, #4]
 80181c0:	2102      	movs	r1, #2
 80181c2:	9100      	str	r1, [sp, #0]
 80181c4:	a802      	add	r0, sp, #8
 80181c6:	4621      	mov	r1, r4
 80181c8:	f000 f83e 	bl	8018248 <__kernel_rem_pio2>
 80181cc:	2d00      	cmp	r5, #0
 80181ce:	f6bf af27 	bge.w	8018020 <__ieee754_rem_pio2+0x60>
 80181d2:	ed94 7b00 	vldr	d7, [r4]
 80181d6:	eeb1 7b47 	vneg.f64	d7, d7
 80181da:	ed84 7b00 	vstr	d7, [r4]
 80181de:	ed94 7b02 	vldr	d7, [r4, #8]
 80181e2:	eeb1 7b47 	vneg.f64	d7, d7
 80181e6:	ed84 7b02 	vstr	d7, [r4, #8]
 80181ea:	e79b      	b.n	8018124 <__ieee754_rem_pio2+0x164>
 80181ec:	f3af 8000 	nop.w
 80181f0:	54400000 	.word	0x54400000
 80181f4:	3ff921fb 	.word	0x3ff921fb
 80181f8:	1a626331 	.word	0x1a626331
 80181fc:	3dd0b461 	.word	0x3dd0b461
 8018200:	1a600000 	.word	0x1a600000
 8018204:	3dd0b461 	.word	0x3dd0b461
 8018208:	2e037073 	.word	0x2e037073
 801820c:	3ba3198a 	.word	0x3ba3198a
 8018210:	6dc9c883 	.word	0x6dc9c883
 8018214:	3fe45f30 	.word	0x3fe45f30
 8018218:	2e000000 	.word	0x2e000000
 801821c:	3ba3198a 	.word	0x3ba3198a
 8018220:	252049c1 	.word	0x252049c1
 8018224:	397b839a 	.word	0x397b839a
 8018228:	00000000 	.word	0x00000000
 801822c:	41700000 	.word	0x41700000
 8018230:	3fe921fb 	.word	0x3fe921fb
 8018234:	4002d97b 	.word	0x4002d97b
 8018238:	413921fb 	.word	0x413921fb
 801823c:	0801a4e8 	.word	0x0801a4e8
 8018240:	7fefffff 	.word	0x7fefffff
 8018244:	0801a568 	.word	0x0801a568

08018248 <__kernel_rem_pio2>:
 8018248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801824c:	ed2d 8b06 	vpush	{d8-d10}
 8018250:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8018254:	460f      	mov	r7, r1
 8018256:	9002      	str	r0, [sp, #8]
 8018258:	49c3      	ldr	r1, [pc, #780]	; (8018568 <__kernel_rem_pio2+0x320>)
 801825a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801825c:	9301      	str	r3, [sp, #4]
 801825e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8018262:	9901      	ldr	r1, [sp, #4]
 8018264:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8018266:	f112 0f14 	cmn.w	r2, #20
 801826a:	bfa8      	it	ge
 801826c:	1ed0      	subge	r0, r2, #3
 801826e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8018272:	bfaa      	itet	ge
 8018274:	2418      	movge	r4, #24
 8018276:	2000      	movlt	r0, #0
 8018278:	fb90 f0f4 	sdivge	r0, r0, r4
 801827c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8018550 <__kernel_rem_pio2+0x308>
 8018280:	f06f 0417 	mvn.w	r4, #23
 8018284:	fb00 4404 	mla	r4, r0, r4, r4
 8018288:	eba0 060a 	sub.w	r6, r0, sl
 801828c:	4414      	add	r4, r2
 801828e:	eb09 0c0a 	add.w	ip, r9, sl
 8018292:	ad1a      	add	r5, sp, #104	; 0x68
 8018294:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8018298:	2200      	movs	r2, #0
 801829a:	4562      	cmp	r2, ip
 801829c:	dd10      	ble.n	80182c0 <__kernel_rem_pio2+0x78>
 801829e:	9a01      	ldr	r2, [sp, #4]
 80182a0:	a91a      	add	r1, sp, #104	; 0x68
 80182a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80182a6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 80182aa:	f04f 0c00 	mov.w	ip, #0
 80182ae:	45cc      	cmp	ip, r9
 80182b0:	dc26      	bgt.n	8018300 <__kernel_rem_pio2+0xb8>
 80182b2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8018550 <__kernel_rem_pio2+0x308>
 80182b6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80182ba:	4616      	mov	r6, r2
 80182bc:	2500      	movs	r5, #0
 80182be:	e015      	b.n	80182ec <__kernel_rem_pio2+0xa4>
 80182c0:	42d6      	cmn	r6, r2
 80182c2:	d409      	bmi.n	80182d8 <__kernel_rem_pio2+0x90>
 80182c4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80182c8:	ee07 1a90 	vmov	s15, r1
 80182cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182d0:	eca5 7b02 	vstmia	r5!, {d7}
 80182d4:	3201      	adds	r2, #1
 80182d6:	e7e0      	b.n	801829a <__kernel_rem_pio2+0x52>
 80182d8:	eeb0 7b46 	vmov.f64	d7, d6
 80182dc:	e7f8      	b.n	80182d0 <__kernel_rem_pio2+0x88>
 80182de:	ecbe 5b02 	vldmia	lr!, {d5}
 80182e2:	ed96 6b00 	vldr	d6, [r6]
 80182e6:	3501      	adds	r5, #1
 80182e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80182ec:	4555      	cmp	r5, sl
 80182ee:	f1a6 0608 	sub.w	r6, r6, #8
 80182f2:	ddf4      	ble.n	80182de <__kernel_rem_pio2+0x96>
 80182f4:	eca8 7b02 	vstmia	r8!, {d7}
 80182f8:	f10c 0c01 	add.w	ip, ip, #1
 80182fc:	3208      	adds	r2, #8
 80182fe:	e7d6      	b.n	80182ae <__kernel_rem_pio2+0x66>
 8018300:	aa06      	add	r2, sp, #24
 8018302:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8018558 <__kernel_rem_pio2+0x310>
 8018306:	ed9f ab96 	vldr	d10, [pc, #600]	; 8018560 <__kernel_rem_pio2+0x318>
 801830a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801830e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8018312:	9204      	str	r2, [sp, #16]
 8018314:	9303      	str	r3, [sp, #12]
 8018316:	464d      	mov	r5, r9
 8018318:	00eb      	lsls	r3, r5, #3
 801831a:	9305      	str	r3, [sp, #20]
 801831c:	ab92      	add	r3, sp, #584	; 0x248
 801831e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8018322:	f10d 0b18 	add.w	fp, sp, #24
 8018326:	ab6a      	add	r3, sp, #424	; 0x1a8
 8018328:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801832c:	465e      	mov	r6, fp
 801832e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8018332:	4628      	mov	r0, r5
 8018334:	2800      	cmp	r0, #0
 8018336:	f1a2 0208 	sub.w	r2, r2, #8
 801833a:	dc48      	bgt.n	80183ce <__kernel_rem_pio2+0x186>
 801833c:	4620      	mov	r0, r4
 801833e:	f000 fb3f 	bl	80189c0 <scalbn>
 8018342:	eeb0 8b40 	vmov.f64	d8, d0
 8018346:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801834a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801834e:	f000 fbb7 	bl	8018ac0 <floor>
 8018352:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8018356:	eea0 8b47 	vfms.f64	d8, d0, d7
 801835a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801835e:	2c00      	cmp	r4, #0
 8018360:	ee17 8a90 	vmov	r8, s15
 8018364:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018368:	ee38 8b47 	vsub.f64	d8, d8, d7
 801836c:	dd41      	ble.n	80183f2 <__kernel_rem_pio2+0x1aa>
 801836e:	1e68      	subs	r0, r5, #1
 8018370:	ab06      	add	r3, sp, #24
 8018372:	f1c4 0c18 	rsb	ip, r4, #24
 8018376:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801837a:	fa46 f20c 	asr.w	r2, r6, ip
 801837e:	4490      	add	r8, r2
 8018380:	fa02 f20c 	lsl.w	r2, r2, ip
 8018384:	1ab6      	subs	r6, r6, r2
 8018386:	f1c4 0217 	rsb	r2, r4, #23
 801838a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801838e:	4116      	asrs	r6, r2
 8018390:	2e00      	cmp	r6, #0
 8018392:	dd3d      	ble.n	8018410 <__kernel_rem_pio2+0x1c8>
 8018394:	f04f 0c00 	mov.w	ip, #0
 8018398:	f108 0801 	add.w	r8, r8, #1
 801839c:	4660      	mov	r0, ip
 801839e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80183a2:	4565      	cmp	r5, ip
 80183a4:	dc6a      	bgt.n	801847c <__kernel_rem_pio2+0x234>
 80183a6:	2c00      	cmp	r4, #0
 80183a8:	dd04      	ble.n	80183b4 <__kernel_rem_pio2+0x16c>
 80183aa:	2c01      	cmp	r4, #1
 80183ac:	d07b      	beq.n	80184a6 <__kernel_rem_pio2+0x25e>
 80183ae:	2c02      	cmp	r4, #2
 80183b0:	f000 8083 	beq.w	80184ba <__kernel_rem_pio2+0x272>
 80183b4:	2e02      	cmp	r6, #2
 80183b6:	d12b      	bne.n	8018410 <__kernel_rem_pio2+0x1c8>
 80183b8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80183bc:	ee30 8b48 	vsub.f64	d8, d0, d8
 80183c0:	b330      	cbz	r0, 8018410 <__kernel_rem_pio2+0x1c8>
 80183c2:	4620      	mov	r0, r4
 80183c4:	f000 fafc 	bl	80189c0 <scalbn>
 80183c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80183cc:	e020      	b.n	8018410 <__kernel_rem_pio2+0x1c8>
 80183ce:	ee20 7b09 	vmul.f64	d7, d0, d9
 80183d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80183d6:	3801      	subs	r0, #1
 80183d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80183dc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80183e0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80183e4:	eca6 0a01 	vstmia	r6!, {s0}
 80183e8:	ed92 0b00 	vldr	d0, [r2]
 80183ec:	ee37 0b00 	vadd.f64	d0, d7, d0
 80183f0:	e7a0      	b.n	8018334 <__kernel_rem_pio2+0xec>
 80183f2:	d105      	bne.n	8018400 <__kernel_rem_pio2+0x1b8>
 80183f4:	1e6a      	subs	r2, r5, #1
 80183f6:	ab06      	add	r3, sp, #24
 80183f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80183fc:	15f6      	asrs	r6, r6, #23
 80183fe:	e7c7      	b.n	8018390 <__kernel_rem_pio2+0x148>
 8018400:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018404:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801840c:	da34      	bge.n	8018478 <__kernel_rem_pio2+0x230>
 801840e:	2600      	movs	r6, #0
 8018410:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018418:	f040 80aa 	bne.w	8018570 <__kernel_rem_pio2+0x328>
 801841c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8018420:	4658      	mov	r0, fp
 8018422:	2200      	movs	r2, #0
 8018424:	4548      	cmp	r0, r9
 8018426:	da50      	bge.n	80184ca <__kernel_rem_pio2+0x282>
 8018428:	2a00      	cmp	r2, #0
 801842a:	d06b      	beq.n	8018504 <__kernel_rem_pio2+0x2bc>
 801842c:	ab06      	add	r3, sp, #24
 801842e:	3c18      	subs	r4, #24
 8018430:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8018434:	2b00      	cmp	r3, #0
 8018436:	f000 8087 	beq.w	8018548 <__kernel_rem_pio2+0x300>
 801843a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801843e:	4620      	mov	r0, r4
 8018440:	f000 fabe 	bl	80189c0 <scalbn>
 8018444:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8018558 <__kernel_rem_pio2+0x310>
 8018448:	f10b 0201 	add.w	r2, fp, #1
 801844c:	a96a      	add	r1, sp, #424	; 0x1a8
 801844e:	00d3      	lsls	r3, r2, #3
 8018450:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018454:	465a      	mov	r2, fp
 8018456:	2a00      	cmp	r2, #0
 8018458:	f280 80b8 	bge.w	80185cc <__kernel_rem_pio2+0x384>
 801845c:	465a      	mov	r2, fp
 801845e:	2a00      	cmp	r2, #0
 8018460:	f2c0 80d6 	blt.w	8018610 <__kernel_rem_pio2+0x3c8>
 8018464:	a96a      	add	r1, sp, #424	; 0x1a8
 8018466:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801846a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8018550 <__kernel_rem_pio2+0x308>
 801846e:	4d3f      	ldr	r5, [pc, #252]	; (801856c <__kernel_rem_pio2+0x324>)
 8018470:	2000      	movs	r0, #0
 8018472:	ebab 0102 	sub.w	r1, fp, r2
 8018476:	e0c0      	b.n	80185fa <__kernel_rem_pio2+0x3b2>
 8018478:	2602      	movs	r6, #2
 801847a:	e78b      	b.n	8018394 <__kernel_rem_pio2+0x14c>
 801847c:	f8db 2000 	ldr.w	r2, [fp]
 8018480:	b958      	cbnz	r0, 801849a <__kernel_rem_pio2+0x252>
 8018482:	b122      	cbz	r2, 801848e <__kernel_rem_pio2+0x246>
 8018484:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8018488:	f8cb 2000 	str.w	r2, [fp]
 801848c:	2201      	movs	r2, #1
 801848e:	f10c 0c01 	add.w	ip, ip, #1
 8018492:	f10b 0b04 	add.w	fp, fp, #4
 8018496:	4610      	mov	r0, r2
 8018498:	e783      	b.n	80183a2 <__kernel_rem_pio2+0x15a>
 801849a:	ebae 0202 	sub.w	r2, lr, r2
 801849e:	f8cb 2000 	str.w	r2, [fp]
 80184a2:	4602      	mov	r2, r0
 80184a4:	e7f3      	b.n	801848e <__kernel_rem_pio2+0x246>
 80184a6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80184aa:	ab06      	add	r3, sp, #24
 80184ac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80184b0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80184b4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80184b8:	e77c      	b.n	80183b4 <__kernel_rem_pio2+0x16c>
 80184ba:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80184be:	ab06      	add	r3, sp, #24
 80184c0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80184c4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80184c8:	e7f4      	b.n	80184b4 <__kernel_rem_pio2+0x26c>
 80184ca:	ab06      	add	r3, sp, #24
 80184cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80184d0:	3801      	subs	r0, #1
 80184d2:	431a      	orrs	r2, r3
 80184d4:	e7a6      	b.n	8018424 <__kernel_rem_pio2+0x1dc>
 80184d6:	3201      	adds	r2, #1
 80184d8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80184dc:	2e00      	cmp	r6, #0
 80184de:	d0fa      	beq.n	80184d6 <__kernel_rem_pio2+0x28e>
 80184e0:	9b05      	ldr	r3, [sp, #20]
 80184e2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80184e6:	eb0d 0003 	add.w	r0, sp, r3
 80184ea:	9b01      	ldr	r3, [sp, #4]
 80184ec:	18ee      	adds	r6, r5, r3
 80184ee:	ab1a      	add	r3, sp, #104	; 0x68
 80184f0:	f105 0c01 	add.w	ip, r5, #1
 80184f4:	3898      	subs	r0, #152	; 0x98
 80184f6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80184fa:	442a      	add	r2, r5
 80184fc:	4562      	cmp	r2, ip
 80184fe:	da04      	bge.n	801850a <__kernel_rem_pio2+0x2c2>
 8018500:	4615      	mov	r5, r2
 8018502:	e709      	b.n	8018318 <__kernel_rem_pio2+0xd0>
 8018504:	9804      	ldr	r0, [sp, #16]
 8018506:	2201      	movs	r2, #1
 8018508:	e7e6      	b.n	80184d8 <__kernel_rem_pio2+0x290>
 801850a:	9b03      	ldr	r3, [sp, #12]
 801850c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018510:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8018514:	9305      	str	r3, [sp, #20]
 8018516:	ee07 3a90 	vmov	s15, r3
 801851a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801851e:	2500      	movs	r5, #0
 8018520:	eca6 7b02 	vstmia	r6!, {d7}
 8018524:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8018550 <__kernel_rem_pio2+0x308>
 8018528:	46b0      	mov	r8, r6
 801852a:	4555      	cmp	r5, sl
 801852c:	dd04      	ble.n	8018538 <__kernel_rem_pio2+0x2f0>
 801852e:	eca0 7b02 	vstmia	r0!, {d7}
 8018532:	f10c 0c01 	add.w	ip, ip, #1
 8018536:	e7e1      	b.n	80184fc <__kernel_rem_pio2+0x2b4>
 8018538:	ecbe 5b02 	vldmia	lr!, {d5}
 801853c:	ed38 6b02 	vldmdb	r8!, {d6}
 8018540:	3501      	adds	r5, #1
 8018542:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018546:	e7f0      	b.n	801852a <__kernel_rem_pio2+0x2e2>
 8018548:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801854c:	e76e      	b.n	801842c <__kernel_rem_pio2+0x1e4>
 801854e:	bf00      	nop
	...
 801855c:	3e700000 	.word	0x3e700000
 8018560:	00000000 	.word	0x00000000
 8018564:	41700000 	.word	0x41700000
 8018568:	0801a6b0 	.word	0x0801a6b0
 801856c:	0801a670 	.word	0x0801a670
 8018570:	4260      	negs	r0, r4
 8018572:	eeb0 0b48 	vmov.f64	d0, d8
 8018576:	f000 fa23 	bl	80189c0 <scalbn>
 801857a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8018758 <__kernel_rem_pio2+0x510>
 801857e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8018582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018586:	db18      	blt.n	80185ba <__kernel_rem_pio2+0x372>
 8018588:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8018760 <__kernel_rem_pio2+0x518>
 801858c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018590:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8018594:	aa06      	add	r2, sp, #24
 8018596:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801859a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801859e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80185a2:	f105 0b01 	add.w	fp, r5, #1
 80185a6:	ee10 3a10 	vmov	r3, s0
 80185aa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80185ae:	ee17 3a10 	vmov	r3, s14
 80185b2:	3418      	adds	r4, #24
 80185b4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80185b8:	e73f      	b.n	801843a <__kernel_rem_pio2+0x1f2>
 80185ba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80185be:	aa06      	add	r2, sp, #24
 80185c0:	ee10 3a10 	vmov	r3, s0
 80185c4:	46ab      	mov	fp, r5
 80185c6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80185ca:	e736      	b.n	801843a <__kernel_rem_pio2+0x1f2>
 80185cc:	a806      	add	r0, sp, #24
 80185ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80185d2:	9001      	str	r0, [sp, #4]
 80185d4:	ee07 0a90 	vmov	s15, r0
 80185d8:	3a01      	subs	r2, #1
 80185da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80185de:	ee27 7b00 	vmul.f64	d7, d7, d0
 80185e2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80185e6:	ed21 7b02 	vstmdb	r1!, {d7}
 80185ea:	e734      	b.n	8018456 <__kernel_rem_pio2+0x20e>
 80185ec:	ecb5 5b02 	vldmia	r5!, {d5}
 80185f0:	ecb4 6b02 	vldmia	r4!, {d6}
 80185f4:	3001      	adds	r0, #1
 80185f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80185fa:	4548      	cmp	r0, r9
 80185fc:	dc01      	bgt.n	8018602 <__kernel_rem_pio2+0x3ba>
 80185fe:	4288      	cmp	r0, r1
 8018600:	ddf4      	ble.n	80185ec <__kernel_rem_pio2+0x3a4>
 8018602:	a842      	add	r0, sp, #264	; 0x108
 8018604:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018608:	ed81 7b00 	vstr	d7, [r1]
 801860c:	3a01      	subs	r2, #1
 801860e:	e726      	b.n	801845e <__kernel_rem_pio2+0x216>
 8018610:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8018612:	2a02      	cmp	r2, #2
 8018614:	dc0a      	bgt.n	801862c <__kernel_rem_pio2+0x3e4>
 8018616:	2a00      	cmp	r2, #0
 8018618:	dc2e      	bgt.n	8018678 <__kernel_rem_pio2+0x430>
 801861a:	d047      	beq.n	80186ac <__kernel_rem_pio2+0x464>
 801861c:	f008 0007 	and.w	r0, r8, #7
 8018620:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8018624:	ecbd 8b06 	vpop	{d8-d10}
 8018628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801862e:	2a03      	cmp	r2, #3
 8018630:	d1f4      	bne.n	801861c <__kernel_rem_pio2+0x3d4>
 8018632:	a942      	add	r1, sp, #264	; 0x108
 8018634:	f1a3 0208 	sub.w	r2, r3, #8
 8018638:	440a      	add	r2, r1
 801863a:	4611      	mov	r1, r2
 801863c:	4658      	mov	r0, fp
 801863e:	2800      	cmp	r0, #0
 8018640:	f1a1 0108 	sub.w	r1, r1, #8
 8018644:	dc55      	bgt.n	80186f2 <__kernel_rem_pio2+0x4aa>
 8018646:	4659      	mov	r1, fp
 8018648:	2901      	cmp	r1, #1
 801864a:	f1a2 0208 	sub.w	r2, r2, #8
 801864e:	dc60      	bgt.n	8018712 <__kernel_rem_pio2+0x4ca>
 8018650:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8018768 <__kernel_rem_pio2+0x520>
 8018654:	aa42      	add	r2, sp, #264	; 0x108
 8018656:	4413      	add	r3, r2
 8018658:	f1bb 0f01 	cmp.w	fp, #1
 801865c:	dc69      	bgt.n	8018732 <__kernel_rem_pio2+0x4ea>
 801865e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8018662:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8018666:	2e00      	cmp	r6, #0
 8018668:	d16a      	bne.n	8018740 <__kernel_rem_pio2+0x4f8>
 801866a:	ed87 5b00 	vstr	d5, [r7]
 801866e:	ed87 6b02 	vstr	d6, [r7, #8]
 8018672:	ed87 7b04 	vstr	d7, [r7, #16]
 8018676:	e7d1      	b.n	801861c <__kernel_rem_pio2+0x3d4>
 8018678:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018768 <__kernel_rem_pio2+0x520>
 801867c:	aa42      	add	r2, sp, #264	; 0x108
 801867e:	4413      	add	r3, r2
 8018680:	465a      	mov	r2, fp
 8018682:	2a00      	cmp	r2, #0
 8018684:	da26      	bge.n	80186d4 <__kernel_rem_pio2+0x48c>
 8018686:	b35e      	cbz	r6, 80186e0 <__kernel_rem_pio2+0x498>
 8018688:	eeb1 7b46 	vneg.f64	d7, d6
 801868c:	ed87 7b00 	vstr	d7, [r7]
 8018690:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8018694:	aa44      	add	r2, sp, #272	; 0x110
 8018696:	2301      	movs	r3, #1
 8018698:	ee37 7b46 	vsub.f64	d7, d7, d6
 801869c:	459b      	cmp	fp, r3
 801869e:	da22      	bge.n	80186e6 <__kernel_rem_pio2+0x49e>
 80186a0:	b10e      	cbz	r6, 80186a6 <__kernel_rem_pio2+0x45e>
 80186a2:	eeb1 7b47 	vneg.f64	d7, d7
 80186a6:	ed87 7b02 	vstr	d7, [r7, #8]
 80186aa:	e7b7      	b.n	801861c <__kernel_rem_pio2+0x3d4>
 80186ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018768 <__kernel_rem_pio2+0x520>
 80186b0:	aa42      	add	r2, sp, #264	; 0x108
 80186b2:	4413      	add	r3, r2
 80186b4:	f1bb 0f00 	cmp.w	fp, #0
 80186b8:	da05      	bge.n	80186c6 <__kernel_rem_pio2+0x47e>
 80186ba:	b10e      	cbz	r6, 80186c0 <__kernel_rem_pio2+0x478>
 80186bc:	eeb1 7b47 	vneg.f64	d7, d7
 80186c0:	ed87 7b00 	vstr	d7, [r7]
 80186c4:	e7aa      	b.n	801861c <__kernel_rem_pio2+0x3d4>
 80186c6:	ed33 6b02 	vldmdb	r3!, {d6}
 80186ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80186ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80186d2:	e7ef      	b.n	80186b4 <__kernel_rem_pio2+0x46c>
 80186d4:	ed33 7b02 	vldmdb	r3!, {d7}
 80186d8:	3a01      	subs	r2, #1
 80186da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80186de:	e7d0      	b.n	8018682 <__kernel_rem_pio2+0x43a>
 80186e0:	eeb0 7b46 	vmov.f64	d7, d6
 80186e4:	e7d2      	b.n	801868c <__kernel_rem_pio2+0x444>
 80186e6:	ecb2 6b02 	vldmia	r2!, {d6}
 80186ea:	3301      	adds	r3, #1
 80186ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80186f0:	e7d4      	b.n	801869c <__kernel_rem_pio2+0x454>
 80186f2:	ed91 7b00 	vldr	d7, [r1]
 80186f6:	ed91 5b02 	vldr	d5, [r1, #8]
 80186fa:	3801      	subs	r0, #1
 80186fc:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018700:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018704:	ed81 6b00 	vstr	d6, [r1]
 8018708:	ee37 7b05 	vadd.f64	d7, d7, d5
 801870c:	ed81 7b02 	vstr	d7, [r1, #8]
 8018710:	e795      	b.n	801863e <__kernel_rem_pio2+0x3f6>
 8018712:	ed92 7b00 	vldr	d7, [r2]
 8018716:	ed92 5b02 	vldr	d5, [r2, #8]
 801871a:	3901      	subs	r1, #1
 801871c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018720:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018724:	ed82 6b00 	vstr	d6, [r2]
 8018728:	ee37 7b05 	vadd.f64	d7, d7, d5
 801872c:	ed82 7b02 	vstr	d7, [r2, #8]
 8018730:	e78a      	b.n	8018648 <__kernel_rem_pio2+0x400>
 8018732:	ed33 6b02 	vldmdb	r3!, {d6}
 8018736:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801873a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801873e:	e78b      	b.n	8018658 <__kernel_rem_pio2+0x410>
 8018740:	eeb1 5b45 	vneg.f64	d5, d5
 8018744:	eeb1 6b46 	vneg.f64	d6, d6
 8018748:	ed87 5b00 	vstr	d5, [r7]
 801874c:	eeb1 7b47 	vneg.f64	d7, d7
 8018750:	ed87 6b02 	vstr	d6, [r7, #8]
 8018754:	e78d      	b.n	8018672 <__kernel_rem_pio2+0x42a>
 8018756:	bf00      	nop
 8018758:	00000000 	.word	0x00000000
 801875c:	41700000 	.word	0x41700000
 8018760:	00000000 	.word	0x00000000
 8018764:	3e700000 	.word	0x3e700000
	...

08018770 <__kernel_tan>:
 8018770:	eeb0 7b40 	vmov.f64	d7, d0
 8018774:	ee17 3a90 	vmov	r3, s15
 8018778:	4989      	ldr	r1, [pc, #548]	; (80189a0 <__kernel_tan+0x230>)
 801877a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801877e:	428a      	cmp	r2, r1
 8018780:	b510      	push	{r4, lr}
 8018782:	dc33      	bgt.n	80187ec <__kernel_tan+0x7c>
 8018784:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8018788:	ee16 1a90 	vmov	r1, s13
 801878c:	2900      	cmp	r1, #0
 801878e:	d143      	bne.n	8018818 <__kernel_tan+0xa8>
 8018790:	ee10 4a10 	vmov	r4, s0
 8018794:	1c43      	adds	r3, r0, #1
 8018796:	4323      	orrs	r3, r4
 8018798:	4313      	orrs	r3, r2
 801879a:	d108      	bne.n	80187ae <__kernel_tan+0x3e>
 801879c:	f000 f904 	bl	80189a8 <fabs>
 80187a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80187a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80187a8:	eeb0 0b47 	vmov.f64	d0, d7
 80187ac:	bd10      	pop	{r4, pc}
 80187ae:	2801      	cmp	r0, #1
 80187b0:	d0fa      	beq.n	80187a8 <__kernel_tan+0x38>
 80187b2:	ee30 6b01 	vadd.f64	d6, d0, d1
 80187b6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80187ba:	ec53 2b16 	vmov	r2, r3, d6
 80187be:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80187c2:	460a      	mov	r2, r1
 80187c4:	ec43 2b15 	vmov	d5, r2, r3
 80187c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80187cc:	ec53 2b13 	vmov	r2, r3, d3
 80187d0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80187d4:	460a      	mov	r2, r1
 80187d6:	ec43 2b17 	vmov	d7, r2, r3
 80187da:	ee31 4b44 	vsub.f64	d4, d1, d4
 80187de:	eea5 6b07 	vfma.f64	d6, d5, d7
 80187e2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80187e6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80187ea:	e7dd      	b.n	80187a8 <__kernel_tan+0x38>
 80187ec:	496d      	ldr	r1, [pc, #436]	; (80189a4 <__kernel_tan+0x234>)
 80187ee:	428a      	cmp	r2, r1
 80187f0:	dd12      	ble.n	8018818 <__kernel_tan+0xa8>
 80187f2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8018920 <__kernel_tan+0x1b0>
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	bfb8      	it	lt
 80187fa:	eeb1 7b40 	vneglt.f64	d7, d0
 80187fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018802:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8018928 <__kernel_tan+0x1b8>
 8018806:	bfb8      	it	lt
 8018808:	eeb1 1b41 	vneglt.f64	d1, d1
 801880c:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018810:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8018930 <__kernel_tan+0x1c0>
 8018814:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018818:	ee27 5b07 	vmul.f64	d5, d7, d7
 801881c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018938 <__kernel_tan+0x1c8>
 8018820:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018824:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018940 <__kernel_tan+0x1d0>
 8018828:	eea6 4b03 	vfma.f64	d4, d6, d3
 801882c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018948 <__kernel_tan+0x1d8>
 8018830:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018834:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018950 <__kernel_tan+0x1e0>
 8018838:	eea3 4b06 	vfma.f64	d4, d3, d6
 801883c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018958 <__kernel_tan+0x1e8>
 8018840:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018844:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018960 <__kernel_tan+0x1f0>
 8018848:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018968 <__kernel_tan+0x1f8>
 801884c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8018850:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018970 <__kernel_tan+0x200>
 8018854:	eea6 3b02 	vfma.f64	d3, d6, d2
 8018858:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018978 <__kernel_tan+0x208>
 801885c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018860:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018980 <__kernel_tan+0x210>
 8018864:	eea2 3b06 	vfma.f64	d3, d2, d6
 8018868:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018988 <__kernel_tan+0x218>
 801886c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018870:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018990 <__kernel_tan+0x220>
 8018874:	494b      	ldr	r1, [pc, #300]	; (80189a4 <__kernel_tan+0x234>)
 8018876:	eea2 3b06 	vfma.f64	d3, d2, d6
 801887a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801887e:	eeb0 6b44 	vmov.f64	d6, d4
 8018882:	eeb0 4b41 	vmov.f64	d4, d1
 8018886:	eea3 6b05 	vfma.f64	d6, d3, d5
 801888a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801888e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8018998 <__kernel_tan+0x228>
 8018892:	eea4 1b05 	vfma.f64	d1, d4, d5
 8018896:	428a      	cmp	r2, r1
 8018898:	eea2 1b06 	vfma.f64	d1, d2, d6
 801889c:	ee37 5b01 	vadd.f64	d5, d7, d1
 80188a0:	dd1d      	ble.n	80188de <__kernel_tan+0x16e>
 80188a2:	ee25 3b05 	vmul.f64	d3, d5, d5
 80188a6:	179b      	asrs	r3, r3, #30
 80188a8:	ee06 0a90 	vmov	s13, r0
 80188ac:	f003 0302 	and.w	r3, r3, #2
 80188b0:	f1c3 0301 	rsb	r3, r3, #1
 80188b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80188b8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80188bc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 80188c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80188c4:	ee34 4b41 	vsub.f64	d4, d4, d1
 80188c8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80188cc:	eea7 6b45 	vfms.f64	d6, d7, d5
 80188d0:	ee07 3a90 	vmov	s15, r3
 80188d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80188d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80188dc:	e764      	b.n	80187a8 <__kernel_tan+0x38>
 80188de:	2801      	cmp	r0, #1
 80188e0:	d01a      	beq.n	8018918 <__kernel_tan+0x1a8>
 80188e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80188e6:	ec51 0b15 	vmov	r0, r1, d5
 80188ea:	2000      	movs	r0, #0
 80188ec:	ec41 0b13 	vmov	d3, r0, r1
 80188f0:	ee33 7b47 	vsub.f64	d7, d3, d7
 80188f4:	ee31 1b47 	vsub.f64	d1, d1, d7
 80188f8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80188fc:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8018900:	ec53 2b14 	vmov	r2, r3, d4
 8018904:	4602      	mov	r2, r0
 8018906:	ec43 2b17 	vmov	d7, r2, r3
 801890a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801890e:	eea1 6b07 	vfma.f64	d6, d1, d7
 8018912:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018916:	e747      	b.n	80187a8 <__kernel_tan+0x38>
 8018918:	eeb0 7b45 	vmov.f64	d7, d5
 801891c:	e744      	b.n	80187a8 <__kernel_tan+0x38>
 801891e:	bf00      	nop
 8018920:	54442d18 	.word	0x54442d18
 8018924:	3fe921fb 	.word	0x3fe921fb
 8018928:	33145c07 	.word	0x33145c07
 801892c:	3c81a626 	.word	0x3c81a626
	...
 8018938:	db605373 	.word	0xdb605373
 801893c:	bef375cb 	.word	0xbef375cb
 8018940:	a03792a6 	.word	0xa03792a6
 8018944:	3f147e88 	.word	0x3f147e88
 8018948:	f2f26501 	.word	0xf2f26501
 801894c:	3f4344d8 	.word	0x3f4344d8
 8018950:	c9560328 	.word	0xc9560328
 8018954:	3f6d6d22 	.word	0x3f6d6d22
 8018958:	8406d637 	.word	0x8406d637
 801895c:	3f9664f4 	.word	0x3f9664f4
 8018960:	1110fe7a 	.word	0x1110fe7a
 8018964:	3fc11111 	.word	0x3fc11111
 8018968:	74bf7ad4 	.word	0x74bf7ad4
 801896c:	3efb2a70 	.word	0x3efb2a70
 8018970:	32f0a7e9 	.word	0x32f0a7e9
 8018974:	3f12b80f 	.word	0x3f12b80f
 8018978:	1a8d1068 	.word	0x1a8d1068
 801897c:	3f3026f7 	.word	0x3f3026f7
 8018980:	fee08315 	.word	0xfee08315
 8018984:	3f57dbc8 	.word	0x3f57dbc8
 8018988:	e96e8493 	.word	0xe96e8493
 801898c:	3f8226e3 	.word	0x3f8226e3
 8018990:	1bb341fe 	.word	0x1bb341fe
 8018994:	3faba1ba 	.word	0x3faba1ba
 8018998:	55555563 	.word	0x55555563
 801899c:	3fd55555 	.word	0x3fd55555
 80189a0:	3e2fffff 	.word	0x3e2fffff
 80189a4:	3fe59427 	.word	0x3fe59427

080189a8 <fabs>:
 80189a8:	ec51 0b10 	vmov	r0, r1, d0
 80189ac:	ee10 2a10 	vmov	r2, s0
 80189b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80189b4:	ec43 2b10 	vmov	d0, r2, r3
 80189b8:	4770      	bx	lr
 80189ba:	0000      	movs	r0, r0
 80189bc:	0000      	movs	r0, r0
	...

080189c0 <scalbn>:
 80189c0:	ee10 1a90 	vmov	r1, s1
 80189c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80189c8:	b98b      	cbnz	r3, 80189ee <scalbn+0x2e>
 80189ca:	ee10 3a10 	vmov	r3, s0
 80189ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80189d2:	4319      	orrs	r1, r3
 80189d4:	d00a      	beq.n	80189ec <scalbn+0x2c>
 80189d6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8018a88 <scalbn+0xc8>
 80189da:	4b37      	ldr	r3, [pc, #220]	; (8018ab8 <scalbn+0xf8>)
 80189dc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80189e0:	4298      	cmp	r0, r3
 80189e2:	da0b      	bge.n	80189fc <scalbn+0x3c>
 80189e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8018a90 <scalbn+0xd0>
 80189e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80189ec:	4770      	bx	lr
 80189ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80189f2:	4293      	cmp	r3, r2
 80189f4:	d107      	bne.n	8018a06 <scalbn+0x46>
 80189f6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80189fa:	4770      	bx	lr
 80189fc:	ee10 1a90 	vmov	r1, s1
 8018a00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018a04:	3b36      	subs	r3, #54	; 0x36
 8018a06:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018a0a:	4290      	cmp	r0, r2
 8018a0c:	dd0d      	ble.n	8018a2a <scalbn+0x6a>
 8018a0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018a98 <scalbn+0xd8>
 8018a12:	ee10 3a90 	vmov	r3, s1
 8018a16:	eeb0 6b47 	vmov.f64	d6, d7
 8018a1a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8018aa0 <scalbn+0xe0>
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	fe27 7b05 	vselge.f64	d7, d7, d5
 8018a24:	ee27 0b06 	vmul.f64	d0, d7, d6
 8018a28:	4770      	bx	lr
 8018a2a:	4418      	add	r0, r3
 8018a2c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8018a30:	4298      	cmp	r0, r3
 8018a32:	dcec      	bgt.n	8018a0e <scalbn+0x4e>
 8018a34:	2800      	cmp	r0, #0
 8018a36:	dd0a      	ble.n	8018a4e <scalbn+0x8e>
 8018a38:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8018a3c:	ec53 2b10 	vmov	r2, r3, d0
 8018a40:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8018a44:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018a48:	ec43 2b10 	vmov	d0, r2, r3
 8018a4c:	4770      	bx	lr
 8018a4e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8018a52:	da09      	bge.n	8018a68 <scalbn+0xa8>
 8018a54:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018a90 <scalbn+0xd0>
 8018a58:	ee10 3a90 	vmov	r3, s1
 8018a5c:	eeb0 6b47 	vmov.f64	d6, d7
 8018a60:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8018aa8 <scalbn+0xe8>
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	e7db      	b.n	8018a20 <scalbn+0x60>
 8018a68:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8018a6c:	ec53 2b10 	vmov	r2, r3, d0
 8018a70:	3036      	adds	r0, #54	; 0x36
 8018a72:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8018a76:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018a7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018ab0 <scalbn+0xf0>
 8018a7e:	ec43 2b10 	vmov	d0, r2, r3
 8018a82:	e7b1      	b.n	80189e8 <scalbn+0x28>
 8018a84:	f3af 8000 	nop.w
 8018a88:	00000000 	.word	0x00000000
 8018a8c:	43500000 	.word	0x43500000
 8018a90:	c2f8f359 	.word	0xc2f8f359
 8018a94:	01a56e1f 	.word	0x01a56e1f
 8018a98:	8800759c 	.word	0x8800759c
 8018a9c:	7e37e43c 	.word	0x7e37e43c
 8018aa0:	8800759c 	.word	0x8800759c
 8018aa4:	fe37e43c 	.word	0xfe37e43c
 8018aa8:	c2f8f359 	.word	0xc2f8f359
 8018aac:	81a56e1f 	.word	0x81a56e1f
 8018ab0:	00000000 	.word	0x00000000
 8018ab4:	3c900000 	.word	0x3c900000
 8018ab8:	ffff3cb0 	.word	0xffff3cb0
 8018abc:	00000000 	.word	0x00000000

08018ac0 <floor>:
 8018ac0:	ee10 1a90 	vmov	r1, s1
 8018ac4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018ac8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018acc:	2b13      	cmp	r3, #19
 8018ace:	b530      	push	{r4, r5, lr}
 8018ad0:	ee10 0a10 	vmov	r0, s0
 8018ad4:	ee10 5a10 	vmov	r5, s0
 8018ad8:	dc31      	bgt.n	8018b3e <floor+0x7e>
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	da15      	bge.n	8018b0a <floor+0x4a>
 8018ade:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018ba0 <floor+0xe0>
 8018ae2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018ae6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aee:	dd07      	ble.n	8018b00 <floor+0x40>
 8018af0:	2900      	cmp	r1, #0
 8018af2:	da4e      	bge.n	8018b92 <floor+0xd2>
 8018af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018af8:	4308      	orrs	r0, r1
 8018afa:	d04d      	beq.n	8018b98 <floor+0xd8>
 8018afc:	492a      	ldr	r1, [pc, #168]	; (8018ba8 <floor+0xe8>)
 8018afe:	2000      	movs	r0, #0
 8018b00:	460b      	mov	r3, r1
 8018b02:	4602      	mov	r2, r0
 8018b04:	ec43 2b10 	vmov	d0, r2, r3
 8018b08:	e020      	b.n	8018b4c <floor+0x8c>
 8018b0a:	4a28      	ldr	r2, [pc, #160]	; (8018bac <floor+0xec>)
 8018b0c:	411a      	asrs	r2, r3
 8018b0e:	ea01 0402 	and.w	r4, r1, r2
 8018b12:	4304      	orrs	r4, r0
 8018b14:	d01a      	beq.n	8018b4c <floor+0x8c>
 8018b16:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018ba0 <floor+0xe0>
 8018b1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018b1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b26:	ddeb      	ble.n	8018b00 <floor+0x40>
 8018b28:	2900      	cmp	r1, #0
 8018b2a:	bfbe      	ittt	lt
 8018b2c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018b30:	fa40 f303 	asrlt.w	r3, r0, r3
 8018b34:	18c9      	addlt	r1, r1, r3
 8018b36:	ea21 0102 	bic.w	r1, r1, r2
 8018b3a:	2000      	movs	r0, #0
 8018b3c:	e7e0      	b.n	8018b00 <floor+0x40>
 8018b3e:	2b33      	cmp	r3, #51	; 0x33
 8018b40:	dd05      	ble.n	8018b4e <floor+0x8e>
 8018b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b46:	d101      	bne.n	8018b4c <floor+0x8c>
 8018b48:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018b4c:	bd30      	pop	{r4, r5, pc}
 8018b4e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b56:	40e2      	lsrs	r2, r4
 8018b58:	4210      	tst	r0, r2
 8018b5a:	d0f7      	beq.n	8018b4c <floor+0x8c>
 8018b5c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8018ba0 <floor+0xe0>
 8018b60:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018b64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b6c:	ddc8      	ble.n	8018b00 <floor+0x40>
 8018b6e:	2900      	cmp	r1, #0
 8018b70:	da02      	bge.n	8018b78 <floor+0xb8>
 8018b72:	2b14      	cmp	r3, #20
 8018b74:	d103      	bne.n	8018b7e <floor+0xbe>
 8018b76:	3101      	adds	r1, #1
 8018b78:	ea20 0002 	bic.w	r0, r0, r2
 8018b7c:	e7c0      	b.n	8018b00 <floor+0x40>
 8018b7e:	2401      	movs	r4, #1
 8018b80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018b84:	fa04 f303 	lsl.w	r3, r4, r3
 8018b88:	4418      	add	r0, r3
 8018b8a:	4285      	cmp	r5, r0
 8018b8c:	bf88      	it	hi
 8018b8e:	1909      	addhi	r1, r1, r4
 8018b90:	e7f2      	b.n	8018b78 <floor+0xb8>
 8018b92:	2000      	movs	r0, #0
 8018b94:	4601      	mov	r1, r0
 8018b96:	e7b3      	b.n	8018b00 <floor+0x40>
 8018b98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018b9c:	e7b0      	b.n	8018b00 <floor+0x40>
 8018b9e:	bf00      	nop
 8018ba0:	8800759c 	.word	0x8800759c
 8018ba4:	7e37e43c 	.word	0x7e37e43c
 8018ba8:	bff00000 	.word	0xbff00000
 8018bac:	000fffff 	.word	0x000fffff

08018bb0 <_init>:
 8018bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bb2:	bf00      	nop
 8018bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bb6:	bc08      	pop	{r3}
 8018bb8:	469e      	mov	lr, r3
 8018bba:	4770      	bx	lr

08018bbc <_fini>:
 8018bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bbe:	bf00      	nop
 8018bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bc2:	bc08      	pop	{r3}
 8018bc4:	469e      	mov	lr, r3
 8018bc6:	4770      	bx	lr
